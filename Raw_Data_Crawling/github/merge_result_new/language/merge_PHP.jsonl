{"index": 1, "cve_id": "CVE-2016-4069", "cwe_id": ["CWE-352"], "cve_language": "PHP", "cve_description": "Cross-site request forgery (CSRF) vulnerability in Roundcube Webmail before 1.1.5 allows remote attackers to hijack the authentication of users for requests that download attachments and cause a denial of service (disk consumption) via unspecified vectors.", "cvss": "8.8", "publish_date": "August 25, 2016", "AV": "NETWORK", "AC": "LOW", "PR": "NONE", "UI": "REQUIRED", "S": "UNCHANGED", "C": "HIGH", "I": "HIGH", "A": "HIGH", "commit_id": "4a408843b0ef816daf70a472a02b78cd6073a4d5", "commit_message": "Protect download urls against CSRF using unique request tokens (#1490642)\nSend X-Frame-Options headers with every HTTP response", "commit_date": "2016-03-06T13:31:07Z", "project": "roundcube/roundcubemail", "url": "https://api.github.com/repos/roundcube/roundcubemail/commits/4a408843b0ef816daf70a472a02b78cd6073a4d5", "html_url": "https://github.com/roundcube/roundcubemail/commit/4a408843b0ef816daf70a472a02b78cd6073a4d5", "windows_before": "", "windows_after": "", "parents": [{"commit_id_before": "d4df3748cfaacadf52b19eb37b2a476df80525a9", "url_before": "https://api.github.com/repos/roundcube/roundcubemail/commits/d4df3748cfaacadf52b19eb37b2a476df80525a9", "html_url_before": "https://github.com/roundcube/roundcubemail/commit/d4df3748cfaacadf52b19eb37b2a476df80525a9"}], "details": [{"raw_url": "https://github.com/roundcube/roundcubemail/raw/4a408843b0ef816daf70a472a02b78cd6073a4d5/plugins/enigma/enigma.js", "code": "/* Enigma Plugin */\n\nwindow.rcmail && rcmail.addEventListener('init', function(evt) {\n    if (rcmail.env.task == 'settings') {\n        rcmail.register_command('plugin.enigma', function() { rcmail.goto_url('plugin.enigma') }, true);\n\n        if (rcmail.gui_objects.keyslist) {\n            rcmail.keys_list = new rcube_list_widget(rcmail.gui_objects.keyslist,\n                {multiselect:true, draggable:false, keyboard:false});\n            rcmail.keys_list\n                .addEventListener('select', function(o) { rcmail.enigma_keylist_select(o); })\n                .addEventListener('keypress', function(o) { rcmail.enigma_keylist_keypress(o); })\n                .init()\n                .focus();\n\n            rcmail.enigma_list();\n\n            rcmail.register_command('firstpage', function(props) { return rcmail.enigma_list_page('first'); });\n            rcmail.register_command('previouspage', function(props) { return rcmail.enigma_list_page('previous'); });\n            rcmail.register_command('nextpage', function(props) { return rcmail.enigma_list_page('next'); });\n            rcmail.register_command('lastpage', function(props) { return rcmail.enigma_list_page('last'); });\n        }\n\n        if (rcmail.env.action == 'plugin.enigmakeys') {\n            rcmail.register_command('search', function(props) {return rcmail.enigma_search(props); }, true);\n            rcmail.register_command('reset-search', function(props) {return rcmail.enigma_search_reset(props); }, true);\n            rcmail.register_command('plugin.enigma-import', function() { rcmail.enigma_import(); }, true);\n            rcmail.register_command('plugin.enigma-key-export', function() { rcmail.enigma_export(); });\n            rcmail.register_command('plugin.enigma-key-export-selected', function() { rcmail.enigma_export(true); });\n            rcmail.register_command('plugin.enigma-key-import', function() { rcmail.enigma_key_import(); }, true);\n            rcmail.register_command('plugin.enigma-key-delete', function(props) { return rcmail.enigma_delete(); });\n            rcmail.register_command('plugin.enigma-key-create', function(props) { return rcmail.enigma_key_create(); }, true);\n            rcmail.register_command('plugin.enigma-key-save', function(props) { return rcmail.enigma_key_create_save(); }, true);\n\n            rcmail.addEventListener('responseafterplugin.enigmakeys', function() {\n                rcmail.enable_command('plugin.enigma-key-export', rcmail.env.rowcount > 0);\n            });\n        }\n    }\n    else if (rcmail.env.task == 'mail') {\n        if (rcmail.env.action == 'compose') {\n            rcmail.addEventListener('beforesend', function(props) { rcmail.enigma_beforesend_handler(props); })\n                .addEventListener('beforesavedraft', function(props) { rcmail.enigma_beforesavedraft_handler(props); });\n\n            $('input,label', $('#enigmamenu')).mouseup(function(e) {\n                // don't close the menu on mouse click inside\n                e.stopPropagation();\n            });\n        }\n\n        $.each(['encrypt', 'sign'], function() {\n            if (rcmail.env['enigma_force_' + this])\n                $('[name=\"_enigma_' + this + '\"]').prop('checked', true);\n        });\n\n        if (rcmail.env.enigma_password_request) {\n            rcmail.enigma_password_request(rcmail.env.enigma_password_request);\n        }\n    }\n});\n\n\n/*********************************************************/\n/*********    Enigma Settings/Keys/Certs UI      *********/\n/*********************************************************/\n\n// Display key(s) import form\nrcube_webmail.prototype.enigma_key_import = function()\n{\n    this.enigma_loadframe('&_action=plugin.enigmakeys&_a=import');\n};\n\n// Display key(s) generation form\nrcube_webmail.prototype.enigma_key_create = function()\n{\n    this.enigma_loadframe('&_action=plugin.enigmakeys&_a=create');\n};\n\n// Generate key(s) and submit them\nrcube_webmail.prototype.enigma_key_create_save = function()\n{\n    var options, lock,\n        user = $('#key-ident > option').filter(':selected').text(),\n        password = $('#key-pass').val(),\n        confirm = $('#key-pass-confirm').val(),\n        size = $('#key-size').val();\n\n    // validate the form\n    if (!password || !confirm)\n        return alert(this.get_label('enigma.formerror'));\n\n    if (password != confirm)\n        return alert(this.get_label('enigma.passwordsdiffer'));\n\n    if (user.match(/^<[^>]+>$/))\n        return alert(this.get_label('enigma.nonameident'));\n\n    // generate keys\n    // use OpenPGP.js if browser supports required features\n    if (window.openpgp && window.crypto && (window.crypto.getRandomValues || window.crypto.subtle)) {\n        lock = this.set_busy(true, 'enigma.keygenerating');\n        options = {\n            numBits: size,\n            userId: user,\n            passphrase: password\n        };\n\n        openpgp.generateKeyPair(options).then(function(keypair) {\n            // success\n            var post = {_a: 'import', _keys: keypair.privateKeyArmored};\n\n            // send request to server\n            rcmail.http_post('plugin.enigmakeys', post, lock);\n        }, function(error) {\n            // failure\n            rcmail.set_busy(false, null, lock);\n            rcmail.display_message(rcmail.get_label('enigma.keygenerateerror'), 'error');\n        });\n    }\n    // generate keys on the server\n    else if (rcmail.env.enigma_keygen_server) {\n        lock = this.set_busy(true, 'enigma.keygenerating');\n        options = {_a: 'generate', _user: user, _password: password, _size: size};\n        rcmail.http_post('plugin.enigmakeys', options, lock);\n    }\n    else {\n        rcmail.display_message(rcmail.get_label('enigma.keygennosupport'), 'error');\n    }\n};\n\n// Action executed after successful key generation and import\nrcube_webmail.prototype.enigma_key_create_success = function()\n{\n    parent.rcmail.enigma_list(1);\n};\n\n// Delete key(s)\nrcube_webmail.prototype.enigma_delete = function()\n{\n    var keys = this.keys_list.get_selection();\n\n    if (!keys.length || !confirm(this.get_label('enigma.keyremoveconfirm')))\n        return;\n\n    var lock = this.display_message(this.get_label('enigma.keyremoving'), 'loading'),\n        post = {_a: 'delete', _keys: keys};\n\n    // send request to server\n    this.http_post('plugin.enigmakeys', post, lock);\n};\n\n// Export key(s)\nrcube_webmail.prototype.enigma_export = function(selected)\n{\n    var keys = selected ? this.keys_list.get_selection().join(',') : '*';\n\n    if (!keys.length)\n        return;\n\n    this.goto_url('plugin.enigmakeys', {_a: 'export', _keys: keys}, false, true);\n};\n\n// Submit key(s) import form\nrcube_webmail.prototype.enigma_import = function()\n{\n    var form, file;\n\n    if (form = this.gui_objects.importform) {\n        file = document.getElementById('rcmimportfile');\n        if (file && !file.value) {\n            alert(this.get_label('selectimportfile'));\n            return;\n        }\n\n        var lock = this.set_busy(true, 'importwait');\n\n        form.action = this.add_url(form.action, '_unlock', lock);\n        form.submit();\n\n        this.lock_form(form, true);\n   }\n};\n\n// list row selection handler\nrcube_webmail.prototype.enigma_keylist_select = function(list)\n{\n    var id = list.get_single_selection(), url;\n\n    if (id)\n        url = '&_action=plugin.enigmakeys&_a=info&_id=' + id;\n\n    this.enigma_loadframe(url);\n    this.enable_command('plugin.enigma-key-delete', 'plugin.enigma-key-export-selected', list.selection.length > 0);\n};\n\nrcube_webmail.prototype.enigma_keylist_keypress = function(list)\n{\n    if (list.modkey == CONTROL_KEY)\n        return;\n\n    if (list.key_pressed == list.DELETE_KEY || list.key_pressed == list.BACKSPACE_KEY)\n        this.command('plugin.enigma-key-delete');\n    else if (list.key_pressed == 33)\n        this.command('previouspage');\n    else if (list.key_pressed == 34)\n        this.command('nextpage');\n};\n\n// load key frame\nrcube_webmail.prototype.enigma_loadframe = function(url)\n{\n    var frm, win;\n\n    if (this.env.contentframe && window.frames && (frm = window.frames[this.env.contentframe])) {\n        if (!url && (win = window.frames[this.env.contentframe])) {\n            if (win.location && win.location.href.indexOf(this.env.blankpage) < 0)\n                win.location.href = this.env.blankpage;\n            return;\n        }\n\n        this.env.frame_lock = this.set_busy(true, 'loading');\n        frm.location.href = this.env.comm_path + '&_framed=1&' + url;\n    }\n};\n\n// Search keys/certs\nrcube_webmail.prototype.enigma_search = function(props)\n{\n    if (!props && this.gui_objects.qsearchbox)\n        props = this.gui_objects.qsearchbox.value;\n\n    if (props || this.env.search_request) {\n        var params = {'_a': 'search', '_q': urlencode(props)},\n          lock = this.set_busy(true, 'searching');\n//        if (this.gui_objects.search_filter)\n  //          addurl += '&_filter=' + this.gui_objects.search_filter.value;\n        this.env.current_page = 1;\n        this.enigma_loadframe();\n        this.enigma_clear_list();\n        this.http_post('plugin.enigmakeys', params, lock);\n    }\n\n    return false;\n}\n\n// Reset search filter and the list\nrcube_webmail.prototype.enigma_search_reset = function(props)\n{\n    var s = this.env.search_request;\n    this.reset_qsearch();\n\n    if (s) {\n        this.enigma_loadframe();\n        this.enigma_clear_list();\n\n        // refresh the list\n        this.enigma_list();\n    }\n\n    return false;\n}\n\n// Keys/certs listing\nrcube_webmail.prototype.enigma_list = function(page)\n{\n    var params = {'_a': 'list'},\n      lock = this.set_busy(true, 'loading');\n\n    this.env.current_page = page ? page : 1;\n\n    if (this.env.search_request)\n        params._q = this.env.search_request;\n    if (page)\n        params._p = page;\n\n    this.enigma_clear_list();\n    this.http_post('plugin.enigmakeys', params, lock);\n}\n\n// Change list page\nrcube_webmail.prototype.enigma_list_page = function(page)\n{\n    if (page == 'next')\n        page = this.env.current_page + 1;\n    else if (page == 'last')\n        page = this.env.pagecount;\n    else if (page == 'prev' && this.env.current_page > 1)\n        page = this.env.current_page - 1;\n    else if (page == 'first' && this.env.current_page > 1)\n        page = 1;\n\n    this.enigma_list(page);\n}\n\n// Remove list rows\nrcube_webmail.prototype.enigma_clear_list = function()\n{\n    this.enigma_loadframe();\n    if (this.keys_list)\n        this.keys_list.clear(true);\n\n    this.enable_command('plugin.enigma-key-delete', 'plugin.enigma-key-delete-selected', false);\n}\n\n// Adds a row to the list\nrcube_webmail.prototype.enigma_add_list_row = function(r)\n{\n    if (!this.gui_objects.keyslist || !this.keys_list)\n        return false;\n\n    var list = this.keys_list,\n        tbody = this.gui_objects.keyslist.tBodies[0],\n        rowcount = tbody.rows.length,\n        even = rowcount%2,\n        css_class = 'message'\n            + (even ? ' even' : ' odd'),\n        // for performance use DOM instead of jQuery here\n        row = document.createElement('tr'),\n        col = document.createElement('td');\n\n    row.id = 'rcmrow' + r.id;\n    row.className = css_class;\n\n    col.innerHTML = r.name;\n    row.appendChild(col);\n    list.insert_row(row);\n}\n\n\n/*********************************************************/\n/*********        Enigma Message methods         *********/\n/*********************************************************/\n\n// handle message send/save action\nrcube_webmail.prototype.enigma_beforesend_handler = function(props)\n{\n    this.env.last_action = 'send';\n    this.enigma_compose_handler(props);\n}\n\nrcube_webmail.prototype.enigma_beforesavedraft_handler = function(props)\n{\n    this.env.last_action = 'savedraft';\n    this.enigma_compose_handler(props);\n}\n\nrcube_webmail.prototype.enigma_compose_handler = function(props)\n{\n    var form = this.gui_objects.messageform;\n\n    // copy inputs from enigma menu to the form\n    $('#enigmamenu input').each(function() {\n        var id = this.id + '_cpy', input = $('#' + id);\n\n        if (!input.length) {\n            input = $(this).clone();\n            input.prop({id: id, type: 'hidden'}).appendTo(form);\n        }\n\n        input.val(this.checked ? '1' : '');\n    });\n\n    // disable signing when saving drafts\n    if (this.env.last_action == 'savedraft') {\n        $('input[name=\"_enigma_sign\"]', form).val(0);\n    }\n}\n\n// Import attached keys/certs file\nrcube_webmail.prototype.enigma_import_attachment = function(mime_id)\n{\n    var lock = this.set_busy(true, 'loading'),\n        post = {_uid: this.env.uid, _mbox: this.env.mailbox, _part: mime_id};\n\n    this.http_post('plugin.enigmaimport', post, lock);\n\n    return false;\n}\n\n// password request popup\nrcube_webmail.prototype.enigma_password_request = function(data)\n{\n    if (!data || !data.keyid) {\n        return;\n    }\n\n    var ref = this,\n        msg = this.get_label('enigma.enterkeypass'),\n        myprompt = $('<div class=\"prompt\">'),\n        myprompt_content = $('<div class=\"message\">')\n            .appendTo(myprompt),\n        myprompt_input = $('<input>').attr({type: 'password', size: 30})\n            .keypress(function(e) {\n                if (e.which == 13)\n                    (ref.is_framed() ? window.parent.$ : $)('.ui-dialog-buttonpane button.mainaction:visible').click();\n            })\n            .appendTo(myprompt);\n\n    data.key = data.keyid;\n    if (data.keyid.length > 8)\n        data.keyid = data.keyid.substr(data.keyid.length - 8);\n\n    $.each(['keyid', 'user'], function() {\n        msg = msg.replace('$' + this, data[this]);\n    });\n\n    myprompt_content.text(msg);\n\n    this.show_popup_dialog(myprompt, this.get_label('enigma.enterkeypasstitle'),\n        [{\n            text: this.get_label('save'),\n            'class': 'mainaction',\n            click: function(e) {\n                e.stopPropagation();\n\n                var jq = ref.is_framed() ? window.parent.$ : $;\n\n                data.password = myprompt_input.val();\n\n                if (!data.password) {\n                    myprompt_input.focus();\n                    return;\n                }\n\n                ref.enigma_password_submit(data);\n                jq(this).remove();\n            }\n        },\n        {\n            text: this.get_label('cancel'),\n            click: function(e) {\n                var jq = ref.is_framed() ? window.parent.$ : $;\n                e.stopPropagation();\n                jq(this).remove();\n            }\n        }], {width: 400});\n\n    if (this.is_framed() && parent.rcmail.message_list) {\n        // this fixes bug when pressing Enter on \"Save\" button in the dialog\n        parent.rcmail.message_list.blur();\n    }\n}\n\n// submit entered password\nrcube_webmail.prototype.enigma_password_submit = function(data)\n{\n    if (this.env.action == 'compose' && !data['compose-init']) {\n        return this.enigma_password_compose_submit(data);\n    }\n\n    var lock = this.set_busy(true, 'loading');\n\n    // message preview\n    var form = $('<form>').attr({method: 'post', action: location.href, style: 'display:none'})\n        .append($('<input>').attr({type: 'hidden', name: '_keyid', value: data.key}))\n        .append($('<input>').attr({type: 'hidden', name: '_passwd', value: data.password}))\n        .append($('<input>').attr({type: 'hidden', name: '_token', value: this.env.request_token}))\n        .append($('<input>').attr({type: 'hidden', name: '_unlock', value: lock}))\n        .appendTo(document.body);\n\n    form.submit();\n}\n\n// submit entered password - in mail compose page\nrcube_webmail.prototype.enigma_password_compose_submit = function(data)\n{\n    var form = this.gui_objects.messageform;\n\n    if (!$('input[name=\"_keyid\"]', form).length) {\n        $(form).append($('<input>').attr({type: 'hidden', name: '_keyid', value: data.key}))\n            .append($('<input>').attr({type: 'hidden', name: '_passwd', value: data.password}));\n    }\n    else {\n        $('input[name=\"_keyid\"]', form).val(data.key);\n        $('input[name=\"_passwd\"]', form).val(data.password);\n    }\n\n    this.submit_messageform(this.env.last_action == 'savedraft');\n}\n", "code_before": "/**\n * Enigma plugin script\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (c) The Roundcube Dev Team\n *\n * The JavaScript code in this page is free software: you can redistribute it\n * and/or modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n */\n\nwindow.rcmail && rcmail.addEventListener('init', function (evt) {\n    if (rcmail.env.task == 'settings') {\n        if (rcmail.gui_objects.keyslist) {\n            rcmail.keys_list = new rcube_list_widget(rcmail.gui_objects.keyslist,\n                { multiselect: true, draggable: false, keyboard: true });\n            rcmail.keys_list\n                .addEventListener('select', function (o) {\n                    rcmail.enigma_keylist_select(o);\n                })\n                .addEventListener('keypress', function (o) {\n                    rcmail.list_keypress(o, { del: 'plugin.enigma-key-delete' });\n                })\n                .init()\n                .focus();\n\n            rcmail.enigma_list();\n\n            rcmail.register_command('firstpage', function (props) {\n                return rcmail.enigma_list_page('first');\n            });\n            rcmail.register_command('previouspage', function (props) {\n                return rcmail.enigma_list_page('previous');\n            });\n            rcmail.register_command('nextpage', function (props) {\n                return rcmail.enigma_list_page('next');\n            });\n            rcmail.register_command('lastpage', function (props) {\n                return rcmail.enigma_list_page('last');\n            });\n        }\n\n        if (rcmail.env.action == 'plugin.enigmakeys') {\n            rcmail.register_command('search', function (props) {\n                return rcmail.enigma_search(props);\n            }, true);\n            rcmail.register_command('reset-search', function (props) {\n                return rcmail.enigma_search_reset(props);\n            }, true);\n            rcmail.register_command('plugin.enigma-import', function () {\n                rcmail.enigma_import();\n            }, true);\n            rcmail.register_command('plugin.enigma-import-search', function () {\n                rcmail.enigma_import_search();\n            }, true);\n            rcmail.register_command('plugin.enigma-key-export', function () {\n                rcmail.enigma_export();\n            });\n            rcmail.register_command('plugin.enigma-key-export-selected', function () {\n                rcmail.enigma_export(true);\n            });\n            rcmail.register_command('plugin.enigma-key-import', function () {\n                rcmail.enigma_key_import();\n            }, true);\n            rcmail.register_command('plugin.enigma-key-import-search', function () {\n                rcmail.enigma_key_import_search();\n            }, true);\n            rcmail.register_command('plugin.enigma-key-delete', function (props) {\n                return rcmail.enigma_delete();\n            });\n            rcmail.register_command('plugin.enigma-key-create', function (props) {\n                return rcmail.enigma_key_create();\n            }, true);\n            rcmail.register_command('plugin.enigma-key-save', function (props) {\n                return rcmail.enigma_key_create_save();\n            }, true);\n\n            rcmail.addEventListener('responseafterplugin.enigmakeys', function () {\n                rcmail.enable_command('plugin.enigma-key-export', rcmail.env.rowcount > 0);\n                rcmail.triggerEvent('listupdate', { list: rcmail.keys_list, rowcount: rcmail.env.rowcount });\n            });\n\n            if (rcmail.gui_objects.importform) {\n                // make sure Enter key in search input starts searching\n                // instead of submitting the form\n                $('#rcmimportsearch').keydown(function (e) {\n                    if (e.which == 13) {\n                        rcmail.enigma_import_search();\n                        return false;\n                    }\n                });\n            }\n        }\n    } else if (rcmail.env.task == 'mail') {\n        if (rcmail.env.action == 'compose') {\n            rcmail.addEventListener('beforesend', function (props) {\n                rcmail.enigma_beforesend_handler(props);\n            })\n                .addEventListener('beforesavedraft', function (props) {\n                    rcmail.enigma_beforesavedraft_handler(props);\n                });\n\n            $('#enigmamenu').find('input,label').mouseup(function (e) {\n                // don't close the menu on mouse click inside\n                e.stopPropagation();\n            });\n\n            $('a.button.enigma').prop('tabindex', $('#messagetoolbar > a').first().prop('tabindex'));\n\n            $.each(['encrypt', 'sign'], function () {\n                var opt = this, input = $('#enigma' + opt + 'opt');\n\n                if (rcmail.env['enigma_force_' + opt]) {\n                    input.prop('checked', true);\n                }\n\n                // Compose status bar in Elastic\n                if (window.UI && UI.compose_status) {\n                    input.on('change', function () {\n                        UI.compose_status(opt, this.checked);\n                    });\n                }\n\n                // As the options might have been initially enabled we have to\n                // trigger onchange event, so all handlers can update the state\n                input.trigger('change');\n            });\n        }\n\n        if (rcmail.env.enigma_password_request) {\n            rcmail.enigma_password_request(rcmail.env.enigma_password_request);\n        }\n    }\n});\n\n\n/*********************************************************/\n/* ********    Enigma Settings/Keys/Certs UI     *********/\n/*********************************************************/\n\n// Display key(s) import form\nrcube_webmail.prototype.enigma_key_import = function () {\n    var dialog = $('<iframe>').attr('src', this.url('plugin.enigmakeys', { _a: 'import', _framed: 1 })),\n        import_func = function (e) {\n            var win = dialog[0].contentWindow;\n            win.rcmail.enigma_import();\n        };\n\n    this.enigma_import_dialog = this.simple_dialog(dialog, 'enigma.importkeys', import_func, {\n        button: 'import',\n        width: 500,\n        height: 180,\n    });\n};\n\n// Display key(s) search/import form\nrcube_webmail.prototype.enigma_key_import_search = function () {\n    var dialog = $('<iframe>').attr('src', this.url('plugin.enigmakeys', { _a: 'import-search', _framed: 1 })),\n        search_func = function () {\n            var win = dialog[0].contentWindow;\n            win.rcmail.enigma_import_search();\n        };\n\n    this.enigma_import_dialog = this.simple_dialog(dialog, 'enigma.keyimportsearchlabel', search_func, {\n        button: 'search',\n        width: 500,\n        height: 150,\n    });\n};\n\nrcube_webmail.prototype.enigma_import_success = function () {\n    var dialog = this.enigma_import_dialog || parent.rcmail.enigma_import_dialog;\n    dialog.dialog('destroy');\n};\n\n// Display key(s) generation form\nrcube_webmail.prototype.enigma_key_create = function () {\n    this.keys_list.clear_selection();\n    this.enigma_loadframe('&_action=plugin.enigmakeys&_a=create&_nav=hide');\n};\n\n// Generate key(s) and submit them\nrcube_webmail.prototype.enigma_key_create_save = function () {\n    var options, lock, users = [],\n        password = $('#key-pass').val(),\n        confirm = $('#key-pass-confirm').val(),\n        type = $('#key-type').val();\n\n    $('[name=\"identity[]\"]:checked').each(function () {\n        users.push({ name: $(this).data('name') || '', email: $(this).data('email') });\n    });\n\n    // validate the form\n    if (!password || !confirm) {\n        this.alert_dialog(this.get_label('enigma.formerror'));\n        return;\n    }\n\n    if (password != confirm) {\n        this.alert_dialog(this.get_label('enigma.passwordsdiffer'));\n        return;\n    }\n\n    if (!users.length) {\n        this.alert_dialog(this.get_label('enigma.noidentselected'));\n        return;\n    }\n\n    // generate keys\n    // use OpenPGP.js if browser supports required features\n    if (window.openpgp && window.crypto && window.crypto.getRandomValues) {\n        lock = this.set_busy(true, 'enigma.keygenerating');\n        options = {\n            userIDs: users,\n            passphrase: password,\n            type: type.substring(0, 3),\n        };\n\n        if (type == 'ecc') {\n            options.curve = 'ed25519';\n        } else if (type == 'rsa4096') {\n            options.rsaBits = 4096;\n        } else {\n            options.rsaBits = 2048;\n        }\n\n        openpgp.generateKey(options).then(function (keypair) {\n            // success\n            var post = {\n                _a: 'import',\n                _keys: keypair.privateKey,\n                _generated: 1,\n                _passwd: password,\n            };\n\n            // send request to server\n            rcmail.http_post('plugin.enigmakeys', post, lock);\n        }, function (error) {\n            // failure\n            console.error(error);\n            rcmail.set_busy(false, null, lock);\n            rcmail.display_message(rcmail.get_label('enigma.keygenerateerror'), 'error');\n        });\n    } else {\n        rcmail.display_message(rcmail.get_label('enigma.keygennosupport'), 'error');\n    }\n};\n\n// Action executed after successful key generation and import\nrcube_webmail.prototype.enigma_key_create_success = function () {\n    parent.rcmail.enigma_list(1);\n};\n\n// Delete key(s)\nrcube_webmail.prototype.enigma_delete = function () {\n    var keys = this.keys_list.get_selection();\n\n    if (!keys.length) {\n        return;\n    }\n\n    this.confirm_dialog(this.get_label('enigma.keyremoveconfirm'), 'delete', function (e, ref) {\n        var lock = ref.display_message(ref.get_label('enigma.keyremoving'), 'loading'),\n            post = { _a: 'delete', _keys: keys };\n\n        // send request to server\n        ref.http_post('plugin.enigmakeys', post, lock);\n    });\n};\n\n// Export key(s)\nrcube_webmail.prototype.enigma_export = function (selected) {\n    var priv = false,\n        list = this.keys_list,\n        keys = selected ? list.get_selection().join(',') : '*',\n        args = { _keys: keys };\n\n    if (!keys.length) {\n        return;\n    }\n\n    // find out whether selected keys are private\n    if (keys == '*') {\n        priv = true;\n    } else {\n        $.each(list.get_selection(), function () {\n            flags = $(list.rows[this].obj).data('flags');\n            if (flags && flags.indexOf('p') >= 0) {\n                priv = true;\n                return false;\n            }\n        });\n    }\n\n    // ask the user about including private key in the export\n    if (priv) {\n        return this.show_popup_dialog(\n            this.get_label('enigma.keyexportprompt'),\n            this.get_label('enigma.exportkeys'),\n            [{\n                class: 'export mainaction',\n                text: this.get_label('enigma.onlypubkeys'),\n                click: function (e) {\n                    rcmail.enigma_export_submit(args);\n                    $(this).remove();\n                },\n            },\n            {\n                class: 'export',\n                text: this.get_label('enigma.withprivkeys'),\n                click: function (e) {\n                    args._priv = 1;\n                    rcmail.enigma_export_submit(args);\n                    $(this).remove();\n                },\n            },\n            {\n                class: 'cancel',\n                text: this.get_label('close'),\n                click: function (e) {\n                    $(this).remove();\n                },\n            }],\n            { width: 500 }\n        );\n    }\n\n    this.enigma_export_submit(args);\n};\n\n// Submitting request for key(s) export\n// Done this way to handle password input\nrcube_webmail.prototype.enigma_export_submit = function (data) {\n    var id = 'keyexport-' + new Date().getTime(),\n        form = $('<form>').attr({\n            target: id,\n            method: 'post',\n            style: 'display:none',\n            action: '?_action=plugin.enigmakeys&_task=settings&_a=export',\n        }),\n        iframe = $('<iframe>').attr({ name: id, style: 'display:none' });\n\n    form.append($('<input>').attr({ name: '_token', value: this.env.request_token }));\n    $.each(data, function (i, v) {\n        form.append($('<input>').attr({ name: i, value: v }));\n    });\n\n    iframe.appendTo(document.body);\n    form.appendTo(document.body).submit();\n};\n\n// Submit key(s) import form\nrcube_webmail.prototype.enigma_import = function () {\n    var form, file, lock,\n        id = 'keyimport-' + new Date().getTime();\n\n    if (form = this.gui_objects.importform) {\n        file = document.getElementById('rcmimportfile');\n        if (file && !file.value) {\n            this.alert_dialog(this.get_label('selectimportfile'));\n            return;\n        }\n\n        lock = this.set_busy(true, 'importwait');\n        $('<iframe>').attr({ name: id, style: 'display:none' }).appendTo(document.body);\n        $(form).attr({ target: id, action: this.add_url(form.action, '_unlock', lock) }).submit();\n\n        return true;\n    }\n};\n\n// Search for key(s) for import\nrcube_webmail.prototype.enigma_import_search = function () {\n    var form, search;\n\n    if (form = this.gui_objects.importform) {\n        search = $('#rcmimportsearch').val();\n        if (!search) {\n            return;\n        }\n\n        this.enigma_find_publickey(search);\n    }\n};\n\n// list row selection handler\nrcube_webmail.prototype.enigma_keylist_select = function (list) {\n    var id = list.get_single_selection(), url;\n\n    if (id && !list.multi_selecting) {\n        url = '&_action=plugin.enigmakeys&_a=info&_id=' + id;\n    }\n\n    this.enigma_loadframe(url);\n    this.enable_command('plugin.enigma-key-delete', 'plugin.enigma-key-export-selected', list.get_selection().length > 0);\n};\n\n// load key frame\nrcube_webmail.prototype.enigma_loadframe = function (url) {\n    var win;\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n        if (!url) {\n            if (win.location && win.location.href.indexOf(this.env.blankpage) < 0) {\n                win.location.href = this.env.blankpage;\n            }\n            if (this.env.frame_lock) {\n                this.set_busy(false, null, this.env.frame_lock);\n            }\n            return;\n        }\n\n        this.env.frame_lock = this.set_busy(true, 'loading');\n        win.location.href = this.env.comm_path + '&_framed=1' + url;\n    }\n};\n\n// Search keys/certs\nrcube_webmail.prototype.enigma_search = function (props) {\n    if (!props && this.gui_objects.qsearchbox) {\n        props = this.gui_objects.qsearchbox.value;\n    }\n\n    if (props || this.env.search_request) {\n        var params = { _a: 'search', _q: props },\n            lock = this.set_busy(true, 'searching');\n        //        if (this.gui_objects.search_filter)\n        //          addurl += '&_filter=' + this.gui_objects.search_filter.value;\n        this.env.current_page = 1;\n        this.enigma_loadframe();\n        this.enigma_clear_list();\n        this.http_post('plugin.enigmakeys', params, lock);\n    }\n\n    return false;\n};\n\n// Reset search filter and the list\nrcube_webmail.prototype.enigma_search_reset = function (props) {\n    var s = this.env.search_request;\n    this.reset_qsearch();\n\n    if (s) {\n        this.enigma_loadframe();\n        this.enigma_clear_list();\n\n        // refresh the list\n        this.enigma_list();\n    }\n\n    return false;\n};\n\n// Keys/certs listing\nrcube_webmail.prototype.enigma_list = function (page, reset_frame) {\n    if (this.is_framed()) {\n        return parent.rcmail.enigma_list(page, reset_frame);\n    }\n\n    var params = { _a: 'list' },\n        lock = this.set_busy(true, 'loading');\n\n    this.env.current_page = page ? page : 1;\n\n    if (this.env.search_request) {\n        params._q = this.env.search_request;\n    }\n    if (page) {\n        params._p = page;\n    }\n\n    this.enigma_clear_list(reset_frame);\n    this.http_post('plugin.enigmakeys', params, lock);\n};\n\n// Change list page\nrcube_webmail.prototype.enigma_list_page = function (page) {\n    if (page == 'next') {\n        page = this.env.current_page + 1;\n    } else if (page == 'last') {\n        page = this.env.pagecount;\n    } else if (page == 'prev' && this.env.current_page > 1) {\n        page = this.env.current_page - 1;\n    } else if (page == 'first' && this.env.current_page > 1) {\n        page = 1;\n    }\n\n    this.enigma_list(page);\n};\n\n// Remove list rows\nrcube_webmail.prototype.enigma_clear_list = function (reset_frame) {\n    if (reset_frame !== false) {\n        this.enigma_loadframe();\n    }\n\n    if (this.keys_list) {\n        this.keys_list.clear(true);\n    }\n\n    this.enable_command('plugin.enigma-key-delete', 'plugin.enigma-key-delete-selected', false);\n    this.triggerEvent('listupdate', { list: this.keys_list, rowcount: this.keys_list.rowcount });\n};\n\n// Adds a row to the list\nrcube_webmail.prototype.enigma_add_list_row = function (r) {\n    if (!this.gui_objects.keyslist || !this.keys_list) {\n        return false;\n    }\n\n    var list = this.keys_list,\n        tbody = this.gui_objects.keyslist.tBodies[0],\n        rowcount = tbody.rows.length,\n        even = rowcount % 2,\n        // for performance use DOM instead of jQuery here\n        row = document.createElement('tr'),\n        col = document.createElement('td');\n\n    row.id = 'rcmrow' + r.id;\n    row.className = 'message';\n    if (r.flags) {\n        $(row).data('flags', r.flags);\n    }\n\n    col.className = 'name';\n    col.innerHTML = r.name;\n    row.appendChild(col);\n    list.insert_row(row);\n};\n\n\n/*********************************************************/\n/* ********        Enigma Message methods        *********/\n/*********************************************************/\n\n// handle message send/save action\nrcube_webmail.prototype.enigma_beforesend_handler = function (props) {\n    this.env.last_action = 'send';\n    this.enigma_compose_handler(props);\n};\n\nrcube_webmail.prototype.enigma_beforesavedraft_handler = function (props) {\n    this.env.last_action = 'savedraft';\n    this.enigma_compose_handler(props);\n};\n\nrcube_webmail.prototype.enigma_compose_handler = function (props) {\n    var form = this.gui_objects.messageform;\n\n    // copy inputs from enigma menu to the form (not used in Elastic)\n    $('#enigmamenu input').each(function () {\n        var id = this.id + '_cpy', input = $('#' + id);\n\n        if (!input.length) {\n            input = $(this).clone();\n            input.prop({ id: id, type: 'hidden' }).appendTo(form);\n        }\n\n        input.val(this.checked ? '1' : '');\n    });\n};\n\n// Import attached keys/certs file\nrcube_webmail.prototype.enigma_import_attachment = function (mime_id) {\n    var lock = this.set_busy(true, 'loading'),\n        post = { _uid: this.env.uid, _mbox: this.env.mailbox, _part: mime_id };\n\n    this.http_post('plugin.enigmaimport', post, lock);\n\n    return false;\n};\n\n// password request popup\nrcube_webmail.prototype.enigma_password_request = function (data) {\n    if (!data || !data.keyid) {\n        return;\n    }\n\n    var ref = this,\n        msg = this.get_label('enigma.enterkeypass'),\n        myprompt = $('<div class=\"prompt\">'),\n        myprompt_content = $('<p class=\"message\">')\n            .appendTo(myprompt),\n        myprompt_input = $('<input>').attr({ type: 'password', size: 30, 'data-submit': 'true' })\n            .appendTo(myprompt);\n\n    data.key = data.keyid;\n    if (data.keyid.length > 8) {\n        data.keyid = data.keyid.substr(data.keyid.length - 8);\n    }\n\n    $.each(['keyid', 'user'], function () {\n        msg = msg.replace('$' + this, data[this]);\n    });\n\n    myprompt_content.text(msg);\n\n    this.show_popup_dialog(myprompt, this.get_label('enigma.enterkeypasstitle'),\n        [{\n            text: this.get_label('ok'),\n            class: 'mainaction save unlock',\n            click: function (e) {\n                e.stopPropagation();\n\n                var jq = ref.is_framed() ? window.parent.$ : $;\n\n                data.password = myprompt_input.val();\n\n                if (!data.password) {\n                    myprompt_input.focus();\n                    return;\n                }\n\n                ref.enigma_password_submit(data);\n                jq(this).remove();\n            },\n        },\n        {\n            text: this.get_label('cancel'),\n            class: 'cancel',\n            click: function (e) {\n                var jq = ref.is_framed() ? window.parent.$ : $;\n                e.stopPropagation();\n                jq(this).remove();\n            },\n        }], { width: 400 });\n\n    if (this.is_framed() && parent.rcmail.message_list) {\n        // this fixes bug when pressing Enter on \"Save\" button in the dialog\n        parent.rcmail.message_list.blur();\n    }\n};\n\n// submit entered password\nrcube_webmail.prototype.enigma_password_submit = function (data) {\n    var lock, form;\n\n    if (this.env.action == 'compose' && !data['compose-init']) {\n        return this.enigma_password_compose_submit(data);\n    }\n\n    if (this.env.action == 'plugin.enigmakeys' && (form = this.gui_objects.importform)) {\n        if (!$('input[name=\"_keyid\"]', form).length) {\n            $(form).append($('<input>').attr({ type: 'hidden', name: '_keyid', value: data.key }))\n                .append($('<input>').attr({ type: 'hidden', name: '_passwd', value: data.password }));\n        }\n\n        return this.enigma_import();\n    }\n\n    lock = data.nolock ? null : this.set_busy(true, 'loading');\n    form = $('<form>')\n        .attr({ method: 'post', action: data.action || location.href, style: 'display:none' })\n        .append($('<input>').attr({ type: 'hidden', name: '_keyid', value: data.key }))\n        .append($('<input>').attr({ type: 'hidden', name: '_passwd', value: data.password }))\n        .append($('<input>').attr({ type: 'hidden', name: '_token', value: this.env.request_token }))\n        .append($('<input>').attr({ type: 'hidden', name: '_unlock', value: lock }));\n\n    // Additional form fields for request parameters\n    $.each(data, function (i, v) {\n        if (i.indexOf('input') == 0) {\n            form.append($('<input>').attr({ type: 'hidden', name: i.substring(5), value: v }));\n        }\n    });\n\n    if (data.iframe) {\n        var name = 'enigma_frame_' + (new Date()).getTime(),\n            frame = $('<iframe>').attr({ style: 'display:none', name: name }).appendTo(document.body);\n        form.attr('target', name);\n    }\n\n    form.appendTo(document.body).submit();\n};\n\n// submit entered password - in mail compose page\nrcube_webmail.prototype.enigma_password_compose_submit = function (data) {\n    var form = this.gui_objects.messageform;\n\n    if (!$('input[name=\"_keyid\"]', form).length) {\n        $(form).append($('<input>').attr({ type: 'hidden', name: '_keyid', value: data.key }))\n            .append($('<input>').attr({ type: 'hidden', name: '_passwd', value: data.password }));\n    } else {\n        $('input[name=\"_keyid\"]', form).val(data.key);\n        $('input[name=\"_passwd\"]', form).val(data.password);\n    }\n\n    this.submit_messageform(this.env.last_action == 'savedraft');\n};\n\n// Display no-key error with key search button\nrcube_webmail.prototype.enigma_key_not_found = function (data) {\n    var params = { width: 500, dialogClass: 'error' },\n        buttons = [{\n            class: 'mainaction search',\n            text: data.button,\n            click: function () {\n                $(this).remove();\n                rcmail.enigma_find_publickey(data.email);\n            },\n        }];\n\n    if (data.mode == 'encrypt') {\n        buttons.push({\n            class: 'send',\n            text: rcmail.get_label('enigma.sendunencrypted'),\n            click: function (e) {\n                $(this).remove();\n                $('#enigmaencryptopt').prop('checked', false).change();\n                rcmail.command('send', { nocheck: true }, e.target, e.originalEvent);\n            },\n        });\n    }\n\n    buttons.push({\n        class: 'cancel',\n        text: this.get_label('cancel'),\n        click: function () {\n            $(this).remove();\n        },\n    });\n\n    return this.show_popup_dialog(data.text, data.title, buttons, params);\n};\n\n// Search for a public key on the key server\nrcube_webmail.prototype.enigma_find_publickey = function (email) {\n    this.mailvelope_search_pubkeys([email],\n        function (status) {},\n        function (key) {\n            var lock = rcmail.set_busy(true, 'enigma.importwait'),\n                post = { _a: 'import', _keys: key };\n\n            if (rcmail.env.action == 'plugin.enigmakeys') {\n                post._refresh = 1;\n            }\n\n            // send request to server\n            rcmail.http_post('plugin.enigmakeys', post, lock);\n        }\n    );\n};\n", "patch": "@@ -157,7 +157,7 @@ rcube_webmail.prototype.enigma_export = function(selected)\n     if (!keys.length)\n         return;\n \n-    this.goto_url('plugin.enigmakeys', {_a: 'export', _keys: keys});\n+    this.goto_url('plugin.enigmakeys', {_a: 'export', _keys: keys}, false, true);\n };\n \n // Submit key(s) import form", "file_path": "files/2016_8\\4", "file_language": "js", "file_name": "plugins/enigma/enigma.js", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/4a408843b0ef816daf70a472a02b78cd6073a4d5/plugins/enigma/lib/enigma_ui.php", "code": "<?php\n\n/**\n +-------------------------------------------------------------------------+\n | User Interface for the Enigma Plugin                                    |\n |                                                                         |\n | Copyright (C) 2010-2015 The Roundcube Dev Team                          |\n |                                                                         |\n | Licensed under the GNU General Public License version 3 or              |\n | any later version with exceptions for skins & plugins.                  |\n | See the README file for a full license statement.                       |\n |                                                                         |\n +-------------------------------------------------------------------------+\n | Author: Aleksander Machniak <alec@alec.pl>                              |\n +-------------------------------------------------------------------------+\n*/\n\nclass enigma_ui\n{\n    private $rc;\n    private $enigma;\n    private $home;\n    private $css_loaded;\n    private $js_loaded;\n    private $data;\n    private $keys_parts  = array();\n    private $keys_bodies = array();\n\n\n    function __construct($enigma_plugin, $home='')\n    {\n        $this->enigma = $enigma_plugin;\n        $this->rc     = $enigma_plugin->rc;\n        $this->home   = $home; // we cannot use $enigma_plugin->home here\n    }\n\n    /**\n     * UI initialization and requests handlers.\n     *\n     * @param string Preferences section\n     */\n    function init()\n    {\n        $this->add_js();\n\n        $action = rcube_utils::get_input_value('_a', rcube_utils::INPUT_GPC);\n\n        if ($this->rc->action == 'plugin.enigmakeys') {\n            switch ($action) {\n                case 'delete':\n                    $this->key_delete();\n                    break;\n/*\n                case 'edit':\n                    $this->key_edit();\n                    break;\n*/\n                case 'import':\n                    $this->key_import();\n                    break;\n\n                case 'export':\n                    $this->key_export();\n                    break;\n\n                case 'generate':\n                    $this->key_generate();\n                    break;\n\n                case 'create':\n                    $this->key_create();\n                    break;\n\n                case 'search':\n                case 'list':\n                    $this->key_list();\n                    break;\n\n                case 'info':\n                    $this->key_info();\n                    break;\n            }\n\n            $this->rc->output->add_handlers(array(\n                    'keyslist'     => array($this, 'tpl_keys_list'),\n                    'keyframe'     => array($this, 'tpl_key_frame'),\n                    'countdisplay' => array($this, 'tpl_keys_rowcount'),\n                    'searchform'   => array($this->rc->output, 'search_form'),\n            ));\n\n            $this->rc->output->set_pagetitle($this->enigma->gettext('enigmakeys'));\n            $this->rc->output->send('enigma.keys');\n        }\n/*\n        // Preferences UI\n        else if ($this->rc->action == 'plugin.enigmacerts') {\n            $this->rc->output->add_handlers(array(\n                    'keyslist'     => array($this, 'tpl_certs_list'),\n                    'keyframe'     => array($this, 'tpl_cert_frame'),\n                    'countdisplay' => array($this, 'tpl_certs_rowcount'),\n                    'searchform'   => array($this->rc->output, 'search_form'),\n            ));\n\n            $this->rc->output->set_pagetitle($this->enigma->gettext('enigmacerts'));\n            $this->rc->output->send('enigma.certs'); \n        }\n*/\n        // Message composing UI\n        else if ($this->rc->action == 'compose') {\n            $this->compose_ui();\n        }\n    }\n\n    /**\n     * Adds CSS style file to the page header.\n     */\n    function add_css()\n    {\n        if ($this->css_loaded)\n            return;\n\n        $skin_path = $this->enigma->local_skin_path();\n        if (is_file($this->home . \"/$skin_path/enigma.css\")) {\n            $this->enigma->include_stylesheet(\"$skin_path/enigma.css\");\n        }\n\n        $this->css_loaded = true;\n    }\n\n    /**\n     * Adds javascript file to the page header.\n     */\n    function add_js()\n    {\n        if ($this->js_loaded) {\n            return;\n        }\n\n        $this->enigma->include_script('enigma.js');\n\n        $this->js_loaded = true;\n    }\n\n    /**\n     * Initializes key password prompt\n     *\n     * @param enigma_error $status Error object with key info\n     * @param array        $params Optional prompt parameters\n     */\n    function password_prompt($status, $params = array())\n    {\n        $data = $status->getData('missing');\n\n        if (empty($data)) {\n            $data = $status->getData('bad');\n        }\n\n        $data = array('keyid' => key($data), 'user' => $data[key($data)]);\n\n        if (!empty($params)) {\n            $data = array_merge($params, $data);\n        }\n\n        if ($this->rc->action == 'send') {\n            $this->rc->output->command('enigma_password_request', $data);\n        }\n        else {\n            $this->rc->output->set_env('enigma_password_request', $data);\n        }\n\n        // add some labels to client\n        $this->rc->output->add_label('enigma.enterkeypasstitle', 'enigma.enterkeypass',\n            'save', 'cancel');\n\n        $this->add_css();\n        $this->add_js();\n    }\n\n    /**\n     * Template object for key info/edit frame.\n     *\n     * @param array Object attributes\n     *\n     * @return string HTML output\n     */\n    function tpl_key_frame($attrib)\n    {\n        if (!$attrib['id']) {\n            $attrib['id'] = 'rcmkeysframe';\n        }\n\n        $attrib['name'] = $attrib['id'];\n\n        $this->rc->output->set_env('contentframe', $attrib['name']);\n        $this->rc->output->set_env('blankpage', $attrib['src'] ?\n            $this->rc->output->abs_url($attrib['src']) : 'program/resources/blank.gif');\n\n        return $this->rc->output->frame($attrib);\n    }\n\n    /**\n     * Template object for list of keys.\n     *\n     * @param array Object attributes\n     *\n     * @return string HTML content\n     */\n    function tpl_keys_list($attrib)\n    {\n        // add id to message list table if not specified\n        if (!strlen($attrib['id'])) {\n            $attrib['id'] = 'rcmenigmakeyslist';\n        }\n\n        // define list of cols to be displayed\n        $a_show_cols = array('name');\n\n        // create XHTML table\n        $out = $this->rc->table_output($attrib, array(), $a_show_cols, 'id');\n\n        // set client env\n        $this->rc->output->add_gui_object('keyslist', $attrib['id']);\n        $this->rc->output->include_script('list.js');\n\n        // add some labels to client\n        $this->rc->output->add_label('enigma.keyremoveconfirm', 'enigma.keyremoving');\n\n        return $out;\n    }\n\n    /**\n     * Key listing (and searching) request handler\n     */\n    private function key_list()\n    {\n        $this->enigma->load_engine();\n\n        $pagesize = $this->rc->config->get('pagesize', 100);\n        $page     = max(intval(rcube_utils::get_input_value('_p', rcube_utils::INPUT_GPC)), 1);\n        $search   = rcube_utils::get_input_value('_q', rcube_utils::INPUT_GPC);\n\n        // Get the list\n        $list = $this->enigma->engine->list_keys($search);\n\n        if ($list && ($list instanceof enigma_error))\n            $this->rc->output->show_message('enigma.keylisterror', 'error');\n        else if (empty($list))\n            $this->rc->output->show_message('enigma.nokeysfound', 'notice');\n        else if (is_array($list)) {\n            // Save the size\n            $listsize = count($list);\n\n            // Sort the list by key (user) name\n            usort($list, array('enigma_key', 'cmp'));\n\n            // Slice current page\n            $list = array_slice($list, ($page - 1) * $pagesize, $pagesize);\n            $size = count($list);\n\n            // Add rows\n            foreach ($list as $key) {\n                $this->rc->output->command('enigma_add_list_row',\n                    array('name' => rcube::Q($key->name), 'id' => $key->id));\n            }\n        }\n\n        $this->rc->output->set_env('rowcount', $size);\n        $this->rc->output->set_env('search_request', $search);\n        $this->rc->output->set_env('pagecount', ceil($listsize/$pagesize));\n        $this->rc->output->set_env('current_page', $page);\n        $this->rc->output->command('set_rowcount',\n            $this->get_rowcount_text($listsize, $size, $page));\n\n        $this->rc->output->send();\n    }\n\n    /**\n     * Template object for list records counter.\n     *\n     * @param array Object attributes\n     *\n     * @return string HTML output\n     */\n    function tpl_keys_rowcount($attrib)\n    {\n        if (!$attrib['id'])\n            $attrib['id'] = 'rcmcountdisplay';\n\n        $this->rc->output->add_gui_object('countdisplay', $attrib['id']);\n\n        return html::span($attrib, $this->get_rowcount_text());\n    }\n\n    /**\n     * Returns text representation of list records counter\n     */\n    private function get_rowcount_text($all=0, $curr_count=0, $page=1)\n    {\n        if (!$curr_count) {\n            $out = $this->enigma->gettext('nokeysfound');\n        }\n        else {\n            $pagesize = $this->rc->config->get('pagesize', 100);\n            $first    = ($page - 1) * $pagesize;\n\n            $out = $this->enigma->gettext(array(\n                'name' => 'keysfromto',\n                'vars' => array(\n                    'from'  => $first + 1,\n                    'to'    => $first + $curr_count,\n                    'count' => $all)\n            ));\n        }\n\n        return $out;\n    }\n\n    /**\n     * Key information page handler\n     */\n    private function key_info()\n    {\n        $this->enigma->load_engine();\n\n        $id  = rcube_utils::get_input_value('_id', rcube_utils::INPUT_GET);\n        $res = $this->enigma->engine->get_key($id);\n\n        if ($res instanceof enigma_key) {\n            $this->data = $res;\n        }\n        else { // error\n            $this->rc->output->show_message('enigma.keyopenerror', 'error');\n            $this->rc->output->command('parent.enigma_loadframe');\n            $this->rc->output->send('iframe');\n        }\n\n        $this->rc->output->add_handlers(array(\n            'keyname' => array($this, 'tpl_key_name'),\n            'keydata' => array($this, 'tpl_key_data'),\n        ));\n\n        $this->rc->output->set_pagetitle($this->enigma->gettext('keyinfo'));\n        $this->rc->output->send('enigma.keyinfo');\n    }\n\n    /**\n     * Template object for key name\n     */\n    function tpl_key_name($attrib)\n    {\n        return rcube::Q($this->data->name);\n    }\n\n    /**\n     * Template object for key information page content\n     */\n    function tpl_key_data($attrib)\n    {\n        $out   = '';\n        $table = new html_table(array('cols' => 2));\n\n        // Key user ID\n        $table->add('title', $this->enigma->gettext('keyuserid'));\n        $table->add(null, rcube::Q($this->data->name));\n\n        // Key ID\n        $table->add('title', $this->enigma->gettext('keyid'));\n        $table->add(null, $this->data->subkeys[0]->get_short_id());\n\n        // Key type\n        $keytype = $this->data->get_type();\n        if ($keytype == enigma_key::TYPE_KEYPAIR) {\n            $type = $this->enigma->gettext('typekeypair');\n        }\n        else if ($keytype == enigma_key::TYPE_PUBLIC) {\n            $type = $this->enigma->gettext('typepublickey');\n        }\n        $table->add('title', $this->enigma->gettext('keytype'));\n        $table->add(null, $type);\n\n        // Key fingerprint\n        $table->add('title', $this->enigma->gettext('fingerprint'));\n        $table->add(null, $this->data->subkeys[0]->get_fingerprint());\n\n        $out .= html::tag('fieldset', null,\n            html::tag('legend', null,\n                $this->enigma->gettext('basicinfo')) . $table->show($attrib));\n\n        // Subkeys\n        $table = new html_table(array('cols' => 5, 'id' => 'enigmasubkeytable', 'class' => 'records-table'));\n\n        $table->add_header('id', $this->enigma->gettext('subkeyid'));\n        $table->add_header('algo', $this->enigma->gettext('subkeyalgo'));\n        $table->add_header('created', $this->enigma->gettext('subkeycreated'));\n        $table->add_header('expires', $this->enigma->gettext('subkeyexpires'));\n        $table->add_header('usage', $this->enigma->gettext('subkeyusage'));\n\n        $now         = time();\n        $date_format = $this->rc->config->get('date_format', 'Y-m-d');\n        $usage_map   = array(\n            enigma_key::CAN_ENCRYPT      => $this->enigma->gettext('typeencrypt'),\n            enigma_key::CAN_SIGN         => $this->enigma->gettext('typesign'),\n            enigma_key::CAN_CERTIFY      => $this->enigma->gettext('typecert'),\n            enigma_key::CAN_AUTHENTICATE => $this->enigma->gettext('typeauth'),\n        );\n\n        foreach ($this->data->subkeys as $subkey) {\n            $algo = $subkey->get_algorithm();\n            if ($algo && $subkey->length) {\n                $algo .= ' (' . $subkey->length . ')';\n            }\n\n            $usage = array();\n            foreach ($usage_map as $key => $text) {\n                if ($subkey->usage & $key) {\n                    $usage[] = $text;\n                }\n            }\n\n            $table->add('id', $subkey->get_short_id());\n            $table->add('algo', $algo);\n            $table->add('created', $subkey->created ? $this->rc->format_date($subkey->created, $date_format, false) : '');\n            $table->add('expires', $subkey->expires ? $this->rc->format_date($subkey->expires, $date_format, false) : $this->enigma->gettext('expiresnever'));\n            $table->add('usage', implode(',', $usage));\n            $table->set_row_attribs($subkey->revoked || ($subkey->expires && $subkey->expires < $now) ? 'deleted' : '');\n        }\n\n        $out .= html::tag('fieldset', null,\n            html::tag('legend', null,\n                $this->enigma->gettext('subkeys')) . $table->show());\n\n        // Additional user IDs\n        $table = new html_table(array('cols' => 2, 'id' => 'enigmausertable', 'class' => 'records-table'));\n\n        $table->add_header('id', $this->enigma->gettext('userid'));\n        $table->add_header('valid', $this->enigma->gettext('uservalid'));\n\n        foreach ($this->data->users as $user) {\n            $username = $user->name;\n            if ($user->comment) {\n                $username .= ' (' . $user->comment . ')';\n            }\n            $username .= ' <' . $user->email . '>';\n\n            $table->add('id', rcube::Q(trim($username)));\n            $table->add('valid', $this->enigma->gettext($user->valid ? 'valid' : 'unknown'));\n            $table->set_row_attribs($user->revoked || !$user->valid ? 'deleted' : '');\n        }\n\n        $out .= html::tag('fieldset', null,\n            html::tag('legend', null,\n                $this->enigma->gettext('userids')) . $table->show());\n\n        return $out;\n    }\n\n    /**\n     * Key(s) export handler\n     */\n    private function key_export()\n    {\n        $this->rc->request_security_check(rcube_utils::INPUT_GET);\n\n        $keys   = rcube_utils::get_input_value('_keys', rcube_utils::INPUT_GPC);\n        $engine = $this->enigma->load_engine();\n        $list   = $keys == '*' ? $engine->list_keys() : explode(',', $keys);\n\n        if (is_array($list)) {\n            $filename = 'export.pgp';\n            if (count($list) == 1) {\n                $filename = (is_object($list[0]) ? $list[0]->id : $list[0]) . '.pgp';\n            }\n\n            // send downlaod headers\n            header('Content-Type: application/pgp-keys');\n            header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n\n            if ($fp = fopen('php://output', 'w')) {\n                foreach ($list as $key) {\n                    $engine->export_key(is_object($key) ? $key->id : $key, $fp);\n                }\n            }\n        }\n\n        exit;\n    }\n\n    /**\n     * Key import (page) handler\n     */\n    private function key_import()\n    {\n        // Import process\n        if ($data = rcube_utils::get_input_value('_keys', rcube_utils::INPUT_POST)) {\n            // Import from generation form (ajax request)\n            $this->enigma->load_engine();\n            $result = $this->enigma->engine->import_key($data);\n\n            if (is_array($result)) {\n                $this->rc->output->command('enigma_key_create_success');\n                $this->rc->output->show_message('enigma.keygeneratesuccess', 'confirmation');\n            }\n            else {\n                $this->rc->output->show_message('enigma.keysimportfailed', 'error');\n            }\n\n            $this->rc->output->send();\n        }\n        else if ($_FILES['_file']['tmp_name'] && is_uploaded_file($_FILES['_file']['tmp_name'])) {\n            $this->enigma->load_engine();\n            $result = $this->enigma->engine->import_key($_FILES['_file']['tmp_name'], true);\n\n            if (is_array($result)) {\n                // reload list if any keys has been added\n                if ($result['imported']) {\n                    $this->rc->output->command('parent.enigma_list', 1);\n                }\n                else {\n                    $this->rc->output->command('parent.enigma_loadframe');\n                }\n\n                $this->rc->output->show_message('enigma.keysimportsuccess', 'confirmation',\n                    array('new' => $result['imported'], 'old' => $result['unchanged']));\n\n                $this->rc->output->send('iframe');\n            }\n            else {\n                $this->rc->output->show_message('enigma.keysimportfailed', 'error');\n            }\n        }\n        else if ($err = $_FILES['_file']['error']) {\n            if ($err == UPLOAD_ERR_INI_SIZE || $err == UPLOAD_ERR_FORM_SIZE) {\n                $this->rc->output->show_message('filesizeerror', 'error',\n                    array('size' => $this->rc->show_bytes(parse_bytes(ini_get('upload_max_filesize')))));\n            } else {\n                $this->rc->output->show_message('fileuploaderror', 'error');\n            }\n        }\n\n        $this->rc->output->add_handlers(array(\n            'importform' => array($this, 'tpl_key_import_form'),\n        ));\n\n        $this->rc->output->set_pagetitle($this->enigma->gettext('keyimport'));\n        $this->rc->output->send('enigma.keyimport');\n    }\n\n    /**\n     * Template object for key import (upload) form\n     */\n    function tpl_key_import_form($attrib)\n    {\n        $attrib += array('id' => 'rcmKeyImportForm');\n\n        $upload = new html_inputfield(array('type' => 'file', 'name' => '_file',\n            'id' => 'rcmimportfile', 'size' => 30));\n\n        $form = html::p(null,\n            rcube::Q($this->enigma->gettext('keyimporttext'), 'show')\n            . html::br() . html::br() . $upload->show()\n        );\n\n        $this->rc->output->add_label('selectimportfile', 'importwait');\n        $this->rc->output->add_gui_object('importform', $attrib['id']);\n\n        $out = $this->rc->output->form_tag(array(\n            'action' => $this->rc->url(array('action' => $this->rc->action, 'a' => 'import')),\n            'method' => 'post',\n            'enctype' => 'multipart/form-data') + $attrib,\n            $form);\n\n        return $out;\n    }\n\n    /**\n     * Server-side key pair generation handler\n     */\n    private function key_generate()\n    {\n        $user = rcube_utils::get_input_value('_user', rcube_utils::INPUT_POST, true);\n        $pass = rcube_utils::get_input_value('_password', rcube_utils::INPUT_POST, true);\n        $size = (int) rcube_utils::get_input_value('_size', rcube_utils::INPUT_POST);\n\n        if ($size > 4096) {\n            $size = 4096;\n        }\n\n        $ident = rcube_mime::decode_address_list($user, 1, false);\n\n        if (empty($ident)) {\n            $this->rc->output->show_message('enigma.keygenerateerror', 'error');\n            $this->rc->output->send();\n        }\n\n        $this->enigma->load_engine();\n        $result = $this->enigma->engine->generate_key(array(\n            'user'     => $ident[1]['name'],\n            'email'    => $ident[1]['mailto'],\n            'password' => $pass,\n            'size'     => $size,\n        ));\n\n        if ($result instanceof enigma_key) {\n            $this->rc->output->command('enigma_key_create_success');\n            $this->rc->output->show_message('enigma.keygeneratesuccess', 'confirmation');\n        }\n        else {\n            $this->rc->output->show_message('enigma.keygenerateerror', 'error');\n        }\n\n        $this->rc->output->send();\n    }\n\n    /**\n     * Key generation page handler\n     */\n    private function key_create()\n    {\n        $this->enigma->include_script('openpgp.min.js');\n\n        $this->rc->output->add_handlers(array(\n            'keyform' => array($this, 'tpl_key_create_form'),\n        ));\n\n        $this->rc->output->set_env('enigma_keygen_server', $this->rc->config->get('enigma_keygen_server'));\n\n        $this->rc->output->set_pagetitle($this->enigma->gettext('keygenerate'));\n        $this->rc->output->send('enigma.keycreate');\n    }\n\n    /**\n     * Template object for key generation form\n     */\n    function tpl_key_create_form($attrib)\n    {\n        $attrib += array('id' => 'rcmKeyCreateForm');\n        $table  = new html_table(array('cols' => 2));\n\n        // get user's identities\n        $identities = $this->rc->user->list_identities(null, true);\n\n        // Identity\n        $select = new html_select(array('name' => 'identity', 'id' => 'key-ident'));\n        foreach ((array) $identities as $idx => $ident) {\n            $name = empty($ident['name']) ? ('<' . $ident['email'] . '>') : $ident['ident'];\n            $select->add($name, $idx);\n        }\n\n        $table->add('title', html::label('key-name', rcube::Q($this->enigma->gettext('newkeyident'))));\n        $table->add(null, $select->show(0));\n\n        // Key size\n        $select = new html_select(array('name' => 'size', 'id' => 'key-size'));\n        $select->add($this->enigma->gettext('key2048'), '2048');\n        $select->add($this->enigma->gettext('key4096'), '4096');\n\n        $table->add('title', html::label('key-size', rcube::Q($this->enigma->gettext('newkeysize'))));\n        $table->add(null, $select->show());\n\n        // Password and confirm password\n        $table->add('title', html::label('key-pass', rcube::Q($this->enigma->gettext('newkeypass'))));\n        $table->add(null, rcube_output::get_edit_field('password', '',\n            array('id' => 'key-pass', 'size' => $attrib['size'], 'required' => true), 'password'));\n\n        $table->add('title', html::label('key-pass-confirm', rcube::Q($this->enigma->gettext('newkeypassconfirm'))));\n        $table->add(null, rcube_output::get_edit_field('password-confirm', '',\n            array('id' => 'key-pass-confirm', 'size' => $attrib['size'], 'required' => true), 'password'));\n\n        $this->rc->output->add_gui_object('keyform', $attrib['id']);\n        $this->rc->output->add_label('enigma.keygenerating', 'enigma.formerror',\n            'enigma.passwordsdiffer', 'enigma.keygenerateerror', 'enigma.nonameident',\n            'enigma.keygennosupport');\n\n        return $this->rc->output->form_tag(array(), $table->show($attrib));\n    }\n\n    /**\n     * Key deleting\n     */\n    private function key_delete()\n    {\n        $keys   = rcube_utils::get_input_value('_keys', rcube_utils::INPUT_POST);\n        $engine = $this->enigma->load_engine();\n\n        foreach ((array)$keys as $key) {\n            $res = $engine->delete_key($key);\n\n            if ($res !== true) {\n                $this->rc->output->show_message('enigma.keyremoveerror', 'error');\n                $this->rc->output->command('enigma_list');\n                $this->rc->output->send();\n            }\n        }\n\n        $this->rc->output->command('enigma_list');\n        $this->rc->output->show_message('enigma.keyremovesuccess', 'confirmation');\n        $this->rc->output->send();\n    }\n\n    /**\n     * Init compose UI (add task button and the menu)\n     */\n    private function compose_ui()\n    {\n        $this->add_css();\n\n        // Options menu button\n        $this->enigma->add_button(array(\n            'type'     => 'link',\n            'command'  => 'plugin.enigma',\n            'onclick'  => \"rcmail.command('menu-open', 'enigmamenu', event.target, event)\",\n            'class'    => 'button enigma',\n            'title'    => 'encryptionoptions',\n            'label'    => 'encryption',\n            'domain'   => $this->enigma->ID,\n            'width'    => 32,\n            'height'   => 32\n            ), 'toolbar');\n\n        $menu  = new html_table(array('cols' => 2));\n        $chbox = new html_checkbox(array('value' => 1));\n\n        $menu->add(null, html::label(array('for' => 'enigmasignopt'),\n            rcube::Q($this->enigma->gettext('signmsg'))));\n        $menu->add(null, $chbox->show($this->rc->config->get('enigma_sign_all') ? 1 : 0,\n            array('name' => '_enigma_sign', 'id' => 'enigmasignopt')));\n\n        $menu->add(null, html::label(array('for' => 'enigmaencryptopt'),\n            rcube::Q($this->enigma->gettext('encryptmsg'))));\n        $menu->add(null, $chbox->show($this->rc->config->get('enigma_encrypt_all') ? 1 : 0,\n            array('name' => '_enigma_encrypt', 'id' => 'enigmaencryptopt')));\n\n        $menu = html::div(array('id' => 'enigmamenu', 'class' => 'popupmenu'), $menu->show());\n\n        // Options menu contents\n        $this->rc->output->add_footer($menu);\n    }\n\n    /**\n     * Handler for message_body_prefix hook.\n     * Called for every displayed (content) part of the message.\n     * Adds infobox about signature verification and/or decryption\n     * status above the body.\n     *\n     * @param array Original parameters\n     *\n     * @return array Modified parameters\n     */\n    function status_message($p)\n    {\n        // skip: not a message part\n        if ($p['part'] instanceof rcube_message) {\n            return $p;\n        }\n\n        // skip: message has no signed/encoded content\n        if (!$this->enigma->engine) {\n            return $p;\n        }\n\n        $engine  = $this->enigma->engine;\n        $part_id = $p['part']->mime_id;\n\n        // Decryption status\n        if (($found = $this->find_part_id($part_id, $engine->decryptions)) !== null\n            && ($status = $engine->decryptions[$found])\n        ) {\n            $attach_scripts = true;\n\n            // show the message only once\n            unset($engine->decryptions[$found]);\n\n            // display status info\n            $attrib['id'] = 'enigma-message';\n\n            if ($status instanceof enigma_error) {\n                $attrib['class'] = 'enigmaerror';\n                $code            = $status->getCode();\n\n                if ($code == enigma_error::KEYNOTFOUND) {\n                    $msg = rcube::Q(str_replace('$keyid', enigma_key::format_id($status->getData('id')),\n                        $this->enigma->gettext('decryptnokey')));\n                }\n                else if ($code == enigma_error::BADPASS) {\n                    $missing = $status->getData('missing');\n                    $label   = 'decrypt' . (!empty($missing) ? 'no' : 'bad') . 'pass';\n                    $msg     = rcube::Q($this->enigma->gettext($label));\n                    $this->password_prompt($status);\n                }\n                else {\n                    $msg = rcube::Q($this->enigma->gettext('decrypterror'));\n                }\n            }\n            else {\n                $attrib['class'] = 'enigmanotice';\n                $msg = rcube::Q($this->enigma->gettext('decryptok'));\n            }\n\n            $p['prefix'] .= html::div($attrib, $msg);\n        }\n\n        // Signature verification status\n        if (($found = $this->find_part_id($part_id, $engine->signatures)) !== null\n            && ($sig = $engine->signatures[$found])\n        ) {\n            $attach_scripts = true;\n\n            // show the message only once\n            unset($engine->signatures[$found]);\n\n            // display status info\n            $attrib['id'] = 'enigma-message';\n\n            if ($sig instanceof enigma_signature) {\n                $sender = ($sig->name ? $sig->name . ' ' : '') . '<' . $sig->email . '>';\n\n                if ($sig->valid === enigma_error::UNVERIFIED) {\n                    $attrib['class'] = 'enigmawarning';\n                    $msg = str_replace('$sender', $sender, $this->enigma->gettext('sigunverified'));\n                    $msg = str_replace('$keyid', $sig->id, $msg);\n                    $msg = rcube::Q($msg);\n                }\n                else if ($sig->valid) {\n                    $attrib['class'] = 'enigmanotice';\n                    $msg = rcube::Q(str_replace('$sender', $sender, $this->enigma->gettext('sigvalid')));\n                }\n                else {\n                    $attrib['class'] = 'enigmawarning';\n                    $msg = rcube::Q(str_replace('$sender', $sender, $this->enigma->gettext('siginvalid')));\n                }\n            }\n            else if ($sig && $sig->getCode() == enigma_error::KEYNOTFOUND) {\n                $attrib['class'] = 'enigmawarning';\n                $msg = rcube::Q(str_replace('$keyid', enigma_key::format_id($sig->getData('id')),\n                    $this->enigma->gettext('signokey')));\n            }\n            else {\n                $attrib['class'] = 'enigmaerror';\n                $msg = rcube::Q($this->enigma->gettext('sigerror'));\n            }\n/*\n            $msg .= '&nbsp;' . html::a(array('href' => \"#sigdetails\",\n                'onclick' => rcmail_output::JS_OBJECT_NAME.\".command('enigma-sig-details')\"),\n                rcube::Q($this->enigma->gettext('showdetails')));\n*/\n            // test\n//            $msg .= '<br /><pre>'.$sig->body.'</pre>';\n\n            $p['prefix'] .= html::div($attrib, $msg);\n        }\n\n        if ($attach_scripts) {\n            // add css and js script\n            $this->add_css();\n            $this->add_js();\n        }\n\n        return $p;\n    }\n\n    /**\n     * Handler for message_load hook.\n     * Check message bodies and attachments for keys/certs.\n     */\n    function message_load($p)\n    {\n        $engine = $this->enigma->load_engine();\n\n        // handle keys/certs in attachments\n        foreach ((array) $p['object']->attachments as $attachment) {\n            if ($engine->is_keys_part($attachment)) {\n                $this->keys_parts[] = $attachment->mime_id;\n            }\n        }\n\n        // the same with message bodies\n        foreach ((array) $p['object']->parts as $part) {\n            if ($engine->is_keys_part($part)) {\n                $this->keys_parts[]  = $part->mime_id;\n                $this->keys_bodies[] = $part->mime_id;\n            }\n        }\n\n        // @TODO: inline PGP keys\n\n        if ($this->keys_parts) {\n            $this->enigma->add_texts('localization');\n        }\n\n        return $p;\n    }\n\n    /**\n     * Handler for template_object_messagebody hook.\n     * This callback function adds a box below the message content\n     * if there is a key/cert attachment available\n     */\n    function message_output($p)\n    {\n        foreach ($this->keys_parts as $part) {\n            // remove part's body\n            if (in_array($part, $this->keys_bodies)) {\n                $p['content'] = '';\n            }\n\n            // add box below message body\n            $p['content'] .= html::p(array('class' => 'enigmaattachment'),\n                html::a(array(\n                    'href'    => \"#\",\n                    'onclick' => \"return \".rcmail_output::JS_OBJECT_NAME.\".enigma_import_attachment('\".rcube::JQ($part).\"')\",\n                    'title'   => $this->enigma->gettext('keyattimport')),\n                    html::span(null, $this->enigma->gettext('keyattfound'))));\n\n            $attach_scripts = true;\n        }\n\n        if ($attach_scripts) {\n            // add css and js script\n            $this->add_css();\n            $this->add_js();\n        }\n\n        return $p;\n    }\n\n    /**\n     * Handle message_ready hook (encryption/signing)\n     */\n    function message_ready($p)\n    {\n        $savedraft = !empty($_POST['_draft']) && empty($_GET['_saveonly']);\n\n        if (!$savedraft && rcube_utils::get_input_value('_enigma_sign', rcube_utils::INPUT_POST)) {\n            $this->enigma->load_engine();\n            $status = $this->enigma->engine->sign_message($p['message']);\n            $mode   = 'sign';\n        }\n\n        if ((!$status instanceof enigma_error) && rcube_utils::get_input_value('_enigma_encrypt', rcube_utils::INPUT_POST)) {\n            $this->enigma->load_engine();\n            $status = $this->enigma->engine->encrypt_message($p['message'], null, $savedraft);\n            $mode   = 'encrypt';\n        }\n\n        if ($mode && ($status instanceof enigma_error)) {\n            $code = $status->getCode();\n\n            if ($code == enigma_error::KEYNOTFOUND) {\n                $vars = array('email' => $status->getData('missing'));\n                $msg  = 'enigma.' . $mode . 'nokey';\n            }\n            else if ($code == enigma_error::BADPASS) {\n                $this->password_prompt($status);\n            }\n            else {\n                $msg = 'enigma.' . $mode . 'error';\n            }\n\n            if ($msg) {\n                $this->rc->output->show_message($msg, $type ?: 'error', $vars);\n            }\n\n            $this->rc->output->send('iframe');\n        }\n\n        return $p;\n    }\n\n    /**\n     * Handler for message_compose_body hook\n     * Display error when the message cannot be encrypted\n     * and provide a way to try again with a password.\n     */\n    function message_compose($p)\n    {\n        $engine = $this->enigma->load_engine();\n\n        // skip: message has no signed/encoded content\n        if (!$this->enigma->engine) {\n            return $p;\n        }\n\n        $engine = $this->enigma->engine;\n\n        // Decryption status\n        foreach ($engine->decryptions as $status) {\n            if ($status instanceof enigma_error) {\n                $code = $status->getCode();\n\n                if ($code == enigma_error::KEYNOTFOUND) {\n                    $msg = rcube::Q(str_replace('$keyid', enigma_key::format_id($status->getData('id')),\n                        $this->enigma->gettext('decryptnokey')));\n                }\n                else if ($code == enigma_error::BADPASS) {\n                    $this->password_prompt($status, array('compose-init' => true));\n                    return $p;\n                }\n                else {\n                    $msg = rcube::Q($this->enigma->gettext('decrypterror'));\n                }\n            }\n        }\n\n        if ($msg) {\n            $this->rc->output->show_message($msg, 'error');\n        }\n\n        // Check sign/ecrypt options for signed/encrypted drafts\n        $this->rc->output->set_env('enigma_force_encrypt', !empty($engine->decryptions));\n        $this->rc->output->set_env('enigma_force_sign', !empty($engine->signatures));\n\n        return $p;\n    }\n\n    /**\n     * Check if the part or its parent exists in the array\n     * of decryptions/signatures. Returns found ID.\n     */\n    private function find_part_id($part_id, $data)\n    {\n        $ids   = explode('.', $part_id);\n        $i     = 0;\n        $count = count($ids);\n\n        while ($i < $count && strlen($part = implode('.', array_slice($ids, 0, ++$i)))) {\n            if (array_key_exists($part, $data)) {\n                return $part;\n            }\n        }\n    }\n}\n", "code_before": "<?php\n\n/*\n +-------------------------------------------------------------------------+\n | User Interface for the Enigma Plugin                                    |\n |                                                                         |\n | Copyright (C) The Roundcube Dev Team                                    |\n |                                                                         |\n | Licensed under the GNU General Public License version 3 or              |\n | any later version with exceptions for skins & plugins.                  |\n | See the README file for a full license statement.                       |\n +-------------------------------------------------------------------------+\n | Author: Aleksander Machniak <alec@alec.pl>                              |\n +-------------------------------------------------------------------------+\n*/\n\nclass enigma_ui\n{\n    private $rc;\n    private $enigma;\n    private $css_loaded;\n    private $js_loaded;\n    private $data;\n    private $keys_parts = [];\n    private $keys_bodies = [];\n\n    /**\n     * Object constructor\n     *\n     * @param enigma $enigma_plugin The plugin instance\n     */\n    public function __construct($enigma_plugin)\n    {\n        $this->enigma = $enigma_plugin;\n        $this->rc = $enigma_plugin->rc;\n    }\n\n    /**\n     * UI initialization and requests handlers.\n     */\n    public function init()\n    {\n        $this->add_js();\n\n        $action = rcube_utils::get_input_string('_a', rcube_utils::INPUT_GPC);\n\n        if ($this->rc->action == 'plugin.enigmakeys') {\n            switch ($action) {\n                case 'delete':\n                    $this->key_delete();\n                    break;\n                    /*\n                case 'edit':\n                    $this->key_edit();\n                    break;\n                    */\n                case 'import':\n                    $this->key_import();\n                    break;\n                case 'import-search':\n                    $this->key_import_search();\n                    break;\n                case 'export':\n                    $this->key_export();\n                    break;\n                case 'generate':\n                    $this->key_generate();\n                    break;\n                case 'create':\n                    $this->key_create();\n                    break;\n                case 'search':\n                case 'list':\n                    $this->key_list();\n                    break;\n                case 'info':\n                    $this->key_info();\n                    break;\n            }\n\n            $this->rc->output->add_handlers([\n                'keyslist' => [$this, 'tpl_keys_list'],\n                'countdisplay' => [$this, 'tpl_keys_rowcount'],\n                'searchform' => [$this->rc->output, 'search_form'],\n            ]);\n\n            $this->rc->output->set_pagetitle($this->enigma->gettext('enigmakeys'));\n            $this->rc->output->send('enigma.keys');\n        }\n        /*\n        // Preferences UI\n        else if ($this->rc->action == 'plugin.enigmacerts') {\n            $this->rc->output->add_handlers([\n                    'keyslist'     => [$this, 'tpl_certs_list'],\n                    'keyframe'     => [$this, 'tpl_cert_frame'],\n                    'countdisplay' => [$this, 'tpl_certs_rowcount'],\n                    'searchform'   => [$this->rc->output, 'search_form'],\n            ]);\n\n            $this->rc->output->set_pagetitle($this->enigma->gettext('enigmacerts'));\n            $this->rc->output->send('enigma.certs');\n        }\n        */\n        // Message composing UI\n        elseif ($this->rc->action == 'compose') {\n            $this->compose_ui();\n        }\n    }\n\n    /**\n     * Adds CSS style file to the page header.\n     */\n    public function add_css()\n    {\n        if ($this->css_loaded) {\n            return;\n        }\n\n        $skin_path = $this->enigma->local_skin_path();\n        $this->enigma->include_stylesheet(\"{$skin_path}/enigma.css\");\n        $this->css_loaded = true;\n    }\n\n    /**\n     * Adds javascript file to the page header.\n     */\n    public function add_js()\n    {\n        if ($this->js_loaded) {\n            return;\n        }\n\n        $this->enigma->include_script('enigma.js');\n\n        $this->rc->output->set_env('keyservers', $this->rc->config->keyservers());\n\n        $this->js_loaded = true;\n    }\n\n    /**\n     * Initializes key password prompt\n     *\n     * @param enigma_error $status Error object with key info\n     * @param array        $params Optional prompt parameters\n     */\n    public function password_prompt($status, $params = [])\n    {\n        $data = array_merge($status->getData('missing') ?: [], $status->getData('bad') ?: []);\n\n        // A message can be encrypted with multiple private keys,\n        // find the one that exists in the keyring\n        foreach ($data as $keyid => $username) {\n            $key = $this->enigma->engine->get_key($keyid);\n            if ($key && $key->is_private()) {\n                if ($key->name && strpos($username, $keyid) !== false) {\n                    $data[$keyid] = $key->name;\n                }\n\n                break;\n            }\n        }\n\n        if (isset($keyid)) {\n            $data = [\n                'keyid' => $keyid,\n                'user' => $data[$keyid] ?? null,\n            ];\n        } else {\n            $data = [];\n        }\n\n        if (!empty($params)) {\n            $data = array_merge($params, $data);\n        }\n\n        if (preg_match('/^(send|plugin.enigmaimport|plugin.enigmakeys)$/', $this->rc->action)) {\n            $this->rc->output->command('enigma_password_request', $data);\n        } else {\n            $this->rc->output->set_env('enigma_password_request', $data);\n        }\n\n        // add some labels to client\n        $this->rc->output->add_label('enigma.enterkeypasstitle', 'enigma.enterkeypass',\n            'save', 'cancel');\n\n        $this->add_css();\n        $this->add_js();\n    }\n\n    /**\n     * Template object for list of keys.\n     *\n     * @param array $attrib Object attributes\n     *\n     * @return string HTML content\n     */\n    public function tpl_keys_list($attrib)\n    {\n        // add id to message list table if not specified\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmenigmakeyslist';\n        }\n\n        // define list of cols to be displayed\n        $a_show_cols = ['name'];\n\n        // create XHTML table\n        $out = rcmail_action::table_output($attrib, [], $a_show_cols, 'id');\n\n        // set client env\n        $this->rc->output->add_gui_object('keyslist', $attrib['id']);\n        $this->rc->output->include_script('list.js');\n\n        // add some labels to client\n        $this->rc->output->add_label('enigma.keyremoveconfirm', 'enigma.keyremoving',\n            'enigma.keyexportprompt', 'enigma.withprivkeys', 'enigma.onlypubkeys',\n            'enigma.exportkeys', 'enigma.importkeys', 'enigma.keyimportsearchlabel',\n            'import', 'search'\n        );\n\n        return $out;\n    }\n\n    /**\n     * Key listing (and searching) request handler\n     */\n    private function key_list()\n    {\n        $this->enigma->load_engine();\n\n        $pagesize = $this->rc->config->get('pagesize', 100);\n        $page = max(intval(rcube_utils::get_input_string('_p', rcube_utils::INPUT_GPC)), 1);\n        $search = rcube_utils::get_input_string('_q', rcube_utils::INPUT_GPC);\n\n        // Get the list\n        $list = $this->enigma->engine->list_keys($search);\n        $size = 0;\n        $listsize = 0;\n\n        if (!is_array($list)) {\n            $this->rc->output->show_message('enigma.keylisterror', 'error');\n        } elseif (empty($list)) {\n            $this->rc->output->show_message('enigma.nokeysfound', 'notice');\n        } else {\n            // Save the size\n            $listsize = count($list);\n\n            // Sort the list by key (user) name\n            usort($list, ['enigma_key', 'cmp']);\n\n            // Slice current page\n            $list = array_slice($list, ($page - 1) * $pagesize, $pagesize);\n            $size = count($list);\n\n            // Add rows\n            foreach ($list as $key) {\n                $this->rc->output->command('enigma_add_list_row', [\n                    'name' => rcube::Q($key->name),\n                    'id' => $key->id,\n                    'flags' => $key->is_private() ? 'p' : '',\n                ]);\n            }\n        }\n\n        $this->rc->output->set_env('rowcount', $size);\n        $this->rc->output->set_env('search_request', $search);\n        $this->rc->output->set_env('pagecount', ceil($listsize / $pagesize));\n        $this->rc->output->set_env('current_page', $page);\n        $this->rc->output->command('set_rowcount', $this->get_rowcount_text($listsize, $size, $page));\n\n        $this->rc->output->send();\n    }\n\n    /**\n     * Template object for list records counter.\n     *\n     * @param array $attrib Object attributes\n     *\n     * @return string HTML output\n     */\n    public function tpl_keys_rowcount($attrib)\n    {\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmcountdisplay';\n        }\n\n        $this->rc->output->add_gui_object('countdisplay', $attrib['id']);\n\n        return html::span($attrib, $this->get_rowcount_text());\n    }\n\n    /**\n     * Returns text representation of list records counter\n     */\n    private function get_rowcount_text($all = 0, $curr_count = 0, $page = 1)\n    {\n        if (!$curr_count) {\n            $out = $this->enigma->gettext('nokeysfound');\n        } else {\n            $pagesize = $this->rc->config->get('pagesize', 100);\n            $first = ($page - 1) * $pagesize;\n\n            $out = $this->enigma->gettext([\n                'name' => 'keysfromto',\n                'vars' => ['from' => $first + 1, 'to' => $first + $curr_count, 'count' => $all],\n            ]);\n        }\n\n        return $out;\n    }\n\n    /**\n     * Key information page handler\n     */\n    private function key_info()\n    {\n        $this->enigma->load_engine();\n\n        $id = rcube_utils::get_input_string('_id', rcube_utils::INPUT_GET);\n        $res = $this->enigma->engine->get_key($id);\n\n        if ($res instanceof enigma_key) {\n            $this->data = $res;\n        } else { // error\n            $this->rc->output->show_message('enigma.keyopenerror', 'error');\n            $this->rc->output->command('parent.enigma_loadframe');\n            $this->rc->output->send('iframe');\n        }\n\n        $this->rc->output->add_handlers([\n            'keyname' => [$this, 'tpl_key_name'],\n            'keydata' => [$this, 'tpl_key_data'],\n        ]);\n\n        $this->rc->output->set_pagetitle($this->enigma->gettext('keyinfo'));\n        $this->rc->output->send('enigma.keyinfo');\n    }\n\n    /**\n     * Template object for key name\n     *\n     * @param array $attrib Object attributes\n     *\n     * @return string HTML output\n     */\n    public function tpl_key_name($attrib)\n    {\n        return rcube::Q($this->data->name);\n    }\n\n    /**\n     * Template object for key information page content\n     *\n     * @param array $attrib Object attributes\n     *\n     * @return string HTML output\n     */\n    public function tpl_key_data($attrib)\n    {\n        $out = '';\n        $table = new html_table(['cols' => 2]);\n\n        // Key user ID\n        $table->add('title', html::label(null, $this->enigma->gettext('keyuserid')));\n        $table->add(null, rcube::Q($this->data->name));\n\n        // Key ID\n        $table->add('title', html::label(null, $this->enigma->gettext('keyid')));\n        $table->add(null, $this->data->subkeys[0]->get_short_id());\n\n        // Key type\n        $keytype = $this->data->get_type();\n        $type = null;\n        if ($keytype == enigma_key::TYPE_KEYPAIR) {\n            $type = $this->enigma->gettext('typekeypair');\n        } elseif ($keytype == enigma_key::TYPE_PUBLIC) {\n            $type = $this->enigma->gettext('typepublickey');\n        }\n\n        $table->add('title', html::label(null, $this->enigma->gettext('keytype')));\n        $table->add(null, $type);\n\n        // Key fingerprint\n        $table->add('title', html::label(null, $this->enigma->gettext('fingerprint')));\n        $table->add(null, $this->data->subkeys[0]->get_fingerprint());\n\n        $out .= html::tag('fieldset', null,\n            html::tag('legend', null, $this->enigma->gettext('basicinfo')) . $table->show($attrib)\n        );\n\n        // Subkeys\n        $table = new html_table(['cols' => 5, 'id' => 'enigmasubkeytable', 'class' => 'records-table']);\n\n        $table->add_header('id', $this->enigma->gettext('subkeyid'));\n        $table->add_header('algo', $this->enigma->gettext('subkeyalgo'));\n        $table->add_header('created', $this->enigma->gettext('subkeycreated'));\n        $table->add_header('expires', $this->enigma->gettext('subkeyexpires'));\n        $table->add_header('usage', $this->enigma->gettext('subkeyusage'));\n\n        $usage_map = [\n            enigma_key::CAN_ENCRYPT => $this->enigma->gettext('typeencrypt'),\n            enigma_key::CAN_SIGN => $this->enigma->gettext('typesign'),\n            enigma_key::CAN_CERTIFY => $this->enigma->gettext('typecert'),\n            enigma_key::CAN_AUTHENTICATE => $this->enigma->gettext('typeauth'),\n        ];\n\n        foreach ($this->data->subkeys as $subkey) {\n            $algo = $subkey->get_algorithm();\n            if ($algo && $subkey->length) {\n                $algo .= ' (' . $subkey->length . ')';\n            }\n\n            $usage = [];\n            foreach ($usage_map as $key => $text) {\n                if ($subkey->usage & $key) {\n                    $usage[] = $text;\n                }\n            }\n\n            $table->set_row_attribs($subkey->revoked || $subkey->is_expired() ? 'deleted' : '');\n            $table->add('id', $subkey->get_short_id());\n            $table->add('algo', $algo);\n            $table->add('created', $subkey->get_creation_date());\n            $table->add('expires', $subkey->get_expiration_date() ?: $this->enigma->gettext('expiresnever'));\n            $table->add('usage', implode(',', $usage));\n        }\n\n        $out .= html::tag('fieldset', null,\n            html::tag('legend', null, $this->enigma->gettext('subkeys')) . $table->show()\n        );\n\n        // Additional user IDs\n        $table = new html_table(['cols' => 2, 'id' => 'enigmausertable', 'class' => 'records-table']);\n\n        $table->add_header('id', $this->enigma->gettext('userid'));\n        $table->add_header('valid', $this->enigma->gettext('uservalid'));\n\n        foreach ($this->data->users as $user) {\n            // Display domains in UTF8\n            if ($email = rcube_utils::idn_to_utf8($user->email)) {\n                $user->email = $email;\n            }\n\n            $username = $user->name;\n            if (!empty($user->comment)) {\n                $username .= ' (' . $user->comment . ')';\n            }\n            $username .= ' <' . $user->email . '>';\n\n            $table->set_row_attribs($user->revoked || !$user->valid ? 'deleted' : '');\n            $table->add('id', rcube::Q(trim($username)));\n            $table->add('valid', $this->enigma->gettext($user->valid ? 'valid' : 'unknown'));\n        }\n\n        $out .= html::tag('fieldset', null,\n            html::tag('legend', null, $this->enigma->gettext('userids')) . $table->show()\n        );\n\n        return $out;\n    }\n\n    /**\n     * Key(s) export handler\n     */\n    private function key_export()\n    {\n        $keys = rcube_utils::get_input_string('_keys', rcube_utils::INPUT_POST);\n        $priv = rcube_utils::get_input_string('_priv', rcube_utils::INPUT_POST);\n        $engine = $this->enigma->load_engine();\n        $list = $keys == '*' ? $engine->list_keys() : explode(',', $keys);\n\n        if (is_array($list) && ($fp = fopen('php://memory', 'rw'))) {\n            $filename = 'export.pgp';\n            if (count($list) == 1) {\n                $filename = (is_object($list[0]) ? $list[0]->id : $list[0]) . '.pgp';\n            }\n\n            $status = null;\n            foreach ($list as $key) {\n                $keyid = is_object($key) ? $key->id : $key;\n                $status = $engine->export_key($keyid, $fp, (bool) $priv);\n\n                if ($status instanceof enigma_error) {\n                    $code = $status->getCode();\n\n                    if ($code == enigma_error::BADPASS) {\n                        $this->password_prompt($status, [\n                            'input_keys' => $keys,\n                            'input_priv' => 1,\n                            'input_task' => 'settings',\n                            'input_action' => 'plugin.enigmakeys',\n                            'input_a' => 'export',\n                            'action' => '?',\n                            'iframe' => true,\n                            'nolock' => true,\n                        ]);\n                        fclose($fp);\n                        $this->rc->output->send('iframe');\n                    }\n                }\n            }\n\n            // send download headers\n            header('Content-Type: application/pgp-keys');\n            header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n\n            rewind($fp);\n            while (!feof($fp)) {\n                echo fread($fp, 1024 * 1024);\n            }\n            fclose($fp);\n        }\n\n        exit;\n    }\n\n    /**\n     * Key import (page) handler\n     */\n    private function key_import()\n    {\n        // Import process\n        if ($data = rcube_utils::get_input_string('_keys', rcube_utils::INPUT_POST)) {\n            $this->enigma->load_engine();\n            $this->enigma->engine->password_handler();\n\n            $result = $this->enigma->engine->import_key($data);\n\n            if (is_array($result)) {\n                if (rcube_utils::get_input_value('_generated', rcube_utils::INPUT_POST)) {\n                    $this->rc->output->command('enigma_key_create_success');\n                    $this->rc->output->show_message('enigma.keygeneratesuccess', 'confirmation');\n                } else {\n                    $this->rc->output->show_message('enigma.keysimportsuccess', 'confirmation',\n                        ['new' => $result['imported'], 'old' => $result['unchanged']]);\n\n                    if ($result['imported'] && !empty($_POST['_refresh'])) {\n                        $this->rc->output->command('enigma_list', 1, false);\n                    }\n                }\n            } else {\n                $this->rc->output->show_message('enigma.keysimportfailed', 'error');\n            }\n\n            $this->rc->output->send();\n        } elseif (!empty($_FILES['_file']['tmp_name']) && is_uploaded_file($_FILES['_file']['tmp_name'])) {\n            $this->enigma->load_engine();\n            $result = $this->enigma->engine->import_key($_FILES['_file']['tmp_name'], true);\n\n            if (is_array($result)) {\n                // reload list if any keys has been added\n                if ($result['imported']) {\n                    $this->rc->output->command('parent.enigma_list', 1);\n                }\n\n                $this->rc->output->show_message('enigma.keysimportsuccess', 'confirmation',\n                    ['new' => $result['imported'], 'old' => $result['unchanged']]);\n\n                $this->rc->output->command('parent.enigma_import_success');\n            } elseif ($result instanceof enigma_error && $result->getCode() == enigma_error::BADPASS) {\n                $this->password_prompt($result);\n            } else {\n                $this->rc->output->show_message('enigma.keysimportfailed', 'error');\n            }\n            $this->rc->output->send('iframe');\n        } elseif (!empty($_FILES['_file']['error'])) {\n            rcmail_action::upload_error($_FILES['_file']['error']);\n            $this->rc->output->send('iframe');\n        }\n\n        $this->rc->output->add_handlers([\n            'importform' => [$this, 'tpl_key_import_form'],\n        ]);\n\n        $this->rc->output->send('enigma.keyimport');\n    }\n\n    /**\n     * Key import-search (page) handler\n     */\n    private function key_import_search()\n    {\n        $this->rc->output->add_handlers([\n            'importform' => [$this, 'tpl_key_import_form'],\n        ]);\n\n        $this->rc->output->send('enigma.keysearch');\n    }\n\n    /**\n     * Template object for key import (upload) form\n     *\n     * @param array $attrib Object attributes\n     *\n     * @return string HTML output\n     */\n    public function tpl_key_import_form($attrib)\n    {\n        $attrib += ['id' => 'rcmKeyImportForm'];\n\n        if (empty($attrib['part']) || $attrib['part'] == 'import') {\n            $title = $this->enigma->gettext('keyimportlabel');\n            $upload = new html_inputfield([\n                'type' => 'file',\n                'name' => '_file',\n                'id' => 'rcmimportfile',\n                'size' => 30,\n                'class' => 'form-control',\n            ]);\n\n            $max_filesize = rcmail_action::upload_init();\n            $upload_button = new html_button([\n                'class' => 'button import',\n                'onclick' => \"return rcmail.command('plugin.enigma-import','',this,event)\",\n            ]);\n\n            $form = html::div(null, html::p(null, rcube::Q($this->enigma->gettext('keyimporttext'), 'show'))\n                . $upload->show()\n                . html::div('hint', $this->rc->gettext(['id' => 'importfile', 'name' => 'maxuploadsize', 'vars' => ['size' => $max_filesize]]))\n                . (empty($attrib['part']) ? html::br() . html::br() . $upload_button->show($this->rc->gettext('import')) : '')\n            );\n\n            if (empty($attrib['part'])) {\n                $form = html::tag('fieldset', '', html::tag('legend', null, $title) . $form);\n            } else {\n                $this->rc->output->set_pagetitle($title);\n            }\n\n            $warning = $this->enigma->gettext('keystoragenotice');\n            $warning = html::div(['class' => 'boxinformation mb-3', 'id' => 'key-notice'], $warning);\n\n            $form = $warning . $form;\n        }\n\n        if (empty($attrib['part']) || $attrib['part'] == 'search') {\n            $title = $this->enigma->gettext('keyimportsearchlabel');\n            $search = new html_inputfield(['type' => 'text', 'name' => '_search',\n                'id' => 'rcmimportsearch', 'size' => 30, 'class' => 'form-control']);\n\n            $search_button = new html_button([\n                'class' => 'button search',\n                'onclick' => \"return rcmail.command('plugin.enigma-import-search','',this,event)\",\n            ]);\n\n            $form = html::div(null,\n                rcube::Q($this->enigma->gettext('keyimportsearchtext'), 'show')\n                . html::br() . html::br() . $search->show()\n                . (empty($attrib['part']) ? html::br() . html::br() . $search_button->show($this->rc->gettext('search')) : '')\n            );\n\n            if (empty($attrib['part'])) {\n                $form = html::tag('fieldset', '', html::tag('legend', null, $title) . $form);\n            } else {\n                $this->rc->output->set_pagetitle($title);\n            }\n\n            $this->rc->output->include_script('publickey.js');\n        }\n\n        $this->rc->output->add_label('selectimportfile', 'importwait', 'nopubkeyfor', 'nopubkeyforsender',\n            'encryptnoattachments', 'encryptedsendialog', 'searchpubkeyservers', 'importpubkeys',\n            'encryptpubkeysfound', 'search', 'close', 'import', 'keyid', 'keylength', 'keyexpired',\n            'keyrevoked', 'keyimportsuccess', 'keyservererror');\n\n        $this->rc->output->add_gui_object('importform', $attrib['id']);\n\n        $out = $this->rc->output->form_tag([\n                'action' => $this->rc->url(['action' => $this->rc->action, 'a' => 'import']),\n                'method' => 'post',\n                'enctype' => 'multipart/form-data',\n            ] + $attrib,\n            $form ?? ''\n        );\n\n        return $out;\n    }\n\n    /**\n     * Server-side key pair generation handler\n     */\n    private function key_generate()\n    {\n        // Crypt_GPG does not support key generation for multiple identities\n        // It is also very slow (which is problematic because it may exceed\n        // request time limit) and requires entropy generator\n        // That's why we use only OpenPGP.js method of key generation\n        rcmail::raise_error(['code' => 404, 'message' => 'Key generation not implemented'], true, true);\n\n        $user = rcube_utils::get_input_string('_user', rcube_utils::INPUT_POST, true);\n        $pass = rcube_utils::get_input_string('_password', rcube_utils::INPUT_POST, true);\n        $size = (int) rcube_utils::get_input_value('_size', rcube_utils::INPUT_POST);\n\n        if ($size > 4096) {\n            $size = 4096;\n        }\n\n        $ident = rcube_mime::decode_address_list($user, 1, false);\n\n        if (empty($ident)) {\n            $this->rc->output->show_message('enigma.keygenerateerror', 'error');\n            $this->rc->output->send();\n        }\n\n        $this->enigma->load_engine();\n        $result = $this->enigma->engine->generate_key([\n            'user' => $ident[1]['name'],\n            'email' => $ident[1]['mailto'],\n            'password' => $pass,\n            'size' => $size,\n        ]);\n\n        if ($result instanceof enigma_key) {\n            $this->rc->output->command('enigma_key_create_success');\n            $this->rc->output->show_message('enigma.keygeneratesuccess', 'confirmation');\n        } else {\n            $this->rc->output->show_message('enigma.keygenerateerror', 'error');\n        }\n\n        $this->rc->output->send();\n    }\n\n    /**\n     * Key generation page handler\n     */\n    private function key_create()\n    {\n        $this->enigma->include_script('openpgp.min.js');\n\n        $this->rc->output->add_handlers([\n            'keyform' => [$this, 'tpl_key_create_form'],\n        ]);\n\n        $this->rc->output->set_pagetitle($this->enigma->gettext('keygenerate'));\n        $this->rc->output->send('enigma.keycreate');\n    }\n\n    /**\n     * Template object for key generation form\n     *\n     * @param array $attrib Object attributes\n     *\n     * @return string HTML output\n     */\n    public function tpl_key_create_form($attrib)\n    {\n        $attrib += ['id' => 'rcmKeyCreateForm'];\n        $table = new html_table(['cols' => 2]);\n\n        // get user's identities\n        $identities = $this->rc->user->list_identities(null, true);\n        $checkbox = new html_checkbox(['name' => 'identity[]']);\n\n        $plugin = $this->rc->plugins->exec_hook('enigma_user_identities', ['identities' => $identities]);\n        $identities = $plugin['identities'];\n        $engine = $this->enigma->load_engine();\n\n        foreach ($identities as $idx => $ident) {\n            $name = format_email_recipient($ident['email'], $ident['name']);\n            $attr = ['value' => $idx, 'data-name' => $ident['name'], 'data-email' => $ident['email_ascii']];\n            $identities[$idx] = html::tag('li', null, html::label(null, $checkbox->show($idx, $attr) . rcube::Q($name)));\n        }\n\n        $table->add('title', html::label('key-name', rcube::Q($this->enigma->gettext('newkeyident'))));\n        $table->add(null, html::tag('ul', 'proplist', implode(\"\\n\", $identities)));\n\n        // Key size\n        $select = new html_select(['name' => 'type', 'id' => 'key-type', 'class' => 'custom-select']);\n        $select->add($this->enigma->gettext('rsa2048'), 'rsa2048');\n        $select->add($this->enigma->gettext('rsa4096'), 'rsa4096');\n\n        if ($engine->is_supported(enigma_driver::SUPPORT_ECC)) {\n            $select->add($this->enigma->gettext('ecckeypair'), 'ecc');\n        }\n\n        $table->add('title', html::label('key-type', rcube::Q($this->enigma->gettext('newkeytype'))));\n        $table->add(null, $select->show());\n\n        // Password and confirm password\n        $table->add('title', html::label('key-pass', rcube::Q($this->enigma->gettext('newkeypass'))));\n        $table->add(null, rcube_output::get_edit_field('password', '', [\n                'id' => 'key-pass',\n                'size' => $attrib['size'] ?? null,\n                'required' => true,\n                'autocomplete' => 'new-password',\n                'oninput' => \"this.type = this.value.length ? 'password' : 'text'\",\n            ], 'text')\n        );\n\n        $table->add('title', html::label('key-pass-confirm', rcube::Q($this->enigma->gettext('newkeypassconfirm'))));\n        $table->add(null, rcube_output::get_edit_field('password-confirm', '', [\n                'id' => 'key-pass-confirm',\n                'size' => $attrib['size'] ?? null,\n                'required' => true,\n                'autocomplete' => 'new-password',\n                'oninput' => \"this.type = this.value.length ? 'password' : 'text'\",\n            ], 'text')\n        );\n\n        $warning = $this->enigma->gettext('keystoragenotice');\n        $warning = html::div(['class' => 'boxinformation mb-3', 'id' => 'key-notice'], $warning);\n\n        $this->rc->output->add_gui_object('keyform', $attrib['id']);\n        $this->rc->output->add_label('enigma.keygenerating', 'enigma.formerror',\n            'enigma.passwordsdiffer', 'enigma.keygenerateerror', 'enigma.noidentselected',\n            'enigma.keygennosupport');\n\n        return $this->rc->output->form_tag([], $warning . $table->show($attrib));\n    }\n\n    /**\n     * Key deleting\n     */\n    private function key_delete()\n    {\n        $keys = rcube_utils::get_input_value('_keys', rcube_utils::INPUT_POST);\n        $engine = $this->enigma->load_engine();\n\n        foreach ((array) $keys as $key) {\n            $res = $engine->delete_key($key);\n\n            if ($res !== true) {\n                $this->rc->output->show_message('enigma.keyremoveerror', 'error');\n                $this->rc->output->command('enigma_list');\n                $this->rc->output->send();\n            }\n        }\n\n        $this->rc->output->command('enigma_list');\n        $this->rc->output->show_message('enigma.keyremovesuccess', 'confirmation');\n        $this->rc->output->send();\n    }\n\n    /**\n     * Init compose UI (add task button and the menu)\n     */\n    private function compose_ui()\n    {\n        $this->add_css();\n        $this->rc->output->add_label('enigma.sendunencrypted');\n\n        // Elastic skin (or a skin based on it)\n        if (array_key_exists('elastic', (array) $this->rc->output->skins)) {\n            $this->enigma->api->add_content($this->compose_ui_options(), 'composeoptions');\n        }\n        // other skins\n        else {\n            // Options menu button\n            $this->enigma->add_button([\n                    'type' => 'link',\n                    'command' => 'plugin.enigma',\n                    'onclick' => \"rcmail.command('menu-open', 'enigmamenu', event.target, event)\",\n                    'class' => 'button enigma',\n                    'title' => 'encryptionoptions',\n                    'label' => 'encryption',\n                    'domain' => $this->enigma->ID,\n                    'width' => 32,\n                    'height' => 32,\n                    'aria-owns' => 'enigmamenu',\n                    'aria-haspopup' => 'true',\n                    'aria-expanded' => 'false',\n                ], 'toolbar'\n            );\n\n            // Options menu contents\n            $this->rc->output->add_footer($this->compose_ui_options(true));\n        }\n    }\n\n    /**\n     * Init compose UI (add task button and the menu)\n     */\n    private function compose_ui_options($wrap = false)\n    {\n        $locks = (array) $this->rc->config->get('enigma_options_lock');\n        $chbox = new html_checkbox(['value' => 1]);\n\n        $out = html::div('form-group form-check row',\n            html::label(['for' => 'enigmasignopt', 'class' => 'col-form-label col-6'],\n                rcube::Q($this->enigma->gettext('signmsg'))\n            )\n            . html::div('form-check col-6',\n                $chbox->show($this->rc->config->get('enigma_sign_all') ? 1 : 0, [\n                    'name' => '_enigma_sign',\n                    'id' => 'enigmasignopt',\n                    'class' => 'form-check-input',\n                    'disabled' => in_array('sign', $locks),\n                ])\n            )\n        );\n\n        $out .= html::div('form-group form-check row',\n            html::label(['for' => 'enigmaencryptopt', 'class' => 'col-form-label col-6'],\n                rcube::Q($this->enigma->gettext('encryptmsg'))\n            )\n            . html::div('form-check col-6',\n                $chbox->show($this->rc->config->get('enigma_encrypt_all') ? 1 : 0, [\n                    'name' => '_enigma_encrypt',\n                    'id' => 'enigmaencryptopt',\n                    'class' => 'form-check-input',\n                    'disabled' => in_array('encrypt', $locks),\n                ])\n            )\n        );\n\n        $out .= html::div('form-group form-check row',\n            html::label(['for' => 'enigmaattachpubkeyopt', 'class' => 'col-form-label col-6'],\n                rcube::Q($this->enigma->gettext('attachpubkeymsg'))\n            )\n            . html::div('form-check col-6',\n                $chbox->show($this->rc->config->get('enigma_attach_pubkey') ? 1 : 0, [\n                    'name' => '_enigma_attachpubkey',\n                    'id' => 'enigmaattachpubkeyopt',\n                    'class' => 'form-check-input',\n                    'disabled' => in_array('pubkey', $locks),\n                ])\n            )\n        );\n\n        if (!$wrap) {\n            return $out;\n        }\n\n        return html::div(['id' => 'enigmamenu', 'class' => 'popupmenu'], $out);\n    }\n\n    /**\n     * Handler for message_body_prefix hook.\n     * Called for every displayed (content) part of the message.\n     * Adds infobox about signature verification and/or decryption\n     * status above the body.\n     *\n     * @param array $p Original parameters\n     *\n     * @return array Modified parameters\n     */\n    public function status_message($p)\n    {\n        // skip: not a message part\n        if ($p['part'] instanceof rcube_message) {\n            return $p;\n        }\n\n        // skip: message has no signed/encoded content\n        if (!$this->enigma->engine) {\n            return $p;\n        }\n\n        $engine = $this->enigma->engine;\n        $part_id = $p['part']->mime_id;\n        $messages = [];\n\n        // Decryption status\n        if (($found = $this->find_part_id($part_id, $engine->decryptions)) !== null\n            && !empty($engine->decryptions[$found])\n        ) {\n            $status = $engine->decryptions[$found];\n            $attach_scripts = true;\n\n            // show the message only once\n            unset($engine->decryptions[$found]);\n\n            // display status info\n            $attrib = ['id' => 'enigma-message'];\n\n            if ($status instanceof enigma_error) {\n                $attrib['class'] = 'boxerror enigmaerror encrypted';\n                $code = $status->getCode();\n\n                if ($code == enigma_error::KEYNOTFOUND) {\n                    $msg = rcube::Q(str_replace('$keyid', enigma_key::format_id($status->getData('id')),\n                        $this->enigma->gettext('decryptnokey')));\n                } elseif ($code == enigma_error::BADPASS) {\n                    $missing = $status->getData('missing');\n                    $label = 'decrypt' . (!empty($missing) ? 'no' : 'bad') . 'pass';\n                    $msg = rcube::Q($this->enigma->gettext($label));\n                    $this->password_prompt($status);\n                } elseif ($code == enigma_error::NOMDC) {\n                    $msg = rcube::Q($this->enigma->gettext('decryptnomdc'));\n                } else {\n                    $msg = rcube::Q($this->enigma->gettext('decrypterror'));\n                }\n            } elseif ($status === enigma_engine::ENCRYPTED_PARTIALLY) {\n                $attrib['class'] = 'boxwarning enigmawarning encrypted';\n                $msg = rcube::Q($this->enigma->gettext('decryptpartial'));\n            } else {\n                $attrib['class'] = 'boxconfirmation enigmanotice encrypted';\n                $msg = rcube::Q($this->enigma->gettext('decryptok'));\n            }\n\n            $attrib['msg'] = $msg;\n            $messages[] = $attrib;\n        }\n\n        // Signature verification status\n        if (($found = $this->find_part_id($part_id, $engine->signatures)) !== null\n            && !empty($engine->signatures[$found])\n        ) {\n            $sig = $engine->signatures[$found];\n            $attach_scripts = true;\n\n            // show the message only once\n            unset($engine->signatures[$found]);\n\n            // display status info\n            $attrib = ['id' => 'enigma-message'];\n\n            if ($sig instanceof enigma_signature) {\n                $sender = $sig->get_sender($engine, $p['message'], $part_id);\n\n                if ($sig->valid === enigma_error::UNVERIFIED) {\n                    $attrib['class'] = 'boxwarning enigmawarning signed';\n                    $msg = str_replace('$sender', $sender, $this->enigma->gettext('sigunverified'));\n                    $msg = str_replace('$keyid', $sig->id, $msg);\n                    $msg = rcube::Q($msg);\n                } elseif ($sig->valid) {\n                    $attrib['class'] = ($sig->partial ? 'boxwarning enigmawarning' : 'boxconfirmation enigmanotice') . ' signed';\n                    $label = 'sigvalid' . ($sig->partial ? 'partial' : '');\n                    $msg = rcube::Q(str_replace('$sender', $sender, $this->enigma->gettext($label)));\n                } else {\n                    $attrib['class'] = 'boxwarning enigmawarning signed';\n                    if ($sender) {\n                        $msg = rcube::Q(str_replace('$sender', $sender, $this->enigma->gettext('siginvalid')));\n                    } else {\n                        $msg = rcube::Q(str_replace('$keyid', enigma_key::format_id($sig->id),\n                            $this->enigma->gettext('signokey')));\n                    }\n                }\n            } elseif ($sig->getCode() == enigma_error::KEYNOTFOUND) {\n                $attrib['class'] = 'boxwarning enigmawarning signed';\n                $msg = rcube::Q(str_replace('$keyid', enigma_key::format_id($sig->getData('id')),\n                    $this->enigma->gettext('signokey')));\n            } else {\n                $attrib['class'] = 'boxwarning enigmaerror signed';\n                $msg = rcube::Q($this->enigma->gettext('sigerror'));\n            }\n\n            $attrib['msg'] = $msg;\n            $messages[] = $attrib;\n        }\n\n        if ($count = count($messages)) {\n            if ($count == 2 && $messages[0]['class'] == $messages[1]['class']) {\n                // @phpstan-ignore-next-line\n                $p['prefix'] .= html::div($messages[0], $messages[0]['msg'] . ' ' . $messages[1]['msg']);\n            } else {\n                foreach ($messages as $msg) {\n                    $p['prefix'] .= html::div($msg, $msg['msg']);\n                }\n            }\n        }\n\n        if (!empty($attach_scripts)) {\n            // add css and js script\n            $this->add_css();\n            $this->add_js();\n        }\n\n        return $p;\n    }\n\n    /**\n     * Handler for message_load hook.\n     * Check message bodies and attachments for keys/certs.\n     */\n    public function message_load($p)\n    {\n        $engine = $this->enigma->load_engine();\n\n        // handle keys/certs in attachments\n        foreach ((array) $p['object']->attachments as $attachment) {\n            if ($engine->is_keys_part($attachment)) {\n                $this->keys_parts[] = $attachment->mime_id;\n            }\n        }\n\n        // the same with message bodies\n        foreach ((array) $p['object']->parts as $part) {\n            if ($engine->is_keys_part($part)) {\n                $this->keys_parts[] = $part->mime_id;\n                $this->keys_bodies[] = $part->mime_id;\n            }\n        }\n\n        // @TODO: inline PGP keys\n\n        if ($this->keys_parts) {\n            $this->enigma->add_texts('localization');\n        }\n\n        return $p;\n    }\n\n    /**\n     * Handler for template_object_messagebody hook.\n     * This callback function adds a box below the message content\n     * if there is a key/cert attachment available\n     */\n    public function message_output($p)\n    {\n        foreach ($this->keys_parts as $part) {\n            // remove part's body\n            if (in_array($part, $this->keys_bodies)) {\n                $p['content'] = '';\n            }\n\n            // add box above the message body\n            $p['content'] = html::p(['class' => 'enigmaattachment boxinformation aligned-buttons'],\n                html::span(null, rcube::Q($this->enigma->gettext('keyattfound')))\n                . html::tag('button', [\n                        'onclick' => 'return ' . rcmail_output::JS_OBJECT_NAME . \".enigma_import_attachment('\" . rcube::JQ($part) . \"')\",\n                        'title' => $this->enigma->gettext('keyattimport'),\n                        'class' => 'import btn-sm',\n                    ], rcube::Q($this->rc->gettext('import'))\n                )\n            ) . $p['content'];\n\n            $attach_scripts = true;\n        }\n\n        if (!empty($attach_scripts)) {\n            // add css and js script\n            $this->add_css();\n            $this->add_js();\n        }\n\n        return $p;\n    }\n\n    /**\n     * Handle message_ready hook (encryption/signing/attach public key)\n     */\n    public function message_ready($p)\n    {\n        // The message might have been already encrypted by Mailvelope\n        if (str_starts_with((string) $p['message']->getParam('ctype'), 'multipart/encrypted')) {\n            return $p;\n        }\n\n        $savedraft = !empty($_POST['_draft']) && empty($_GET['_saveonly']);\n        $sign_enable = (bool) rcube_utils::get_input_value('_enigma_sign', rcube_utils::INPUT_POST);\n        $encrypt_enable = (bool) rcube_utils::get_input_value('_enigma_encrypt', rcube_utils::INPUT_POST);\n        $pubkey_enable = (bool) rcube_utils::get_input_value('_enigma_attachpubkey', rcube_utils::INPUT_POST);\n        $locks = (array) $this->rc->config->get('enigma_options_lock');\n\n        if (in_array('sign', $locks)) {\n            $sign_enable = (bool) $this->rc->config->get('enigma_sign_all');\n        }\n        if (in_array('encrypt', $locks)) {\n            $encrypt_enable = (bool) $this->rc->config->get('enigma_encrypt_all');\n        }\n        if (in_array('pubkey', $locks)) {\n            $pubkey_enable = (bool) $this->rc->config->get('enigma_attach_pubkey');\n        }\n\n        if (!$savedraft && $pubkey_enable) {\n            $engine = $this->enigma->load_engine();\n            $engine->attach_public_key($p['message']);\n        }\n\n        $mode = null;\n        $status = null;\n\n        if ($encrypt_enable) {\n            $engine = $this->enigma->load_engine();\n            $mode = !$savedraft && $sign_enable ? enigma_engine::ENCRYPT_MODE_SIGN : null;\n            $status = $engine->encrypt_message($p['message'], $mode, $savedraft);\n            $mode = 'encrypt';\n        } elseif (!$savedraft && $sign_enable) {\n            $engine = $this->enigma->load_engine();\n            $status = $engine->sign_message($p['message'], enigma_engine::SIGN_MODE_MIME);\n            $mode = 'sign';\n        }\n\n        if ($mode && ($status instanceof enigma_error)) {\n            $code = $status->getCode();\n            $vars = [];\n\n            if ($code == enigma_error::KEYNOTFOUND) {\n                if ($email = $status->getData('missing')) {\n                    $vars = ['email' => $email];\n                    $msg = 'enigma.' . $mode . 'nokey';\n                } else {\n                    $msg = 'enigma.' . ($encrypt_enable ? 'encryptnoprivkey' : 'signnokey');\n                }\n            } elseif ($code == enigma_error::BADPASS) {\n                $this->password_prompt($status);\n            } else {\n                $msg = 'enigma.' . $mode . 'error';\n            }\n\n            if (!empty($msg)) {\n                if (!empty($vars['email'])) {\n                    $this->rc->output->command('enigma_key_not_found', [\n                        'email' => $vars['email'],\n                        'text' => $this->rc->gettext(['name' => $msg, 'vars' => $vars]),\n                        'title' => $this->enigma->gettext('keynotfound'),\n                        'button' => $this->enigma->gettext('findkey'),\n                        'mode' => $mode,\n                    ]);\n                } else {\n                    $this->rc->output->show_message($msg, 'error', $vars);\n                }\n            }\n\n            $this->rc->output->send('iframe');\n        }\n\n        return $p;\n    }\n\n    /**\n     * Handler for message_compose_body hook\n     * Display error when the message cannot be encrypted\n     * and provide a way to try again with a password.\n     */\n    public function message_compose($p)\n    {\n        $engine = $this->enigma->load_engine();\n\n        // skip: message has no signed/encoded content\n        if (!$this->enigma->engine) {\n            return $p;\n        }\n\n        $engine = $this->enigma->engine;\n        $locks = (array) $this->rc->config->get('enigma_options_lock');\n\n        // Decryption status\n        foreach ($engine->decryptions as $status) {\n            if ($status instanceof enigma_error) {\n                $code = $status->getCode();\n\n                if ($code == enigma_error::BADPASS) {\n                    $this->password_prompt($status, ['compose-init' => true]);\n                    return $p;\n                }\n\n                if ($code == enigma_error::KEYNOTFOUND) {\n                    $msg = rcube::Q(str_replace('$keyid', enigma_key::format_id($status->getData('id')),\n                        $this->enigma->gettext('decryptnokey')));\n                } else {\n                    $msg = rcube::Q($this->enigma->gettext('decrypterror'));\n                }\n            }\n        }\n\n        if (!empty($msg)) {\n            $this->rc->output->show_message($msg, 'error');\n        }\n\n        // Check sign/encrypt options for signed/encrypted drafts\n        if (!in_array('encrypt', $locks)) {\n            $this->rc->output->set_env('enigma_force_encrypt', !empty($engine->decryptions));\n        }\n        if (!in_array('sign', $locks)) {\n            $this->rc->output->set_env('enigma_force_sign', !empty($engine->signatures));\n        }\n\n        return $p;\n    }\n\n    /**\n     * Handler for keys/certs import request action\n     */\n    public function import_file()\n    {\n        $uid = rcube_utils::get_input_string('_uid', rcube_utils::INPUT_POST);\n        $mbox = rcube_utils::get_input_string('_mbox', rcube_utils::INPUT_POST);\n        $mime_id = rcube_utils::get_input_string('_part', rcube_utils::INPUT_POST);\n        $engine = $this->enigma->load_engine();\n\n        if ($uid && $mime_id) {\n            // Note: we get the attachment body via rcube_message class\n            // to support keys inside encrypted messages (#5285)\n            $message = new rcube_message($uid, $mbox);\n\n            // Check if we don't need to ask for password again\n            foreach ($engine->decryptions as $status) {\n                if ($status instanceof enigma_error) {\n                    if ($status->getCode() == enigma_error::BADPASS) {\n                        $this->password_prompt($status, [\n                            'input_uid' => $uid,\n                            'input_mbox' => $mbox,\n                            'input_part' => $mime_id,\n                            'input_task' => 'mail',\n                            'input_action' => 'plugin.enigmaimport',\n                            'action' => '?',\n                            'iframe' => true,\n                        ]);\n                        $this->rc->output->send($this->rc->output->type == 'html' ? 'iframe' : null);\n                        return;\n                    }\n                }\n            }\n\n            if ($engine->is_keys_part($message->mime_parts[$mime_id])) {\n                $part = $message->get_part_body($mime_id);\n            }\n        }\n\n        if (!empty($part) && is_array($result = $engine->import_key($part))) {\n            $this->rc->output->show_message('enigma.keysimportsuccess', 'confirmation',\n                ['new' => $result['imported'], 'old' => $result['unchanged']]);\n        } else {\n            $this->rc->output->show_message('enigma.keysimportfailed', 'error');\n        }\n\n        $this->rc->output->send($this->rc->output->type == 'html' ? 'iframe' : null);\n    }\n\n    /**\n     * Check if the part or its parent exists in the array\n     * of decryptions/signatures. Returns found ID.\n     *\n     * @param string $part_id\n     * @param array  $data\n     *\n     * @return string|null\n     */\n    private function find_part_id($part_id, $data)\n    {\n        $ids = explode('.', $part_id);\n        $i = 0;\n        $count = count($ids);\n\n        // @phpstan-ignore-next-line\n        while ($i < $count && strlen($part = implode('.', array_slice($ids, 0, ++$i)))) {\n            if (array_key_exists($part, $data)) {\n                return $part;\n            }\n        }\n\n        return null;\n    }\n}\n", "patch": "@@ -459,6 +459,8 @@ function tpl_key_data($attrib)\n      */\n     private function key_export()\n     {\n+        $this->rc->request_security_check(rcube_utils::INPUT_GET);\n+\n         $keys   = rcube_utils::get_input_value('_keys', rcube_utils::INPUT_GPC);\n         $engine = $this->enigma->load_engine();\n         $list   = $keys == '*' ? $engine->list_keys() : explode(',', $keys);", "file_path": "files/2016_8\\5", "file_language": "php", "file_name": "plugins/enigma/lib/enigma_ui.php", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/4a408843b0ef816daf70a472a02b78cd6073a4d5/plugins/managesieve/lib/Roundcube/rcube_sieve_engine.php", "code": "<?php\n\n/**\n * Managesieve (Sieve Filters) Engine\n *\n * Engine part of Managesieve plugin implementing UI and backend access.\n *\n * Copyright (C) 2008-2014, The Roundcube Dev Team\n * Copyright (C) 2011-2014, Kolab Systems AG\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see http://www.gnu.org/licenses/.\n */\n\nclass rcube_sieve_engine\n{\n    protected $rc;\n    protected $sieve;\n    protected $errors;\n    protected $form;\n    protected $tips = array();\n    protected $script = array();\n    protected $exts = array();\n    protected $list;\n    protected $active = array();\n    protected $headers = array(\n        'subject' => 'Subject',\n        'from'    => 'From',\n        'to'      => 'To',\n    );\n    protected $addr_headers = array(\n        // Required\n        \"from\", \"to\", \"cc\", \"bcc\", \"sender\", \"resent-from\", \"resent-to\",\n        // Additional (RFC 822 / RFC 2822)\n        \"reply-to\", \"resent-reply-to\", \"resent-sender\", \"resent-cc\", \"resent-bcc\",\n        // Non-standard (RFC 2076, draft-palme-mailext-headers-08.txt)\n        \"for-approval\", \"for-handling\", \"for-comment\", \"apparently-to\", \"errors-to\",\n        \"delivered-to\", \"return-receipt-to\", \"x-admin\", \"read-receipt-to\",\n        \"x-confirm-reading-to\", \"return-receipt-requested\",\n        \"registered-mail-reply-requested-by\", \"mail-followup-to\", \"mail-reply-to\",\n        \"abuse-reports-to\", \"x-complaints-to\", \"x-report-abuse-to\",\n        // Undocumented\n        \"x-beenthere\",\n    );\n    protected $notify_methods = array(\n        'mailto',\n        // 'sms',\n        // 'tel',\n    );\n    protected $notify_importance_options = array(\n        3 => 'notifyimportancelow',\n        2 => 'notifyimportancenormal',\n        1 => 'notifyimportancehigh'\n    );\n\n    const VERSION  = '8.5';\n    const PROGNAME = 'Roundcube (Managesieve)';\n    const PORT     = 4190;\n\n\n    /**\n     * Class constructor\n     */\n    function __construct($plugin)\n    {\n        $this->rc     = rcube::get_instance();\n        $this->plugin = $plugin;\n    }\n\n    /**\n     * Loads configuration, initializes plugin (including sieve connection)\n     */\n    function start($mode = null)\n    {\n        // register UI objects\n        $this->rc->output->add_handlers(array(\n            'filterslist'    => array($this, 'filters_list'),\n            'filtersetslist' => array($this, 'filtersets_list'),\n            'filterframe'    => array($this, 'filter_frame'),\n            'filterform'     => array($this, 'filter_form'),\n            'filtersetform'  => array($this, 'filterset_form'),\n        ));\n\n        // connect to managesieve server\n        $error = $this->connect($_SESSION['username'], $this->rc->decrypt($_SESSION['password']));\n\n        // load current/active script\n        if (!$error) {\n            // Get list of scripts\n            $list = $this->list_scripts();\n\n            // reset current script when entering filters UI (#1489412)\n            if ($this->rc->action == 'plugin.managesieve') {\n                $this->rc->session->remove('managesieve_current');\n            }\n\n            if ($mode != 'vacation') {\n                if (!empty($_GET['_set']) || !empty($_POST['_set'])) {\n                    $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_GPC, true);\n                }\n                else if (!empty($_SESSION['managesieve_current'])) {\n                    $script_name = $_SESSION['managesieve_current'];\n                }\n            }\n\n            $error = $this->load_script($script_name);\n        }\n\n        // finally set script objects\n        if ($error) {\n            switch ($error) {\n                case rcube_sieve::ERROR_CONNECTION:\n                case rcube_sieve::ERROR_LOGIN:\n                    $this->rc->output->show_message('managesieve.filterconnerror', 'error');\n                    break;\n\n                default:\n                    $this->rc->output->show_message('managesieve.filterunknownerror', 'error');\n                    break;\n            }\n\n            // reload interface in case of possible error when specified script wasn't found (#1489412)\n            if ($script_name !== null && !empty($list) && !in_array($script_name, $list)) {\n                $this->rc->output->command('reload', 500);\n            }\n\n            // to disable 'Add filter' button set env variable\n            $this->rc->output->set_env('filterconnerror', true);\n            $this->script = array();\n        }\n        else {\n            $this->exts = $this->sieve->get_extensions();\n            $this->init_script();\n            $this->rc->output->set_env('currentset', $this->sieve->current);\n            $_SESSION['managesieve_current'] = $this->sieve->current;\n        }\n\n        return $error;\n    }\n\n    /**\n     * Connect to configured managesieve server\n     *\n     * @param string $username User login\n     * @param string $password User password\n     *\n     * @return int Connection status: 0 on success, >0 on failure\n     */\n    public function connect($username, $password)\n    {\n        // Get connection parameters\n        $host = $this->rc->config->get('managesieve_host', 'localhost');\n        $port = $this->rc->config->get('managesieve_port');\n        $tls  = $this->rc->config->get('managesieve_usetls', false);\n\n        $host = rcube_utils::parse_host($host);\n        $host = rcube_utils::idn_to_ascii($host);\n\n        // remove tls:// prefix, set TLS flag\n        if (($host = preg_replace('|^tls://|i', '', $host, 1, $cnt)) && $cnt) {\n            $tls = true;\n        }\n\n        if (empty($port)) {\n            $port = getservbyname('sieve', 'tcp');\n            if (empty($port)) {\n                $port = self::PORT;\n            }\n        }\n\n        $plugin = $this->rc->plugins->exec_hook('managesieve_connect', array(\n            'user'      => $username,\n            'password'  => $password,\n            'host'      => $host,\n            'port'      => $port,\n            'usetls'    => $tls,\n            'auth_type' => $this->rc->config->get('managesieve_auth_type'),\n            'disabled'  => $this->rc->config->get('managesieve_disabled_extensions'),\n            'debug'     => $this->rc->config->get('managesieve_debug', false),\n            'auth_cid'  => $this->rc->config->get('managesieve_auth_cid'),\n            'auth_pw'   => $this->rc->config->get('managesieve_auth_pw'),\n            'socket_options' => $this->rc->config->get('managesieve_conn_options'),\n        ));\n\n        // try to connect to managesieve server and to fetch the script\n        $this->sieve = new rcube_sieve(\n            $plugin['user'],\n            $plugin['password'],\n            $plugin['host'],\n            $plugin['port'],\n            $plugin['auth_type'],\n            $plugin['usetls'],\n            $plugin['disabled'],\n            $plugin['debug'],\n            $plugin['auth_cid'],\n            $plugin['auth_pw'],\n            $plugin['socket_options']\n        );\n\n        $error = $this->sieve->error();\n\n        if ($error) {\n            rcube::raise_error(array(\n                    'code'    => 403,\n                    'file'    => __FILE__,\n                    'line'    => __LINE__,\n                    'message' => \"Unable to connect to managesieve on $host:$port\"\n                ), true, false);\n        }\n\n        return $error;\n    }\n\n    /**\n     * Load specified (or active) script\n     *\n     * @param string $script_name Optional script name\n     *\n     * @return int Connection status: 0 on success, >0 on failure\n     */\n    protected function load_script($script_name = null)\n    {\n        // Get list of scripts\n        $list = $this->list_scripts();\n\n        if ($script_name === null || $script_name === '') {\n            // get (first) active script\n            if (!empty($this->active)) {\n               $script_name = $this->active[0];\n            }\n            else if ($list) {\n                $script_name = $list[0];\n            }\n            // create a new (initial) script\n            else {\n                // if script not exists build default script contents\n                $script_file = $this->rc->config->get('managesieve_default');\n                $script_name = $this->rc->config->get('managesieve_script_name');\n\n                if (empty($script_name)) {\n                    $script_name = 'roundcube';\n                }\n\n                if ($script_file && is_readable($script_file)) {\n                    $content = file_get_contents($script_file);\n                }\n\n                // add script and set it active\n                if ($this->sieve->save_script($script_name, $content)) {\n                    $this->activate_script($script_name);\n                    $this->list[] = $script_name;\n                }\n            }\n        }\n\n        if ($script_name) {\n            $this->sieve->load($script_name);\n        }\n\n        return $this->sieve->error();\n    }\n\n    /**\n     * User interface actions handler\n     */\n    function actions()\n    {\n        $error = $this->start();\n\n        // Handle user requests\n        if ($action = rcube_utils::get_input_value('_act', rcube_utils::INPUT_GPC)) {\n            $fid = (int) rcube_utils::get_input_value('_fid', rcube_utils::INPUT_POST);\n\n            if ($action == 'delete' && !$error) {\n                if (isset($this->script[$fid])) {\n                    if ($this->sieve->script->delete_rule($fid))\n                        $result = $this->save_script();\n\n                    if ($result === true) {\n                        $this->rc->output->show_message('managesieve.filterdeleted', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'del', array('id' => $fid));\n                    } else {\n                        $this->rc->output->show_message('managesieve.filterdeleteerror', 'error');\n                    }\n                }\n            }\n            else if ($action == 'move' && !$error) {\n                if (isset($this->script[$fid])) {\n                    $to   = (int) rcube_utils::get_input_value('_to', rcube_utils::INPUT_POST);\n                    $rule = $this->script[$fid];\n\n                    // remove rule\n                    unset($this->script[$fid]);\n                    $this->script = array_values($this->script);\n\n                    // add at target position\n                    if ($to >= count($this->script)) {\n                        $this->script[] = $rule;\n                    }\n                    else {\n                        $script = array();\n                        foreach ($this->script as $idx => $r) {\n                            if ($idx == $to)\n                                $script[] = $rule;\n                            $script[] = $r;\n                        }\n                        $this->script = $script;\n                    }\n\n                    $this->sieve->script->content = $this->script;\n                    $result = $this->save_script();\n\n                    if ($result === true) {\n                        $result = $this->list_rules();\n\n                        $this->rc->output->show_message('managesieve.moved', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'list',\n                            array('list' => $result, 'clear' => true, 'set' => $to));\n                    } else {\n                        $this->rc->output->show_message('managesieve.moveerror', 'error');\n                    }\n                }\n            }\n            else if ($action == 'act' && !$error) {\n                if (isset($this->script[$fid])) {\n                    $rule     = $this->script[$fid];\n                    $disabled = $rule['disabled'] ? true : false;\n                    $rule['disabled'] = !$disabled;\n                    $result = $this->sieve->script->update_rule($fid, $rule);\n\n                    if ($result !== false)\n                        $result = $this->save_script();\n\n                    if ($result === true) {\n                        if ($rule['disabled'])\n                            $this->rc->output->show_message('managesieve.deactivated', 'confirmation');\n                        else\n                            $this->rc->output->show_message('managesieve.activated', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'update',\n                            array('id' => $fid, 'disabled' => $rule['disabled']));\n                    } else {\n                        if ($rule['disabled'])\n                            $this->rc->output->show_message('managesieve.deactivateerror', 'error');\n                        else\n                            $this->rc->output->show_message('managesieve.activateerror', 'error');\n                    }\n                }\n            }\n            else if ($action == 'setact' && !$error) {\n                $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_POST, true);\n                $result = $this->activate_script($script_name);\n                $kep14  = $this->rc->config->get('managesieve_kolab_master');\n\n                if ($result === true) {\n                    $this->rc->output->set_env('active_sets', $this->active);\n                    $this->rc->output->show_message('managesieve.setactivated', 'confirmation');\n                    $this->rc->output->command('managesieve_updatelist', 'setact',\n                        array('name' => $script_name, 'active' => true, 'all' => !$kep14));\n                } else {\n                    $this->rc->output->show_message('managesieve.setactivateerror', 'error');\n                }\n            }\n            else if ($action == 'deact' && !$error) {\n                $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_POST, true);\n                $result = $this->deactivate_script($script_name);\n\n                if ($result === true) {\n                    $this->rc->output->set_env('active_sets', $this->active);\n                    $this->rc->output->show_message('managesieve.setdeactivated', 'confirmation');\n                    $this->rc->output->command('managesieve_updatelist', 'setact',\n                        array('name' => $script_name, 'active' => false));\n                } else {\n                    $this->rc->output->show_message('managesieve.setdeactivateerror', 'error');\n                }\n            }\n            else if ($action == 'setdel' && !$error) {\n                $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_POST, true);\n                $result = $this->remove_script($script_name);\n\n                if ($result === true) {\n                    $this->rc->output->show_message('managesieve.setdeleted', 'confirmation');\n                    $this->rc->output->command('managesieve_updatelist', 'setdel',\n                        array('name' => $script_name));\n                    $this->rc->session->remove('managesieve_current');\n                } else {\n                    $this->rc->output->show_message('managesieve.setdeleteerror', 'error');\n                }\n            }\n            else if ($action == 'setget') {\n                $this->rc->request_security_check(rcube_utils::INPUT_GET);\n\n                $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_GPC, true);\n                $script      = $this->sieve->get_script($script_name);\n\n                if (is_a($script, 'PEAR_Error')) {\n                    exit;\n                }\n\n                $browser = new rcube_browser;\n\n                // send download headers\n                header(\"Content-Type: application/octet-stream\");\n                header(\"Content-Length: \".strlen($script));\n\n                if ($browser->ie) {\n                    header(\"Content-Type: application/force-download\");\n                    $filename = rawurlencode($script_name);\n                }\n                else {\n                    $filename = addcslashes($script_name, '\\\\\"');\n                }\n\n                header(\"Content-Disposition: attachment; filename=\\\"$filename.txt\\\"\");\n                echo $script;\n                exit;\n            }\n            else if ($action == 'list') {\n                $result = $this->list_rules();\n\n                $this->rc->output->command('managesieve_updatelist', 'list', array('list' => $result));\n            }\n            else if ($action == 'ruleadd') {\n                $rid = rcube_utils::get_input_value('_rid', rcube_utils::INPUT_POST);\n                $id = $this->genid();\n                $content = $this->rule_div($fid, $id, false);\n\n                $this->rc->output->command('managesieve_rulefill', $content, $id, $rid);\n            }\n            else if ($action == 'actionadd') {\n                $aid = rcube_utils::get_input_value('_aid', rcube_utils::INPUT_POST);\n                $id = $this->genid();\n                $content = $this->action_div($fid, $id, false);\n\n                $this->rc->output->command('managesieve_actionfill', $content, $id, $aid);\n            }\n            else if ($action == 'addresses') {\n                $aid = rcube_utils::get_input_value('_aid', rcube_utils::INPUT_POST);\n\n                $this->rc->output->command('managesieve_vacation_addresses_update', $aid, $this->user_emails());\n            }\n\n            $this->rc->output->send();\n        }\n        else if ($this->rc->task == 'mail') {\n            // Initialize the form\n            $rules = rcube_utils::get_input_value('r', rcube_utils::INPUT_GET);\n            if (!empty($rules)) {\n                $i = 0;\n                foreach ($rules as $rule) {\n                    list($header, $value) = explode(':', $rule, 2);\n                    $tests[$i] = array(\n                        'type' => 'contains',\n                        'test' => 'header',\n                        'arg1' => $header,\n                        'arg2' => $value,\n                    );\n                    $i++;\n                }\n\n                $this->form = array(\n                    'join'  => count($tests) > 1 ? 'allof' : 'anyof',\n                    'name'  => '',\n                    'tests' => $tests,\n                    'actions' => array(\n                        0 => array('type' => 'fileinto'),\n                        1 => array('type' => 'stop'),\n                    ),\n                );\n            }\n        }\n\n        $this->send();\n    }\n\n    function save()\n    {\n        // Init plugin and handle managesieve connection\n        $error = $this->start();\n\n        // get request size limits (#1488648)\n        $max_post = max(array(\n            ini_get('max_input_vars'),\n            ini_get('suhosin.request.max_vars'),\n            ini_get('suhosin.post.max_vars'),\n        ));\n        $max_depth = max(array(\n            ini_get('suhosin.request.max_array_depth'),\n            ini_get('suhosin.post.max_array_depth'),\n        ));\n\n        // check request size limit\n        if ($max_post && count($_POST, COUNT_RECURSIVE) >= $max_post) {\n            rcube::raise_error(array(\n                'code' => 500, 'type' => 'php',\n                'file' => __FILE__, 'line' => __LINE__,\n                'message' => \"Request size limit exceeded (one of max_input_vars/suhosin.request.max_vars/suhosin.post.max_vars)\"\n                ), true, false);\n            $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n        }\n        // check request depth limits\n        else if ($max_depth && count($_POST['_header']) > $max_depth) {\n            rcube::raise_error(array(\n                'code' => 500, 'type' => 'php',\n                'file' => __FILE__, 'line' => __LINE__,\n                'message' => \"Request size limit exceeded (one of suhosin.request.max_array_depth/suhosin.post.max_array_depth)\"\n                ), true, false);\n            $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n        }\n        // filters set add action\n        else if (!empty($_POST['_newset'])) {\n            $name       = rcube_utils::get_input_value('_name', rcube_utils::INPUT_POST, true);\n            $copy       = rcube_utils::get_input_value('_copy', rcube_utils::INPUT_POST, true);\n            $from       = rcube_utils::get_input_value('_from', rcube_utils::INPUT_POST);\n            $exceptions = $this->rc->config->get('managesieve_filename_exceptions');\n            $kolab      = $this->rc->config->get('managesieve_kolab_master');\n            $name_uc    = mb_strtolower($name);\n            $list       = $this->list_scripts();\n\n            if (!$name) {\n                $this->errors['name'] = $this->plugin->gettext('cannotbeempty');\n            }\n            else if (mb_strlen($name) > 128) {\n                $this->errors['name'] = $this->plugin->gettext('nametoolong');\n            }\n            else if (!empty($exceptions) && in_array($name, (array)$exceptions)) {\n                $this->errors['name'] = $this->plugin->gettext('namereserved');\n            }\n            else if (!empty($kolab) && in_array($name_uc, array('MASTER', 'USER', 'MANAGEMENT'))) {\n                $this->errors['name'] = $this->plugin->gettext('namereserved');\n            }\n            else if (in_array($name, $list)) {\n                $this->errors['name'] = $this->plugin->gettext('setexist');\n            }\n            else if ($from == 'file') {\n                // from file\n                if (is_uploaded_file($_FILES['_file']['tmp_name'])) {\n                    $file = file_get_contents($_FILES['_file']['tmp_name']);\n                    $file = preg_replace('/\\r/', '', $file);\n                    // for security don't save script directly\n                    // check syntax before, like this...\n                    $this->sieve->load_script($file);\n                    if (!$this->save_script($name)) {\n                        $this->errors['file'] = $this->plugin->gettext('setcreateerror');\n                    }\n                }\n                else {  // upload failed\n                    $err = $_FILES['_file']['error'];\n\n                    if ($err == UPLOAD_ERR_INI_SIZE || $err == UPLOAD_ERR_FORM_SIZE) {\n                        $msg = $this->rc->gettext(array('name' => 'filesizeerror',\n                            'vars' => array('size' =>\n                                $this->rc->show_bytes(parse_bytes(ini_get('upload_max_filesize'))))));\n                    }\n                    else {\n                        $this->errors['file'] = $this->plugin->gettext('fileuploaderror');\n                    }\n                }\n            }\n            else if (!$this->sieve->copy($name, $from == 'set' ? $copy : '')) {\n                $error = 'managesieve.setcreateerror';\n            }\n\n            if (!$error && empty($this->errors)) {\n                // Find position of the new script on the list\n                $list[] = $name;\n                asort($list, SORT_LOCALE_STRING);\n                $list  = array_values($list);\n                $index = array_search($name, $list);\n\n                $this->rc->output->show_message('managesieve.setcreated', 'confirmation');\n                $this->rc->output->command('parent.managesieve_updatelist', 'setadd',\n                    array('name' => $name, 'index' => $index));\n            } else if ($msg) {\n                $this->rc->output->command('display_message', $msg, 'error');\n            } else if ($error) {\n                $this->rc->output->show_message($error, 'error');\n            }\n        }\n        // filter add/edit action\n        else if (isset($_POST['_name'])) {\n            $name = trim(rcube_utils::get_input_value('_name', rcube_utils::INPUT_POST, true));\n            $fid  = trim(rcube_utils::get_input_value('_fid', rcube_utils::INPUT_POST));\n            $join = trim(rcube_utils::get_input_value('_join', rcube_utils::INPUT_POST));\n\n            // and arrays\n            $headers        = rcube_utils::get_input_value('_header', rcube_utils::INPUT_POST);\n            $cust_headers   = rcube_utils::get_input_value('_custom_header', rcube_utils::INPUT_POST);\n            $ops            = rcube_utils::get_input_value('_rule_op', rcube_utils::INPUT_POST);\n            $sizeops        = rcube_utils::get_input_value('_rule_size_op', rcube_utils::INPUT_POST);\n            $sizeitems      = rcube_utils::get_input_value('_rule_size_item', rcube_utils::INPUT_POST);\n            $sizetargets    = rcube_utils::get_input_value('_rule_size_target', rcube_utils::INPUT_POST);\n            $targets        = rcube_utils::get_input_value('_rule_target', rcube_utils::INPUT_POST, true);\n            $mods           = rcube_utils::get_input_value('_rule_mod', rcube_utils::INPUT_POST);\n            $mod_types      = rcube_utils::get_input_value('_rule_mod_type', rcube_utils::INPUT_POST);\n            $body_trans     = rcube_utils::get_input_value('_rule_trans', rcube_utils::INPUT_POST);\n            $body_types     = rcube_utils::get_input_value('_rule_trans_type', rcube_utils::INPUT_POST, true);\n            $comparators    = rcube_utils::get_input_value('_rule_comp', rcube_utils::INPUT_POST);\n            $indexes        = rcube_utils::get_input_value('_rule_index', rcube_utils::INPUT_POST);\n            $lastindexes    = rcube_utils::get_input_value('_rule_index_last', rcube_utils::INPUT_POST);\n            $dateheaders    = rcube_utils::get_input_value('_rule_date_header', rcube_utils::INPUT_POST);\n            $dateparts      = rcube_utils::get_input_value('_rule_date_part', rcube_utils::INPUT_POST);\n            $act_types      = rcube_utils::get_input_value('_action_type', rcube_utils::INPUT_POST, true);\n            $mailboxes      = rcube_utils::get_input_value('_action_mailbox', rcube_utils::INPUT_POST, true);\n            $act_targets    = rcube_utils::get_input_value('_action_target', rcube_utils::INPUT_POST, true);\n            $domain_targets = rcube_utils::get_input_value('_action_target_domain', rcube_utils::INPUT_POST);\n            $area_targets   = rcube_utils::get_input_value('_action_target_area', rcube_utils::INPUT_POST, true);\n            $reasons        = rcube_utils::get_input_value('_action_reason', rcube_utils::INPUT_POST, true);\n            $addresses      = rcube_utils::get_input_value('_action_addresses', rcube_utils::INPUT_POST, true);\n            $intervals      = rcube_utils::get_input_value('_action_interval', rcube_utils::INPUT_POST);\n            $interval_types = rcube_utils::get_input_value('_action_interval_type', rcube_utils::INPUT_POST);\n            $from           = rcube_utils::get_input_value('_action_from', rcube_utils::INPUT_POST);\n            $subject        = rcube_utils::get_input_value('_action_subject', rcube_utils::INPUT_POST, true);\n            $flags          = rcube_utils::get_input_value('_action_flags', rcube_utils::INPUT_POST);\n            $varnames       = rcube_utils::get_input_value('_action_varname', rcube_utils::INPUT_POST);\n            $varvalues      = rcube_utils::get_input_value('_action_varvalue', rcube_utils::INPUT_POST);\n            $varmods        = rcube_utils::get_input_value('_action_varmods', rcube_utils::INPUT_POST);\n            $notifymethods  = rcube_utils::get_input_value('_action_notifymethod', rcube_utils::INPUT_POST);\n            $notifytargets  = rcube_utils::get_input_value('_action_notifytarget', rcube_utils::INPUT_POST, true);\n            $notifyoptions  = rcube_utils::get_input_value('_action_notifyoption', rcube_utils::INPUT_POST, true);\n            $notifymessages = rcube_utils::get_input_value('_action_notifymessage', rcube_utils::INPUT_POST, true);\n            $notifyfrom     = rcube_utils::get_input_value('_action_notifyfrom', rcube_utils::INPUT_POST);\n            $notifyimp      = rcube_utils::get_input_value('_action_notifyimportance', rcube_utils::INPUT_POST);\n\n            // we need a \"hack\" for radiobuttons\n            foreach ($sizeitems as $item)\n                $items[] = $item;\n\n            $this->form['disabled'] = !empty($_POST['_disabled']);\n            $this->form['join']     = $join == 'allof';\n            $this->form['name']     = $name;\n            $this->form['tests']    = array();\n            $this->form['actions']  = array();\n\n            if ($name == '')\n                $this->errors['name'] = $this->plugin->gettext('cannotbeempty');\n            else {\n                foreach($this->script as $idx => $rule)\n                    if($rule['name'] == $name && $idx != $fid) {\n                        $this->errors['name'] = $this->plugin->gettext('ruleexist');\n                        break;\n                    }\n            }\n\n            $i = 0;\n            // rules\n            if ($join == 'any') {\n                $this->form['tests'][0]['test'] = 'true';\n            }\n            else {\n                foreach ($headers as $idx => $header) {\n                    // targets are indexed differently (assume form order)\n                    $target     = $this->strip_value(array_shift($targets), true);\n                    $header     = $this->strip_value($header);\n                    $operator   = $this->strip_value($ops[$idx]);\n                    $comparator = $this->strip_value($comparators[$idx]);\n\n                    if ($header == 'size') {\n                        $sizeop     = $this->strip_value($sizeops[$idx]);\n                        $sizeitem   = $this->strip_value($items[$idx]);\n                        $sizetarget = $this->strip_value($sizetargets[$idx]);\n\n                        $this->form['tests'][$i]['test'] = 'size';\n                        $this->form['tests'][$i]['type'] = $sizeop;\n                        $this->form['tests'][$i]['arg']  = $sizetarget;\n\n                        if ($sizetarget == '')\n                            $this->errors['tests'][$i]['sizetarget'] = $this->plugin->gettext('cannotbeempty');\n                        else if (!preg_match('/^[0-9]+(K|M|G)?$/i', $sizetarget.$sizeitem, $m)) {\n                            $this->errors['tests'][$i]['sizetarget'] = $this->plugin->gettext('forbiddenchars');\n                            $this->form['tests'][$i]['item'] = $sizeitem;\n                        }\n                        else\n                            $this->form['tests'][$i]['arg'] .= $m[1];\n                    }\n                    else if ($header == 'currentdate') {\n                        $datepart = $this->strip_value($dateparts[$idx]);\n\n                        if (preg_match('/^not/', $operator))\n                            $this->form['tests'][$i]['not'] = true;\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        $this->form['tests'][$i]['test'] = 'currentdate';\n                        $this->form['tests'][$i]['type'] = $type;\n                        $this->form['tests'][$i]['part'] = $datepart;\n                        $this->form['tests'][$i]['arg']  = $target;\n\n                        if ($type != 'exists') {\n                            if (!count($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            }\n                            else if (strpos($type, 'count-') === 0) {\n                                foreach ($target as $arg) {\n                                    if (preg_match('/[^0-9]/', $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n                            else if (strpos($type, 'value-') === 0) {\n                                // Some date/time formats do not support i;ascii-numeric comparator\n                                if ($comparator == 'i;ascii-numeric' && in_array($datepart, array('date', 'time', 'iso8601', 'std11'))) {\n                                    $comparator = '';\n                                }\n                            }\n\n                            if (!preg_match('/^(regex|matches|count-)/', $type) && count($target)) {\n                                foreach ($target as $arg) {\n                                    if (!$this->validate_date_part($datepart, $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('invaliddateformat');\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else if ($header == 'date') {\n                        $datepart    = $this->strip_value($dateparts[$idx]);\n                        $dateheader  = $this->strip_value($dateheaders[$idx]);\n                        $index       = $this->strip_value($indexes[$idx]);\n                        $indexlast   = $this->strip_value($lastindexes[$idx]);\n\n                        if (preg_match('/^not/', $operator))\n                            $this->form['tests'][$i]['not'] = true;\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        if (!empty($index) && $mod != 'envelope') {\n                            $this->form['tests'][$i]['index'] = intval($index);\n                            $this->form['tests'][$i]['last']  = !empty($indexlast);\n                        }\n\n                        if (empty($dateheader)) {\n                            $dateheader = 'Date';\n                        }\n                        else if (!preg_match('/^[\\x21-\\x39\\x41-\\x7E]+$/i', $dateheader)) {\n                            $this->errors['tests'][$i]['dateheader'] = $this->plugin->gettext('forbiddenchars');\n                        }\n\n                        $this->form['tests'][$i]['test']   = 'date';\n                        $this->form['tests'][$i]['type']   = $type;\n                        $this->form['tests'][$i]['part']   = $datepart;\n                        $this->form['tests'][$i]['arg']    = $target;\n                        $this->form['tests'][$i]['header'] = $dateheader;\n\n                        if ($type != 'exists') {\n                            if (!count($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            }\n                            else if (strpos($type, 'count-') === 0) {\n                                foreach ($target as $arg) {\n                                    if (preg_match('/[^0-9]/', $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n                            else if (strpos($type, 'value-') === 0) {\n                                // Some date/time formats do not support i;ascii-numeric comparator\n                                if ($comparator == 'i;ascii-numeric' && in_array($datepart, array('date', 'time', 'iso8601', 'std11'))) {\n                                    $comparator = '';\n                                }\n                            }\n\n                            if (count($target) && !preg_match('/^(regex|matches|count-)/', $type)) {\n                                foreach ($target as $arg) {\n                                    if (!$this->validate_date_part($datepart, $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('invaliddateformat');\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else if ($header == 'body') {\n                        $trans      = $this->strip_value($body_trans[$idx]);\n                        $trans_type = $this->strip_value($body_types[$idx], true);\n\n                        if (preg_match('/^not/', $operator))\n                            $this->form['tests'][$i]['not'] = true;\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        $this->form['tests'][$i]['test'] = 'body';\n                        $this->form['tests'][$i]['type'] = $type;\n                        $this->form['tests'][$i]['arg']  = $target;\n\n                        if (empty($target) && $type != 'exists') {\n                            $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                        }\n                        else if (preg_match('/^(value|count)-/', $type)) {\n                            foreach ($target as $target_value) {\n                                if (preg_match('/[^0-9]/', $target_value)) {\n                                    $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                }\n                            }\n                        }\n\n                        $this->form['tests'][$i]['part'] = $trans;\n                        if ($trans == 'content') {\n                            $this->form['tests'][$i]['content'] = $trans_type;\n                        }\n                    }\n                    else {\n                        $cust_header = $headers = $this->strip_value(array_shift($cust_headers));\n                        $mod         = $this->strip_value($mods[$idx]);\n                        $mod_type    = $this->strip_value($mod_types[$idx]);\n                        $index       = $this->strip_value($indexes[$idx]);\n                        $indexlast   = $this->strip_value($lastindexes[$idx]);\n\n                        if (preg_match('/^not/', $operator))\n                            $this->form['tests'][$i]['not'] = true;\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if (!empty($index) && $mod != 'envelope') {\n                            $this->form['tests'][$i]['index'] = intval($index);\n                            $this->form['tests'][$i]['last']  = !empty($indexlast);\n                        }\n\n                        if ($header == '...') {\n                            if (!count($headers))\n                                $this->errors['tests'][$i]['header'] = $this->plugin->gettext('cannotbeempty');\n                            else {\n                                foreach ($headers as $hr) {\n                                    // RFC2822: printable ASCII except colon\n                                    if (!preg_match('/^[\\x21-\\x39\\x41-\\x7E]+$/i', $hr)) {\n                                        $this->errors['tests'][$i]['header'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n\n                            if (empty($this->errors['tests'][$i]['header']))\n                                $cust_header = (is_array($headers) && count($headers) == 1) ? $headers[0] : $headers;\n                        }\n\n                        $header = $header == '...' ? $cust_header : $header;\n\n                        if (is_array($header)) {\n                            foreach ($header as $h_index => $val) {\n                                if (isset($this->headers[$val])) {\n                                    $header[$h_index] = $this->headers[$val];\n                                }\n                            }\n                        }\n\n                        if ($type == 'exists') {\n                            $this->form['tests'][$i]['test'] = 'exists';\n                            $this->form['tests'][$i]['arg'] = $header;\n                        }\n                        else {\n                            $test = 'header';\n\n                            if ($mod == 'address' || $mod == 'envelope') {\n                                $found = false;\n                                if (empty($this->errors['tests'][$i]['header'])) {\n                                    foreach ((array)$header as $hdr) {\n                                        if (!in_array(strtolower(trim($hdr)), $this->addr_headers))\n                                            $found = true;\n                                    }\n                                }\n                                if (!$found)\n                                    $test = $mod;\n                            }\n\n                            $this->form['tests'][$i]['type'] = $type;\n                            $this->form['tests'][$i]['test'] = $test;\n                            $this->form['tests'][$i]['arg1'] = $header;\n                            $this->form['tests'][$i]['arg2'] = $target;\n\n                            if (empty($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            }\n                            else if (preg_match('/^(value|count)-/', $type)) {\n                                foreach ($target as $target_value) {\n                                    if (preg_match('/[^0-9]/', $target_value)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n\n                            if ($mod) {\n                                $this->form['tests'][$i]['part'] = $mod_type;\n                            }\n                        }\n                    }\n\n                    if ($header != 'size' && $comparator) {\n                        $this->form['tests'][$i]['comparator'] = $comparator;\n                    }\n\n                    $i++;\n                }\n            }\n\n            $i = 0;\n            // actions\n            foreach ($act_types as $idx => $type) {\n                $type = $this->strip_value($type);\n\n                switch ($type) {\n                case 'fileinto':\n                case 'fileinto_copy':\n                    $mailbox = $this->strip_value($mailboxes[$idx], false, false);\n                    $this->form['actions'][$i]['target'] = $this->mod_mailbox($mailbox, 'in');\n\n                    if ($type == 'fileinto_copy') {\n                        $type = 'fileinto';\n                        $this->form['actions'][$i]['copy'] = true;\n                    }\n                    break;\n\n                case 'reject':\n                case 'ereject':\n                    $target = $this->strip_value($area_targets[$idx]);\n                    $this->form['actions'][$i]['target'] = str_replace(\"\\r\\n\", \"\\n\", $target);\n\n //                 if ($target == '')\n//                      $this->errors['actions'][$i]['targetarea'] = $this->plugin->gettext('cannotbeempty');\n                    break;\n\n                case 'redirect':\n                case 'redirect_copy':\n                    $target = $this->strip_value($act_targets[$idx]);\n                    $domain = $this->strip_value($domain_targets[$idx]);\n\n                    // force one of the configured domains\n                    $domains = (array) $this->rc->config->get('managesieve_domains');\n                    if (!empty($domains) && !empty($target)) {\n                        if (!$domain || !in_array($domain, $domains)) {\n                            $domain = $domains[0];\n                        }\n\n                        $target .= '@' . $domain;\n                    }\n\n                    $this->form['actions'][$i]['target'] = $target;\n\n                    if ($target == '')\n                        $this->errors['actions'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                    else if (!rcube_utils::check_email($target))\n                        $this->errors['actions'][$i]['target'] = $this->plugin->gettext(!empty($domains) ? 'forbiddenchars' : 'noemailwarning');\n\n                    if ($type == 'redirect_copy') {\n                        $type = 'redirect';\n                        $this->form['actions'][$i]['copy'] = true;\n                    }\n\n                    break;\n\n                case 'addflag':\n                case 'setflag':\n                case 'removeflag':\n                    $_target = array();\n                    if (empty($flags[$idx])) {\n                        $this->errors['actions'][$i]['target'] = $this->plugin->gettext('noflagset');\n                    }\n                    else {\n                        foreach ($flags[$idx] as $flag) {\n                            $_target[] = $this->strip_value($flag);\n                        }\n                    }\n                    $this->form['actions'][$i]['target'] = $_target;\n                    break;\n\n                case 'vacation':\n                    $reason        = $this->strip_value($reasons[$idx]);\n                    $interval_type = $interval_types[$idx] == 'seconds' ? 'seconds' : 'days';\n\n                    $this->form['actions'][$i]['reason']    = str_replace(\"\\r\\n\", \"\\n\", $reason);\n                    $this->form['actions'][$i]['from']      = $from[$idx];\n                    $this->form['actions'][$i]['subject']   = $subject[$idx];\n                    $this->form['actions'][$i]['addresses'] = array_shift($addresses);\n                    $this->form['actions'][$i][$interval_type] = $intervals[$idx];\n// @TODO: vacation :mime, :handle\n\n                    foreach ((array)$this->form['actions'][$i]['addresses'] as $aidx => $address) {\n                        $this->form['actions'][$i]['addresses'][$aidx] = $address = trim($address);\n\n                        if (empty($address)) {\n                            unset($this->form['actions'][$i]['addresses'][$aidx]);\n                        }\n                        else if (!rcube_utils::check_email($address)) {\n                            $this->errors['actions'][$i]['addresses'] = $this->plugin->gettext('noemailwarning');\n                            break;\n                        }\n                    }\n\n                    if (!empty($this->form['actions'][$i]['from']) && !rcube_utils::check_email($this->form['actions'][$i]['from'])) {\n                        $this->errors['actions'][$i]['from'] = $this->plugin->gettext('noemailwarning');\n                    }\n\n                    if ($this->form['actions'][$i]['reason'] == '')\n                        $this->errors['actions'][$i]['reason'] = $this->plugin->gettext('cannotbeempty');\n                    if ($this->form['actions'][$i][$interval_type] && !preg_match('/^[0-9]+$/', $this->form['actions'][$i][$interval_type]))\n                        $this->errors['actions'][$i]['interval'] = $this->plugin->gettext('forbiddenchars');\n                    break;\n\n                case 'set':\n                    $this->form['actions'][$i]['name'] = $varnames[$idx];\n                    $this->form['actions'][$i]['value'] = $varvalues[$idx];\n                    foreach ((array)$varmods[$idx] as $v_m) {\n                        $this->form['actions'][$i][$v_m] = true;\n                    }\n\n                    if (empty($varnames[$idx])) {\n                        $this->errors['actions'][$i]['name'] = $this->plugin->gettext('cannotbeempty');\n                    }\n                    else if (!preg_match('/^[0-9a-z_]+$/i', $varnames[$idx])) {\n                        $this->errors['actions'][$i]['name'] = $this->plugin->gettext('forbiddenchars');\n                    }\n\n                    if (!isset($varvalues[$idx]) || $varvalues[$idx] === '') {\n                        $this->errors['actions'][$i]['value'] = $this->plugin->gettext('cannotbeempty');\n                    }\n                    break;\n\n                case 'notify':\n                    if (empty($notifymethods[$idx])) {\n                        $this->errors['actions'][$i]['method'] = $this->plugin->gettext('cannotbeempty');\n                    }\n                    if (empty($notifytargets[$idx])) {\n                        $this->errors['actions'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                    }\n                    if (!empty($notifyfrom[$idx]) && !rcube_utils::check_email($notifyfrom[$idx])) {\n                        $this->errors['actions'][$i]['from'] = $this->plugin->gettext('noemailwarning');\n                    }\n\n                    // skip empty options\n                    foreach ((array)$notifyoptions[$idx] as $opt_idx => $opt) {\n                        if (!strlen(trim($opt))) {\n                            unset($notifyoptions[$idx][$opt_idx]);\n                        }\n                    }\n\n                    $this->form['actions'][$i]['method']     = $notifymethods[$idx] . ':' . $notifytargets[$idx];\n                    $this->form['actions'][$i]['options']    = $notifyoptions[$idx];\n                    $this->form['actions'][$i]['message']    = $notifymessages[$idx];\n                    $this->form['actions'][$i]['from']       = $notifyfrom[$idx];\n                    $this->form['actions'][$i]['importance'] = $notifyimp[$idx];\n                    break;\n                }\n\n                $this->form['actions'][$i]['type'] = $type;\n                $i++;\n            }\n\n            if (!$this->errors && !$error) {\n                // save the script\n                if (!isset($this->script[$fid])) {\n                    $fid = $this->sieve->script->add_rule($this->form);\n                    $new = true;\n                }\n                else {\n                    $fid = $this->sieve->script->update_rule($fid, $this->form);\n                }\n\n                if ($fid !== false)\n                    $save = $this->save_script();\n\n                if ($save && $fid !== false) {\n                    $this->rc->output->show_message('managesieve.filtersaved', 'confirmation');\n                    if ($this->rc->task != 'mail') {\n                        $this->rc->output->command('parent.managesieve_updatelist',\n                            isset($new) ? 'add' : 'update',\n                            array(\n                                'name' => $this->form['name'],\n                                'id' => $fid,\n                                'disabled' => $this->form['disabled']\n                        ));\n                    }\n                    else {\n                        $this->rc->output->command('managesieve_dialog_close');\n                        $this->rc->output->send('iframe');\n                    }\n                }\n                else {\n                    $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n//                  $this->rc->output->send();\n                }\n            }\n        }\n\n        $this->send();\n    }\n\n    protected function send()\n    {\n        // Handle form action\n        if (isset($_GET['_framed']) || isset($_POST['_framed'])) {\n            if (isset($_GET['_newset']) || isset($_POST['_newset'])) {\n                $this->rc->output->send('managesieve.setedit');\n            }\n            else {\n                $this->rc->output->send('managesieve.filteredit');\n            }\n        }\n        else {\n            $this->rc->output->set_pagetitle($this->plugin->gettext('filters'));\n            $this->rc->output->send('managesieve.managesieve');\n        }\n    }\n\n    // return the filters list as HTML table\n    function filters_list($attrib)\n    {\n        // add id to message list table if not specified\n        if (!strlen($attrib['id']))\n            $attrib['id'] = 'rcmfilterslist';\n\n        // define list of cols to be displayed\n        $a_show_cols = array('name');\n\n        $result = $this->list_rules();\n\n        // create XHTML table\n        $out = $this->rc->table_output($attrib, $result, $a_show_cols, 'id');\n\n        // set client env\n        $this->rc->output->add_gui_object('filterslist', $attrib['id']);\n        $this->rc->output->include_script('list.js');\n\n        // add some labels to client\n        $this->rc->output->add_label('managesieve.filterdeleteconfirm');\n\n        return $out;\n    }\n\n    // return the filters list as <SELECT>\n    function filtersets_list($attrib, $no_env = false)\n    {\n        // add id to message list table if not specified\n        if (!strlen($attrib['id']))\n            $attrib['id'] = 'rcmfiltersetslist';\n\n        $list = $this->list_scripts();\n\n        if ($list) {\n            asort($list, SORT_LOCALE_STRING);\n        }\n\n        if (!empty($attrib['type']) && $attrib['type'] == 'list') {\n            // define list of cols to be displayed\n            $a_show_cols = array('name');\n\n            if ($list) {\n                foreach ($list as $idx => $set) {\n                    $scripts['S'.$idx] = $set;\n                    $result[] = array(\n                        'name' => $set,\n                        'id' => 'S'.$idx,\n                        'class' => !in_array($set, $this->active) ? 'disabled' : '',\n                    );\n                }\n            }\n\n            // create XHTML table\n            $out = $this->rc->table_output($attrib, $result, $a_show_cols, 'id');\n\n            $this->rc->output->set_env('filtersets', $scripts);\n            $this->rc->output->include_script('list.js');\n        }\n        else {\n            $select = new html_select(array('name' => '_set', 'id' => $attrib['id'],\n                'onchange' => $this->rc->task != 'mail' ? 'rcmail.managesieve_set()' : ''));\n\n            if ($list) {\n                foreach ($list as $set)\n                    $select->add($set, $set);\n            }\n\n            $out = $select->show($this->sieve->current);\n        }\n\n        // set client env\n        if (!$no_env) {\n            $this->rc->output->add_gui_object('filtersetslist', $attrib['id']);\n            $this->rc->output->add_label('managesieve.setdeleteconfirm');\n        }\n\n        return $out;\n    }\n\n    function filter_frame($attrib)\n    {\n        return $this->rc->output->frame($attrib, true);\n    }\n\n    function filterset_form($attrib)\n    {\n        if (!$attrib['id'])\n            $attrib['id'] = 'rcmfiltersetform';\n\n        $out = '<form name=\"filtersetform\" action=\"./\" method=\"post\" enctype=\"multipart/form-data\">'.\"\\n\";\n\n        $hiddenfields = new html_hiddenfield(array('name' => '_task', 'value' => $this->rc->task));\n        $hiddenfields->add(array('name' => '_action', 'value' => 'plugin.managesieve-save'));\n        $hiddenfields->add(array('name' => '_framed', 'value' => ($_POST['_framed'] || $_GET['_framed'] ? 1 : 0)));\n        $hiddenfields->add(array('name' => '_newset', 'value' => 1));\n\n        $out .= $hiddenfields->show();\n\n        $name     = rcube_utils::get_input_value('_name', rcube_utils::INPUT_POST);\n        $copy     = rcube_utils::get_input_value('_copy', rcube_utils::INPUT_POST);\n        $selected = rcube_utils::get_input_value('_from', rcube_utils::INPUT_POST);\n\n        // filter set name input\n        $input_name = new html_inputfield(array('name' => '_name', 'id' => '_name', 'size' => 30,\n            'class' => ($this->errors['name'] ? 'error' : '')));\n\n        $out .= sprintf('<label for=\"%s\"><b>%s:</b></label> %s<br /><br />',\n            '_name', rcube::Q($this->plugin->gettext('filtersetname')), $input_name->show($name));\n\n        $out .=\"\\n<fieldset class=\\\"itemlist\\\"><legend>\" . $this->plugin->gettext('filters') . \":</legend>\\n\";\n        $out .= '<input type=\"radio\" id=\"from_none\" name=\"_from\" value=\"none\"'\n            .(!$selected || $selected=='none' ? ' checked=\"checked\"' : '').'></input>';\n        $out .= sprintf('<label for=\"%s\">%s</label> ', 'from_none', rcube::Q($this->plugin->gettext('none')));\n\n        // filters set list\n        $list   = $this->list_scripts();\n        $select = new html_select(array('name' => '_copy', 'id' => '_copy'));\n\n        if (is_array($list)) {\n            asort($list, SORT_LOCALE_STRING);\n\n            if (!$copy)\n                $copy = $_SESSION['managesieve_current'];\n\n            foreach ($list as $set) {\n                $select->add($set, $set);\n            }\n\n            $out .= '<br /><input type=\"radio\" id=\"from_set\" name=\"_from\" value=\"set\"'\n                .($selected=='set' ? ' checked=\"checked\"' : '').'></input>';\n            $out .= sprintf('<label for=\"%s\">%s:</label> ', 'from_set', rcube::Q($this->plugin->gettext('fromset')));\n            $out .= $select->show($copy);\n        }\n\n        // script upload box\n        $upload = new html_inputfield(array('name' => '_file', 'id' => '_file', 'size' => 30,\n            'type' => 'file', 'class' => ($this->errors['file'] ? 'error' : '')));\n\n        $out .= '<br /><input type=\"radio\" id=\"from_file\" name=\"_from\" value=\"file\"'\n            .($selected=='file' ? ' checked=\"checked\"' : '').'></input>';\n        $out .= sprintf('<label for=\"%s\">%s:</label> ', 'from_file', rcube::Q($this->plugin->gettext('fromfile')));\n        $out .= $upload->show();\n        $out .= '</fieldset>';\n\n        $this->rc->output->add_gui_object('sieveform', 'filtersetform');\n\n        if ($this->errors['name'])\n            $this->add_tip('_name', $this->errors['name'], true);\n        if ($this->errors['file'])\n            $this->add_tip('_file', $this->errors['file'], true);\n\n        $this->print_tips();\n\n        return $out;\n    }\n\n\n    function filter_form($attrib)\n    {\n        if (!$attrib['id'])\n            $attrib['id'] = 'rcmfilterform';\n\n        $fid = rcube_utils::get_input_value('_fid', rcube_utils::INPUT_GPC);\n        $scr = isset($this->form) ? $this->form : $this->script[$fid];\n\n        $hiddenfields = new html_hiddenfield(array('name' => '_task', 'value' => $this->rc->task));\n        $hiddenfields->add(array('name' => '_action', 'value' => 'plugin.managesieve-save'));\n        $hiddenfields->add(array('name' => '_framed', 'value' => ($_POST['_framed'] || $_GET['_framed'] ? 1 : 0)));\n        $hiddenfields->add(array('name' => '_fid', 'value' => $fid));\n\n        $out = '<form name=\"filterform\" action=\"./\" method=\"post\">'.\"\\n\";\n        $out .= $hiddenfields->show();\n\n        // 'any' flag\n        if ((!isset($this->form) && empty($scr['tests']) && !empty($scr))\n            || (sizeof($scr['tests']) == 1 && $scr['tests'][0]['test'] == 'true' && !$scr['tests'][0]['not'])\n        ) {\n            $any = true;\n        }\n\n        // filter name input\n        $field_id = '_name';\n        $input_name = new html_inputfield(array('name' => '_name', 'id' => $field_id, 'size' => 30,\n            'class' => ($this->errors['name'] ? 'error' : '')));\n\n        if ($this->errors['name'])\n            $this->add_tip($field_id, $this->errors['name'], true);\n\n        if (isset($scr))\n            $input_name = $input_name->show($scr['name']);\n        else\n            $input_name = $input_name->show();\n\n        $out .= sprintf(\"\\n<label for=\\\"%s\\\"><b>%s:</b></label> %s\\n\",\n            $field_id, rcube::Q($this->plugin->gettext('filtername')), $input_name);\n\n        // filter set selector\n        if ($this->rc->task == 'mail') {\n            $out .= sprintf(\"\\n&nbsp;<label for=\\\"%s\\\"><b>%s:</b></label> %s\\n\",\n                $field_id, rcube::Q($this->plugin->gettext('filterset')),\n                $this->filtersets_list(array('id' => 'sievescriptname'), true));\n        }\n\n        $out .= '<br /><br /><fieldset><legend>' . rcube::Q($this->plugin->gettext('messagesrules')) . \"</legend>\\n\";\n\n        // any, allof, anyof radio buttons\n        $field_id = '_allof';\n        $input_join = new html_radiobutton(array('name' => '_join', 'id' => $field_id, 'value' => 'allof',\n            'onclick' => 'rule_join_radio(\\'allof\\')', 'class' => 'radio'));\n\n        if (isset($scr) && !$any)\n            $input_join = $input_join->show($scr['join'] ? 'allof' : '');\n        else\n            $input_join = $input_join->show();\n\n        $out .= sprintf(\"%s<label for=\\\"%s\\\">%s</label>&nbsp;\\n\",\n            $input_join, $field_id, rcube::Q($this->plugin->gettext('filterallof')));\n\n        $field_id = '_anyof';\n        $input_join = new html_radiobutton(array('name' => '_join', 'id' => $field_id, 'value' => 'anyof',\n            'onclick' => 'rule_join_radio(\\'anyof\\')', 'class' => 'radio'));\n\n        if (isset($scr) && !$any)\n            $input_join = $input_join->show($scr['join'] ? '' : 'anyof');\n        else\n            $input_join = $input_join->show('anyof'); // default\n\n        $out .= sprintf(\"%s<label for=\\\"%s\\\">%s</label>\\n\",\n            $input_join, $field_id, rcube::Q($this->plugin->gettext('filteranyof')));\n\n        $field_id = '_any';\n        $input_join = new html_radiobutton(array('name' => '_join', 'id' => $field_id, 'value' => 'any',\n            'onclick' => 'rule_join_radio(\\'any\\')', 'class' => 'radio'));\n\n        $input_join = $input_join->show($any ? 'any' : '');\n\n        $out .= sprintf(\"%s<label for=\\\"%s\\\">%s</label>\\n\",\n            $input_join, $field_id, rcube::Q($this->plugin->gettext('filterany')));\n\n        $rows_num = !empty($scr['tests']) ? sizeof($scr['tests']) : 1;\n\n        $out .= '<div id=\"rules\"'.($any ? ' style=\"display: none\"' : '').'>';\n        for ($x=0; $x<$rows_num; $x++)\n            $out .= $this->rule_div($fid, $x);\n        $out .= \"</div>\\n\";\n\n        $out .= \"</fieldset>\\n\";\n\n        // actions\n        $out .= '<fieldset><legend>' . rcube::Q($this->plugin->gettext('messagesactions')) . \"</legend>\\n\";\n\n        $rows_num = isset($scr) ? sizeof($scr['actions']) : 1;\n\n        $out .= '<div id=\"actions\">';\n        for ($x=0; $x<$rows_num; $x++)\n            $out .= $this->action_div($fid, $x);\n        $out .= \"</div>\\n\";\n\n        $out .= \"</fieldset>\\n\";\n\n        $this->print_tips();\n\n        if ($scr['disabled']) {\n            $this->rc->output->set_env('rule_disabled', true);\n        }\n        $this->rc->output->add_label(\n            'managesieve.ruledeleteconfirm',\n            'managesieve.actiondeleteconfirm'\n        );\n        $this->rc->output->add_gui_object('sieveform', 'filterform');\n\n        return $out;\n    }\n\n    function rule_div($fid, $id, $div=true)\n    {\n        $rule     = isset($this->form) ? $this->form['tests'][$id] : $this->script[$fid]['tests'][$id];\n        $rows_num = isset($this->form) ? sizeof($this->form['tests']) : sizeof($this->script[$fid]['tests']);\n\n        // headers select\n        $select_header = new html_select(array('name' => \"_header[]\", 'id' => 'header'.$id,\n            'onchange' => 'rule_header_select(' .$id .')'));\n\n        foreach ($this->headers as $index => $header) {\n            $header = $this->rc->text_exists($index) ? $this->plugin->gettext($index) : $header;\n            $select_header->add($header, $index);\n        }\n        $select_header->add($this->plugin->gettext('...'), '...');\n        if (in_array('body', $this->exts))\n            $select_header->add($this->plugin->gettext('body'), 'body');\n        $select_header->add($this->plugin->gettext('size'), 'size');\n        if (in_array('date', $this->exts)) {\n            $select_header->add($this->plugin->gettext('datetest'), 'date');\n            $select_header->add($this->plugin->gettext('currdate'), 'currentdate');\n        }\n\n        if (isset($rule['test'])) {\n            if (in_array($rule['test'], array('header', 'address', 'envelope'))) {\n                if (is_array($rule['arg1']) && count($rule['arg1']) == 1) {\n                    $rule['arg1'] = $rule['arg1'][0];\n                }\n\n                $matches = ($header = strtolower($rule['arg1'])) && isset($this->headers[$header]);\n                $test    = $matches ? $header : '...';\n            }\n            else if ($rule['test'] == 'exists') {\n                if (is_array($rule['arg']) && count($rule['arg']) == 1) {\n                    $rule['arg'] = $rule['arg'][0];\n                }\n\n                $matches = ($header = strtolower($rule['arg'])) && isset($this->headers[$header]);\n                $test    = $matches ? $header : '...';\n            }\n            else if (in_array($rule['test'], array('size', 'body', 'date', 'currentdate'))) {\n                $test = $rule['test'];\n            }\n            else if ($rule['test'] != 'true') {\n                $test = '...';\n            }\n        }\n\n        $aout = $select_header->show($test);\n\n        // custom headers input\n        if (isset($rule['test']) && in_array($rule['test'], array('header', 'address', 'envelope'))) {\n            $custom = (array) $rule['arg1'];\n            if (count($custom) == 1 && isset($this->headers[strtolower($custom[0])])) {\n                unset($custom);\n            }\n        }\n        else if (isset($rule['test']) && $rule['test'] == 'exists') {\n            $custom = (array) $rule['arg'];\n            if (count($custom) == 1 && isset($this->headers[strtolower($custom[0])])) {\n                unset($custom);\n            }\n        }\n\n        $tout = $this->list_input($id, 'custom_header', $custom, isset($custom),\n            $this->error_class($id, 'test', 'header', 'custom_header'), 15) . \"\\n\";\n\n        // matching type select (operator)\n        $select_op = new html_select(array('name' => \"_rule_op[]\", 'id' => 'rule_op'.$id,\n            'style' => 'display:' .($rule['test']!='size' ? 'inline' : 'none'),\n            'class' => 'operator_selector',\n            'onchange' => 'rule_op_select(this, '.$id.')'));\n        $select_op->add(rcube::Q($this->plugin->gettext('filtercontains')), 'contains');\n        $select_op->add(rcube::Q($this->plugin->gettext('filternotcontains')), 'notcontains');\n        $select_op->add(rcube::Q($this->plugin->gettext('filteris')), 'is');\n        $select_op->add(rcube::Q($this->plugin->gettext('filterisnot')), 'notis');\n        $select_op->add(rcube::Q($this->plugin->gettext('filterexists')), 'exists');\n        $select_op->add(rcube::Q($this->plugin->gettext('filternotexists')), 'notexists');\n        $select_op->add(rcube::Q($this->plugin->gettext('filtermatches')), 'matches');\n        $select_op->add(rcube::Q($this->plugin->gettext('filternotmatches')), 'notmatches');\n        if (in_array('regex', $this->exts)) {\n            $select_op->add(rcube::Q($this->plugin->gettext('filterregex')), 'regex');\n            $select_op->add(rcube::Q($this->plugin->gettext('filternotregex')), 'notregex');\n        }\n        if (in_array('relational', $this->exts)) {\n            $select_op->add(rcube::Q($this->plugin->gettext('countisgreaterthan')), 'count-gt');\n            $select_op->add(rcube::Q($this->plugin->gettext('countisgreaterthanequal')), 'count-ge');\n            $select_op->add(rcube::Q($this->plugin->gettext('countislessthan')), 'count-lt');\n            $select_op->add(rcube::Q($this->plugin->gettext('countislessthanequal')), 'count-le');\n            $select_op->add(rcube::Q($this->plugin->gettext('countequals')), 'count-eq');\n            $select_op->add(rcube::Q($this->plugin->gettext('countnotequals')), 'count-ne');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueisgreaterthan')), 'value-gt');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueisgreaterthanequal')), 'value-ge');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueislessthan')), 'value-lt');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueislessthanequal')), 'value-le');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueequals')), 'value-eq');\n            $select_op->add(rcube::Q($this->plugin->gettext('valuenotequals')), 'value-ne');\n        }\n\n        $test   = self::rule_test($rule);\n        $target = '';\n\n        // target(s) input\n        if (in_array($rule['test'], array('header', 'address', 'envelope'))) {\n            $target = $rule['arg2'];\n        }\n        else if (in_array($rule['test'], array('body', 'date', 'currentdate'))) {\n            $target = $rule['arg'];\n        }\n        else if ($rule['test'] == 'size') {\n            if (preg_match('/^([0-9]+)(K|M|G)?$/', $rule['arg'], $matches)) {\n                $sizetarget = $matches[1];\n                $sizeitem   = $matches[2];\n            }\n            else {\n                $sizetarget = $rule['arg'];\n                $sizeitem   = $rule['item'];\n            }\n        }\n\n        // (current)date part select\n        if (in_array('date', $this->exts) || in_array('currentdate', $this->exts)) {\n            $date_parts = array('date', 'iso8601', 'std11', 'julian', 'time',\n                'year', 'month', 'day', 'hour', 'minute', 'second', 'weekday', 'zone');\n            $select_dp = new html_select(array('name' => \"_rule_date_part[]\", 'id' => 'rule_date_part'.$id,\n                'style' => in_array($rule['test'], array('currentdate', 'date')) && !preg_match('/^(notcount|count)-/', $test) ? '' : 'display:none',\n                'class' => 'datepart_selector',\n            ));\n\n            foreach ($date_parts as $part) {\n                $select_dp->add(rcube::Q($this->plugin->gettext($part)), $part);\n            }\n\n            $tout .= $select_dp->show($rule['test'] == 'currentdate' || $rule['test'] == 'date' ? $rule['part'] : '');\n        }\n\n        $tout .= $select_op->show($test);\n        $tout .= $this->list_input($id, 'rule_target', $target,\n            $rule['test'] != 'size' && $rule['test'] != 'exists',\n            $this->error_class($id, 'test', 'target', 'rule_target')) . \"\\n\";\n\n        $select_size_op = new html_select(array('name' => \"_rule_size_op[]\", 'id' => 'rule_size_op'.$id));\n        $select_size_op->add(rcube::Q($this->plugin->gettext('filterover')), 'over');\n        $select_size_op->add(rcube::Q($this->plugin->gettext('filterunder')), 'under');\n\n        $tout .= '<div id=\"rule_size' .$id. '\" style=\"display:' . ($rule['test']=='size' ? 'inline' : 'none') .'\">';\n        $tout .= $select_size_op->show($rule['test']=='size' ? $rule['type'] : '');\n        $tout .= '<input type=\"text\" name=\"_rule_size_target[]\" id=\"rule_size_i'.$id.'\" value=\"'.$sizetarget.'\" size=\"10\" ' \n            . $this->error_class($id, 'test', 'sizetarget', 'rule_size_i') .' />\n            <label><input type=\"radio\" name=\"_rule_size_item['.$id.']\" value=\"\"'\n                . (!$sizeitem ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->rc->gettext('B').'</label>\n            <label><input type=\"radio\" name=\"_rule_size_item['.$id.']\" value=\"K\"'\n                . ($sizeitem=='K' ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->rc->gettext('KB').'</label>\n            <label><input type=\"radio\" name=\"_rule_size_item['.$id.']\" value=\"M\"'\n                . ($sizeitem=='M' ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->rc->gettext('MB').'</label>\n            <label><input type=\"radio\" name=\"_rule_size_item['.$id.']\" value=\"G\"'\n                . ($sizeitem=='G' ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->rc->gettext('GB').'</label>';\n        $tout .= '</div>';\n\n        // Advanced modifiers (address, envelope)\n        $select_mod = new html_select(array('name' => \"_rule_mod[]\", 'id' => 'rule_mod_op'.$id,\n            'onchange' => 'rule_mod_select(' .$id .')'));\n        $select_mod->add(rcube::Q($this->plugin->gettext('none')), '');\n        $select_mod->add(rcube::Q($this->plugin->gettext('address')), 'address');\n        if (in_array('envelope', $this->exts))\n            $select_mod->add(rcube::Q($this->plugin->gettext('envelope')), 'envelope');\n\n        $select_type = new html_select(array('name' => \"_rule_mod_type[]\", 'id' => 'rule_mod_type'.$id));\n        $select_type->add(rcube::Q($this->plugin->gettext('allparts')), 'all');\n        $select_type->add(rcube::Q($this->plugin->gettext('domain')), 'domain');\n        $select_type->add(rcube::Q($this->plugin->gettext('localpart')), 'localpart');\n        if (in_array('subaddress', $this->exts)) {\n            $select_type->add(rcube::Q($this->plugin->gettext('user')), 'user');\n            $select_type->add(rcube::Q($this->plugin->gettext('detail')), 'detail');\n        }\n\n        $need_mod = !in_array($rule['test'], array('size', 'body', 'date', 'currentdate'));\n        $mout = '<div id=\"rule_mod' .$id. '\" class=\"adv\"' . (!$need_mod ? ' style=\"display:none\"' : '') . '>';\n        $mout .= ' <span class=\"label\">' . rcube::Q($this->plugin->gettext('modifier')) . ' </span>';\n        $mout .= $select_mod->show($rule['test']);\n        $mout .= ' <span id=\"rule_mod_type' . $id . '\"';\n        $mout .= ' style=\"display:' . (in_array($rule['test'], array('address', 'envelope')) ? 'inline' : 'none') .'\">';\n        $mout .= rcube::Q($this->plugin->gettext('modtype')) . ' ';\n        $mout .= $select_type->show($rule['part']);\n        $mout .= '</span>';\n        $mout .= '</div>';\n\n        // Advanced modifiers (body transformations)\n        $select_mod = new html_select(array('name' => \"_rule_trans[]\", 'id' => 'rule_trans_op'.$id,\n            'onchange' => 'rule_trans_select(' .$id .')'));\n        $select_mod->add(rcube::Q($this->plugin->gettext('text')), 'text');\n        $select_mod->add(rcube::Q($this->plugin->gettext('undecoded')), 'raw');\n        $select_mod->add(rcube::Q($this->plugin->gettext('contenttype')), 'content');\n\n        $mout .= '<div id=\"rule_trans' .$id. '\" class=\"adv\"' . ($rule['test'] != 'body' ? ' style=\"display:none\"' : '') . '>';\n        $mout .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('modifier')) . '</span>';\n        $mout .= $select_mod->show($rule['part']);\n        $mout .= '<input type=\"text\" name=\"_rule_trans_type[]\" id=\"rule_trans_type'.$id\n            . '\" value=\"'.(is_array($rule['content']) ? implode(',', $rule['content']) : $rule['content'])\n            .'\" size=\"20\"' . ($rule['part'] != 'content' ? ' style=\"display:none\"' : '')\n            . $this->error_class($id, 'test', 'part', 'rule_trans_type') .' />';\n        $mout .= '</div>';\n\n        // Advanced modifiers (body transformations)\n        $select_comp = new html_select(array('name' => \"_rule_comp[]\", 'id' => 'rule_comp_op'.$id));\n        $select_comp->add(rcube::Q($this->plugin->gettext('default')), '');\n        $select_comp->add(rcube::Q($this->plugin->gettext('octet')), 'i;octet');\n        $select_comp->add(rcube::Q($this->plugin->gettext('asciicasemap')), 'i;ascii-casemap');\n        if (in_array('comparator-i;ascii-numeric', $this->exts)) {\n            $select_comp->add(rcube::Q($this->plugin->gettext('asciinumeric')), 'i;ascii-numeric');\n        }\n\n        // Comparators\n        $mout .= '<div id=\"rule_comp' .$id. '\" class=\"adv\"' . ($rule['test'] == 'size' ? ' style=\"display:none\"' : '') . '>';\n        $mout .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('comparator')) . '</span>';\n        $mout .= $select_comp->show($rule['comparator']);\n        $mout .= '</div>';\n\n        // Date header\n        if (in_array('date', $this->exts)) {\n            $mout .= '<div id=\"rule_date_header_div' .$id. '\" class=\"adv\"'. ($rule['test'] != 'date' ? ' style=\"display:none\"' : '') .'>';\n            $mout .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('dateheader')) . '</span>';\n            $mout .= '<input type=\"text\" name=\"_rule_date_header[]\" id=\"rule_date_header'.$id\n                . '\" value=\"'. rcube::Q($rule['test'] == 'date' ? $rule['header'] : '')\n                . '\" size=\"15\"' . $this->error_class($id, 'test', 'dateheader', 'rule_date_header') .' />';\n            $mout .= '</div>';\n        }\n\n        // Index\n        if (in_array('index', $this->exts)) {\n            $need_index = in_array($rule['test'], array('header', ', address', 'date'));\n            $mout .= '<div id=\"rule_index_div' .$id. '\" class=\"adv\"'. (!$need_index ? ' style=\"display:none\"' : '') .'>';\n            $mout .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('index')) . '</span>';\n            $mout .= '<input type=\"text\" name=\"_rule_index[]\" id=\"rule_index'.$id\n                . '\" value=\"'. ($rule['index'] ? intval($rule['index']) : '')\n                . '\" size=\"3\"' . $this->error_class($id, 'test', 'index', 'rule_index') .' />';\n            $mout .= '&nbsp;<input type=\"checkbox\" name=\"_rule_index_last[]\" id=\"rule_index_last'.$id\n                . '\" value=\"1\"' . (!empty($rule['last']) ? ' checked=\"checked\"' : '') . ' />'\n                . '<label for=\"rule_index_last'.$id.'\">'.rcube::Q($this->plugin->gettext('indexlast')).'</label>';\n            $mout .= '</div>';\n        }\n\n        // Build output table\n        $out = $div ? '<div class=\"rulerow\" id=\"rulerow' .$id .'\">'.\"\\n\" : '';\n        $out .= '<table><tr>';\n        $out .= '<td class=\"advbutton\">';\n        $out .= '<a href=\"#\" id=\"ruleadv' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('advancedopts')). '\"\n            onclick=\"rule_adv_switch(' . $id .', this)\" class=\"show\">&nbsp;&nbsp;</a>';\n        $out .= '</td>';\n        $out .= '<td class=\"rowactions\">' . $aout . '</td>';\n        $out .= '<td class=\"rowtargets\">' . $tout . \"\\n\";\n        $out .= '<div id=\"rule_advanced' .$id. '\" style=\"display:none\">' . $mout . '</div>';\n        $out .= '</td>';\n\n        // add/del buttons\n        $out .= '<td class=\"rowbuttons\">';\n        $out .= '<a href=\"#\" id=\"ruleadd' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('add')). '\"\n            onclick=\"rcmail.managesieve_ruleadd(' . $id .')\" class=\"button add\"></a>';\n        $out .= '<a href=\"#\" id=\"ruledel' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('del')). '\"\n            onclick=\"rcmail.managesieve_ruledel(' . $id .')\" class=\"button del' . ($rows_num<2 ? ' disabled' : '') .'\"></a>';\n        $out .= '</td>';\n        $out .= '</tr></table>';\n\n        $out .= $div ? \"</div>\\n\" : '';\n\n        return $out;\n    }\n\n    private static function rule_test(&$rule)\n    {\n        // first modify value/count tests with 'not' keyword\n        // we'll revert the meaning of operators\n        if ($rule['not'] && preg_match('/^(count|value)-([gteqnl]{2})/', $rule['type'], $m)) {\n            $rule['not'] = false;\n\n            switch ($m[2]) {\n            case 'gt': $rule['type'] = $m[1] . '-le'; break;\n            case 'ge': $rule['type'] = $m[1] . '-lt'; break;\n            case 'lt': $rule['type'] = $m[1] . '-ge'; break;\n            case 'le': $rule['type'] = $m[1] . '-gt'; break;\n            case 'eq': $rule['type'] = $m[1] . '-ne'; break;\n            case 'ne': $rule['type'] = $m[1] . '-eq'; break;\n            }\n        }\n        else if ($rule['not'] && $rule['test'] == 'size') {\n            $rule['not']  = false;\n            $rule['type'] = $rule['type'] == 'over' ? 'under' : 'over';\n        }\n\n        $set = array('header', 'address', 'envelope', 'body', 'date', 'currentdate');\n\n        // build test string supported by select element\n        if ($rule['size']) {\n            $test = $rule['type'];\n        }\n        else if (in_array($rule['test'], $set)) {\n            $test = ($rule['not'] ? 'not' : '') . ($rule['type'] ?: 'is');\n        }\n        else {\n            $test = ($rule['not'] ? 'not' : '') . $rule['test'];\n        }\n\n        return $test;\n    }\n\n    function action_div($fid, $id, $div=true)\n    {\n        $action   = isset($this->form) ? $this->form['actions'][$id] : $this->script[$fid]['actions'][$id];\n        $rows_num = isset($this->form) ? sizeof($this->form['actions']) : sizeof($this->script[$fid]['actions']);\n\n        $out = $div ? '<div class=\"actionrow\" id=\"actionrow' .$id .'\">'.\"\\n\" : '';\n\n        $out .= '<table><tr><td class=\"rowactions\">';\n\n        // action select\n        $select_action = new html_select(array('name' => \"_action_type[$id]\", 'id' => 'action_type'.$id,\n            'onchange' => 'action_type_select(' .$id .')'));\n        if (in_array('fileinto', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagemoveto')), 'fileinto');\n        if (in_array('fileinto', $this->exts) && in_array('copy', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagecopyto')), 'fileinto_copy');\n        $select_action->add(rcube::Q($this->plugin->gettext('messageredirect')), 'redirect');\n        if (in_array('copy', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagesendcopy')), 'redirect_copy');\n        if (in_array('reject', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagediscard')), 'reject');\n        else if (in_array('ereject', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagediscard')), 'ereject');\n        if (in_array('vacation', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagereply')), 'vacation');\n        $select_action->add(rcube::Q($this->plugin->gettext('messagedelete')), 'discard');\n        if (in_array('imapflags', $this->exts) || in_array('imap4flags', $this->exts)) {\n            $select_action->add(rcube::Q($this->plugin->gettext('setflags')), 'setflag');\n            $select_action->add(rcube::Q($this->plugin->gettext('addflags')), 'addflag');\n            $select_action->add(rcube::Q($this->plugin->gettext('removeflags')), 'removeflag');\n        }\n        if (in_array('variables', $this->exts)) {\n            $select_action->add(rcube::Q($this->plugin->gettext('setvariable')), 'set');\n        }\n        if (in_array('enotify', $this->exts) || in_array('notify', $this->exts)) {\n            $select_action->add(rcube::Q($this->plugin->gettext('notify')), 'notify');\n        }\n        $select_action->add(rcube::Q($this->plugin->gettext('messagekeep')), 'keep');\n        $select_action->add(rcube::Q($this->plugin->gettext('rulestop')), 'stop');\n\n        $select_type = $action['type'];\n        if (in_array($action['type'], array('fileinto', 'redirect')) && $action['copy']) {\n            $select_type .= '_copy';\n        }\n\n        $out .= $select_action->show($select_type);\n        $out .= '</td>';\n\n        // actions target inputs\n        $out .= '<td class=\"rowtargets\">';\n\n        // force domain selection in redirect email input\n        $domains = (array) $this->rc->config->get('managesieve_domains');\n        if (!empty($domains)) {\n            sort($domains);\n\n            $domain_select = new html_select(array('name' => \"_action_target_domain[$id]\", 'id' => 'action_target_domain'.$id));\n            $domain_select->add(array_combine($domains, $domains));\n\n            if ($action['type'] == 'redirect') {\n                $parts = explode('@', $action['target']);\n                if (!empty($parts)) {\n                    $action['domain'] = array_pop($parts);\n                    $action['target'] = implode('@', $parts);\n                }\n            }\n        }\n\n        // redirect target\n        $out .= '<span id=\"redirect_target' . $id . '\" style=\"white-space:nowrap;'\n            . ' display:' . ($action['type'] == 'redirect' ? 'inline' : 'none') . '\">'\n            . '<input type=\"text\" name=\"_action_target['.$id.']\" id=\"action_target' .$id. '\"'\n            . ' value=\"' .($action['type'] == 'redirect' ? rcube::Q($action['target'], 'strict', false) : '') . '\"'\n            . (!empty($domains) ? ' size=\"20\"' : ' size=\"35\"')\n            . $this->error_class($id, 'action', 'target', 'action_target') .' />'\n            . (!empty($domains) ? ' @ ' . $domain_select->show($action['domain']) : '')\n            . '</span>';\n\n        // (e)reject target\n        $out .= '<textarea name=\"_action_target_area['.$id.']\" id=\"action_target_area' .$id. '\" '\n            .'rows=\"3\" cols=\"35\" '. $this->error_class($id, 'action', 'targetarea', 'action_target_area')\n            .'style=\"display:' .(in_array($action['type'], array('reject', 'ereject')) ? 'inline' : 'none') .'\">'\n            . (in_array($action['type'], array('reject', 'ereject')) ? rcube::Q($action['target'], 'strict', false) : '')\n            . \"</textarea>\\n\";\n\n        // vacation\n        $vsec      = in_array('vacation-seconds', $this->exts);\n        $auto_addr = $this->rc->config->get('managesieve_vacation_addresses_init');\n        $addresses = isset($action['addresses']) || !$auto_addr ? (array) $action['addresses'] : $this->user_emails();\n\n        $out .= '<div id=\"action_vacation' .$id.'\" style=\"display:' .($action['type']=='vacation' ? 'inline' : 'none') .'\">';\n        $out .= '<span class=\"label\">'. rcube::Q($this->plugin->gettext('vacationreason')) .'</span><br />'\n            .'<textarea name=\"_action_reason['.$id.']\" id=\"action_reason' .$id. '\" '\n            .'rows=\"3\" cols=\"35\" '. $this->error_class($id, 'action', 'reason', 'action_reason') . '>'\n            . rcube::Q($action['reason'], 'strict', false) . \"</textarea>\\n\";\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('vacationsubject')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_subject['.$id.']\" id=\"action_subject'.$id.'\" '\n            .'value=\"' . (is_array($action['subject']) ? rcube::Q(implode(', ', $action['subject']), 'strict', false) : $action['subject']) . '\" size=\"35\" '\n            . $this->error_class($id, 'action', 'subject', 'action_subject') .' />';\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('vacationfrom')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_from['.$id.']\" id=\"action_from'.$id.'\" '\n            .'value=\"' . $action['from'] . '\" size=\"35\" '\n            . $this->error_class($id, 'action', 'from', 'action_from') .' />';\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('vacationaddr')) . '</span><br />'\n            . $this->list_input($id, 'action_addresses', $addresses, true,\n                $this->error_class($id, 'action', 'addresses', 'action_addresses'), 30)\n            . html::a(array('href' => '#', 'onclick' => rcmail_output::JS_OBJECT_NAME . \".managesieve_vacation_addresses($id)\"),\n                rcube::Q($this->plugin->gettext('filladdresses')));\n        $out .= '<br /><span class=\"label\">' . rcube::Q($this->plugin->gettext($vsec ? 'vacationinterval' : 'vacationdays')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_interval['.$id.']\" id=\"action_interval'.$id.'\" '\n            .'value=\"' .rcube::Q(rcube_sieve_vacation::vacation_interval($action), 'strict', false) . '\" size=\"2\" '\n            . $this->error_class($id, 'action', 'interval', 'action_interval') .' />';\n        if ($vsec) {\n            $out .= '&nbsp;<label><input type=\"radio\" name=\"_action_interval_type['.$id.']\" value=\"days\"'\n                . (!isset($action['seconds']) ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->plugin->gettext('days').'</label>'\n                . '&nbsp;<label><input type=\"radio\" name=\"_action_interval_type['.$id.']\" value=\"seconds\"'\n                . (isset($action['seconds']) ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->plugin->gettext('seconds').'</label>';\n        }\n        $out .= '</div>';\n\n        // flags\n        $flags = array(\n            'read'      => '\\\\Seen',\n            'answered'  => '\\\\Answered',\n            'flagged'   => '\\\\Flagged',\n            'deleted'   => '\\\\Deleted',\n            'draft'     => '\\\\Draft',\n        );\n        $flags_target = (array)$action['target'];\n\n        $out .= '<div id=\"action_flags' .$id.'\" style=\"display:' \n            . (preg_match('/^(set|add|remove)flag$/', $action['type']) ? 'inline' : 'none') . '\"'\n            . $this->error_class($id, 'action', 'flags', 'action_flags') . '>';\n        foreach ($flags as $fidx => $flag) {\n            $out .= '<input type=\"checkbox\" name=\"_action_flags[' .$id .'][]\" value=\"' . $flag . '\"'\n                . (in_array_nocase($flag, $flags_target) ? 'checked=\"checked\"' : '') . ' />'\n                . rcube::Q($this->plugin->gettext('flag'.$fidx)) .'<br>';\n        }\n        $out .= '</div>';\n\n        // set variable\n        $set_modifiers = array(\n            'lower',\n            'upper',\n            'lowerfirst',\n            'upperfirst',\n            'quotewildcard',\n            'length'\n        );\n\n        $out .= '<div id=\"action_set' .$id.'\" style=\"display:' .($action['type']=='set' ? 'inline' : 'none') .'\">';\n        $out .= '<span class=\"label\">' .rcube::Q($this->plugin->gettext('setvarname')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_varname['.$id.']\" id=\"action_varname'.$id.'\" '\n            .'value=\"' . rcube::Q($action['name']) . '\" size=\"35\" '\n            . $this->error_class($id, 'action', 'name', 'action_varname') .' />';\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('setvarvalue')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_varvalue['.$id.']\" id=\"action_varvalue'.$id.'\" '\n            .'value=\"' . rcube::Q($action['value']) . '\" size=\"35\" '\n            . $this->error_class($id, 'action', 'value', 'action_varvalue') .' />';\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('setvarmodifiers')) . '</span><br />';\n        foreach ($set_modifiers as $s_m) {\n            $s_m_id = 'action_varmods' . $id . $s_m;\n            $out .= sprintf('<input type=\"checkbox\" name=\"_action_varmods[%s][]\" value=\"%s\" id=\"%s\"%s />%s<br>',\n                $id, $s_m, $s_m_id,\n                (array_key_exists($s_m, (array)$action) && $action[$s_m] ? ' checked=\"checked\"' : ''),\n                rcube::Q($this->plugin->gettext('var' . $s_m)));\n        }\n        $out .= '</div>';\n\n        // notify\n        $notify_methods     = (array) $this->rc->config->get('managesieve_notify_methods');\n        $importance_options = $this->notify_importance_options;\n\n        if (empty($notify_methods)) {\n            $notify_methods = $this->notify_methods;\n        }\n\n        list($method, $target) = explode(':', $action['method'], 2);\n        $method = strtolower($method);\n\n        if ($method && !in_array($method, $notify_methods)) {\n            $notify_methods[] = $method;\n        }\n\n        $select_method = new html_select(array(\n            'name'  => \"_action_notifymethod[$id]\",\n            'id'    => \"_action_notifymethod$id\",\n            'class' => $this->error_class($id, 'action', 'method', 'action_notifymethod'),\n        ));\n        foreach ($notify_methods as $m_n) {\n            $select_method->add(rcube::Q($this->rc->text_exists('managesieve.notifymethod'.$m_n) ? $this->plugin->gettext('managesieve.notifymethod'.$m_n) : $m_n), $m_n);\n        }\n\n        $select_importance = new html_select(array(\n            'name'  => \"_action_notifyimportance[$id]\",\n            'id'    => \"_action_notifyimportance$id\",\n            'class' => $this->error_class($id, 'action', 'importance', 'action_notifyimportance')\n        ));\n        foreach ($importance_options as $io_v => $io_n) {\n            $select_importance->add(rcube::Q($this->plugin->gettext($io_n)), $io_v);\n        }\n\n        // @TODO: nice UI for mailto: (other methods too) URI parameters\n        $out .= '<div id=\"action_notify' .$id.'\" style=\"display:' .($action['type'] == 'notify' ? 'inline' : 'none') .'\">';\n        $out .= '<span class=\"label\">' .rcube::Q($this->plugin->gettext('notifytarget')) . '</span><br />'\n            . $select_method->show($method)\n            .'<input type=\"text\" name=\"_action_notifytarget['.$id.']\" id=\"action_notifytarget'.$id.'\" '\n            .'value=\"' . rcube::Q($target) . '\" size=\"25\" '\n            . $this->error_class($id, 'action', 'target', 'action_notifytarget') .' />';\n        $out .= '<br /><span class=\"label\">'. rcube::Q($this->plugin->gettext('notifymessage')) .'</span><br />'\n            .'<textarea name=\"_action_notifymessage['.$id.']\" id=\"action_notifymessage' .$id. '\" '\n            .'rows=\"3\" cols=\"35\" '. $this->error_class($id, 'action', 'message', 'action_notifymessage') . '>'\n            . rcube::Q($action['message'], 'strict', false) . \"</textarea>\\n\";\n        if (in_array('enotify', $this->exts)) {\n            $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('notifyfrom')) . '</span><br />'\n                .'<input type=\"text\" name=\"_action_notifyfrom['.$id.']\" id=\"action_notifyfrom'.$id.'\" '\n                .'value=\"' . rcube::Q($action['from']) . '\" size=\"35\" '\n                . $this->error_class($id, 'action', 'from', 'action_notifyfrom') .' />';\n        }\n        $out .= '<br /><span class=\"label\">' . rcube::Q($this->plugin->gettext('notifyimportance')) . '</span><br />';\n        $out .= $select_importance->show($action['importance'] ? (int) $action['importance'] : 2);\n        $out .= '<div id=\"action_notifyoption_div' . $id  . '\">'\n            .'<span class=\"label\">' . rcube::Q($this->plugin->gettext('notifyoptions')) . '</span><br />'\n            .$this->list_input($id, 'action_notifyoption', (array)$action['options'], true,\n                $this->error_class($id, 'action', 'options', 'action_notifyoption'), 30) . '</div>';\n        $out .= '</div>';\n\n        // mailbox select\n        if ($action['type'] == 'fileinto') {\n            $mailbox = $this->mod_mailbox($action['target'], 'out');\n            // make sure non-existing (or unsubscribed) mailbox is listed (#1489956)\n            $additional = array($mailbox);\n        }\n        else {\n            $mailbox = '';\n        }\n\n        $select = $this->rc->folder_selector(array(\n            'realnames'  => false,\n            'maxlength'  => 100,\n            'id'         => 'action_mailbox' . $id,\n            'name'       => \"_action_mailbox[$id]\",\n            'style'      => 'display:'.(empty($action['type']) || $action['type'] == 'fileinto' ? 'inline' : 'none'),\n            'additional' => $additional,\n        ));\n        $out .= $select->show($mailbox);\n        $out .= '</td>';\n\n        // add/del buttons\n        $out .= '<td class=\"rowbuttons\">';\n        $out .= '<a href=\"#\" id=\"actionadd' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('add')). '\"\n            onclick=\"rcmail.managesieve_actionadd(' . $id .')\" class=\"button add\"></a>';\n        $out .= '<a href=\"#\" id=\"actiondel' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('del')). '\"\n            onclick=\"rcmail.managesieve_actiondel(' . $id .')\" class=\"button del' . ($rows_num<2 ? ' disabled' : '') .'\"></a>';\n        $out .= '</td>';\n\n        $out .= '</tr></table>';\n\n        $out .= $div ? \"</div>\\n\" : '';\n\n        return $out;\n    }\n\n    protected function genid()\n    {\n        return preg_replace('/[^0-9]/', '', microtime(true));\n    }\n\n    protected function strip_value($str, $allow_html = false, $trim = true)\n    {\n        if (is_array($str)) {\n            foreach ($str as $idx => $val) {\n                $val = $this->strip_value($val, $allow_html, $trim);\n\n                if ($val === '') {\n                    unset($str[$idx]);\n                }\n            }\n\n            return $str;\n        }\n\n        if (!$allow_html) {\n            $str = strip_tags($str);\n        }\n\n        return $trim ? trim($str) : $str;\n    }\n\n    protected function error_class($id, $type, $target, $elem_prefix='')\n    {\n        // TODO: tooltips\n        if (($type == 'test' && ($str = $this->errors['tests'][$id][$target])) ||\n            ($type == 'action' && ($str = $this->errors['actions'][$id][$target]))\n        ) {\n            $this->add_tip($elem_prefix.$id, $str, true);\n            return ' class=\"error\"';\n        }\n\n        return '';\n    }\n\n    protected function add_tip($id, $str, $error=false)\n    {\n        if ($error)\n            $str = html::span('sieve error', $str);\n\n        $this->tips[] = array($id, $str);\n    }\n\n    protected function print_tips()\n    {\n        if (empty($this->tips))\n            return;\n\n        $script = rcmail_output::JS_OBJECT_NAME.'.managesieve_tip_register('.json_encode($this->tips).');';\n        $this->rc->output->add_script($script, 'foot');\n    }\n\n    protected function list_input($id, $name, $value, $enabled, $class, $size=null)\n    {\n        $value = (array) $value;\n        $value = array_map(array('rcube', 'Q'), $value);\n        $value = implode(\"\\n\", $value);\n\n        return '<textarea data-type=\"list\" name=\"_' . $name . '['.$id.']\" id=\"' . $name.$id . '\"'\n            . ($enabled ? '' : ' disabled=\"disabled\"')\n            . ($size ? ' data-size=\"'.$size.'\"' : '')\n            . $class\n            . ' style=\"display:none\">' . $value . '</textarea>';\n    }\n\n    /**\n     * Validate input for date part elements\n     */\n    protected function validate_date_part($type, $value)\n    {\n        // we do simple validation of date/part format\n        switch ($type) {\n            case 'date': // yyyy-mm-dd\n                return preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $value);\n            case 'iso8601':\n                return preg_match('/^[0-9: .,ZWT+-]+$/', $value);\n            case 'std11':\n                return preg_match('/^((Sun|Mon|Tue|Wed|Thu|Fri|Sat),\\s+)?[0-9]{1,2}\\s+'\n                    . '(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+[0-9]{2,4}\\s+'\n                    . '[0-9]{2}:[0-9]{2}(:[0-9]{2})?\\s+([+-]*[0-9]{4}|[A-Z]{1,3})$', $value);\n            case 'julian':\n                return preg_match('/^[0-9]+$/', $value);\n            case 'time': // hh:mm:ss\n                return preg_match('/^[0-9]{2}:[0-9]{2}:[0-9]{2}$/', $value);\n            case 'year':\n                return preg_match('/^[0-9]{4}$/', $value);\n            case 'month':\n                return preg_match('/^[0-9]{2}$/', $value) && $value > 0 && $value < 13;\n            case 'day':\n                return preg_match('/^[0-9]{2}$/', $value) && $value > 0 && $value < 32;\n            case 'hour':\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 24;\n            case 'minute':\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 60;\n            case 'second':\n                // According to RFC5260, seconds can be from 00 to 60\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 61;\n            case 'weekday':\n                return preg_match('/^[0-9]$/', $value) && $value < 7;\n            case 'zone':\n                return preg_match('/^[+-][0-9]{4}$/', $value);\n        }\n    }\n\n    /**\n     * Converts mailbox name from/to UTF7-IMAP from/to internal Sieve encoding\n     * with delimiter replacement.\n     *\n     * @param string $mailbox Mailbox name\n     * @param string $mode    Conversion direction ('in'|'out')\n     *\n     * @return string Mailbox name\n     */\n    protected function mod_mailbox($mailbox, $mode = 'out')\n    {\n        $delimiter         = $_SESSION['imap_delimiter'];\n        $replace_delimiter = $this->rc->config->get('managesieve_replace_delimiter');\n        $mbox_encoding     = $this->rc->config->get('managesieve_mbox_encoding', 'UTF7-IMAP');\n\n        if ($mode == 'out') {\n            $mailbox = rcube_charset::convert($mailbox, $mbox_encoding, 'UTF7-IMAP');\n            if ($replace_delimiter && $replace_delimiter != $delimiter)\n                $mailbox = str_replace($replace_delimiter, $delimiter, $mailbox);\n        }\n        else {\n            $mailbox = rcube_charset::convert($mailbox, 'UTF7-IMAP', $mbox_encoding);\n            if ($replace_delimiter && $replace_delimiter != $delimiter)\n                $mailbox = str_replace($delimiter, $replace_delimiter, $mailbox);\n        }\n\n        return $mailbox;\n    }\n\n    /**\n     * List sieve scripts\n     *\n     * @return array Scripts list\n     */\n    public function list_scripts()\n    {\n        if ($this->list !== null) {\n            return $this->list;\n        }\n\n        $this->list = $this->sieve->get_scripts();\n\n        // Handle active script(s) and list of scripts according to Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            // Skip protected names\n            foreach ((array)$this->list as $idx => $name) {\n                $_name = strtoupper($name);\n                if ($_name == 'MASTER')\n                    $master_script = $name;\n                else if ($_name == 'MANAGEMENT')\n                    $management_script = $name;\n                else if($_name == 'USER')\n                    $user_script = $name;\n                else\n                    continue;\n\n                unset($this->list[$idx]);\n            }\n\n            // get active script(s), read USER script\n            if ($user_script) {\n                $extension = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n                $filename_regex = '/'.preg_quote($extension, '/').'$/';\n                $_SESSION['managesieve_user_script'] = $user_script;\n\n                $this->sieve->load($user_script);\n\n                foreach ($this->sieve->script->as_array() as $rules) {\n                    foreach ($rules['actions'] as $action) {\n                        if ($action['type'] == 'include' && empty($action['global'])) {\n                            $name = preg_replace($filename_regex, '', $action['target']);\n                            // make sure the script exist\n                            if (in_array($name, $this->list)) {\n                                $this->active[] = $name;\n                            }\n                        }\n                    }\n                }\n            }\n            // create USER script if it doesn't exist\n            else {\n                $content = \"# USER Management Script\\n\"\n                    .\"#\\n\"\n                    .\"# This script includes the various active sieve scripts\\n\"\n                    .\"# it is AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY!\\n\"\n                    .\"#\\n\"\n                    .\"# For more information, see http://wiki.kolab.org/KEP:14#USER\\n\"\n                    .\"#\\n\";\n                if ($this->sieve->save_script('USER', $content)) {\n                    $_SESSION['managesieve_user_script'] = 'USER';\n                    if (empty($this->master_file))\n                        $this->sieve->activate('USER');\n                }\n            }\n        }\n        else if (!empty($this->list)) {\n            // Get active script name\n            if ($active = $this->sieve->get_active()) {\n                $this->active = array($active);\n            }\n\n            // Hide scripts from config\n            $exceptions = $this->rc->config->get('managesieve_filename_exceptions');\n            if (!empty($exceptions)) {\n                $this->list = array_diff($this->list, (array)$exceptions);\n            }\n        }\n\n        // reindex\n        if (!empty($this->list)) {\n            $this->list = array_values($this->list);\n        }\n\n        return $this->list;\n    }\n\n    /**\n     * Removes sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function remove_script($name)\n    {\n        $result = $this->sieve->remove($name);\n\n        // Kolab's KEP:14\n        if ($result && $this->rc->config->get('managesieve_kolab_master')) {\n            $this->deactivate_script($name);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Activates sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function activate_script($name)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $extension   = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n            $user_script = $_SESSION['managesieve_user_script'];\n\n            // if the script is not active...\n            if ($user_script && array_search($name, $this->active) === false) {\n                // ...rewrite USER file adding appropriate include command\n                if ($this->sieve->load($user_script)) {\n                    $script = $this->sieve->script->as_array();\n                    $list   = array();\n                    $regexp = '/' . preg_quote($extension, '/') . '$/';\n\n                    // Create new include entry\n                    $rule = array(\n                        'actions' => array(\n                            0 => array(\n                                'target'   => $name.$extension,\n                                'type'     => 'include',\n                                'personal' => true,\n                    )));\n\n                    // get all active scripts for sorting\n                    foreach ($script as $rid => $rules) {\n                        foreach ($rules['actions'] as $action) {\n                            if ($action['type'] == 'include' && empty($action['global'])) {\n                                $target = $extension ? preg_replace($regexp, '', $action['target']) : $action['target'];\n                                $list[] = $target;\n                            }\n                        }\n                    }\n                    $list[] = $name;\n\n                    // Sort and find current script position\n                    asort($list, SORT_LOCALE_STRING);\n                    $list = array_values($list);\n                    $index = array_search($name, $list);\n\n                    // add rule at the end of the script\n                    if ($index === false || $index == count($list)-1) {\n                        $this->sieve->script->add_rule($rule);\n                    }\n                    // add rule at index position\n                    else {\n                        $script2 = array();\n                        foreach ($script as $rid => $rules) {\n                            if ($rid == $index) {\n                                $script2[] = $rule;\n                            }\n                            $script2[] = $rules;\n                        }\n                        $this->sieve->script->content = $script2;\n                    }\n\n                    $result = $this->sieve->save();\n                    if ($result) {\n                        $this->active[] = $name;\n                    }\n                }\n            }\n        }\n        else {\n            $result = $this->sieve->activate($name);\n            if ($result)\n                $this->active = array($name);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Deactivates sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function deactivate_script($name)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $extension   = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n            $user_script = $_SESSION['managesieve_user_script'];\n\n            // if the script is active...\n            if ($user_script && ($key = array_search($name, $this->active)) !== false) {\n                // ...rewrite USER file removing appropriate include command\n                if ($this->sieve->load($user_script)) {\n                    $script = $this->sieve->script->as_array();\n                    $name   = $name.$extension;\n\n                    foreach ($script as $rid => $rules) {\n                        foreach ($rules['actions'] as $action) {\n                            if ($action['type'] == 'include' && empty($action['global'])\n                                && $action['target'] == $name\n                            ) {\n                                break 2;\n                            }\n                        }\n                    }\n\n                    // Entry found\n                    if ($rid < count($script)) {\n                        $this->sieve->script->delete_rule($rid);\n                        $result = $this->sieve->save();\n                        if ($result) {\n                            unset($this->active[$key]);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            $result = $this->sieve->deactivate();\n            if ($result)\n                $this->active = array();\n        }\n\n        return $result;\n    }\n\n    /**\n     * Saves current script (adding some variables)\n     */\n    public function save_script($name = null)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $this->sieve->script->set_var('EDITOR', self::PROGNAME);\n            $this->sieve->script->set_var('EDITOR_VERSION', self::VERSION);\n        }\n\n        return $this->sieve->save($name);\n    }\n\n    /**\n     * Returns list of rules from the current script\n     *\n     * @return array List of rules\n     */\n    public function list_rules()\n    {\n        $result = array();\n        $i      = 1;\n\n        foreach ($this->script as $idx => $filter) {\n            if (empty($filter['actions'])) {\n                continue;\n            }\n            $fname = $filter['name'] ?: \"#$i\";\n            $result[] = array(\n                'id'    => $idx,\n                'name'  => $fname,\n                'class' => $filter['disabled'] ? 'disabled' : '',\n            );\n            $i++;\n        }\n\n        return $result;\n    }\n\n    /**\n     * Initializes internal script data\n     */\n    protected function init_script()\n    {\n        if (!$this->sieve->script) {\n            return;\n        }\n\n        $this->script = $this->sieve->script->as_array();\n\n        $headers    = array();\n        $exceptions = array('date', 'currentdate', 'size', 'body');\n\n        // find common headers used in script, will be added to the list\n        // of available (predefined) headers (#1489271)\n        foreach ($this->script as $rule) {\n            foreach ((array) $rule['tests'] as $test) {\n                if ($test['test'] == 'header') {\n                    foreach ((array) $test['arg1'] as $header) {\n                        $lc_header = strtolower($header);\n\n                        // skip special names to not confuse UI\n                        if (in_array($lc_header, $exceptions)) {\n                            continue;\n                        }\n\n                        if (!isset($this->headers[$lc_header]) && !isset($headers[$lc_header])) {\n                            $headers[$lc_header] = $header;\n                        }\n                    }\n                }\n            }\n        }\n\n        ksort($headers);\n\n        $this->headers += $headers;\n    }\n\n    /**\n     * Get all e-mail addresses of the user\n     */\n    protected function user_emails()\n    {\n        $addresses = $this->rc->user->list_emails();\n\n        foreach ($addresses as $idx => $email) {\n            $addresses[$idx] = $email['email'];\n        }\n\n        $addresses = array_unique($addresses);\n        sort($addresses);\n\n        return $addresses;\n    }\n}\n", "code_before": "<?php\n\n/**\n * Managesieve (Sieve Filters) Engine\n *\n * Engine part of Managesieve plugin implementing UI and backend access.\n *\n * Copyright (C) The Roundcube Dev Team\n * Copyright (C) Kolab Systems AG\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see https://www.gnu.org/licenses/.\n */\n\nclass rcube_sieve_engine\n{\n    protected $rc;\n    protected $sieve;\n    protected $plugin;\n    protected $errors;\n    protected $form;\n    protected $list;\n    protected $master_file;\n    protected $tips = [];\n    protected $script = [];\n    protected $exts = [];\n    protected $active = [];\n    protected $headers = [];\n    protected $disabled_actions = [];\n    protected $addr_headers = [\n        // Required\n        'from', 'to', 'cc', 'bcc', 'sender', 'resent-from', 'resent-to',\n        // Additional (RFC 822 / RFC 2822)\n        'reply-to', 'resent-reply-to', 'resent-sender', 'resent-cc', 'resent-bcc',\n        // Non-standard (RFC 2076, draft-palme-mailext-headers-08.txt)\n        'for-approval', 'for-handling', 'for-comment', 'apparently-to', 'errors-to',\n        'delivered-to', 'return-receipt-to', 'x-admin', 'read-receipt-to',\n        'x-confirm-reading-to', 'return-receipt-requested',\n        'registered-mail-reply-requested-by', 'mail-followup-to', 'mail-reply-to',\n        'abuse-reports-to', 'x-complaints-to', 'x-report-abuse-to',\n        // Undocumented\n        'x-beenthere',\n    ];\n    protected $notify_methods = [\n        'mailto',\n        // 'sms',\n        // 'tel',\n    ];\n    protected $notify_importance_options = [\n        3 => 'notifyimportancelow',\n        2 => 'notifyimportancenormal',\n        1 => 'notifyimportancehigh',\n    ];\n\n    public const VERSION = '9.5';\n    public const PROGNAME = 'Roundcube (Managesieve)';\n    public const PORT = 4190;\n\n    /**\n     * Class constructor\n     */\n    public function __construct($plugin)\n    {\n        $this->rc = rcube::get_instance();\n        $this->plugin = $plugin;\n        $this->headers = $this->get_default_headers();\n    }\n\n    /**\n     * Loads configuration, initializes plugin (including sieve connection)\n     */\n    public function start($mode = null)\n    {\n        // register UI objects\n        $this->rc->output->add_handlers([\n            'filterslist' => [$this, 'filters_list'],\n            'filtersetslist' => [$this, 'filtersets_list'],\n            'filterform' => [$this, 'filter_form'],\n            'filtersetform' => [$this, 'filterset_form'],\n            'filterseteditraw' => [$this, 'filterset_editraw'],\n        ]);\n\n        $this->disabled_actions = (array) $this->rc->config->get('managesieve_disabled_actions');\n\n        // connect to managesieve server\n        $error = $this->connect($_SESSION['username'], $this->rc->decrypt($_SESSION['password']));\n\n        $script_name = null;\n        $list = [];\n\n        // load current/active script\n        if (!$error) {\n            // Get list of scripts\n            $list = $this->list_scripts();\n\n            // reset current script when entering filters UI (#1489412)\n            if ($this->rc->action == 'plugin.managesieve') {\n                $this->rc->session->remove('managesieve_current');\n            }\n\n            if ($mode != 'vacation' && $mode != 'forward') {\n                if (!empty($_GET['_set']) || !empty($_POST['_set'])) {\n                    $script_name = rcube_utils::get_input_string('_set', rcube_utils::INPUT_GPC, true);\n                } elseif (!empty($_SESSION['managesieve_current'])) {\n                    $script_name = $_SESSION['managesieve_current'];\n                }\n            }\n\n            $error = $this->load_script($script_name);\n        }\n\n        // finally set script objects\n        if ($error) {\n            switch ($error) {\n                case rcube_sieve::ERROR_CONNECTION:\n                case rcube_sieve::ERROR_LOGIN:\n                    $this->rc->output->show_message('managesieve.filterconnerror', 'error');\n                    break;\n                default:\n                    $this->rc->output->show_message('managesieve.filterunknownerror', 'error');\n                    break;\n            }\n\n            // reload interface in case of possible error when specified script wasn't found (#1489412)\n            if ($script_name !== null && !empty($list) && !in_array($script_name, $list)) {\n                $this->rc->output->command('reload', 500);\n            }\n\n            // to disable 'Add filter' button set env variable\n            $this->rc->output->set_env('filterconnerror', true);\n            $this->script = [];\n        } else {\n            $this->exts = $this->sieve->get_extensions();\n            $this->init_script();\n            $this->rc->output->set_env('currentset', $this->sieve->current);\n            $_SESSION['managesieve_current'] = $this->sieve->current;\n        }\n\n        $this->rc->output->set_env('raw_sieve_editor', $this->rc->config->get('managesieve_raw_editor', true));\n        $this->rc->output->set_env('managesieve_disabled_actions', $this->disabled_actions);\n        $this->rc->output->set_env('managesieve_no_set_list', in_array('list_sets', $this->disabled_actions));\n\n        return $error;\n    }\n\n    /**\n     * Connect to configured managesieve server\n     *\n     * @param string $username User login\n     * @param string $password User password\n     *\n     * @return int Connection status: 0 on success, >0 on failure\n     */\n    public function connect($username, $password)\n    {\n        $host = $this->rc->config->get('managesieve_host', 'localhost');\n\n        // $config['managesieve_host'] parameter now can be configured in two ways:\n        // - as an array, which allows to switch between different servers. E.g.,\n        //   a user can log in as user@some.host, or as otheruser@other.host and\n        //   have different sieve servers for different hosts.\n        // - as a string (default).\n        if (is_array($host)) {\n            // By now, the $_SESSION['storage_host'] variable should contain the host name\n            // of a mail server, user logged in. This entry should match the mapping in the\n            // $config['managesieve_host'] parameter in the configuration, e.g.:\n            // ['example.com' => 'sieve.example.net'].\n            if (array_key_exists($_SESSION['storage_host'], $host)) {\n                $host = $host[$this->rc->config->mail_domain($_SESSION['storage_host'])];\n            } else {\n                rcube::raise_error([\n                    'code' => 500,\n                    'message' => \"Can't locate the sieve server. Please check the 'managesieve_host' config option.\",\n                ], true, false);\n                return rcube_sieve::ERROR_CONNECTION;\n            }\n        }\n\n        $host = rcube_utils::parse_host($host);\n\n        $plugin = $this->rc->plugins->exec_hook('managesieve_connect', [\n            'user' => $username,\n            'password' => $password,\n            'host' => $host,\n            'auth_type' => $this->rc->config->get('managesieve_auth_type'),\n            'disabled' => $this->rc->config->get('managesieve_disabled_extensions'),\n            'debug' => $this->rc->config->get('managesieve_debug', false),\n            'auth_cid' => $this->rc->config->get('managesieve_auth_cid'),\n            'auth_pw' => $this->rc->config->get('managesieve_auth_pw'),\n            'socket_options' => $this->rc->config->get('managesieve_conn_options'),\n            'gssapi_context' => null,\n            'gssapi_cn' => null,\n        ]);\n\n        [$host, $scheme, $port] = rcube_utils::parse_host_uri($plugin['host']);\n\n        // Support explicit STARTTLS by establishing an unencrypted TCP connection, then instructing Net_Sieve to send the `STARTTLS` command.\n        $tls = $scheme === 'tls';\n\n        // Support implicit SSL by passing the URI scheme through to Net_Sieve -> Net_Socket -> stream_socket_client().\n        if ($scheme === 'ssl') {\n            $host = 'ssl://' . $host;\n        }\n\n        if (empty($port)) {\n            $port = getservbyname('sieve', 'tcp') ?: self::PORT;\n        }\n\n        $host = rcube_utils::idn_to_ascii($host);\n\n        // Handle per-host socket options\n        rcube_utils::parse_socket_options($plugin['socket_options'], $host);\n\n        // try to connect to managesieve server and to fetch the script\n        $this->sieve = new rcube_sieve(\n            $plugin['user'],\n            $plugin['password'],\n            $host,\n            $port,\n            $plugin['auth_type'],\n            $tls,\n            $plugin['disabled'],\n            $plugin['debug'],\n            $plugin['auth_cid'],\n            $plugin['auth_pw'],\n            $plugin['socket_options'],\n            $plugin['gssapi_context'],\n            $plugin['gssapi_cn']\n        );\n\n        $error = $this->sieve->error();\n\n        if ($error) {\n            rcube::raise_error([\n                'code' => 403,\n                'message' => \"Unable to connect to managesieve on {$host}:{$port}\",\n            ], true, false);\n        }\n\n        return $error;\n    }\n\n    /**\n     * Load specified (or active) script\n     *\n     * @param string $script_name Optional script name\n     *\n     * @return int Connection status: 0 on success, >0 on failure\n     */\n    protected function load_script($script_name = null)\n    {\n        // Get list of scripts\n        $list = $this->list_scripts();\n\n        if ($script_name === null || $script_name === '') {\n            // get (first) active script\n            if (!empty($this->active)) {\n                $script_name = $this->active[0];\n            } elseif (!empty($list)) {\n                $script_name = $list[0];\n            } else {\n                // if script does not exist create one with default content\n                $script_name = $this->create_default_script();\n            }\n        }\n\n        if ($script_name) {\n            if ($this->is_protected_script($script_name)) {\n                return rcube_sieve::ERROR_NOT_EXISTS;\n            }\n\n            $this->sieve->load($script_name);\n        }\n\n        return $this->sieve->error();\n    }\n\n    /**\n     * User interface actions handler\n     */\n    public function actions()\n    {\n        $error = $this->start();\n\n        // Handle user requests\n        if ($action = rcube_utils::get_input_string('_act', rcube_utils::INPUT_GPC)) {\n            $fid = (int) rcube_utils::get_input_value('_fid', rcube_utils::INPUT_POST);\n\n            if ($action == 'delete' && !$error) {\n                if (!in_array('delete_filter', $this->disabled_actions)) {\n                    if (isset($this->script[$fid])) {\n                        $result = false;\n                        if ($this->sieve->script->delete_rule($fid)) {\n                            $result = $this->save_script();\n                        }\n\n                        if ($result === true) {\n                            $this->rc->output->show_message('managesieve.filterdeleted', 'confirmation');\n                            $this->rc->output->command('managesieve_updatelist', 'del', ['id' => $fid]);\n                        } else {\n                            $this->rc->output->show_message('managesieve.filterdeleteerror', 'error');\n                        }\n                    }\n                } else {\n                    $this->rc->output->show_message('managesieve.disabledaction', 'error');\n                }\n            } elseif ($action == 'move' && !$error) {\n                if (isset($this->script[$fid])) {\n                    $to = (int) rcube_utils::get_input_value('_to', rcube_utils::INPUT_POST);\n                    $rule = $this->script[$fid];\n\n                    // remove rule\n                    unset($this->script[$fid]);\n                    $this->script = array_values($this->script);\n\n                    // add at target position\n                    if ($to >= count($this->script)) {\n                        $this->script[] = $rule;\n                    } else {\n                        $script = [];\n                        foreach ($this->script as $idx => $r) {\n                            if ($idx == $to) {\n                                $script[] = $rule;\n                            }\n                            $script[] = $r;\n                        }\n                        $this->script = $script;\n                    }\n\n                    $this->sieve->script->content = $this->script;\n                    $result = $this->save_script();\n\n                    if ($result === true) {\n                        $result = $this->list_rules();\n\n                        $this->rc->output->show_message('managesieve.moved', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'list',\n                            ['list' => $result, 'clear' => true, 'set' => $to]);\n                    } else {\n                        $this->rc->output->show_message('managesieve.moveerror', 'error');\n                    }\n                }\n            } elseif ($action == 'act' && !$error) {\n                if (isset($this->script[$fid])) {\n                    $rule = $this->script[$fid];\n                    $disabled = !empty($rule['disabled']);\n                    $rule['disabled'] = !$disabled;\n                    $result = $this->sieve->script->update_rule($fid, $rule);\n\n                    if ($result !== false) {\n                        $result = $this->save_script();\n                    }\n\n                    if ($result === true) {\n                        if ($rule['disabled']) {\n                            $this->rc->output->show_message('managesieve.deactivated', 'confirmation');\n                        } else {\n                            $this->rc->output->show_message('managesieve.activated', 'confirmation');\n                        }\n                        $this->rc->output->command('managesieve_updatelist', 'update',\n                            ['id' => $fid, 'disabled' => $rule['disabled']]);\n                    } else {\n                        if ($rule['disabled']) {\n                            $this->rc->output->show_message('managesieve.deactivateerror', 'error');\n                        } else {\n                            $this->rc->output->show_message('managesieve.activateerror', 'error');\n                        }\n                    }\n                }\n            } elseif ($action == 'setact' && !$error) {\n                if (!in_array('enable_disable_set', $this->disabled_actions)) {\n                    $script_name = rcube_utils::get_input_string('_set', rcube_utils::INPUT_POST, true);\n                    $result = $this->activate_script($script_name);\n                    $kep14 = $this->rc->config->get('managesieve_kolab_master');\n\n                    if ($result === true) {\n                        $this->rc->output->set_env('active_sets', $this->active);\n                        $this->rc->output->show_message('managesieve.setactivated', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'setact',\n                            ['name' => $script_name, 'active' => true, 'all' => !$kep14]);\n                    } else {\n                        $this->rc->output->show_message('managesieve.setactivateerror', 'error');\n                    }\n                } else {\n                    $this->rc->output->show_message('managesieve.disabledaction', 'error');\n                }\n            } elseif ($action == 'deact' && !$error) {\n                if (!in_array('enable_disable_set', $this->disabled_actions)) {\n                    $script_name = rcube_utils::get_input_string('_set', rcube_utils::INPUT_POST, true);\n                    $result = $this->deactivate_script($script_name);\n\n                    if ($result === true) {\n                        $this->rc->output->set_env('active_sets', $this->active);\n                        $this->rc->output->show_message('managesieve.setdeactivated', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'setact',\n                            ['name' => $script_name, 'active' => false]);\n                    } else {\n                        $this->rc->output->show_message('managesieve.setdeactivateerror', 'error');\n                    }\n                } else {\n                    $this->rc->output->show_message('managesieve.disabledaction', 'error');\n                }\n            } elseif ($action == 'setdel' && !$error) {\n                if (!in_array('delete_set', $this->disabled_actions)) {\n                    $script_name = rcube_utils::get_input_string('_set', rcube_utils::INPUT_POST, true);\n                    $result = $this->remove_script($script_name);\n\n                    if ($result === true) {\n                        $this->rc->output->show_message('managesieve.setdeleted', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'setdel', ['name' => $script_name]);\n                        $this->rc->session->remove('managesieve_current');\n                    } else {\n                        $this->rc->output->show_message('managesieve.setdeleteerror', 'error');\n                    }\n                } else {\n                    $this->rc->output->show_message('managesieve.disabledaction', 'error');\n                }\n            } elseif ($action == 'setget') {\n                if (!in_array('download_set', $this->disabled_actions)) {\n                    $this->rc->request_security_check(rcube_utils::INPUT_GET);\n\n                    $script_name = rcube_utils::get_input_string('_set', rcube_utils::INPUT_GPC, true);\n\n                    if ($this->is_protected_script($script_name)) {\n                        exit;\n                    }\n\n                    $script = $this->sieve->get_script($script_name);\n\n                    if ($script !== false) {\n                        $this->rc->output->download_headers($script_name . '.txt', ['length' => strlen($script)]);\n                        echo $script;\n                    }\n\n                    exit;\n                }\n            } elseif ($action == 'list') {\n                $result = $this->list_rules();\n\n                $this->rc->output->command('managesieve_updatelist', 'list', ['list' => $result]);\n            } elseif ($action == 'ruleadd') {\n                $rid = rcube_utils::get_input_string('_rid', rcube_utils::INPUT_POST);\n                $id = $this->genid();\n                $content = $this->rule_div($fid, $id, false, !empty($_SESSION['managesieve-compact-form']));\n\n                $this->rc->output->command('managesieve_rulefill', $content, $id, $rid);\n            } elseif ($action == 'actionadd') {\n                $aid = rcube_utils::get_input_string('_aid', rcube_utils::INPUT_POST);\n                $id = $this->genid();\n                $content = $this->action_div($fid, $id, false);\n\n                $this->rc->output->command('managesieve_actionfill', $content, $id, $aid);\n            } elseif ($action == 'addresses') {\n                $aid = rcube_utils::get_input_string('_aid', rcube_utils::INPUT_POST);\n\n                $this->rc->output->command('managesieve_vacation_addresses_update', $aid, $this->user_emails());\n            }\n\n            $this->rc->output->send();\n        } elseif ($this->rc->task == 'mail') {\n            // Initialize the form\n            $rules = rcube_utils::get_input_value('r', rcube_utils::INPUT_GET);\n            if (!empty($rules)) {\n                $tests = [];\n                foreach ($rules as $rule) {\n                    [$header, $value] = explode(':', $rule, 2);\n                    $tests[] = [\n                        'type' => 'contains',\n                        'test' => 'header',\n                        'arg1' => $header,\n                        'arg2' => $value,\n                    ];\n                }\n\n                $this->form = [\n                    'join' => count($tests) > 1 ? 'allof' : 'anyof',\n                    'name' => '',\n                    'tests' => $tests,\n                    'actions' => [\n                        ['type' => 'fileinto'],\n                        ['type' => 'stop'],\n                    ],\n                ];\n            }\n        }\n\n        $this->send();\n    }\n\n    public function saveraw()\n    {\n        // Init plugin and handle managesieve connection\n        $error = $this->start();\n\n        $script_name = rcube_utils::get_input_string('_set', rcube_utils::INPUT_POST);\n\n        $result = empty($error) && !$this->is_protected_script($script_name)\n            && $this->sieve->save_script($script_name, $_POST['rawsetcontent']);\n\n        if ($result === false) {\n            $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n            $errorLines = $this->sieve->get_error_lines();\n            if (count($errorLines) > 0) {\n                $this->rc->output->set_env('sieve_errors', $errorLines);\n            }\n        } else {\n            $this->rc->output->show_message('managesieve.setupdated', 'confirmation');\n            $this->rc->output->command('parent.managesieve_updatelist', 'refresh');\n        }\n\n        $this->send();\n    }\n\n    public function save()\n    {\n        // Init plugin and handle managesieve connection\n        $error = $this->start();\n\n        // get request size limits (#1488648)\n        $max_post = max([\n            ini_get('max_input_vars'),\n            ini_get('suhosin.request.max_vars'),\n            ini_get('suhosin.post.max_vars'),\n        ]);\n        $max_depth = max([\n            ini_get('suhosin.request.max_array_depth'),\n            ini_get('suhosin.post.max_array_depth'),\n        ]);\n\n        // check request size limit\n        if ($max_post && count($_POST, \\COUNT_RECURSIVE) >= $max_post) {\n            rcube::raise_error([\n                'code' => 500,\n                'message' => 'Request size limit exceeded (one of max_input_vars/suhosin.request.max_vars/suhosin.post.max_vars)',\n            ], true, false);\n            $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n        }\n        // check request depth limits\n        elseif ($max_depth && count($_POST['_header']) > $max_depth) {\n            rcube::raise_error([\n                'code' => 500,\n                'message' => 'Request size limit exceeded (one of suhosin.request.max_array_depth/suhosin.post.max_array_depth)',\n            ], true, false);\n            $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n        }\n        // filters set add action\n        elseif (!empty($_POST['_newset'])) {\n            $name = rcube_utils::get_input_string('_name', rcube_utils::INPUT_POST, true);\n            $copy = rcube_utils::get_input_string('_copy', rcube_utils::INPUT_POST, true);\n            $from = rcube_utils::get_input_string('_from', rcube_utils::INPUT_POST);\n            $exceptions = $this->rc->config->get('managesieve_filename_exceptions');\n            $kolab = $this->rc->config->get('managesieve_kolab_master');\n            $name_uc = mb_strtolower($name);\n            $list = $this->list_scripts();\n\n            if (in_array('new_set', $this->disabled_actions)) {\n                $error = 'managesieve.disabledaction';\n            } elseif (!$name) {\n                $this->errors['name'] = $this->plugin->gettext('cannotbeempty');\n            } elseif (mb_strlen($name) > 128) {\n                $this->errors['name'] = $this->plugin->gettext('nametoolong');\n            } elseif (!empty($exceptions) && in_array($name, (array) $exceptions)) {\n                $this->errors['name'] = $this->plugin->gettext('namereserved');\n            } elseif (!empty($kolab) && in_array($name_uc, ['MASTER', 'USER', 'MANAGEMENT'])) {\n                $this->errors['name'] = $this->plugin->gettext('namereserved');\n            } elseif (in_array($name, $list)) {\n                $this->errors['name'] = $this->plugin->gettext('setexist');\n            } elseif ($from == 'file') {\n                // from file\n                if (is_uploaded_file($_FILES['_file']['tmp_name'])) {\n                    $file = file_get_contents($_FILES['_file']['tmp_name']);\n                    $file = preg_replace('/\\r/', '', $file);\n                    // for security don't save script directly\n                    // check syntax before, like this...\n                    $this->sieve->load_script($file);\n                    if (!$this->save_script($name)) {\n                        $this->errors['file'] = $this->plugin->gettext('setcreateerror');\n                    }\n                } else {\n                    // upload failed\n                    rcmail_action::upload_error($_FILES['_file']['error']);\n                }\n            } elseif (!$this->sieve->copy($name, $from == 'set' ? $copy : '')) {\n                $error = 'managesieve.setcreateerror';\n            }\n\n            if (!$error && empty($this->errors)) {\n                // Find position of the new script on the list\n                $list[] = $name;\n                asort($list, \\SORT_LOCALE_STRING);\n                $list = array_values($list);\n                $index = array_search($name, $list);\n\n                $this->rc->output->show_message('managesieve.setcreated', 'confirmation');\n                $this->rc->output->command('parent.managesieve_updatelist', 'setadd',\n                    ['name' => $name, 'index' => $index]);\n            } elseif ($error) {\n                $this->rc->output->show_message($error, 'error');\n            }\n        }\n        // filter add/edit action\n        elseif (isset($_POST['_name'])) {\n            $name = trim(rcube_utils::get_input_string('_name', rcube_utils::INPUT_POST, true));\n            $fid = trim(rcube_utils::get_input_string('_fid', rcube_utils::INPUT_POST));\n            $join = trim(rcube_utils::get_input_string('_join', rcube_utils::INPUT_POST));\n\n            // and arrays\n            $headers = rcube_utils::get_input_value('_header', rcube_utils::INPUT_POST);\n            $cust_headers = rcube_utils::get_input_value('_custom_header', rcube_utils::INPUT_POST);\n            $cust_vars = rcube_utils::get_input_value('_custom_var', rcube_utils::INPUT_POST);\n            $ops = rcube_utils::get_input_value('_rule_op', rcube_utils::INPUT_POST);\n            $sizeops = rcube_utils::get_input_value('_rule_size_op', rcube_utils::INPUT_POST);\n            $sizeitems = rcube_utils::get_input_value('_rule_size_item', rcube_utils::INPUT_POST);\n            $sizetargets = rcube_utils::get_input_value('_rule_size_target', rcube_utils::INPUT_POST);\n            $spamtestops = rcube_utils::get_input_value('_rule_spamtest_op', rcube_utils::INPUT_POST);\n            $spamtesttargets = rcube_utils::get_input_value('_rule_spamtest_target', rcube_utils::INPUT_POST);\n            $targets = rcube_utils::get_input_value('_rule_target', rcube_utils::INPUT_POST, true);\n            $mods = rcube_utils::get_input_value('_rule_mod', rcube_utils::INPUT_POST);\n            $mod_types = rcube_utils::get_input_value('_rule_mod_type', rcube_utils::INPUT_POST);\n            $body_trans = rcube_utils::get_input_value('_rule_trans', rcube_utils::INPUT_POST);\n            $body_types = rcube_utils::get_input_value('_rule_trans_type', rcube_utils::INPUT_POST, true);\n            $comparators = rcube_utils::get_input_value('_rule_comp', rcube_utils::INPUT_POST);\n            $indexes = rcube_utils::get_input_value('_rule_index', rcube_utils::INPUT_POST);\n            $lastindexes = rcube_utils::get_input_value('_rule_index_last', rcube_utils::INPUT_POST);\n            $dateheaders = rcube_utils::get_input_value('_rule_date_header', rcube_utils::INPUT_POST);\n            $dateparts = rcube_utils::get_input_value('_rule_date_part', rcube_utils::INPUT_POST);\n            $mime_parts = rcube_utils::get_input_value('_rule_mime_part', rcube_utils::INPUT_POST);\n            $mime_types = rcube_utils::get_input_value('_rule_mime_type', rcube_utils::INPUT_POST);\n            $mime_params = rcube_utils::get_input_value('_rule_mime_param', rcube_utils::INPUT_POST, true);\n            $message = rcube_utils::get_input_value('_rule_message', rcube_utils::INPUT_POST);\n            $dup_handles = rcube_utils::get_input_value('_rule_duplicate_handle', rcube_utils::INPUT_POST, true);\n            $dup_headers = rcube_utils::get_input_value('_rule_duplicate_header', rcube_utils::INPUT_POST, true);\n            $dup_uniqueids = rcube_utils::get_input_value('_rule_duplicate_uniqueid', rcube_utils::INPUT_POST, true);\n            $dup_seconds = rcube_utils::get_input_value('_rule_duplicate_seconds', rcube_utils::INPUT_POST);\n            $dup_lasts = rcube_utils::get_input_value('_rule_duplicate_last', rcube_utils::INPUT_POST);\n            $act_types = rcube_utils::get_input_value('_action_type', rcube_utils::INPUT_POST, true);\n            $mailboxes = rcube_utils::get_input_value('_action_mailbox', rcube_utils::INPUT_POST, true);\n            $act_targets = rcube_utils::get_input_value('_action_target', rcube_utils::INPUT_POST, true);\n            $domain_targets = rcube_utils::get_input_value('_action_target_domain', rcube_utils::INPUT_POST);\n            $area_targets = rcube_utils::get_input_value('_action_target_area', rcube_utils::INPUT_POST, true);\n            $reasons = rcube_utils::get_input_value('_action_reason', rcube_utils::INPUT_POST, true);\n            $addresses = rcube_utils::get_input_value('_action_addresses', rcube_utils::INPUT_POST, true);\n            $intervals = rcube_utils::get_input_value('_action_interval', rcube_utils::INPUT_POST);\n            $interval_types = rcube_utils::get_input_value('_action_interval_type', rcube_utils::INPUT_POST);\n            $from = rcube_utils::get_input_value('_action_from', rcube_utils::INPUT_POST, true);\n            $subject = rcube_utils::get_input_value('_action_subject', rcube_utils::INPUT_POST, true);\n            $flags = rcube_utils::get_input_value('_action_flags', rcube_utils::INPUT_POST);\n            $varnames = rcube_utils::get_input_value('_action_varname', rcube_utils::INPUT_POST);\n            $varvalues = rcube_utils::get_input_value('_action_varvalue', rcube_utils::INPUT_POST);\n            $varmods = rcube_utils::get_input_value('_action_varmods', rcube_utils::INPUT_POST);\n            $notifymethods = rcube_utils::get_input_value('_action_notifymethod', rcube_utils::INPUT_POST);\n            $notifytargets = rcube_utils::get_input_value('_action_notifytarget', rcube_utils::INPUT_POST, true);\n            $notifyoptions = rcube_utils::get_input_value('_action_notifyoption', rcube_utils::INPUT_POST, true);\n            $notifymessages = rcube_utils::get_input_value('_action_notifymessage', rcube_utils::INPUT_POST, true);\n            $notifyfrom = rcube_utils::get_input_value('_action_notifyfrom', rcube_utils::INPUT_POST, true);\n            $notifyimp = rcube_utils::get_input_value('_action_notifyimportance', rcube_utils::INPUT_POST);\n            $addheader_name = rcube_utils::get_input_value('_action_addheader_name', rcube_utils::INPUT_POST);\n            $addheader_value = rcube_utils::get_input_value('_action_addheader_value', rcube_utils::INPUT_POST, true);\n            $addheader_pos = rcube_utils::get_input_value('_action_addheader_pos', rcube_utils::INPUT_POST);\n            $delheader_name = rcube_utils::get_input_value('_action_delheader_name', rcube_utils::INPUT_POST);\n            $delheader_value = rcube_utils::get_input_value('_action_delheader_value', rcube_utils::INPUT_POST, true);\n            $delheader_pos = rcube_utils::get_input_value('_action_delheader_pos', rcube_utils::INPUT_POST);\n            $delheader_index = rcube_utils::get_input_value('_action_delheader_index', rcube_utils::INPUT_POST);\n            $delheader_op = rcube_utils::get_input_value('_action_delheader_op', rcube_utils::INPUT_POST);\n            $delheader_comp = rcube_utils::get_input_value('_action_delheader_comp', rcube_utils::INPUT_POST);\n\n            $this->form['disabled'] = empty($_POST['_enabled']);\n            $this->form['join'] = $join == 'allof';\n            $this->form['name'] = $name;\n            $this->form['tests'] = [];\n            $this->form['actions'] = [];\n\n            if ($name == '') {\n                $this->errors['name'] = $this->plugin->gettext('cannotbeempty');\n            } else {\n                foreach ($this->script as $idx => $rule) {\n                    if ($rule['name'] == $name && $idx != $fid) {\n                        $this->errors['name'] = $this->plugin->gettext('ruleexist');\n                        break;\n                    }\n                }\n            }\n\n            $i = 0;\n            // rules\n            if ($join == 'any') {\n                $this->form['tests'][0]['test'] = 'true';\n            } else {\n                foreach ($headers as $idx => $header) {\n                    // targets are indexed differently (assume form order)\n                    $target = $this->strip_value($targets[$idx], true);\n                    $header = $this->strip_value($header);\n                    $operator = $this->strip_value($ops[$idx]);\n                    $comparator = $this->strip_value($comparators[$idx]);\n\n                    if ($header == 'size') {\n                        $sizeop = $this->strip_value($sizeops[$idx]);\n                        $sizeitem = $this->strip_value($sizeitems[$idx]);\n                        $sizetarget = $this->strip_value($sizetargets[$idx]);\n\n                        $this->form['tests'][$i]['test'] = 'size';\n                        $this->form['tests'][$i]['type'] = $sizeop;\n                        $this->form['tests'][$i]['arg'] = $sizetarget;\n\n                        if ($sizetarget === '') {\n                            $this->errors['tests'][$i]['sizetarget'] = $this->plugin->gettext('cannotbeempty');\n                        } elseif (!preg_match('/^[0-9]+(K|M|G)?$/i', $sizetarget . $sizeitem, $m)) {\n                            $this->errors['tests'][$i]['sizetarget'] = $this->plugin->gettext('forbiddenchars');\n                            $this->form['tests'][$i]['item'] = $sizeitem;\n                        } else {\n                            $this->form['tests'][$i]['arg'] .= $m[1];\n                        }\n                    } elseif ($header == 'spamtest') {\n                        $spamtestop = $this->strip_value($spamtestops[$idx]);\n                        $spamtesttarget = $this->strip_value($spamtesttargets[$idx]);\n                        $comparator = 'i;ascii-numeric';\n\n                        if (!$spamtestop) {\n                            $spamtestop = 'value-eq';\n                            $spamtesttarget = '0';\n                        }\n\n                        $this->form['tests'][$i]['test'] = 'spamtest';\n                        $this->form['tests'][$i]['type'] = $spamtestop;\n                        $this->form['tests'][$i]['arg'] = $spamtesttarget;\n\n                        if ($spamtesttarget === '') {\n                            $this->errors['tests'][$i]['spamtesttarget'] = $this->plugin->gettext('cannotbeempty');\n                        } elseif (!preg_match('/^([0-9]|10)$/i', $spamtesttarget)) {\n                            $this->errors['tests'][$i]['spamtesttarget'] = $this->plugin->gettext('forbiddenchars');\n                        }\n                    } elseif ($header == 'currentdate') {\n                        $datepart = $this->strip_value($dateparts[$idx]);\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        $this->form['tests'][$i]['test'] = 'currentdate';\n                        $this->form['tests'][$i]['type'] = $type;\n                        $this->form['tests'][$i]['part'] = $datepart;\n                        $this->form['tests'][$i]['arg'] = $target;\n                        $this->form['tests'][$i]['not'] = preg_match('/^not/', $operator) === 1;\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        if ($type != 'exists') {\n                            if (empty($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            } elseif (str_starts_with($type, 'count-')) {\n                                foreach ($target as $arg) {\n                                    if (preg_match('/[^0-9]/', $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            } elseif (str_starts_with($type, 'value-')) {\n                                // Some date/time formats do not support i;ascii-numeric comparator\n                                if ($comparator == 'i;ascii-numeric' && in_array($datepart, ['date', 'time', 'iso8601', 'std11'])) {\n                                    $comparator = '';\n                                }\n                            }\n\n                            if (!preg_match('/^(regex|matches|count-)/', $type) && !empty($target)) {\n                                foreach ($target as $arg) {\n                                    if (!$this->validate_date_part($datepart, $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('invaliddateformat');\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    } elseif ($header == 'date') {\n                        $datepart = $this->strip_value($dateparts[$idx]);\n                        $dateheader = $this->strip_value($dateheaders[$idx]);\n                        $index = $this->strip_value($indexes[$idx]);\n                        $indexlast = $this->strip_value($lastindexes[$idx] ?? null);\n                        $mod = $this->strip_value($mods[$idx]);\n\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        if (!empty($index) && $mod != 'envelope') {\n                            $this->form['tests'][$i]['index'] = intval($index);\n                            $this->form['tests'][$i]['last'] = !empty($indexlast);\n                        }\n\n                        if (empty($dateheader)) {\n                            $dateheader = 'Date';\n                        } elseif (!preg_match('/^[\\x21-\\x39\\x41-\\x7E]+$/i', $dateheader)) {\n                            $this->errors['tests'][$i]['dateheader'] = $this->plugin->gettext('forbiddenchars');\n                        }\n\n                        $this->form['tests'][$i]['test'] = 'date';\n                        $this->form['tests'][$i]['type'] = $type;\n                        $this->form['tests'][$i]['part'] = $datepart;\n                        $this->form['tests'][$i]['arg'] = $target;\n                        $this->form['tests'][$i]['header'] = $dateheader;\n                        $this->form['tests'][$i]['not'] = preg_match('/^not/', $operator) === 1;\n\n                        if ($type != 'exists') {\n                            if (empty($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            } elseif (str_starts_with($type, 'count-')) {\n                                foreach ($target as $arg) {\n                                    if (preg_match('/[^0-9]/', $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            } elseif (str_starts_with($type, 'value-')) {\n                                // Some date/time formats do not support i;ascii-numeric comparator\n                                if ($comparator == 'i;ascii-numeric' && in_array($datepart, ['date', 'time', 'iso8601', 'std11'])) {\n                                    $comparator = '';\n                                }\n                            }\n\n                            if (!empty($target) && !preg_match('/^(regex|matches|count-)/', $type)) {\n                                foreach ($target as $arg) {\n                                    if (!$this->validate_date_part($datepart, $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('invaliddateformat');\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    } elseif ($header == 'body') {\n                        $trans = $this->strip_value($body_trans[$idx]);\n                        $trans_type = $this->strip_value($body_types[$idx], true);\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        $this->form['tests'][$i]['test'] = 'body';\n                        $this->form['tests'][$i]['type'] = $type;\n                        $this->form['tests'][$i]['arg'] = $target;\n                        $this->form['tests'][$i]['not'] = preg_match('/^not/', $operator) === 1;\n                        $this->form['tests'][$i]['part'] = $trans;\n\n                        if ($trans == 'content') {\n                            $this->form['tests'][$i]['content'] = $trans_type;\n                        }\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        if (empty($target) && $type != 'exists') {\n                            $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                        } elseif (preg_match('/^(value|count)-/', $type)) {\n                            foreach ($target as $target_value) {\n                                if (preg_match('/[^0-9]/', $target_value)) {\n                                    $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                }\n                            }\n                        }\n                    } elseif ($header == 'message') {\n                        $test = $this->strip_value($message[$idx]);\n\n                        if (preg_match('/^not/', $test)) {\n                            $this->form['tests'][$i]['not'] = true;\n                            $test = substr($test, 3);\n                        }\n\n                        $this->form['tests'][$i]['test'] = $test;\n\n                        if ($test == 'duplicate') {\n                            $this->form['tests'][$i]['last'] = !empty($dup_lasts[$idx]);\n                            $this->form['tests'][$i]['handle'] = trim($dup_handles[$idx]);\n                            $this->form['tests'][$i]['header'] = trim($dup_headers[$idx]);\n                            $this->form['tests'][$i]['uniqueid'] = trim($dup_uniqueids[$idx]);\n                            $this->form['tests'][$i]['seconds'] = trim($dup_seconds[$idx]);\n\n                            if ($this->form['tests'][$i]['seconds']\n                                && preg_match('/[^0-9]/', $this->form['tests'][$i]['seconds'])\n                            ) {\n                                $this->errors['tests'][$i]['duplicate_seconds'] = $this->plugin->gettext('forbiddenchars');\n                            }\n\n                            if ($this->form['tests'][$i]['header'] && $this->form['tests'][$i]['uniqueid']) {\n                                $this->errors['tests'][$i]['duplicate_uniqueid'] = $this->plugin->gettext('duplicate.conflict.err');\n                            }\n                        }\n                    } else {\n                        $cust_header = $headers = $this->strip_value($cust_headers[$idx]);\n                        $mod = $this->strip_value($mods[$idx]);\n                        $mod_type = $this->strip_value($mod_types[$idx]);\n                        $index = isset($indexes[$idx]) ? $this->strip_value($indexes[$idx]) : null;\n                        $indexlast = isset($lastindexes[$idx]) ? $this->strip_value($lastindexes[$idx]) : null;\n                        $mime_param = isset($mime_params[$idx]) ? $this->strip_value($mime_params[$idx]) : null;\n                        $mime_type = $mime_types[$idx] ?? null;\n                        $mime_part = $mime_parts[$idx] ?? null;\n                        $cust_var = null;\n\n                        if ($header == 'string') {\n                            $cust_var = $headers = $this->strip_value($cust_vars[$idx]);\n                        }\n\n                        $this->form['tests'][$i]['not'] = preg_match('/^not/', $operator) === 1;\n\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if (!empty($index) && $mod != 'envelope') {\n                            $this->form['tests'][$i]['index'] = intval($index);\n                            $this->form['tests'][$i]['last'] = !empty($indexlast);\n                        }\n\n                        if ($header == '...' || $header == 'string') {\n                            if (!count($headers)) {\n                                $this->errors['tests'][$i]['header'] = $this->plugin->gettext('cannotbeempty');\n                            } elseif ($header == '...') {\n                                foreach ($headers as $hr) {\n                                    // RFC2822: printable ASCII except colon\n                                    if (!preg_match('/^[\\x21-\\x39\\x41-\\x7E]+$/i', $hr)) {\n                                        $this->errors['tests'][$i]['header'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n\n                            if (empty($this->errors['tests'][$i]['header'])) {\n                                $cust_header = $cust_var = (is_array($headers) && count($headers) == 1) ? $headers[0] : $headers;\n                            }\n                        }\n\n                        $test = $header == 'string' ? 'string' : 'header';\n                        $header = $header == 'string' ? $cust_var : $header;\n                        $header = $header == '...' ? $cust_header : $header;\n\n                        if (is_array($header)) {\n                            foreach ($header as $h_index => $val) {\n                                if (isset($this->headers[$val])) {\n                                    $header[$h_index] = $this->headers[$val];\n                                }\n                            }\n                        }\n\n                        if ($type == 'exists') {\n                            $this->form['tests'][$i]['test'] = 'exists';\n                            $this->form['tests'][$i]['arg'] = $header;\n                        } else {\n                            if ($mod == 'address' || $mod == 'envelope') {\n                                $found = false;\n                                if (empty($this->errors['tests'][$i]['header'])) {\n                                    foreach ((array) $header as $hdr) {\n                                        if (!in_array(strtolower(trim($hdr)), $this->addr_headers)) {\n                                            $found = true;\n                                        }\n                                    }\n                                }\n                                if (!$found) {\n                                    $test = $mod;\n                                }\n                            }\n\n                            $this->form['tests'][$i]['type'] = $type;\n                            $this->form['tests'][$i]['test'] = $test;\n                            $this->form['tests'][$i]['arg1'] = $header;\n                            $this->form['tests'][$i]['arg2'] = $target;\n\n                            if (empty($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            } elseif (preg_match('/^(value|count)-/', $type)) {\n                                foreach ($target as $target_value) {\n                                    if (preg_match('/[^0-9]/', $target_value)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n\n                            if ($mod) {\n                                $this->form['tests'][$i]['part'] = $mod_type;\n                            }\n                        }\n\n                        if ($test == 'header') {\n                            if (in_array($mime_type, ['type', 'subtype', 'contenttype', 'param'])) {\n                                $this->form['tests'][$i]['mime-' . $mime_type] = true;\n                                if ($mime_type == 'param') {\n                                    if (empty($mime_param)) {\n                                        $this->errors['tests'][$i]['mime-param'] = $this->plugin->gettext('cannotbeempty');\n                                    }\n\n                                    $this->form['tests'][$i]['mime-param'] = $mime_param;\n                                }\n                            }\n\n                            if ($mime_part == 'anychild') {\n                                $this->form['tests'][$i]['mime-anychild'] = true;\n                            }\n                        }\n                    }\n\n                    if ($header != 'size' && $comparator) {\n                        $this->form['tests'][$i]['comparator'] = $comparator;\n                    }\n\n                    $i++;\n                }\n            }\n\n            $i = 0;\n            // actions\n            foreach ($act_types as $idx => $type) {\n                $type = $this->strip_value($type);\n\n                switch ($type) {\n                    case 'fileinto':\n                    case 'fileinto_copy':\n                        $mailbox = $this->strip_value($mailboxes[$idx], false, false);\n                        $this->form['actions'][$i]['target'] = $this->mod_mailbox($mailbox, 'in');\n\n                        if ($type == 'fileinto_copy') {\n                            $type = 'fileinto';\n                            $this->form['actions'][$i]['copy'] = true;\n                        }\n\n                        break;\n                    case 'reject':\n                    case 'ereject':\n                        $target = $this->strip_value($area_targets[$idx]);\n                        $this->form['actions'][$i]['target'] = str_replace(\"\\r\\n\", \"\\n\", $target);\n\n                        // if ($target == '') {\n                        //     $this->errors['actions'][$i]['targetarea'] = $this->plugin->gettext('cannotbeempty');\n                        // }\n\n                        break;\n                    case 'redirect':\n                    case 'redirect_copy':\n                        $target = $this->strip_value($act_targets[$idx] ?? null);\n                        $domain = $this->strip_value($domain_targets[$idx] ?? null);\n\n                        // force one of the configured domains\n                        $domains = (array) $this->rc->config->get('managesieve_domains');\n                        if (!empty($domains) && !empty($target)) {\n                            if (!$domain || !in_array($domain, $domains)) {\n                                $domain = $domains[0];\n                            }\n\n                            $target .= '@' . $domain;\n                        }\n\n                        $this->form['actions'][$i]['target'] = $target;\n\n                        if ($target === '') {\n                            $this->errors['actions'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                        } elseif (!rcube_utils::check_email($target)) {\n                            $this->errors['actions'][$i]['target'] = $this->plugin->gettext(!empty($domains) ? 'forbiddenchars' : 'noemailwarning');\n                        }\n\n                        if ($type == 'redirect_copy') {\n                            $type = 'redirect';\n                            $this->form['actions'][$i]['copy'] = true;\n                        }\n\n                        break;\n                    case 'addflag':\n                    case 'setflag':\n                    case 'removeflag':\n                        $this->form['actions'][$i]['target'] = $this->strip_value($flags[$idx]);\n\n                        if (empty($this->form['actions'][$i]['target'])) {\n                            $this->errors['actions'][$i]['flag'] = $this->plugin->gettext('noflagset');\n                        }\n\n                        break;\n                    case 'addheader':\n                    case 'deleteheader':\n                        $this->form['actions'][$i]['name'] = trim($type == 'addheader' ? $addheader_name[$idx] : $delheader_name[$idx]);\n                        $this->form['actions'][$i]['value'] = $type == 'addheader' ? $addheader_value[$idx] : $delheader_value[$idx];\n                        $this->form['actions'][$i]['last'] = ($type == 'addheader' ? $addheader_pos[$idx] : $delheader_pos[$idx]) == 'last';\n\n                        if (empty($this->form['actions'][$i]['name'])) {\n                            $this->errors['actions'][$i]['name'] = $this->plugin->gettext('cannotbeempty');\n                        } elseif (!preg_match('/^[0-9a-z_-]+$/i', $this->form['actions'][$i]['name'])) {\n                            $this->errors['actions'][$i]['name'] = $this->plugin->gettext('forbiddenchars');\n                        }\n\n                        if ($type == 'deleteheader') {\n                            foreach ((array) $this->form['actions'][$i]['value'] as $pidx => $pattern) {\n                                if (empty($pattern)) {\n                                    unset($this->form['actions'][$i]['value'][$pidx]);\n                                }\n                            }\n\n                            $this->form['actions'][$i]['match-type'] = $delheader_op[$idx];\n                            $this->form['actions'][$i]['comparator'] = $delheader_comp[$idx];\n                            $this->form['actions'][$i]['index'] = $delheader_index[$idx];\n\n                            if (empty($this->form['actions'][$i]['index'])) {\n                                if (!empty($this->form['actions'][$i]['last'])) {\n                                    $this->errors['actions'][$i]['index'] = $this->plugin->gettext('lastindexempty');\n                                }\n                            } elseif (!preg_match('/^[0-9]+$/i', $this->form['actions'][$i]['index'])) {\n                                $this->errors['actions'][$i]['index'] = $this->plugin->gettext('forbiddenchars');\n                            }\n                        } else {\n                            if (empty($this->form['actions'][$i]['value'])) {\n                                $this->errors['actions'][$i]['value'] = $this->plugin->gettext('cannotbeempty');\n                            }\n                        }\n\n                        break;\n                    case 'vacation':\n                        $reason = $this->strip_value($reasons[$idx], true);\n                        $interval_type = $interval_types && $interval_types[$idx] == 'seconds' ? 'seconds' : 'days';\n\n                        $this->form['actions'][$i]['reason'] = str_replace(\"\\r\\n\", \"\\n\", $reason);\n                        $this->form['actions'][$i]['from'] = $from[$idx];\n                        $this->form['actions'][$i]['subject'] = $subject[$idx];\n                        $this->form['actions'][$i]['addresses'] = $addresses[$idx];\n                        $this->form['actions'][$i][$interval_type] = $intervals[$idx];\n\n                        // @TODO: vacation :mime, :handle\n\n                        foreach ((array) $this->form['actions'][$i]['addresses'] as $aidx => $address) {\n                            $this->form['actions'][$i]['addresses'][$aidx] = $address = trim($address);\n\n                            if (empty($address)) {\n                                unset($this->form['actions'][$i]['addresses'][$aidx]);\n                            } elseif (!rcube_utils::check_email($address)) {\n                                $this->errors['actions'][$i]['addresses'] = $this->plugin->gettext('noemailwarning');\n                                break;\n                            }\n                        }\n\n                        if (!empty($this->form['actions'][$i]['from'])) {\n                            // According to RFC5230 the :from string must specify a valid [RFC2822] mailbox-list\n                            $this->action_email_input($i, 'from');\n                        }\n\n                        if ($this->form['actions'][$i]['reason'] == '') {\n                            $this->errors['actions'][$i]['reason'] = $this->plugin->gettext('cannotbeempty');\n                        }\n                        if ($this->form['actions'][$i][$interval_type] && !preg_match('/^[0-9]+$/', $this->form['actions'][$i][$interval_type])) {\n                            $this->errors['actions'][$i]['interval'] = $this->plugin->gettext('forbiddenchars');\n                        }\n\n                        break;\n                    case 'set':\n                        $this->form['actions'][$i]['name'] = $varnames[$idx];\n                        $this->form['actions'][$i]['value'] = $varvalues[$idx];\n                        foreach ((array) $varmods[$idx] as $v_m) {\n                            $this->form['actions'][$i][$v_m] = true;\n                        }\n\n                        if (empty($varnames[$idx])) {\n                            $this->errors['actions'][$i]['name'] = $this->plugin->gettext('cannotbeempty');\n                        } elseif (!preg_match('/^[0-9a-z_]+$/i', $varnames[$idx])) {\n                            $this->errors['actions'][$i]['name'] = $this->plugin->gettext('forbiddenchars');\n                        }\n\n                        if (!isset($varvalues[$idx]) || $varvalues[$idx] === '') {\n                            $this->errors['actions'][$i]['value'] = $this->plugin->gettext('cannotbeempty');\n                        }\n\n                        break;\n                    case 'notify':\n                        if (empty($notifymethods[$idx])) {\n                            $this->errors['actions'][$i]['method'] = $this->plugin->gettext('cannotbeempty');\n                        }\n                        if (empty($notifytargets[$idx])) {\n                            $this->errors['actions'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                        }\n\n                        // skip empty options\n                        foreach ((array) $notifyoptions[$idx] as $opt_idx => $opt) {\n                            if (!strlen(trim($opt))) {\n                                unset($notifyoptions[$idx][$opt_idx]);\n                            }\n                        }\n\n                        $this->form['actions'][$i]['method'] = $notifymethods[$idx] . ':' . $notifytargets[$idx];\n                        $this->form['actions'][$i]['options'] = $notifyoptions[$idx];\n                        $this->form['actions'][$i]['message'] = $notifymessages[$idx];\n                        $this->form['actions'][$i]['from'] = $notifyfrom[$idx];\n                        $this->form['actions'][$i]['importance'] = $notifyimp[$idx];\n\n                        if (!empty($notifyfrom[$idx]) && stripos($this->form['actions'][$i]['method'], 'mailto:') === 0) {\n                            // For mailto method :from string must specify a valid [RFC2822] mailbox-list\n                            $this->action_email_input($i, 'from');\n                        }\n\n                        break;\n                }\n\n                $this->form['actions'][$i]['type'] = $type;\n                $i++;\n            }\n\n            if (!$this->errors && !$error) {\n                // save the script\n                if (!isset($this->script[$fid])) {\n                    $fid = $this->sieve->script->add_rule($this->form);\n                    $new = true;\n                } else {\n                    $fid = $this->sieve->script->update_rule($fid, $this->form);\n                }\n\n                if ($fid !== false) {\n                    $save = $this->save_script();\n                }\n\n                if (!empty($save) && $fid !== false) {\n                    $this->rc->output->show_message('managesieve.filtersaved', 'confirmation');\n                    if ($this->rc->task != 'mail') {\n                        $args = [\n                            'name' => $this->form['name'],\n                            'id' => $fid,\n                            'disabled' => $this->form['disabled'],\n                        ];\n                        $this->rc->output->command('parent.managesieve_updatelist', isset($new) ? 'add' : 'update', $args);\n                    } else {\n                        $this->rc->output->command('managesieve_dialog_close');\n                        $this->rc->output->send('iframe');\n                    }\n                } else {\n                    $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n                }\n            } else {\n                $this->rc->output->show_message('managesieve.filterformerror', 'warning');\n            }\n        }\n\n        $this->send();\n    }\n\n    protected function send()\n    {\n        // Handle form action\n        if (isset($_GET['_framed']) || isset($_POST['_framed'])) {\n            if (isset($_GET['_newset']) || isset($_POST['_newset'])) {\n                $this->rc->output->send('managesieve.setedit');\n            } elseif (isset($_GET['_seteditraw']) || isset($_POST['_seteditraw'])) {\n                $this->rc->output->send('managesieve.seteditraw');\n            } else {\n                $this->rc->output->send('managesieve.filteredit');\n            }\n        } else {\n            $this->rc->output->set_pagetitle($this->plugin->gettext('filters'));\n            $this->rc->output->send('managesieve.managesieve');\n        }\n    }\n\n    /**\n     * Return the filters list as HTML table\n     */\n    public function filters_list($attrib)\n    {\n        // add id to message list table if not specified\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmfilterslist';\n        }\n\n        // define list of cols to be displayed\n        $a_show_cols = ['name'];\n\n        $result = $this->list_rules();\n\n        // create the table\n        $out = rcmail_action::table_output($attrib, $result, $a_show_cols, 'id');\n\n        // set client env\n        $this->rc->output->add_gui_object('filterslist', $attrib['id']);\n        $this->rc->output->include_script('list.js');\n\n        // add some labels to client\n        $this->rc->output->add_label('managesieve.filterdeleteconfirm');\n\n        return $out;\n    }\n\n    /**\n     * Return the filters list as <SELECT>\n     */\n    public function filtersets_list($attrib, $no_env = false)\n    {\n        // add id to message list table if not specified\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmfiltersetslist';\n        }\n\n        $list = $this->list_scripts();\n\n        if ($list) {\n            asort($list, \\SORT_LOCALE_STRING);\n        }\n\n        if (!empty($attrib['type']) && $attrib['type'] == 'list') {\n            // define list of cols to be displayed\n            $a_show_cols = ['name'];\n            $result = [];\n            $scripts = [];\n\n            if ($list) {\n                foreach ($list as $idx => $set) {\n                    $scripts['S' . $idx] = $set;\n                    $result[] = [\n                        'name' => $set,\n                        'id' => 'S' . $idx,\n                        'class' => !in_array($set, $this->active) ? 'disabled' : '',\n                    ];\n                }\n            }\n\n            // create XHTML table\n            $out = $this->rc->table_output($attrib, $result, $a_show_cols, 'id');\n\n            $this->rc->output->set_env('filtersets', $scripts);\n            $this->rc->output->include_script('list.js');\n        } else {\n            $select = new html_select([\n                'name' => '_set',\n                'id' => $attrib['id'],\n                'class' => 'custom-select',\n                'onchange' => $this->rc->task != 'mail' ? 'rcmail.managesieve_set()' : '',\n            ]);\n\n            if ($list) {\n                foreach ($list as $set) {\n                    $select->add($set, $set);\n                }\n            }\n\n            $out = $select->show($this->sieve->current);\n        }\n\n        // set client env\n        if (!$no_env) {\n            $this->rc->output->add_gui_object('filtersetslist', $attrib['id']);\n            $this->rc->output->add_label('managesieve.setdeleteconfirm');\n        }\n\n        return $out;\n    }\n\n    public function filterset_editraw($attrib)\n    {\n        $script_name = rcube_utils::get_input_string('_set', rcube_utils::INPUT_GP);\n        $script = $this->sieve->get_script($script_name);\n        $script_post = !empty($_POST['rawsetcontent']) ? $_POST['rawsetcontent'] : null;\n        $framed = !empty($_POST['_framed']) || !empty($_GET['_framed']);\n\n        $hiddenfields = new html_hiddenfield();\n        $hiddenfields->add(['name' => '_task', 'value' => $this->rc->task]);\n        $hiddenfields->add(['name' => '_action', 'value' => 'plugin.managesieve-saveraw']);\n        $hiddenfields->add(['name' => '_set', 'value' => $script_name]);\n        $hiddenfields->add(['name' => '_seteditraw', 'value' => 1]);\n        $hiddenfields->add(['name' => '_framed', 'value' => $framed ? 1 : 0]);\n\n        $out = $hiddenfields->show();\n\n        $txtarea = new html_textarea([\n            'id' => 'rawfiltersettxt',\n            'name' => 'rawsetcontent',\n            'class' => 'form-control',\n            'rows' => '15',\n        ]);\n\n        $out .= $txtarea->show($script_post !== null ? $script_post : ($script !== false ? rtrim($script) : ''));\n\n        $this->rc->output->add_gui_object('sievesetrawform', 'filtersetrawform');\n        $this->plugin->include_stylesheet('codemirror/lib/codemirror.css');\n        $this->plugin->include_script('codemirror/lib/codemirror.js');\n        $this->plugin->include_script('codemirror/addon/selection/active-line.js');\n        $this->plugin->include_script('codemirror/mode/sieve/sieve.js');\n\n        if ($script === false) {\n            $this->rc->output->show_message('managesieve.filterunknownerror', 'error');\n        }\n\n        $out = html::tag('form', $attrib + [\n                'id' => 'filtersetrawform',\n                'name' => 'filtersetrawform',\n                'action' => './',\n                'method' => 'post',\n                'enctype' => 'multipart/form-data',\n            ], $out\n        );\n\n        return str_replace('</form>', '', $out);\n    }\n\n    public function filterset_form($attrib)\n    {\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmfiltersetform';\n        }\n\n        $framed = !empty($_POST['_framed']) || !empty($_GET['_framed']);\n        $table = new html_table(['cols' => 2, 'class' => 'propform']);\n        $hiddenfields = new html_hiddenfield(['name' => '_task', 'value' => $this->rc->task]);\n        $hiddenfields->add(['name' => '_action', 'value' => 'plugin.managesieve-save']);\n        $hiddenfields->add(['name' => '_framed', 'value' => $framed ? 1 : 0]);\n        $hiddenfields->add(['name' => '_newset', 'value' => 1]);\n\n        $name = rcube_utils::get_input_string('_name', rcube_utils::INPUT_POST);\n        $copy = rcube_utils::get_input_string('_copy', rcube_utils::INPUT_POST);\n        $selected = rcube_utils::get_input_string('_from', rcube_utils::INPUT_POST);\n\n        // filter set name input\n        $input_name = new html_inputfield([\n            'name' => '_name',\n            'id' => '_name',\n            'size' => 30,\n            'class' => !empty($this->errors['name']) ? 'error form-control' : 'form-control',\n        ]);\n\n        $table->add('title', html::label('_name', rcube::Q($this->plugin->gettext('filtersetname'))));\n        $table->add(null, $input_name->show($name));\n\n        $filters = '<ul class=\"proplist\">';\n        $filters .= '<li>' . html::label('from_none', html::tag('input', [\n            'type' => 'radio',\n            'id' => 'from_none',\n            'name' => '_from',\n            'value' => 'none',\n            'checked' => !$selected || $selected == 'none',\n        ]) . rcube::Q($this->plugin->gettext('none'))) . '</li>';\n\n        // filters set list\n        $list = $this->list_scripts();\n        $select = new html_select(['name' => '_copy', 'id' => '_copy', 'class' => 'custom-select']);\n\n        if (is_array($list)) {\n            asort($list, \\SORT_LOCALE_STRING);\n\n            if (!$copy && isset($_SESSION['managesieve_current'])) {\n                $copy = $_SESSION['managesieve_current'];\n            }\n\n            foreach ($list as $set) {\n                $select->add($set, $set);\n            }\n\n            $filters .= '<li>' . html::label('from_set', html::tag('input', [\n                'type' => 'radio',\n                'id' => 'from_set',\n                'name' => '_from',\n                'value' => 'set',\n                'checked' => $selected == 'set',\n            ]) . rcube::Q($this->plugin->gettext('fromset')) . ' ' . $select->show($copy)) . '</li>';\n        }\n\n        // script upload box\n        $upload = new html_inputfield([\n            'name' => '_file',\n            'id' => '_file',\n            'size' => 30,\n            'type' => 'file',\n            'class' => !empty($this->errors['file']) ? 'error form-control' : 'form-control',\n        ]);\n\n        $filters .= '<li>' . html::label('from_file', html::tag('input', [\n            'type' => 'radio',\n            'id' => 'from_file',\n            'name' => '_from',\n            'value' => 'file',\n            'checked' => $selected == 'file',\n        ]) . rcube::Q($this->plugin->gettext('fromfile')) . ' ' . $upload->show()) . '</li>';\n\n        $filters .= '</ul>';\n\n        $table->add('title', html::label('from_none', rcube::Q($this->plugin->gettext('filters'))));\n        $table->add('', $filters);\n\n        $out = '<form name=\"filtersetform\" action=\"./\" method=\"post\" enctype=\"multipart/form-data\">'\n            . \"\\n\" . $hiddenfields->show() . \"\\n\" . $table->show();\n\n        $this->rc->output->add_gui_object('sieveform', 'filtersetform');\n\n        if (!empty($this->errors['name'])) {\n            $this->add_tip('_name', $this->errors['name'], true);\n        }\n        if (!empty($this->errors['file'])) {\n            $this->add_tip('_file', $this->errors['file'], true);\n        }\n\n        $this->print_tips();\n\n        return $out;\n    }\n\n    /**\n     * Filter form object for templates engine\n     */\n    public function filter_form($attrib)\n    {\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmfilterform';\n        }\n\n        $fid = rcube_utils::get_input_string('_fid', rcube_utils::INPUT_GPC);\n        $scr = $this->form ?? (array_key_exists($fid, $this->script) ? $this->script[$fid] : null);\n        $compact = !empty($attrib['compact-form']);\n        $framed = !empty($_POST['_framed']) || !empty($_GET['_framed']);\n\n        $_SESSION['managesieve-compact-form'] = $compact;\n\n        // do not allow creation of new filters\n        if ($fid === '' && in_array('new_filter', $this->disabled_actions)) {\n            $this->rc->output->show_message('managesieve.disabledaction', 'error');\n            return;\n        }\n\n        $hiddenfields = new html_hiddenfield(['name' => '_task', 'value' => $this->rc->task]);\n        $hiddenfields->add(['name' => '_action', 'value' => 'plugin.managesieve-save']);\n        $hiddenfields->add(['name' => '_framed', 'value' => $framed ? 1 : 0]);\n        $hiddenfields->add(['name' => '_fid', 'value' => $fid]);\n\n        $out = $hiddenfields->show();\n\n        // 'any' flag\n        $any = (\n            (!isset($this->form) && !empty($scr) && empty($scr['tests']))\n            || (!empty($scr['tests']) && count($scr['tests']) == 1\n                && $scr['tests'][0]['test'] == 'true' && empty($scr['tests'][0]['not'])\n            )\n        );\n\n        // filter name input\n        $input_name = new html_inputfield([\n            'name' => '_name',\n            'id' => '_name',\n            'size' => 30,\n            'class' => !empty($this->errors['name']) ? 'form-control error' : 'form-control',\n        ]);\n\n        if (!empty($this->errors['name'])) {\n            $this->add_tip('_name', $this->errors['name'], true);\n        }\n\n        $input_name = $input_name->show($scr['name'] ?? '');\n\n        $out .= sprintf(\"\\n\" . '<div class=\"form-group row\">'\n            . '<label for=\"_name\" class=\"col-sm-4 col-form-label\">%s</label>'\n            . '<div class=\"col-sm-8\">%s</div></div>',\n            rcube::Q($this->plugin->gettext('filtername')), $input_name\n        );\n\n        // filter set selector\n        if ($this->rc->task == 'mail') {\n            $out .= sprintf(\"\\n\" . '<div class=\"form-group row\">'\n                . '<label for=\"%s\" class=\"col-sm-4 col-form-label\">%s</label>'\n                . '<div class=\"col-sm-8\">%s</div></div>',\n                'sievescriptname',\n                rcube::Q($this->plugin->gettext('filterset')),\n                $this->filtersets_list(['id' => 'sievescriptname'], true)\n            );\n        }\n\n        $out .= sprintf(\"\\n\" . '<div class=\"form-group row form-check\">'\n            . '<label for=\"fenabled\" class=\"col-sm-4 col-form-label\">%s</label>'\n            . '<div class=\"col-sm-8 form-check\">'\n                . '<input type=\"checkbox\" id=\"fenabled\" name=\"_enabled\" value=\"1\"' . (empty($scr['disabled']) ? ' checked' : '') . ' />'\n            . '</div></div>',\n            rcube::Q($this->plugin->gettext('filterenabled'))\n        );\n\n        if ($compact) {\n            $select = new html_select(['name' => '_join', 'id' => '_join', 'class' => 'custom-select',\n                'onchange' => 'rule_join_radio(this.value)']);\n\n            foreach (['allof', 'anyof', 'any'] as $val) {\n                $select->add($this->plugin->gettext('filter' . $val), $val);\n            }\n\n            $join = $any ? 'any' : 'allof';\n            if (isset($scr) && !$any) {\n                $join = !empty($scr['join']) ? 'allof' : 'anyof';\n            }\n\n            $out .= sprintf(\"\\n\" . '<div class=\"form-group row\">'\n                . '<label for=\"_join\" class=\"col-sm-4 col-form-label\">%s</label>'\n                . '<div class=\"col-sm-8\">%s</div></div>',\n                rcube::Q($this->plugin->gettext('scope')), $select->show($join)\n            );\n\n            $out .= '<div id=\"rules\"' . ($any ? ' style=\"display: none\"' : '') . '>';\n            $out .= \"\\n<fieldset><legend>\" . rcube::Q($this->plugin->gettext('rules')) . \"</legend>\\n\";\n        } else {\n            $out .= '<br><fieldset><legend>' . rcube::Q($this->plugin->gettext('messagesrules')) . \"</legend>\\n\";\n\n            // any, allof, anyof radio buttons\n            $field_id = '_allof';\n            $input_join = new html_radiobutton(['name' => '_join', 'id' => $field_id, 'value' => 'allof',\n                'onclick' => 'rule_join_radio(\\'allof\\')', 'class' => 'radio']);\n\n            if (isset($scr) && !$any) {\n                $input_join = $input_join->show($scr['join'] ? 'allof' : '');\n            } else {\n                $input_join = $input_join->show();\n            }\n\n            $out .= $input_join . html::label($field_id, rcube::Q($this->plugin->gettext('filterallof')));\n\n            $field_id = '_anyof';\n            $input_join = new html_radiobutton(['name' => '_join', 'id' => $field_id, 'value' => 'anyof',\n                'onclick' => 'rule_join_radio(\\'anyof\\')', 'class' => 'radio']);\n\n            if (isset($scr) && !$any) {\n                $input_join = $input_join->show($scr['join'] ? '' : 'anyof');\n            } else {\n                $input_join = $input_join->show('anyof'); // default\n            }\n\n            $out .= $input_join . html::label($field_id, rcube::Q($this->plugin->gettext('filteranyof')));\n\n            $field_id = '_any';\n            $input_join = new html_radiobutton(['name' => '_join', 'id' => $field_id, 'value' => 'any',\n                'onclick' => 'rule_join_radio(\\'any\\')', 'class' => 'radio']);\n\n            $input_join = $input_join->show($any ? 'any' : '');\n\n            $out .= $input_join . html::label($field_id, rcube::Q($this->plugin->gettext('filterany')));\n            $out .= '<div id=\"rules\"' . ($any ? ' style=\"display: none\"' : '') . '>';\n        }\n\n        $rows_num = !empty($scr['tests']) ? count($scr['tests']) : 1;\n        for ($x = 0; $x < $rows_num; $x++) {\n            $out .= $this->rule_div($fid, $x, true, $compact);\n        }\n\n        $out .= $compact ? \"</fieldset>\\n</div>\\n\" : \"</div>\\n</fieldset>\\n\";\n\n        // actions\n        $label = $this->plugin->gettext($compact ? 'actions' : 'messagesactions');\n        $out .= '<fieldset><legend>' . rcube::Q($label) . \"</legend>\\n\";\n\n        $rows_num = isset($scr) ? count($scr['actions']) : 1;\n\n        $out .= '<div id=\"actions\">';\n        for ($x = 0; $x < $rows_num; $x++) {\n            $out .= $this->action_div($fid, $x);\n        }\n        $out .= \"</div>\\n\";\n\n        $out .= \"</fieldset>\\n\";\n\n        $this->print_tips();\n\n        $this->rc->output->add_label(\n            'managesieve.ruledeleteconfirm',\n            'managesieve.actiondeleteconfirm'\n        );\n        $this->rc->output->set_env('rule_disabled', !empty($scr['disabled']));\n        $this->rc->output->add_gui_object('sieveform', 'filterform');\n\n        $attrib['name'] = 'filterform';\n        $attrib['action'] = './';\n        $attrib['method'] = 'post';\n\n        $out = html::tag('form', $attrib, $out, ['name', 'action', 'method', 'class']);\n\n        if (!$compact) {\n            $out = str_replace('</form>', '', $out);\n        }\n\n        return $out;\n    }\n\n    public function rule_div($fid, $id, $div = true, $compact = false)\n    {\n        if (isset($id) && isset($this->form)) {\n            $rule = $this->form['tests'][$id];\n        } elseif (isset($id) && isset($this->script[$fid]['tests'][$id])) {\n            $rule = $this->script[$fid]['tests'][$id];\n        } else {\n            $rule = ['test' => null];\n        }\n\n        if (isset($this->form['tests'])) {\n            $rows_num = count($this->form['tests']);\n        } elseif (isset($this->script[$fid]['tests'])) {\n            $rows_num = count($this->script[$fid]['tests']);\n        } else {\n            $rows_num = 0;\n        }\n\n        // headers select\n        $select_header = new html_select(['name' => \"_header[{$id}]\", 'id' => 'header' . $id,\n            'onchange' => 'rule_header_select(' . $id . ')', 'class' => 'custom-select']);\n\n        foreach ($this->headers as $index => $header) {\n            $header = $this->rc->text_exists($index) ? $this->plugin->gettext($index) : $header;\n            $select_header->add($header, $index);\n        }\n        $select_header->add($this->plugin->gettext('...'), '...');\n        if (in_array('body', $this->exts)) {\n            $select_header->add($this->plugin->gettext('body'), 'body');\n        }\n        $select_header->add($this->plugin->gettext('size'), 'size');\n        if (in_array('spamtest', $this->exts)) {\n            $select_header->add($this->plugin->gettext('spamtest'), 'spamtest');\n        }\n        if (in_array('date', $this->exts)) {\n            $select_header->add($this->plugin->gettext('datetest'), 'date');\n            $select_header->add($this->plugin->gettext('currdate'), 'currentdate');\n        }\n        if (in_array('variables', $this->exts)) {\n            $select_header->add($this->plugin->gettext('string'), 'string');\n        }\n        if (in_array('duplicate', $this->exts)) {\n            $select_header->add($this->plugin->gettext('message'), 'message');\n        }\n\n        $test = null;\n\n        if (isset($rule['test'])) {\n            if (in_array($rule['test'], ['header', 'address', 'envelope'])) {\n                if (is_array($rule['arg1']) && count($rule['arg1']) == 1) {\n                    $rule['arg1'] = $rule['arg1'][0];\n                }\n\n                $header = !is_array($rule['arg1']) ? strtolower($rule['arg1']) : null;\n                $matches = !is_array($rule['arg1']) && $header && isset($this->headers[$header]);\n                $test = $matches ? $header : '...';\n            } elseif ($rule['test'] == 'exists') {\n                if (is_array($rule['arg']) && count($rule['arg']) == 1) {\n                    $rule['arg'] = $rule['arg'][0];\n                }\n\n                $header = !is_array($rule['arg']) ? strtolower($rule['arg']) : null;\n                $matches = !is_array($rule['arg']) && $header && isset($this->headers[$header]);\n                $test = $matches ? $header : '...';\n            } elseif (in_array($rule['test'], ['size', 'spamtest', 'body', 'date', 'currentdate', 'string'])) {\n                $test = $rule['test'];\n            } elseif (in_array($rule['test'], ['duplicate'])) {\n                $test = 'message';\n            } elseif ($rule['test'] != 'true') {\n                $test = '...';\n            }\n        }\n\n        $tout = '<div class=\"flexbox\">';\n        $aout = $select_header->show($test);\n\n        $custom = null;\n        $customv = null;\n\n        // custom headers input\n        if (isset($rule['test']) && in_array($rule['test'], ['header', 'address', 'envelope'])) {\n            $custom = (array) $rule['arg1'];\n            if (count($custom) == 1 && isset($this->headers[strtolower($custom[0])])) {\n                $custom = null;\n            }\n        } elseif (isset($rule['test']) && $rule['test'] == 'string') {\n            $customv = (array) $rule['arg1'];\n            if (count($customv) == 1 && isset($this->headers[strtolower($customv[0])])) {\n                $customv = null;\n            }\n        } elseif (isset($rule['test']) && $rule['test'] == 'exists') {\n            $custom = (array) $rule['arg'];\n            if (count($custom) == 1 && isset($this->headers[strtolower($custom[0])])) {\n                $custom = null;\n            }\n        }\n\n        // custom header and variable inputs\n        $aout .= $this->list_input($id, 'custom_header', $custom, 15, false, [\n            'disabled' => !isset($custom),\n            'class' => $this->error_class($id, 'test', 'header', 'custom_header'),\n            'placeholder' => $this->plugin->gettext('headername'),\n            'title' => $this->plugin->gettext('headername'),\n        ]) . \"\\n\";\n\n        $aout .= $this->list_input($id, 'custom_var', $customv, 15, false, [\n            'disabled' => !isset($customv),\n            'class' => $this->error_class($id, 'test', 'header', 'custom_var'),\n        ]) . \"\\n\";\n\n        $test = self::rule_test($rule);\n        $target = '';\n        $sizetarget = null;\n        $sizeitem = null;\n\n        // target(s) input\n        if (in_array($rule['test'], ['header', 'address', 'envelope', 'string'])) {\n            $target = $rule['arg2'];\n        } elseif (in_array($rule['test'], ['body', 'date', 'currentdate', 'spamtest'])) {\n            $target = $rule['arg'];\n        } elseif ($rule['test'] == 'size') {\n            if (preg_match('/^([0-9]+)(K|M|G)?$/', $rule['arg'], $matches)) {\n                $sizetarget = $matches[1];\n                $sizeitem = $matches[2];\n            } else {\n                $sizetarget = $rule['arg'];\n                $sizeitem = $rule['item'];\n            }\n        }\n\n        // (current)date part select\n        if (in_array('date', $this->exts) || in_array('currentdate', $this->exts)) {\n            $date_parts = ['date', 'iso8601', 'std11', 'julian', 'time',\n                'year', 'month', 'day', 'hour', 'minute', 'second', 'weekday', 'zone'];\n            $select_dp = new html_select([\n                'name' => \"_rule_date_part[{$id}]\",\n                'id' => 'rule_date_part' . $id,\n                'style' => in_array($rule['test'], ['currentdate', 'date']) && !preg_match('/^(notcount|count)-/', $test) ? '' : 'display:none',\n                'class' => 'datepart_selector custom-select',\n            ]);\n\n            foreach ($date_parts as $part) {\n                $select_dp->add(rcube::Q($this->plugin->gettext($part)), $part);\n            }\n\n            $aout .= $select_dp->show($rule['test'] == 'currentdate' || $rule['test'] == 'date' ? $rule['part'] : '');\n        }\n\n        // message test select (e.g. duplicate)\n        if (in_array('duplicate', $this->exts)) {\n            $select_msg = new html_select([\n                'name' => \"_rule_message[{$id}]\",\n                'id' => 'rule_message' . $id,\n                'style' => in_array($rule['test'], ['duplicate']) ? '' : 'display:none',\n                'class' => 'message_selector custom-select',\n            ]);\n\n            $select_msg->add(rcube::Q($this->plugin->gettext('duplicate')), 'duplicate');\n            $select_msg->add(rcube::Q($this->plugin->gettext('notduplicate')), 'notduplicate');\n\n            $tout .= $select_msg->show($test);\n        }\n\n        $tout .= $this->match_type_selector('rule_op', $id, $test, $rule['test']);\n        $tout .= $this->list_input($id, 'rule_target', $target, null, false, [\n            'disabled' => in_array($rule['test'], ['size', 'exists', 'duplicate', 'spamtest']),\n            'class' => $this->error_class($id, 'test', 'target', 'rule_target'),\n        ]) . \"\\n\";\n\n        $select_size_op = new html_select([\n            'name' => \"_rule_size_op[{$id}]\",\n            'id' => 'rule_size_op' . $id,\n            'class' => 'input-group-prepend custom-select',\n        ]);\n        $select_size_op->add(rcube::Q($this->plugin->gettext('filterover')), 'over');\n        $select_size_op->add(rcube::Q($this->plugin->gettext('filterunder')), 'under');\n\n        $select_size_item = new html_select([\n            'name' => \"_rule_size_item[{$id}]\",\n            'id' => 'rule_size_item' . $id,\n            'class' => 'input-group-append custom-select',\n        ]);\n        foreach (['', 'K', 'M', 'G'] as $unit) {\n            $select_size_item->add($this->plugin->gettext($unit . 'B'), $unit);\n        }\n\n        $tout .= '<div id=\"rule_size' . $id . '\" class=\"input-group\" style=\"display:' . ($rule['test'] == 'size' ? 'inline' : 'none') . '\">';\n        $tout .= $select_size_op->show($rule['test'] == 'size' ? $rule['type'] : '');\n        $tout .= html::tag('input', [\n            'type' => 'text',\n            'name' => \"_rule_size_target[{$id}]\",\n            'id' => 'rule_size_i' . $id,\n            'value' => $sizetarget,\n            'size' => 10,\n            'class' => $this->error_class($id, 'test', 'sizetarget', 'rule_size_i'),\n        ]);\n        $tout .= \"\\n\" . $select_size_item->show($sizeitem);\n        $tout .= '</div>';\n        $tout .= '</div>';\n\n        if (in_array('relational', $this->exts)) {\n            $select_spamtest_op = new html_select([\n                'name' => \"_rule_spamtest_op[{$id}]\",\n                'id' => 'rule_spamtest_op' . $id,\n                'class' => 'input-group-prepend custom-select',\n                'onchange' => 'rule_spamtest_select(' . $id . ')',\n            ]);\n            $select_spamtest_op->add(rcube::Q($this->plugin->gettext('spamtestisunknown')), '');\n            $select_spamtest_op->add(rcube::Q($this->plugin->gettext('spamtestisgreaterthan')), 'value-gt');\n            $select_spamtest_op->add(rcube::Q($this->plugin->gettext('spamtestisgreaterthanequal')), 'value-ge');\n            $select_spamtest_op->add(rcube::Q($this->plugin->gettext('spamtestislessthan')), 'value-lt');\n            $select_spamtest_op->add(rcube::Q($this->plugin->gettext('spamtestislessthanequal')), 'value-le');\n            $select_spamtest_op->add(rcube::Q($this->plugin->gettext('spamtestequals')), 'value-eq');\n            $select_spamtest_op->add(rcube::Q($this->plugin->gettext('spamtestnotequals')), 'value-ne');\n\n            $select_spamtest_target = new html_select([\n                'name' => \"_rule_spamtest_target[{$id}]\",\n                'id' => 'rule_spamtest_target' . $id,\n                'class' => 'input-group-append custom-select',\n            ]);\n            $select_spamtest_target->add(rcube::Q('0%'), '1');\n            $select_spamtest_target->add(rcube::Q('20%'), '2');\n            $select_spamtest_target->add(rcube::Q('30%'), '3');\n            $select_spamtest_target->add(rcube::Q('40%'), '4');\n            $select_spamtest_target->add(rcube::Q('50%'), '5');\n            $select_spamtest_target->add(rcube::Q('60%'), '6');\n            $select_spamtest_target->add(rcube::Q('70%'), '7');\n            $select_spamtest_target->add(rcube::Q('80%'), '8');\n            $select_spamtest_target->add(rcube::Q('90%'), '9');\n            $select_spamtest_target->add(rcube::Q('100%'), '10');\n\n            $tout .= '<div id=\"rule_spamtest' . $id . '\" class=\"input-group\" style=\"display:' . ($rule['test'] == 'spamtest' ? 'inline' : 'none') . '\">';\n            $tout .= $select_spamtest_op->show($rule['test'] == 'spamtest' && $target > 0 ? $rule['type'] : '');\n            $tout .= $select_spamtest_target->show($rule['test'] == 'spamtest' ? $target : '');\n\n            $tout .= '</div>';\n        }\n        // Advanced modifiers (address, envelope)\n        $select_mod = new html_select([\n            'name' => \"_rule_mod[{$id}]\",\n            'id' => 'rule_mod_op' . $id,\n            'class' => 'custom-select',\n            'onchange' => 'rule_mod_select(' . $id . ')',\n        ]);\n        $select_mod->add(rcube::Q($this->plugin->gettext('none')), '');\n        $select_mod->add(rcube::Q($this->plugin->gettext('address')), 'address');\n        if (in_array('envelope', $this->exts)) {\n            $select_mod->add(rcube::Q($this->plugin->gettext('envelope')), 'envelope');\n        }\n\n        $select_type = new html_select([\n            'name' => \"_rule_mod_type[{$id}]\",\n            'id' => 'rule_mod_type' . $id,\n            'class' => 'custom-select',\n        ]);\n        $select_type->add(rcube::Q($this->plugin->gettext('allparts')), 'all');\n        $select_type->add(rcube::Q($this->plugin->gettext('domain')), 'domain');\n        $select_type->add(rcube::Q($this->plugin->gettext('localpart')), 'localpart');\n        if (in_array('subaddress', $this->exts)) {\n            $select_type->add(rcube::Q($this->plugin->gettext('user')), 'user');\n            $select_type->add(rcube::Q($this->plugin->gettext('detail')), 'detail');\n        }\n\n        $need_mod = !in_array($rule['test'], ['size', 'spamtest', 'body', 'date', 'currentdate', 'duplicate', 'string']);\n        $mout = '<div id=\"rule_mod' . $id . '\" class=\"adv input-group\"' . (!$need_mod ? ' style=\"display:none\"' : '') . '>';\n        $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('modifier'))));\n        $mout .= $select_mod->show($rule['test']);\n        $mout .= '</div>';\n        $mout .= '<div id=\"rule_mod_type' . $id . '\" class=\"adv input-group\"';\n        $mout .= (!in_array($rule['test'], ['address', 'envelope']) ? ' style=\"display:none\"' : '') . '>';\n        $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('modtype'))));\n        $mout .= $select_type->show($rule['part'] ?? null);\n        $mout .= '</div>';\n\n        // Advanced modifiers (comparators)\n        $need_comp = $rule['test'] != 'size' && $rule['test'] != 'spamtest' && $rule['test'] != 'duplicate';\n        $mout .= '<div id=\"rule_comp' . $id . '\" class=\"adv input-group\"' . (!$need_comp ? ' style=\"display:none\"' : '') . '>';\n        $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('comparator'))));\n        $mout .= $this->comparator_selector($rule['comparator'] ?? null, 'rule_comp', $id);\n        $mout .= '</div>';\n\n        // Advanced modifiers (mime)\n        if (in_array('mime', $this->exts)) {\n            $need_mime = !$rule || in_array($rule['test'], ['header', 'address', 'exists']);\n            $mime_type = '';\n            $select_mime = new html_select([\n                'name' => \"_rule_mime_type[{$id}]\",\n                'id' => 'rule_mime_type' . $id,\n                'style' => 'min-width:8em', 'onchange' => 'rule_mime_select(' . $id . ')',\n                'class' => 'custom-select',\n            ]);\n            $select_mime->add('-', '');\n\n            foreach (['contenttype', 'type', 'subtype', 'param'] as $val) {\n                if (isset($rule['mime-' . $val])) {\n                    $mime_type = $val;\n                }\n\n                $select_mime->add(rcube::Q($this->plugin->gettext('mime-' . $val)), $val);\n            }\n\n            $select_mime_part = new html_select([\n                'name' => \"_rule_mime_part[{$id}]\",\n                'id' => 'rule_mime_part' . $id,\n                'class' => 'custom-select',\n            ]);\n            $select_mime_part->add(rcube::Q($this->plugin->gettext('mime-message')), '');\n            $select_mime_part->add(rcube::Q($this->plugin->gettext('mime-anychild')), 'anychild');\n\n            $mout .= '<div id=\"rule_mime_part' . $id . '\" class=\"adv input-group\"' . (!$need_mime ? ' style=\"display:none\"' : '') . '>';\n            $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('mimepart'))));\n            $mout .= $select_mime_part->show(!empty($rule['mime-anychild']) ? 'anychild' : '');\n            $mout .= '</div>';\n            $mout .= '<div id=\"rule_mime' . $id . '\" class=\"adv input-group\"' . (!$need_mime ? ' style=\"display:none\"' : '') . '>';\n            $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('mime'))));\n            $mout .= $select_mime->show($mime_type);\n            $mout .= $this->list_input($id, 'rule_mime_param', $rule['mime-param'] ?? null,\n                30, $mime_type != 'param', ['class' => $this->error_class($id, 'test', 'mime_param', 'rule_mime_param')]\n            );\n            $mout .= '</div>';\n        }\n\n        // Advanced modifiers (body transformations)\n        $select_mod = new html_select([\n            'name' => \"_rule_trans[{$id}]\",\n            'id' => 'rule_trans_op' . $id,\n            'class' => 'custom-select',\n            'onchange' => 'rule_trans_select(' . $id . ')',\n        ]);\n        $select_mod->add(rcube::Q($this->plugin->gettext('text')), 'text');\n        $select_mod->add(rcube::Q($this->plugin->gettext('undecoded')), 'raw');\n        $select_mod->add(rcube::Q($this->plugin->gettext('contenttype')), 'content');\n\n        $rule_content = '';\n        if (isset($rule['content'])) {\n            $rule_content = is_array($rule['content']) ? implode(',', $rule['content']) : $rule['content'];\n        }\n\n        $mout .= '<div id=\"rule_trans' . $id . '\" class=\"adv input-group\"' . ($rule['test'] != 'body' ? ' style=\"display:none\"' : '') . '>';\n        $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('modifier'))));\n        $mout .= $select_mod->show($rule['part'] ?? null);\n        $mout .= html::tag('input', [\n            'type' => 'text',\n            'name' => \"_rule_trans_type[{$id}]\",\n            'id' => 'rule_trans_type' . $id,\n            'value' => $rule_content,\n            'size' => 20,\n            'style' => !isset($rule['part']) || $rule['part'] != 'content' ? 'display:none' : '',\n            'class' => $this->error_class($id, 'test', 'part', 'rule_trans_type'),\n        ]);\n        $mout .= '</div>';\n\n        // Date header\n        if (in_array('date', $this->exts)) {\n            $mout .= '<div id=\"rule_date_header_div' . $id . '\" class=\"adv input-group\"' . ($rule['test'] != 'date' ? ' style=\"display:none\"' : '') . '>';\n            $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('dateheader'))));\n            $mout .= html::tag('input', [\n                'type' => 'text',\n                'name' => \"_rule_date_header[{$id}]\",\n                'id' => 'rule_date_header' . $id,\n                'value' => $rule['test'] == 'date' ? $rule['header'] : '',\n                'size' => 15,\n                'class' => $this->error_class($id, 'test', 'dateheader', 'rule_date_header'),\n            ]);\n            $mout .= '</div>';\n        }\n\n        // Index\n        if (in_array('index', $this->exts)) {\n            $need_index = in_array($rule['test'], ['header', ', address', 'date']);\n            $mout .= '<div id=\"rule_index_div' . $id . '\" class=\"adv input-group\"' . (!$need_index ? ' style=\"display:none\"' : '') . '>';\n            $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('index'))));\n            $mout .= html::tag('input', [\n                'type' => 'text',\n                'name' => \"_rule_index[{$id}]\",\n                'id' => 'rule_index' . $id,\n                'value' => !empty($rule['index']) ? intval($rule['index']) : '',\n                'size' => 3,\n                'class' => $this->error_class($id, 'test', 'index', 'rule_index'),\n            ]);\n            $mout .= html::label('input-group-append',\n                html::tag('input', [\n                    'type' => 'checkbox',\n                    'name' => \"_rule_index_last[{$id}]\",\n                    'id' => 'rule_index_last' . $id,\n                    'value' => 1,\n                    'checked' => !empty($rule['last']),\n                ]) . rcube::Q($this->plugin->gettext('indexlast')));\n            $mout .= '</div>';\n        }\n\n        // Duplicate\n        if (in_array('duplicate', $this->exts)) {\n            $need_duplicate = $rule['test'] == 'duplicate';\n            $mout .= '<div id=\"rule_duplicate_div' . $id . '\" class=\"adv\"' . (!$need_duplicate ? ' style=\"display:none\"' : '') . '>';\n\n            foreach (['handle', 'header', 'uniqueid'] as $unit) {\n                $mout .= '<div class=\"input-group\">';\n                $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('duplicate.' . $unit))));\n                $mout .= html::tag('input', [\n                    'type' => 'text',\n                    'name' => '_rule_duplicate_' . $unit . \"[{$id}]\",\n                    'id' => 'rule_duplicate_' . $unit . $id,\n                    'value' => $rule[$unit] ?? '',\n                    'size' => 30,\n                    'class' => $this->error_class($id, 'test', 'duplicate_' . $unit, 'rule_duplicate_' . $unit),\n                ]);\n                $mout .= '</div>';\n            }\n\n            $mout .= '<div class=\"input-group\">';\n            $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('duplicate.seconds'))));\n            $mout .= html::tag('input', [\n                'type' => 'text',\n                'name' => \"_rule_duplicate_seconds[{$id}]\",\n                'id' => 'rule_duplicate_seconds' . $id,\n                'value' => $rule['seconds'] ?? '',\n                'size' => 6,\n                'class' => $this->error_class($id, 'test', 'duplicate_seconds', 'rule_duplicate_seconds'),\n            ]);\n            $mout .= html::label('input-group-append',\n                html::tag('input', [\n                    'type' => 'checkbox',\n                    'name' => \"_rule_duplicate_last[{$id}]\",\n                    'id' => 'rule_duplicate_last' . $id,\n                    'value' => 1,\n                    'checked' => !empty($rule['last']),\n                ]) . rcube::Q($this->plugin->gettext('duplicate.last')));\n            $mout .= '</div>';\n            $mout .= '</div>';\n        }\n\n        $add_title = rcube::Q($this->plugin->gettext('add'));\n        $del_title = rcube::Q($this->plugin->gettext('del'));\n        $adv_title = rcube::Q($this->plugin->gettext('advancedopts'));\n\n        // Build output table\n        $out = $div ? '<div class=\"rulerow\" id=\"rulerow' . $id . '\">' . \"\\n\" : '';\n        $out .= '<table class=\"compact-table\"><tr>';\n\n        if (!$compact) {\n            $out .= '<td class=\"advbutton\">';\n            $out .= sprintf('<a href=\"#\" id=\"ruleadv%s\" title=\"%s\" onclick=\"rule_adv_switch(%s, this); return false\" class=\"show\">'\n                . '<span class=\"inner\">%s</span></a>', $id, $adv_title, $id, $adv_title);\n            $out .= '</td>';\n        }\n\n        $out .= '<td class=\"rowactions\"><div class=\"flexbox\">' . $aout . '</div></td>';\n        $out .= '<td class=\"rowtargets\">' . $tout . \"\\n\";\n        $out .= '<div id=\"rule_advanced' . $id . '\" style=\"display:none\" class=\"advanced\">' . $mout . '</div>';\n        $out .= '</td>';\n        $out .= '<td class=\"rowbuttons\">';\n        if ($compact) {\n            $out .= sprintf('<a href=\"#\" id=\"ruleadv%s\" title=\"%s\" onclick=\"rule_adv_switch(%s, this); return false\" class=\"advanced show\">'\n                . '<span class=\"inner\">%s</span></a>', $id, $adv_title, $id, $adv_title);\n        }\n        $out .= sprintf('<a href=\"#\" id=\"ruleadd%s\" title=\"%s\" onclick=\"rcmail.managesieve_ruleadd(\\'%s\\'); return false\" class=\"button create add\">'\n            . '<span class=\"inner\">%s</span></a>', $id, $add_title, $id, $add_title);\n        $out .= sprintf('<a href=\"#\" id=\"ruledel%s\" title=\"%s\" onclick=\"rcmail.managesieve_ruledel(\\'%s\\'); return false\" class=\"button delete del%s\">'\n            . '<span class=\"inner\">%s</span></a>', $id, $del_title, $id, $rows_num < 2 ? ' disabled' : '', $del_title);\n        $out .= '</td>';\n\n        $out .= '</tr></table>';\n        $out .= $div ? \"</div>\\n\" : '';\n\n        return $out;\n    }\n\n    private static function rule_test(&$rule)\n    {\n        // first modify value/count tests with 'not' keyword\n        // we'll revert the meaning of operators\n        if (!empty($rule['not']) && !empty($rule['type'])\n            && preg_match('/^(count|value)-([gteqnl]{2})/', $rule['type'], $m)\n        ) {\n            $rule['not'] = false;\n\n            switch ($m[2]) {\n                case 'gt':\n                    $rule['type'] = $m[1] . '-le';\n                    break;\n                case 'ge':\n                    $rule['type'] = $m[1] . '-lt';\n                    break;\n                case 'lt':\n                    $rule['type'] = $m[1] . '-ge';\n                    break;\n                case 'le':\n                    $rule['type'] = $m[1] . '-gt';\n                    break;\n                case 'eq':\n                    $rule['type'] = $m[1] . '-ne';\n                    break;\n                case 'ne':\n                    $rule['type'] = $m[1] . '-eq';\n                    break;\n            }\n        } elseif (!empty($rule['not']) && !empty($rule['test']) && $rule['test'] == 'size') {\n            $rule['not'] = false;\n            $rule['type'] = $rule['type'] == 'over' ? 'under' : 'over';\n        }\n\n        $set = ['header', 'address', 'envelope', 'body', 'date', 'currentdate', 'string'];\n        $test = null;\n\n        // build test string supported by select element\n        if (!empty($rule['size'])) {\n            $test = $rule['type'];\n        } elseif (!empty($rule['test']) && in_array($rule['test'], $set)) {\n            $test = (!empty($rule['not']) ? 'not' : '') . ($rule['type'] ?: 'is');\n        } elseif (!empty($rule['test'])) {\n            $test = (!empty($rule['not']) ? 'not' : '') . $rule['test'];\n        }\n\n        return $test;\n    }\n\n    public function action_div($fid, $id, $div = true)\n    {\n        if (isset($id) && isset($this->form)) {\n            $action = $this->form['actions'][$id];\n        } elseif (isset($id) && isset($this->script[$fid]['actions'][$id])) {\n            $action = $this->script[$fid]['actions'][$id];\n        } else {\n            $action = ['type' => null];\n        }\n\n        if (isset($this->form['actions'])) {\n            $rows_num = count($this->form['actions']);\n        } elseif (isset($this->script[$fid]['actions'])) {\n            $rows_num = count($this->script[$fid]['actions']);\n        } else {\n            $rows_num = 0;\n        }\n\n        $out = $div ? '<div class=\"actionrow\" id=\"actionrow' . $id . '\">' . \"\\n\" : '';\n\n        $out .= '<table class=\"compact-table\"><tr><td class=\"rowactions\">';\n\n        // action select\n        $select_action = new html_select([\n            'name' => \"_action_type[{$id}]\",\n            'id' => 'action_type' . $id,\n            'class' => 'custom-select',\n            'onchange' => \"action_type_select({$id})\",\n        ]);\n        if (in_array('fileinto', $this->exts)) {\n            $select_action->add($this->plugin->gettext('messagemoveto'), 'fileinto');\n        }\n        if (in_array('fileinto', $this->exts) && in_array('copy', $this->exts)) {\n            $select_action->add($this->plugin->gettext('messagecopyto'), 'fileinto_copy');\n        }\n        if ($action['type'] == 'redirect' || !in_array('redirect', $this->disabled_actions)) {\n            $select_action->add($this->plugin->gettext('messageredirect'), 'redirect');\n            if (in_array('copy', $this->exts)) {\n                $select_action->add($this->plugin->gettext('messagesendcopy'), 'redirect_copy');\n            }\n        }\n        if (in_array('reject', $this->exts)) {\n            $select_action->add($this->plugin->gettext('messagediscard'), 'reject');\n        } elseif (in_array('ereject', $this->exts)) {\n            $select_action->add($this->plugin->gettext('messagediscard'), 'ereject');\n        }\n        if (in_array('vacation', $this->exts)) {\n            $select_action->add($this->plugin->gettext('messagereply'), 'vacation');\n        }\n        $select_action->add($this->plugin->gettext('messagedelete'), 'discard');\n        if (in_array('imapflags', $this->exts) || in_array('imap4flags', $this->exts)) {\n            $select_action->add($this->plugin->gettext('setflags'), 'setflag');\n            $select_action->add($this->plugin->gettext('addflags'), 'addflag');\n            $select_action->add($this->plugin->gettext('removeflags'), 'removeflag');\n        }\n        if (in_array('editheader', $this->exts)) {\n            $select_action->add($this->plugin->gettext('addheader'), 'addheader');\n            $select_action->add($this->plugin->gettext('deleteheader'), 'deleteheader');\n        }\n        if (in_array('variables', $this->exts)) {\n            $select_action->add($this->plugin->gettext('setvariable'), 'set');\n        }\n        if (in_array('enotify', $this->exts) || in_array('notify', $this->exts)) {\n            $select_action->add($this->plugin->gettext('notify'), 'notify');\n        }\n        $select_action->add($this->plugin->gettext('messagekeep'), 'keep');\n        $select_action->add($this->plugin->gettext('rulestop'), 'stop');\n\n        $select_type = $action['type'];\n        if (in_array($action['type'], ['fileinto', 'redirect']) && !empty($action['copy'])) {\n            $select_type .= '_copy';\n        }\n\n        $out .= $select_action->show($select_type);\n        $out .= '</td>';\n\n        // actions target inputs\n        $out .= '<td class=\"rowtargets\">';\n\n        // force domain selection in redirect email input\n        $domains = (array) $this->rc->config->get('managesieve_domains');\n\n        if (!empty($domains)) {\n            sort($domains);\n\n            $domain_select = new html_select([\n                'name' => \"_action_target_domain[{$id}]\",\n                'id' => 'action_target_domain' . $id,\n                'class' => 'custom-select',\n            ]);\n\n            $domain_select->add(array_combine($domains, $domains));\n\n            if ($action['type'] == 'redirect') {\n                $parts = explode('@', $action['target']);\n                if (count($parts) > 1) {\n                    $action['domain'] = array_pop($parts);\n                    $action['target'] = implode('@', $parts);\n                }\n            }\n        }\n\n        // redirect target\n        $out .= '<span id=\"redirect_target' . $id . '\" class=\"input-group\" style=\"white-space:nowrap;'\n            . ' display:' . ($action['type'] == 'redirect' ? '' : 'none') . '\">'\n            . html::tag('input', [\n                'type' => 'text',\n                'name' => \"_action_target[{$id}]\",\n                'id' => 'action_target' . $id,\n                'value' => $action['type'] == 'redirect' ? $action['target'] : '',\n                'size' => !empty($domains) ? 20 : 35,\n                'class' => $this->error_class($id, 'action', 'target', 'action_target'),\n            ]);\n        $out .= isset($domain_select) ? '<span class=\"input-group-append input-group-prepend\">'\n            . ' <span class=\"input-group-text\">@</span> </span>'\n            . $domain_select->show(!empty($action['domain']) ? $action['domain'] : '') : '';\n        $out .= '</span>';\n\n        // (e)reject target\n        $out .= html::tag('textarea', [\n                'name' => '_action_target_area[' . $id . ']',\n                'id' => 'action_target_area' . $id,\n                'rows' => 3,\n                'cols' => 35,\n                'class' => $this->error_class($id, 'action', 'targetarea', 'action_target_area'),\n                'style' => 'display:' . (in_array($action['type'], ['reject', 'ereject']) ? 'inline' : 'none'),\n            ],\n            in_array($action['type'], ['reject', 'ereject']) ? rcube::Q($action['target'], 'strict', false) : ''\n        );\n\n        // vacation\n        $vsec = in_array('vacation-seconds', $this->exts);\n        $auto_addr = $this->rc->config->get('managesieve_vacation_addresses_init');\n        $from_addr = $this->rc->config->get('managesieve_vacation_from_init');\n\n        if (empty($action)) {\n            if ($auto_addr) {\n                $action['addresses'] = $this->user_emails();\n            }\n            if ($from_addr) {\n                $default_identity = $this->rc->user->list_emails(true);\n                $action['from'] = format_email_recipient($default_identity['email'], $default_identity['name']);\n            }\n        } elseif (!empty($action['from'])) {\n            $from = rcube_mime::decode_address_list($action['from'], null, true, RCUBE_CHARSET);\n            foreach ((array) $from as $idx => $addr) {\n                $from[$idx] = format_email_recipient($addr['mailto'], $addr['name']);\n            }\n            if (!empty($from)) {\n                $action['from'] = implode(', ', $from);\n            }\n        }\n\n        $action_subject = '';\n        if (isset($action['subject'])) {\n            $action_subject = is_array($action['subject']) ? implode(', ', $action['subject']) : $action['subject'];\n        }\n\n        $out .= '<div id=\"action_vacation' . $id . '\" style=\"display:' . ($action['type'] == 'vacation' ? 'inline' : 'none') . '\" class=\"composite\">';\n        $out .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('vacationreason')) . '</span><br>';\n        $out .= html::tag('textarea', [\n            'name' => \"_action_reason[{$id}]\",\n            'id' => 'action_reason' . $id,\n            'rows' => 3,\n            'cols' => 35,\n            'class' => $this->error_class($id, 'action', 'reason', 'action_reason'),\n        ], rcube::Q($action['reason'] ?? '', 'strict', false));\n        $out .= '<br><span class=\"label\">' . rcube::Q($this->plugin->gettext('vacationsubject')) . '</span><br>';\n        $out .= html::tag('input', [\n            'type' => 'text',\n            'name' => \"_action_subject[{$id}]\",\n            'id' => 'action_subject' . $id,\n            'value' => $action_subject,\n            'size' => 35,\n            'class' => $this->error_class($id, 'action', 'subject', 'action_subject'),\n        ]);\n        $out .= '<br><span class=\"label\">' . rcube::Q($this->plugin->gettext('vacationfrom')) . '</span><br>';\n        $out .= html::tag('input', [\n            'type' => 'text',\n            'name' => \"_action_from[{$id}]\",\n            'id' => 'action_from' . $id,\n            'value' => $action['from'] ?? '',\n            'size' => 35,\n            'class' => $this->error_class($id, 'action', 'from', 'action_from'),\n        ]);\n        $out .= '<br><span class=\"label\">' . rcube::Q($this->plugin->gettext('vacationaddr')) . '</span><br>';\n        $out .= $this->list_input($id, 'action_addresses', $action['addresses'] ?? null,\n            30, false, ['class' => $this->error_class($id, 'action', 'addresses', 'action_addresses')]\n        )\n            . html::a(['href' => '#', 'onclick' => rcmail_output::JS_OBJECT_NAME . \".managesieve_vacation_addresses({$id})\"],\n                rcube::Q($this->plugin->gettext('filladdresses')));\n        $out .= '<br><span class=\"label\">' . rcube::Q($this->plugin->gettext('vacationinterval')) . '</span><br>';\n        $out .= '<div class=\"input-group\">' . html::tag('input', [\n            'type' => 'text',\n            'name' => \"_action_interval[{$id}]\",\n            'id' => 'action_interval' . $id,\n            'value' => rcube_sieve_vacation::vacation_interval($action, $this->exts),\n            'size' => 2,\n            'class' => $this->error_class($id, 'action', 'interval', 'action_interval'),\n        ]);\n        if ($vsec) {\n            $interval_select = new html_select([\n                'name' => \"_action_interval_type[{$id}]\",\n                'class' => 'input-group-append custom-select',\n            ]);\n            $interval_select->add($this->plugin->gettext('days'), 'days');\n            $interval_select->add($this->plugin->gettext('seconds'), 'seconds');\n            $out .= $interval_select->show(isset($action['seconds']) ? 'seconds' : 'days');\n        } else {\n            $out .= \"\\n\" . html::span('input-group-append', html::span('input-group-text', $this->plugin->gettext('days')));\n        }\n        $out .= '</div></div>';\n\n        // flags\n        $flags = [\n            'read' => '\\Seen',\n            'answered' => '\\Answered',\n            'flagged' => '\\Flagged',\n            'deleted' => '\\Deleted',\n            'draft' => '\\Draft',\n        ];\n\n        $flags_target = isset($action['target']) ? (array) $action['target'] : [];\n        $custom_flags = [];\n        $is_flag_action = preg_match('/^(set|add|remove)flag$/', (string) $action['type']);\n\n        if ($is_flag_action) {\n            $custom_flags = array_filter($flags_target, static function ($v) use ($flags) {\n                return !in_array_nocase($v, $flags);\n            });\n        }\n\n        $flout = '';\n\n        foreach ($flags as $fidx => $flag) {\n            $flout .= html::label(null, html::tag('input', [\n                    'type' => 'checkbox',\n                    'name' => \"_action_flags[{$id}][]\",\n                    'value' => $flag,\n                    'checked' => $is_flag_action && in_array_nocase($flag, $flags_target),\n                ])\n                . rcube::Q($this->plugin->gettext('flag' . $fidx))) . '<br>';\n        }\n\n        $flout .= $this->list_input($id, 'action_flags', $custom_flags, null, false, [\n            'class' => $this->error_class($id, 'action', 'flag', 'action_flags_flag'),\n            'id' => \"action_flags_flag{$id}\",\n        ]);\n\n        $out .= html::div([\n            'id' => 'action_flags' . $id,\n            'style' => 'display:' . ($is_flag_action ? 'inline' : 'none'),\n            'class' => trim('checklist ' . $this->error_class($id, 'action', 'flags', 'action_flags')),\n        ], $flout);\n\n        // set variable\n        $set_modifiers = [\n            'lower',\n            'upper',\n            'lowerfirst',\n            'upperfirst',\n            'quotewildcard',\n            'length',\n        ];\n\n        if (in_array('enotify', $this->exts)) {\n            $set_modifiers[] = 'encodeurl';\n        }\n\n        $out .= '<div id=\"action_set' . $id . '\" class=\"composite\" style=\"display:' . ($action['type'] == 'set' ? 'inline' : 'none') . '\">';\n        foreach (['name', 'value'] as $unit) {\n            $out .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('setvar' . $unit)) . '</span><br>';\n            $out .= html::tag('input', [\n                'type' => 'text',\n                'name' => '_action_var' . $unit . '[' . $id . ']',\n                'id' => 'action_var' . $unit . $id,\n                'value' => isset($action[$unit]) && !is_array($action[$unit]) ? $action[$unit] : '',\n                'size' => 35,\n                'class' => $this->error_class($id, 'action', $unit, 'action_var' . $unit),\n            ]);\n            $out .= '<br>';\n        }\n\n        $smout = '';\n        foreach ($set_modifiers as $s_m) {\n            $smout .= html::label(null,\n                html::tag('input', [\n                    'type' => 'checkbox',\n                    'name' => \"_action_varmods[{$id}][]\",\n                    'value' => $s_m,\n                    'checked' => array_key_exists($s_m, (array) $action) && !empty($action[$s_m]),\n                ])\n                . rcube::Q($this->plugin->gettext('var' . $s_m))\n            );\n        }\n\n        $out .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('setvarmodifiers')) . '</span>';\n        $out .= html::div('checklist', $smout);\n        $out .= '</div>';\n\n        // notify\n        $notify_methods = (array) $this->rc->config->get('managesieve_notify_methods');\n        $importance_options = $this->notify_importance_options;\n\n        if (empty($notify_methods)) {\n            $notify_methods = $this->notify_methods;\n        }\n\n        $method = $target = '';\n\n        if (!empty($action['method'])) {\n            [$method, $target] = explode(':', $action['method'], 2);\n            $method = strtolower($method);\n        }\n\n        if ($method && !in_array($method, $notify_methods)) {\n            $notify_methods[] = $method;\n        }\n\n        $select_method = new html_select([\n            'name' => \"_action_notifymethod[{$id}]\",\n            'id' => \"_action_notifymethod{$id}\",\n            'class' => 'input-group-prepend custom-select ' . $this->error_class($id, 'action', 'method', 'action_notifymethod'),\n        ]);\n\n        foreach ($notify_methods as $m_n) {\n            $select_method->add(rcube::Q($this->rc->text_exists('managesieve.notifymethod' . $m_n) ? $this->plugin->gettext('managesieve.notifymethod' . $m_n) : $m_n), $m_n);\n        }\n\n        $select_importance = new html_select([\n            'name' => \"_action_notifyimportance[{$id}]\",\n            'id' => \"_action_notifyimportance{$id}\",\n            'class' => 'custom-select ' . $this->error_class($id, 'action', 'importance', 'action_notifyimportance'),\n        ]);\n\n        foreach ($importance_options as $io_v => $io_n) {\n            $select_importance->add(rcube::Q($this->plugin->gettext($io_n)), $io_v);\n        }\n\n        // @TODO: nice UI for mailto: (other methods too) URI parameters\n        $out .= '<div id=\"action_notify' . $id . '\" style=\"display:' . ($action['type'] == 'notify' ? 'inline' : 'none') . '\" class=\"composite\">';\n        $out .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('notifytarget')) . '</span><br>';\n        $out .= '<div class=\"input-group\">';\n        $out .= $select_method->show($method);\n        $out .= html::tag('input', [\n            'type' => 'text',\n            'name' => \"_action_notifytarget[{$id}]\",\n            'id' => 'action_notifytarget' . $id,\n            'value' => $target,\n            'size' => 25,\n            'class' => $this->error_class($id, 'action', 'target', 'action_notifytarget'),\n        ]);\n        $out .= '</div>';\n        $out .= '<br><span class=\"label\">' . rcube::Q($this->plugin->gettext('notifymessage')) . '</span><br>';\n        $out .= html::tag('textarea', [\n                'name' => \"_action_notifymessage[{$id}]\",\n                'id' => 'action_notifymessage' . $id,\n                'rows' => 3,\n                'cols' => 35,\n                'class' => $this->error_class($id, 'action', 'message', 'action_notifymessage'),\n            ], isset($action['message']) ? rcube::Q($action['message'], 'strict', false) : ''\n        );\n        if (in_array('enotify', $this->exts)) {\n            $out .= '<br><span class=\"label\">' . rcube::Q($this->plugin->gettext('notifyfrom')) . '</span><br>';\n            $out .= html::tag('input', [\n                'type' => 'text',\n                'name' => \"_action_notifyfrom[{$id}]\",\n                'id' => 'action_notifyfrom' . $id,\n                'value' => $action['from'] ?? '',\n                'size' => 35,\n                'class' => $this->error_class($id, 'action', 'from', 'action_notifyfrom'),\n            ]);\n        }\n        $out .= '<br><span class=\"label\">' . rcube::Q($this->plugin->gettext('notifyimportance')) . '</span><br>';\n        $out .= $select_importance->show(!empty($action['importance']) ? (int) $action['importance'] : 2);\n        $out .= '<div id=\"action_notifyoption_div' . $id . '\">'\n            . '<span class=\"label\">' . rcube::Q($this->plugin->gettext('notifyoptions')) . '</span><br>'\n            . $this->list_input($id, 'action_notifyoption', !empty($action['options']) ? (array) $action['options'] : [],\n                30, false, ['class' => $this->error_class($id, 'action', 'options', 'action_notifyoption')]\n            ) . '</div>';\n        $out .= '</div>';\n\n        if (in_array('editheader', $this->exts)) {\n            $action['pos'] = !empty($action['last']) ? 'last' : '';\n            $pos1_selector = new html_select([\n                'name' => \"_action_addheader_pos[{$id}]\",\n                'id' => \"action_addheader_pos{$id}\",\n                'class' => 'custom-select ' . $this->error_class($id, 'action', 'pos', 'action_addheader_pos'),\n            ]);\n            $pos1_selector->add($this->plugin->gettext('headeratstart'), '');\n            $pos1_selector->add($this->plugin->gettext('headeratend'), 'last');\n            $pos2_selector = new html_select([\n                'name' => \"_action_delheader_pos[{$id}]\",\n                'id' => \"action_delheader_pos{$id}\",\n                'class' => 'custom-select ' . $this->error_class($id, 'action', 'pos', 'action_delheader_pos'),\n            ]);\n            $pos2_selector->add($this->plugin->gettext('headerfromstart'), '');\n            $pos2_selector->add($this->plugin->gettext('headerfromend'), 'last');\n\n            // addheader\n            $out .= '<div id=\"action_addheader' . $id . '\" style=\"display:' . ($action['type'] == 'addheader' ? 'inline' : 'none') . '\" class=\"composite\">';\n            $out .= '<label class=\"label\" for=\"action_addheader_name' . $id . '\">' . rcube::Q($this->plugin->gettext('headername')) . '</label><br>';\n            $out .= html::tag('input', [\n                'type' => 'text',\n                'name' => \"_action_addheader_name[{$id}]\",\n                'id' => \"action_addheader_name{$id}\",\n                'value' => $action['name'] ?? '',\n                'size' => 35,\n                'class' => $this->error_class($id, 'action', 'name', 'action_addheader_name'),\n            ]);\n            $out .= '<br><label class=\"label\" for=\"action_addheader_value' . $id . '\">' . rcube::Q($this->plugin->gettext('headervalue')) . '</label><br>';\n            $out .= html::tag('input', [\n                'type' => 'text',\n                'name' => \"_action_addheader_value[{$id}]\",\n                'id' => \"action_addheader_value{$id}\",\n                'value' => $action['type'] == 'addheader' ? ($action['value'] ?? '') : '',\n                'size' => 35,\n                'class' => $this->error_class($id, 'action', 'value', 'action_addheader_value'),\n            ]);\n            $out .= '<br><label class=\"label\" for=\"action_addheader_pos' . $id . '\">' . rcube::Q($this->plugin->gettext('headerpos')) . '</label><br>';\n            $out .= $pos1_selector->show($action['pos']);\n            $out .= '</div>';\n\n            // deleteheader\n            $out .= '<div id=\"action_deleteheader' . $id . '\" style=\"display:' . ($action['type'] == 'deleteheader' ? 'inline' : 'none') . '\" class=\"composite\">';\n            $out .= '<label class=\"label\" for=\"action_delheader_name' . $id . '\">' . rcube::Q($this->plugin->gettext('headername')) . '</label><br>';\n            $out .= html::tag('input', [\n                'type' => 'text',\n                'name' => \"_action_delheader_name[{$id}]\",\n                'id' => \"action_delheader_name{$id}\",\n                'value' => $action['name'] ?? '',\n                'size' => 35,\n                'class' => $this->error_class($id, 'action', 'name', 'action_delheader_name'),\n            ]);\n            $out .= '<br><label class=\"label\" for=\"action_delheader_value' . $id . '\">' . rcube::Q($this->plugin->gettext('headerpatterns')) . '</label><br>';\n            $out .= $this->list_input($id, 'action_delheader_value', $action['value'] ?? null,\n                null, false, ['class' => $this->error_class($id, 'action', 'value', 'action_delheader_value')]) . \"\\n\";\n            $out .= '<br><div class=\"adv input-group\">';\n            $out .= html::span('label input-group-prepend', html::label([\n                'class' => 'input-group-text', 'for' => 'action_delheader_op' . $id,\n            ], rcube::Q($this->plugin->gettext('headermatchtype'))));\n            $out .= $this->match_type_selector('action_delheader_op', $id, $action['match-type'] ?? null, null, 'basic');\n            $out .= '</div>';\n            $out .= '<div class=\"adv input-group\">';\n            $out .= html::span('label input-group-prepend', html::label([\n                'class' => 'input-group-text', 'for' => 'action_delheader_comp_op' . $id,\n            ], rcube::Q($this->plugin->gettext('comparator'))));\n            $out .= $this->comparator_selector($action['comparator'] ?? null, 'action_delheader_comp', $id);\n            $out .= '</div>';\n            $out .= '<br><label class=\"label\" for=\"action_delheader_index' . $id . '\">' . rcube::Q($this->plugin->gettext('headeroccurrence')) . '</label><br>';\n            $out .= '<div class=\"input-group\">';\n            $out .= html::tag('input', [\n                'type' => 'text',\n                'name' => \"_action_delheader_index[{$id}]\",\n                'id' => \"action_delheader_index{$id}\",\n                'value' => !empty($action['index']) ? intval($action['index']) : '',\n                'size' => 5,\n                'class' => $this->error_class($id, 'action', 'index', 'action_delheader_index'),\n            ]);\n            $out .= ' ' . $pos2_selector->show($action['pos']);\n            $out .= '</div></div>';\n        }\n\n        // mailbox select\n        $additional = [];\n        if ($action['type'] == 'fileinto' && isset($action['target'])) {\n            // make sure non-existing (or unsubscribed) mailbox is listed (#1489956)\n            if ($mailbox = $this->mod_mailbox($action['target'], 'out')) {\n                $additional = [$mailbox];\n            }\n        } else {\n            $mailbox = '';\n        }\n\n        $select = rcmail_action::folder_selector([\n            'maxlength' => 100,\n            'name' => \"_action_mailbox[{$id}]\",\n            'id' => \"action_mailbox{$id}\",\n            'style' => 'display:' . (empty($action['type']) || $action['type'] == 'fileinto' ? 'inline' : 'none'),\n            'additional' => $additional,\n        ]);\n        $out .= $select->show($mailbox);\n        $out .= '</td>';\n\n        // add/del buttons\n        $add_label = rcube::Q($this->plugin->gettext('add'));\n        $del_label = rcube::Q($this->plugin->gettext('del'));\n        $out .= '<td class=\"rowbuttons\">';\n        $out .= sprintf('<a href=\"#\" id=\"actionadd%s\" title=\"%s\" onclick=\"rcmail.managesieve_actionadd(%s)\" class=\"button create add\">'\n            . '<span class=\"inner\">%s</span></a>', $id, $add_label, $id, $add_label);\n        $out .= sprintf('<a href=\"#\" id=\"actiondel%s\" title=\"%s\" onclick=\"rcmail.managesieve_actiondel(%s)\" class=\"button delete del%s\">'\n            . '<span class=\"inner\">%s</span></a>', $id, $del_label, $id, $rows_num < 2 ? ' disabled' : '', $del_label);\n        $out .= '</td>';\n\n        $out .= '</tr></table>';\n\n        $out .= $div ? \"</div>\\n\" : '';\n\n        return $out;\n    }\n\n    /**\n     * Generates a numeric identifier for a filter\n     */\n    protected function genid()\n    {\n        return preg_replace('/[^0-9]/', '', microtime(true));\n    }\n\n    /**\n     * Trims and makes safe an input value\n     *\n     * @param string|array $str        Input value\n     * @param bool         $allow_html Allow HTML tags in the value\n     * @param bool         $trim       Trim the value\n     *\n     * @return string|array\n     */\n    protected function strip_value($str, $allow_html = false, $trim = true)\n    {\n        if (is_array($str)) {\n            foreach ($str as $idx => $val) {\n                $str[$idx] = $this->strip_value($val, $allow_html, $trim);\n\n                if ($str[$idx] === '') {\n                    unset($str[$idx]);\n                }\n            }\n\n            return $str;\n        }\n\n        $str = (string) $str;\n\n        if (!$allow_html) {\n            $str = strip_tags($str);\n        }\n\n        return $trim ? trim($str) : $str;\n    }\n\n    /**\n     * Returns error class, if there's a form error \"registered\"\n     */\n    protected function error_class($id, $type, $target, $elem_prefix = '')\n    {\n        // TODO: tooltips\n        if (\n            ($type == 'test' && !empty($this->errors['tests'][$id][$target]))\n            || ($type == 'action' && !empty($this->errors['actions'][$id][$target]))\n        ) {\n            $str = $this->errors[$type == 'test' ? 'tests' : 'actions'][$id][$target];\n            $this->add_tip($elem_prefix . $id, $str, true);\n\n            return 'error';\n        }\n\n        return '';\n    }\n\n    protected function add_tip($id, $str, $error = false)\n    {\n        $class = $error ? 'sieve error' : '';\n\n        $this->tips[] = [$id, $class, $str];\n    }\n\n    protected function print_tips()\n    {\n        if (empty($this->tips)) {\n            return;\n        }\n\n        $script = rcmail_output::JS_OBJECT_NAME . '.managesieve_tip_register(' . json_encode($this->tips) . ');';\n        $this->rc->output->add_script($script, 'docready');\n    }\n\n    protected function list_input($id, $name, $value, $size = null, $hidden = false, $attrib = [])\n    {\n        $value = (array) $value;\n        $value = array_map(['rcube', 'Q'], $value);\n        $value = implode(\"\\n\", $value);\n\n        $attrib = array_merge($attrib, [\n            'data-type' => 'list',\n            'data-size' => $size,\n            'data-hidden' => $hidden ?: null,\n            'name' => '_' . $name . '[' . $id . ']',\n            'style' => 'display:none',\n        ]);\n\n        if (empty($attrib['id'])) {\n            $attrib['id'] = $name . $id;\n        }\n\n        return html::tag('textarea', $attrib, $value);\n    }\n\n    /**\n     * Validate input for date part elements\n     */\n    protected function validate_date_part($type, $value)\n    {\n        // we do simple validation of date/part format\n        switch ($type) {\n            case 'date': // yyyy-mm-dd\n                return preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $value);\n            case 'iso8601':\n                return preg_match('/^[0-9: .,ZWT+-]+$/', $value);\n            case 'std11':\n                return preg_match('/^((Sun|Mon|Tue|Wed|Thu|Fri|Sat),\\s+)?[0-9]{1,2}\\s+'\n                    . '(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+[0-9]{2,4}\\s+'\n                    . '[0-9]{2}:[0-9]{2}(:[0-9]{2})?\\s+([+-]*[0-9]{4}|[A-Z]{1,3})$/', $value);\n            case 'julian':\n                return preg_match('/^[0-9]+$/', $value);\n            case 'time': // hh:mm:ss\n                return preg_match('/^[0-9]{2}:[0-9]{2}:[0-9]{2}$/', $value);\n            case 'year':\n                return preg_match('/^[0-9]{4}$/', $value);\n            case 'month':\n                return preg_match('/^[0-9]{2}$/', $value) && $value > 0 && $value < 13;\n            case 'day':\n                return preg_match('/^[0-9]{2}$/', $value) && $value > 0 && $value < 32;\n            case 'hour':\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 24;\n            case 'minute':\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 60;\n            case 'second':\n                // According to RFC5260, seconds can be from 00 to 60\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 61;\n            case 'weekday':\n                return preg_match('/^[0-9]$/', $value) && $value < 7;\n            case 'zone':\n                return preg_match('/^[+-][0-9]{4}$/', $value);\n        }\n    }\n\n    /**\n     * Converts mailbox name from/to UTF7-IMAP from/to internal Sieve encoding\n     * with delimiter replacement.\n     *\n     * @param string $mailbox Mailbox name\n     * @param string $mode    Conversion direction ('in'|'out')\n     *\n     * @return string Mailbox name\n     */\n    protected function mod_mailbox($mailbox, $mode = 'out')\n    {\n        $delimiter = $_SESSION['imap_delimiter'];\n        $replace_delimiter = $this->rc->config->get('managesieve_replace_delimiter');\n        $mbox_encoding = $this->rc->config->get('managesieve_mbox_encoding', 'UTF7-IMAP');\n\n        if ($mode == 'out') {\n            $mailbox = rcube_charset::convert($mailbox, $mbox_encoding, 'UTF7-IMAP');\n            if ($replace_delimiter && $replace_delimiter != $delimiter) {\n                $mailbox = str_replace($replace_delimiter, $delimiter, $mailbox);\n            }\n        } else {\n            $mailbox = rcube_charset::convert($mailbox, 'UTF7-IMAP', $mbox_encoding);\n            if ($replace_delimiter && $replace_delimiter != $delimiter) {\n                $mailbox = str_replace($delimiter, $replace_delimiter, $mailbox);\n            }\n        }\n\n        return $mailbox;\n    }\n\n    /**\n     * List sieve scripts\n     *\n     * @return array|false Scripts list\n     */\n    public function list_scripts()\n    {\n        if ($this->list !== null) {\n            return $this->list;\n        }\n\n        $this->list = $this->sieve->get_scripts();\n\n        // Handle active script(s) and list of scripts according to Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            // Skip protected names\n            foreach ((array) $this->list as $idx => $name) {\n                $_name = strtoupper($name);\n                if ($_name == 'MASTER') {\n                    $master_script = $name;\n                } elseif ($_name == 'MANAGEMENT') {\n                    $management_script = $name;\n                } elseif ($_name == 'USER') {\n                    $user_script = $name;\n                } else {\n                    continue;\n                }\n\n                unset($this->list[$idx]);\n            }\n\n            // get active script(s), read USER script\n            if (!empty($user_script)) {\n                $extension = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n                $filename_regex = '/' . preg_quote($extension, '/') . '$/';\n                $_SESSION['managesieve_user_script'] = $user_script;\n\n                $this->sieve->load($user_script);\n\n                if (!empty($this->sieve->script)) {\n                    foreach ($this->sieve->script->as_array() as $rules) {\n                        foreach ($rules['actions'] as $action) {\n                            if ($action['type'] == 'include' && empty($action['global'])) {\n                                $name = preg_replace($filename_regex, '', $action['target']);\n                                // make sure the script exist\n                                if (in_array($name, $this->list)) {\n                                    $this->active[] = $name;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // create USER script if it doesn't exist\n            else {\n                $content = \"# USER Management Script\\n\"\n                    . \"#\\n\"\n                    . \"# This script includes the various active sieve scripts\\n\"\n                    . \"# it is AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY!\\n\"\n                    . \"#\\n\"\n                    . \"# For more information, see http://wiki.kolab.org/KEP:14#USER\\n\"\n                    . \"#\\n\";\n\n                if ($this->sieve->save_script('USER', $content)) {\n                    $_SESSION['managesieve_user_script'] = 'USER';\n                    if (empty($this->master_file)) {\n                        $this->sieve->activate('USER');\n                    }\n                }\n            }\n        } elseif (!empty($this->list)) {\n            // Get active script name\n            if ($active = $this->sieve->get_active()) {\n                $this->active = [$active];\n            }\n\n            // Hide scripts from config\n            $exceptions = $this->rc->config->get('managesieve_filename_exceptions');\n            if (!empty($exceptions)) {\n                $this->list = array_diff($this->list, (array) $exceptions);\n            }\n        }\n\n        // When no script listing allowed limit the list to the defined script\n        if (in_array('list_sets', $this->disabled_actions)) {\n            $script_name = $this->rc->config->get('managesieve_script_name', 'roundcube');\n            $this->list = array_intersect($this->list, [$script_name]);\n            $this->active = null;\n            if (in_array($script_name, $this->list)) {\n                // Because its the only allowed script make sure its active\n                $this->activate_script($script_name);\n            }\n        }\n\n        // reindex\n        if (!empty($this->list)) {\n            $this->list = array_values($this->list);\n        }\n\n        return $this->list;\n    }\n\n    /**\n     * Removes sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function remove_script($name)\n    {\n        if ($this->is_protected_script($name)) {\n            return false;\n        }\n\n        $result = $this->sieve->remove($name);\n\n        // Kolab's KEP:14\n        if ($result && $this->rc->config->get('managesieve_kolab_master')) {\n            $this->deactivate_script($name);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Activates sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function activate_script($name)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $extension = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n            $user_script = $_SESSION['managesieve_user_script'];\n            $result = false;\n\n            // if the script is not active...\n            if ($user_script && array_search($name, (array) $this->active) === false) {\n                // ...rewrite USER file adding appropriate include command\n                if ($this->sieve->load($user_script)) {\n                    $script = $this->sieve->script->as_array();\n                    $list = [];\n                    $regexp = '/' . preg_quote($extension, '/') . '$/';\n\n                    // Create new include entry\n                    $rule = [\n                        'actions' => [\n                            [\n                                'target' => $name . $extension,\n                                'type' => 'include',\n                                'personal' => true,\n                            ],\n                        ],\n                    ];\n\n                    // get all active scripts for sorting\n                    foreach ($script as $rid => $rules) {\n                        foreach ($rules['actions'] as $action) {\n                            if ($action['type'] == 'include' && empty($action['global'])) {\n                                $target = $extension ? preg_replace($regexp, '', $action['target']) : $action['target'];\n                                $list[] = $target;\n                            }\n                        }\n                    }\n                    $list[] = $name;\n\n                    // Sort and find current script position\n                    asort($list, \\SORT_LOCALE_STRING);\n                    $list = array_values($list);\n                    $index = array_search($name, $list);\n\n                    // add rule at the end of the script\n                    if ($index === false || $index == count($list) - 1) {\n                        $this->sieve->script->add_rule($rule);\n                    }\n                    // add rule at index position\n                    else {\n                        $script2 = [];\n                        foreach ($script as $rid => $rules) {\n                            if ($rid == $index) {\n                                $script2[] = $rule;\n                            }\n                            $script2[] = $rules;\n                        }\n                        $this->sieve->script->content = $script2;\n                    }\n\n                    $result = $this->sieve->save();\n                    if ($result) {\n                        $this->active[] = $name;\n                    }\n                }\n            }\n        } else {\n            $result = $this->sieve->activate($name);\n            if ($result) {\n                $this->active = [$name];\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Deactivates sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function deactivate_script($name)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $extension = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n            $user_script = $_SESSION['managesieve_user_script'];\n            $result = false;\n\n            // if the script is active...\n            if ($user_script && ($key = array_search($name, $this->active)) !== false) {\n                // ...rewrite USER file removing appropriate include command\n                if ($this->sieve->load($user_script)) {\n                    $script = $this->sieve->script->as_array();\n                    $name .= $extension;\n                    $rid = 0;\n\n                    foreach ($script as $rules) {\n                        foreach ($rules['actions'] as $action) {\n                            if ($action['type'] == 'include' && empty($action['global'])\n                                && $action['target'] == $name\n                            ) {\n                                break 2;\n                            }\n                        }\n                        $rid++;\n                    }\n\n                    // Entry found\n                    if ($rid < count($script)) {\n                        $this->sieve->script->delete_rule($rid);\n                        $result = $this->sieve->save();\n                        if ($result) {\n                            unset($this->active[$key]);\n                        }\n                    }\n                }\n            }\n        } else {\n            $result = $this->sieve->deactivate();\n            if ($result) {\n                $this->active = [];\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Saves current script (adding some variables)\n     */\n    public function save_script($name = null)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $this->sieve->script->set_var('EDITOR', self::PROGNAME);\n            $this->sieve->script->set_var('EDITOR_VERSION', self::VERSION);\n        }\n\n        return $this->sieve->save($name);\n    }\n\n    /**\n     * Check if the script is protected\n     */\n    protected function is_protected_script($name)\n    {\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            if (in_array(strtoupper($name), ['MASTER', 'MANAGEMENT', 'USER'])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns list of rules from the current script\n     *\n     * @return array List of rules\n     */\n    public function list_rules()\n    {\n        $result = [];\n        $i = 1;\n\n        foreach ($this->script as $idx => $filter) {\n            if (empty($filter['actions'])) {\n                continue;\n            }\n            $fname = !empty($filter['name']) ? $filter['name'] : \"#{$i}\";\n            $result[] = [\n                'id' => $idx,\n                'name' => $fname,\n                'class' => !empty($filter['disabled']) ? 'disabled' : '',\n            ];\n            $i++;\n        }\n\n        return $result;\n    }\n\n    /**\n     * Initializes internal script data\n     */\n    protected function init_script()\n    {\n        if (!$this->sieve->script) {\n            return;\n        }\n\n        $this->script = $this->sieve->script->as_array();\n\n        $headers = [];\n        $exceptions = ['date', 'currentdate', 'size', 'spamtest', 'body'];\n\n        // find common headers used in script, will be added to the list\n        // of available (predefined) headers (#1489271)\n        foreach ($this->script as $rule) {\n            foreach ((array) ($rule['tests'] ?? []) as $test) {\n                if ($test['test'] == 'header') {\n                    foreach ((array) $test['arg1'] as $header) {\n                        $lc_header = strtolower($header);\n\n                        // skip special names to not confuse UI\n                        if (in_array($lc_header, $exceptions)) {\n                            continue;\n                        }\n\n                        if (!isset($this->headers[$lc_header]) && !isset($headers[$lc_header])) {\n                            $headers[$lc_header] = $header;\n                        }\n                    }\n                }\n            }\n        }\n\n        ksort($headers);\n\n        $this->headers += $headers;\n    }\n\n    /**\n     * Get all e-mail addresses of the user\n     */\n    protected function user_emails()\n    {\n        $addresses = $this->rc->user->list_emails();\n\n        foreach ($addresses as $idx => $email) {\n            $addresses[$idx] = $email['email'];\n        }\n\n        $addresses = array_unique($addresses);\n        sort($addresses);\n\n        return $addresses;\n    }\n\n    /**\n     * Convert configured default headers into internal format\n     */\n    protected function get_default_headers()\n    {\n        $default = ['Subject', 'From', 'To'];\n        $headers = (array) $this->rc->config->get('managesieve_default_headers', $default);\n\n        if (empty($headers) || $headers === ['']) {\n            $headers = $default;\n        }\n\n        $keys = array_map('strtolower', $headers);\n        $headers = array_combine($keys, $headers);\n\n        // make sure there's no Date header\n        unset($headers['date']);\n\n        return $headers;\n    }\n\n    /**\n     * Match type selector\n     */\n    protected function match_type_selector($name, $id, $test, $rule = null, $mode = 'all')\n    {\n        // matching type select (operator)\n        $select_op = new html_select([\n            'name' => \"_{$name}[{$id}]\",\n            'id' => \"{$name}{$id}\",\n            'style' => 'display:' . (!in_array($rule, ['size', 'duplicate', 'spamtest']) ? 'inline' : 'none'),\n            'class' => 'operator_selector col-6 custom-select',\n            'onchange' => \"{$name}_select(this, '{$id}')\",\n        ]);\n\n        $select_op->add(rcube::Q($this->plugin->gettext('filtercontains')), 'contains');\n        if ($mode == 'all') {\n            $select_op->add(rcube::Q($this->plugin->gettext('filternotcontains')), 'notcontains');\n        }\n        $select_op->add(rcube::Q($this->plugin->gettext('filteris')), 'is');\n        if ($mode == 'all') {\n            $select_op->add(rcube::Q($this->plugin->gettext('filterisnot')), 'notis');\n            $select_op->add(rcube::Q($this->plugin->gettext('filterexists')), 'exists');\n            $select_op->add(rcube::Q($this->plugin->gettext('filternotexists')), 'notexists');\n        }\n        $select_op->add(rcube::Q($this->plugin->gettext('filtermatches')), 'matches');\n        if ($mode == 'all') {\n            $select_op->add(rcube::Q($this->plugin->gettext('filternotmatches')), 'notmatches');\n        }\n        if (in_array('regex', $this->exts)) {\n            $select_op->add(rcube::Q($this->plugin->gettext('filterregex')), 'regex');\n            if ($mode == 'all') {\n                $select_op->add(rcube::Q($this->plugin->gettext('filternotregex')), 'notregex');\n            }\n        }\n        if ($mode == 'all' && in_array('relational', $this->exts)) {\n            $select_op->add(rcube::Q($this->plugin->gettext('countisgreaterthan')), 'count-gt');\n            $select_op->add(rcube::Q($this->plugin->gettext('countisgreaterthanequal')), 'count-ge');\n            $select_op->add(rcube::Q($this->plugin->gettext('countislessthan')), 'count-lt');\n            $select_op->add(rcube::Q($this->plugin->gettext('countislessthanequal')), 'count-le');\n            $select_op->add(rcube::Q($this->plugin->gettext('countequals')), 'count-eq');\n            $select_op->add(rcube::Q($this->plugin->gettext('countnotequals')), 'count-ne');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueisgreaterthan')), 'value-gt');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueisgreaterthanequal')), 'value-ge');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueislessthan')), 'value-lt');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueislessthanequal')), 'value-le');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueequals')), 'value-eq');\n            $select_op->add(rcube::Q($this->plugin->gettext('valuenotequals')), 'value-ne');\n        }\n\n        return $select_op->show($test);\n    }\n\n    protected function comparator_selector($comparator, $name, $id)\n    {\n        $select_comp = new html_select([\n            'name' => \"_{$name}[{$id}]\",\n            'id' => \"{$name}_op{$id}\",\n            'class' => 'custom-select',\n        ]);\n        $select_comp->add(rcube::Q($this->plugin->gettext('default')), '');\n        $select_comp->add(rcube::Q($this->plugin->gettext('octet')), 'i;octet');\n        $select_comp->add(rcube::Q($this->plugin->gettext('asciicasemap')), 'i;ascii-casemap');\n        if (in_array('comparator-i;ascii-numeric', $this->exts)) {\n            $select_comp->add(rcube::Q($this->plugin->gettext('asciinumeric')), 'i;ascii-numeric');\n        }\n\n        return $select_comp->show($comparator);\n    }\n\n    /**\n     * Merge a rule into the script\n     */\n    protected function merge_rule($rule, $existing, &$script_name = null)\n    {\n        // if script does not exist create a new one\n        if ($script_name === null || $script_name === false) {\n            $script_name = $this->create_default_script();\n            $this->sieve->load($script_name);\n            $this->init_script();\n        }\n\n        if (!$this->sieve->script) {\n            return false;\n        }\n\n        $script_active = in_array($script_name, $this->active);\n        $rule_active = empty($rule['disabled']);\n        $rule_index = 0;\n        $activate_script = false;\n\n        // If the script is not active, but the rule is,\n        // put the rule in an active script if there is one\n        if (!$script_active && $rule_active && !empty($this->active)) {\n            // Remove the rule from current (inactive) script\n            if (isset($existing['idx'])) {\n                unset($this->script[$existing['idx']]);\n                $this->sieve->script->content = $this->script;\n                $this->save_script($script_name);\n            }\n\n            // Load and init the active script, add the rule there\n            $this->sieve->load($script_name = $this->active[0]);\n            $this->init_script();\n            array_unshift($this->script, $rule);\n        }\n        // update original forward rule/script\n        else {\n            // re-order rules if needed\n            if (isset($rule['after']) && $rule['after'] !== '') {\n                // unset the original rule\n                if (isset($existing['idx'])) {\n                    $this->script[$existing['idx']] = null;\n                }\n\n                // add at target position\n                if ($rule['after'] >= count($this->script) - 1) {\n                    $this->script[] = $rule;\n                    $this->script = array_values(array_filter($this->script));\n                    $rule_index = count($this->script);\n                } else {\n                    $script = [];\n\n                    foreach ($this->script as $idx => $r) {\n                        if ($r) {\n                            $script[] = $r;\n                        }\n\n                        if ($idx == $rule['after']) {\n                            $script[] = $rule;\n                            $rule_index = count($script);\n                        }\n                    }\n\n                    $this->script = $script;\n                }\n            }\n            // rule exists, update it \"in place\"\n            elseif (isset($existing['idx'])) {\n                $this->script[$existing['idx']] = $rule;\n                $rule_index = $existing['idx'];\n            }\n            // otherwise put the rule on top\n            else {\n                array_unshift($this->script, $rule);\n                $rule_index = 0;\n            }\n\n            // if the script is not active, but the rule is, we need to de-activate\n            // all rules except the forward rule\n            if (!$script_active && $rule_active) {\n                $activate_script = true;\n                foreach ($this->script as $idx => $r) {\n                    if ($idx !== $rule_index) {\n                        $this->script[$idx]['disabled'] = true;\n                    }\n                }\n            }\n        }\n\n        $this->sieve->script->content = $this->script;\n\n        // save the script\n        $saved = $this->save_script($script_name);\n\n        // activate the script\n        if ($saved && $activate_script) {\n            $this->activate_script($script_name);\n        }\n\n        return $saved;\n    }\n\n    /**\n     * Create default script\n     */\n    protected function create_default_script()\n    {\n        // if script not exists build default script contents\n        $script_file = $this->rc->config->get('managesieve_default');\n        $script_name = $this->rc->config->get('managesieve_script_name');\n        $kolab_master = $this->rc->config->get('managesieve_kolab_master');\n        $content = '';\n\n        if (empty($script_name)) {\n            $script_name = 'roundcube';\n        }\n\n        if ($script_file && !$kolab_master && is_readable($script_file) && !is_dir($script_file)) {\n            $content = file_get_contents($script_file);\n        }\n\n        // add script and set it active\n        if ($this->sieve->save_script($script_name, $content)) {\n            $this->activate_script($script_name);\n            $this->list[] = $script_name;\n        }\n\n        return $script_name;\n    }\n\n    /**\n     * Read email address input, parse it and check validity\n     */\n    protected function action_email_input($i, $field)\n    {\n        // According to RFC5230 the :from string must specify a valid [RFC2822] mailbox-list\n        // we'll try to extract addresses and validate them separately\n        $from = rcube_mime::decode_address_list($this->form['actions'][$i][$field], null, true, RCUBE_CHARSET);\n        foreach ($from as $idx => $addr) {\n            if (empty($addr['mailto']) || !rcube_utils::check_email($addr['mailto'])) {\n                $this->errors['actions'][$i][$field] = $this->plugin->gettext('noemailwarning');\n                break;\n            }\n\n            $from[$idx] = format_email_recipient($addr['mailto'], $addr['name']);\n        }\n\n        // Only one address is allowed (at least on cyrus imap)\n        if (count($from) > 1) {\n            $this->errors['actions'][$i][$field] = $this->plugin->gettext('noemailwarning');\n        }\n\n        // Then we convert it back to RFC2822 format\n        if (empty($this->errors['actions'][$i][$field]) && !empty($from)) {\n            $this->form['actions'][$i][$field] = Mail_mimePart::encodeHeader(\n                'From', implode(', ', $from), RCUBE_CHARSET, 'base64', '');\n\n            return true;\n        }\n\n        return false;\n    }\n}\n", "patch": "@@ -397,6 +397,8 @@ function actions()\n                 }\n             }\n             else if ($action == 'setget') {\n+                $this->rc->request_security_check(rcube_utils::INPUT_GET);\n+\n                 $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_GPC, true);\n                 $script      = $this->sieve->get_script($script_name);\n ", "file_path": "files/2016_8\\6", "file_language": "php", "file_name": "plugins/managesieve/lib/Roundcube/rcube_sieve_engine.php", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/4a408843b0ef816daf70a472a02b78cd6073a4d5/plugins/managesieve/managesieve.js", "code": "/**\n * (Manage)Sieve Filters plugin\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (c) 2012-2014, The Roundcube Dev Team\n *\n * The JavaScript code in this page is free software: you can redistribute it\n * and/or modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n */\n\nif (window.rcmail) {\n  rcmail.addEventListener('init', function(evt) {\n    // add managesieve-create command to message_commands array,\n    // so it's state will be updated on message selection/unselection\n    if (rcmail.env.task == 'mail') {\n      if (rcmail.env.action != 'show')\n        rcmail.env.message_commands.push('managesieve-create');\n      else\n        rcmail.enable_command('managesieve-create', true);\n    }\n\n    if (rcmail.env.task == 'mail' || rcmail.env.action.startsWith('plugin.managesieve')) {\n      // Create layer for form tips\n      if (!rcmail.env.framed) {\n        rcmail.env.ms_tip_layer = $('<div id=\"managesieve-tip\" class=\"popupmenu\"></div>');\n        rcmail.env.ms_tip_layer.appendTo(document.body);\n      }\n    }\n\n    // register commands\n    rcmail.register_command('plugin.managesieve-save', function() { rcmail.managesieve_save() });\n    rcmail.register_command('plugin.managesieve-act', function() { rcmail.managesieve_act() });\n    rcmail.register_command('plugin.managesieve-add', function() { rcmail.managesieve_add() });\n    rcmail.register_command('plugin.managesieve-del', function() { rcmail.managesieve_del() });\n    rcmail.register_command('plugin.managesieve-move', function() { rcmail.managesieve_move() });\n    rcmail.register_command('plugin.managesieve-setadd', function() { rcmail.managesieve_setadd() });\n    rcmail.register_command('plugin.managesieve-setdel', function() { rcmail.managesieve_setdel() });\n    rcmail.register_command('plugin.managesieve-setact', function() { rcmail.managesieve_setact() });\n    rcmail.register_command('plugin.managesieve-setget', function() { rcmail.managesieve_setget() });\n\n    if (rcmail.env.action.startsWith('plugin.managesieve')) {\n      if (rcmail.gui_objects.sieveform) {\n        rcmail.enable_command('plugin.managesieve-save', true);\n        sieve_form_init();\n      }\n      else {\n        rcmail.enable_command('plugin.managesieve-add', 'plugin.managesieve-setadd', !rcmail.env.sieveconnerror);\n      }\n\n      var setcnt, set = rcmail.env.currentset;\n\n      if (rcmail.gui_objects.filterslist) {\n        rcmail.filters_list = new rcube_list_widget(rcmail.gui_objects.filterslist,\n          {multiselect:false, draggable:true, keyboard:true});\n\n        rcmail.filters_list\n          .addEventListener('select', function(e) { rcmail.managesieve_select(e); })\n          .addEventListener('dragstart', function(e) { rcmail.managesieve_dragstart(e); })\n          .addEventListener('dragend', function(e) { rcmail.managesieve_dragend(e); })\n          .addEventListener('initrow', function(row) {\n            row.obj.onmouseover = function() { rcmail.managesieve_focus_filter(row); };\n            row.obj.onmouseout = function() { rcmail.managesieve_unfocus_filter(row); };\n          })\n          .init();\n      }\n\n      if (rcmail.gui_objects.filtersetslist) {\n        rcmail.filtersets_list = new rcube_list_widget(rcmail.gui_objects.filtersetslist,\n          {multiselect:false, draggable:false, keyboard:true});\n\n        rcmail.filtersets_list.init().focus();\n\n        if (set != null) {\n          set = rcmail.managesieve_setid(set);\n          rcmail.filtersets_list.select(set);\n        }\n\n        // attach select event after initial record was selected\n        rcmail.filtersets_list.addEventListener('select', function(e) { rcmail.managesieve_setselect(e); });\n\n        setcnt = rcmail.filtersets_list.rowcount;\n        rcmail.enable_command('plugin.managesieve-set', true);\n        rcmail.enable_command('plugin.managesieve-setact', 'plugin.managesieve-setget', setcnt);\n        rcmail.enable_command('plugin.managesieve-setdel', setcnt > 1);\n\n        // Fix dragging filters over sets list\n        $('tr', rcmail.gui_objects.filtersetslist).each(function (i, e) { rcmail.managesieve_fixdragend(e); });\n      }\n    }\n\n    if (rcmail.gui_objects.sieveform && rcmail.env.rule_disabled)\n      $('#disabled').attr('checked', true);\n  });\n};\n\n/*********************************************************/\n/*********       Managesieve UI methods          *********/\n/*********************************************************/\n\nrcube_webmail.prototype.managesieve_add = function()\n{\n  this.load_managesieveframe();\n  this.filters_list.clear_selection();\n};\n\nrcube_webmail.prototype.managesieve_del = function()\n{\n  var id = this.filters_list.get_single_selection();\n  if (confirm(this.get_label('managesieve.filterdeleteconfirm'))) {\n    var lock = this.set_busy(true, 'loading');\n    this.http_post('plugin.managesieve-action',\n      '_act=delete&_fid='+this.filters_list.rows[id].uid, lock);\n  }\n};\n\nrcube_webmail.prototype.managesieve_act = function()\n{\n  var id = this.filters_list.get_single_selection(),\n    lock = this.set_busy(true, 'loading');\n\n  this.http_post('plugin.managesieve-action',\n    '_act=act&_fid='+this.filters_list.rows[id].uid, lock);\n};\n\n// Filter selection\nrcube_webmail.prototype.managesieve_select = function(list)\n{\n  var id = list.get_single_selection();\n  if (id != null)\n    this.load_managesieveframe(list.rows[id].uid);\n};\n\n// Set selection\nrcube_webmail.prototype.managesieve_setselect = function(list)\n{\n  this.show_contentframe(false);\n  this.filters_list.clear(true);\n  this.enable_command('plugin.managesieve-setdel', list.rowcount > 1);\n  this.enable_command('plugin.managesieve-setact', 'plugin.managesieve-setget', true);\n\n  var id = list.get_single_selection();\n  if (id != null)\n    this.managesieve_list(this.env.filtersets[id]);\n};\n\nrcube_webmail.prototype.managesieve_rowid = function(id)\n{\n  var i, rows = this.filters_list.rows;\n\n  for (i in rows)\n    if (rows[i] != null && rows[i].uid == id)\n      return i;\n};\n\n// Returns set's identifier\nrcube_webmail.prototype.managesieve_setid = function(name)\n{\n  for (var i in this.env.filtersets)\n    if (this.env.filtersets[i] == name)\n      return i;\n};\n\n// Filters listing request\nrcube_webmail.prototype.managesieve_list = function(script)\n{\n  var lock = this.set_busy(true, 'loading');\n\n  this.http_post('plugin.managesieve-action', '_act=list&_set='+urlencode(script), lock);\n};\n\n// Script download request\nrcube_webmail.prototype.managesieve_setget = function()\n{\n  var id = this.filtersets_list.get_single_selection(),\n    script = this.env.filtersets[id];\n\n  this.goto_url('plugin.managesieve-action', {_act: 'setget', _set: script}, false, true);\n};\n\n// Set activate/deactivate request\nrcube_webmail.prototype.managesieve_setact = function()\n{\n  var id = this.filtersets_list.get_single_selection(),\n   lock = this.set_busy(true, 'loading'),\n    script = this.env.filtersets[id],\n    action = $('#rcmrow'+id).hasClass('disabled') ? 'setact' : 'deact';\n\n  this.http_post('plugin.managesieve-action', '_act='+action+'&_set='+urlencode(script), lock);\n};\n\n// Set delete request\nrcube_webmail.prototype.managesieve_setdel = function()\n{\n  if (!confirm(this.get_label('managesieve.setdeleteconfirm')))\n    return false;\n\n  var id = this.filtersets_list.get_single_selection(),\n    lock = this.set_busy(true, 'loading'),\n    script = this.env.filtersets[id];\n\n  this.http_post('plugin.managesieve-action', '_act=setdel&_set='+urlencode(script), lock);\n};\n\n// Set add request\nrcube_webmail.prototype.managesieve_setadd = function()\n{\n  this.filters_list.clear_selection();\n  this.enable_command('plugin.managesieve-act', 'plugin.managesieve-del', false);\n\n  if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n    var lock = this.set_busy(true, 'loading');\n    target = window.frames[this.env.contentframe];\n    target.location.href = this.env.comm_path+'&_action=plugin.managesieve-action&_framed=1&_newset=1&_unlock='+lock;\n  }\n};\n\nrcube_webmail.prototype.managesieve_updatelist = function(action, o)\n{\n  this.set_busy(true);\n\n  switch (action) {\n    // Delete filter row\n    case 'del':\n      var id = o.id, list = this.filters_list;\n\n      list.remove_row(this.managesieve_rowid(o.id));\n      list.clear_selection();\n      this.show_contentframe(false);\n      this.enable_command('plugin.managesieve-del', 'plugin.managesieve-act', false);\n\n      // filter identifiers changed, fix the list\n      $('tr', this.filters_list.list).each(function() {\n        // remove hidden (deleted) rows\n        if (this.style.display == 'none') {\n          $(this).detach();\n          return;\n        }\n\n        var rowid = this.id.substr(6);\n\n        // remove all attached events\n        $(this).off();\n\n        // update row id\n        if (rowid > id) {\n          this.uid = rowid - 1;\n          $(this).attr('id', 'rcmrow' + this.uid);\n        }\n      });\n      list.init();\n\n      break;\n\n    // Update filter row\n    case 'update':\n      var i, row = $('#rcmrow'+this.managesieve_rowid(o.id));\n\n      if (o.name)\n        $('td', row).text(o.name);\n      if (o.disabled)\n        row.addClass('disabled');\n      else\n        row.removeClass('disabled');\n\n      $('#disabled', $('iframe').contents()).prop('checked', o.disabled);\n\n      break;\n\n    // Add filter row to the list\n    case 'add':\n      var list = this.filters_list,\n        row = $('<tr><td class=\"name\"></td></tr>');\n\n      $('td', row).text(o.name);\n      row.attr('id', 'rcmrow'+o.id);\n      if (o.disabled)\n        row.addClass('disabled');\n\n      list.insert_row(row.get(0));\n      list.highlight_row(o.id);\n\n      this.enable_command('plugin.managesieve-del', 'plugin.managesieve-act', true);\n\n      break;\n\n    // Filling rules list\n    case 'list':\n      var i, tr, td, el, list = this.filters_list;\n\n      if (o.clear)\n        list.clear();\n\n      for (i in o.list) {\n        el = o.list[i];\n        tr = document.createElement('TR');\n        td = document.createElement('TD');\n\n        $(td).text(el.name);\n        td.className = 'name';\n        tr.id = 'rcmrow' + el.id;\n        if (el['class'])\n            tr.className = el['class'];\n        tr.appendChild(td);\n\n        list.insert_row(tr);\n      }\n\n      if (o.set)\n        list.highlight_row(o.set);\n      else\n        this.enable_command('plugin.managesieve-del', 'plugin.managesieve-act', false);\n\n      break;\n\n    // Sactivate/deactivate set\n    case 'setact':\n      var id = this.managesieve_setid(o.name), row = $('#rcmrow' + id);\n      if (o.active) {\n        if (o.all)\n          $('tr', this.gui_objects.filtersetslist).addClass('disabled');\n        row.removeClass('disabled');\n      }\n      else\n        row.addClass('disabled');\n\n      break;\n\n    // Delete set row\n    case 'setdel':\n      var id = this.managesieve_setid(o.name);\n\n      this.filtersets_list.remove_row(id);\n      this.filters_list.clear();\n      this.show_contentframe(false);\n      this.enable_command('plugin.managesieve-setdel', 'plugin.managesieve-setact', 'plugin.managesieve-setget', false);\n\n      delete this.env.filtersets[id];\n\n      break;\n\n    // Create set row\n    case 'setadd':\n      var id = 'S' + new Date().getTime(),\n        list = this.filtersets_list,\n        row = $('<tr class=\"disabled\"><td class=\"name\"></td></tr>');\n\n      $('td', row).text(o.name);\n      row.attr('id', 'rcmrow'+id);\n\n      this.env.filtersets[id] = o.name;\n      list.insert_row(row.get(0));\n\n      // move row into its position on the list\n      if (o.index != list.rowcount-1) {\n        row.detach();\n        var elem = $('tr:visible', list.list).get(o.index);\n        row.insertBefore(elem);\n      }\n\n      list.select(id);\n\n      // Fix dragging filters over sets list\n      this.managesieve_fixdragend(row);\n\n      break;\n  }\n\n  this.set_busy(false);\n};\n\n// load filter frame\nrcube_webmail.prototype.load_managesieveframe = function(id)\n{\n  var has_id = typeof(id) != 'undefined' && id != null;\n  this.enable_command('plugin.managesieve-act', 'plugin.managesieve-del', has_id);\n\n  if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n    target = window.frames[this.env.contentframe];\n    var msgid = this.set_busy(true, 'loading');\n    target.location.href = this.env.comm_path+'&_action=plugin.managesieve-action&_framed=1'\n      +(has_id ? '&_fid='+id : '')+'&_unlock='+msgid;\n  }\n};\n\n// load filter frame\nrcube_webmail.prototype.managesieve_dragstart = function(list)\n{\n  var id = this.filters_list.get_single_selection();\n\n  this.drag_active = true;\n  this.drag_filter = id;\n};\n\nrcube_webmail.prototype.managesieve_dragend = function(e)\n{\n  if (this.drag_active) {\n    if (this.drag_filter_target) {\n      var lock = this.set_busy(true, 'loading');\n\n      this.show_contentframe(false);\n      this.http_post('plugin.managesieve-action', '_act=move&_fid='+this.drag_filter\n        +'&_to='+this.drag_filter_target, lock);\n    }\n    this.drag_active = false;\n  }\n};\n\n// Fixes filters dragging over sets list\n// @TODO: to be removed after implementing copying filters\nrcube_webmail.prototype.managesieve_fixdragend = function(elem)\n{\n  var p = this;\n  $(elem).on('mouseup' + ((bw.iphone || bw.ipad) ? ' touchend' : ''), function(e) {\n    if (p.drag_active)\n      p.filters_list.drag_mouse_up(e);\n  });\n};\n\nrcube_webmail.prototype.managesieve_focus_filter = function(row)\n{\n  var id = row.id.replace(/^rcmrow/, '');\n  if (this.drag_active && id != this.drag_filter) {\n    this.drag_filter_target = id;\n    $(row.obj).addClass(id < this.drag_filter ? 'filtermoveup' : 'filtermovedown');\n  }\n};\n\nrcube_webmail.prototype.managesieve_unfocus_filter = function(row)\n{\n  if (this.drag_active) {\n    $(row.obj).removeClass('filtermoveup filtermovedown');\n    this.drag_filter_target = null;\n  }\n};\n\n/*********************************************************/\n/*********          Filter Form methods          *********/\n/*********************************************************/\n\n// Form submition\nrcube_webmail.prototype.managesieve_save = function()\n{\n  if (this.env.action == 'plugin.managesieve-vacation') {\n    var data = $(this.gui_objects.sieveform).serialize();\n    this.http_post('plugin.managesieve-vacation', data, this.display_message(this.get_label('managesieve.vacation.saving'), 'loading'));\n    return;\n  }\n\n  if (parent.rcmail && parent.rcmail.filters_list && this.gui_objects.sieveform.name != 'filtersetform') {\n    var id = parent.rcmail.filters_list.get_single_selection();\n    if (id != null)\n      this.gui_objects.sieveform.elements['_fid'].value = parent.rcmail.filters_list.rows[id].uid;\n  }\n  this.gui_objects.sieveform.submit();\n};\n\n// Operations on filters form\nrcube_webmail.prototype.managesieve_ruleadd = function(id)\n{\n  this.http_post('plugin.managesieve-action', '_act=ruleadd&_rid='+id);\n};\n\nrcube_webmail.prototype.managesieve_rulefill = function(content, id, after)\n{\n  if (content != '') {\n    // create new element\n    var div = document.getElementById('rules'),\n      row = document.createElement('div');\n\n    this.managesieve_insertrow(div, row, after);\n    // fill row after inserting (for IE)\n    row.setAttribute('id', 'rulerow'+id);\n    row.className = 'rulerow';\n    row.innerHTML = content;\n\n    // initialize smart list inputs\n    $('textarea[data-type=\"list\"]', row).each(function() {\n      smart_field_init(this);\n    });\n\n    this.managesieve_formbuttons(div);\n  }\n};\n\nrcube_webmail.prototype.managesieve_ruledel = function(id)\n{\n  if ($('#ruledel'+id).hasClass('disabled'))\n    return;\n\n  if (confirm(this.get_label('managesieve.ruledeleteconfirm'))) {\n    var row = document.getElementById('rulerow'+id);\n    row.parentNode.removeChild(row);\n    this.managesieve_formbuttons(document.getElementById('rules'));\n  }\n};\n\nrcube_webmail.prototype.managesieve_actionadd = function(id)\n{\n  this.http_post('plugin.managesieve-action', '_act=actionadd&_aid='+id);\n};\n\nrcube_webmail.prototype.managesieve_actionfill = function(content, id, after)\n{\n  if (content != '') {\n    var div = document.getElementById('actions'),\n      row = document.createElement('div');\n\n    this.managesieve_insertrow(div, row, after);\n    // fill row after inserting (for IE)\n    row.className = 'actionrow';\n    row.setAttribute('id', 'actionrow'+id);\n    row.innerHTML = content;\n\n    // initialize smart list inputs\n    $('textarea[data-type=\"list\"]', row).each(function() {\n      smart_field_init(this);\n    });\n\n    this.managesieve_formbuttons(div);\n  }\n};\n\nrcube_webmail.prototype.managesieve_actiondel = function(id)\n{\n  if ($('#actiondel'+id).hasClass('disabled'))\n    return;\n\n  if (confirm(this.get_label('managesieve.actiondeleteconfirm'))) {\n    var row = document.getElementById('actionrow'+id);\n    row.parentNode.removeChild(row);\n    this.managesieve_formbuttons(document.getElementById('actions'));\n  }\n};\n\n// insert rule/action row in specified place on the list\nrcube_webmail.prototype.managesieve_insertrow = function(div, row, after)\n{\n  for (var i=0; i<div.childNodes.length; i++) {\n    if (div.childNodes[i].id == (div.id == 'rules' ? 'rulerow' : 'actionrow')  + after)\n      break;\n  }\n\n  if (div.childNodes[i+1])\n    div.insertBefore(row, div.childNodes[i+1]);\n  else\n    div.appendChild(row);\n};\n\n// update Delete buttons status\nrcube_webmail.prototype.managesieve_formbuttons = function(div)\n{\n  var i, button, buttons = [];\n\n  // count and get buttons\n  for (i=0; i<div.childNodes.length; i++) {\n    if (div.id == 'rules' && div.childNodes[i].id) {\n      if (/rulerow/.test(div.childNodes[i].id))\n        buttons.push('ruledel' + div.childNodes[i].id.replace(/rulerow/, ''));\n    }\n    else if (div.childNodes[i].id) {\n      if (/actionrow/.test(div.childNodes[i].id))\n        buttons.push( 'actiondel' + div.childNodes[i].id.replace(/actionrow/, ''));\n    }\n  }\n\n  for (i=0; i<buttons.length; i++) {\n    button = document.getElementById(buttons[i]);\n    if (i>0 || buttons.length>1) {\n      $(button).removeClass('disabled');\n    }\n    else {\n      $(button).addClass('disabled');\n    }\n  }\n};\n\n// update vacation addresses field with user identities\nrcube_webmail.prototype.managesieve_vacation_addresses = function(id)\n{\n  var lock = this.set_busy(true, 'loading');\n  this.http_post('plugin.managesieve-action', {_act: 'addresses', _aid: id}, lock);\n};\n\n// update vacation addresses field with user identities\nrcube_webmail.prototype.managesieve_vacation_addresses_update = function(id, addresses)\n{\n  var field = $('#vacation_addresses,#action_addresses' + (id || ''));\n  smart_field_reset(field.get(0), addresses);\n};\n\nfunction rule_header_select(id)\n{\n  var obj = document.getElementById('header' + id),\n    size = document.getElementById('rule_size' + id),\n    op = document.getElementById('rule_op' + id),\n    header = document.getElementById('custom_header' + id + '_list'),\n    mod = document.getElementById('rule_mod' + id),\n    trans = document.getElementById('rule_trans' + id),\n    comp = document.getElementById('rule_comp' + id),\n    datepart = document.getElementById('rule_date_part' + id),\n    dateheader = document.getElementById('rule_date_header_div' + id),\n    h = obj.value;\n\n  if (h == 'size') {\n    size.style.display = 'inline';\n    $.each([op, header, mod, trans, comp], function() { this.style.display = 'none'; });\n  }\n  else {\n    header.style.display = h != '...' ? 'none' : 'inline-block';\n    size.style.display = 'none';\n    op.style.display = 'inline';\n    comp.style.display = '';\n    mod.style.display = h == 'body' || h == 'currentdate' || h == 'date' ? 'none' : 'block';\n    trans.style.display = h == 'body' ? 'block' : 'none';\n  }\n\n  if (datepart)\n    datepart.style.display = h == 'currentdate' || h == 'date' ? 'inline' : 'none';\n  if (dateheader)\n    dateheader.style.display = h == 'date' ? '' : 'none';\n\n  rule_op_select(op, id, h);\n  rule_mod_select(id, h);\n  obj.style.width = h == '...' ? '40px' : '';\n};\n\nfunction rule_op_select(obj, id, header)\n{\n  var target = document.getElementById('rule_target' + id + '_list');\n\n  if (!header)\n    header = document.getElementById('header' + id).value;\n\n  target.style.display = obj.value == 'exists' || obj.value == 'notexists' || header == 'size' ? 'none' : 'inline-block';\n};\n\nfunction rule_trans_select(id)\n{\n  var obj = document.getElementById('rule_trans_op' + id),\n    target = document.getElementById('rule_trans_type' + id);\n\n  target.style.display = obj.value != 'content' ? 'none' : 'inline';\n};\n\nfunction rule_mod_select(id, header)\n{\n  var obj = document.getElementById('rule_mod_op' + id),\n    target = document.getElementById('rule_mod_type' + id),\n    index = document.getElementById('rule_index_div' + id);\n\n  if (!header)\n    header = document.getElementById('header' + id).value;\n\n  target.style.display = obj.value != 'address' && obj.value != 'envelope' ? 'none' : 'inline';\n\n  if (index)\n    index.style.display = header != 'body' && header != 'currentdate' && header != 'size' && obj.value != 'envelope'  ? '' : 'none';\n};\n\nfunction rule_join_radio(value)\n{\n  $('#rules').css('display', value == 'any' ? 'none' : 'block');\n};\n\nfunction rule_adv_switch(id, elem)\n{\n  var elem = $(elem), enabled = elem.hasClass('hide'), adv = $('#rule_advanced'+id);\n\n  if (enabled) {\n    adv.hide();\n    elem.removeClass('hide').addClass('show');\n  }\n  else {\n    adv.show();\n    elem.removeClass('show').addClass('hide');\n  }\n}\n\nfunction action_type_select(id)\n{\n  var obj = document.getElementById('action_type' + id),\n    v = obj.value, enabled = {},\n    elems = {\n      mailbox: document.getElementById('action_mailbox' + id),\n      target: document.getElementById('redirect_target' + id),\n      target_area: document.getElementById('action_target_area' + id),\n      flags: document.getElementById('action_flags' + id),\n      vacation: document.getElementById('action_vacation' + id),\n      set: document.getElementById('action_set' + id),\n      notify: document.getElementById('action_notify' + id)\n    };\n\n  if (v == 'fileinto' || v == 'fileinto_copy') {\n    enabled.mailbox = 1;\n  }\n  else if (v == 'redirect' || v == 'redirect_copy') {\n    enabled.target = 1;\n  }\n  else if (v.match(/^reject|ereject$/)) {\n    enabled.target_area = 1;\n  }\n  else if (v.match(/^(add|set|remove)flag$/)) {\n    enabled.flags = 1;\n  }\n  else if (v == 'vacation') {\n    enabled.vacation = 1;\n  }\n  else if (v == 'set') {\n    enabled.set = 1;\n  }\n  else if (v == 'notify') {\n    enabled.notify = 1;\n  }\n\n  for (var x in elems) {\n    elems[x].style.display = !enabled[x] ? 'none' : 'inline';\n  }\n};\n\nfunction vacation_action_select()\n{\n  var selected = $('#vacation_action').val();\n\n  $('#action_target_span')[selected == 'discard' || selected == 'keep' ? 'hide' : 'show']();\n};\n\n// Inititalizes smart list input\nfunction smart_field_init(field)\n{\n  var id = field.id + '_list',\n    area = $('<span class=\"listarea\"></span>'),\n    list = field.value ? field.value.split(\"\\n\") : [''];\n\n  if ($('#'+id).length)\n    return;\n\n  // add input rows\n  $.each(list, function(i, v) {\n    area.append(smart_field_row(v, field.name, i, $(field).data('size')));\n  });\n\n  area.attr('id', id);\n  field = $(field);\n\n  if (field.attr('disabled'))\n    area.hide();\n  // disable the original field anyway, we don't want it in POST\n  else\n    field.prop('disabled', true);\n\n  field.after(area);\n\n  if (field.hasClass('error')) {\n    area.addClass('error');\n    rcmail.managesieve_tip_register([[id, field.data('tip')]]);\n  }\n};\n\nfunction smart_field_row(value, name, idx, size)\n{\n  // build row element content\n  var input, content = '<span class=\"listelement\">'\n      + '<span class=\"reset\"></span><input type=\"text\"></span>',\n    elem = $(content),\n    attrs = {value: value, name: name + '[]'};\n\n  if (size)\n    attrs.size = size;\n\n  input = $('input', elem).attr(attrs).keydown(function(e) {\n    var input = $(this);\n\n    // element creation event (on Enter)\n    if (e.which == 13) {\n      var name = input.attr('name').replace(/\\[\\]$/, ''),\n        dt = (new Date()).getTime(),\n        elem = smart_field_row('', name, dt, size);\n\n      input.parent().after(elem);\n      $('input', elem).focus();\n    }\n    // backspace or delete: remove input, focus previous one\n    else if ((e.which == 8 || e.which == 46) && input.val() == '') {\n\n      var parent = input.parent(), siblings = parent.parent().children();\n\n      if (siblings.length > 1) {\n        if (parent.prev().length)\n          parent.prev().children('input').focus();\n        else\n          parent.next().children('input').focus();\n\n        parent.remove();\n        return false;\n      }\n    }\n  });\n\n  // element deletion event\n  $('span[class=\"reset\"]', elem).click(function() {\n    var span = $(this.parentNode);\n\n    if (span.parent().children().length > 1)\n      span.remove();\n    else\n      $('input', span).val('').focus();\n  });\n\n  return elem;\n}\n\n// Reset and fill the smart list input with new data\nfunction smart_field_reset(field, data)\n{\n  var id = field.id + '_list',\n    list = data.length ? data : [''];\n    area = $('#' + id);\n\n  area.empty();\n\n  // add input rows\n  $.each(list, function(i, v) {\n    area.append(smart_field_row(v, field.name, i, $(field).data('size')));\n  });\n}\n\n// Register onmouse(leave/enter) events for tips on specified form element\nrcube_webmail.prototype.managesieve_tip_register = function(tips)\n{\n  var n, framed = parent.rcmail,\n    tip = framed ? parent.rcmail.env.ms_tip_layer : rcmail.env.ms_tip_layer;\n\n  for (n in tips) {\n    $('#'+tips[n][0])\n      .data('tip', tips[n][1])\n      .mouseleave(function(e) { tip.hide(); })\n      .mouseenter(function(e) {\n        var elem = $(this),\n          offset = elem.offset(),\n          left = offset.left,\n          top = offset.top - 12,\n          minwidth = elem.width();\n\n        if (framed) {\n          offset = $((rcmail.env.task == 'mail'  ? '#sievefilterform > iframe' : '#filter-box'), parent.document).offset();\n          top  += offset.top;\n          left += offset.left;\n        }\n\n        tip.html(elem.data('tip'));\n        top -= tip.height();\n\n        tip.css({left: left, top: top, minWidth: (minwidth-2) + 'px'}).show();\n      });\n  }\n};\n\n// format time string\nfunction sieve_formattime(hour, minutes)\n{\n  var i, c, h, time = '', format = rcmail.env.time_format || 'H:i';\n\n  for (i=0; i<format.length; i++) {\n    c = format.charAt(i);\n    switch (c) {\n      case 'a': time += hour > 12 ? 'am' : 'pm'; break;\n      case 'A': time += hour > 12 ? 'AM' : 'PM'; break;\n      case 'g':\n      case 'h':\n        h = hour == 0 ? 12 : hour > 12 ? hour - 12 : hour;\n        time += (c == 'h' && hour < 10 ? '0' : '') + hour;\n        break;\n      case 'G': time += hour; break;\n      case 'H': time += (hour < 10 ? '0' : '') + hour; break;\n      case 'i': time += (minutes < 10 ? '0' : '') + minutes; break;\n      case 's': time += '00';\n      default: time += c;\n    }\n  }\n\n  return time;\n}\n\nfunction sieve_form_init()\n{\n  // small resize for header element\n  $('select[name=\"_header[]\"]', rcmail.gui_objects.sieveform).each(function() {\n    if (this.value == '...') this.style.width = '40px';\n  });\n\n  // resize dialog window\n  if (rcmail.env.action == 'plugin.managesieve' && rcmail.env.task == 'mail') {\n    parent.rcmail.managesieve_dialog_resize(rcmail.gui_objects.sieveform);\n  }\n\n  $('input[type=\"text\"]:first', rcmail.gui_objects.sieveform).focus();\n\n  // initialize smart list inputs\n  $('textarea[data-type=\"list\"]', rcmail.gui_objects.sieveform).each(function() {\n    smart_field_init(this);\n  });\n\n  // enable date pickers on date fields\n  if ($.datepicker && rcmail.env.date_format) {\n    $.datepicker.setDefaults({\n      dateFormat: rcmail.env.date_format,\n      changeMonth: true,\n      showOtherMonths: true,\n      selectOtherMonths: true,\n      onSelect: function(dateText) { $(this).focus().val(dateText); }\n    });\n    $('input.datepicker').datepicker();\n  }\n\n  // configure drop-down menu on time input fields based on jquery UI autocomplete\n  $('#vacation_timefrom, #vacation_timeto')\n    .attr('autocomplete', \"off\")\n    .autocomplete({\n      delay: 100,\n      minLength: 1,\n      source: function(p, callback) {\n        var h, result = [];\n        for (h = 0; h < 24; h++)\n          result.push(sieve_formattime(h, 0));\n        result.push(sieve_formattime(23, 59));\n\n        return callback(result);\n      },\n      open: function(event, ui) {\n        // scroll to current time\n        var $this = $(this), val = $this.val(),\n          widget = $this.autocomplete('widget').css('width', '10em'),\n          menu = $this.data('ui-autocomplete').menu;\n\n        if (val && val.length)\n          widget.children().each(function() {\n            var li = $(this);\n            if (li.text().indexOf(val) == 0)\n              menu._scrollIntoView(li);\n          });\n      },\n      select: function(event, ui) {\n        $(this).val(ui.item.value);\n        return false;\n      }\n    })\n    .click(function() {  // show drop-down upon clicks\n      $(this).autocomplete('search', $(this).val() || ' ');\n    })\n}\n\n\n/*********************************************************/\n/*********           Mail UI methods             *********/\n/*********************************************************/\n\nrcube_webmail.prototype.managesieve_create = function(force)\n{\n  if (!force && this.env.action != 'show') {\n    var uid = this.message_list.get_single_selection(),\n      lock = this.set_busy(true, 'loading');\n\n    this.http_post('plugin.managesieve-action', {_uid: uid}, lock);\n    return;\n  }\n\n  if (!this.env.sieve_headers || !this.env.sieve_headers.length)\n    return;\n\n  var i, html, buttons = {}, dialog = $(\"#sievefilterform\");\n\n  // create dialog window\n  if (!dialog.length) {\n    dialog = $('<div id=\"sievefilterform\"></div>');\n    $('body').append(dialog);\n  }\n\n  // build dialog window content\n  html = '<fieldset><legend>'+this.get_label('managesieve.usedata')+'</legend><ul>';\n  for (i in this.env.sieve_headers)\n    html += '<li><input type=\"checkbox\" name=\"headers[]\" id=\"sievehdr'+i+'\" value=\"'+i+'\" checked=\"checked\" />'\n      +'<label for=\"sievehdr'+i+'\">'+this.env.sieve_headers[i][0]+':</label> '+this.env.sieve_headers[i][1]+'</li>';\n  html += '</ul></fieldset>';\n\n  dialog.html(html);\n\n  // [Next Step] button action\n  buttons[this.get_label('managesieve.nextstep')] = function () {\n    // check if there's at least one checkbox checked\n    var hdrs = $('input[name=\"headers[]\"]:checked', dialog);\n    if (!hdrs.length) {\n      alert(rcmail.get_label('managesieve.nodata'));\n      return;\n    }\n\n    // build frame URL\n    var url = rcmail.get_task_url('mail');\n    url = rcmail.add_url(url, '_action', 'plugin.managesieve');\n    url = rcmail.add_url(url, '_framed', 1);\n\n    hdrs.map(function() {\n      var val = rcmail.env.sieve_headers[this.value];\n      url = rcmail.add_url(url, 'r['+this.value+']', val[0]+':'+val[1]);\n    });\n\n    // load form in the iframe\n    var frame = $('<iframe>').attr({src: url, frameborder: 0})\n    dialog.empty().append(frame).dialog('widget').resize();\n\n    // Change [Next Step] button with [Save] button\n    buttons = {};\n    buttons[rcmail.get_label('save')] = function() {\n      var win = $('iframe', dialog).get(0).contentWindow;\n      win.rcmail.managesieve_save();\n    };\n    dialog.dialog('option', 'buttons', buttons);\n  };\n\n  // show dialog window\n  dialog.dialog({\n    modal: false,\n    resizable: true,\n    closeOnEscape: !bw.ie7,  // disable for performance reasons\n    title: this.get_label('managesieve.newfilter'),\n    close: function() { rcmail.managesieve_dialog_close(); },\n    buttons: buttons,\n    minWidth: 600,\n    minHeight: 300,\n    height: 250\n  }).show();\n\n  this.env.managesieve_dialog = dialog;\n}\n\nrcube_webmail.prototype.managesieve_dialog_close = function()\n{\n  var dialog = this.env.managesieve_dialog;\n\n  // BUG(?): if we don't remove the iframe first, it will be reloaded\n  dialog.html('');\n  dialog.dialog('destroy').hide();\n}\n\nrcube_webmail.prototype.managesieve_dialog_resize = function(o)\n{\n  var dialog = this.env.managesieve_dialog,\n    win = $(window), form = $(o);\n    width = $('fieldset:first', o).width(), // fieldset width is more appropriate here\n    height = form.height(),\n    w = win.width(), h = win.height();\n\n  dialog.dialog('option', { height: Math.min(h-20, height+120), width: Math.min(w-20, width+65) })\n    .dialog('option', 'position', ['center', 'center']);  // works in a separate call only (!?)\n}\n", "code_before": "/**\n * (Manage)Sieve Filters plugin\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (c) The Roundcube Dev Team\n *\n * The JavaScript code in this page is free software: you can redistribute it\n * and/or modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n */\n\nif (window.rcmail) {\n    rcmail.addEventListener('init', function (evt) {\n    // add managesieve-create command to message_commands array,\n    // so it's state will be updated on message selection/unselection\n        if (rcmail.env.task == 'mail') {\n            if (rcmail.env.action != 'show') {\n                rcmail.env.message_commands.push('managesieve-create');\n            } else {\n                rcmail.enable_command('managesieve-create', true);\n            }\n        }\n\n        if (rcmail.env.task == 'mail' || rcmail.env.action.startsWith('plugin.managesieve')) {\n            // Create layer for form tips\n            if (!rcmail.env.framed) {\n                rcmail.env.ms_tip_layer = $('<div id=\"managesieve-tip\" class=\"popupmenu\"></div>');\n                rcmail.env.ms_tip_layer.appendTo(document.body);\n            }\n        }\n\n        // register commands\n        rcmail.register_command('plugin.managesieve-save', function () {\n            rcmail.managesieve_save();\n        });\n        rcmail.register_command('plugin.managesieve-act', function () {\n            rcmail.managesieve_act();\n        });\n        rcmail.register_command('plugin.managesieve-add', function () {\n            rcmail.managesieve_add();\n        });\n        rcmail.register_command('plugin.managesieve-del', function () {\n            rcmail.managesieve_del();\n        });\n        rcmail.register_command('plugin.managesieve-move', function () {\n            rcmail.managesieve_move();\n        });\n        rcmail.register_command('plugin.managesieve-setadd', function () {\n            rcmail.managesieve_setadd();\n        });\n        rcmail.register_command('plugin.managesieve-setdel', function () {\n            rcmail.managesieve_setdel();\n        });\n        rcmail.register_command('plugin.managesieve-setact', function () {\n            rcmail.managesieve_setact();\n        });\n        rcmail.register_command('plugin.managesieve-setget', function () {\n            rcmail.managesieve_setget();\n        });\n        rcmail.register_command('plugin.managesieve-seteditraw', function () {\n            rcmail.managesieve_seteditraw();\n        });\n\n        if (rcmail.env.action.startsWith('plugin.managesieve')) {\n            if (rcmail.gui_objects.sieveform) {\n                rcmail.enable_command('plugin.managesieve-save', true);\n                sieve_form_init();\n            } else if (rcmail.gui_objects.sievesetrawform) {\n                rcmail.enable_command('plugin.managesieve-save', true);\n                sieve_raw_editor_init();\n            } else {\n                rcmail.enable_command('plugin.managesieve-add', !rcmail.env.sieveconnerror && $.inArray('new_filter', rcmail.env.managesieve_disabled_actions) == -1);\n                rcmail.enable_command('plugin.managesieve-setadd', !rcmail.env.sieveconnerror && $.inArray('new_set', rcmail.env.managesieve_disabled_actions) == -1);\n            }\n\n            var setcnt, set = rcmail.env.currentset;\n\n            if (rcmail.gui_objects.filterslist) {\n                rcmail.filters_list = new rcube_list_widget(rcmail.gui_objects.filterslist,\n                    { multiselect: false, draggable: true, keyboard: true });\n\n                rcmail.filters_list\n                    .addEventListener('select', function (o) {\n                        rcmail.managesieve_select(o);\n                    })\n                    .addEventListener('keypress', function (o) {\n                        rcmail.list_keypress(o, { del: 'plugin.managesieve-del' });\n                    })\n                    .addEventListener('dragstart', function (o) {\n                        rcmail.managesieve_dragstart(o);\n                    })\n                    .addEventListener('dragend', function (o) {\n                        rcmail.managesieve_dragend(o);\n                    })\n                    .addEventListener('initrow', function (row) {\n                        row.obj.onmouseover = function () {\n                            rcmail.managesieve_focus_filter(row);\n                        };\n                        row.obj.onmouseout = function () {\n                            rcmail.managesieve_unfocus_filter(row);\n                        };\n                    })\n                    .init();\n            }\n\n            if (rcmail.gui_objects.filtersetslist) {\n                rcmail.filtersets_list = new rcube_list_widget(rcmail.gui_objects.filtersetslist,\n                    { multiselect: false, draggable: false, keyboard: true });\n\n                rcmail.filtersets_list.init().focus();\n\n                if (set != null) {\n                    $('#filterset-name').text(set);\n                    set = rcmail.managesieve_setid(set);\n                    rcmail.filtersets_list.select(set);\n                }\n\n                // attach select event after initial record was selected\n                rcmail.filtersets_list.addEventListener('select', function (e) {\n                    rcmail.managesieve_setselect(e);\n                });\n\n                setcnt = rcmail.filtersets_list.rowcount;\n                rcmail.enable_command('plugin.managesieve-set', true);\n                rcmail.enable_command('plugin.managesieve-setact', setcnt > 0 && $.inArray('enable_disable_set', rcmail.env.managesieve_disabled_actions) == -1);\n                rcmail.enable_command('plugin.managesieve-setget', setcnt > 0 && $.inArray('download_set', rcmail.env.managesieve_disabled_actions) == -1);\n                rcmail.enable_command('plugin.managesieve-setdel', setcnt > 1 && $.inArray('delete_set', rcmail.env.managesieve_disabled_actions) == -1);\n                rcmail.enable_command('plugin.managesieve-seteditraw', setcnt > 0 && rcmail.env.raw_sieve_editor);\n\n                // Fix dragging filters over sets list\n                $('tr', rcmail.gui_objects.filtersetslist).each(function (i, e) {\n                    rcmail.managesieve_fixdragend(e);\n                });\n            }\n        }\n    });\n}\n\n/*********************************************************/\n/* ********       Managesieve UI methods         *********/\n/*********************************************************/\n\nrcube_webmail.prototype.managesieve_add = function () {\n    this.load_managesieveframe('_nav=hide', true);\n};\n\nrcube_webmail.prototype.managesieve_del = function () {\n    var id = this.filters_list.get_single_selection();\n    this.confirm_dialog(this.get_label('managesieve.filterdeleteconfirm'), 'delete', function (e, ref) {\n        var post = '_act=delete&_fid=' + ref.filters_list.rows[id].uid,\n            lock = ref.set_busy(true, 'loading');\n\n        ref.http_post('plugin.managesieve-action', post, lock);\n    });\n};\n\nrcube_webmail.prototype.managesieve_act = function () {\n    var id = this.filters_list.get_single_selection(),\n        lock = this.set_busy(true, 'loading');\n\n    this.http_post('plugin.managesieve-action',\n        '_act=act&_fid=' + this.filters_list.rows[id].uid, lock);\n};\n\n// Filter selection\nrcube_webmail.prototype.managesieve_select = function (list) {\n    var id = list.get_single_selection();\n\n    if (id != null) {\n        id = list.rows[id].uid;\n        this.load_managesieveframe('_fid=' + id);\n    }\n\n    var has_id = typeof (id) !== 'undefined' && id != null;\n\n    this.enable_command('plugin.managesieve-act', has_id);\n    this.enable_command('plugin.managesieve-del', has_id && $.inArray('delete_filter', rcmail.env.managesieve_disabled_actions) == -1);\n};\n\n// Set selection\nrcube_webmail.prototype.managesieve_setselect = function (list) {\n    this.enable_command('plugin.managesieve-setdel', list.rowcount > 1 && $.inArray('delete_set', rcmail.env.managesieve_disabled_actions) == -1);\n    this.enable_command('plugin.managesieve-setact', list.rowcount > 0 && $.inArray('enable_disable_set', rcmail.env.managesieve_disabled_actions) == -1);\n    this.enable_command('plugin.managesieve-setget', list.rowcount > 0 && $.inArray('delete_set', rcmail.env.managesieve_disabled_actions) == -1);\n    this.enable_command('plugin.managesieve-seteditraw', list.rowcount > 0 && this.env.raw_sieve_editor);\n\n    if (rcmail.env.contextmenu_opening) {\n        return;\n    }\n\n    this.show_contentframe(false);\n    this.filters_list.clear(true);\n\n    var id = list.get_single_selection();\n    if (id != null) {\n        this.managesieve_list(this.env.filtersets[id]);\n        $('#filterset-name').text(this.env.filtersets[id]);\n    }\n};\n\nrcube_webmail.prototype.managesieve_rowid = function (id) {\n    var i, rows = this.filters_list.rows;\n\n    for (i in rows) {\n        if (rows[i] != null && rows[i].uid == id) {\n            return i;\n        }\n    }\n};\n\n// Returns set's identifier\nrcube_webmail.prototype.managesieve_setid = function (name) {\n    for (var i in this.env.filtersets) {\n        if (this.env.filtersets[i] == name) {\n            return i;\n        }\n    }\n};\n\n// Filters listing request\nrcube_webmail.prototype.managesieve_list = function (script) {\n    var lock = this.set_busy(true, 'loading');\n\n    this.http_post('plugin.managesieve-action', '_act=list&_set=' + urlencode(script), lock);\n};\n\n// Script download request\nrcube_webmail.prototype.managesieve_setget = function () {\n    var id = this.filtersets_list.get_single_selection(),\n        script = this.env.filtersets[id];\n\n    this.goto_url('plugin.managesieve-action', { _act: 'setget', _set: script }, false, true);\n};\n\n// Set activate/deactivate request\nrcube_webmail.prototype.managesieve_setact = function () {\n    var id = this.filtersets_list.get_single_selection(),\n        lock = this.set_busy(true, 'loading'),\n        script = this.env.filtersets[id],\n        action = $('#rcmrow' + id).hasClass('disabled') ? 'setact' : 'deact';\n\n    this.http_post('plugin.managesieve-action', '_act=' + action + '&_set=' + urlencode(script), lock);\n};\n\n// Set delete request\nrcube_webmail.prototype.managesieve_setdel = function () {\n    var id = this.filtersets_list.get_single_selection();\n    this.confirm_dialog(this.get_label('managesieve.setdeleteconfirm'), 'delete', function (e, ref) {\n        var script = ref.env.filtersets[id],\n            lock = ref.set_busy(true, 'loading');\n\n        ref.http_post('plugin.managesieve-action', '_act=setdel&_set=' + urlencode(script), lock);\n    });\n};\n\n// Set edit raw request\nrcube_webmail.prototype.managesieve_seteditraw = function () {\n    var id = this.filtersets_list.get_single_selection(),\n        script = this.env.filtersets[id];\n\n    this.load_managesieveframe('_nav=hide&_seteditraw=1&_set=' + urlencode(script), true);\n};\n\n// Set add request\nrcube_webmail.prototype.managesieve_setadd = function () {\n    this.load_managesieveframe('_nav=hide&_newset=1', true);\n};\n\nrcube_webmail.prototype.managesieve_updatelist = function (action, o) {\n    this.set_busy(true);\n\n    switch (action) {\n    // Delete filter row\n        case 'del':\n            var id = o.id, list = this.filters_list;\n\n            list.remove_row(this.managesieve_rowid(o.id));\n            this.show_contentframe(false);\n            this.reset_filters_list();\n\n            // filter identifiers changed, fix the list\n            $('tr', this.filters_list.list).each(function () {\n                // remove hidden (deleted) rows\n                if (this.style.display == 'none') {\n                    $(this).detach();\n                    return;\n                }\n\n                var rowid = this.id.substr(6);\n\n                // remove all attached events\n                $(this).off();\n\n                // update row id\n                if (rowid > id) {\n                    this.uid = String(rowid - 1);\n                    $(this).attr('id', 'rcmrow' + this.uid);\n                }\n            });\n            list.init();\n\n            break;\n        // Update filter row\n        case 'update':\n            var i, row = $('#rcmrow' + this.managesieve_rowid(o.id));\n\n            if (o.name) {\n                $('td', row).text(o.name);\n            }\n            if (o.disabled) {\n                row.addClass('disabled');\n            } else {\n                row.removeClass('disabled');\n            }\n\n            $('#fenabled', $('iframe').contents()).prop('checked', !o.disabled);\n\n            break;\n        // Add filter row to the list\n        case 'add':\n            var list = this.filters_list,\n                row = $('<tr><td class=\"name\"></td></tr>');\n\n            $('td', row).text(o.name);\n            row.attr('id', 'rcmrow' + o.id);\n            if (o.disabled) {\n                row.addClass('disabled');\n            }\n\n            list.insert_row(row.get(0));\n            list.highlight_row(o.id);\n\n            this.enable_command('plugin.managesieve-del', $.inArray('delete_rule', rcmail.env.managesieve_disabled_actions) == -1);\n            this.enable_command('plugin.managesieve-act', true);\n\n            break;\n        // Filling rules list\n        case 'list':\n            var i, tr, td, el, list = this.filters_list;\n\n            if (o.clear) {\n                list.clear();\n            }\n\n            for (i in o.list) {\n                el = o.list[i];\n                tr = document.createElement('TR');\n                td = document.createElement('TD');\n\n                $(td).text(el.name);\n                td.className = 'name';\n                tr.id = 'rcmrow' + el.id;\n                if (el.class) {\n                    tr.className = el.class;\n                }\n                tr.appendChild(td);\n\n                list.insert_row(tr);\n            }\n\n            if (o.set) {\n                list.highlight_row(o.set);\n            } else {\n                this.enable_command('plugin.managesieve-del', 'plugin.managesieve-act', false);\n            }\n\n            break;\n        // Activate/Deactivate the set\n        case 'setact':\n            var id = this.managesieve_setid(o.name), row = $('#rcmrow' + id);\n            if (o.active) {\n                if (o.all) {\n                    $('tr', this.gui_objects.filtersetslist).addClass('disabled');\n                }\n                row.removeClass('disabled');\n            } else {\n                row.addClass('disabled');\n            }\n\n            break;\n        // Delete set row\n        case 'setdel':\n            var id = this.managesieve_setid(o.name);\n\n            this.filters_list.clear();\n            this.show_contentframe(false);\n            this.enable_command('plugin.managesieve-setdel', 'plugin.managesieve-setact',\n                'plugin.managesieve-setget', 'plugin.managesieve-seteditraw', false);\n\n            this.filtersets_list.remove_row(id, true);\n            delete this.env.filtersets[id];\n\n            break;\n        // Create set row\n        case 'setadd':\n            var id = 'S' + new Date().getTime(),\n                list = this.filtersets_list,\n                row = $('<tr class=\"disabled\"><td class=\"name\"></td></tr>');\n\n            $('td', row).text(o.name);\n            row.attr('id', 'rcmrow' + id);\n\n            this.env.filtersets[id] = o.name;\n            list.insert_row(row.get(0));\n\n            // move row into its position on the list\n            if (o.index != list.rowcount - 1) {\n                row.detach();\n                var elem = $('tr:visible', list.list).get(o.index);\n                row.insertBefore(elem);\n            }\n\n            list.select(id);\n\n            // Fix dragging filters over sets list\n            this.managesieve_fixdragend(row);\n\n            break;\n        case 'refresh':\n            this.reset_filters_list(true);\n\n            break;\n    }\n\n    this.set_busy(false);\n};\n\n// Resets filters list state\nrcube_webmail.prototype.reset_filters_list = function (reload) {\n    this.filters_list.clear_selection();\n    this.enable_command('plugin.managesieve-act', 'plugin.managesieve-del', false);\n\n    if (reload) {\n        var id = this.filtersets_list.get_single_selection();\n\n        this.filters_list.clear(true);\n        this.managesieve_list(this.env.filtersets[id]);\n    }\n};\n\n// load filter frame\nrcube_webmail.prototype.load_managesieveframe = function (add_url, reset) {\n    if (reset) {\n        this.reset_filters_list();\n    }\n\n    var target = this.get_frame_window(this.env.contentframe),\n        url = this.url('plugin.managesieve-action', '_framed=1' + (add_url ? ('&' + add_url) : ''));\n\n    if (target) {\n        this.location_href(url, target, true);\n    }\n};\n\n// load filter frame\nrcube_webmail.prototype.managesieve_dragstart = function (list) {\n    var id = this.filters_list.get_single_selection();\n\n    this.drag_active = true;\n    this.drag_filter = id;\n};\n\nrcube_webmail.prototype.managesieve_dragend = function (e) {\n    if (this.drag_active) {\n        if (this.drag_filter_target) {\n            var lock = this.set_busy(true, 'loading');\n\n            this.show_contentframe(false);\n            this.http_post('plugin.managesieve-action', '_act=move&_fid=' + this.drag_filter\n                + '&_to=' + this.drag_filter_target, lock);\n        }\n        this.drag_active = false;\n    }\n};\n\n// Fixes filters dragging over sets list\n// @TODO: to be removed after implementing copying filters\nrcube_webmail.prototype.managesieve_fixdragend = function (elem) {\n    var p = this;\n    $(elem).on('mouseup' + ((bw.iphone || bw.ipad) ? ' touchend' : ''), function (e) {\n        if (p.drag_active) {\n            p.filters_list.drag_mouse_up(e);\n        }\n    });\n};\n\nrcube_webmail.prototype.managesieve_focus_filter = function (row) {\n    var id = row.id.replace(/^rcmrow/, '');\n    if (this.drag_active && id != this.drag_filter) {\n        this.drag_filter_target = id;\n        $(row.obj).addClass(id < this.drag_filter ? 'filtermoveup' : 'filtermovedown');\n    }\n};\n\nrcube_webmail.prototype.managesieve_unfocus_filter = function (row) {\n    if (this.drag_active) {\n        $(row.obj).removeClass('filtermoveup filtermovedown');\n        this.drag_filter_target = null;\n    }\n};\n\n/*********************************************************/\n/* ********          Filter Form methods         *********/\n/*********************************************************/\n\n// Form submission\nrcube_webmail.prototype.managesieve_save = function () {\n    if (this.env.action == 'plugin.managesieve-vacation') {\n        var data = $(this.gui_objects.sieveform).serialize();\n        this.http_post('plugin.managesieve-vacation', data, this.display_message(this.get_label('managesieve.vacation.saving'), 'loading'));\n        return;\n    }\n\n    if (this.env.action == 'plugin.managesieve-forward') {\n        var data = $(this.gui_objects.sieveform).serialize();\n        this.http_post('plugin.managesieve-forward', data, this.display_message(this.get_label('managesieve.forward.saving'), 'loading'));\n        return;\n    }\n\n    if (this.gui_objects.sieveform) {\n        if (parent.rcmail && parent.rcmail.filters_list && this.gui_objects.sieveform.name != 'filtersetform') {\n            var id = parent.rcmail.filters_list.get_single_selection();\n            if (id != null) {\n                this.gui_objects.sieveform.elements._fid.value = parent.rcmail.filters_list.rows[id].uid;\n            }\n        }\n        this.gui_objects.sieveform.submit();\n    } else if (this.gui_objects.sievesetrawform) {\n        this.gui_objects.sievesetrawform.submit();\n    }\n};\n\n// Operations on filters form\nrcube_webmail.prototype.managesieve_ruleadd = function (id) {\n    this.http_post('plugin.managesieve-action', '_act=ruleadd&_rid=' + id);\n};\n\nrcube_webmail.prototype.managesieve_rulefill = function (content, id, after) {\n    if (content != '') {\n    // create new element\n        var div = $('#rules')[0],\n            row = $('<div>').attr({ class: 'rulerow', id: 'rulerow' + id })\n                .html(content);\n\n        this.managesieve_insertrow(div, row, after);\n\n        // initialize smart list inputs\n        $('textarea[data-type=\"list\"]', row).each(function () {\n            smart_field_init(this);\n        });\n\n        this.managesieve_formbuttons(div);\n    }\n};\n\nrcube_webmail.prototype.managesieve_ruledel = function (id) {\n    if ($('#ruledel' + id).hasClass('disabled')) {\n        return;\n    }\n\n    this.confirm_dialog(this.get_label('managesieve.ruledeleteconfirm'), 'delete', function (e, ref) {\n        var row = document.getElementById('rulerow' + id);\n        row.parentNode.removeChild(row);\n        ref.managesieve_formbuttons(document.getElementById('rules'));\n    });\n};\n\nrcube_webmail.prototype.managesieve_actionadd = function (id) {\n    this.http_post('plugin.managesieve-action', '_act=actionadd&_aid=' + id);\n};\n\nrcube_webmail.prototype.managesieve_actionfill = function (content, id, after) {\n    if (content != '') {\n        var div = $('#actions')[0],\n            row = $('<div>').attr({ class: 'actionrow', id: 'actionrow' + id })\n                .html(content);\n\n        this.managesieve_insertrow(div, row, after);\n\n        // initialize smart list inputs\n        $('textarea[data-type=\"list\"]', row).each(function () {\n            smart_field_init(this);\n        });\n\n        this.managesieve_formbuttons(div);\n    }\n};\n\nrcube_webmail.prototype.managesieve_actiondel = function (id) {\n    if ($('#actiondel' + id).hasClass('disabled')) {\n        return;\n    }\n\n    this.confirm_dialog(this.get_label('managesieve.actiondeleteconfirm'), 'delete', function (e, ref) {\n        var row = document.getElementById('actionrow' + id);\n        row.parentNode.removeChild(row);\n        ref.managesieve_formbuttons(document.getElementById('actions'));\n    });\n};\n\n// insert rule/action row in specified place on the list\nrcube_webmail.prototype.managesieve_insertrow = function (div, row, after) {\n    var node = $('#' + ($(div).attr('id') == 'rules' ? 'rulerow' : 'actionrow') + after)[0];\n\n    if (node) {\n        $(row).insertAfter(node);\n    } else {\n        $(div).append(row);\n    }\n\n    this.triggerEvent('managesieve.insertrow', { obj: row });\n};\n\n// update Delete buttons status\nrcube_webmail.prototype.managesieve_formbuttons = function (div) {\n    var buttons = $('a.delete', div);\n\n    buttons.removeClass('disabled');\n    if (buttons.length == 1) {\n        buttons.addClass('disabled');\n    }\n};\n\n// update vacation addresses field with user identities\nrcube_webmail.prototype.managesieve_vacation_addresses = function (id) {\n    var lock = this.set_busy(true, 'loading');\n    this.http_post('plugin.managesieve-action', { _act: 'addresses', _aid: id }, lock);\n};\n\n// update vacation addresses field with user identities\nrcube_webmail.prototype.managesieve_vacation_addresses_update = function (id, addresses) {\n    var field = $('#vacation_addresses,#action_addresses' + (id || ''));\n    smart_field_reset(field.get(0), addresses);\n};\n\nfunction rule_header_select(id) {\n    var is_header,\n        obj = document.getElementById('header' + id),\n        size = document.getElementById('rule_size' + id),\n        spamtest = document.getElementById('rule_spamtest' + id),\n        msg = document.getElementById('rule_message' + id),\n        op = document.getElementById('rule_op' + id),\n        header = document.getElementById('custom_header' + id + '_list'),\n        custstr = document.getElementById('custom_var' + id + '_list'),\n        mod = document.getElementById('rule_mod' + id),\n        trans = document.getElementById('rule_trans' + id),\n        comp = document.getElementById('rule_comp' + id),\n        mime = document.getElementById('rule_mime' + id),\n        mime_part = document.getElementById('rule_mime_part' + id),\n        datepart = document.getElementById('rule_date_part' + id),\n        dateheader = document.getElementById('rule_date_header_div' + id),\n        rule = $('#rule_op' + id),\n        h = obj.value,\n        set = [op, header, custstr, mod, trans, comp, size, mime, mime_part];\n\n    if (h == 'size') {\n        if (msg) {\n            set.push(msg);\n        }\n        $.each(set, function () {\n            if (this != window) {\n                this.style.display = 'none';\n            }\n        });\n        if (spamtest) {\n            spamtest.style.display = 'none';\n        }\n        size.style.display = '';\n    } else if (h == 'spamtest') {\n        if (msg) {\n            set.push(msg);\n        }\n        $.each(set, function () {\n            if (this != window) {\n                this.style.display = 'none';\n            }\n        });\n        if (spamtest) {\n            spamtest.style.display = '';\n        }\n        size.style.display = 'none';\n    } else if (h == 'message' && msg) {\n        $.each(set, function () {\n            if (this != window) {\n                this.style.display = 'none';\n            }\n        });\n        msg.style.display = '';\n    } else {\n        is_header = h != 'body' && h != 'currentdate' && h != 'date' && h != 'string';\n        header.style.display = h != '...' ? 'none' : '';\n        custstr.style.display = h != 'string' ? 'none' : '';\n        size.style.display = 'none';\n        op.style.display = '';\n        comp.style.display = '';\n        mod.style.display = is_header ? '' : 'none';\n        trans.style.display = h == 'body' ? '' : 'none';\n        if (spamtest) {\n            spamtest.style.display = 'none';\n        }\n        if (mime) {\n            mime.style.display = is_header ? '' : 'none';\n        }\n        if (mime_part) {\n            mime_part.style.display = is_header ? '' : 'none';\n        }\n        if (msg) {\n            msg.style.display = h == 'message' ? '' : 'none';\n        }\n    }\n\n    if (datepart) {\n        datepart.style.display = h == 'currentdate' || h == 'date' ? 'inline' : 'none';\n    }\n    if (dateheader) {\n        dateheader.style.display = h == 'date' ? '' : 'none';\n    }\n\n    $('[value=\"exists\"],[value=\"notexists\"]', rule).prop('disabled', h == 'string');\n    if (!rule.val()) {\n        rule.val('contains');\n    }\n\n    rule_op_select(op, id, h);\n    rule_mod_select(id, h, !is_header);\n    rule_mime_select(id);\n    if (spamtest) {\n        rule_spamtest_select(id);\n    }\n\n    obj.style.width = h == '...' ? '40px' : '';\n}\n\nfunction rule_op_select(obj, id, header) {\n    var target = document.getElementById('rule_target' + id + '_list');\n\n    if (!header) {\n        header = document.getElementById('header' + id).value;\n    }\n\n    target.style.display = obj.value.match(/^(exists|notexists)$/) || header.match(/^(size|spamtest|message)$/) ? 'none' : '';\n}\n\nfunction rule_trans_select(id) {\n    var obj = document.getElementById('rule_trans_op' + id),\n        target = document.getElementById('rule_trans_type' + id);\n\n    target.style.display = obj.value != 'content' ? 'none' : 'inline';\n}\n\nfunction rule_mod_select(id, header, reset) {\n    var obj = document.getElementById('rule_mod_op' + id),\n        target = document.getElementById('rule_mod_type' + id),\n        duplicate = document.getElementById('rule_duplicate_div' + id),\n        index = document.getElementById('rule_index_div' + id);\n\n    if (reset) {\n        obj.value = '';\n    }\n\n    if (!header) {\n        header = document.getElementById('header' + id).value;\n    }\n\n    target.style.display = obj.value != 'address' && obj.value != 'envelope' ? 'none' : '';\n\n    if (index) {\n        index.style.display = !header.match(/^(body|currentdate|size|spamtest|message|string)$/) && obj.value != 'envelope' ? '' : 'none';\n    }\n\n    if (duplicate) {\n        duplicate.style.display = header == 'message' ? '' : 'none';\n    }\n}\n\nfunction rule_spamtest_select(id) {\n    var obj = document.getElementById('rule_spamtest_op' + id),\n        target = document.getElementById('rule_spamtest_target' + id);\n\n    target.style.display = obj.value ? '' : 'none';\n    $(obj)[obj.value ? 'removeClass' : 'addClass']('rounded-right');\n}\n\nfunction rule_join_radio(value) {\n    $('#rules').css('display', value == 'any' ? 'none' : 'block');\n}\n\nfunction rule_adv_switch(id, elem) {\n    var elem = $(elem), enabled = elem.hasClass('hide'), adv = $('#rule_advanced' + id);\n\n    if (enabled) {\n        adv.get(0).style.display = 'none';\n        elem.removeClass('hide').addClass('show');\n    } else {\n        adv.get(0).style.display = '';\n        elem.removeClass('show').addClass('hide');\n    }\n}\n\nfunction rule_mime_select(id) {\n    var elem = $('#rule_mime_type' + id),\n        param_elem = $('#rule_mime_param' + id + '_list');\n\n    if (param_elem.length) {\n        param_elem[0].style.display = elem.val() == 'param' ? '' : 'none';\n    }\n}\n\nfunction action_type_select(id) {\n    var obj = document.getElementById('action_type' + id),\n        v = obj.value, enabled = {},\n        elems = {\n            mailbox: document.getElementById('action_mailbox' + id),\n            target: document.getElementById('redirect_target' + id),\n            target_area: document.getElementById('action_target_area' + id),\n            flags: document.getElementById('action_flags' + id),\n            vacation: document.getElementById('action_vacation' + id),\n            forward: document.getElementById('action_forward' + id),\n            set: document.getElementById('action_set' + id),\n            notify: document.getElementById('action_notify' + id),\n            addheader: document.getElementById('action_addheader' + id),\n            deleteheader: document.getElementById('action_deleteheader' + id),\n        };\n\n    if (v == 'fileinto' || v == 'fileinto_copy') {\n        enabled.mailbox = 1;\n    } else if (v == 'redirect' || v == 'redirect_copy') {\n        enabled.target = 1;\n    } else if (v.match(/^reject|ereject$/)) {\n        enabled.target_area = 1;\n    } else if (v.match(/^(add|set|remove)flag$/)) {\n        enabled.flags = 1;\n    } else if (v.match(/^(vacation|forward|set|notify|addheader|deleteheader)$/)) {\n        enabled[v] = 1;\n    }\n\n    for (var x in elems) {\n        if (elems[x]) {\n            elems[x].style.display = !enabled[x] ? 'none' : '';\n        }\n    }\n}\n\nfunction vacation_action_select() {\n    var selected = $('#vacation_action').val();\n\n    $('#action_target_span')[selected == 'discard' || selected == 'keep' ? 'hide' : 'show']();\n}\n\n// Initializes smart list input\nfunction smart_field_init(field) {\n    if (window.UI && UI.smart_field_init) {\n        return UI.smart_field_init(field);\n    }\n\n    var id = field.id + '_list',\n        area = $('<span class=\"listarea\"></span>'),\n        list = field.value ? field.value.split('\\n') : [''];\n\n    if ($('#' + id).length) {\n        return;\n    }\n\n    // add input rows\n    $.each(list, function (i, v) {\n        area.append(smart_field_row(v, i, field));\n    });\n\n    area.attr('id', id);\n    field = $(field);\n\n    if (field.attr('disabled')) {\n        area.hide();\n    }\n    // disable the original field anyway, we don't want it in POST\n    else {\n        field.prop('disabled', true);\n    }\n\n    if (field.data('hidden')) {\n        area.hide();\n    }\n\n    field.after(area);\n\n    if (field.hasClass('error')) {\n        area.addClass('error');\n        rcmail.managesieve_tip_register([[id, field.data('tip-class'), field.data('tip-msg')]]);\n    }\n}\n\nfunction smart_field_row(value, idx, field) {\n    // build row element content\n    var input, content = '<span class=\"listelement\">'\n      + '<span class=\"reset\"></span><input type=\"text\"></span>',\n        elem = $(content),\n        attrs = {\n            value: value,\n            name: field.name + '[]',\n            size: $(field).data('size'),\n            title: field.title,\n            placeholder: $(field).attr('placeholder'),\n        };\n\n    input = elem.find('input').attr(attrs).keydown(function (e) {\n        var input = $(this);\n\n        // element creation event (on Enter)\n        if (e.which == 13) {\n            var elem = smart_field_row('', (new Date()).getTime(), field);\n\n            input.parent().after(elem);\n            $('input', elem).focus();\n        }\n        // backspace or delete: remove input, focus previous one\n        else if ((e.which == 8 || e.which == 46) && input.val() == '') {\n            var parent = input.parent(), siblings = parent.parent().children();\n\n            if (siblings.length > 1) {\n                if (parent.prev().length) {\n                    parent.prev().children('input').focus();\n                } else {\n                    parent.next().children('input').focus();\n                }\n\n                parent.remove();\n                return false;\n            }\n        }\n    });\n\n    // element deletion event\n    $('span[class=\"reset\"]', elem).click(function () {\n        var span = $(this.parentNode);\n\n        if (span.parent().children().length > 1) {\n            span.remove();\n        } else {\n            $('input', span).val('').focus();\n        }\n    });\n\n    return elem;\n}\n\n// Reset and fill the smart list input with new data\nfunction smart_field_reset(field, data) {\n    if (window.UI && UI.smart_field_reset) {\n        return UI.smart_field_reset(field, data);\n    }\n\n    var id = field.id + '_list',\n        list = data.length ? data : [''];\n    area = $('#' + id);\n\n    area.empty();\n\n    // add input rows\n    $.each(list, function (i, v) {\n        area.append(smart_field_row(v, i, field));\n    });\n}\n\n// Register onmouse(leave/enter) events for tips on specified form element\nrcube_webmail.prototype.managesieve_tip_register = function (tips) {\n    if (window.UI && UI.form_errors) {\n        return UI.form_errors(tips);\n    }\n\n    var n, framed = parent.rcmail,\n        tip = framed ? parent.rcmail.env.ms_tip_layer : rcmail.env.ms_tip_layer;\n\n    for (n in tips) {\n        $('#' + tips[n][0])\n            .data('tip-class', tips[n][1])\n            .data('tip-msg', tips[n][2])\n            .mouseleave(function (e) {\n                tip.hide();\n            })\n            .mouseenter(function (e) {\n                var elem = $(this),\n                    offset = elem.offset(),\n                    left = offset.left,\n                    top = offset.top - 12,\n                    minwidth = elem.width(),\n                    span = $('<span>').addClass(elem.data('tip-class')).text(elem.data('tip-msg'));\n\n                if (framed) {\n                    offset = $((rcmail.env.task == 'mail' ? '#sievefilterform > iframe' : '#filter-box'), parent.document).offset();\n                    top += offset.top;\n                    left += offset.left;\n                }\n\n                tip.html('').append(span);\n                top -= tip.height();\n\n                tip.css({ left: left, top: top, minWidth: (minwidth - 2) + 'px' }).show();\n            });\n    }\n};\n\n// format time string\nfunction sieve_formattime(hour, minutes) {\n    var i, c, h, time = '', format = rcmail.env.time_format || 'H:i';\n\n    for (i = 0; i < format.length; i++) {\n        c = format.charAt(i);\n        switch (c) {\n            case 'a':\n                time += hour >= 12 ? 'pm' : 'am';\n\n                break;\n            case 'A':\n                time += hour >= 12 ? 'PM' : 'AM';\n\n                break;\n            case 'g':\n            case 'h':\n                h = hour % 12;\n                h = h === 0 ? 12 : h;\n                time += (c === 'h' && h < 10 ? '0' : '') + h;\n\n                break;\n            case 'G':\n                time += hour;\n\n                break;\n            case 'H':\n                time += (hour < 10 ? '0' : '') + hour;\n\n                break;\n            case 'i':\n                time += (minutes < 10 ? '0' : '') + minutes;\n\n                break;\n            case 's':\n                time += '00';\n\n                break;\n            default:\n                time += c;\n        }\n    }\n\n    return time;\n}\n\nfunction sieve_form_init() {\n    var form = rcmail.gui_objects.sieveform;\n\n    // resize dialog window\n    if (rcmail.env.action == 'plugin.managesieve' && rcmail.env.task == 'mail') {\n        parent.rcmail.managesieve_dialog_resize(form);\n    }\n\n    $('input[type=\"text\"]', form).first().focus();\n\n    // initialize smart list inputs\n    $('textarea[data-type=\"list\"]', form).each(function () {\n        smart_field_init(this);\n    });\n\n    // initialize rules form(s)\n    $('[name^=\"_header\"]', form).each(function () {\n        if (/([0-9]+)$/.test(this.id)) {\n            rule_header_select(RegExp.$1);\n        }\n    });\n\n    // enable date pickers on date fields\n    if ($.datepicker && rcmail.env.date_format) {\n        $.datepicker.setDefaults({\n            dateFormat: rcmail.env.date_format,\n            changeMonth: true,\n            showOtherMonths: true,\n            selectOtherMonths: true,\n            onSelect: function (dateText) {\n                $(this).focus().val(dateText);\n            },\n        });\n        $('input.datepicker').datepicker();\n    }\n\n    // configure drop-down menu on time input fields based on jquery UI autocomplete\n    $('#vacation_timefrom, #vacation_timeto')\n        .attr('autocomplete', 'off')\n        .autocomplete({\n            delay: 100,\n            minLength: 1,\n            source: function (p, callback) {\n                var h, result = [];\n                for (h = 0; h < 24; h++) {\n                    result.push(sieve_formattime(h, 0));\n                }\n                result.push(sieve_formattime(23, 59));\n\n                return callback(result);\n            },\n            open: function (event, ui) {\n                // scroll to current time\n                var $this = $(this), val = $this.val(),\n                    widget = $this.autocomplete('widget').css('width', '10em'),\n                    menu = $this.data('ui-autocomplete').menu;\n\n                if (val && val.length) {\n                    widget.children().each(function () {\n                        var li = $(this);\n                        if (li.text().indexOf(val) == 0) {\n                            menu._scrollIntoView(li);\n                        }\n                    });\n                }\n            },\n            select: function (event, ui) {\n                $(this).val(ui.item.value);\n                return false;\n            },\n        })\n        .click(function () { // show drop-down upon clicks\n            $(this).autocomplete('search', $(this).val() || ' ');\n        });\n\n    // display advanced controls when contain errors\n    $('input.error').each(function () {\n        if (String(this.id).match(/([0-9]+)$/)) {\n            $('#ruleadv' + RegExp.$1 + '.show').click();\n        }\n    });\n}\n\n/*********************************************************/\n/* ********        RAW editor methods            *********/\n/*********************************************************/\n\nvar cmeditor;\n\nfunction cmCreateErrorElem(msg) {\n    var marker = document.createElement('div');\n    marker.style.color = '#822';\n    marker.innerHTML = '\u25cf';\n    marker.title = msg;\n\n    return marker;\n}\n\nfunction cmScrollToError() {\n    var line = $('.CodeMirror-lines .line-error'),\n        scroll = $('.CodeMirror-scroll'),\n        h = line.parent();\n\n    scroll.scrollTop(line.offset().top - scroll.offset().top - Math.round(scroll.height() / 2));\n}\n\nfunction sieve_raw_editor_init() {\n    var textArea = document.getElementById('rawfiltersettxt');\n    if (textArea && !cmeditor) {\n        cmeditor = CodeMirror.fromTextArea(textArea, {\n            mode: 'sieve',\n            lineNumbers: true,\n            gutters: ['CodeMirror-linenumbers', 'errorGutter'],\n            styleActiveLine: true,\n        });\n\n        // fetching errors from environment and setting the line background\n        // and a gutter element with the error message accordingly\n        $.each(rcmail.env.sieve_errors || [], function (i, err) {\n            var lineNo = Number(err.line) - 1;\n            cmeditor.addLineClass(lineNo, 'background', 'line-error');\n            cmeditor.setGutterMarker(lineNo, 'errorGutter', cmCreateErrorElem(err.msg));\n            if (!i) {\n                cmScrollToError();\n            }\n        });\n    }\n}\n\n\n/*********************************************************/\n/* ********           Mail UI methods            *********/\n/*********************************************************/\n\nrcube_webmail.prototype.managesieve_create = function (force) {\n    if (!force && this.env.action != 'show') {\n        var uid = this.message_list.get_single_selection(),\n            lock = this.set_busy(true, 'loading');\n\n        this.http_post('plugin.managesieve-action', { _uid: uid }, lock);\n        return;\n    }\n\n    if (!this.env.sieve_headers || !this.env.sieve_headers.length) {\n        return;\n    }\n\n    var i, buttons = {},\n        title = this.get_label('managesieve.newfilter'),\n        dialog = $('<div id=\"sievefilterform\" class=\"propform\"></div>'),\n        props = { minWidth: 600, minHeight: 250, height: 300 };\n\n\n    // build dialog window content\n    dialog.append($('<fieldset>')\n        .append($('<legend>').text(this.get_label('managesieve.usedata')))\n        .append($('<ul class=\"proplist\">'))\n    );\n\n    $.each(this.env.sieve_headers, function (i, v) {\n        var attr = {\n                type: 'checkbox', name: 'headers[]', id: 'sievehdr' + i, value: i, checked: v[2] !== false,\n            },\n            label = v[0] + ': ' + v[1];\n\n        $('ul', dialog).append($('<li>')\n            .append($('<input>').attr(attr))\n            .append($('<label>').attr('for', 'sievehdr' + i).text(label))\n        );\n    });\n\n    // [Next Step] button action\n    buttons[this.get_label('managesieve.nextstep')] = function () {\n    // check if there's at least one checkbox checked\n        var hdrs = $('input[name=\"headers[]\"]:checked', dialog);\n        if (!hdrs.length) {\n            rcmail.alert_dialog(rcmail.get_label('managesieve.nodata'));\n            return;\n        }\n\n        // build frame URL\n        var url = rcmail.get_task_url('mail');\n        url = rcmail.add_url(url, '_action', 'plugin.managesieve');\n        url = rcmail.add_url(url, '_framed', 1);\n\n        hdrs.map(function () {\n            var val = rcmail.env.sieve_headers[this.value];\n            url = rcmail.add_url(url, 'r[' + this.value + ']', val[0] + ':' + val[1]);\n        });\n\n        // load form in the iframe\n        var buttons = {}, iframe = $('<iframe>').attr({ src: url, frameborder: 0 });\n\n        // Change [Next Step] button with [Save] button\n        buttons[rcmail.get_label('save')] = function () {\n            var win = $('iframe', dialog).get(0).contentWindow;\n            win.rcmail.managesieve_save();\n        };\n        buttons[rcmail.get_label('cancel')] = function () {\n            $(this).dialog('destroy');\n        };\n\n        dialog.dialog('destroy');\n\n        rcmail.env.managesieve_dialog = dialog = rcmail.show_popup_dialog(\n            iframe, title, buttons, $.extend(props, { button_classes: ['mainaction save', 'cancel'] })\n        );\n    };\n\n    buttons[this.get_label('cancel')] = function () {\n        $(this).dialog('destroy');\n    };\n\n    this.env.managesieve_dialog = dialog = this.show_popup_dialog(\n        dialog, title, buttons, $.extend(props, { button_classes: ['mainaction next', 'cancel'] })\n    );\n};\n\nrcube_webmail.prototype.managesieve_dialog_close = function () {\n    this.env.managesieve_dialog.dialog('destroy');\n};\n\nrcube_webmail.prototype.managesieve_dialog_resize = function (o) {\n    var dialog = this.env.managesieve_dialog,\n        win = $(window), form = $(o);\n    width = $('fieldset', o).first().width(), // fieldset width is more appropriate here\n    height = form.height(),\n    w = win.width(), h = win.height();\n\n    if (height < 100) {\n        return;\n    }\n\n    dialog.dialog('option', { height: Math.min(h - 20, height + 120), width: Math.min(w - 20, width + 65) });\n};\n", "patch": "@@ -181,7 +181,7 @@ rcube_webmail.prototype.managesieve_setget = function()\n   var id = this.filtersets_list.get_single_selection(),\n     script = this.env.filtersets[id];\n \n-  location.href = this.env.comm_path+'&_action=plugin.managesieve-action&_act=setget&_set='+urlencode(script);\n+  this.goto_url('plugin.managesieve-action', {_act: 'setget', _set: script}, false, true);\n };\n \n // Set activate/deactivate request", "file_path": "files/2016_8\\7", "file_language": "js", "file_name": "plugins/managesieve/managesieve.js", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/4a408843b0ef816daf70a472a02b78cd6073a4d5/plugins/zipdownload/zipdownload.js", "code": "/**\n * ZipDownload plugin script\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (c) 2013-2014, The Roundcube Dev Team\n *\n * The JavaScript code in this page is free software: you can redistribute it\n * and/or modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n */\n\nwindow.rcmail && rcmail.addEventListener('init', function(evt) {\n    // register additional actions\n    rcmail.register_command('download-eml', function() { rcmail_zipdownload('eml'); });\n    rcmail.register_command('download-mbox', function() { rcmail_zipdownload('mbox'); });\n    rcmail.register_command('download-maildir', function() { rcmail_zipdownload('maildir'); });\n\n    // commands status\n    rcmail.message_list && rcmail.message_list.addEventListener('select', function(list) {\n        var selected = list.get_selection().length;\n\n        rcmail.enable_command('download', selected > 0);\n        rcmail.enable_command('download-eml', selected == 1);\n        rcmail.enable_command('download-mbox', 'download-maildir', selected > 1);\n    });\n\n    // hook before default download action\n    rcmail.addEventListener('beforedownload', rcmail_zipdownload_menu);\n\n    // find and modify default download link/button\n    $.each(rcmail.buttons['download'] || [], function() {\n        var link = $('#' + this.id),\n            span = $('span', link);\n\n        if (!span.length) {\n            span = $('<span>');\n            link.html('').append(span);\n        }\n\n        span.text(rcmail.get_label('zipdownload.download'));\n        rcmail.env.download_link = link;\n    });\n  });\n\n\nfunction rcmail_zipdownload(mode)\n{\n    // default .eml download of single message\n    if (mode == 'eml') {\n        var uid = rcmail.get_single_uid();\n        rcmail.goto_url('viewsource', rcmail.params_from_uid(uid, {_save: 1}), false, true);\n        return;\n    }\n\n    // multi-message download, use hidden form to POST selection\n    if (rcmail.message_list && rcmail.message_list.get_selection().length > 1) {\n        var inputs = [], form = $('#zipdownload-form'),\n            post = rcmail.selection_post_data();\n\n        post._mode = mode;\n        post._token = rcmail.env.request_token;\n\n        $.each(post, function(k, v) {\n            if (typeof v == 'object' && v.length > 1) {\n              for (var j=0; j < v.length; j++)\n                  inputs.push($('<input>').attr({type: 'hidden', name: k+'[]', value: v[j]}));\n            }\n            else {\n                inputs.push($('<input>').attr({type: 'hidden', name: k, value: v}));\n            }\n        });\n\n        if (!form.length)\n            form = $('<form>').attr({\n                    style: 'display: none',\n                    method: 'POST',\n                    action: '?_task=mail&_action=plugin.zipdownload.messages'\n                })\n                .appendTo('body');\n\n        form.html('').append(inputs).submit();\n    }\n}\n\n// display download options menu\nfunction rcmail_zipdownload_menu(e)\n{\n    // show (sub)menu for download selection\n    rcmail.command('menu-open', 'zipdownload-menu', e && e.target ? e.target : rcmail.env.download_link, e);\n\n    // abort default download action\n    return false;\n}\n", "code_before": "/**\n * ZipDownload plugin script\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (c) The Roundcube Dev Team\n *\n * The JavaScript code in this page is free software: you can redistribute it\n * and/or modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n */\n\nwindow.rcmail && rcmail.addEventListener('init', function (evt) {\n    // register additional actions\n    rcmail.register_command('download-eml', function () {\n        rcmail_zipdownload('eml');\n    });\n    rcmail.register_command('download-mbox', function () {\n        rcmail_zipdownload('mbox');\n    });\n    rcmail.register_command('download-maildir', function () {\n        rcmail_zipdownload('maildir');\n    });\n\n    // commands status\n    rcmail.message_list && rcmail.message_list.addEventListener('select', function (list) {\n        var selected = list.get_selection().length;\n\n        rcmail.enable_command('download', selected > 0);\n    });\n\n    // hook before default download action\n    rcmail.addEventListener('beforedownload', rcmail_zipdownload_menu);\n\n    // find and modify default download link/button\n    $.each(rcmail.buttons.download || [], function () {\n        var link = $('#' + this.id),\n            span = $('span', link);\n\n        if (!span.length) {\n            span = $('<span>');\n            link.html('').append(span);\n        }\n\n        link.attr('aria-haspopup', 'true');\n\n        span.text(rcmail.get_label('zipdownload.download'));\n        rcmail.env.download_link = link;\n    });\n});\n\n\nfunction rcmail_zipdownload(mode) {\n    // default .eml download of single message\n    if (mode == 'eml') {\n        var uid = rcmail.get_single_uid();\n        rcmail.goto_url('viewsource', rcmail.params_from_uid(uid, { _save: 1 }), false, true);\n        return;\n    }\n\n    // multi-message download, use hidden form to POST selection\n    if (rcmail.message_list && rcmail.message_list.get_selection().length > 1) {\n        var inputs = [],\n            post = rcmail.selection_post_data(),\n            id = 'zipdownload-' + new Date().getTime(),\n            iframe = $('<iframe>').attr({ name: id, style: 'display:none' }),\n            form = $('<form>').attr({\n                target: id,\n                style: 'display: none',\n                method: 'post',\n                action: rcmail.url('mail/plugin.zipdownload.messages'),\n            });\n\n        post._mode = mode;\n        post._token = rcmail.env.request_token;\n\n        $.each(post, function (k, v) {\n            if (typeof v === 'object' && v.length > 1) {\n                for (var j = 0; j < v.length; j++) {\n                    inputs.push($('<input>').attr({ type: 'hidden', name: k + '[]', value: v[j] }));\n                }\n            } else {\n                inputs.push($('<input>').attr({ type: 'hidden', name: k, value: v }));\n            }\n        });\n\n        iframe.appendTo(document.body);\n        form.append(inputs).appendTo(document.body).submit();\n    }\n}\n\n// display download options menu\nfunction rcmail_zipdownload_menu(e) {\n    // Menu option status\n    var selected = rcmail.message_list.get_selection().length;\n    rcmail.enable_command('download-eml', selected == 1);\n    rcmail.enable_command('download-mbox', 'download-maildir', selected > 1);\n\n    // show (sub)menu for download selection\n    rcmail.command('menu-open', 'zipdownload-menu', e && e.target ? e.target : rcmail.env.download_link, e);\n\n    // abort default download action\n    return false;\n}\n", "patch": "@@ -54,7 +54,7 @@ function rcmail_zipdownload(mode)\n     // default .eml download of single message\n     if (mode == 'eml') {\n         var uid = rcmail.get_single_uid();\n-        rcmail.goto_url('viewsource', rcmail.params_from_uid(uid, {_save: 1}));\n+        rcmail.goto_url('viewsource', rcmail.params_from_uid(uid, {_save: 1}), false, true);\n         return;\n     }\n ", "file_path": "files/2016_8\\8", "file_language": "js", "file_name": "plugins/zipdownload/zipdownload.js", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/4a408843b0ef816daf70a472a02b78cd6073a4d5/plugins/zipdownload/zipdownload.php", "code": "<?php\n\n/**\n * ZipDownload\n *\n * Plugin to allow the download of all message attachments in one zip file\n * and downloading of many messages in one go.\n *\n * @version 3.0\n * @requires php_zip extension (including ZipArchive class)\n * @author Philip Weir\n * @author Thomas Bruderli\n * @author Aleksander Machniak\n */\nclass zipdownload extends rcube_plugin\n{\n    public $task = 'mail';\n    private $charset = 'ASCII';\n\n    /**\n     * Plugin initialization\n     */\n    public function init()\n    {\n        // check requirements first\n        if (!class_exists('ZipArchive', false)) {\n            rcmail::raise_error(array(\n                'code'    => 520,\n                'file'    => __FILE__,\n                'line'    => __LINE__,\n                'message' => \"php_zip extension is required for the zipdownload plugin\"), true, false);\n            return;\n        }\n\n        $rcmail = rcmail::get_instance();\n\n        $this->load_config();\n        $this->charset = $rcmail->config->get('zipdownload_charset', RCUBE_CHARSET);\n        $this->add_texts('localization');\n\n        if ($rcmail->config->get('zipdownload_attachments', 1) > -1 && ($rcmail->action == 'show' || $rcmail->action == 'preview')) {\n            $this->add_hook('template_object_messageattachments', array($this, 'attachment_ziplink'));\n        }\n\n        $this->register_action('plugin.zipdownload.attachments', array($this, 'download_attachments'));\n        $this->register_action('plugin.zipdownload.messages', array($this, 'download_messages'));\n\n        if (!$rcmail->action && $rcmail->config->get('zipdownload_selection')) {\n            $this->download_menu();\n        }\n    }\n\n    /**\n     * Place a link/button after attachments listing to trigger download\n     */\n    public function attachment_ziplink($p)\n    {\n        $rcmail = rcmail::get_instance();\n\n        // only show the link if there is more than the configured number of attachments\n        if (substr_count($p['content'], '<li') > $rcmail->config->get('zipdownload_attachments', 1)) {\n            $href = $rcmail->url(array(\n                '_action' => 'plugin.zipdownload.attachments',\n                '_mbox'   => $rcmail->output->env['mailbox'],\n                '_uid'    => $rcmail->output->env['uid'],\n            ), false, false, true);\n\n            $link = html::a(array('href' => $href, 'class' => 'button zipdownload'),\n                rcube::Q($this->gettext('downloadall'))\n            );\n\n            // append link to attachments list, slightly different in some skins\n            switch (rcmail::get_instance()->config->get('skin')) {\n                case 'classic':\n                    $p['content'] = str_replace('</ul>', html::tag('li', array('class' => 'zipdownload'), $link) . '</ul>', $p['content']);\n                    break;\n\n                default:\n                    $p['content'] .= $link;\n                    break;\n            }\n\n            $this->include_stylesheet($this->local_skin_path() . '/zipdownload.css');\n        }\n\n        return $p;\n    }\n\n    /**\n     * Adds download options menu to the page\n     */\n    public function download_menu()\n    {\n        $this->include_script('zipdownload.js');\n        $this->add_label('download');\n\n        $rcmail  = rcmail::get_instance();\n        $menu    = array();\n        $ul_attr = array('role' => 'menu', 'aria-labelledby' => 'aria-label-zipdownloadmenu');\n        if ($rcmail->config->get('skin') != 'classic') {\n            $ul_attr['class'] = 'toolbarmenu';\n        }\n\n        foreach (array('eml', 'mbox', 'maildir') as $type) {\n            $menu[] = html::tag('li', null, $rcmail->output->button(array(\n                    'command'  => \"download-$type\",\n                    'label'    => \"zipdownload.download$type\",\n                    'classact' => 'active',\n            )));\n        }\n\n        $rcmail->output->add_footer(html::div(array('id' => 'zipdownload-menu', 'class' => 'popupmenu', 'aria-hidden' => 'true'),\n            html::tag('h2', array('class' => 'voice', 'id' => 'aria-label-zipdownloadmenu'), \"Message Download Options Menu\") .\n            html::tag('ul', $ul_attr, implode('', $menu))));\n    }\n\n    /**\n     * Handler for attachment download action\n     */\n    public function download_attachments()\n    {\n        $rcmail    = rcmail::get_instance();\n\n        // require CSRF protected request\n        $rcmail->request_security_check(rcube_utils::INPUT_GET);\n\n        $imap      = $rcmail->get_storage();\n        $temp_dir  = $rcmail->config->get('temp_dir');\n        $tmpfname  = tempnam($temp_dir, 'zipdownload');\n        $tempfiles = array($tmpfname);\n        $message   = new rcube_message(rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET));\n\n        // open zip file\n        $zip = new ZipArchive();\n        $zip->open($tmpfname, ZIPARCHIVE::OVERWRITE);\n\n        foreach ($message->attachments as $part) {\n            $pid      = $part->mime_id;\n            $part     = $message->mime_parts[$pid];\n            $filename = $part->filename;\n\n            if ($filename === null || $filename === '') {\n                $ext      = (array) rcube_mime::get_mime_extensions($part->mimetype);\n                $ext      = array_shift($ext);\n                $filename = $rcmail->gettext('messagepart') . ' ' . $pid;\n                if ($ext) {\n                    $filename .= '.' . $ext;\n                }\n            }\n\n            $disp_name   = $this->_convert_filename($filename);\n            $tmpfn       = tempnam($temp_dir, 'zipattach');\n            $tmpfp       = fopen($tmpfn, 'w');\n            $tempfiles[] = $tmpfn;\n\n            $message->get_part_body($part->mime_id, false, 0, $tmpfp);\n            $zip->addFile($tmpfn, $disp_name);\n            fclose($tmpfp);\n        }\n\n        $zip->close();\n\n        $filename = ($message->subject ?: 'roundcube') . '.zip';\n        $this->_deliver_zipfile($tmpfname, $filename);\n\n        // delete temporary files from disk\n        foreach ($tempfiles as $tmpfn) {\n            unlink($tmpfn);\n        }\n\n        exit;\n    }\n\n    /**\n     * Handler for message download action\n     */\n    public function download_messages()\n    {\n        $rcmail = rcmail::get_instance();\n\n        if ($rcmail->config->get('zipdownload_selection') && !empty($_POST['_uid'])) {\n            $messageset = rcmail::get_uids();\n            if (sizeof($messageset)) {\n                $this->_download_messages($messageset);\n            }\n        }\n    }\n\n    /**\n     * Helper method to packs all the given messages into a zip archive\n     *\n     * @param array List of message UIDs to download\n     */\n    private function _download_messages($messageset)\n    {\n        $rcmail    = rcmail::get_instance();\n        $imap      = $rcmail->get_storage();\n        $mode      = rcube_utils::get_input_value('_mode', rcube_utils::INPUT_POST);\n        $temp_dir  = $rcmail->config->get('temp_dir');\n        $tmpfname  = tempnam($temp_dir, 'zipdownload');\n        $tempfiles = array($tmpfname);\n        $folders   = count($messageset) > 1;\n\n        // @TODO: file size limit\n\n        // open zip file\n        $zip = new ZipArchive();\n        $zip->open($tmpfname, ZIPARCHIVE::OVERWRITE);\n\n        if ($mode == 'mbox') {\n            $tmpfp = fopen($tmpfname . '.mbox', 'w');\n        }\n\n        foreach ($messageset as $mbox => $uids) {\n            $imap->set_folder($mbox);\n            $path = $folders ? str_replace($imap->get_hierarchy_delimiter(), '/', $mbox) . '/' : '';\n\n            if ($uids === '*') {\n                $index = $imap->index($mbox, null, null, true);\n                $uids  = $index->get();\n            }\n\n            foreach ($uids as $uid) {\n                $headers = $imap->get_message_headers($uid);\n\n                if ($mode == 'mbox') {\n                    $from = rcube_mime::decode_address_list($headers->from, null, true, $headers->charset, true);\n                    $from = array_shift($from);\n\n                    // Mbox format header\n                    // @FIXME: \\r\\n or \\n\n                    // @FIXME: date format\n                    $header = sprintf(\"From %s %s\\r\\n\",\n                        // replace spaces with hyphens\n                        $from ? preg_replace('/\\s/', '-', $from) : 'MAILER-DAEMON',\n                        // internaldate\n                        $headers->internaldate\n                    );\n\n                    fwrite($tmpfp, $header);\n\n                    // Use stream filter to quote \"From \" in the message body\n                    stream_filter_register('mbox_filter', 'zipdownload_mbox_filter');\n                    $filter = stream_filter_append($tmpfp, 'mbox_filter');\n                    $imap->get_raw_body($uid, $tmpfp);\n                    stream_filter_remove($filter);\n                    fwrite($tmpfp, \"\\r\\n\");\n                }\n                else { // maildir\n                    $subject = rcube_mime::decode_mime_string((string)$headers->subject);\n                    $subject = $this->_convert_filename($subject);\n                    $subject = substr($subject, 0, 16);\n\n                    $disp_name = ($subject ?: 'message_rfc822') . \".eml\";\n                    $disp_name = $path . $uid . \"_\" . $disp_name;\n\n                    $tmpfn = tempnam($temp_dir, 'zipmessage');\n                    $tmpfp = fopen($tmpfn, 'w');\n                    $imap->get_raw_body($uid, $tmpfp);\n                    $tempfiles[] = $tmpfn;\n                    fclose($tmpfp);\n                    $zip->addFile($tmpfn, $disp_name);\n                }\n            }\n        }\n\n        $filename = $folders ? 'messages' : $imap->get_folder();\n\n        if ($mode == 'mbox') {\n            $tempfiles[] = $tmpfname . '.mbox';\n            fclose($tmpfp);\n            $zip->addFile($tmpfname . '.mbox', $filename . '.mbox');\n        }\n\n        $zip->close();\n\n        $this->_deliver_zipfile($tmpfname, $filename . '.zip');\n\n        // delete temporary files from disk\n        foreach ($tempfiles as $tmpfn) {\n            unlink($tmpfn);\n        }\n\n        exit;\n    }\n\n    /**\n     * Helper method to send the zip archive to the browser\n     */\n    private function _deliver_zipfile($tmpfname, $filename)\n    {\n        $browser = new rcube_browser;\n        $rcmail  = rcmail::get_instance();\n\n        $rcmail->output->nocacheing_headers();\n\n        if ($browser->ie)\n            $filename = rawurlencode($filename);\n        else\n            $filename = addcslashes($filename, '\"');\n\n        // send download headers\n        header(\"Content-Type: application/octet-stream\");\n        if ($browser->ie) {\n            header(\"Content-Type: application/force-download\");\n        }\n\n        // don't kill the connection if download takes more than 30 sec.\n        @set_time_limit(0);\n        header(\"Content-Disposition: attachment; filename=\\\"\". $filename .\"\\\"\");\n        header(\"Content-length: \" . filesize($tmpfname));\n        readfile($tmpfname);\n    }\n\n    /**\n     * Helper function to convert filenames to the configured charset\n     */\n    private function _convert_filename($str)\n    {\n        $str = rcube_charset::convert($str, RCUBE_CHARSET, $this->charset);\n\n        return strtr($str, array(':' => '', '/' => '-'));\n    }\n}\n\nclass zipdownload_mbox_filter extends php_user_filter\n{\n    function filter($in, $out, &$consumed, $closing)\n    {\n        while ($bucket = stream_bucket_make_writeable($in)) {\n            // messages are read line by line\n            if (preg_match('/^>*From /', $bucket->data)) {\n                $bucket->data     = '>' . $bucket->data;\n                $bucket->datalen += 1;\n            }\n\n            $consumed += $bucket->datalen;\n            stream_bucket_append($out, $bucket);\n        }\n\n        return PSFS_PASS_ON;\n    }\n}\n", "code_before": "<?php\n\n/**\n * ZipDownload\n *\n * Plugin to allow the download of all message attachments in one zip file\n * and also download of many messages in one go.\n *\n * @requires php_zip extension (including ZipArchive class)\n *\n * @author Philip Weir\n * @author Thomas Bruderli\n * @author Aleksander Machniak\n */\nclass zipdownload extends rcube_plugin\n{\n    public $task = 'mail';\n\n    private $charset = 'ASCII';\n    private $names = [];\n    private $default_limit = '50MB';\n\n    // RFC4155: mbox date format\n    public const MBOX_DATE_FORMAT = 'D M d H:i:s Y';\n\n    /**\n     * Plugin initialization\n     */\n    #[Override]\n    public function init()\n    {\n        // check requirements first\n        if (!class_exists('ZipArchive', false)) {\n            rcmail::raise_error([\n                'code' => 520,\n                'message' => 'php-zip extension is required for the zipdownload plugin',\n            ], true, false);\n            return;\n        }\n\n        $rcmail = rcmail::get_instance();\n\n        $this->load_config();\n        $this->charset = $rcmail->config->get('zipdownload_charset', RCUBE_CHARSET);\n\n        if ($rcmail->config->get('zipdownload_attachments', 1) > -1 && ($rcmail->action == 'show' || $rcmail->action == 'preview')) {\n            $this->add_texts('localization');\n            $this->add_hook('template_object_messageattachments', [$this, 'attachment_ziplink']);\n        }\n\n        $this->register_action('plugin.zipdownload.attachments', [$this, 'download_attachments']);\n        $this->register_action('plugin.zipdownload.messages', [$this, 'download_messages']);\n\n        if (!$rcmail->action && $rcmail->config->get('zipdownload_selection', $this->default_limit)) {\n            $this->add_texts('localization');\n            $this->download_menu();\n        }\n    }\n\n    /**\n     * Place a link/button after attachments listing to trigger download\n     */\n    public function attachment_ziplink($p)\n    {\n        $rcmail = rcmail::get_instance();\n\n        // only show the link if there is more than the configured number of attachments\n        if (substr_count($p['content'], '<li') > $rcmail->config->get('zipdownload_attachments', 1)) {\n            $href = $rcmail->url([\n                    '_action' => 'plugin.zipdownload.attachments',\n                    '_mbox' => $rcmail->output->get_env('mailbox'),\n                    '_uid' => $rcmail->output->get_env('uid'),\n                ],\n                false, false, true\n            );\n\n            // append the link to the attachments list\n            $p['content'] .= html::a(\n                ['href' => $href, 'class' => 'button zipdownload'],\n                rcube::Q($this->gettext('downloadall'))\n            );\n\n            $this->include_stylesheet($this->local_skin_path() . '/zipdownload.css');\n        }\n\n        return $p;\n    }\n\n    /**\n     * Adds download options menu to the page\n     */\n    public function download_menu()\n    {\n        $this->include_script('zipdownload.js');\n        $this->add_label('export');\n\n        $rcmail = rcmail::get_instance();\n        $menu = [];\n        $ul_attr = [\n            'role' => 'menu',\n            'aria-labelledby' => 'aria-label-zipdownloadmenu',\n            'class' => 'toolbarmenu menu',\n        ];\n\n        foreach (['eml', 'mbox', 'maildir'] as $type) {\n            $menu[] = html::tag('li', null, $rcmail->output->button([\n                    'command' => \"download-{$type}\",\n                    'label' => \"zipdownload.download{$type}\",\n                    'class' => \"download {$type} disabled\",\n                    'classact' => \"download {$type} active\",\n                    'type' => 'link',\n                ])\n            );\n        }\n\n        $rcmail->output->add_footer(\n            html::div(['id' => 'zipdownload-menu', 'class' => 'popupmenu', 'aria-hidden' => 'true'],\n                html::tag('h2', ['class' => 'voice', 'id' => 'aria-label-zipdownloadmenu'], rcube::Q($this->gettext('exportmenu')))\n                . html::tag('ul', $ul_attr, implode('', $menu))\n            )\n        );\n    }\n\n    /**\n     * Handler for attachment download action\n     */\n    public function download_attachments()\n    {\n        $rcmail = rcmail::get_instance();\n\n        // require CSRF protected request\n        $rcmail->request_security_check(rcube_utils::INPUT_GET);\n\n        $tmpfname = rcube_utils::temp_filename('zipdownload');\n        $tempfiles = [$tmpfname];\n        $message = new rcube_message(rcube_utils::get_input_string('_uid', rcube_utils::INPUT_GET));\n\n        // open zip file\n        $zip = new ZipArchive();\n        $zip->open($tmpfname, ZipArchive::OVERWRITE);\n\n        foreach ($message->attachments as $part) {\n            $disp_name = $this->_create_displayname($part);\n\n            $tmpfn = rcube_utils::temp_filename('zipattach');\n            $tmpfp = fopen($tmpfn, 'w');\n            $tempfiles[] = $tmpfn;\n\n            $message->get_part_body($part->mime_id, false, 0, $tmpfp);\n            $zip->addFile($tmpfn, $disp_name);\n            fclose($tmpfp);\n        }\n\n        $zip->close();\n\n        $filename = ($this->_filename_from_subject($message->subject) ?: 'attachments') . '.zip';\n\n        $this->_deliver_zipfile($tmpfname, $filename);\n\n        // delete temporary files from disk\n        foreach ($tempfiles as $tmpfn) {\n            unlink($tmpfn);\n        }\n\n        exit;\n    }\n\n    /**\n     * Handler for message download action\n     */\n    public function download_messages()\n    {\n        $rcmail = rcmail::get_instance();\n\n        if ($rcmail->config->get('zipdownload_selection', $this->default_limit)) {\n            $messageset = rcmail_action::get_uids(null, null, $multi, rcube_utils::INPUT_POST);\n            if (count($messageset)) {\n                $this->_download_messages($messageset);\n            }\n        }\n    }\n\n    /**\n     * Create and get display name of attachment part to add on zip file\n     *\n     * @param rcube_message_part $part Part of attachment on message\n     *\n     * @return string Display name of attachment part\n     */\n    private function _create_displayname($part)\n    {\n        $rcmail = rcmail::get_instance();\n        $filename = $part->filename;\n\n        if ($filename === null || $filename === '') {\n            $ext = array_first((array) rcube_mime::get_mime_extensions($part->mimetype));\n            $filename = $rcmail->gettext('messagepart') . ' ' . $part->mime_id;\n            if ($ext) {\n                $filename .= '.' . $ext;\n            }\n        }\n\n        $displayname = $this->_convert_filename($filename);\n\n        /*\n         * Adding a number before dot of extension on a name of file with same name on zip\n         * Ext: attach(1).txt on attach filename that has a attach.txt filename on same zip\n         */\n        if (isset($this->names[$displayname])) {\n            [$filename, $ext] = preg_split('/\\.(?=[^\\.]*$)/', $displayname);\n            $displayname = $filename . '(' . ($this->names[$displayname]++) . ').' . $ext;\n            $this->names[$displayname] = 1;\n        } else {\n            $this->names[$displayname] = 1;\n        }\n\n        return $displayname;\n    }\n\n    /**\n     * Helper method to packs all the given messages into a zip archive\n     *\n     * @param array $messageset List of message UIDs to download\n     */\n    private function _download_messages($messageset)\n    {\n        $this->add_texts('localization');\n\n        $rcmail = rcmail::get_instance();\n        $imap = $rcmail->get_storage();\n        $mode = rcube_utils::get_input_string('_mode', rcube_utils::INPUT_POST);\n        $limit = $rcmail->config->get('zipdownload_selection', $this->default_limit);\n        $limit = $limit !== true ? parse_bytes($limit) : -1;\n        $delimiter = $imap->get_hierarchy_delimiter();\n        $tmpfname = rcube_utils::temp_filename('zipdownload');\n        $tempfiles = [$tmpfname];\n        $folders = count($messageset) > 1;\n        $timezone = new DateTimeZone('UTC');\n        $messages = [];\n        $size = 0;\n\n        // collect messages metadata (and check size limit)\n        foreach ($messageset as $mbox => $uids) {\n            $imap->set_folder($mbox);\n\n            if ($uids === '*') {\n                $index = $imap->index($mbox, null, null, true);\n                $uids = $index->get();\n            }\n\n            foreach ($uids as $uid) {\n                $headers = $imap->get_message_headers($uid);\n\n                if ($mode == 'mbox') {\n                    // Sender address\n                    $from = rcube_mime::decode_address_list($headers->from, null, true, $headers->charset, true);\n                    $from = array_shift($from);\n                    $from = preg_replace('/\\s/', '-', $from);\n\n                    // Received (internal) date\n                    $date = rcube_utils::anytodatetime($headers->internaldate, $timezone);\n                    if ($date) {\n                        $date = $date->format(self::MBOX_DATE_FORMAT);\n                    }\n\n                    // Mbox format header (RFC4155)\n                    $header = sprintf(\"From %s %s\\r\\n\",\n                        $from ?: 'MAILER-DAEMON',\n                        $date ?: ''\n                    );\n\n                    $messages[$uid . ':' . $mbox] = $header;\n                } else { // maildir\n                    $subject = rcube_mime::decode_header($headers->subject, $headers->charset);\n                    $subject = $this->_filename_from_subject(mb_substr($subject, 0, 16));\n                    $subject = $this->_convert_filename($subject);\n\n                    $path = $folders ? str_replace($delimiter, '/', $mbox) . '/' : '';\n                    $disp_name = $path . $uid . ($subject ? \" {$subject}\" : '') . '.eml';\n\n                    $messages[$uid . ':' . $mbox] = $disp_name;\n                }\n\n                $size += $headers->size;\n\n                if ($limit > 0 && $size > $limit) {\n                    unlink($tmpfname);\n\n                    $msg = $this->gettext([\n                        'name' => 'sizelimiterror',\n                        'vars' => ['$size' => rcmail_action::show_bytes($limit)],\n                    ]);\n\n                    $rcmail->output->show_message($msg, 'error');\n                    $rcmail->output->send('iframe');\n                    exit;\n                }\n            }\n        }\n\n        if ($mode == 'mbox') {\n            $tmpfp = fopen($tmpfname . '.mbox', 'w');\n            if (!$tmpfp) {\n                exit;\n            }\n        }\n\n        // open zip file\n        $zip = new ZipArchive();\n        $zip->open($tmpfname, ZipArchive::OVERWRITE);\n\n        $last_key = array_key_last($messages);\n        foreach ($messages as $key => $value) {\n            [$uid, $mbox] = explode(':', $key, 2);\n            $imap->set_folder($mbox);\n\n            if (!empty($tmpfp)) {\n                fwrite($tmpfp, $value);\n\n                // Use stream filter to quote \"From \" in the message body\n                stream_filter_register('mbox_filter', 'zipdownload_mbox_filter');\n                $filter = stream_filter_append($tmpfp, 'mbox_filter');\n                $imap->get_raw_body($uid, $tmpfp);\n                stream_filter_remove($filter);\n\n                // Make sure the delimiter is a double \\r\\n\n                $fstat = fstat($tmpfp);\n                if (stream_get_contents($tmpfp, 2, $fstat['size'] - 2) != \"\\r\\n\") {\n                    fwrite($tmpfp, \"\\r\\n\");\n                }\n                if ($key != $last_key) {\n                    fwrite($tmpfp, \"\\r\\n\");\n                }\n            } else { // maildir\n                $tmpfn = rcube_utils::temp_filename('zipmessage');\n                $fp = fopen($tmpfn, 'w');\n                $imap->get_raw_body($uid, $fp);\n                $tempfiles[] = $tmpfn;\n                fclose($fp);\n                $zip->addFile($tmpfn, $value);\n            }\n        }\n\n        $filename = $folders ? 'messages' : $imap->get_folder();\n\n        if (!empty($tmpfp)) {\n            $tempfiles[] = $tmpfname . '.mbox';\n            fclose($tmpfp);\n            $zip->addFile($tmpfname . '.mbox', $filename . '.mbox');\n        }\n\n        $zip->close();\n\n        $this->_deliver_zipfile($tmpfname, $filename . '.zip');\n\n        // delete temporary files from disk\n        foreach ($tempfiles as $tmpfn) {\n            unlink($tmpfn);\n        }\n\n        exit;\n    }\n\n    /**\n     * Helper method to send the zip archive to the browser\n     */\n    private function _deliver_zipfile($tmpfname, $filename)\n    {\n        $rcmail = rcmail::get_instance();\n\n        $rcmail->output->download_headers($filename, ['length' => filesize($tmpfname)]);\n\n        readfile($tmpfname);\n    }\n\n    /**\n     * Helper function to convert filenames to the configured charset\n     */\n    private function _convert_filename($str)\n    {\n        $str = strtr($str, [':' => '', '/' => '-']);\n\n        return rcube_charset::convert($str, RCUBE_CHARSET, $this->charset);\n    }\n\n    /**\n     * Helper function to convert message subject into filename\n     */\n    private function _filename_from_subject($str)\n    {\n        $str = preg_replace('/[\\t\\n\\r\\0\\x0B]+\\s*/', ' ', $str);\n\n        return trim($str, ' ./_');\n    }\n}\n\nclass zipdownload_mbox_filter extends php_user_filter\n{\n    #[Override]\n    #[ReturnTypeWillChange]\n    public function filter($in, $out, &$consumed, $closing)\n    {\n        while ($bucket = stream_bucket_make_writeable($in)) {\n            // messages are read line by line\n            if (preg_match('/^>*From /', $bucket->data)) {\n                $bucket->data = '>' . $bucket->data;\n                $bucket->datalen++;\n            }\n\n            $consumed += (int) $bucket->datalen;\n            stream_bucket_append($out, $bucket);\n        }\n\n        return \\PSFS_PASS_ON;\n    }\n}\n", "patch": "@@ -63,7 +63,7 @@ public function attachment_ziplink($p)\n                 '_action' => 'plugin.zipdownload.attachments',\n                 '_mbox'   => $rcmail->output->env['mailbox'],\n                 '_uid'    => $rcmail->output->env['uid'],\n-            ));\n+            ), false, false, true);\n \n             $link = html::a(array('href' => $href, 'class' => 'button zipdownload'),\n                 rcube::Q($this->gettext('downloadall'))\n@@ -120,6 +120,10 @@ public function download_menu()\n     public function download_attachments()\n     {\n         $rcmail    = rcmail::get_instance();\n+\n+        // require CSRF protected request\n+        $rcmail->request_security_check(rcube_utils::INPUT_GET);\n+\n         $imap      = $rcmail->get_storage();\n         $temp_dir  = $rcmail->config->get('temp_dir');\n         $tmpfname  = tempnam($temp_dir, 'zipdownload');", "file_path": "files/2016_8\\9", "file_language": "php", "file_name": "plugins/zipdownload/zipdownload.php", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/4a408843b0ef816daf70a472a02b78cd6073a4d5/program/include/rcmail.php", "code": "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | program/include/rcmail.php                                            |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2008-2014, The Roundcube Dev Team                       |\n | Copyright (C) 2011-2014, Kolab Systems AG                             |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Application class providing core functions and holding              |\n |   instances of all 'global' objects like db- and imap-connections     |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <alec@alec.pl>                            |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Application class of Roundcube Webmail\n * implemented as singleton\n *\n * @package Webmail\n */\nclass rcmail extends rcube\n{\n    /**\n     * Main tasks.\n     *\n     * @var array\n     */\n    static public $main_tasks = array('mail','settings','addressbook','login','logout','utils','dummy');\n\n    /**\n     * Current task.\n     *\n     * @var string\n     */\n    public $task;\n\n    /**\n     * Current action.\n     *\n     * @var string\n     */\n    public $action    = '';\n    public $comm_path = './';\n    public $filename  = '';\n\n    private $address_books = array();\n    private $action_map    = array();\n\n\n    const ERROR_STORAGE          = -2;\n    const ERROR_INVALID_REQUEST  = 1;\n    const ERROR_INVALID_HOST     = 2;\n    const ERROR_COOKIES_DISABLED = 3;\n    const ERROR_RATE_LIMIT       = 4;\n\n\n    /**\n     * This implements the 'singleton' design pattern\n     *\n     * @param integer $mode Ignored rcube::get_instance() argument\n     * @param string  $env  Environment name to run (e.g. live, dev, test)\n     *\n     * @return rcmail The one and only instance\n     */\n    static function get_instance($mode = 0, $env = '')\n    {\n        if (!self::$instance || !is_a(self::$instance, 'rcmail')) {\n            self::$instance = new rcmail($env);\n            // init AFTER object was linked with self::$instance\n            self::$instance->startup();\n        }\n\n        return self::$instance;\n    }\n\n    /**\n     * Initial startup function\n     * to register session, create database and imap connections\n     */\n    protected function startup()\n    {\n        $this->init(self::INIT_WITH_DB | self::INIT_WITH_PLUGINS);\n\n        // set filename if not index.php\n        if (($basename = basename($_SERVER['SCRIPT_FILENAME'])) && $basename != 'index.php') {\n            $this->filename = $basename;\n        }\n\n        // load all configured plugins\n        $plugins          = (array) $this->config->get('plugins', array());\n        $required_plugins = array('filesystem_attachments', 'jqueryui');\n        $this->plugins->load_plugins($plugins, $required_plugins);\n\n        // start session\n        $this->session_init();\n\n        // create user object\n        $this->set_user(new rcube_user($_SESSION['user_id']));\n\n        // set task and action properties\n        $this->set_task(rcube_utils::get_input_value('_task', rcube_utils::INPUT_GPC));\n        $this->action = asciiwords(rcube_utils::get_input_value('_action', rcube_utils::INPUT_GPC));\n\n        // reset some session parameters when changing task\n        if ($this->task != 'utils') {\n            // we reset list page when switching to another task\n            // but only to the main task interface - empty action (#1489076, #1490116)\n            // this will prevent from unintentional page reset on cross-task requests\n            if ($this->session && $_SESSION['task'] != $this->task && empty($this->action)) {\n                $this->session->remove('page');\n\n                // set current task to session\n                $_SESSION['task'] = $this->task;\n            }\n        }\n\n        // init output class (not in CLI mode)\n        if (!empty($_REQUEST['_remote'])) {\n            $GLOBALS['OUTPUT'] = $this->json_init();\n        }\n        else if ($_SERVER['REMOTE_ADDR']) {\n            $GLOBALS['OUTPUT'] = $this->load_gui(!empty($_REQUEST['_framed']));\n        }\n\n        // run init method on all the plugins\n        $this->plugins->init($this, $this->task);\n    }\n\n    /**\n     * Setter for application task\n     *\n     * @param string Task to set\n     */\n    public function set_task($task)\n    {\n        $task = asciiwords($task, true);\n\n        if ($this->user && $this->user->ID)\n            $task = !$task ? 'mail' : $task;\n        else if (php_sapi_name() == 'cli')\n            $task = 'cli';\n        else\n            $task = 'login';\n\n        $this->task      = $task;\n        $this->comm_path = $this->url(array('task' => $this->task));\n\n        if (!empty($_REQUEST['_framed'])) {\n            $this->comm_path .= '&_framed=1';\n        }\n\n        if ($this->output) {\n            $this->output->set_env('task', $this->task);\n            $this->output->set_env('comm_path', $this->comm_path);\n        }\n    }\n\n    /**\n     * Setter for system user object\n     *\n     * @param rcube_user Current user instance\n     */\n    public function set_user($user)\n    {\n        parent::set_user($user);\n\n        $lang = $this->language_prop($this->config->get('language', $_SESSION['language']));\n        $_SESSION['language'] = $this->user->language = $lang;\n\n        // set localization\n        setlocale(LC_ALL, $lang . '.utf8', $lang . '.UTF-8', 'en_US.utf8', 'en_US.UTF-8');\n\n        // Workaround for http://bugs.php.net/bug.php?id=18556\n        // Also strtoupper/strtolower and other methods are locale-aware\n        // for these locales it is problematic (#1490519)\n        if (in_array($lang, array('tr_TR', 'ku', 'az_AZ'))) {\n            setlocale(LC_CTYPE, 'en_US.utf8', 'en_US.UTF-8', 'C');\n        }\n    }\n\n    /**\n     * Return instance of the internal address book class\n     *\n     * @param string  Address book identifier (-1 for default addressbook)\n     * @param boolean True if the address book needs to be writeable\n     *\n     * @return rcube_contacts Address book object\n     */\n    public function get_address_book($id, $writeable = false)\n    {\n        $contacts    = null;\n        $ldap_config = (array)$this->config->get('ldap_public');\n\n        // 'sql' is the alias for '0' used by autocomplete\n        if ($id == 'sql')\n            $id = '0';\n        else if ($id == -1) {\n            $id = $this->config->get('default_addressbook');\n            $default = true;\n        }\n\n        // use existing instance\n        if (isset($this->address_books[$id]) && ($this->address_books[$id] instanceof rcube_addressbook)) {\n            $contacts = $this->address_books[$id];\n        }\n        else if ($id && $ldap_config[$id]) {\n            $domain   = $this->config->mail_domain($_SESSION['storage_host']);\n            $contacts = new rcube_ldap($ldap_config[$id], $this->config->get('ldap_debug'), $domain);\n        }\n        else if ($id === '0') {\n            $contacts = new rcube_contacts($this->db, $this->get_user_id());\n        }\n        else {\n            $plugin = $this->plugins->exec_hook('addressbook_get', array('id' => $id, 'writeable' => $writeable));\n\n            // plugin returned instance of a rcube_addressbook\n            if ($plugin['instance'] instanceof rcube_addressbook) {\n                $contacts = $plugin['instance'];\n            }\n        }\n\n        // when user requested default writeable addressbook\n        // we need to check if default is writeable, if not we\n        // will return first writeable book (if any exist)\n        if ($contacts && $default && $contacts->readonly && $writeable) {\n            $contacts = null;\n        }\n\n        // Get first addressbook from the list if configured default doesn't exist\n        // This can happen when user deleted the addressbook (e.g. Kolab folder)\n        if (!$contacts && (!$id || $default)) {\n            $source = reset($this->get_address_sources($writeable, !$default));\n            if (!empty($source)) {\n                $contacts = $this->get_address_book($source['id']);\n                if ($contacts) {\n                    $id = $source['id'];\n                }\n            }\n        }\n\n        if (!$contacts) {\n            // there's no default, just return\n            if ($default) {\n                return null;\n            }\n\n            self::raise_error(array(\n                    'code'    => 700,\n                    'file'    => __FILE__,\n                    'line'    => __LINE__,\n                    'message' => \"Addressbook source ($id) not found!\"\n                ),\n                true, true);\n        }\n\n        // add to the 'books' array for shutdown function\n        $this->address_books[$id] = $contacts;\n\n        if ($writeable && $contacts->readonly) {\n            return null;\n        }\n\n        // set configured sort order\n        if ($sort_col = $this->config->get('addressbook_sort_col')) {\n            $contacts->set_sort_order($sort_col);\n        }\n\n        return $contacts;\n    }\n\n    /**\n     * Return identifier of the address book object\n     *\n     * @param rcube_addressbook Addressbook source object\n     *\n     * @return string Source identifier\n     */\n    public function get_address_book_id($object)\n    {\n        foreach ($this->address_books as $index => $book) {\n            if ($book === $object) {\n                return $index;\n            }\n        }\n    }\n\n    /**\n     * Return address books list\n     *\n     * @param boolean True if the address book needs to be writeable\n     * @param boolean True if the address book needs to be not hidden\n     *\n     * @return array  Address books array\n     */\n    public function get_address_sources($writeable = false, $skip_hidden = false)\n    {\n        $abook_type   = (string) $this->config->get('address_book_type');\n        $ldap_config  = (array) $this->config->get('ldap_public');\n        $autocomplete = (array) $this->config->get('autocomplete_addressbooks');\n        $list         = array();\n\n        // We are using the DB address book or a plugin address book\n        if (!empty($abook_type) && strtolower($abook_type) != 'ldap') {\n            if (!isset($this->address_books['0'])) {\n                $this->address_books['0'] = new rcube_contacts($this->db, $this->get_user_id());\n            }\n\n            $list['0'] = array(\n                'id'       => '0',\n                'name'     => $this->gettext('personaladrbook'),\n                'groups'   => $this->address_books['0']->groups,\n                'readonly' => $this->address_books['0']->readonly,\n                'undelete' => $this->address_books['0']->undelete && $this->config->get('undo_timeout'),\n                'autocomplete' => in_array('sql', $autocomplete),\n            );\n        }\n\n        if (!empty($ldap_config)) {\n            foreach ($ldap_config as $id => $prop) {\n                // handle misconfiguration\n                if (empty($prop) || !is_array($prop)) {\n                    continue;\n                }\n\n                $list[$id] = array(\n                    'id'       => $id,\n                    'name'     => html::quote($prop['name']),\n                    'groups'   => !empty($prop['groups']) || !empty($prop['group_filters']),\n                    'readonly' => !$prop['writable'],\n                    'hidden'   => $prop['hidden'],\n                    'autocomplete' => in_array($id, $autocomplete)\n                );\n            }\n        }\n\n        $plugin = $this->plugins->exec_hook('addressbooks_list', array('sources' => $list));\n        $list   = $plugin['sources'];\n\n        foreach ($list as $idx => $item) {\n            // register source for shutdown function\n            if (!is_object($this->address_books[$item['id']])) {\n                $this->address_books[$item['id']] = $item;\n            }\n            // remove from list if not writeable as requested\n            if ($writeable && $item['readonly']) {\n                unset($list[$idx]);\n            }\n            // remove from list if hidden as requested\n            else if ($skip_hidden && $item['hidden']) {\n                unset($list[$idx]);\n            }\n        }\n\n        return $list;\n    }\n\n    /**\n     * Getter for compose responses.\n     * These are stored in local config and user preferences.\n     *\n     * @param boolean True to sort the list alphabetically\n     * @param boolean True if only this user's responses shall be listed\n     *\n     * @return array List of the current user's stored responses\n     */\n    public function get_compose_responses($sorted = false, $user_only = false)\n    {\n        $responses = array();\n\n        if (!$user_only) {\n            foreach ($this->config->get('compose_responses_static', array()) as $response) {\n                if (empty($response['key'])) {\n                    $response['key']    = substr(md5($response['name']), 0, 16);\n                }\n\n                $response['static'] = true;\n                $response['class']  = 'readonly';\n\n                $k = $sorted ? '0000-' . strtolower($response['name']) : $response['key'];\n                $responses[$k] = $response;\n            }\n        }\n\n        foreach ($this->config->get('compose_responses', array()) as $response) {\n            if (empty($response['key'])) {\n                $response['key'] = substr(md5($response['name']), 0, 16);\n            }\n\n            $k = $sorted ? strtolower($response['name']) : $response['key'];\n            $responses[$k] = $response;\n        }\n\n        // sort list by name\n        if ($sorted) {\n            ksort($responses, SORT_LOCALE_STRING);\n        }\n\n        return array_values($responses);\n    }\n\n    /**\n     * Init output object for GUI and add common scripts.\n     * This will instantiate a rcmail_output_html object and set\n     * environment vars according to the current session and configuration\n     *\n     * @param boolean True if this request is loaded in a (i)frame\n     *\n     * @return rcube_output Reference to HTML output object\n     */\n    public function load_gui($framed = false)\n    {\n        // init output page\n        if (!($this->output instanceof rcmail_output_html)) {\n            $this->output = new rcmail_output_html($this->task, $framed);\n        }\n\n        // set refresh interval\n        $this->output->set_env('refresh_interval', $this->config->get('refresh_interval', 0));\n        $this->output->set_env('session_lifetime', $this->config->get('session_lifetime', 0) * 60);\n\n        if ($framed) {\n            $this->comm_path .= '&_framed=1';\n            $this->output->set_env('framed', true);\n        }\n\n        $this->output->set_env('task', $this->task);\n        $this->output->set_env('action', $this->action);\n        $this->output->set_env('comm_path', $this->comm_path);\n        $this->output->set_charset(RCUBE_CHARSET);\n\n        if ($this->user && $this->user->ID) {\n            $this->output->set_env('user_id', $this->user->get_hash());\n        }\n\n        // set compose mode for all tasks (message compose step can be triggered from everywhere)\n        $this->output->set_env('compose_extwin', $this->config->get('compose_extwin',false));\n\n        // add some basic labels to client\n        $this->output->add_label('loading', 'servererror', 'connerror', 'requesttimedout',\n            'refreshing', 'windowopenerror', 'uploadingmany');\n\n        return $this->output;\n    }\n\n    /**\n     * Create an output object for JSON responses\n     *\n     * @return rcube_output Reference to JSON output object\n     */\n    public function json_init()\n    {\n        if (!($this->output instanceof rcmail_output_json)) {\n            $this->output = new rcmail_output_json($this->task);\n        }\n\n        return $this->output;\n    }\n\n    /**\n     * Create session object and start the session.\n     */\n    public function session_init()\n    {\n        parent::session_init();\n\n        // set initial session vars\n        if (!$_SESSION['user_id']) {\n            $_SESSION['temp'] = true;\n        }\n\n        // restore skin selection after logout\n        if ($_SESSION['temp'] && !empty($_SESSION['skin'])) {\n            $this->config->set('skin', $_SESSION['skin']);\n        }\n    }\n\n    /**\n     * Perfom login to the mail server and to the webmail service.\n     * This will also create a new user entry if auto_create_user is configured.\n     *\n     * @param string Mail storage (IMAP) user name\n     * @param string Mail storage (IMAP) password\n     * @param string Mail storage (IMAP) host\n     * @param bool   Enables cookie check\n     *\n     * @return boolean True on success, False on failure\n     */\n    function login($username, $password, $host = null, $cookiecheck = false)\n    {\n        $this->login_error = null;\n\n        if (empty($username)) {\n            return false;\n        }\n\n        if ($cookiecheck && empty($_COOKIE)) {\n            $this->login_error = self::ERROR_COOKIES_DISABLED;\n            return false;\n        }\n\n        $username_filter = $this->config->get('login_username_filter');\n        $username_maxlen = $this->config->get('login_username_maxlen', 1024);\n        $password_maxlen = $this->config->get('login_password_maxlen', 1024);\n        $default_host    = $this->config->get('default_host');\n        $default_port    = $this->config->get('default_port');\n        $username_domain = $this->config->get('username_domain');\n        $login_lc        = $this->config->get('login_lc', 2);\n\n        // check input for security (#1490500)\n        if (($username_maxlen && strlen($username) > $username_maxlen)\n            || ($username_filter && !preg_match($username_filter, $username))\n            || ($password_maxlen && strlen($password) > $password_maxlen)\n        ) {\n            $this->login_error = self::ERROR_INVALID_REQUEST;\n            return false;\n        }\n\n        // host is validated in rcmail::autoselect_host(), so here\n        // we'll only handle unset host (if possible)\n        if (!$host && !empty($default_host)) {\n            if (is_array($default_host)) {\n                list($key, $val) = each($default_host);\n                $host = is_numeric($key) ? $val : $key;\n            }\n            else {\n                $host = $default_host;\n            }\n\n            $host = rcube_utils::parse_host($host);\n        }\n\n        if (!$host) {\n            $this->login_error = self::ERROR_INVALID_HOST;\n            return false;\n        }\n\n        // parse $host URL\n        $a_host = parse_url($host);\n        if ($a_host['host']) {\n            $host = $a_host['host'];\n            $ssl  = (isset($a_host['scheme']) && in_array($a_host['scheme'], array('ssl','imaps','tls'))) ? $a_host['scheme'] : null;\n\n            if (!empty($a_host['port']))\n                $port = $a_host['port'];\n            else if ($ssl && $ssl != 'tls' && (!$default_port || $default_port == 143))\n                $port = 993;\n        }\n\n        if (!$port) {\n            $port = $default_port;\n        }\n\n        // Check if we need to add/force domain to username\n        if (!empty($username_domain)) {\n            $domain = is_array($username_domain) ? $username_domain[$host] : $username_domain;\n\n            if ($domain = rcube_utils::parse_host((string)$domain, $host)) {\n                $pos = strpos($username, '@');\n\n                // force configured domains\n                if ($pos !== false && $this->config->get('username_domain_forced')) {\n                    $username = substr($username, 0, $pos) . '@' . $domain;\n                }\n                // just add domain if not specified\n                else if ($pos === false) {\n                    $username .= '@' . $domain;\n                }\n            }\n        }\n\n        // Convert username to lowercase. If storage backend\n        // is case-insensitive we need to store always the same username (#1487113)\n        if ($login_lc) {\n            if ($login_lc == 2 || $login_lc === true) {\n                $username = mb_strtolower($username);\n            }\n            else if (strpos($username, '@')) {\n                // lowercase domain name\n                list($local, $domain) = explode('@', $username);\n                $username = $local . '@' . mb_strtolower($domain);\n            }\n        }\n\n        // try to resolve email address from virtuser table\n        if (strpos($username, '@') && ($virtuser = rcube_user::email2user($username))) {\n            $username = $virtuser;\n        }\n\n        // Here we need IDNA ASCII\n        // Only rcube_contacts class is using domain names in Unicode\n        $host     = rcube_utils::idn_to_ascii($host);\n        $username = rcube_utils::idn_to_ascii($username);\n\n        // user already registered -> overwrite username\n        if ($user = rcube_user::query($username, $host)) {\n            $username = $user->data['username'];\n\n            // Brute-force prevention\n            if ($user->is_locked()) {\n                $this->login_error = self::ERROR_RATE_LIMIT;\n                return false;\n            }\n        }\n\n        $storage = $this->get_storage();\n\n        // try to log in\n        if (!$storage->connect($host, $username, $password, $port, $ssl)) {\n            if ($user) {\n                $user->failed_login();\n            }\n\n            // Wait a second to slow down brute-force attacks (#1490549)\n            sleep(1);\n            return false;\n        }\n\n        // user already registered -> update user's record\n        if (is_object($user)) {\n            // update last login timestamp\n            $user->touch();\n        }\n        // create new system user\n        else if ($this->config->get('auto_create_user')) {\n            if ($created = rcube_user::create($username, $host)) {\n                $user = $created;\n            }\n            else {\n                self::raise_error(array(\n                        'code'    => 620,\n                        'file'    => __FILE__,\n                        'line'    => __LINE__,\n                        'message' => \"Failed to create a user record. Maybe aborted by a plugin?\"\n                    ),\n                    true, false);\n            }\n        }\n        else {\n            self::raise_error(array(\n                    'code'    => 621,\n                    'file'    => __FILE__,\n                    'line'    => __LINE__,\n                    'message' => \"Access denied for new user $username. 'auto_create_user' is disabled\"\n                ),\n                true, false);\n        }\n\n        // login succeeded\n        if (is_object($user) && $user->ID) {\n            // Configure environment\n            $this->set_user($user);\n            $this->set_storage_prop();\n\n            // set session vars\n            $_SESSION['user_id']      = $user->ID;\n            $_SESSION['username']     = $user->data['username'];\n            $_SESSION['storage_host'] = $host;\n            $_SESSION['storage_port'] = $port;\n            $_SESSION['storage_ssl']  = $ssl;\n            $_SESSION['password']     = $this->encrypt($password);\n            $_SESSION['login_time']   = time();\n\n            if (isset($_REQUEST['_timezone']) && $_REQUEST['_timezone'] != '_default_') {\n                $_SESSION['timezone'] = rcube_utils::get_input_value('_timezone', rcube_utils::INPUT_GPC);\n            }\n\n            // fix some old settings according to namespace prefix\n            $this->fix_namespace_settings($user);\n\n            // set/create special folders\n            $this->set_special_folders();\n\n            // clear all mailboxes related cache(s)\n            $storage->clear_cache('mailboxes', true);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns error code of last login operation\n     *\n     * @return int Error code\n     */\n    public function login_error()\n    {\n        if ($this->login_error) {\n            return $this->login_error;\n        }\n\n        if ($this->storage && $this->storage->get_error_code() < -1) {\n            return self::ERROR_STORAGE;\n        }\n    }\n\n    /**\n     * Auto-select IMAP host based on the posted login information\n     *\n     * @return string Selected IMAP host\n     */\n    public function autoselect_host()\n    {\n        $default_host = $this->config->get('default_host');\n        $host         = null;\n\n        if (is_array($default_host)) {\n            $post_host = rcube_utils::get_input_value('_host', rcube_utils::INPUT_POST);\n            $post_user = rcube_utils::get_input_value('_user', rcube_utils::INPUT_POST);\n\n            list(, $domain) = explode('@', $post_user);\n\n            // direct match in default_host array\n            if ($default_host[$post_host] || in_array($post_host, array_values($default_host))) {\n                $host = $post_host;\n            }\n            // try to select host by mail domain\n            else if (!empty($domain)) {\n                foreach ($default_host as $storage_host => $mail_domains) {\n                    if (is_array($mail_domains) && in_array_nocase($domain, $mail_domains)) {\n                        $host = $storage_host;\n                        break;\n                    }\n                    else if (stripos($storage_host, $domain) !== false || stripos(strval($mail_domains), $domain) !== false) {\n                        $host = is_numeric($storage_host) ? $mail_domains : $storage_host;\n                        break;\n                    }\n                }\n            }\n\n            // take the first entry if $host is still not set\n            if (empty($host)) {\n                list($key, $val) = each($default_host);\n                $host = is_numeric($key) ? $val : $key;\n            }\n        }\n        else if (empty($default_host)) {\n            $host = rcube_utils::get_input_value('_host', rcube_utils::INPUT_POST);\n        }\n        else {\n            $host = rcube_utils::parse_host($default_host);\n        }\n\n        return $host;\n    }\n\n    /**\n     * Destroy session data and remove cookie\n     */\n    public function kill_session()\n    {\n        $this->plugins->exec_hook('session_destroy');\n\n        $this->session->kill();\n        $_SESSION = array('language' => $this->user->language, 'temp' => true, 'skin' => $this->config->get('skin'));\n        $this->user->reset();\n    }\n\n    /**\n     * Do server side actions on logout\n     */\n    public function logout_actions()\n    {\n        $storage        = $this->get_storage();\n        $logout_expunge = $this->config->get('logout_expunge');\n        $logout_purge   = $this->config->get('logout_purge');\n        $trash_mbox     = $this->config->get('trash_mbox');\n\n        if ($logout_purge && !empty($trash_mbox)) {\n            $storage->clear_folder($trash_mbox);\n        }\n\n        if ($logout_expunge) {\n            $storage->expunge_folder('INBOX');\n        }\n\n        // Try to save unsaved user preferences\n        if (!empty($_SESSION['preferences'])) {\n            $this->user->save_prefs(unserialize($_SESSION['preferences']));\n        }\n    }\n\n    /**\n     * Build a valid URL to this instance of Roundcube\n     *\n     * @param mixed   Either a string with the action or url parameters as key-value pairs\n     * @param boolean Build an URL absolute to document root\n     * @param boolean Create fully qualified URL including http(s):// and hostname\n     * @param bool    Return absolute URL in secure location\n     *\n     * @return string Valid application URL\n     */\n    public function url($p, $absolute = false, $full = false, $secure = false)\n    {\n        if (!is_array($p)) {\n            if (strpos($p, 'http') === 0) {\n                return $p;\n            }\n\n            $p = array('_action' => @func_get_arg(0));\n        }\n\n        $pre = array();\n        $task = $p['_task'] ?: ($p['task'] ?: $this->task);\n        $pre['_task'] = $task;\n        unset($p['task'], $p['_task']);\n\n        $url  = $this->filename;\n        $delm = '?';\n\n        foreach (array_merge($pre, $p) as $key => $val) {\n            if ($val !== '' && $val !== null) {\n                $par  = $key[0] == '_' ? $key : '_'.$key;\n                $url .= $delm.urlencode($par).'='.urlencode($val);\n                $delm = '&';\n            }\n        }\n\n        $base_path = strval($_SERVER['REDIRECT_SCRIPT_URL'] ?: $_SERVER['SCRIPT_NAME']);\n        $base_path = preg_replace('![^/]+$!', '', $base_path);\n\n        if ($secure && ($token = $this->get_secure_url_token(true))) {\n            // add token to the url\n            $url = $token . '/' . $url;\n\n            // remove old token from the path\n            $base_path = rtrim($base_path, '/');\n            $base_path = preg_replace('/\\/[a-zA-Z0-9]{' . strlen($token) . '}$/', '', $base_path);\n\n            // this need to be full url to make redirects work\n            $absolute = true;\n        }\n        else if ($secure && ($token = $this->get_request_token()))\n            $url .= $delm . '_token=' . urlencode($token);\n\n        if ($absolute || $full) {\n            // add base path to this Roundcube installation\n            if ($base_path == '') $base_path = '/';\n            $prefix = $base_path;\n\n            // prepend protocol://hostname:port\n            if ($full) {\n                $prefix = rcube_utils::resolve_url($prefix);\n            }\n\n            $prefix = rtrim($prefix, '/') . '/';\n        }\n        else {\n            $prefix = './';\n        }\n\n        return $prefix . $url;\n    }\n\n    /**\n     * Function to be executed in script shutdown\n     */\n    public function shutdown()\n    {\n        parent::shutdown();\n\n        foreach ($this->address_books as $book) {\n            if (is_object($book) && is_a($book, 'rcube_addressbook'))\n                $book->close();\n        }\n\n        // write performance stats to logs/console\n        if ($this->config->get('devel_mode') || $this->config->get('performance_stats')) {\n            // make sure logged numbers use unified format\n            setlocale(LC_NUMERIC, 'en_US.utf8', 'en_US.UTF-8', 'en_US', 'C');\n\n            if (function_exists('memory_get_usage'))\n                $mem = $this->show_bytes(memory_get_usage());\n            if (function_exists('memory_get_peak_usage'))\n                $mem .= '/'.$this->show_bytes(memory_get_peak_usage());\n\n            $log = $this->task . ($this->action ? '/'.$this->action : '') . ($mem ? \" [$mem]\" : '');\n\n            if (defined('RCMAIL_START'))\n                self::print_timer(RCMAIL_START, $log);\n            else\n                self::console($log);\n        }\n    }\n\n    /**\n     * CSRF attack prevention code\n     *\n     * @param int Request mode\n     */\n    public function request_security_check($mode = rcube_utils::INPUT_POST)\n    {\n        // check request token\n        if (!$this->check_request($mode)) {\n            self::raise_error(array(\n                'code' => 403, 'type' => 'php',\n                'message' => \"Request security check failed\"), false, true);\n        }\n\n        // check referer if configured\n        if ($this->config->get('referer_check') && !rcube_utils::check_referer()) {\n            self::raise_error(array(\n                'code' => 403, 'type' => 'php',\n                'message' => \"Referer check failed\"), true, true);\n        }\n    }\n\n    /**\n     * Registers action aliases for current task\n     *\n     * @param array $map Alias-to-filename hash array\n     */\n    public function register_action_map($map)\n    {\n        if (is_array($map)) {\n            foreach ($map as $idx => $val) {\n                $this->action_map[$idx] = $val;\n            }\n        }\n    }\n\n    /**\n     * Returns current action filename\n     *\n     * @param array $map Alias-to-filename hash array\n     */\n    public function get_action_file()\n    {\n        if (!empty($this->action_map[$this->action])) {\n            return $this->action_map[$this->action];\n        }\n\n        return strtr($this->action, '-', '_') . '.inc';\n    }\n\n    /**\n     * Fixes some user preferences according to namespace handling change.\n     * Old Roundcube versions were using folder names with removed namespace prefix.\n     * Now we need to add the prefix on servers where personal namespace has prefix.\n     *\n     * @param rcube_user $user User object\n     */\n    private function fix_namespace_settings($user)\n    {\n        $prefix     = $this->storage->get_namespace('prefix');\n        $prefix_len = strlen($prefix);\n\n        if (!$prefix_len) {\n            return;\n        }\n\n        if ($this->config->get('namespace_fixed')) {\n            return;\n        }\n\n        $prefs = array();\n\n        // Build namespace prefix regexp\n        $ns     = $this->storage->get_namespace();\n        $regexp = array();\n\n        foreach ($ns as $entry) {\n            if (!empty($entry)) {\n                foreach ($entry as $item) {\n                    if (strlen($item[0])) {\n                        $regexp[] = preg_quote($item[0], '/');\n                    }\n                }\n            }\n        }\n        $regexp = '/^('. implode('|', $regexp).')/';\n\n        // Fix preferences\n        $opts = array('drafts_mbox', 'junk_mbox', 'sent_mbox', 'trash_mbox', 'archive_mbox');\n        foreach ($opts as $opt) {\n            if ($value = $this->config->get($opt)) {\n                if ($value != 'INBOX' && !preg_match($regexp, $value)) {\n                    $prefs[$opt] = $prefix.$value;\n                }\n            }\n        }\n\n        if (($search_mods = $this->config->get('search_mods')) && !empty($search_mods)) {\n            $folders = array();\n            foreach ($search_mods as $idx => $value) {\n                if ($idx != 'INBOX' && $idx != '*' && !preg_match($regexp, $idx)) {\n                    $idx = $prefix.$idx;\n                }\n                $folders[$idx] = $value;\n            }\n\n            $prefs['search_mods'] = $folders;\n        }\n\n        if (($threading = $this->config->get('message_threading')) && !empty($threading)) {\n            $folders = array();\n            foreach ($threading as $idx => $value) {\n                if ($idx != 'INBOX' && !preg_match($regexp, $idx)) {\n                    $idx = $prefix.$idx;\n                }\n                $folders[$prefix.$idx] = $value;\n            }\n\n            $prefs['message_threading'] = $folders;\n        }\n\n        if ($collapsed = $this->config->get('collapsed_folders')) {\n            $folders     = explode('&&', $collapsed);\n            $count       = count($folders);\n            $folders_str = '';\n\n            if ($count) {\n                $folders[0]        = substr($folders[0], 1);\n                $folders[$count-1] = substr($folders[$count-1], 0, -1);\n            }\n\n            foreach ($folders as $value) {\n                if ($value != 'INBOX' && !preg_match($regexp, $value)) {\n                    $value = $prefix.$value;\n                }\n                $folders_str .= '&'.$value.'&';\n            }\n\n            $prefs['collapsed_folders'] = $folders_str;\n        }\n\n        $prefs['namespace_fixed'] = true;\n\n        // save updated preferences and reset imap settings (default folders)\n        $user->save_prefs($prefs);\n        $this->set_storage_prop();\n    }\n\n    /**\n     * Overwrite action variable\n     *\n     * @param string New action value\n     */\n    public function overwrite_action($action)\n    {\n        $this->action = $action;\n        $this->output->set_env('action', $action);\n    }\n\n    /**\n     * Set environment variables for specified config options\n     */\n    public function set_env_config($options)\n    {\n        foreach ((array) $options as $option) {\n            if ($this->config->get($option)) {\n                $this->output->set_env($option, true);\n            }\n        }\n    }\n\n    /**\n     * Returns RFC2822 formatted current date in user's timezone\n     *\n     * @return string Date\n     */\n    public function user_date()\n    {\n        // get user's timezone\n        try {\n            $tz   = new DateTimeZone($this->config->get('timezone'));\n            $date = new DateTime('now', $tz);\n        }\n        catch (Exception $e) {\n            $date = new DateTime();\n        }\n\n        return $date->format('r');\n    }\n\n    /**\n     * Write login data (name, ID, IP address) to the 'userlogins' log file.\n     */\n    public function log_login($user = null, $failed_login = false, $error_code = 0)\n    {\n        if (!$this->config->get('log_logins')) {\n            return;\n        }\n\n        // failed login\n        if ($failed_login) {\n            // don't fill the log with complete input, which could\n            // have been prepared by a hacker\n            if (strlen($user) > 256) {\n                $user = substr($user, 0, 256) . '...';\n            }\n\n            $message = sprintf('Failed login for %s from %s in session %s (error: %d)',\n                $user, rcube_utils::remote_ip(), session_id(), $error_code);\n        }\n        // successful login\n        else {\n            $user_name = $this->get_user_name();\n            $user_id   = $this->get_user_id();\n\n            if (!$user_id) {\n                return;\n            }\n\n            $message = sprintf('Successful login for %s (ID: %d) from %s in session %s',\n                $user_name, $user_id, rcube_utils::remote_ip(), session_id());\n        }\n\n        // log login\n        self::write_log('userlogins', $message);\n    }\n\n    /**\n     * Create a HTML table based on the given data\n     *\n     * @param  array  Named table attributes\n     * @param  mixed  Table row data. Either a two-dimensional array or a valid SQL result set\n     * @param  array  List of cols to show\n     * @param  string Name of the identifier col\n     *\n     * @return string HTML table code\n     */\n    public function table_output($attrib, $table_data, $a_show_cols, $id_col)\n    {\n        $table = new html_table($attrib);\n\n        // add table header\n        if (!$attrib['noheader']) {\n            foreach ($a_show_cols as $col) {\n                $table->add_header($col, $this->Q($this->gettext($col)));\n            }\n        }\n\n        if (!is_array($table_data)) {\n            $db = $this->get_dbh();\n            while ($table_data && ($sql_arr = $db->fetch_assoc($table_data))) {\n                $table->add_row(array('id' => 'rcmrow' . rcube_utils::html_identifier($sql_arr[$id_col])));\n\n                // format each col\n                foreach ($a_show_cols as $col) {\n                    $table->add($col, $this->Q($sql_arr[$col]));\n                }\n            }\n        }\n        else {\n            foreach ($table_data as $row_data) {\n                $class = !empty($row_data['class']) ? $row_data['class'] : null;\n                if (!empty($attrib['rowclass']))\n                    $class = trim($class . ' ' . $attrib['rowclass']);\n                $rowid = 'rcmrow' . rcube_utils::html_identifier($row_data[$id_col]);\n\n                $table->add_row(array('id' => $rowid, 'class' => $class));\n\n                // format each col\n                foreach ($a_show_cols as $col) {\n                    $val = is_array($row_data[$col]) ? $row_data[$col][0] : $row_data[$col];\n                    $table->add($col, empty($attrib['ishtml']) ? $this->Q($val) : $val);\n                }\n            }\n        }\n\n        return $table->show($attrib);\n    }\n\n    /**\n     * Convert the given date to a human readable form\n     * This uses the date formatting properties from config\n     *\n     * @param mixed  Date representation (string, timestamp or DateTime object)\n     * @param string Date format to use\n     * @param bool   Enables date convertion according to user timezone\n     *\n     * @return string Formatted date string\n     */\n    public function format_date($date, $format = null, $convert = true)\n    {\n        if (is_object($date) && is_a($date, 'DateTime')) {\n            $timestamp = $date->format('U');\n        }\n        else {\n            if (!empty($date)) {\n                $timestamp = rcube_utils::strtotime($date);\n            }\n\n            if (empty($timestamp)) {\n                return '';\n            }\n\n            try {\n                $date = new DateTime(\"@\".$timestamp);\n            }\n            catch (Exception $e) {\n                return '';\n            }\n        }\n\n        if ($convert) {\n            try {\n                // convert to the right timezone\n                $stz = date_default_timezone_get();\n                $tz = new DateTimeZone($this->config->get('timezone'));\n                $date->setTimezone($tz);\n                date_default_timezone_set($tz->getName());\n\n                $timestamp = $date->format('U');\n            }\n            catch (Exception $e) {\n            }\n        }\n\n        // define date format depending on current time\n        if (!$format) {\n            $now         = time();\n            $now_date    = getdate($now);\n            $today_limit = mktime(0, 0, 0, $now_date['mon'], $now_date['mday'], $now_date['year']);\n            $week_limit  = mktime(0, 0, 0, $now_date['mon'], $now_date['mday']-6, $now_date['year']);\n            $pretty_date = $this->config->get('prettydate');\n\n            if ($pretty_date && $timestamp > $today_limit && $timestamp <= $now) {\n                $format = $this->config->get('date_today', $this->config->get('time_format', 'H:i'));\n                $today  = true;\n            }\n            else if ($pretty_date && $timestamp > $week_limit && $timestamp <= $now) {\n                $format = $this->config->get('date_short', 'D H:i');\n            }\n            else {\n                $format = $this->config->get('date_long', 'Y-m-d H:i');\n            }\n        }\n\n        // strftime() format\n        if (preg_match('/%[a-z]+/i', $format)) {\n            $format = strftime($format, $timestamp);\n            if ($stz) {\n                date_default_timezone_set($stz);\n            }\n            return $today ? ($this->gettext('today') . ' ' . $format) : $format;\n        }\n\n        // parse format string manually in order to provide localized weekday and month names\n        // an alternative would be to convert the date() format string to fit with strftime()\n        $out = '';\n        for ($i=0; $i<strlen($format); $i++) {\n            if ($format[$i] == \"\\\\\") {  // skip escape chars\n                continue;\n            }\n\n            // write char \"as-is\"\n            if ($format[$i] == ' ' || $format[$i-1] == \"\\\\\") {\n                $out .= $format[$i];\n            }\n            // weekday (short)\n            else if ($format[$i] == 'D') {\n                $out .= $this->gettext(strtolower(date('D', $timestamp)));\n            }\n            // weekday long\n            else if ($format[$i] == 'l') {\n                $out .= $this->gettext(strtolower(date('l', $timestamp)));\n            }\n            // month name (short)\n            else if ($format[$i] == 'M') {\n                $out .= $this->gettext(strtolower(date('M', $timestamp)));\n            }\n            // month name (long)\n            else if ($format[$i] == 'F') {\n                $out .= $this->gettext('long'.strtolower(date('M', $timestamp)));\n            }\n            else if ($format[$i] == 'x') {\n                $out .= strftime('%x %X', $timestamp);\n            }\n            else {\n                $out .= date($format[$i], $timestamp);\n            }\n        }\n\n        if ($today) {\n            $label = $this->gettext('today');\n            // replcae $ character with \"Today\" label (#1486120)\n            if (strpos($out, '$') !== false) {\n                $out = preg_replace('/\\$/', $label, $out, 1);\n            }\n            else {\n                $out = $label . ' ' . $out;\n            }\n        }\n\n        if ($stz) {\n            date_default_timezone_set($stz);\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return folders list in HTML\n     *\n     * @param array $attrib Named parameters\n     *\n     * @return string HTML code for the gui object\n     */\n    public function folder_list($attrib)\n    {\n        static $a_mailboxes;\n\n        $attrib += array('maxlength' => 100, 'realnames' => false, 'unreadwrap' => ' (%s)');\n\n        $rcmail  = rcmail::get_instance();\n        $storage = $rcmail->get_storage();\n\n        // add some labels to client\n        $rcmail->output->add_label('purgefolderconfirm', 'deletemessagesconfirm');\n\n        $type = $attrib['type'] ? $attrib['type'] : 'ul';\n        unset($attrib['type']);\n\n        if ($type == 'ul' && !$attrib['id']) {\n            $attrib['id'] = 'rcmboxlist';\n        }\n\n        if (empty($attrib['folder_name'])) {\n            $attrib['folder_name'] = '*';\n        }\n\n        // get current folder\n        $mbox_name = $storage->get_folder();\n\n        // build the folders tree\n        if (empty($a_mailboxes)) {\n            // get mailbox list\n            $a_folders = $storage->list_folders_subscribed(\n                '', $attrib['folder_name'], $attrib['folder_filter']);\n            $delimiter = $storage->get_hierarchy_delimiter();\n            $a_mailboxes = array();\n\n            foreach ($a_folders as $folder) {\n                $rcmail->build_folder_tree($a_mailboxes, $folder, $delimiter);\n            }\n        }\n\n        // allow plugins to alter the folder tree or to localize folder names\n        $hook = $rcmail->plugins->exec_hook('render_mailboxlist', array(\n            'list'      => $a_mailboxes,\n            'delimiter' => $delimiter,\n            'type'      => $type,\n            'attribs'   => $attrib,\n        ));\n\n        $a_mailboxes = $hook['list'];\n        $attrib      = $hook['attribs'];\n\n        if ($type == 'select') {\n            $attrib['is_escaped'] = true;\n            $select = new html_select($attrib);\n\n            // add no-selection option\n            if ($attrib['noselection']) {\n                $select->add(html::quote($rcmail->gettext($attrib['noselection'])), '');\n            }\n\n            $rcmail->render_folder_tree_select($a_mailboxes, $mbox_name, $attrib['maxlength'], $select, $attrib['realnames']);\n            $out = $select->show($attrib['default']);\n        }\n        else {\n            $js_mailboxlist = array();\n            $tree = $rcmail->render_folder_tree_html($a_mailboxes, $mbox_name, $js_mailboxlist, $attrib);\n\n            if ($type != 'js') {\n                $out = html::tag('ul', $attrib, $tree, html::$common_attrib);\n\n                $rcmail->output->include_script('treelist.js');\n                $rcmail->output->add_gui_object('mailboxlist', $attrib['id']);\n                $rcmail->output->set_env('unreadwrap', $attrib['unreadwrap']);\n                $rcmail->output->set_env('collapsed_folders', (string)$rcmail->config->get('collapsed_folders'));\n            }\n\n            $rcmail->output->set_env('mailboxes', $js_mailboxlist);\n\n            // we can't use object keys in javascript because they are unordered\n            // we need sorted folders list for folder-selector widget\n            $rcmail->output->set_env('mailboxes_list', array_keys($js_mailboxlist));\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return folders list as html_select object\n     *\n     * @param array $p  Named parameters\n     *\n     * @return html_select HTML drop-down object\n     */\n    public function folder_selector($p = array())\n    {\n        $realnames = $this->config->get('show_real_foldernames');\n        $p += array('maxlength' => 100, 'realnames' => $realnames, 'is_escaped' => true);\n        $a_mailboxes = array();\n        $storage = $this->get_storage();\n\n        if (empty($p['folder_name'])) {\n            $p['folder_name'] = '*';\n        }\n\n        if ($p['unsubscribed']) {\n            $list = $storage->list_folders('', $p['folder_name'], $p['folder_filter'], $p['folder_rights']);\n        }\n        else {\n            $list = $storage->list_folders_subscribed('', $p['folder_name'], $p['folder_filter'], $p['folder_rights']);\n        }\n\n        $delimiter = $storage->get_hierarchy_delimiter();\n\n        if (!empty($p['exceptions'])) {\n            $list = array_diff($list, (array) $p['exceptions']);\n        }\n\n        if (!empty($p['additional'])) {\n            foreach ($p['additional'] as $add_folder) {\n                $add_items = explode($delimiter, $add_folder);\n                $folder    = '';\n                while (count($add_items)) {\n                    $folder .= array_shift($add_items);\n\n                    // @TODO: sorting\n                    if (!in_array($folder, $list)) {\n                        $list[] = $folder;\n                    }\n\n                    $folder .= $delimiter;\n                }\n            }\n        }\n\n        foreach ($list as $folder) {\n            $this->build_folder_tree($a_mailboxes, $folder, $delimiter);\n        }\n\n        $select = new html_select($p);\n\n        if ($p['noselection']) {\n            $select->add(html::quote($p['noselection']), '');\n        }\n\n        $this->render_folder_tree_select($a_mailboxes, $mbox, $p['maxlength'], $select, $p['realnames'], 0, $p);\n\n        return $select;\n    }\n\n    /**\n     * Create a hierarchical array of the mailbox list\n     */\n    public function build_folder_tree(&$arrFolders, $folder, $delm = '/', $path = '')\n    {\n        // Handle namespace prefix\n        $prefix = '';\n        if (!$path) {\n            $n_folder = $folder;\n            $folder = $this->storage->mod_folder($folder);\n\n            if ($n_folder != $folder) {\n                $prefix = substr($n_folder, 0, -strlen($folder));\n            }\n        }\n\n        $pos = strpos($folder, $delm);\n\n        if ($pos !== false) {\n            $subFolders    = substr($folder, $pos+1);\n            $currentFolder = substr($folder, 0, $pos);\n\n            // sometimes folder has a delimiter as the last character\n            if (!strlen($subFolders)) {\n                $virtual = false;\n            }\n            else if (!isset($arrFolders[$currentFolder])) {\n                $virtual = true;\n            }\n            else {\n                $virtual = $arrFolders[$currentFolder]['virtual'];\n            }\n        }\n        else {\n            $subFolders    = false;\n            $currentFolder = $folder;\n            $virtual       = false;\n        }\n\n        $path .= $prefix . $currentFolder;\n\n        if (!isset($arrFolders[$currentFolder])) {\n            $arrFolders[$currentFolder] = array(\n                'id' => $path,\n                'name' => rcube_charset::convert($currentFolder, 'UTF7-IMAP'),\n                'virtual' => $virtual,\n                'folders' => array());\n        }\n        else {\n            $arrFolders[$currentFolder]['virtual'] = $virtual;\n        }\n\n        if (strlen($subFolders)) {\n            $this->build_folder_tree($arrFolders[$currentFolder]['folders'], $subFolders, $delm, $path.$delm);\n        }\n    }\n\n    /**\n     * Return html for a structured list &lt;ul&gt; for the mailbox tree\n     */\n    public function render_folder_tree_html(&$arrFolders, &$mbox_name, &$jslist, $attrib, $nestLevel = 0)\n    {\n        $maxlength = intval($attrib['maxlength']);\n        $realnames = (bool)$attrib['realnames'];\n        $msgcounts = $this->storage->get_cache('messagecount');\n        $collapsed = $this->config->get('collapsed_folders');\n        $realnames = $this->config->get('show_real_foldernames');\n\n        $out = '';\n        foreach ($arrFolders as $folder) {\n            $title        = null;\n            $folder_class = $this->folder_classname($folder['id']);\n            $is_collapsed = strpos($collapsed, '&'.rawurlencode($folder['id']).'&') !== false;\n            $unread       = $msgcounts ? intval($msgcounts[$folder['id']]['UNSEEN']) : 0;\n\n            if ($folder_class && !$realnames) {\n                $foldername = $this->gettext($folder_class);\n            }\n            else {\n                $foldername = $folder['name'];\n\n                // shorten the folder name to a given length\n                if ($maxlength && $maxlength > 1) {\n                    $fname = abbreviate_string($foldername, $maxlength);\n                    if ($fname != $foldername) {\n                        $title = $foldername;\n                    }\n                    $foldername = $fname;\n                }\n            }\n\n            // make folder name safe for ids and class names\n            $folder_id = rcube_utils::html_identifier($folder['id'], true);\n            $classes   = array('mailbox');\n\n            // set special class for Sent, Drafts, Trash and Junk\n            if ($folder_class) {\n                $classes[] = $folder_class;\n            }\n\n            if ($folder['id'] == $mbox_name) {\n                $classes[] = 'selected';\n            }\n\n            if ($folder['virtual']) {\n                $classes[] = 'virtual';\n            }\n            else if ($unread) {\n                $classes[] = 'unread';\n            }\n\n            $js_name = $this->JQ($folder['id']);\n            $html_name = $this->Q($foldername) . ($unread ? html::span('unreadcount', sprintf($attrib['unreadwrap'], $unread)) : '');\n            $link_attrib = $folder['virtual'] ? array() : array(\n                'href' => $this->url(array('_mbox' => $folder['id'])),\n                'onclick' => sprintf(\"return %s.command('list','%s',this,event)\", rcmail_output::JS_OBJECT_NAME, $js_name),\n                'rel' => $folder['id'],\n                'title' => $title,\n            );\n\n            $out .= html::tag('li', array(\n                'id' => \"rcmli\".$folder_id,\n                'class' => join(' ', $classes),\n                'noclose' => true),\n                html::a($link_attrib, $html_name));\n\n            if (!empty($folder['folders'])) {\n                $out .= html::div('treetoggle ' . ($is_collapsed ? 'collapsed' : 'expanded'), '&nbsp;');\n            }\n\n            $jslist[$folder['id']] = array(\n                'id'      => $folder['id'],\n                'name'    => $foldername,\n                'virtual' => $folder['virtual'],\n            );\n\n            if (!empty($folder_class)) {\n                $jslist[$folder['id']]['class'] = $folder_class;\n            }\n\n            if (!empty($folder['folders'])) {\n                $out .= html::tag('ul', array('style' => ($is_collapsed ? \"display:none;\" : null)),\n                    $this->render_folder_tree_html($folder['folders'], $mbox_name, $jslist, $attrib, $nestLevel+1));\n            }\n\n            $out .= \"</li>\\n\";\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return html for a flat list <select> for the mailbox tree\n     */\n    public function render_folder_tree_select(&$arrFolders, &$mbox_name, $maxlength, &$select, $realnames = false, $nestLevel = 0, $opts = array())\n    {\n        $out = '';\n\n        foreach ($arrFolders as $folder) {\n            // skip exceptions (and its subfolders)\n            if (!empty($opts['exceptions']) && in_array($folder['id'], $opts['exceptions'])) {\n                continue;\n            }\n\n            // skip folders in which it isn't possible to create subfolders\n            if (!empty($opts['skip_noinferiors'])) {\n                $attrs = $this->storage->folder_attributes($folder['id']);\n                if ($attrs && in_array_nocase('\\\\Noinferiors', $attrs)) {\n                    continue;\n                }\n            }\n\n            if (!$realnames && ($folder_class = $this->folder_classname($folder['id']))) {\n                $foldername = $this->gettext($folder_class);\n            }\n            else {\n                $foldername = $folder['name'];\n\n                // shorten the folder name to a given length\n                if ($maxlength && $maxlength > 1) {\n                    $foldername = abbreviate_string($foldername, $maxlength);\n                }\n            }\n\n            $select->add(str_repeat('&nbsp;', $nestLevel*4) . html::quote($foldername), $folder['id']);\n\n            if (!empty($folder['folders'])) {\n                $out .= $this->render_folder_tree_select($folder['folders'], $mbox_name, $maxlength,\n                    $select, $realnames, $nestLevel+1, $opts);\n            }\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return internal name for the given folder if it matches the configured special folders\n     */\n    public function folder_classname($folder_id)\n    {\n        if ($folder_id == 'INBOX') {\n            return 'inbox';\n        }\n\n        // for these mailboxes we have localized labels and css classes\n        foreach (array('sent', 'drafts', 'trash', 'junk') as $smbx)\n        {\n            if ($folder_id === $this->config->get($smbx.'_mbox')) {\n                return $smbx;\n            }\n        }\n    }\n\n    /**\n     * Try to localize the given IMAP folder name.\n     * UTF-7 decode it in case no localized text was found\n     *\n     * @param string $name      Folder name\n     * @param bool   $with_path Enable path localization\n     *\n     * @return string Localized folder name in UTF-8 encoding\n     */\n    public function localize_foldername($name, $with_path = false)\n    {\n        $realnames = $this->config->get('show_real_foldernames');\n\n        if (!$realnames && ($folder_class = $this->folder_classname($name))) {\n            return $this->gettext($folder_class);\n        }\n\n        // try to localize path of the folder\n        if ($with_path && !$realnames) {\n            $storage   = $this->get_storage();\n            $delimiter = $storage->get_hierarchy_delimiter();\n            $path      = explode($delimiter, $name);\n            $count     = count($path);\n\n            if ($count > 1) {\n                for ($i = 1; $i < $count; $i++) {\n                    $folder = implode($delimiter, array_slice($path, 0, -$i));\n                    if ($folder_class = $this->folder_classname($folder)) {\n                        $name = implode($delimiter, array_slice($path, $count - $i));\n                        return $this->gettext($folder_class) . $delimiter . rcube_charset::convert($name, 'UTF7-IMAP');\n                    }\n                }\n            }\n        }\n\n        return rcube_charset::convert($name, 'UTF7-IMAP');\n    }\n\n\n    public function localize_folderpath($path)\n    {\n        $protect_folders = $this->config->get('protect_default_folders');\n        $delimiter       = $this->storage->get_hierarchy_delimiter();\n        $path            = explode($delimiter, $path);\n        $result          = array();\n\n        foreach ($path as $idx => $dir) {\n            $directory = implode($delimiter, array_slice($path, 0, $idx+1));\n            if ($protect_folders && $this->storage->is_special_folder($directory)) {\n                unset($result);\n                $result[] = $this->localize_foldername($directory);\n            }\n            else {\n                $result[] = rcube_charset::convert($dir, 'UTF7-IMAP');\n            }\n        }\n\n        return implode($delimiter, $result);\n    }\n\n\n    public static function quota_display($attrib)\n    {\n        $rcmail = rcmail::get_instance();\n\n        if (!$attrib['id']) {\n            $attrib['id'] = 'rcmquotadisplay';\n        }\n\n        $_SESSION['quota_display'] = !empty($attrib['display']) ? $attrib['display'] : 'text';\n\n        $rcmail->output->add_gui_object('quotadisplay', $attrib['id']);\n\n        $quota = $rcmail->quota_content($attrib);\n\n        $rcmail->output->add_script('rcmail.set_quota('.rcube_output::json_serialize($quota).');', 'docready');\n\n        return html::span($attrib, '&nbsp;');\n    }\n\n\n    public function quota_content($attrib = null, $folder = null)\n    {\n        $quota = $this->storage->get_quota($folder);\n        $quota = $this->plugins->exec_hook('quota', $quota);\n\n        $quota_result = (array) $quota;\n        $quota_result['type']   = isset($_SESSION['quota_display']) ? $_SESSION['quota_display'] : '';\n        $quota_result['folder'] = $folder !== null && $folder !== '' ? $folder : 'INBOX';\n\n        if ($quota['total'] > 0) {\n            if (!isset($quota['percent'])) {\n                $quota_result['percent'] = min(100, round(($quota['used']/max(1,$quota['total']))*100));\n            }\n\n            $title = sprintf('%s / %s (%.0f%%)',\n                $this->show_bytes($quota['used'] * 1024), $this->show_bytes($quota['total'] * 1024),\n                $quota_result['percent']);\n\n            $quota_result['title'] = $title;\n\n            if ($attrib['width']) {\n                $quota_result['width'] = $attrib['width'];\n            }\n            if ($attrib['height']) {\n                $quota_result['height'] = $attrib['height'];\n            }\n\n            // build a table of quota types/roots info\n            if (($root_cnt = count($quota_result['all'])) > 1 || count($quota_result['all'][key($quota_result['all'])]) > 1) {\n                $table = new html_table(array('cols' => 3, 'class' => 'quota-info'));\n\n                $table->add_header(null, self::Q($this->gettext('quotatype')));\n                $table->add_header(null, self::Q($this->gettext('quotatotal')));\n                $table->add_header(null, self::Q($this->gettext('quotaused')));\n\n                foreach ($quota_result['all'] as $root => $data) {\n                    if ($root_cnt > 1 && $root) {\n                        $table->add(array('colspan' => 3, 'class' => 'root'), self::Q($root));\n                    }\n\n                    if ($storage = $data['storage']) {\n                        $percent = min(100, round(($storage['used']/max(1,$storage['total']))*100));\n\n                        $table->add('name', self::Q($this->gettext('quotastorage')));\n                        $table->add(null, $this->show_bytes($storage['total'] * 1024));\n                        $table->add(null, sprintf('%s (%.0f%%)', $this->show_bytes($storage['used'] * 1024), $percent));\n                    }\n                    if ($message = $data['message']) {\n                        $percent = min(100, round(($message['used']/max(1,$message['total']))*100));\n\n                        $table->add('name', self::Q($this->gettext('quotamessage')));\n                        $table->add(null, intval($message['total']));\n                        $table->add(null, sprintf('%d (%.0f%%)', $message['used'], $percent));\n                    }\n                }\n\n                $quota_result['table'] = $table->show();\n            }\n        }\n        else {\n            $unlimited               = $this->config->get('quota_zero_as_unlimited');\n            $quota_result['title']   = $this->gettext($unlimited ? 'unlimited' : 'unknown');\n            $quota_result['percent'] = 0;\n        }\n\n        // cleanup\n        unset($quota_result['abort']);\n        if (empty($quota_result['table'])) {\n            unset($quota_result['all']);\n        }\n\n        return $quota_result;\n    }\n\n    /**\n     * Outputs error message according to server error/response codes\n     *\n     * @param string $fallback       Fallback message label\n     * @param array  $fallback_args  Fallback message label arguments\n     * @param string $suffix         Message label suffix\n     * @param array  $params         Additional parameters (type, prefix)\n     */\n    public function display_server_error($fallback = null, $fallback_args = null, $suffix = '', $params = array())\n    {\n        $err_code = $this->storage->get_error_code();\n        $res_code = $this->storage->get_response_code();\n        $args     = array();\n\n        if ($res_code == rcube_storage::NOPERM) {\n            $error = 'errornoperm';\n        }\n        else if ($res_code == rcube_storage::READONLY) {\n            $error = 'errorreadonly';\n        }\n        else if ($res_code == rcube_storage::OVERQUOTA) {\n            $error = 'erroroverquota';\n        }\n        else if ($err_code && ($err_str = $this->storage->get_error_str())) {\n            // try to detect access rights problem and display appropriate message\n            if (stripos($err_str, 'Permission denied') !== false) {\n                $error = 'errornoperm';\n            }\n            // try to detect full mailbox problem and display appropriate message\n            // there can be e.g. \"Quota exceeded\" / \"quotum would exceed\" / \"Over quota\"\n            else if (stripos($err_str, 'quot') !== false && preg_match('/exceed|over/i', $err_str)) {\n                $error = 'erroroverquota';\n            }\n            else {\n                $error = 'servererrormsg';\n                $args  = array('msg' => rcube::Q($err_str));\n            }\n        }\n        else if ($err_code < 0) {\n            $error = 'storageerror';\n        }\n        else if ($fallback) {\n            $error = $fallback;\n            $args  = $fallback_args;\n            $params['prefix'] = false;\n        }\n\n        if ($error) {\n            if ($suffix && $this->text_exists($error . $suffix)) {\n                $error .= $suffix;\n            }\n\n            $msg = $this->gettext(array('name' => $error, 'vars' => $args));\n\n            if ($params['prefix'] && $fallback) {\n                $msg = $this->gettext(array('name' => $fallback, 'vars' => $fallback_args)) . ' ' . $msg;\n            }\n\n            $this->output->show_message($msg, $params['type'] ?: 'error');\n        }\n    }\n\n    /**\n     * Output HTML editor scripts\n     *\n     * @param string $mode  Editor mode\n     */\n    public function html_editor($mode = '')\n    {\n        $spellcheck       = intval($this->config->get('enable_spellcheck'));\n        $spelldict        = intval($this->config->get('spellcheck_dictionary'));\n        $disabled_plugins = array();\n        $disabled_buttons = array();\n        $extra_plugins    = array();\n        $extra_buttons    = array();\n\n        if (!$spellcheck) {\n            $disabled_plugins[] = 'spellchecker';\n        }\n\n        $hook = $this->plugins->exec_hook('html_editor', array(\n                'mode'             => $mode,\n                'disabled_plugins' => $disabled_plugins,\n                'disabled_buttons' => $disabled_buttons,\n                'extra_plugins' => $extra_plugins,\n                'extra_buttons' => $extra_buttons,\n        ));\n\n        if ($hook['abort']) {\n            return;\n        }\n\n        $lang_codes = array($_SESSION['language']);\n\n        if ($pos = strpos($_SESSION['language'], '_')) {\n            $lang_codes[] = substr($_SESSION['language'], 0, $pos);\n        }\n\n        foreach ($lang_codes as $code) {\n            if (file_exists(INSTALL_PATH . 'program/js/tinymce/langs/'.$code.'.js')) {\n                $lang = $code;\n                break;\n            }\n        }\n\n        if (empty($lang)) {\n            $lang = 'en';\n        }\n\n        $config = array(\n            'mode'       => $mode,\n            'lang'       => $lang,\n            'skin_path'  => $this->output->get_skin_path(),\n            'spellcheck' => $spellcheck, // deprecated\n            'spelldict'  => $spelldict,\n            'disabled_plugins' => $hook['disabled_plugins'],\n            'disabled_buttons' => $hook['disabled_buttons'],\n            'extra_plugins'    => $hook['extra_plugins'],\n            'extra_buttons'    => $hook['extra_buttons'],\n        );\n\n        $this->output->add_label('selectimage', 'addimage', 'selectmedia', 'addmedia');\n        $this->output->set_env('editor_config', $config);\n        $this->output->include_css('program/js/tinymce/roundcube/browser.css');\n        $this->output->include_script('tinymce/tinymce.min.js');\n        $this->output->include_script('editor.js');\n    }\n\n    /**\n     * File upload progress handler.\n     */\n    public function upload_progress()\n    {\n        $params = array(\n            'action' => $this->action,\n            'name'   => rcube_utils::get_input_value('_progress', rcube_utils::INPUT_GET),\n        );\n\n        if (function_exists('uploadprogress_get_info')) {\n            $status = uploadprogress_get_info($params['name']);\n\n            if (!empty($status)) {\n                $params['current'] = $status['bytes_uploaded'];\n                $params['total']   = $status['bytes_total'];\n            }\n        }\n\n        if (!isset($status) && filter_var(ini_get('apc.rfc1867'), FILTER_VALIDATE_BOOLEAN)\n            && ini_get('apc.rfc1867_name')\n        ) {\n            $prefix = ini_get('apc.rfc1867_prefix');\n            $status = apc_fetch($prefix . $params['name']);\n\n            if (!empty($status)) {\n                $params['current'] = $status['current'];\n                $params['total']   = $status['total'];\n            }\n        }\n\n        if (!isset($status) && filter_var(ini_get('session.upload_progress.enabled'), FILTER_VALIDATE_BOOLEAN)\n            && ini_get('session.upload_progress.name')\n        ) {\n            $key = ini_get('session.upload_progress.prefix') . $params['name'];\n\n            $params['total']   = $_SESSION[$key]['content_length'];\n            $params['current'] = $_SESSION[$key]['bytes_processed'];\n        }\n\n        if (!empty($params['total'])) {\n            $total = $this->show_bytes($params['total'], $unit);\n            switch ($unit) {\n            case 'GB':\n                $gb      = $params['current']/1073741824;\n                $current = sprintf($gb >= 10 ? \"%d\" : \"%.1f\", $gb);\n                break;\n            case 'MB':\n                $mb      = $params['current']/1048576;\n                $current = sprintf($mb >= 10 ? \"%d\" : \"%.1f\", $mb);\n                break;\n            case 'KB':\n                $current = round($params['current']/1024);\n                break;\n            case 'B':\n            default:\n                $current = $params['current'];\n                break;\n            }\n\n            $params['percent'] = round($params['current']/$params['total']*100);\n            $params['text']    = $this->gettext(array(\n                'name' => 'uploadprogress',\n                'vars' => array(\n                    'percent' => $params['percent'] . '%',\n                    'current' => $current,\n                    'total'   => $total\n                )\n            ));\n        }\n\n        $this->output->command('upload_progress_update', $params);\n        $this->output->send();\n    }\n\n    /**\n     * Initializes file uploading interface.\n     *\n     * @param $int Optional maximum file size in bytes\n     */\n    public function upload_init($max_size = null)\n    {\n        // Enable upload progress bar\n        if ($seconds = $this->config->get('upload_progress')) {\n            if (function_exists('uploadprogress_get_info')) {\n                $field_name = 'UPLOAD_IDENTIFIER';\n            }\n            if (!$field_name && filter_var(ini_get('apc.rfc1867'), FILTER_VALIDATE_BOOLEAN)) {\n                $field_name = ini_get('apc.rfc1867_name');\n            }\n            if (!$field_name && filter_var(ini_get('session.upload_progress.enabled'), FILTER_VALIDATE_BOOLEAN)) {\n                $field_name = ini_get('session.upload_progress.name');\n            }\n\n            if ($field_name) {\n                $this->output->set_env('upload_progress_name', $field_name);\n                $this->output->set_env('upload_progress_time', (int) $seconds);\n            }\n        }\n\n        // find max filesize value\n        $max_filesize = parse_bytes(ini_get('upload_max_filesize'));\n        $max_postsize = parse_bytes(ini_get('post_max_size'));\n\n        if ($max_postsize && $max_postsize < $max_filesize) {\n            $max_filesize = $max_postsize;\n        }\n\n        if ($max_size && $max_size < $max_filesize) {\n            $max_filesize = $max_size;\n        }\n\n        $this->output->set_env('max_filesize', $max_filesize);\n        $max_filesize = $this->show_bytes($max_filesize);\n        $this->output->set_env('filesizeerror', $this->gettext(array(\n            'name' => 'filesizeerror', 'vars' => array('size' => $max_filesize))));\n\n        return $max_filesize;\n    }\n\n    /**\n     * Outputs uploaded file content (with image thumbnails support\n     *\n     * @param array $file Upload file data\n     */\n    public function display_uploaded_file($file)\n    {\n        if (empty($file)) {\n            return;\n        }\n\n        $file = $this->plugins->exec_hook('attachment_display', $file);\n\n        if ($file['status']) {\n            if (empty($file['size'])) {\n                $file['size'] = $file['data'] ? strlen($file['data']) : @filesize($file['path']);\n            }\n\n            // generate image thumbnail for file browser in HTML editor\n            if (!empty($_GET['_thumbnail'])) {\n                $temp_dir       = $this->config->get('temp_dir');\n                $thumbnail_size = 80;\n                $mimetype       = $file['mimetype'];\n                $file_ident     = $file['id'] . ':' . $file['mimetype'] . ':' . $file['size'];\n                $cache_basename = $temp_dir . '/' . md5($file_ident . ':' . $this->user->ID . ':' . $thumbnail_size);\n                $cache_file     = $cache_basename . '.thumb';\n\n                // render thumbnail image if not done yet\n                if (!is_file($cache_file)) {\n                    if (!$file['path']) {\n                        $orig_name = $filename = $cache_basename . '.tmp';\n                        file_put_contents($orig_name, $file['data']);\n                    }\n                    else {\n                        $filename = $file['path'];\n                    }\n\n                    $image = new rcube_image($filename);\n                    if ($imgtype = $image->resize($thumbnail_size, $cache_file, true)) {\n                        $mimetype = 'image/' . $imgtype;\n\n                        if ($orig_name) {\n                            unlink($orig_name);\n                        }\n                    }\n                }\n\n                if (is_file($cache_file)) {\n                    // cache for 1h\n                    $this->output->future_expire_header(3600);\n                    header('Content-Type: ' . $mimetype);\n                    header('Content-Length: ' . filesize($cache_file));\n\n                    readfile($cache_file);\n                    exit;\n                }\n            }\n\n            header('Content-Type: ' . $file['mimetype']);\n            header('Content-Length: ' . $file['size']);\n\n            if ($file['data']) {\n                echo $file['data'];\n            }\n            else if ($file['path']) {\n                readfile($file['path']);\n            }\n        }\n    }\n\n    /**\n     * Initializes client-side autocompletion.\n     */\n    public function autocomplete_init()\n    {\n        static $init;\n\n        if ($init) {\n            return;\n        }\n\n        $init = 1;\n\n        if (($threads = (int)$this->config->get('autocomplete_threads')) > 0) {\n            $book_types = (array) $this->config->get('autocomplete_addressbooks', 'sql');\n            if (count($book_types) > 1) {\n                $this->output->set_env('autocomplete_threads', $threads);\n                $this->output->set_env('autocomplete_sources', $book_types);\n            }\n        }\n\n        $this->output->set_env('autocomplete_max', (int)$this->config->get('autocomplete_max', 15));\n        $this->output->set_env('autocomplete_min_length', $this->config->get('autocomplete_min_length'));\n        $this->output->add_label('autocompletechars', 'autocompletemore');\n    }\n\n    /**\n     * Returns supported font-family specifications\n     *\n     * @param string $font  Font name\n     *\n     * @param string|array Font-family specification array or string (if $font is used)\n     */\n    public static function font_defs($font = null)\n    {\n        $fonts = array(\n            'Andale Mono'   => '\"Andale Mono\",Times,monospace',\n            'Arial'         => 'Arial,Helvetica,sans-serif',\n            'Arial Black'   => '\"Arial Black\",\"Avant Garde\",sans-serif',\n            'Book Antiqua'  => '\"Book Antiqua\",Palatino,serif',\n            'Courier New'   => '\"Courier New\",Courier,monospace',\n            'Georgia'       => 'Georgia,Palatino,serif',\n            'Helvetica'     => 'Helvetica,Arial,sans-serif',\n            'Impact'        => 'Impact,Chicago,sans-serif',\n            'Tahoma'        => 'Tahoma,Arial,Helvetica,sans-serif',\n            'Terminal'      => 'Terminal,Monaco,monospace',\n            'Times New Roman' => '\"Times New Roman\",Times,serif',\n            'Trebuchet MS'  => '\"Trebuchet MS\",Geneva,sans-serif',\n            'Verdana'       => 'Verdana,Geneva,sans-serif',\n        );\n\n        if ($font) {\n            return $fonts[$font];\n        }\n\n        return $fonts;\n    }\n\n    /**\n     * Create a human readable string for a number of bytes\n     *\n     * @param int    Number of bytes\n     * @param string Size unit\n     *\n     * @return string Byte string\n     */\n    public function show_bytes($bytes, &$unit = null)\n    {\n        if ($bytes >= 1073741824) {\n            $unit = 'GB';\n            $gb   = $bytes/1073741824;\n            $str  = sprintf($gb >= 10 ? \"%d \" : \"%.1f \", $gb) . $this->gettext($unit);\n        }\n        else if ($bytes >= 1048576) {\n            $unit = 'MB';\n            $mb   = $bytes/1048576;\n            $str  = sprintf($mb >= 10 ? \"%d \" : \"%.1f \", $mb) . $this->gettext($unit);\n        }\n        else if ($bytes >= 1024) {\n            $unit = 'KB';\n            $str  = sprintf(\"%d \",  round($bytes/1024)) . $this->gettext($unit);\n        }\n        else {\n            $unit = 'B';\n            $str  = sprintf('%d ', $bytes) . $this->gettext($unit);\n        }\n\n        return $str;\n    }\n\n    /**\n     * Returns real size (calculated) of the message part\n     *\n     * @param rcube_message_part  Message part\n     *\n     * @return string Part size (and unit)\n     */\n    public function message_part_size($part)\n    {\n        if (isset($part->d_parameters['size'])) {\n            $size = $this->show_bytes((int)$part->d_parameters['size']);\n        }\n        else {\n          $size = $part->size;\n          if ($part->encoding == 'base64') {\n            $size = $size / 1.33;\n          }\n\n          $size = '~' . $this->show_bytes($size);\n        }\n\n        return $size;\n    }\n\n    /**\n     * Returns message UID(s) and IMAP folder(s) from GET/POST data\n     *\n     * @param string UID value to decode\n     * @param string Default mailbox value (if not encoded in UIDs)\n     * @param bool   Will be set to True if multi-folder request\n     *\n     * @return array  List of message UIDs per folder\n     */\n    public static function get_uids($uids = null, $mbox = null, &$is_multifolder = false)\n    {\n        // message UID (or comma-separated list of IDs) is provided in\n        // the form of <ID>-<MBOX>[,<ID>-<MBOX>]*\n\n        $_uid  = $uids ?: rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GPC);\n        $_mbox = $mbox ?: (string) rcube_utils::get_input_value('_mbox', rcube_utils::INPUT_GPC);\n\n        // already a hash array\n        if (is_array($_uid) && !isset($_uid[0])) {\n            return $_uid;\n        }\n\n        $result = array();\n\n        // special case: *\n        if ($_uid == '*' && is_object($_SESSION['search'][1]) && $_SESSION['search'][1]->multi) {\n            $is_multifolder = true;\n            // extract the full list of UIDs per folder from the search set\n            foreach ($_SESSION['search'][1]->sets as $subset) {\n                $mbox = $subset->get_parameters('MAILBOX');\n                $result[$mbox] = $subset->get();\n            }\n        }\n        else {\n            if (is_string($_uid))\n                $_uid = explode(',', $_uid);\n\n            // create a per-folder UIDs array\n            foreach ((array)$_uid as $uid) {\n                list($uid, $mbox) = explode('-', $uid, 2);\n                if (!strlen($mbox)) {\n                    $mbox = $_mbox;\n                }\n                else {\n                    $is_multifolder = true;\n                }\n\n                if ($uid == '*') {\n                    $result[$mbox] = $uid;\n                }\n                else {\n                    $result[$mbox][] = $uid;\n                }\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Get resource file content (with assets_dir support)\n     *\n     * @param string $name File name\n     */\n    public function get_resource_content($name)\n    {\n        if (!strpos($name, '/')) {\n            $name = \"program/resources/$name\";\n        }\n\n        $assets_dir = $this->config->get('assets_dir');\n\n        if ($assets_dir) {\n            $path = slashify($assets_dir) . $name;\n            if (@file_exists($path)) {\n                $name = $path;\n            }\n        }\n\n        return file_get_contents($name, false);\n    }\n\n    /**\n     * Converts HTML content into plain text\n     *\n     * @param string $html    HTML content\n     * @param array  $options Conversion parameters (width, links, charset)\n     *\n     * @return string Plain text\n     */\n    public function html2text($html, $options = array())\n    {\n        $default_options = array(\n            'links'   => true,\n            'width'   => 75,\n            'body'    => $html,\n            'charset' => RCUBE_CHARSET,\n        );\n\n        $options = array_merge($default_options, (array) $options);\n\n        // Plugins may want to modify HTML in another/additional way\n        $options = $this->plugins->exec_hook('html2text', $options);\n\n        // Convert to text\n        if (!$options['abort']) {\n            $converter = new rcube_html2text($options['body'],\n                false, $options['links'], $options['width'], $options['charset']);\n\n            $options['body'] = rtrim($converter->get_text());\n        }\n\n        return $options['body'];\n    }\n\n    /**\n     * Connect to the mail storage server with stored session data\n     *\n     * @return bool True on success, False on error\n     */\n    public function storage_connect()\n    {\n        $storage = $this->get_storage();\n\n        if ($_SESSION['storage_host'] && !$storage->is_connected()) {\n            $host = $_SESSION['storage_host'];\n            $user = $_SESSION['username'];\n            $port = $_SESSION['storage_port'];\n            $ssl  = $_SESSION['storage_ssl'];\n            $pass = $this->decrypt($_SESSION['password']);\n\n            if (!$storage->connect($host, $user, $pass, $port, $ssl)) {\n                if (is_object($this->output)) {\n                    $this->output->show_message('storageerror', 'error');\n                }\n            }\n            else {\n                $this->set_storage_prop();\n            }\n        }\n\n        return $storage->is_connected();\n    }\n}\n", "code_before": "<?php\n\n/*\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n | Copyright (C) Kolab Systems AG                                        |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Application class providing core functions and holding              |\n |   instances of all 'global' objects like db- and imap-connections     |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <alec@alec.pl>                            |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Application class of Roundcube Webmail\n * implemented as singleton\n */\nclass rcmail extends rcube\n{\n    use rcube_uploads;\n\n    /**\n     * Main tasks.\n     *\n     * @var array\n     */\n    public static $main_tasks = ['mail', 'settings', 'addressbook', 'login', 'logout', 'utils', 'dummy'];\n\n    /**\n     * Current task.\n     *\n     * @var string\n     */\n    public $task;\n\n    /**\n     * Current action.\n     *\n     * @var string\n     */\n    public $action = '';\n\n    public $comm_path = './';\n    public $filename = '';\n    public $default_skin;\n    public $login_error;\n    public $oauth;\n\n    /** @var rcmail_output_cli|rcmail_output_html|rcmail_output_json|null Output handler */\n    public $output; // @phpstan-ignore-line\n\n    private $address_books = [];\n    private $action_args = [];\n\n    public const ERROR_STORAGE = -2;\n    public const ERROR_INVALID_REQUEST = 1;\n    public const ERROR_INVALID_HOST = 2;\n    public const ERROR_COOKIES_DISABLED = 3;\n    public const ERROR_RATE_LIMIT = 4;\n\n    /**\n     * This implements the 'singleton' design pattern\n     *\n     * @param int     $mode Ignored rcube::get_instance() argument\n     * @param ?string $env  Environment name to run (e.g. live, dev, test)\n     *\n     * @return rcmail The one and only instance\n     */\n    #[\\Override]\n    public static function get_instance($mode = 0, $env = '')\n    {\n        if (!self::$instance || !is_a(self::$instance, 'rcmail')) {\n            // In cli-server mode env=test\n            if ($env === null && \\PHP_SAPI == 'cli-server') {\n                $env = 'test';\n            }\n\n            self::$instance = new self($env);\n            // init AFTER object was linked with self::$instance\n            self::$instance->startup();\n        }\n\n        return self::$instance;\n    }\n\n    /**\n     * Initial startup function\n     * to register session, create database and imap connections\n     */\n    protected function startup()\n    {\n        $this->init(self::INIT_WITH_DB | self::INIT_WITH_PLUGINS);\n\n        // set filename if not index.php\n        if (($basename = basename($_SERVER['SCRIPT_FILENAME'])) && $basename != 'index.php') {\n            $this->filename = $basename;\n        }\n\n        // load all configured plugins\n        $plugins = (array) $this->config->get('plugins', []);\n        $required_plugins = ['filesystem_attachments', 'jqueryui'];\n        $this->plugins->load_plugins($plugins, $required_plugins);\n\n        // start session\n        $this->session_init();\n\n        // Remember default skin, before it's replaced by user prefs\n        $this->default_skin = $this->config->get('skin');\n\n        // create user object\n        $this->set_user(new rcube_user($_SESSION['user_id'] ?? null));\n\n        // set task and action properties\n        $this->set_task(rcube_utils::get_input_string('_task', rcube_utils::INPUT_GPC));\n        $this->action = asciiwords(rcube_utils::get_input_string('_action', rcube_utils::INPUT_GPC));\n\n        // reset some session parameters when changing task\n        if ($this->task != 'utils') {\n            // we reset list page when switching to another task\n            // but only to the main task interface - empty action (#1489076, #1490116)\n            // this will prevent from unintentional page reset on cross-task requests\n            if ($this->session && empty($this->action)\n                && (empty($_SESSION['task']) || $_SESSION['task'] != $this->task)\n            ) {\n                $this->session->remove('page');\n\n                // set current task to session\n                $_SESSION['task'] = $this->task;\n            }\n        }\n\n        // init output class\n        if (\\PHP_SAPI == 'cli') {\n            $this->output = new rcmail_output_cli();\n        } elseif (!empty($_REQUEST['_remote'])) {\n            $this->json_init();\n        } elseif (!empty($_SERVER['REMOTE_ADDR'])) {\n            $this->load_gui(!empty($_REQUEST['_framed']));\n        }\n\n        // load oauth manager\n        if (\\PHP_SAPI != 'cli') {\n            $this->oauth = rcmail_oauth::get_instance();\n        }\n\n        // run init method on all the plugins\n        $this->plugins->init($this, $this->task);\n    }\n\n    /**\n     * Setter for application task\n     *\n     * @param string $task Task to set\n     */\n    public function set_task($task)\n    {\n        if (\\PHP_SAPI == 'cli') {\n            $task = 'cli';\n        } elseif (!$this->user || !$this->user->ID) {\n            $task = 'login';\n        } else {\n            $task = asciiwords($task, true) ?: 'mail';\n        }\n\n        // Re-initialize plugins if task is changing\n        if (!empty($this->task) && $this->task != $task) {\n            $this->plugins->init($this, $task);\n        }\n\n        $this->task = $task;\n        $this->comm_path = $this->url(['task' => $this->task]);\n\n        if (!empty($_REQUEST['_framed'])) {\n            $this->comm_path .= '&_framed=1';\n        }\n\n        if ($this->output) {\n            $this->output->set_env('task', $this->task);\n            $this->output->set_env('comm_path', $this->comm_path);\n        }\n    }\n\n    /**\n     * Setter for system user object\n     *\n     * @param rcube_user $user Current user instance\n     */\n    #[\\Override]\n    public function set_user($user)\n    {\n        parent::set_user($user);\n\n        $session_lang = $_SESSION['language'] ?? null;\n        $lang = $this->language_prop($this->config->get('language', $session_lang));\n        $_SESSION['language'] = $this->user->language = $lang;\n\n        // set localization\n        setlocale(\\LC_ALL, $lang . '.utf8', $lang . '.UTF-8', 'en_US.utf8', 'en_US.UTF-8');\n        ini_set('intl.default_locale', $lang);\n\n        // Workaround for https://bugs.php.net/bug.php?id=18556\n        // Also strtoupper/strtolower and other methods are locale-aware\n        // for these locales it is problematic (#1490519)\n        if (in_array($lang, ['tr_TR', 'ku', 'az_AZ'])) {\n            setlocale(\\LC_CTYPE, 'en_US.utf8', 'en_US.UTF-8', 'C');\n        }\n    }\n\n    /**\n     * Handle the request. All request pre-checks are NOT done here.\n     */\n    public function action_handler()\n    {\n        // we're ready, user is authenticated and the request is safe\n        $plugin = $this->plugins->exec_hook('ready', ['task' => $this->task, 'action' => $this->action]);\n\n        $this->set_task($plugin['task']);\n        $this->action = $plugin['action'];\n\n        // handle special actions\n        if ($this->action == 'keep-alive') {\n            $this->output->reset();\n            $this->plugins->exec_hook('keep_alive', []);\n            $this->output->send();\n        }\n\n        $task = $this->action == 'save-pref' ? 'utils' : $this->task;\n        $task = $task == 'addressbook' ? 'contacts' : $task;\n        $task_class = \"rcmail_action_{$task}_index\";\n\n        // execute the action index handler\n        if (class_exists($task_class)) {\n            $task_handler = new $task_class();\n            $task_handler->run();\n        }\n\n        // allow 5 \"redirects\" to another action\n        $redirects = 0;\n        while ($redirects < 5) {\n            // execute a plugin action\n            if (preg_match('/^plugin\\./', $this->action)) {\n                $this->plugins->exec_action($this->action);\n                break;\n            }\n\n            // execute action registered to a plugin task\n            if ($this->plugins->is_plugin_task($task)) {\n                if (!$this->action) {\n                    $this->action = 'index';\n                }\n                $this->plugins->exec_action(\"{$task}.{$this->action}\");\n                break;\n            }\n\n            $action = !empty($this->action) ? $this->action : 'index';\n\n            // handle deprecated action names\n            if (!empty($task_handler) && !empty($task_handler::$aliases[$action])) {\n                $action = $task_handler::$aliases[$action];\n            }\n\n            $action = str_replace('-', '_', $action);\n            $class = \"rcmail_action_{$task}_{$action}\";\n\n            // Run the action (except the index)\n            if ($class != $task_class && class_exists($class)) {\n                $handler = new $class();\n                if (!$handler->checks()) {\n                    break;\n                }\n                $handler->run($this->action_args);\n                $redirects++;\n            } else {\n                break;\n            }\n        }\n\n        if ($this->action == 'refresh') {\n            $last = intval(rcube_utils::get_input_value('_last', rcube_utils::INPUT_GPC));\n            $this->plugins->exec_hook('refresh', ['last' => $last]);\n        }\n\n        // parse main template (default)\n        $this->output->send($this->task);\n\n        // if we arrive here, something went wrong\n        $error = ['code' => 404, 'message' => 'Invalid request'];\n        self::raise_error($error, true, true);\n    }\n\n    /**\n     * Return instance of the internal address book class\n     *\n     * @param int|string $id        Address book identifier. It accepts also special values:\n     *                              - rcube_addressbook::TYPE_CONTACT (or 'sql') for the SQL addressbook\n     *                              - rcube_addressbook::TYPE_DEFAULT for the default addressbook\n     * @param bool       $writeable True if the address book needs to be writeable\n     * @param bool       $fallback  Fallback to the first existing source, if the configured default wasn't found\n     *\n     * @return rcube_addressbook|null Address book object\n     */\n    public function get_address_book(int|string $id, bool $writeable = false, bool $fallback = true): ?rcube_addressbook\n    {\n        $contacts = null;\n        $ldap_config = (array) $this->config->get('ldap_public');\n        $default = false;\n\n        $id = (string) $id;\n\n        // 'sql' is the alias for '0' used by autocomplete\n        if ($id == 'sql') {\n            $id = (string) rcube_addressbook::TYPE_CONTACT;\n        } elseif ($id === strval(rcube_addressbook::TYPE_DEFAULT) || $id === '-1') { // -1 for BC\n            $id = $this->config->get('default_addressbook');\n            $default = true;\n        }\n\n        // use existing instance\n        if ($id !== null && isset($this->address_books[$id]) && ($this->address_books[$id] instanceof rcube_addressbook)) {\n            $contacts = $this->address_books[$id];\n        } elseif ($id && !empty($ldap_config[$id])) {\n            $domain = $this->config->mail_domain($_SESSION['storage_host']);\n            $contacts = new rcube_ldap($ldap_config[$id], $this->config->get('ldap_debug'), $domain);\n        } elseif ($id === (string) rcube_addressbook::TYPE_CONTACT) {\n            $contacts = new rcube_contacts($this->db, $this->get_user_id());\n        } elseif ($id === (string) rcube_addressbook::TYPE_RECIPIENT || $id === (string) rcube_addressbook::TYPE_TRUSTED_SENDER) {\n            $contacts = new rcube_addresses($this->db, $this->get_user_id(), (int) $id);\n        } else {\n            $plugin = $this->plugins->exec_hook('addressbook_get', ['id' => $id, 'writeable' => $writeable]);\n\n            // plugin returned instance of a rcube_addressbook\n            if (!empty($plugin['instance']) && $plugin['instance'] instanceof rcube_addressbook) {\n                $contacts = $plugin['instance'];\n            }\n        }\n\n        // when user requested default writeable addressbook\n        // we need to check if default is writeable, if not we\n        // will return first writeable book (if any exist)\n        if ($contacts && $default && $contacts->readonly && $writeable) {\n            $contacts = null;\n        }\n\n        // Get first addressbook from the list if configured default doesn't exist\n        // This can happen when user deleted the addressbook (e.g. Kolab folder)\n        if ($fallback && !$contacts && (!$id || $default)) {\n            $source = $this->get_address_sources($writeable, !$default);\n            $source = reset($source);\n\n            if (!empty($source)) {\n                // Note: No fallback here to prevent from an infinite loop\n                $contacts = $this->get_address_book($source['id'], false, false);\n                if ($contacts) {\n                    $id = $source['id'];\n                }\n            }\n        }\n\n        if (!$contacts) {\n            // there's no default, just return\n            if ($default) {\n                return null;\n            }\n\n            self::raise_error([\n                'code' => 700,\n                'message' => \"Addressbook source ({$id}) not found!\",\n            ], true, true);\n        }\n\n        // add to the 'books' array for shutdown function\n        $this->address_books[$id] = $contacts;\n\n        if ($writeable && $contacts->readonly) {\n            return null;\n        }\n\n        // set configured sort order\n        if ($sort_col = $this->config->get('addressbook_sort_col')) {\n            $contacts->set_sort_order($sort_col);\n        }\n\n        return $contacts;\n    }\n\n    /**\n     * Return identifier of the address book object\n     *\n     * @param rcube_addressbook $object Addressbook source object\n     *\n     * @return string|null Source identifier\n     */\n    public function get_address_book_id($object)\n    {\n        foreach ($this->address_books as $index => $book) {\n            if ($book === $object) {\n                return $index;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Return address books list\n     *\n     * @param bool $writeable   True if the address book needs to be writeable\n     * @param bool $skip_hidden True if the address book needs to be not hidden\n     *\n     * @return array Address books array\n     */\n    public function get_address_sources($writeable = false, $skip_hidden = false)\n    {\n        $abook_type = strtolower((string) $this->config->get('address_book_type', 'sql'));\n        $ldap_config = (array) $this->config->get('ldap_public');\n        $list = [];\n\n        // SQL-based (built-in) address book\n        if ($abook_type === 'sql') {\n            $list[rcube_addressbook::TYPE_CONTACT] = [\n                'id' => (string) rcube_addressbook::TYPE_CONTACT,\n                'name' => $this->gettext('personaladrbook'),\n                'groups' => true,\n                'readonly' => false,\n                'undelete' => $this->config->get('undo_timeout') > 0,\n            ];\n        }\n\n        // LDAP address book(s)\n        if (!empty($ldap_config)) {\n            foreach ($ldap_config as $id => $prop) {\n                // handle misconfiguration\n                if (empty($prop) || !is_array($prop)) {\n                    continue;\n                }\n\n                $list[$id] = [\n                    'id' => $id,\n                    'name' => html::quote($prop['name']),\n                    'groups' => !empty($prop['groups']) || !empty($prop['group_filters']),\n                    'readonly' => empty($prop['writable']),\n                    'hidden' => !empty($prop['hidden']),\n                ];\n            }\n        }\n\n        $collected_recipients = $this->config->get('collected_recipients');\n        $collected_senders = $this->config->get('collected_senders');\n\n        if ($collected_recipients === (string) rcube_addressbook::TYPE_RECIPIENT) {\n            $list[rcube_addressbook::TYPE_RECIPIENT] = [\n                'id' => (string) rcube_addressbook::TYPE_RECIPIENT,\n                'name' => $this->gettext('collectedrecipients'),\n                'groups' => false,\n                'readonly' => true,\n                'undelete' => false,\n                'deletable' => true,\n            ];\n        }\n\n        if ($collected_senders === (string) rcube_addressbook::TYPE_TRUSTED_SENDER) {\n            $list[rcube_addressbook::TYPE_TRUSTED_SENDER] = [\n                'id' => (string) rcube_addressbook::TYPE_TRUSTED_SENDER,\n                'name' => $this->gettext('trustedsenders'),\n                'groups' => false,\n                'readonly' => true,\n                'undelete' => false,\n                'deletable' => true,\n            ];\n        }\n\n        // Plugins can also add address books, or re-order the list\n        $plugin = $this->plugins->exec_hook('addressbooks_list', ['sources' => $list]);\n        $list = $plugin['sources'];\n\n        foreach ($list as $idx => $item) {\n            // remove from list if not writeable as requested\n            if ($writeable && $item['readonly']) {\n                unset($list[$idx]);\n            }\n            // remove from list if hidden as requested\n            elseif ($skip_hidden && !empty($item['hidden'])) {\n                unset($list[$idx]);\n            }\n        }\n\n        return $list;\n    }\n\n    /**\n     * Getter for compose responses.\n     *\n     * @param bool $user_only True to exclude additional static responses\n     *\n     * @return array List of the current user's stored responses\n     */\n    public function get_compose_responses($user_only = false)\n    {\n        $responses = $this->user->list_responses();\n\n        if (!$user_only) {\n            $additional = [];\n            foreach ($this->config->get('compose_responses_static', []) as $response) {\n                $additional[$response['name']] = [\n                    'id' => 'static-' . substr(md5($response['name']), 0, 16),\n                    'name' => $response['name'],\n                    'static' => true,\n                ];\n            }\n\n            if (!empty($additional)) {\n                ksort($additional, \\SORT_LOCALE_STRING);\n                $responses = array_merge(array_values($additional), $responses);\n            }\n        }\n\n        $hook = $this->plugins->exec_hook('get_compose_responses', [\n            'list' => $responses,\n            'user_only' => $user_only,\n        ]);\n\n        return $hook['list'];\n    }\n\n    /**\n     * Getter for compose response data.\n     *\n     * @param int|string $id Response ID\n     *\n     * @return array|null Response data, Null if not found\n     */\n    public function get_compose_response($id)\n    {\n        $record = null;\n\n        // Static response\n        if (str_starts_with((string) $id, 'static-')) {\n            foreach ($this->config->get('compose_responses_static', []) as $response) {\n                $rid = 'static-' . substr(md5($response['name']), 0, 16);\n                if ($id === $rid) {\n                    $record = [\n                        'id' => $rid,\n                        'name' => $response['name'],\n                        'data' => !empty($response['html']) ? $response['html'] : $response['text'],\n                        'is_html' => !empty($response['html']),\n                        'static' => true,\n                    ];\n                    break;\n                }\n            }\n        }\n\n        // User owned response\n        if (empty($record) && is_numeric($id)) {\n            $record = $this->user->get_response($id);\n        }\n\n        // Plugin-provided response or other modifications\n        $hook = $this->plugins->exec_hook('get_compose_response', [\n            'id' => $id,\n            'record' => $record,\n        ]);\n\n        return $hook['record'];\n    }\n\n    /**\n     * Init output object for GUI and add common scripts.\n     * This will instantiate a rcmail_output_html object and set\n     * environment vars according to the current session and configuration\n     *\n     * @param bool $framed True if this request is loaded in a (i)frame\n     *\n     * @return rcube_output Reference to HTML output object\n     */\n    public function load_gui($framed = false)\n    {\n        // init output page\n        if (!$this->output instanceof rcmail_output_html) {\n            $this->output = new rcmail_output_html($this->task, $framed);\n        }\n\n        // set refresh interval\n        $this->output->set_env('refresh_interval', $this->config->get('refresh_interval', 0));\n        $this->output->set_env('session_lifetime', $this->config->get('session_lifetime', 0) * 60);\n\n        if ($framed) {\n            $this->comm_path .= '&_framed=1';\n            $this->output->set_env('framed', true);\n        }\n\n        $this->output->set_env('task', $this->task);\n        $this->output->set_env('action', $this->action);\n        $this->output->set_env('comm_path', $this->comm_path);\n        $this->output->set_charset(RCUBE_CHARSET);\n\n        if ($this->user && $this->user->ID) {\n            $this->output->set_env('user_id', $this->user->get_hash());\n        }\n\n        // set compose mode for all tasks (message compose step can be triggered from everywhere)\n        $this->output->set_env('compose_extwin', $this->config->get('compose_extwin', false));\n\n        // add some basic labels to client\n        $this->output->add_label('loading', 'servererror', 'connerror', 'requesttimedout',\n            'refreshing', 'windowopenerror', 'uploadingmany', 'uploading', 'close', 'save', 'cancel',\n            'alerttitle', 'confirmationtitle', 'delete', 'continue', 'ok');\n\n        return $this->output;\n    }\n\n    /**\n     * Create an output object for JSON responses\n     *\n     * @return rcube_output Reference to JSON output object\n     */\n    public function json_init()\n    {\n        if (!$this->output instanceof rcmail_output_json) {\n            $this->output = new rcmail_output_json();\n        }\n\n        return $this->output;\n    }\n\n    /**\n     * Create session object and start the session.\n     */\n    #[\\Override]\n    public function session_init()\n    {\n        parent::session_init();\n\n        // set initial session vars\n        if (empty($_SESSION['user_id'])) {\n            $_SESSION['temp'] = true;\n        }\n    }\n\n    /**\n     * Perform login to the mail server and to the webmail service.\n     * This will also create a new user entry if auto_create_user is configured.\n     *\n     * @param string $username    Mail storage (IMAP) user name\n     * @param string $password    Mail storage (IMAP) password\n     * @param string $host        Mail storage (IMAP) host\n     * @param bool   $cookiecheck Enables cookie check\n     *\n     * @return bool True on success, False on failure\n     */\n    public function login($username, $password, $host = null, $cookiecheck = false)\n    {\n        $this->login_error = null;\n\n        if (empty($username)) {\n            return false;\n        }\n\n        if ($cookiecheck && empty($_COOKIE)) {\n            $this->login_error = self::ERROR_COOKIES_DISABLED;\n            return false;\n        }\n\n        $imap_host = $this->config->get('imap_host', 'localhost:143');\n        $username_domain = $this->config->get('username_domain');\n        $login_lc = $this->config->get('login_lc', 2);\n\n        // check username input validity\n        if (!$this->login_input_checks($username, $password)) {\n            $this->login_error = self::ERROR_INVALID_REQUEST;\n            return false;\n        }\n\n        // host is validated in rcmail::autoselect_host(), so here\n        // we'll only handle unset host (if possible)\n        if (!$host && !empty($imap_host)) {\n            if (is_array($imap_host)) {\n                $key = key($imap_host);\n                $host = is_numeric($key) ? $imap_host[$key] : $key;\n            } else {\n                $host = $imap_host;\n            }\n        }\n\n        $host = rcube_utils::parse_host($host);\n\n        if (!$host) {\n            $this->login_error = self::ERROR_INVALID_HOST;\n            return false;\n        }\n\n        // parse $host URL\n        [$host, $scheme, $port] = rcube_utils::parse_host_uri($host, 143, 993);\n\n        $ssl = in_array($scheme, ['ssl', 'imaps', 'tls']) ? $scheme : false;\n\n        // Check if we need to add/force domain to username\n        if (!empty($username_domain)) {\n            $domain = '';\n            if (is_array($username_domain)) {\n                if (!empty($username_domain[$host])) {\n                    $domain = $username_domain[$host];\n                }\n            } else {\n                $domain = $username_domain;\n            }\n\n            if ($domain = rcube_utils::parse_host((string) $domain, $host)) {\n                $pos = strpos($username, '@');\n\n                // force configured domains\n                if ($pos !== false && $this->config->get('username_domain_forced')) {\n                    $username = substr($username, 0, $pos) . '@' . $domain;\n                }\n                // just add domain if not specified\n                elseif ($pos === false) {\n                    $username .= '@' . $domain;\n                }\n            }\n        }\n\n        // Convert username to lowercase. If storage backend\n        // is case-insensitive we need to store always the same username (#1487113)\n        if ($login_lc) {\n            if ($login_lc == 2 || $login_lc === true) {\n                $username = mb_strtolower($username);\n            } elseif (strpos($username, '@')) {\n                // lowercase domain name\n                [$local, $domain] = rcube_utils::explode('@', $username);\n                $username = $local . '@' . mb_strtolower($domain);\n            }\n        }\n\n        // try to resolve email address from virtuser table\n        if (strpos($username, '@') && ($virtuser = rcube_user::email2user($username))) {\n            $username = $virtuser;\n        }\n\n        // Here we need IDNA ASCII\n        // Only rcube_contacts class is using domain names in Unicode\n        $host = rcube_utils::idn_to_ascii($host);\n        if (strpos($username, '@')) {\n            $username = rcube_utils::idn_to_ascii($username);\n        }\n\n        // user already registered -> overwrite username\n        if ($user = rcube_user::query($username, $host)) {\n            $username = $user->data['username'];\n\n            // Brute-force prevention\n            if ($user->is_locked()) {\n                $this->login_error = self::ERROR_RATE_LIMIT;\n                return false;\n            }\n        }\n\n        $storage = $this->get_storage();\n\n        // try to log in\n        if (!$storage->connect($host, $username, $password, $port, $ssl)) {\n            if ($user) {\n                $user->failed_login();\n            }\n\n            // Wait a second to slow down brute-force attacks (#1490549)\n            sleep(1);\n            return false;\n        }\n\n        // user already registered -> update user's record\n        if (is_object($user)) {\n            // update last login timestamp\n            $user->touch();\n        }\n        // create new system user\n        elseif ($this->config->get('auto_create_user')) {\n            // Temporarily set user email and password, so plugins can use it\n            // this way until we set it in session later. This is required e.g.\n            // by the user-specific LDAP operations from new_user_identity plugin.\n            $domain = $this->config->mail_domain($host);\n            $this->user_email = strpos($username, '@') ? $username : sprintf('%s@%s', $username, $domain);\n            $this->password = $password;\n\n            $user = rcube_user::create($username, $host);\n\n            $this->user_email = null;\n            $this->password = null;\n\n            if (!$user) {\n                self::raise_error([\n                    'code' => 620,\n                    'message' => 'Failed to create a user record. Maybe aborted by a plugin?',\n                ], true, false);\n            }\n        } else {\n            self::raise_error([\n                'code' => 621,\n                'message' => \"Access denied for new user {$username}. 'auto_create_user' is disabled\",\n            ], true, false);\n        }\n\n        // login succeeded\n        if (is_object($user) && $user->ID) {\n            // Configure environment\n            $this->set_user($user);\n            $this->set_storage_prop();\n\n            // set session vars\n            $_SESSION['user_id'] = $user->ID;\n            $_SESSION['username'] = $user->data['username'];\n            $_SESSION['storage_host'] = $host;\n            $_SESSION['storage_port'] = $port;\n            $_SESSION['storage_ssl'] = $ssl;\n            $_SESSION['password'] = $this->encrypt($password);\n            $_SESSION['login_time'] = time();\n\n            $timezone = rcube_utils::get_input_string('_timezone', rcube_utils::INPUT_GPC);\n            if ($timezone && $timezone != '_default_' && preg_match('|^[a-z0-9/_+-]+$|i', $timezone)) {\n                $_SESSION['timezone'] = $timezone;\n            }\n\n            // fix some old settings according to namespace prefix\n            $this->fix_namespace_settings($user);\n\n            // set/create special folders\n            $this->set_special_folders();\n\n            // clear all mailboxes related cache(s)\n            $storage->clear_cache('mailboxes', true);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns error code of last login operation\n     *\n     * @return int|null Error code\n     */\n    public function login_error()\n    {\n        if ($this->login_error) {\n            return $this->login_error;\n        }\n\n        if ($this->storage && $this->storage->get_error_code() < -1) {\n            return self::ERROR_STORAGE;\n        }\n\n        return null;\n    }\n\n    /**\n     * Validate username input\n     *\n     * @param string $username User name\n     * @param string $password User password\n     *\n     * @return bool True if valid, False otherwise\n     */\n    private function login_input_checks($username, $password)\n    {\n        $username_filter = $this->config->get('login_username_filter');\n        $username_maxlen = $this->config->get('login_username_maxlen', 1024);\n        $password_maxlen = $this->config->get('login_password_maxlen', 1024);\n\n        if ($username_maxlen && strlen($username) > $username_maxlen) {\n            return false;\n        }\n\n        if ($password_maxlen && strlen($password) > $password_maxlen) {\n            return false;\n        }\n\n        if ($username_filter) {\n            $is_email = strtolower($username_filter) == 'email';\n\n            if ($is_email && !rcube_utils::check_email($username, false)) {\n                return false;\n            }\n\n            if (!$is_email && !preg_match($username_filter, $username)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Detects session errors\n     *\n     * @return string|null Error label\n     */\n    public function session_error()\n    {\n        // log session failures\n        $task = rcube_utils::get_input_string('_task', rcube_utils::INPUT_GPC);\n\n        if ($task && !in_array($task, ['login', 'logout']) && !empty($_COOKIE[ini_get('session.name')])) {\n            $sess_id = $_COOKIE[ini_get('session.name')];\n            $log = \"Aborted session {$sess_id}; no valid session data found\";\n            $error = 'sessionerror';\n\n            // In rare cases web browser might end up with multiple cookies of the same name\n            // but different params, e.g. domain (webmail.domain.tld and .webmail.domain.tld).\n            // In such case browser will send both cookies in the request header\n            // problem is that PHP session handler can use only one and if that one session\n            // does not exist we'll end up here\n            $cookie = rcube_utils::request_header('Cookie');\n            $cookie_sessid = $this->config->get('session_name') ?: 'roundcube_sessid';\n            $cookie_sessauth = $this->config->get('session_auth_name') ?: 'roundcube_sessauth';\n\n            if (substr_count($cookie, $cookie_sessid . '=') > 1 || substr_count($cookie, $cookie_sessauth . '=') > 1) {\n                $log .= '. Cookies mismatch';\n                $error = 'cookiesmismatch';\n            }\n\n            $this->session->log($log);\n\n            return $error;\n        }\n\n        return null;\n    }\n\n    /**\n     * Auto-select IMAP host based on the posted login information\n     *\n     * @return string Selected IMAP host\n     */\n    public function autoselect_host()\n    {\n        $default_host = $this->config->get('imap_host');\n        $host = null;\n\n        if (is_array($default_host)) {\n            $post_host = rcube_utils::get_input_string('_host', rcube_utils::INPUT_POST);\n            $post_user = rcube_utils::get_input_string('_user', rcube_utils::INPUT_POST);\n\n            [, $domain] = rcube_utils::explode('@', $post_user);\n\n            // direct match in default_host array\n            if (!empty($default_host[$post_host]) || in_array($post_host, array_values($default_host))) {\n                $host = $post_host;\n            }\n            // try to select host by mail domain\n            elseif (!empty($domain)) {\n                foreach ($default_host as $storage_host => $mail_domains) {\n                    if (is_array($mail_domains) && in_array_nocase($domain, $mail_domains)) {\n                        $host = $storage_host;\n                        break;\n                    } elseif (stripos($storage_host, $domain) !== false || stripos(strval($mail_domains), $domain) !== false) {\n                        $host = is_numeric($storage_host) ? $mail_domains : $storage_host;\n                        break;\n                    }\n                }\n            }\n\n            // take the first entry if $host is still not set\n            if (empty($host)) {\n                $key = key($default_host);\n                $host = is_numeric($key) ? $default_host[$key] : $key;\n            }\n        } elseif (empty($default_host)) {\n            $host = rcube_utils::get_input_string('_host', rcube_utils::INPUT_POST);\n        } else {\n            $host = rcube_utils::parse_host($default_host);\n        }\n\n        return $host;\n    }\n\n    /**\n     * Destroy session data and remove cookie\n     */\n    public function kill_session()\n    {\n        $this->plugins->exec_hook('session_destroy');\n\n        $this->session->kill();\n        $_SESSION = ['language' => $this->user->language, 'temp' => true];\n        $this->user->reset();\n\n        if ($this->config->get('skin') != $this->default_skin && method_exists($this->output, 'set_skin')) {\n            $this->output->set_skin($this->default_skin);\n        }\n    }\n\n    /**\n     * Do server side actions on logout\n     */\n    public function logout_actions()\n    {\n        $storage = $this->get_storage();\n        $logout_expunge = $this->config->get('logout_expunge');\n        $logout_purge = $this->config->get('logout_purge');\n        $trash_mbox = $this->config->get('trash_mbox');\n\n        if ($logout_purge && !empty($trash_mbox)) {\n            $getMessages = static function ($folder) use ($logout_purge, $storage) {\n                if (is_numeric($logout_purge)) {\n                    $now = new \\DateTime('now');\n                    $interval = new \\DateInterval('P' . intval($logout_purge) . 'D');\n\n                    return $storage->search_once($folder, 'BEFORE ' . $now->sub($interval)->format('j-M-Y'));\n                }\n\n                return '*';\n            };\n\n            $storage->delete_message($getMessages($trash_mbox), $trash_mbox);\n\n            // Trash subfolders\n            $delimiter = $storage->get_hierarchy_delimiter();\n            $subfolders = array_reverse($storage->list_folders($trash_mbox . $delimiter, '*'));\n            $last = '';\n\n            foreach ($subfolders as $folder) {\n                $messages = $getMessages($folder);\n\n                // Delete the folder if in all-messages mode, or all existing messages are to-be-removed,\n                // but not if there's a subfolder\n                if (\n                    ($messages === '*' || $messages->count() == $storage->count($folder, 'ALL', false, false))\n                    && !str_starts_with($last, $folder . $delimiter)\n                ) {\n                    $storage->delete_folder($folder);\n                } else {\n                    $storage->delete_message($messages, $folder);\n                    $last = $folder;\n                }\n            }\n        }\n\n        if ($logout_expunge) {\n            $storage->expunge_folder('INBOX');\n        }\n\n        // Try to save unsaved user preferences\n        if (!empty($_SESSION['preferences'])) {\n            $this->user->save_prefs(unserialize($_SESSION['preferences']));\n        }\n    }\n\n    /**\n     * Build a valid URL to this instance of Roundcube\n     *\n     * @param mixed $p        Either a string with the action or\n     *                        url parameters as key-value pairs\n     * @param bool  $absolute Build a URL absolute to document root\n     * @param bool  $full     Create fully qualified URL including http(s):// and hostname\n     * @param bool  $secure   Return absolute URL in secure location\n     *\n     * @return string Valid application URL\n     */\n    #[\\Override]\n    public function url($p, $absolute = false, $full = false, $secure = false)\n    {\n        if (!is_array($p)) {\n            if (preg_match('#^https?://#', $p)) {\n                return $p;\n            }\n\n            $p = ['_action' => $p];\n        }\n\n        $task = $this->task;\n\n        if (!empty($p['_task'])) {\n            $task = $p['_task'];\n        } elseif (!empty($p['task'])) {\n            $task = $p['task'];\n        }\n\n        unset($p['task'], $p['_task']);\n\n        $pre = ['_task' => $task];\n        $url = $this->filename;\n        $delm = '?';\n\n        foreach (array_merge($pre, $p) as $key => $val) {\n            if ($val !== '' && $val !== null) {\n                $par = $key[0] == '_' ? $key : ('_' . $key);\n                $url .= $delm . urlencode($par) . '=' . urlencode($val);\n                $delm = '&';\n            }\n        }\n\n        $base_path = $this->get_request_path();\n\n        if ($secure && ($token = $this->get_secure_url_token(true))) {\n            // add token to the url\n            $url = $token . '/' . $url;\n\n            // remove old token from the path\n            $base_path = rtrim($base_path, '/');\n            $base_path = preg_replace('/\\/[a-zA-Z0-9]{' . strlen($token) . '}$/', '', $base_path);\n\n            // this need to be full url to make redirects work\n            $absolute = true;\n        } elseif ($secure && ($token = $this->get_request_token())) {\n            $url .= $delm . '_token=' . urlencode($token);\n        }\n\n        if ($absolute || $full) {\n            // add base path to this Roundcube installation\n            $prefix = $base_path ?: '/';\n\n            // prepend protocol://hostname:port\n            if ($full) {\n                $prefix = rcube_utils::resolve_url($prefix);\n            }\n\n            $prefix = rtrim($prefix, '/') . '/';\n        } else {\n            $prefix = $base_path ?: './';\n        }\n\n        return $prefix . $url;\n    }\n\n    /**\n     * Get the the request path\n     */\n    protected function get_request_path()\n    {\n        $path = $this->config->get('request_path');\n\n        if ($path && isset($_SERVER[$path])) {\n            // HTTP headers need to come from a trusted proxy host\n            if (str_starts_with($path, 'HTTP_') && !rcube_utils::check_proxy_whitelist_ip()) {\n                return '/';\n            }\n\n            $path = $_SERVER[$path];\n        } elseif (empty($path)) {\n            foreach (['REQUEST_URI', 'REDIRECT_SCRIPT_URL', 'SCRIPT_NAME'] as $name) {\n                if (!empty($_SERVER[$name])) {\n                    $path = $_SERVER[$name];\n                    break;\n                }\n            }\n        } else {\n            return rtrim($path, '/') . '/';\n        }\n\n        $path = preg_replace('/index\\.php.*$/', '', (string) $path);\n        $path = preg_replace('/[?&].*$/', '', $path);\n        $path = preg_replace('![^/]+$!', '', $path);\n\n        return rtrim($path, '/') . '/';\n    }\n\n    /**\n     * Function to be executed in script shutdown\n     */\n    #[\\Override]\n    public function shutdown()\n    {\n        parent::shutdown();\n\n        foreach ($this->address_books as $book) {\n            if (is_a($book, 'rcube_addressbook')) {\n                $book->close();\n            }\n        }\n\n        $this->address_books = [];\n\n        // In CLI stop here, prevent from errors when the console.log might exist,\n        // but be not accessible\n        if (\\PHP_SAPI == 'cli') {\n            return;\n        }\n\n        // write performance stats to logs/console\n        if ($this->config->get('devel_mode') || $this->config->get('performance_stats')) {\n            // we have to disable per_user_logging to make sure stats end up in the main console log\n            $this->config->set('per_user_logging', false);\n\n            // make sure logged numbers use unified format\n            setlocale(\\LC_NUMERIC, 'en_US.utf8', 'en_US.UTF-8', 'en_US', 'C');\n\n            if (function_exists('memory_get_usage')) {\n                $mem = round(memory_get_usage() / 1024 / 1024, 1);\n\n                if (function_exists('memory_get_peak_usage')) {\n                    $mem .= '/' . round(memory_get_peak_usage() / 1024 / 1024, 1);\n                }\n            }\n\n            $log = $this->task . ($this->action ? '/' . $this->action : '') . (isset($mem) ? \" [{$mem}]\" : '');\n\n            if (defined('RCMAIL_START')) {\n                self::print_timer(RCMAIL_START, $log);\n            } else {\n                self::console($log);\n            }\n        }\n    }\n\n    /**\n     * CSRF attack prevention code. Raises error when check fails.\n     *\n     * @param int $mode Request mode\n     */\n    public function request_security_check($mode = rcube_utils::INPUT_POST)\n    {\n        // check request token\n        if (!$this->check_request($mode)) {\n            $error = ['code' => 403, 'message' => 'Request security check failed'];\n            self::raise_error($error, false, true);\n        }\n    }\n\n    /**\n     * Fixes some user preferences according to namespace handling change.\n     * Old Roundcube versions were using folder names with removed namespace prefix.\n     * Now we need to add the prefix on servers where personal namespace has prefix.\n     *\n     * @param rcube_user $user User object\n     */\n    private function fix_namespace_settings($user)\n    {\n        $prefix = (string) $this->storage->get_namespace('prefix');\n        $prefix_len = strlen($prefix);\n\n        if (!$prefix_len) {\n            return;\n        }\n\n        if ($this->config->get('namespace_fixed')) {\n            return;\n        }\n\n        $prefs = [];\n\n        // Build namespace prefix regexp\n        $ns = $this->storage->get_namespace();\n        $regexp = [];\n\n        foreach ($ns as $entry) {\n            if (!empty($entry)) {\n                foreach ($entry as $item) {\n                    if (isset($item[0]) && strlen($item[0])) {\n                        $regexp[] = preg_quote($item[0], '/');\n                    }\n                }\n            }\n        }\n        $regexp = '/^(' . implode('|', $regexp) . ')/';\n\n        // Fix preferences\n        $opts = ['drafts_mbox', 'junk_mbox', 'sent_mbox', 'trash_mbox', 'archive_mbox'];\n        foreach ($opts as $opt) {\n            if ($value = $this->config->get($opt)) {\n                if ($value != 'INBOX' && !preg_match($regexp, $value)) {\n                    $prefs[$opt] = $prefix . $value;\n                }\n            }\n        }\n\n        if (($search_mods = $this->config->get('search_mods')) && count($search_mods) > 0) {\n            $folders = [];\n            foreach ($search_mods as $idx => $value) {\n                if ($idx != 'INBOX' && $idx != '*' && !preg_match($regexp, $idx)) {\n                    $idx = $prefix . $idx;\n                }\n                $folders[$idx] = $value;\n            }\n\n            $prefs['search_mods'] = $folders;\n        }\n\n        if (($threading = $this->config->get('message_threading')) && count($threading) > 0) {\n            $folders = [];\n            foreach ($threading as $idx => $value) {\n                if ($idx != 'INBOX' && !preg_match($regexp, $idx)) {\n                    $idx = $prefix . $idx;\n                }\n                $folders[$idx] = $value;\n            }\n\n            $prefs['message_threading'] = $folders;\n        }\n\n        if ($collapsed = $this->config->get('collapsed_folders')) {\n            $folders = explode('&&', $collapsed);\n            $count = count($folders);\n            $folders_str = '';\n\n            $folders[0] = substr($folders[0], 1);\n            $folders[$count - 1] = substr($folders[$count - 1], 0, -1);\n\n            foreach ($folders as $value) {\n                if ($value != 'INBOX' && !preg_match($regexp, $value)) {\n                    $value = $prefix . $value;\n                }\n                $folders_str .= '&' . $value . '&';\n            }\n\n            $prefs['collapsed_folders'] = $folders_str;\n        }\n\n        $prefs['namespace_fixed'] = true;\n\n        // save updated preferences and reset imap settings (default folders)\n        $user->save_prefs($prefs);\n        $this->set_storage_prop();\n    }\n\n    /**\n     * Overwrite action variable\n     *\n     * @param string $action New action value\n     * @param array  $args   Arguments to be passed to the next action\n     */\n    public function overwrite_action($action, $args = [])\n    {\n        $this->action = $action;\n        $this->action_args = array_merge($this->action_args, $args);\n        $this->output->set_env('action', $action);\n    }\n\n    /**\n     * Set environment variables for specified config options\n     *\n     * @param array $options List of configuration option names\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::set_env_config()\n     */\n    public function set_env_config($options)\n    {\n        rcmail_action::set_env_config($options);\n    }\n\n    /**\n     * Insert a contact to specified addressbook.\n     *\n     * @param array             $contact Contact data\n     * @param rcube_addressbook $source  The addressbook object\n     * @param string            $error   Filled with an error message/label on error\n     *\n     * @return int|string|bool Contact ID on success, False otherwise\n     */\n    public function contact_create($contact, $source, &$error = null)\n    {\n        $contact['email'] = rcube_utils::idn_to_utf8($contact['email']);\n\n        $contact = $this->plugins->exec_hook('contact_displayname', $contact);\n\n        if (empty($contact['name'])) {\n            $contact['name'] = rcube_addressbook::compose_display_name($contact);\n        }\n\n        // validate the contact\n        if (!$source->validate($contact, true)) {\n            $err = $source->get_error();\n            if (!empty($err['message'])) {\n                $error = $err['message'];\n            }\n\n            return false;\n        }\n\n        $plugin = $this->plugins->exec_hook('contact_create', [\n            'record' => $contact,\n            'source' => $this->get_address_book_id($source),\n        ]);\n\n        $contact = $plugin['record'];\n\n        if (!empty($plugin['abort'])) {\n            if (!empty($plugin['message'])) {\n                $error = $plugin['message'];\n            }\n\n            return $plugin['result'];\n        }\n\n        return $source->insert($contact);\n    }\n\n    /**\n     * Find an email address in user addressbook(s)\n     *\n     * @param string $email Email address\n     * @param int    $type  Addressbook type (see rcube_addressbook::TYPE_* constants)\n     *\n     * @return bool True if the address exists in specified addressbook(s), False otherwise\n     */\n    public function contact_exists($email, $type)\n    {\n        // @phpstan-ignore-next-line\n        if (empty($email) || !is_string($email) || !strpos($email, '@')) {\n            return false;\n        }\n\n        $email = rcube_utils::idn_to_utf8($email);\n\n        // TODO: Support TYPE_READONLY filter\n        $sources = [];\n\n        if ($type & rcube_addressbook::TYPE_WRITEABLE) {\n            foreach ($this->get_address_sources(true, true) as $book) {\n                $sources[] = $book['id'];\n            }\n        }\n\n        if ($type & rcube_addressbook::TYPE_DEFAULT) {\n            if ($default = $this->get_address_book(rcube_addressbook::TYPE_DEFAULT, true)) {\n                $book_id = $this->get_address_book_id($default);\n                if (!in_array($book_id, $sources)) {\n                    $sources[] = $book_id;\n                }\n            }\n        }\n\n        if ($type & rcube_addressbook::TYPE_RECIPIENT) {\n            $collected_recipients = $this->config->get('collected_recipients');\n            if (strlen($collected_recipients) && !in_array($collected_recipients, $sources)) {\n                array_unshift($sources, $collected_recipients);\n            }\n        }\n\n        if ($type & rcube_addressbook::TYPE_TRUSTED_SENDER) {\n            $collected_senders = $this->config->get('collected_senders');\n            if (strlen($collected_senders) && !in_array($collected_senders, $sources)) {\n                array_unshift($sources, $collected_senders);\n            }\n        }\n\n        $plugin = $this->plugins->exec_hook('contact_exists', [\n            'email' => $email,\n            'type' => $type,\n            'sources' => $sources,\n        ]);\n\n        if (!empty($plugin['abort'])) {\n            return $plugin['result'];\n        }\n\n        foreach ($plugin['sources'] as $source) {\n            $contacts = $this->get_address_book($source);\n\n            if (!$contacts) {\n                continue;\n            }\n\n            $result = $contacts->search('email', $email, rcube_addressbook::SEARCH_STRICT, false);\n\n            if ($result->count) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns RFC2822 formatted current date in user's timezone\n     *\n     * @return string Date\n     */\n    public function user_date()\n    {\n        // get user's timezone\n        try {\n            $tz = new \\DateTimeZone($this->config->get('timezone'));\n            $date = new \\DateTime('now', $tz);\n        } catch (\\Exception $e) {\n            $date = new \\DateTime();\n        }\n\n        return $date->format('r');\n    }\n\n    /**\n     * Write login data (name, ID, IP address) to the 'userlogins' log file.\n     */\n    public function log_login($user = null, $failed_login = false, $error_code = 0)\n    {\n        if (!$this->config->get('log_logins')) {\n            return;\n        }\n\n        // don't log full session id for security reasons\n        $session_id = session_id();\n        $session_id = $session_id ? substr($session_id, 0, 16) : 'no-session';\n\n        // failed login\n        if ($failed_login) {\n            // don't fill the log with complete input, which could\n            // have been prepared by a hacker\n            if (strlen($user) > 256) {\n                $user = substr($user, 0, 256) . '...';\n            }\n\n            $message = sprintf('Failed login for %s from %s in session %s (error: %d)',\n                $user, rcube_utils::remote_ip(), $session_id, $error_code);\n        }\n        // successful login\n        else {\n            $user_name = $this->get_user_name();\n            $user_id = $this->get_user_id();\n\n            if (!$user_id) {\n                return;\n            }\n\n            $message = sprintf('Successful login for %s (ID: %d) from %s in session %s',\n                $user_name, $user_id, rcube_utils::remote_ip(), $session_id);\n        }\n\n        // log login\n        self::write_log('userlogins', $message);\n    }\n\n    /**\n     * Check if specified asset file exists\n     *\n     * @param string $path     Asset path\n     * @param bool   $minified Fallback to minified version of the file\n     *\n     * @return string|null Asset path if found (modified if minified file found)\n     */\n    public function find_asset($path, $minified = true)\n    {\n        if (empty($path)) {\n            return null;\n        }\n\n        $root_path = unslashify(INSTALL_PATH) . '/';\n        $full_path = $root_path . trim($path, '/');\n\n        if (file_exists($full_path)) {\n            return $path;\n        }\n\n        if ($minified && preg_match('/(?<!\\.min)\\.(js|css)$/', $path)) {\n            $path = preg_replace('/\\.(js|css)$/', '.min.\\1', $path);\n            $full_path = $root_path . trim($path, '/');\n\n            if (file_exists($full_path)) {\n                return $path;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Create a HTML table based on the given data\n     *\n     * @param array  $attrib     Named table attributes\n     * @param mixed  $table_data Table row data. Either a two-dimensional array\n     *                           or a valid SQL result set\n     * @param array  $show_cols  List of cols to show\n     * @param string $id_col     Name of the identifier col\n     *\n     * @return string HTML table code\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::table_output()\n     */\n    public function table_output($attrib, $table_data, $show_cols, $id_col)\n    {\n        return rcmail_action::table_output($attrib, $table_data, $show_cols, $id_col);\n    }\n\n    /**\n     * Convert the given date to a human readable form\n     * This uses the date formatting properties from config\n     *\n     * @param string|int|\\DateTime|\\DateTimeImmutable $date    Date representation\n     * @param string                                  $format  Date format to use\n     * @param bool                                    $convert Enables date conversion according to user timezone\n     *\n     * @return string Formatted date string\n     */\n    public function format_date($date, $format = null, $convert = true)\n    {\n        if (!$date instanceof \\DateTimeInterface) {\n            if (!empty($date)) {\n                $timestamp = rcube_utils::strtotime($date);\n            }\n\n            if (empty($timestamp)) {\n                return '';\n            }\n\n            try {\n                $date = new \\DateTime('@' . $timestamp);\n            } catch (\\Exception $e) {\n                return '';\n            }\n        }\n\n        if ($convert) {\n            try {\n                // convert to the right timezone\n                $stz = date_default_timezone_get();\n                $tz = new \\DateTimeZone($this->config->get('timezone'));\n                $date = clone $date; // don't modify the original object\n                $date->setTimezone($tz);\n            } catch (\\Exception $e) {\n                // ignore\n            }\n        }\n\n        // define date format depending on current time\n        if (!$format) {\n            $now = time();\n            $now_date = getdate($now);\n            $today_limit = mktime(0, 0, 0, $now_date['mon'], $now_date['mday'], $now_date['year']);\n            $week_limit = mktime(0, 0, 0, $now_date['mon'], $now_date['mday'] - 6, $now_date['year']);\n            $pretty_date = $this->config->get('prettydate');\n            $timestamp = $date->format('U');\n\n            if ($pretty_date && $timestamp > $today_limit && $timestamp <= $now) {\n                $format = $this->config->get('date_today', $this->config->get('time_format', 'H:i'));\n                $today = true;\n            } elseif ($pretty_date && $timestamp > $week_limit && $timestamp <= $now) {\n                $format = $this->config->get('date_short', 'D H:i');\n            } else {\n                $format = $this->config->get('date_long', 'Y-m-d H:i');\n            }\n        }\n\n        // parse format string manually in order to provide localized weekday and month names\n        $out = '';\n        for ($i = 0; $i < strlen($format); $i++) {\n            if ($format[$i] == '\\\\') {  // skip escape chars\n                continue;\n            }\n\n            // write char \"as-is\"\n            if ($format[$i] == ' ' || ($i > 0 && $format[$i - 1] == '\\\\')) {\n                $out .= $format[$i];\n            }\n            // weekday (short)\n            elseif ($format[$i] == 'D') {\n                $out .= $this->gettext(strtolower($date->format('D')));\n            }\n            // weekday long\n            elseif ($format[$i] == 'l') {\n                $out .= $this->gettext(strtolower($date->format('l')));\n            }\n            // month name (short)\n            elseif ($format[$i] == 'M') {\n                $out .= $this->gettext(strtolower($date->format('M')));\n            }\n            // month name (long)\n            elseif ($format[$i] == 'F') {\n                $out .= $this->gettext('long' . strtolower($date->format('M')));\n            } elseif ($format[$i] == 'x') {\n                $out .= \\IntlDateFormatter::formatObject($date, [\\IntlDateFormatter::SHORT, \\IntlDateFormatter::SHORT]);\n            } else {\n                $out .= $date->format($format[$i]);\n            }\n        }\n\n        if (!empty($today)) {\n            $label = $this->gettext('today');\n            // replace $ character with \"Today\" label (#1486120)\n            if (str_contains($out, '$')) {\n                $out = preg_replace('/\\$/', $label, $out, 1);\n            } else {\n                $out = $label . ' ' . $out;\n            }\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return folders list in HTML\n     *\n     * @param array $attrib Named parameters\n     *\n     * @return string HTML code for the gui object\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::folder_list()\n     */\n    public function folder_list($attrib)\n    {\n        return rcmail_action::folder_list($attrib);\n    }\n\n    /**\n     * Return folders list as html_select object\n     *\n     * @param array $p Named parameters\n     *\n     * @return html_select HTML drop-down object\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::folder_selector()\n     */\n    public function folder_selector($p = [])\n    {\n        return rcmail_action::folder_selector($p);\n    }\n\n    /**\n     * Returns class name for the given folder if it is a special folder\n     * (including shared/other users namespace roots).\n     *\n     * @param string $folder_id IMAP Folder name\n     *\n     * @return string|null CSS class name\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::folder_classname()\n     */\n    public function folder_classname($folder_id)\n    {\n        return rcmail_action::folder_classname($folder_id);\n    }\n\n    /**\n     * Try to localize the given IMAP folder name.\n     * UTF-7 decode it in case no localized text was found\n     *\n     * @param string $name        Folder name\n     * @param bool   $with_path   Enable path localization\n     * @param bool   $path_remove Remove the path\n     *\n     * @return string Localized folder name in UTF-8 encoding\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::localize_foldername()\n     */\n    public function localize_foldername($name, $with_path = false, $path_remove = false)\n    {\n        return rcmail_action::localize_foldername($name, $with_path, $path_remove);\n    }\n\n    /**\n     * Localize folder path\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::localize_folderpath()\n     */\n    public function localize_folderpath($path)\n    {\n        return rcmail_action::localize_folderpath($path);\n    }\n\n    /**\n     * Return HTML for quota indicator object\n     *\n     * @param array $attrib Named parameters\n     *\n     * @return string HTML code for the quota indicator object\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::quota_display()\n     */\n    public static function quota_display($attrib)\n    {\n        return rcmail_action::quota_display($attrib);\n    }\n\n    /**\n     * Return (parsed) quota information\n     *\n     * @param array $attrib Named parameters\n     * @param array $folder Current folder\n     *\n     * @return array Quota information\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::quota_content()\n     */\n    public function quota_content($attrib = null, $folder = null)\n    {\n        return rcmail_action::quota_content($attrib, $folder);\n    }\n\n    /**\n     * Outputs error message according to server error/response codes\n     *\n     * @param string $fallback      Fallback message label\n     * @param array  $fallback_args Fallback message label arguments\n     * @param string $suffix        Message label suffix\n     * @param array  $params        Additional parameters (type, prefix)\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::display_server_error()\n     */\n    public function display_server_error($fallback = null, $fallback_args = null, $suffix = '', $params = [])\n    {\n        rcmail_action::display_server_error($fallback, $fallback_args, $suffix, $params);\n    }\n\n    /**\n     * Displays an error message on storage fatal errors\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::storage_fatal_error()\n     */\n    public function storage_fatal_error()\n    {\n        rcmail_action::storage_fatal_error();\n    }\n\n    /**\n     * Output HTML editor scripts\n     *\n     * @param string $mode Editor mode\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::html_editor()\n     */\n    public function html_editor($mode = '')\n    {\n        rcmail_action::html_editor($mode);\n    }\n\n    /**\n     * File upload progress handler.\n     *\n     * @deprecated We're using HTML5 upload progress\n     */\n    public function upload_progress()\n    {\n        // NOOP\n        $this->output->send();\n    }\n\n    /**\n     * Initializes file uploading interface.\n     *\n     * @param int $max_size Optional maximum file size in bytes\n     *\n     * @return string Human-readable file size limit\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::upload_init()\n     */\n    public function upload_init($max_size = null)\n    {\n        return rcmail_action::upload_init($max_size);\n    }\n\n    /**\n     * Upload form object\n     *\n     * @param array  $attrib     Object attributes\n     * @param string $name       Form object name\n     * @param string $action     Form action name\n     * @param array  $input_attr File input attributes\n     * @param int    $max_size   Maximum upload size\n     *\n     * @return string HTML output\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::upload_form()\n     */\n    public function upload_form($attrib, $name, $action, $input_attr = [], $max_size = null)\n    {\n        return rcmail_action::upload_form($attrib, $name, $action, $input_attr, $max_size);\n    }\n\n    /**\n     * Initializes client-side autocompletion.\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::autocomplete_init()\n     */\n    public function autocomplete_init()\n    {\n        rcmail_action::autocomplete_init();\n    }\n\n    /**\n     * Returns supported font-family specifications\n     *\n     * @param string $font Font name\n     *\n     * @return string|array Font-family specification array or string (if $font is used)\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::autocomplete_init()\n     */\n    public static function font_defs($font = null)\n    {\n        return rcmail_action::font_defs($font);\n    }\n\n    /**\n     * Create a human readable string for a number of bytes\n     *\n     * @param int    $bytes Number of bytes\n     * @param string &$unit Size unit\n     *\n     * @return string Byte string\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::show_bytes()\n     */\n    public function show_bytes($bytes, &$unit = null)\n    {\n        return rcmail_action::show_bytes($bytes, $unit);\n    }\n\n    /**\n     * Returns real size (calculated) of the message part\n     *\n     * @param rcube_message_part $part Message part\n     *\n     * @return string Part size (and unit)\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::message_part_size()\n     */\n    public function message_part_size($part)\n    {\n        return rcmail_action::message_part_size($part);\n    }\n\n    /**\n     * Returns message UID(s) and IMAP folder(s) from GET/POST data\n     *\n     * @param string $uids           UID value to decode\n     * @param string $mbox           Default mailbox value (if not encoded in UIDs)\n     * @param bool   $is_multifolder Will be set to True if multi-folder request\n     * @param int    $mode           Request mode. Default: rcube_utils::INPUT_GPC.\n     *\n     * @return array List of message UIDs per folder\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::get_uids()\n     */\n    public static function get_uids($uids = null, $mbox = null, &$is_multifolder = false, $mode = null)\n    {\n        return rcmail_action::get_uids($uids, $mbox, $is_multifolder, $mode);\n    }\n\n    /**\n     * Get resource file content\n     *\n     * @param string $name File name\n     *\n     * @return string File content\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::get_resource_content()\n     */\n    public function get_resource_content($name)\n    {\n        return rcmail_action::get_resource_content($name);\n    }\n\n    /**\n     * Converts HTML content into plain text\n     *\n     * @param string $html    HTML content\n     * @param array  $options Conversion parameters (width, links, charset)\n     *\n     * @return string Plain text\n     */\n    public function html2text($html, $options = [])\n    {\n        $default_options = [\n            'links' => $this->config->get('html2text_links', rcube_html2text::LINKS_DEFAULT),\n            'width' => $this->config->get('html2text_width') ?: 75,\n            'body' => $html,\n            'charset' => RCUBE_CHARSET,\n        ];\n\n        $options = array_merge($default_options, (array) $options);\n\n        // Plugins may want to modify HTML in another/additional way\n        $options = $this->plugins->exec_hook('html2text', $options);\n\n        // Convert to text\n        if (empty($options['abort'])) {\n            $converter = new rcube_html2text($options['body'],\n                false, $options['links'], $options['width'], $options['charset']);\n\n            $options['body'] = rtrim($converter->get_text());\n        }\n\n        return $options['body'];\n    }\n\n    /**\n     * Connect to the mail storage server with stored session data\n     *\n     * @return bool True on success, False on error\n     */\n    public function storage_connect()\n    {\n        $storage = $this->get_storage();\n\n        if (!empty($_SESSION['storage_host']) && !$storage->is_connected()) {\n            $host = $_SESSION['storage_host'];\n            $user = $_SESSION['username'];\n            $port = $_SESSION['storage_port'];\n            $ssl = $_SESSION['storage_ssl'];\n            $pass = $this->decrypt($_SESSION['password']);\n\n            if (!$storage->connect($host, $user, $pass, $port, $ssl)) {\n                if (!empty($this->output)) {\n                    $this->output->show_message('storageerror', 'error');\n                }\n            } else {\n                $this->set_storage_prop();\n            }\n        }\n\n        return $storage->is_connected();\n    }\n}\n", "patch": "@@ -840,6 +840,8 @@ public function url($p, $absolute = false, $full = false, $secure = false)\n             // this need to be full url to make redirects work\n             $absolute = true;\n         }\n+        else if ($secure && ($token = $this->get_request_token()))\n+            $url .= $delm . '_token=' . urlencode($token);\n \n         if ($absolute || $full) {\n             // add base path to this Roundcube installation", "file_path": "files/2016_8\\10", "file_language": "php", "file_name": "program/include/rcmail.php", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/4a408843b0ef816daf70a472a02b78cd6073a4d5/program/include/rcmail_output_html.php", "code": "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | program/include/rcmail_output_html.php                                |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2006-2014, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Class to handle HTML page output using a skin template.             |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Class to create HTML page output using a skin template\n *\n * @package Webmail\n * @subpackage View\n */\nclass rcmail_output_html extends rcmail_output\n{\n    public $type = 'html';\n\n    protected $message;\n    protected $template_name;\n    protected $js_env       = array();\n    protected $js_labels    = array();\n    protected $js_commands  = array();\n    protected $skin_paths   = array();\n    protected $scripts_path = '';\n    protected $script_files = array();\n    protected $css_files    = array();\n    protected $scripts      = array();\n    protected $default_template = \"<html>\\n<head><title></title></head>\\n<body></body>\\n</html>\";\n    protected $header = '';\n    protected $footer = '';\n    protected $body = '';\n    protected $base_path = '';\n    protected $assets_path;\n    protected $assets_dir = RCUBE_INSTALL_PATH;\n    protected $devel_mode = false;\n\n    // deprecated names of templates used before 0.5\n    protected $deprecated_templates = array(\n        'contact'      => 'showcontact',\n        'contactadd'   => 'addcontact',\n        'contactedit'  => 'editcontact',\n        'identityedit' => 'editidentity',\n        'messageprint' => 'printmessage',\n    );\n\n    /**\n     * Constructor\n     */\n    public function __construct($task = null, $framed = false)\n    {\n        parent::__construct();\n\n        $this->devel_mode = $this->config->get('devel_mode');\n\n        $this->set_env('task', $task);\n        $this->set_env('x_frame_options', $this->config->get('x_frame_options', 'sameorigin'));\n        $this->set_env('standard_windows', (bool) $this->config->get('standard_windows'));\n        $this->set_env('locale', $_SESSION['language']);\n\n        // add cookie info\n        $this->set_env('cookie_domain', ini_get('session.cookie_domain'));\n        $this->set_env('cookie_path', ini_get('session.cookie_path'));\n        $this->set_env('cookie_secure', filter_var(ini_get('session.cookie_secure'), FILTER_VALIDATE_BOOLEAN));\n\n        // load the correct skin (in case user-defined)\n        $skin = $this->config->get('skin');\n        $this->set_skin($skin);\n        $this->set_env('skin', $skin);\n\n        $this->set_assets_path($this->config->get('assets_path'), $this->config->get('assets_dir'));\n\n        if (!empty($_REQUEST['_extwin']))\n            $this->set_env('extwin', 1);\n        if ($this->framed || $framed)\n            $this->set_env('framed', 1);\n\n        $lic = <<<EOF\n/*\n        @licstart  The following is the entire license notice for the \n        JavaScript code in this page.\n\n        Copyright (C) 2005-2014 The Roundcube Dev Team\n\n        The JavaScript code in this page is free software: you can redistribute\n        it and/or modify it under the terms of the GNU General Public License\n        as published by the Free Software Foundation, either version 3 of\n        the License, or (at your option) any later version.\n\n        The code is distributed WITHOUT ANY WARRANTY; without even the implied\n        warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n        See the GNU GPL for more details.\n\n        @licend  The above is the entire license notice\n        for the JavaScript code in this page.\n*/\nEOF;\n        // add common javascripts\n        $this->add_script($lic, 'head_top');\n        $this->add_script('var '.self::JS_OBJECT_NAME.' = new rcube_webmail();', 'head_top');\n\n        // don't wait for page onload. Call init at the bottom of the page (delayed)\n        $this->add_script(self::JS_OBJECT_NAME.'.init();', 'docready');\n\n        $this->scripts_path = 'program/js/';\n        $this->include_script('jquery.min.js');\n        $this->include_script('common.js');\n        $this->include_script('app.js');\n\n        // register common UI objects\n        $this->add_handlers(array(\n            'loginform'       => array($this, 'login_form'),\n            'preloader'       => array($this, 'preloader'),\n            'username'        => array($this, 'current_username'),\n            'message'         => array($this, 'message_container'),\n            'charsetselector' => array($this, 'charset_selector'),\n            'aboutcontent'    => array($this, 'about_content'),\n        ));\n    }\n\n    /**\n     * Set environment variable\n     *\n     * @param string Property name\n     * @param mixed Property value\n     * @param boolean True if this property should be added to client environment\n     */\n    public function set_env($name, $value, $addtojs = true)\n    {\n        $this->env[$name] = $value;\n\n        if ($addtojs || isset($this->js_env[$name])) {\n            $this->js_env[$name] = $value;\n        }\n    }\n\n    /**\n     * Parse and set assets path\n     *\n     * @param string Assets path (relative or absolute URL)\n     */\n    public function set_assets_path($path, $fs_dir = null)\n    {\n        if (empty($path)) {\n            return;\n        }\n\n        $path = rtrim($path, '/') . '/';\n\n        // handle relative assets path\n        if (!preg_match('|^https?://|', $path) && $path[0] != '/') {\n            // save the path to search for asset files later\n            $this->assets_dir = $path;\n\n            $base = preg_replace('/[?#&].*$/', '', $_SERVER['REQUEST_URI']);\n            $base = rtrim($base, '/');\n\n            // remove url token if exists\n            if ($len = intval($this->config->get('use_secure_urls'))) {\n                $_base  = explode('/', $base);\n                $last   = count($_base) - 1;\n                $length = $len > 1 ? $len : 16; // as in rcube::get_secure_url_token()\n\n                // we can't use real token here because it\n                // does not exists in unauthenticated state,\n                // hope this will not produce false-positive matches\n                if ($last > -1 && preg_match('/^[a-f0-9]{' . $length . '}$/', $_base[$last])) {\n                    $path = '../' . $path;\n                }\n            }\n        }\n\n        // set filesystem path for assets\n        if ($fs_dir) {\n            if ($fs_dir[0] != '/') {\n                $fs_dir = realpath(RCUBE_INSTALL_PATH . $fs_dir);\n            }\n            // ensure the path ends with a slash\n            $this->assets_dir = rtrim($fs_dir, '/') . '/';\n        }\n\n        $this->assets_path = $path;\n        $this->set_env('assets_path', $path);\n    }\n\n    /**\n     * Getter for the current page title\n     *\n     * @return string The page title\n     */\n    protected function get_pagetitle()\n    {\n        if (!empty($this->pagetitle)) {\n            $title = $this->pagetitle;\n        }\n        else if ($this->env['task'] == 'login') {\n            $title = $this->app->gettext(array(\n                'name' => 'welcome',\n                'vars' => array('product' => $this->config->get('product_name')\n            )));\n        }\n        else {\n            $title = ucfirst($this->env['task']);\n        }\n\n        return $title;\n    }\n\n    /**\n     * Set skin\n     */\n    public function set_skin($skin)\n    {\n        // Sanity check to prevent from path traversal vulnerability (#1490620)\n        if (strpos($skin, '/') !== false || strpos($skin, \"\\\\\") !== false) {\n            rcube::raise_error(array(\n                    'file'    => __FILE__,\n                    'line'    => __LINE__,\n                    'message' => 'Invalid skin name'\n                ), true, false);\n\n            return false;\n        }\n\n        $valid = false;\n        $path  = RCUBE_INSTALL_PATH . 'skins/';\n\n        if (!empty($skin) && is_dir($path . $skin) && is_readable($path . $skin)) {\n            $skin_path = 'skins/' . $skin;\n            $valid     = true;\n        }\n        else {\n            $skin_path = $this->config->get('skin_path');\n            if (!$skin_path) {\n                $skin_path = 'skins/' . rcube_config::DEFAULT_SKIN;\n            }\n            $valid = !$skin;\n        }\n\n        $skin_path = rtrim($skin_path, '/');\n\n        $this->config->set('skin_path', $skin_path);\n        $this->base_path = $skin_path;\n\n        // register skin path(s)\n        $this->skin_paths = array();\n        $this->load_skin($skin_path);\n\n        return $valid;\n    }\n\n    /**\n     * Helper method to recursively read skin meta files and register search paths\n     */\n    private function load_skin($skin_path)\n    {\n        $this->skin_paths[] = $skin_path;\n\n        // read meta file and check for dependecies\n        $meta = @file_get_contents(RCUBE_INSTALL_PATH . $skin_path . '/meta.json');\n        $meta = @json_decode($meta, true);\n\n        $meta['path']  = $skin_path;\n        $path_elements = explode('/', $skin_path);\n        $skin_id       = end($path_elements);\n\n        if (!$meta['name']) {\n            $meta['name'] = $skin_id;\n        }\n\n        $this->skins[$skin_id] = $meta;\n\n        if ($meta['extends']) {\n            $path = RCUBE_INSTALL_PATH . 'skins/';\n            if (is_dir($path . $meta['extends']) && is_readable($path . $meta['extends'])) {\n                $this->load_skin('skins/' . $meta['extends']);\n            }\n        }\n    }\n\n    /**\n     * Check if a specific template exists\n     *\n     * @param string Template name\n     * @return boolean True if template exists\n     */\n    public function template_exists($name)\n    {\n        foreach ($this->skin_paths as $skin_path) {\n            $filename = RCUBE_INSTALL_PATH . $skin_path . '/templates/' . $name . '.html';\n            if ((is_file($filename) && is_readable($filename))\n                || ($this->deprecated_templates[$name] && $this->template_exists($this->deprecated_templates[$name]))\n            ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Find the given file in the current skin path stack\n     *\n     * @param string File name/path to resolve (starting with /)\n     * @param string Reference to the base path of the matching skin\n     * @param string Additional path to search in\n     *\n     * @return mixed Relative path to the requested file or False if not found\n     */\n    public function get_skin_file($file, &$skin_path = null, $add_path = null)\n    {\n        $skin_paths = $this->skin_paths;\n        if ($add_path) {\n            array_unshift($skin_paths, $add_path);\n        }\n\n        foreach ($skin_paths as $skin_path) {\n            $path = realpath(RCUBE_INSTALL_PATH . $skin_path . $file);\n\n            if ($path && is_file($path)) {\n                return $skin_path . $file;\n            }\n\n            if ($this->assets_dir != RCUBE_INSTALL_PATH) {\n                $path = realpath($this->assets_dir . $skin_path . $file);\n\n                if ($path && is_file($path)) {\n                    return $skin_path . $file;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Register a GUI object to the client script\n     *\n     * @param  string Object name\n     * @param  string Object ID\n     * @return void\n     */\n    public function add_gui_object($obj, $id)\n    {\n        $this->add_script(self::JS_OBJECT_NAME.\".gui_object('$obj', '$id');\");\n    }\n\n    /**\n     * Call a client method\n     *\n     * @param string Method to call\n     * @param ... Additional arguments\n     */\n    public function command()\n    {\n        $cmd = func_get_args();\n        if (strpos($cmd[0], 'plugin.') !== false)\n            $this->js_commands[] = array('triggerEvent', $cmd[0], $cmd[1]);\n        else\n            $this->js_commands[] = $cmd;\n    }\n\n    /**\n     * Add a localized label to the client environment\n     */\n    public function add_label()\n    {\n        $args = func_get_args();\n        if (count($args) == 1 && is_array($args[0]))\n            $args = $args[0];\n\n        foreach ($args as $name) {\n            $this->js_labels[$name] = $this->app->gettext($name);\n        }\n    }\n\n    /**\n     * Invoke display_message command\n     *\n     * @param string  $message  Message to display\n     * @param string  $type     Message type [notice|confirm|error]\n     * @param array   $vars     Key-value pairs to be replaced in localized text\n     * @param boolean $override Override last set message\n     * @param int     $timeout  Message display time in seconds\n     * @uses self::command()\n     */\n    public function show_message($message, $type='notice', $vars=null, $override=true, $timeout=0)\n    {\n        if ($override || !$this->message) {\n            if ($this->app->text_exists($message)) {\n                if (!empty($vars))\n                    $vars = array_map(array('rcube','Q'), $vars);\n                $msgtext = $this->app->gettext(array('name' => $message, 'vars' => $vars));\n            }\n            else\n                $msgtext = $message;\n\n            $this->message = $message;\n            $this->command('display_message', $msgtext, $type, $timeout * 1000);\n        }\n    }\n\n    /**\n     * Delete all stored env variables and commands\n     *\n     * @param bool $all Reset all env variables (including internal)\n     */\n    public function reset($all = false)\n    {\n        $framed = $this->framed;\n        $env    = $all ? null : array_intersect_key($this->env, array('extwin'=>1, 'framed'=>1));\n\n        parent::reset();\n\n        // let some env variables survive\n        $this->env          = $this->js_env = $env;\n        $this->framed       = $framed || $this->env['framed'];\n        $this->js_labels    = array();\n        $this->js_commands  = array();\n        $this->script_files = array();\n        $this->scripts      = array();\n        $this->header       = '';\n        $this->footer       = '';\n        $this->body         = '';\n\n        // load defaults\n        if (!$all) {\n            $this->__construct();\n        }\n    }\n\n    /**\n     * Redirect to a certain url\n     *\n     * @param mixed $p      Either a string with the action or url parameters as key-value pairs\n     * @param int   $delay  Delay in seconds\n     * @param bool  $secure Redirect to secure location (see rcmail::url())\n     */\n    public function redirect($p = array(), $delay = 1, $secure = false)\n    {\n        if ($this->env['extwin'])\n            $p['extwin'] = 1;\n        $location = $this->app->url($p, false, false, $secure);\n        header('Location: ' . $location);\n        exit;\n    }\n\n    /**\n     * Send the request output to the client.\n     * This will either parse a skin tempalte or send an AJAX response\n     *\n     * @param string  Template name\n     * @param boolean True if script should terminate (default)\n     */\n    public function send($templ = null, $exit = true)\n    {\n        if ($templ != 'iframe') {\n            // prevent from endless loops\n            if ($exit != 'recur' && $this->app->plugins->is_processing('render_page')) {\n                rcube::raise_error(array('code' => 505, 'type' => 'php',\n                  'file' => __FILE__, 'line' => __LINE__,\n                  'message' => 'Recursion alert: ignoring output->send()'), true, false);\n                return;\n            }\n            $this->parse($templ, false);\n        }\n        else {\n            $this->framed = true;\n            $this->write();\n        }\n\n        // set output asap\n        ob_flush();\n        flush();\n\n        if ($exit) {\n            exit;\n        }\n    }\n\n    /**\n     * Process template and write to stdOut\n     *\n     * @param string $template HTML template content\n     */\n    public function write($template = '')\n    {\n        if (!empty($this->script_files)) {\n            $this->set_env('request_token', $this->app->get_request_token());\n        }\n\n        $commands = $this->get_js_commands($framed);\n\n        // if all js commands go to parent window we can ignore all\n        // script files and skip rcube_webmail initialization (#1489792)\n        if ($framed) {\n            $this->scripts      = array();\n            $this->script_files = array();\n            $this->header       = '';\n            $this->footer       = '';\n        }\n\n        // write all javascript commands\n        $this->add_script($commands, 'head_top');\n\n        // allow (legal) iframe content to be loaded\n        $iframe = $this->framed || $this->env['framed'];\n        if (!headers_sent() && $iframe && $this->app->config->get('x_frame_options', 'sameorigin') === 'deny') {\n            header('X-Frame-Options: sameorigin', true);\n        }\n\n        // call super method\n        $this->_write($template, $this->config->get('skin_path'));\n    }\n\n    /**\n     * Parse a specific skin template and deliver to stdout (or return)\n     *\n     * @param  string  Template name\n     * @param  boolean Exit script\n     * @param  boolean Don't write to stdout, return parsed content instead\n     *\n     * @link   http://php.net/manual/en/function.exit.php\n     */\n    function parse($name = 'main', $exit = true, $write = true)\n    {\n        $plugin   = false;\n        $realname = $name;\n        $plugin_skin_paths = array();\n\n        $this->template_name = $realname;\n\n        $temp = explode('.', $name, 2);\n        if (count($temp) > 1) {\n            $plugin   = $temp[0];\n            $name     = $temp[1];\n            $skin_dir = $plugin . '/skins/' . $this->config->get('skin');\n\n            // apply skin search escalation list to plugin directory\n            foreach ($this->skin_paths as $skin_path) {\n                $plugin_skin_paths[] = $this->app->plugins->url . $plugin . '/' . $skin_path;\n            }\n\n            // add fallback to default skin\n            if (is_dir($this->app->plugins->dir . $plugin . '/skins/default')) {\n                $skin_dir = $plugin . '/skins/default';\n                $plugin_skin_paths[] = $this->app->plugins->url . $skin_dir;\n            }\n\n            // prepend plugin skin paths to search list\n            $this->skin_paths = array_merge($plugin_skin_paths, $this->skin_paths);\n        }\n\n        // find skin template\n        $path = false;\n        foreach ($this->skin_paths as $skin_path) {\n            $path = RCUBE_INSTALL_PATH . \"$skin_path/templates/$name.html\";\n\n            // fallback to deprecated template names\n            if (!is_readable($path) && $this->deprecated_templates[$realname]) {\n                $path = RCUBE_INSTALL_PATH . \"$skin_path/templates/\" . $this->deprecated_templates[$realname] . \".html\";\n\n                if (is_readable($path)) {\n                    rcube::raise_error(array(\n                        'code' => 502, 'type' => 'php',\n                        'file' => __FILE__, 'line' => __LINE__,\n                        'message' => \"Using deprecated template '\" . $this->deprecated_templates[$realname]\n                            . \"' in $skin_path/templates. Please rename to '$realname'\"),\n                        true, false);\n                }\n            }\n\n            if (is_readable($path)) {\n                $this->config->set('skin_path', $skin_path);\n                $this->base_path = preg_replace('!plugins/\\w+/!', '', $skin_path);  // set base_path to core skin directory (not plugin's skin)\n                $skin_dir = preg_replace('!^plugins/!', '', $skin_path);\n                break;\n            }\n            else {\n                $path = false;\n            }\n        }\n\n        // read template file\n        if (!$path || ($templ = @file_get_contents($path)) === false) {\n            rcube::raise_error(array(\n                'code' => 404,\n                'type' => 'php',\n                'line' => __LINE__,\n                'file' => __FILE__,\n                'message' => 'Error loading template for '.$realname\n                ), true, $write);\n\n            $this->skin_paths = array_slice($this->skin_paths, count($plugin_skin_paths));\n            return false;\n        }\n\n        // replace all path references to plugins/... with the configured plugins dir\n        // and /this/ to the current plugin skin directory\n        if ($plugin) {\n            $templ = preg_replace(array('/\\bplugins\\//', '/([\"\\']?)\\/this\\//'), array($this->app->plugins->url, '\\\\1'.$this->app->plugins->url.$skin_dir.'/'), $templ);\n        }\n\n        // parse for specialtags\n        $output = $this->parse_conditions($templ);\n        $output = $this->parse_xml($output);\n\n        // trigger generic hook where plugins can put additional content to the page\n        $hook = $this->app->plugins->exec_hook(\"render_page\", array('template' => $realname, 'content' => $output));\n\n        // save some memory\n        $output = $hook['content'];\n        unset($hook['content']);\n\n        // make sure all <form> tags have a valid request token\n        $output = preg_replace_callback('/<form\\s+([^>]+)>/Ui', array($this, 'alter_form_tag'), $output);\n        $this->footer = preg_replace_callback('/<form\\s+([^>]+)>/Ui', array($this, 'alter_form_tag'), $this->footer);\n\n        // remove plugin skin paths from current context\n        $this->skin_paths = array_slice($this->skin_paths, count($plugin_skin_paths));\n\n        if (!$write) {\n            return $output;\n        }\n\n        $this->write(trim($output));\n\n        if ($exit) {\n            exit;\n        }\n    }\n\n    /**\n     * Return executable javascript code for all registered commands\n     *\n     * @return string $out\n     */\n    protected function get_js_commands(&$framed = null)\n    {\n        $out             = '';\n        $parent_commands = 0;\n        $top_commands    = array();\n\n        // these should be always on top,\n        // e.g. hide_message() below depends on env.framed\n        if (!$this->framed && !empty($this->js_env)) {\n            $top_commands[] = array('set_env', $this->js_env);\n        }\n        if (!empty($this->js_labels)) {\n            $top_commands[] = array('add_label', $this->js_labels);\n        }\n\n        // unlock interface after iframe load\n        $unlock = preg_replace('/[^a-z0-9]/i', '', $_REQUEST['_unlock']);\n        if ($this->framed) {\n            $top_commands[] = array('iframe_loaded', $unlock);\n        }\n        else if ($unlock) {\n            $top_commands[] = array('hide_message', $unlock);\n        }\n\n        $commands = array_merge($top_commands, $this->js_commands);\n\n        foreach ($commands as $i => $args) {\n            $method = array_shift($args);\n            $parent = $this->framed || preg_match('/^parent\\./', $method);\n\n            foreach ($args as $i => $arg) {\n                $args[$i] = self::json_serialize($arg);\n            }\n\n            if ($parent) {\n                $parent_commands++;\n                $method        = preg_replace('/^parent\\./', '', $method);\n                $parent_prefix = 'if (window.parent && parent.' . self::JS_OBJECT_NAME . ') parent.';\n                $method        = $parent_prefix . self::JS_OBJECT_NAME . '.' . $method;\n            }\n            else {\n                $method = self::JS_OBJECT_NAME . '.' . $method;\n            }\n\n            $out .= sprintf(\"%s(%s);\\n\", $method, implode(',', $args));\n        }\n\n        $framed = $parent_prefix && $parent_commands == count($commands);\n\n        // make the output more compact if all commands go to parent window\n        if ($framed) {\n            $out = \"if (window.parent && parent.\" . self::JS_OBJECT_NAME . \") {\\n\"\n                . str_replace($parent_prefix, \"\\tparent.\", $out)\n                . \"}\\n\";\n        }\n\n        return $out;\n    }\n\n    /**\n     * Make URLs starting with a slash point to skin directory\n     *\n     * @param  string Input string\n     * @param  boolean True if URL should be resolved using the current skin path stack\n     * @return string\n     */\n    public function abs_url($str, $search_path = false)\n    {\n        if ($str[0] == '/') {\n            if ($search_path && ($file_url = $this->get_skin_file($str, $skin_path))) {\n                return $file_url;\n            }\n\n            return $this->base_path . $str;\n        }\n\n        return $str;\n    }\n\n    /**\n     * Show error page and terminate script execution\n     *\n     * @param int    $code     Error code\n     * @param string $message  Error message\n     */\n    public function raise_error($code, $message)\n    {\n        global $__page_content, $ERROR_CODE, $ERROR_MESSAGE;\n\n        $ERROR_CODE    = $code;\n        $ERROR_MESSAGE = $message;\n\n        include RCUBE_INSTALL_PATH . 'program/steps/utils/error.inc';\n        exit;\n    }\n\n    /**\n     * Modify path by adding URL prefix if configured\n     */\n    public function asset_url($path)\n    {\n        // iframe content can't be in a different domain\n        // @TODO: check if assests are on a different domain\n\n        if (!$this->assets_path || in_array($path[0], array('?', '/', '.')) || strpos($path, '://')) {\n            return $path;\n        }\n\n        return $this->assets_path . $path;\n    }\n\n\n    /*****  Template parsing methods  *****/\n\n    /**\n     * Replace all strings ($varname)\n     * with the content of the according global variable.\n     */\n    protected function parse_with_globals($input)\n    {\n        $GLOBALS['__version']   = html::quote(RCMAIL_VERSION);\n        $GLOBALS['__comm_path'] = html::quote($this->app->comm_path);\n        $GLOBALS['__skin_path'] = html::quote($this->base_path);\n\n        return preg_replace_callback('/\\$(__[a-z0-9_\\-]+)/',\n            array($this, 'globals_callback'), $input);\n    }\n\n    /**\n     * Callback funtion for preg_replace_callback() in parse_with_globals()\n     */\n    protected function globals_callback($matches)\n    {\n        return $GLOBALS[$matches[1]];\n    }\n\n    /**\n     * Correct absolute paths in images and other tags\n     * add timestamp to .js and .css filename\n     */\n    protected function fix_paths($output)\n    {\n        return preg_replace_callback(\n            '!(src|href|background)=([\"\\']?)([a-z0-9/_.-]+)([\"\\'\\s>])!i',\n            array($this, 'file_callback'), $output);\n    }\n\n    /**\n     * Callback function for preg_replace_callback in fix_paths()\n     *\n     * @return string Parsed string\n     */\n    protected function file_callback($matches)\n    {\n        $file = $matches[3];\n        $file = preg_replace('!^/this/!', '/', $file);\n\n        // correct absolute paths\n        if ($file[0] == '/') {\n            $file = $this->base_path . $file;\n        }\n\n        // add file modification timestamp\n        if (preg_match('/\\.(js|css)$/', $file, $m)) {\n            $file = $this->file_mod($file);\n        }\n\n        return $matches[1] . '=' . $matches[2] . $file . $matches[4];\n    }\n\n    /**\n     * Correct paths of asset files according to assets_path\n     */\n    protected function fix_assets_paths($output)\n    {\n        return preg_replace_callback(\n            '!(src|href|background)=([\"\\']?)([a-z0-9/_.?=-]+)([\"\\'\\s>])!i',\n            array($this, 'assets_callback'), $output);\n    }\n\n    /**\n     * Callback function for preg_replace_callback in fix_assets_paths()\n     *\n     * @return string Parsed string\n     */\n    protected function assets_callback($matches)\n    {\n        $file = $this->asset_url($matches[3]);\n\n        return $matches[1] . '=' . $matches[2] . $file . $matches[4];\n    }\n\n    /**\n     * Modify file by adding mtime indicator\n     */\n    protected function file_mod($file)\n    {\n        $fs  = false;\n        $ext = substr($file, strrpos($file, '.') + 1);\n\n        // use minified file if exists (not in development mode)\n        if (!$this->devel_mode && !preg_match('/\\.min\\.' . $ext . '$/', $file)) {\n            $minified_file = substr($file, 0, strlen($ext) * -1) . 'min.' . $ext;\n            if ($fs = @filemtime($this->assets_dir . $minified_file)) {\n                return $minified_file . '?s=' . $fs;\n            }\n        }\n\n        if ($fs = @filemtime($this->assets_dir . $file)) {\n            $file .= '?s=' . $fs;\n        }\n\n        return $file;\n    }\n\n    /**\n     * Public wrapper to dipp into template parsing.\n     *\n     * @param  string $input\n     * @return string\n     * @uses   rcmail_output_html::parse_xml()\n     * @since  0.1-rc1\n     */\n    public function just_parse($input)\n    {\n        $input = $this->parse_conditions($input);\n        $input = $this->parse_xml($input);\n\n        return $input;\n    }\n\n    /**\n     * Parse for conditional tags\n     *\n     * @param  string $input\n     * @return string\n     */\n    protected function parse_conditions($input)\n    {\n        $matches = preg_split('/<roundcube:(if|elseif|else|endif)\\s+([^>]+)>\\n?/is', $input, 2, PREG_SPLIT_DELIM_CAPTURE);\n        if ($matches && count($matches) == 4) {\n            if (preg_match('/^(else|endif)$/i', $matches[1])) {\n                return $matches[0] . $this->parse_conditions($matches[3]);\n            }\n            $attrib = html::parse_attrib_string($matches[2]);\n            if (isset($attrib['condition'])) {\n                $condmet = $this->check_condition($attrib['condition']);\n                $submatches = preg_split('/<roundcube:(elseif|else|endif)\\s+([^>]+)>\\n?/is', $matches[3], 2, PREG_SPLIT_DELIM_CAPTURE);\n                if ($condmet) {\n                    $result = $submatches[0];\n                    $result.= ($submatches[1] != 'endif' ? preg_replace('/.*<roundcube:endif\\s+[^>]+>\\n?/Uis', '', $submatches[3], 1) : $submatches[3]);\n                }\n                else {\n                    $result = \"<roundcube:$submatches[1] $submatches[2]>\" . $submatches[3];\n                }\n                return $matches[0] . $this->parse_conditions($result);\n            }\n            rcube::raise_error(array(\n                'code' => 500,\n                'type' => 'php',\n                'line' => __LINE__,\n                'file' => __FILE__,\n                'message' => \"Unable to parse conditional tag \" . $matches[2]\n            ), true, false);\n        }\n        return $input;\n    }\n\n    /**\n     * Determines if a given condition is met\n     *\n     * @todo   Extend this to allow real conditions, not just \"set\"\n     * @param  string Condition statement\n     * @return boolean True if condition is met, False if not\n     */\n    protected function check_condition($condition)\n    {\n        return $this->eval_expression($condition);\n    }\n\n    /**\n     * Inserts hidden field with CSRF-prevention-token into POST forms\n     */\n    protected function alter_form_tag($matches)\n    {\n        $out    = $matches[0];\n        $attrib = html::parse_attrib_string($matches[1]);\n\n        if (strtolower($attrib['method']) == 'post') {\n            $hidden = new html_hiddenfield(array('name' => '_token', 'value' => $this->app->get_request_token()));\n            $out .= \"\\n\" . $hidden->show();\n        }\n\n        return $out;\n    }\n\n    /**\n     * Parse & evaluate a given expression and return its result.\n     *\n     * @param string Expression statement\n     *\n     * @return mixed Expression result\n     */\n    protected function eval_expression ($expression)\n    {\n        $expression = preg_replace(\n            array(\n                '/session:([a-z0-9_]+)/i',\n                '/config:([a-z0-9_]+)(:([a-z0-9_]+))?/i',\n                '/env:([a-z0-9_]+)/i',\n                '/request:([a-z0-9_]+)/i',\n                '/cookie:([a-z0-9_]+)/i',\n                '/browser:([a-z0-9_]+)/i',\n                '/template:name/i',\n            ),\n            array(\n                \"\\$_SESSION['\\\\1']\",\n                \"\\$app->config->get('\\\\1',rcube_utils::get_boolean('\\\\3'))\",\n                \"\\$env['\\\\1']\",\n                \"rcube_utils::get_input_value('\\\\1', rcube_utils::INPUT_GPC)\",\n                \"\\$_COOKIE['\\\\1']\",\n                \"\\$browser->{'\\\\1'}\",\n                \"'\" . $this->template_name . \"'\",\n            ),\n            $expression\n        );\n\n        $fn = create_function('$app,$browser,$env', \"return ($expression);\");\n        if (!$fn) {\n            rcube::raise_error(array(\n                'code' => 505,\n                'type' => 'php',\n                'file' => __FILE__,\n                'line' => __LINE__,\n                'message' => \"Expression parse error on: ($expression)\"), true, false);\n\n            return null;\n        }\n\n        return $fn($this->app, $this->browser, $this->env);\n    }\n\n    /**\n     * Search for special tags in input and replace them\n     * with the appropriate content\n     *\n     * @param  string Input string to parse\n     * @return string Altered input string\n     * @todo   Use DOM-parser to traverse template HTML\n     * @todo   Maybe a cache.\n     */\n    protected function parse_xml($input)\n    {\n        return preg_replace_callback('/<roundcube:([-_a-z]+)\\s+((?:[^>]|\\\\\\\\>)+)(?<!\\\\\\\\)>/Ui', array($this, 'xml_command'), $input);\n    }\n\n    /**\n     * Callback function for parsing an xml command tag\n     * and turn it into real html content\n     *\n     * @param  array Matches array of preg_replace_callback\n     * @return string Tag/Object content\n     */\n    protected function xml_command($matches)\n    {\n        $command = strtolower($matches[1]);\n        $attrib  = html::parse_attrib_string($matches[2]);\n\n        // empty output if required condition is not met\n        if (!empty($attrib['condition']) && !$this->check_condition($attrib['condition'])) {\n            return '';\n        }\n\n        // localize title and summary attributes\n        if ($command != 'button' && !empty($attrib['title']) && $this->app->text_exists($attrib['title'])) {\n            $attrib['title'] = $this->app->gettext($attrib['title']);\n        }\n        if ($command != 'button' && !empty($attrib['summary']) && $this->app->text_exists($attrib['summary'])) {\n            $attrib['summary'] = $this->app->gettext($attrib['summary']);\n        }\n\n        // execute command\n        switch ($command) {\n            // return a button\n            case 'button':\n                if ($attrib['name'] || $attrib['command']) {\n                    return $this->button($attrib);\n                }\n                break;\n\n            // frame\n            case 'frame':\n                return $this->frame($attrib);\n                break;\n\n            // show a label\n            case 'label':\n                if ($attrib['expression'])\n                    $attrib['name'] = $this->eval_expression($attrib['expression']);\n\n                if ($attrib['name'] || $attrib['command']) {\n                    $vars = $attrib + array('product' => $this->config->get('product_name'));\n                    unset($vars['name'], $vars['command']);\n\n                    $label   = $this->app->gettext($attrib + array('vars' => $vars));\n                    $quoting = !empty($attrib['quoting']) ? strtolower($attrib['quoting']) : (rcube_utils::get_boolean((string)$attrib['html']) ? 'no' : '');\n\n                    // 'noshow' can be used in skins to define new labels\n                    if ($attrib['noshow']) {\n                        return '';\n                    }\n\n                    switch ($quoting) {\n                        case 'no':\n                        case 'raw':\n                            break;\n                        case 'javascript':\n                        case 'js':\n                            $label = rcube::JQ($label);\n                            break;\n                        default:\n                            $label = html::quote($label);\n                            break;\n                    }\n\n                    return $label;\n                }\n                break;\n\n            // include a file\n            case 'include':\n                $old_base_path = $this->base_path;\n                if (!empty($attrib['skin_path'])) $attrib['skinpath'] = $attrib['skin_path'];\n                if ($path = $this->get_skin_file($attrib['file'], $skin_path, $attrib['skinpath'])) {\n                    $this->base_path = preg_replace('!plugins/\\w+/!', '', $skin_path);  // set base_path to core skin directory (not plugin's skin)\n                    $path = realpath(RCUBE_INSTALL_PATH . $path);\n                }\n\n                if (is_readable($path)) {\n                    if ($this->config->get('skin_include_php')) {\n                        $incl = $this->include_php($path);\n                    }\n                    else {\n                      $incl = file_get_contents($path);\n                    }\n                    $incl = $this->parse_conditions($incl);\n                    $incl = $this->parse_xml($incl);\n                    $incl = $this->fix_paths($incl);\n                    $this->base_path = $old_base_path;\n                    return $incl;\n                }\n                break;\n\n            case 'plugin.include':\n                $hook = $this->app->plugins->exec_hook(\"template_plugin_include\", $attrib);\n                return $hook['content'];\n\n            // define a container block\n            case 'container':\n                if ($attrib['name'] && $attrib['id']) {\n                    $this->command('gui_container', $attrib['name'], $attrib['id']);\n                    // let plugins insert some content here\n                    $hook = $this->app->plugins->exec_hook(\"template_container\", $attrib);\n                    return $hook['content'];\n                }\n                break;\n\n            // return code for a specific application object\n            case 'object':\n                $object = strtolower($attrib['name']);\n                $content = '';\n\n                // we are calling a class/method\n                if (($handler = $this->object_handlers[$object]) && is_array($handler)) {\n                    if ((is_object($handler[0]) && method_exists($handler[0], $handler[1])) ||\n                    (is_string($handler[0]) && class_exists($handler[0])))\n                    $content = call_user_func($handler, $attrib);\n                }\n                // execute object handler function\n                else if (function_exists($handler)) {\n                    $content = call_user_func($handler, $attrib);\n                }\n                else if ($object == 'doctype') {\n                    $content = html::doctype($attrib['value']);\n                }\n                else if ($object == 'logo') {\n                    $attrib += array('alt' => $this->xml_command(array('', 'object', 'name=\"productname\"')));\n\n                    if ($logo = $this->config->get('skin_logo')) {\n                        if (is_array($logo)) {\n                            if ($template_logo = $logo[$this->template_name]) {\n                                $attrib['src'] = $template_logo;\n                            }\n                            elseif ($template_logo = $logo['*']) {\n                                $attrib['src'] = $template_logo;\n                            }\n                        }\n                        else {\n                            $attrib['src'] = $logo;\n                        }\n                    }\n\n                    $content = html::img($attrib);\n                }\n                else if ($object == 'productname') {\n                    $name = $this->config->get('product_name', 'Roundcube Webmail');\n                    $content = html::quote($name);\n                }\n                else if ($object == 'version') {\n                    $ver = (string)RCMAIL_VERSION;\n                    if (is_file(RCUBE_INSTALL_PATH . '.svn/entries')) {\n                        if (preg_match('/Revision:\\s(\\d+)/', @shell_exec('svn info'), $regs))\n                          $ver .= ' [SVN r'.$regs[1].']';\n                    }\n                    else if (is_file(RCUBE_INSTALL_PATH . '.git/index')) {\n                        if (preg_match('/Date:\\s+([^\\n]+)/', @shell_exec('git log -1'), $regs)) {\n                            if ($date = date('Ymd.Hi', strtotime($regs[1]))) {\n                                $ver .= ' [GIT '.$date.']';\n                            }\n                        }\n                    }\n                    $content = html::quote($ver);\n                }\n                else if ($object == 'steptitle') {\n                  $content = html::quote($this->get_pagetitle());\n                }\n                else if ($object == 'pagetitle') {\n                    if ($this->devel_mode && !empty($_SESSION['username']))\n                        $title = $_SESSION['username'].' :: ';\n                    else if ($prod_name = $this->config->get('product_name'))\n                        $title = $prod_name . ' :: ';\n                    else\n                        $title = '';\n                    $title .= $this->get_pagetitle();\n                    $content = html::quote($title);\n                }\n\n                // exec plugin hooks for this template object\n                $hook = $this->app->plugins->exec_hook(\"template_object_$object\", $attrib + array('content' => $content));\n                return $hook['content'];\n\n            // return code for a specified eval expression\n            case 'exp':\n                return html::quote($this->eval_expression($attrib['expression']));\n\n            // return variable\n            case 'var':\n                $var = explode(':', $attrib['name']);\n                $name = $var[1];\n                $value = '';\n\n                switch ($var[0]) {\n                    case 'env':\n                        $value = $this->env[$name];\n                        break;\n                    case 'config':\n                        $value = $this->config->get($name);\n                        if (is_array($value) && $value[$_SESSION['storage_host']]) {\n                            $value = $value[$_SESSION['storage_host']];\n                        }\n                        break;\n                    case 'request':\n                        $value = rcube_utils::get_input_value($name, rcube_utils::INPUT_GPC);\n                        break;\n                    case 'session':\n                        $value = $_SESSION[$name];\n                        break;\n                    case 'cookie':\n                        $value = htmlspecialchars($_COOKIE[$name]);\n                        break;\n                    case 'browser':\n                        $value = $this->browser->{$name};\n                        break;\n                }\n\n                if (is_array($value)) {\n                    $value = implode(', ', $value);\n                }\n\n                return html::quote($value);\n\n            case 'form':\n                return $this->form_tag($attrib);\n        }\n        return '';\n    }\n\n    /**\n     * Include a specific file and return it's contents\n     *\n     * @param string File path\n     * @return string Contents of the processed file\n     */\n    protected function include_php($file)\n    {\n        ob_start();\n        include $file;\n        $out = ob_get_contents();\n        ob_end_clean();\n\n        return $out;\n    }\n\n    /**\n     * Create and register a button\n     *\n     * @param  array Named button attributes\n     * @return string HTML button\n     * @todo   Remove all inline JS calls and use jQuery instead.\n     * @todo   Remove all sprintf()'s - they are pretty, but also slow.\n     */\n    public function button($attrib)\n    {\n        static $s_button_count   = 100;\n        static $disabled_actions = null;\n\n        // these commands can be called directly via url\n        $a_static_commands = array('compose', 'list', 'preferences', 'folders', 'identities');\n\n        if (!($attrib['command'] || $attrib['name'] || $attrib['href'])) {\n            return '';\n        }\n\n        // try to find out the button type\n        if ($attrib['type']) {\n            $attrib['type'] = strtolower($attrib['type']);\n            if ($pos = strpos($attrib['type'], '-menuitem')) {\n                $attrib['type'] = substr($attrib['type'], 0, -9);\n                $menuitem = true;\n            }\n        }\n        else {\n            $attrib['type'] = ($attrib['image'] || $attrib['imagepas'] || $attrib['imageact']) ? 'image' : 'link';\n        }\n\n        $command = $attrib['command'];\n\n        if ($attrib['task']) {\n            $element = $command = $attrib['task'] . '.' . $command;\n        }\n        else {\n            $element = ($this->env['task'] ? $this->env['task'] . '.' : '') . $command;\n        }\n\n        if ($disabled_actions === null) {\n            $disabled_actions = (array) $this->config->get('disabled_actions');\n        }\n\n        // remove buttons for disabled actions\n        if (in_array($element, $disabled_actions)) {\n            return '';\n        }\n\n        if (!$attrib['image']) {\n            $attrib['image'] = $attrib['imagepas'] ? $attrib['imagepas'] : $attrib['imageact'];\n        }\n\n        if (!$attrib['id']) {\n            $attrib['id'] =  sprintf('rcmbtn%d', $s_button_count++);\n        }\n        // get localized text for labels and titles\n        if ($attrib['title']) {\n            $attrib['title'] = html::quote($this->app->gettext($attrib['title'], $attrib['domain']));\n        }\n        if ($attrib['label']) {\n            $attrib['label'] = html::quote($this->app->gettext($attrib['label'], $attrib['domain']));\n        }\n        if ($attrib['alt']) {\n            $attrib['alt'] = html::quote($this->app->gettext($attrib['alt'], $attrib['domain']));\n        }\n\n        // set accessibility attributes\n        if (!$attrib['role']) {\n            $attrib['role'] = 'button';\n        }\n        if (!empty($attrib['class']) && !empty($attrib['classact']) || !empty($attrib['imagepas']) && !empty($attrib['imageact'])) {\n            if (array_key_exists('tabindex', $attrib))\n                $attrib['data-tabindex'] = $attrib['tabindex'];\n            $attrib['tabindex'] = '-1';  // disable button by default\n            $attrib['aria-disabled'] = 'true';\n        }\n\n        // set title to alt attribute for IE browsers\n        if ($this->browser->ie && !$attrib['title'] && $attrib['alt']) {\n            $attrib['title'] = $attrib['alt'];\n        }\n\n        // add empty alt attribute for XHTML compatibility\n        if (!isset($attrib['alt'])) {\n            $attrib['alt'] = '';\n        }\n\n        // register button in the system\n        if ($attrib['command']) {\n            $this->add_script(sprintf(\n                \"%s.register_button('%s', '%s', '%s', '%s', '%s', '%s');\",\n                self::JS_OBJECT_NAME,\n                $command,\n                $attrib['id'],\n                $attrib['type'],\n                $attrib['imageact'] ? $this->abs_url($attrib['imageact']) : $attrib['classact'],\n                $attrib['imagesel'] ? $this->abs_url($attrib['imagesel']) : $attrib['classsel'],\n                $attrib['imageover'] ? $this->abs_url($attrib['imageover']) : ''\n            ));\n\n            // make valid href to specific buttons\n            if (in_array($attrib['command'], rcmail::$main_tasks)) {\n                $attrib['href']    = $this->app->url(array('task' => $attrib['command']));\n                $attrib['onclick'] = sprintf(\"return %s.command('switch-task','%s',this,event)\", self::JS_OBJECT_NAME, $attrib['command']);\n            }\n            else if ($attrib['task'] && in_array($attrib['task'], rcmail::$main_tasks)) {\n                $attrib['href'] = $this->app->url(array('action' => $attrib['command'], 'task' => $attrib['task']));\n            }\n            else if (in_array($attrib['command'], $a_static_commands)) {\n                $attrib['href'] = $this->app->url(array('action' => $attrib['command']));\n            }\n            else if (($attrib['command'] == 'permaurl' || $attrib['command'] == 'extwin') && !empty($this->env['permaurl'])) {\n              $attrib['href'] = $this->env['permaurl'];\n            }\n        }\n\n        // overwrite attributes\n        if (!$attrib['href']) {\n            $attrib['href'] = '#';\n        }\n        if ($attrib['task']) {\n            if ($attrib['classact'])\n                $attrib['class'] = $attrib['classact'];\n        }\n        else if ($command && !$attrib['onclick']) {\n            $attrib['onclick'] = sprintf(\n                \"return %s.command('%s','%s',this,event)\",\n                self::JS_OBJECT_NAME,\n                $command,\n                $attrib['prop']\n            );\n        }\n\n        $out = '';\n\n        // generate image tag\n        if ($attrib['type'] == 'image') {\n            $attrib_str = html::attrib_string(\n                $attrib,\n                array(\n                    'style', 'class', 'id', 'width', 'height', 'border', 'hspace',\n                    'vspace', 'align', 'alt', 'tabindex', 'title'\n                )\n            );\n            $btn_content = sprintf('<img src=\"%s\"%s />', $this->abs_url($attrib['image']), $attrib_str);\n            if ($attrib['label']) {\n                $btn_content .= ' '.$attrib['label'];\n            }\n            $link_attrib = array('href', 'onclick', 'onmouseover', 'onmouseout', 'onmousedown', 'onmouseup', 'target');\n        }\n        else if ($attrib['type'] == 'link') {\n            $btn_content = isset($attrib['content']) ? $attrib['content'] : ($attrib['label'] ? $attrib['label'] : $attrib['command']);\n            $link_attrib = array_merge(html::$common_attrib, array('href', 'onclick', 'tabindex', 'target'));\n            if ($attrib['innerclass'])\n                $btn_content = html::span($attrib['innerclass'], $btn_content);\n        }\n        else if ($attrib['type'] == 'input') {\n            $attrib['type'] = 'button';\n\n            if ($attrib['label']) {\n                $attrib['value'] = $attrib['label'];\n            }\n            if ($attrib['command']) {\n              $attrib['disabled'] = 'disabled';\n            }\n\n            $out = html::tag('input', $attrib, null, array('type', 'value', 'onclick', 'id', 'class', 'style', 'tabindex', 'disabled'));\n        }\n\n        // generate html code for button\n        if ($btn_content) {\n            $attrib_str = html::attrib_string($attrib, $link_attrib);\n            $out = sprintf('<a%s>%s</a>', $attrib_str, $btn_content);\n        }\n\n        if ($attrib['wrapper']) {\n            $out = html::tag($attrib['wrapper'], null, $out);\n        }\n\n        if ($menuitem) {\n            $class = $attrib['menuitem-class'] ? ' class=\"' . $attrib['menuitem-class'] . '\"' : '';\n            $out   = '<li role=\"menuitem\"' . $class . '>' . $out . '</li>';\n        }\n\n        return $out;\n    }\n\n    /**\n     * Link an external script file\n     *\n     * @param string File URL\n     * @param string Target position [head|foot]\n     */\n    public function include_script($file, $position='head')\n    {\n        if (!preg_match('|^https?://|i', $file) && $file[0] != '/') {\n            $file = $this->file_mod($this->scripts_path . $file);\n        }\n\n        if (!is_array($this->script_files[$position])) {\n            $this->script_files[$position] = array();\n        }\n\n        if (!in_array($file, $this->script_files[$position])) {\n            $this->script_files[$position][] = $file;\n        }\n    }\n\n    /**\n     * Add inline javascript code\n     *\n     * @param string JS code snippet\n     * @param string Target position [head|head_top|foot]\n     */\n    public function add_script($script, $position='head')\n    {\n        if (!isset($this->scripts[$position])) {\n            $this->scripts[$position] = \"\\n\" . rtrim($script);\n        }\n        else {\n            $this->scripts[$position] .= \"\\n\" . rtrim($script);\n        }\n    }\n\n    /**\n     * Link an external css file\n     *\n     * @param string File URL\n     */\n    public function include_css($file)\n    {\n        $this->css_files[] = $file;\n    }\n\n    /**\n     * Add HTML code to the page header\n     *\n     * @param string $str HTML code\n     */\n    public function add_header($str)\n    {\n        $this->header .= \"\\n\" . $str;\n    }\n\n    /**\n     * Add HTML code to the page footer\n     * To be added right befor </body>\n     *\n     * @param string $str HTML code\n     */\n    public function add_footer($str)\n    {\n        $this->footer .= \"\\n\" . $str;\n    }\n\n    /**\n     * Process template and write to stdOut\n     *\n     * @param string HTML template\n     * @param string Base for absolute paths\n     */\n    public function _write($templ = '', $base_path = '')\n    {\n        $output = trim($templ);\n\n        if (empty($output)) {\n            $output   = html::doctype('html5') . \"\\n\" . $this->default_template;\n            $is_empty = true;\n        }\n\n        // set default page title\n        if (empty($this->pagetitle)) {\n            $this->pagetitle = 'Roundcube Mail';\n        }\n\n        // declare page language\n        if (!empty($_SESSION['language'])) {\n            $lang = substr($_SESSION['language'], 0, 2);\n            $output = preg_replace('/<html/', '<html lang=\"' . html::quote($lang) . '\"', $output, 1);\n            if (!headers_sent()) {\n                header('Content-Language: ' . $lang);\n            }\n        }\n\n        // replace specialchars in content\n        $page_title  = html::quote($this->pagetitle);\n        $page_header = '';\n        $page_footer = '';\n\n        // include meta tag with charset\n        if (!empty($this->charset)) {\n            if (!headers_sent()) {\n                header('Content-Type: text/html; charset=' . $this->charset);\n            }\n            $page_header = '<meta http-equiv=\"content-type\"';\n            $page_header.= ' content=\"text/html; charset=';\n            $page_header.= $this->charset . '\" />'.\"\\n\";\n        }\n\n        // definition of the code to be placed in the document header and footer\n        if (is_array($this->script_files['head'])) {\n            foreach ($this->script_files['head'] as $file) {\n                $page_header .= html::script($file);\n            }\n        }\n\n        $head_script = $this->scripts['head_top'] . $this->scripts['head'];\n        if (!empty($head_script)) {\n            $page_header .= html::script(array(), $head_script);\n        }\n\n        if (!empty($this->header)) {\n            $page_header .= $this->header;\n        }\n\n        // put docready commands into page footer\n        if (!empty($this->scripts['docready'])) {\n            $this->add_script('$(document).ready(function(){ ' . $this->scripts['docready'] . \"\\n});\", 'foot');\n        }\n\n        if (is_array($this->script_files['foot'])) {\n            foreach ($this->script_files['foot'] as $file) {\n                $page_footer .= html::script($file);\n            }\n        }\n\n        if (!empty($this->footer)) {\n            $page_footer .= $this->footer . \"\\n\";\n        }\n\n        if (!empty($this->scripts['foot'])) {\n            $page_footer .= html::script(array(), $this->scripts['foot']);\n        }\n\n        // find page header\n        if ($hpos = stripos($output, '</head>')) {\n            $page_header .= \"\\n\";\n        }\n        else {\n            if (!is_numeric($hpos)) {\n                $hpos = stripos($output, '<body');\n            }\n            if (!is_numeric($hpos) && ($hpos = stripos($output, '<html'))) {\n                while ($output[$hpos] != '>') {\n                    $hpos++;\n                }\n                $hpos++;\n            }\n            $page_header = \"<head>\\n<title>$page_title</title>\\n$page_header\\n</head>\\n\";\n        }\n\n        // add page hader\n        if ($hpos) {\n            $output = substr_replace($output, $page_header, $hpos, 0);\n        }\n        else {\n            $output = $page_header . $output;\n        }\n\n        // add page footer\n        if (($fpos = strripos($output, '</body>')) || ($fpos = strripos($output, '</html>'))) {\n            $output = substr_replace($output, $page_footer.\"\\n\", $fpos, 0);\n        }\n        else {\n            $output .= \"\\n\".$page_footer;\n        }\n\n        // add css files in head, before scripts, for speed up with parallel downloads\n        if (!empty($this->css_files) && !$is_empty\n            && (($pos = stripos($output, '<script ')) || ($pos = stripos($output, '</head>')))\n        ) {\n            $css = '';\n            foreach ($this->css_files as $file) {\n                $css .= html::tag('link', array('rel' => 'stylesheet',\n                    'type' => 'text/css', 'href' => $file, 'nl' => true));\n            }\n            $output = substr_replace($output, $css, $pos, 0);\n        }\n\n        $output = $this->parse_with_globals($this->fix_paths($output));\n\n        if ($this->assets_path) {\n            $output = $this->fix_assets_paths($output);\n        }\n\n        // trigger hook with final HTML content to be sent\n        $hook = $this->app->plugins->exec_hook(\"send_page\", array('content' => $output));\n        if (!$hook['abort']) {\n            if ($this->charset != RCUBE_CHARSET) {\n                echo rcube_charset::convert($hook['content'], RCUBE_CHARSET, $this->charset);\n            }\n            else {\n                echo $hook['content'];\n            }\n        }\n    }\n\n    /**\n     * Returns iframe object, registers some related env variables\n     *\n     * @param array $attrib HTML attributes\n     * @param boolean $is_contentframe Register this iframe as the 'contentframe' gui object\n     * @return string IFRAME element\n     */\n    public function frame($attrib, $is_contentframe = false)\n    {\n        static $idcount = 0;\n\n        if (!$attrib['id']) {\n            $attrib['id'] = 'rcmframe' . ++$idcount;\n        }\n\n        $attrib['name'] = $attrib['id'];\n        $attrib['src']  = $attrib['src'] ? $this->abs_url($attrib['src'], true) : 'program/resources/blank.gif';\n\n        // register as 'contentframe' object\n        if ($is_contentframe || $attrib['contentframe']) {\n            $this->set_env('contentframe', $attrib['contentframe'] ? $attrib['contentframe'] : $attrib['name']);\n            $this->set_env('blankpage', $this->asset_url($attrib['src']));\n        }\n\n        return html::iframe($attrib);\n    }\n\n\n    /*  ************* common functions delivering gui objects **************  */\n\n    /**\n     * Create a form tag with the necessary hidden fields\n     *\n     * @param array Named tag parameters\n     * @return string HTML code for the form\n     */\n    public function form_tag($attrib, $content = null)\n    {\n      if ($this->framed || $this->env['framed']) {\n        $hiddenfield = new html_hiddenfield(array('name' => '_framed', 'value' => '1'));\n        $hidden = $hiddenfield->show();\n      }\n      if ($this->env['extwin']) {\n        $hiddenfield = new html_hiddenfield(array('name' => '_extwin', 'value' => '1'));\n        $hidden = $hiddenfield->show();\n      }\n\n      if (!$content)\n        $attrib['noclose'] = true;\n\n      return html::tag('form',\n        $attrib + array('action' => $this->app->comm_path, 'method' => \"get\"),\n        $hidden . $content,\n        array('id','class','style','name','method','action','enctype','onsubmit'));\n    }\n\n    /**\n     * Build a form tag with a unique request token\n     *\n     * @param array Named tag parameters including 'action' and 'task' values which will be put into hidden fields\n     * @param string Form content\n     * @return string HTML code for the form\n     */\n    public function request_form($attrib, $content = '')\n    {\n        $hidden = new html_hiddenfield();\n        if ($attrib['task']) {\n            $hidden->add(array('name' => '_task', 'value' => $attrib['task']));\n        }\n        if ($attrib['action']) {\n            $hidden->add(array('name' => '_action', 'value' => $attrib['action']));\n        }\n\n        unset($attrib['task'], $attrib['request']);\n        $attrib['action'] = './';\n\n        // we already have a <form> tag\n        if ($attrib['form']) {\n            if ($this->framed || $this->env['framed'])\n                $hidden->add(array('name' => '_framed', 'value' => '1'));\n            return $hidden->show() . $content;\n        }\n        else\n            return $this->form_tag($attrib, $hidden->show() . $content);\n    }\n\n    /**\n     * GUI object 'username'\n     * Showing IMAP username of the current session\n     *\n     * @param array Named tag parameters (currently not used)\n     * @return string HTML code for the gui object\n     */\n    public function current_username($attrib)\n    {\n        static $username;\n\n        // alread fetched\n        if (!empty($username)) {\n            return $username;\n        }\n\n        // Current username is an e-mail address\n        if (strpos($_SESSION['username'], '@')) {\n            $username = $_SESSION['username'];\n        }\n        // get e-mail address from default identity\n        else if ($sql_arr = $this->app->user->get_identity()) {\n            $username = $sql_arr['email'];\n        }\n        else {\n            $username = $this->app->user->get_username();\n        }\n\n        return rcube_utils::idn_to_utf8($username);\n    }\n\n    /**\n     * GUI object 'loginform'\n     * Returns code for the webmail login form\n     *\n     * @param array Named parameters\n     * @return string HTML code for the gui object\n     */\n    protected function login_form($attrib)\n    {\n        $default_host = $this->config->get('default_host');\n        $autocomplete = (int) $this->config->get('login_autocomplete');\n\n        $_SESSION['temp'] = true;\n\n        // save original url\n        $url = rcube_utils::get_input_value('_url', rcube_utils::INPUT_POST);\n        if (empty($url) && !preg_match('/_(task|action)=logout/', $_SERVER['QUERY_STRING']))\n            $url = $_SERVER['QUERY_STRING'];\n\n        // Disable autocapitalization on iPad/iPhone (#1488609)\n        $attrib['autocapitalize'] = 'off';\n\n        // set atocomplete attribute\n        $user_attrib = $autocomplete > 0 ? array() : array('autocomplete' => 'off');\n        $host_attrib = $autocomplete > 0 ? array() : array('autocomplete' => 'off');\n        $pass_attrib = $autocomplete > 1 ? array() : array('autocomplete' => 'off');\n\n        $input_task   = new html_hiddenfield(array('name' => '_task', 'value' => 'login'));\n        $input_action = new html_hiddenfield(array('name' => '_action', 'value' => 'login'));\n        $input_tzone  = new html_hiddenfield(array('name' => '_timezone', 'id' => 'rcmlogintz', 'value' => '_default_'));\n        $input_url    = new html_hiddenfield(array('name' => '_url', 'id' => 'rcmloginurl', 'value' => $url));\n        $input_user   = new html_inputfield(array('name' => '_user', 'id' => 'rcmloginuser', 'required' => 'required')\n            + $attrib + $user_attrib);\n        $input_pass   = new html_passwordfield(array('name' => '_pass', 'id' => 'rcmloginpwd', 'required' => 'required')\n            + $attrib + $pass_attrib);\n        $input_host   = null;\n\n        if (is_array($default_host) && count($default_host) > 1) {\n            $input_host = new html_select(array('name' => '_host', 'id' => 'rcmloginhost'));\n\n            foreach ($default_host as $key => $value) {\n                if (!is_array($value)) {\n                    $input_host->add($value, (is_numeric($key) ? $value : $key));\n                }\n                else {\n                    $input_host = null;\n                    break;\n                }\n            }\n        }\n        else if (is_array($default_host) && ($host = key($default_host)) !== null) {\n            $hide_host = true;\n            $input_host = new html_hiddenfield(array(\n                'name' => '_host', 'id' => 'rcmloginhost', 'value' => is_numeric($host) ? $default_host[$host] : $host) + $attrib);\n        }\n        else if (empty($default_host)) {\n            $input_host = new html_inputfield(array('name' => '_host', 'id' => 'rcmloginhost')\n                + $attrib + $host_attrib);\n        }\n\n        $form_name  = !empty($attrib['form']) ? $attrib['form'] : 'form';\n        $this->add_gui_object('loginform', $form_name);\n\n        // create HTML table with two cols\n        $table = new html_table(array('cols' => 2));\n\n        $table->add('title', html::label('rcmloginuser', html::quote($this->app->gettext('username'))));\n        $table->add('input', $input_user->show(rcube_utils::get_input_value('_user', rcube_utils::INPUT_GPC)));\n\n        $table->add('title', html::label('rcmloginpwd', html::quote($this->app->gettext('password'))));\n        $table->add('input', $input_pass->show());\n\n        // add host selection row\n        if (is_object($input_host) && !$hide_host) {\n            $table->add('title', html::label('rcmloginhost', html::quote($this->app->gettext('server'))));\n            $table->add('input', $input_host->show(rcube_utils::get_input_value('_host', rcube_utils::INPUT_GPC)));\n        }\n\n        $out  = $input_task->show();\n        $out .= $input_action->show();\n        $out .= $input_tzone->show();\n        $out .= $input_url->show();\n        $out .= $table->show();\n\n        if ($hide_host) {\n            $out .= $input_host->show();\n        }\n\n        if (rcube_utils::get_boolean($attrib['submit'])) {\n            $submit = new html_inputfield(array('type' => 'submit', 'id' => 'rcmloginsubmit',\n                'class' => 'button mainaction', 'value' => $this->app->gettext('login')));\n            $out .= html::p('formbuttons', $submit->show());\n        }\n\n        // surround html output with a form tag\n        if (empty($attrib['form'])) {\n            $out = $this->form_tag(array('name' => $form_name, 'method' => 'post'), $out);\n        }\n\n        // include script for timezone detection\n        $this->include_script('jstz.min.js');\n\n        return $out;\n    }\n\n    /**\n     * GUI object 'preloader'\n     * Loads javascript code for images preloading\n     *\n     * @param array Named parameters\n     * @return void\n     */\n    protected function preloader($attrib)\n    {\n        $images = preg_split('/[\\s\\t\\n,]+/', $attrib['images'], -1, PREG_SPLIT_NO_EMPTY);\n        $images = array_map(array($this, 'abs_url'), $images);\n        $images = array_map(array($this, 'asset_url'), $images);\n\n        if (empty($images) || $_REQUEST['_task'] == 'logout') {\n            return;\n        }\n\n        $this->add_script('var images = ' . self::json_serialize($images) .';\n            for (var i=0; i<images.length; i++) {\n                img = new Image();\n                img.src = images[i];\n            }', 'docready');\n    }\n\n    /**\n     * GUI object 'searchform'\n     * Returns code for search function\n     *\n     * @param array Named parameters\n     * @return string HTML code for the gui object\n     */\n    protected function search_form($attrib)\n    {\n        // add some labels to client\n        $this->add_label('searching');\n\n        $attrib['name'] = '_q';\n\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmqsearchbox';\n        }\n        if ($attrib['type'] == 'search' && !$this->browser->khtml) {\n            unset($attrib['type'], $attrib['results']);\n        }\n\n        $input_q = new html_inputfield($attrib);\n        $out = $input_q->show();\n\n        $this->add_gui_object('qsearchbox', $attrib['id']);\n\n        // add form tag around text field\n        if (empty($attrib['form'])) {\n            $out = $this->form_tag(array(\n                'name'     => \"rcmqsearchform\",\n                'onsubmit' => self::JS_OBJECT_NAME . \".command('search'); return false\",\n                'style'    => \"display:inline\"),\n                $out);\n        }\n\n        return $out;\n    }\n\n    /**\n     * Builder for GUI object 'message'\n     *\n     * @param array Named tag parameters\n     * @return string HTML code for the gui object\n     */\n    protected function message_container($attrib)\n    {\n        if (isset($attrib['id']) === false) {\n            $attrib['id'] = 'rcmMessageContainer';\n        }\n\n        $this->add_gui_object('message', $attrib['id']);\n\n        return html::div($attrib, '');\n    }\n\n    /**\n     * GUI object 'charsetselector'\n     *\n     * @param array Named parameters for the select tag\n     * @return string HTML code for the gui object\n     */\n    public function charset_selector($attrib)\n    {\n        // pass the following attributes to the form class\n        $field_attrib = array('name' => '_charset');\n        foreach ($attrib as $attr => $value) {\n            if (in_array($attr, array('id', 'name', 'class', 'style', 'size', 'tabindex'))) {\n                $field_attrib[$attr] = $value;\n            }\n        }\n\n        $charsets = array(\n            'UTF-8'        => 'UTF-8 ('.$this->app->gettext('unicode').')',\n            'US-ASCII'     => 'ASCII ('.$this->app->gettext('english').')',\n            'ISO-8859-1'   => 'ISO-8859-1 ('.$this->app->gettext('westerneuropean').')',\n            'ISO-8859-2'   => 'ISO-8859-2 ('.$this->app->gettext('easterneuropean').')',\n            'ISO-8859-4'   => 'ISO-8859-4 ('.$this->app->gettext('baltic').')',\n            'ISO-8859-5'   => 'ISO-8859-5 ('.$this->app->gettext('cyrillic').')',\n            'ISO-8859-6'   => 'ISO-8859-6 ('.$this->app->gettext('arabic').')',\n            'ISO-8859-7'   => 'ISO-8859-7 ('.$this->app->gettext('greek').')',\n            'ISO-8859-8'   => 'ISO-8859-8 ('.$this->app->gettext('hebrew').')',\n            'ISO-8859-9'   => 'ISO-8859-9 ('.$this->app->gettext('turkish').')',\n            'ISO-8859-10'   => 'ISO-8859-10 ('.$this->app->gettext('nordic').')',\n            'ISO-8859-11'   => 'ISO-8859-11 ('.$this->app->gettext('thai').')',\n            'ISO-8859-13'   => 'ISO-8859-13 ('.$this->app->gettext('baltic').')',\n            'ISO-8859-14'   => 'ISO-8859-14 ('.$this->app->gettext('celtic').')',\n            'ISO-8859-15'   => 'ISO-8859-15 ('.$this->app->gettext('westerneuropean').')',\n            'ISO-8859-16'   => 'ISO-8859-16 ('.$this->app->gettext('southeasterneuropean').')',\n            'WINDOWS-1250' => 'Windows-1250 ('.$this->app->gettext('easterneuropean').')',\n            'WINDOWS-1251' => 'Windows-1251 ('.$this->app->gettext('cyrillic').')',\n            'WINDOWS-1252' => 'Windows-1252 ('.$this->app->gettext('westerneuropean').')',\n            'WINDOWS-1253' => 'Windows-1253 ('.$this->app->gettext('greek').')',\n            'WINDOWS-1254' => 'Windows-1254 ('.$this->app->gettext('turkish').')',\n            'WINDOWS-1255' => 'Windows-1255 ('.$this->app->gettext('hebrew').')',\n            'WINDOWS-1256' => 'Windows-1256 ('.$this->app->gettext('arabic').')',\n            'WINDOWS-1257' => 'Windows-1257 ('.$this->app->gettext('baltic').')',\n            'WINDOWS-1258' => 'Windows-1258 ('.$this->app->gettext('vietnamese').')',\n            'ISO-2022-JP'  => 'ISO-2022-JP ('.$this->app->gettext('japanese').')',\n            'ISO-2022-KR'  => 'ISO-2022-KR ('.$this->app->gettext('korean').')',\n            'ISO-2022-CN'  => 'ISO-2022-CN ('.$this->app->gettext('chinese').')',\n            'EUC-JP'       => 'EUC-JP ('.$this->app->gettext('japanese').')',\n            'EUC-KR'       => 'EUC-KR ('.$this->app->gettext('korean').')',\n            'EUC-CN'       => 'EUC-CN ('.$this->app->gettext('chinese').')',\n            'BIG5'         => 'BIG5 ('.$this->app->gettext('chinese').')',\n            'GB2312'       => 'GB2312 ('.$this->app->gettext('chinese').')',\n        );\n\n        if (!empty($_POST['_charset'])) {\n            $set = $_POST['_charset'];\n        }\n        else if (!empty($attrib['selected'])) {\n            $set = $attrib['selected'];\n        }\n        else {\n            $set = $this->get_charset();\n        }\n\n        $set = strtoupper($set);\n        if (!isset($charsets[$set])) {\n            $charsets[$set] = $set;\n        }\n\n        $select = new html_select($field_attrib);\n        $select->add(array_values($charsets), array_keys($charsets));\n\n        return $select->show($set);\n    }\n\n    /**\n     * Include content from config/about.<LANG>.html if available\n     */\n    protected function about_content($attrib)\n    {\n        $content = '';\n        $filenames = array(\n            'about.' . $_SESSION['language'] . '.html',\n            'about.' . substr($_SESSION['language'], 0, 2) . '.html',\n            'about.html',\n        );\n        foreach ($filenames as $file) {\n            $fn = RCUBE_CONFIG_DIR . $file;\n            if (is_readable($fn)) {\n                $content = file_get_contents($fn);\n                $content = $this->parse_conditions($content);\n                $content = $this->parse_xml($content);\n                break;\n            }\n        }\n\n        return $content;\n    }\n}\n", "code_before": "<?php\n\n/*\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Class to handle HTML page output using a skin template.             |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Class to create HTML page output using a skin template\n */\nclass rcmail_output_html extends rcmail_output\n{\n    public $type = 'html';\n\n    protected $message;\n    protected $template_name;\n    protected $objects = [];\n    protected $js_env = [];\n    protected $js_labels = [];\n    protected $js_commands = [];\n    protected $skin_paths = [];\n    protected $skin_extends = [];\n    protected $skin_name = '';\n    protected $scripts_path = '';\n    protected $script_files = [];\n    protected $css_files = [];\n    protected $scripts = [];\n    protected $task;\n    protected $meta_tags = [];\n    protected $link_tags = ['shortcut icon' => ''];\n    protected $header = '';\n    protected $footer = '';\n    protected $body = '';\n    protected $base_path = '';\n    protected $assets_path;\n    protected $assets_dir = RCUBE_INSTALL_PATH;\n    protected $devel_mode = false;\n    protected $default_template = \"<html>\\n<head><meta name='generator' content='Roundcube'></head>\\n<body></body>\\n</html>\";\n\n    // deprecated names of templates used before 0.5\n    protected $deprecated_templates = [\n        'contact' => 'showcontact',\n        'contactadd' => 'addcontact',\n        'contactedit' => 'editcontact',\n        'identityedit' => 'editidentity',\n        'messageprint' => 'printmessage',\n    ];\n\n    // deprecated names of template objects used before 1.4\n    protected $deprecated_template_objects = [\n        'addressframe' => 'contentframe',\n        'messagecontentframe' => 'contentframe',\n        'prefsframe' => 'contentframe',\n        'folderframe' => 'contentframe',\n        'identityframe' => 'contentframe',\n        'responseframe' => 'contentframe',\n        'keyframe' => 'contentframe',\n        'filterframe' => 'contentframe',\n    ];\n\n    /**\n     * Constructor\n     */\n    public function __construct($task = null, $framed = false)\n    {\n        parent::__construct();\n\n        $this->task = $task;\n        $this->init($framed);\n    }\n\n    /**\n     * Initialization\n     */\n    protected function init($framed = false)\n    {\n        $this->set_env('task', $this->task);\n        $this->set_env('standard_windows', (bool) $this->config->get('standard_windows'));\n        $this->set_env('locale', !empty($_SESSION['language']) ? $_SESSION['language'] : 'en_US');\n        $this->set_env('devel_mode', $this->devel_mode);\n\n        // Version number e.g. 1.4.2 will be 10402\n        $version = explode('.', preg_replace('/[^0-9.].*/', '', RCMAIL_VERSION));\n        $this->set_env('rcversion', intval($version[0]) * 10000 + intval($version[1]) * 100 + ($version[2] ?? 0));\n\n        // add cookie info\n        $this->set_env('cookie_domain', ini_get('session.cookie_domain'));\n        $this->set_env('cookie_path', ini_get('session.cookie_path'));\n        $this->set_env('cookie_secure', filter_var(ini_get('session.cookie_secure'), \\FILTER_VALIDATE_BOOLEAN));\n\n        // Easy way to change skin via GET argument, for developers\n        if ($this->devel_mode && !empty($_GET['skin']) && preg_match('/^[a-z0-9-_]+$/i', $_GET['skin'])) {\n            if ($this->check_skin($_GET['skin'])) {\n                $this->set_skin($_GET['skin']);\n                $this->app->user->save_prefs(['skin' => $_GET['skin']]);\n            }\n        }\n\n        // load and setup the skin\n        $this->set_skin($this->config->get('skin'));\n        $this->set_assets_path($this->config->get('assets_path'));\n\n        if (!empty($_REQUEST['_extwin'])) {\n            $this->set_env('extwin', 1);\n        }\n\n        if ($this->framed || $framed) {\n            $this->set_env('framed', 1);\n        }\n\n        $lic = <<<'EOF'\n            /*\n                    @licstart  The following is the entire license notice for the\n                    JavaScript code in this page.\n\n                    Copyright (C) The Roundcube Dev Team\n\n                    The JavaScript code in this page is free software: you can redistribute\n                    it and/or modify it under the terms of the GNU General Public License\n                    as published by the Free Software Foundation, either version 3 of\n                    the License, or (at your option) any later version.\n\n                    The code is distributed WITHOUT ANY WARRANTY; without even the implied\n                    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n                    See the GNU GPL for more details.\n\n                    @licend  The above is the entire license notice\n                    for the JavaScript code in this page.\n            */\n            EOF;\n        // add common javascripts\n        $this->add_script($lic, 'head_top');\n        $this->add_script('var ' . self::JS_OBJECT_NAME . ' = new rcube_webmail();', 'head_top');\n\n        // don't wait for page onload. Call init at the bottom of the page (delayed)\n        $this->add_script(self::JS_OBJECT_NAME . '.init();', 'docready');\n\n        $this->scripts_path = 'program/js/';\n        $this->include_script('jquery.min.js');\n        $this->include_script('common.js');\n        $this->include_script('app.js');\n\n        // register common UI objects\n        $this->add_handlers([\n            'loginform' => [$this, 'login_form'],\n            'preloader' => [$this, 'preloader'],\n            'username' => [$this, 'current_username'],\n            'message' => [$this, 'message_container'],\n            'charsetselector' => [$this, 'charset_selector'],\n            'aboutcontent' => [$this, 'about_content'],\n        ]);\n\n        // set blankpage (watermark) url\n        $blankpage = $this->config->get('blankpage_url', '/watermark.html');\n        $this->set_env('blankpage', $blankpage);\n    }\n\n    /**\n     * Set environment variable\n     *\n     * @param string $name    Property name\n     * @param mixed  $value   Property value\n     * @param bool   $addtojs True if this property should be added\n     *                        to client environment\n     */\n    #[\\Override]\n    public function set_env($name, $value, $addtojs = true)\n    {\n        $this->env[$name] = $value;\n\n        if ($addtojs || isset($this->js_env[$name])) {\n            $this->js_env[$name] = $value;\n        }\n    }\n\n    /**\n     * Parse and set assets path\n     *\n     * @param string $path Assets path URL (relative or absolute)\n     */\n    public function set_assets_path($path)\n    {\n        // set absolute path for assets if /index.php/foo/bar url is used\n        if (empty($path) && !empty($_SERVER['PATH_INFO'])) {\n            $path = preg_replace('/\\?_task=[a-z]+/', '', $this->app->url([], true));\n        }\n\n        if (empty($path)) {\n            return;\n        }\n\n        $path = rtrim($path, '/') . '/';\n\n        // handle relative assets path\n        if (!preg_match('|^https?://|', $path) && $path[0] != '/') {\n            // save the path to search for asset files later\n            $this->assets_dir = $path;\n\n            $base = preg_replace('/[?#&].*$/', '', $_SERVER['REQUEST_URI']);\n            $base = rtrim($base, '/');\n\n            // remove url token if exists\n            if ($len = intval($this->config->get('use_secure_urls'))) {\n                $_base = explode('/', $base);\n                $last = count($_base) - 1;\n                $length = $len > 1 ? $len : 16; // as in rcube::get_secure_url_token()\n\n                // we can't use real token here because it\n                // does not exists in unauthenticated state,\n                // hope this will not produce false-positive matches\n                if (preg_match('/^[a-f0-9]{' . $length . '}$/', $_base[$last])) {\n                    $path = '../' . $path;\n                }\n            }\n        }\n\n        $this->assets_path = $path;\n        $this->set_env('assets_path', $path);\n    }\n\n    /**\n     * Getter for the current page title\n     *\n     * @param bool $full Prepend title with product/user name\n     *\n     * @return string The page title\n     */\n    protected function get_pagetitle($full = true)\n    {\n        if (!empty($this->pagetitle)) {\n            $title = $this->pagetitle;\n        } elseif (isset($this->env['task'])) {\n            if ($this->env['task'] == 'login') {\n                $title = $this->app->gettext([\n                    'name' => 'welcome',\n                    'vars' => ['product' => $this->config->get('product_name')],\n                ]);\n            } else {\n                $title = ucfirst($this->env['task']);\n            }\n        } else {\n            $title = '';\n        }\n\n        if ($full && $title) {\n            if ($this->devel_mode && !empty($_SESSION['username'])) {\n                $title = $_SESSION['username'] . ' :: ' . $title;\n            } elseif ($prod_name = $this->config->get('product_name')) {\n                $title = $prod_name . ' :: ' . $title;\n            }\n        }\n\n        return $title;\n    }\n\n    /**\n     * Getter for the current skin path property\n     */\n    #[\\Override]\n    public function get_skin_path()\n    {\n        return $this->skin_paths[0];\n    }\n\n    /**\n     * Set skin\n     *\n     * @param string $skin Skin name\n     */\n    public function set_skin($skin)\n    {\n        if (!$this->check_skin($skin)) {\n            // If the skin does not exist (could be removed or invalid),\n            // fallback to the skin set in the system configuration (#7271)\n            $skin = $this->config->system_skin;\n        }\n\n        $skin_path = 'skins/' . $skin;\n\n        $this->config->set('skin_path', $skin_path);\n        $this->base_path = $skin_path;\n\n        // register skin path(s)\n        $this->skin_paths = [];\n        $this->skins = [];\n        $this->load_skin($skin);\n\n        $this->skin_name = $skin;\n        $this->set_env('skin', $skin);\n    }\n\n    /**\n     * Check skin validity/existence\n     *\n     * @param string $skin Skin name\n     *\n     * @return bool True if the skin exist and is readable, False otherwise\n     */\n    public function check_skin($skin)\n    {\n        // Sanity check to prevent from path traversal vulnerability (#1490620)\n        // @phpstan-ignore-next-line\n        if (!is_string($skin) || str_contains($skin, '/') || str_contains($skin, '\\\\')) {\n            rcube::raise_error('Invalid skin name', true);\n            return false;\n        }\n\n        $skins_allowed = $this->config->get('skins_allowed');\n\n        if (!empty($skins_allowed) && !in_array($skin, (array) $skins_allowed)) {\n            return false;\n        }\n\n        $path = RCUBE_INSTALL_PATH . 'skins/';\n\n        return !empty($skin) && is_dir($path . $skin) && is_readable($path . $skin);\n    }\n\n    /**\n     * Helper method to recursively read skin meta files and register search paths\n     */\n    private function load_skin($skin_name)\n    {\n        $skin_path = 'skins/' . $skin_name;\n        $this->skin_paths[] = $skin_path;\n\n        // read meta file and check for dependencies\n        $meta = $this->get_skin_info($skin_name);\n\n        $meta['path'] = $skin_path;\n        $skin_id = array_last(explode('/', $skin_path));\n\n        if (empty($meta['name'])) {\n            $meta['name'] = $skin_id;\n        }\n\n        $this->skins[$skin_id] = $meta;\n\n        // Keep skin config for ajax requests (#6613)\n        $_SESSION['skin_config'] = [];\n\n        if (!empty($meta['extends'])) {\n            $path = RCUBE_INSTALL_PATH . 'skins/';\n            if (is_dir($path . $meta['extends']) && is_readable($path . $meta['extends'])) {\n                $_SESSION['skin_config'] = $this->load_skin($meta['extends']);\n                $this->skin_extends[] = $meta['extends'];\n            }\n        }\n\n        if (!empty($meta['config'])) {\n            foreach ($meta['config'] as $key => $value) {\n                $this->config->set($key, $value, true);\n                $_SESSION['skin_config'][$key] = $value;\n            }\n\n            $value = array_merge((array) $this->config->get('dont_override'), array_keys($meta['config']));\n            $this->config->set('dont_override', $value, true);\n        }\n\n        if (!empty($meta['localization'])) {\n            $locdir = $meta['localization'] === true ? 'localization' : $meta['localization'];\n            if ($texts = $this->app->read_localization(RCUBE_INSTALL_PATH . $skin_path . '/' . $locdir)) {\n                $this->app->load_language($_SESSION['language'], $texts);\n            }\n        }\n\n        // Use array_merge() here to allow for global default and extended skins\n        if (!empty($meta['meta'])) {\n            $this->meta_tags = array_merge($this->meta_tags, (array) $meta['meta']);\n        }\n        if (!empty($meta['links'])) {\n            $this->link_tags = array_merge($this->link_tags, (array) $meta['links']);\n        }\n\n        if (!empty($this->skin_extends)) {\n            $this->set_env('skin_extends', $this->skin_extends);\n        }\n\n        $this->set_env('dark_mode_support', (bool) $this->config->get('dark_mode_support'));\n\n        return $_SESSION['skin_config'];\n    }\n\n    /**\n     * Check if a specific template exists\n     *\n     * @param string $name Template name\n     *\n     * @return bool True if template exists, False otherwise\n     */\n    public function template_exists($name)\n    {\n        foreach ($this->skin_paths as $skin_path) {\n            $filename = RCUBE_INSTALL_PATH . $skin_path . '/templates/' . $name . '.html';\n            if (\n                (is_file($filename) && is_readable($filename))\n                || (!empty($this->deprecated_templates[$name]) && $this->template_exists($this->deprecated_templates[$name]))\n            ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Find the given file in the current skin path stack\n     *\n     * @param string $file       File name/path to resolve (starting with /)\n     * @param string &$skin_path Reference to the base path of the matching skin\n     * @param string $add_path   Additional path to search in\n     * @param bool   $minified   Fallback to a minified version of the file\n     *\n     * @return string|false Relative path to the requested file or False if not found\n     */\n    public function get_skin_file($file, &$skin_path = null, $add_path = null, $minified = false)\n    {\n        $skin_paths = $this->skin_paths;\n\n        if ($add_path) {\n            array_unshift($skin_paths, $add_path);\n            $skin_paths = array_unique($skin_paths);\n        }\n\n        if ($file[0] != '/') {\n            $file = '/' . $file;\n        }\n\n        if ($skin_path = $this->find_file_path($file, $skin_paths)) {\n            return $skin_path . $file;\n        }\n\n        if ($minified && preg_match('/(?<!\\.min)\\.(js|css)$/', $file)) {\n            $file = preg_replace('/\\.(js|css)$/', '.min.\\1', $file);\n\n            if ($skin_path = $this->find_file_path($file, $skin_paths)) {\n                return $skin_path . $file;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Find path of the asset file\n     */\n    protected function find_file_path($file, $skin_paths)\n    {\n        foreach ($skin_paths as $skin_path) {\n            if ($this->assets_dir != RCUBE_INSTALL_PATH) {\n                if (realpath($this->assets_dir . $skin_path . $file)) {\n                    return $skin_path;\n                }\n            }\n\n            if (realpath(RCUBE_INSTALL_PATH . $skin_path . $file)) {\n                return $skin_path;\n            }\n        }\n    }\n\n    /**\n     * Register a GUI object to the client script\n     *\n     * @param string $obj Object name\n     * @param string $id  Object ID\n     */\n    public function add_gui_object($obj, $id)\n    {\n        $this->add_script(self::JS_OBJECT_NAME . \".gui_object('{$obj}', '{$id}');\");\n    }\n\n    /**\n     * Call a client method\n     *\n     * @param string $cmd     Method to call\n     * @param mixed  ...$args Method arguments\n     */\n    #[\\Override]\n    public function command($cmd, ...$args)\n    {\n        if (str_contains($cmd, 'plugin.')) {\n            $this->js_commands[] = ['triggerEvent', $cmd, $args[0]];\n        } else {\n            array_unshift($args, $cmd);\n\n            $this->js_commands[] = $args;\n        }\n    }\n\n    /**\n     * Add a localized label to the client environment\n     *\n     * @param mixed ...$args Labels (an array of strings, or many string arguments)\n     */\n    #[\\Override]\n    public function add_label(...$args)\n    {\n        if (count($args) == 1 && is_array($args[0])) {\n            $args = $args[0];\n        }\n\n        foreach ($args as $name) {\n            $this->js_labels[$name] = $this->app->gettext($name);\n        }\n    }\n\n    /**\n     * Invoke display_message command\n     *\n     * @param string $message  Message to display\n     * @param string $type     Message type [notice|confirm|error]\n     * @param array  $vars     Key-value pairs to be replaced in localized text\n     * @param bool   $override Override last set message\n     * @param int    $timeout  Message display time in seconds\n     *\n     * @uses self::command()\n     */\n    #[\\Override]\n    public function show_message($message, $type = 'notice', $vars = null, $override = true, $timeout = 0)\n    {\n        if ($override || !$this->message) {\n            if ($this->app->text_exists($message)) {\n                if (!empty($vars)) {\n                    $vars = array_map(['rcube', 'Q'], $vars);\n                }\n\n                $msgtext = $this->app->gettext(['name' => $message, 'vars' => $vars]);\n            } else {\n                $msgtext = $message;\n            }\n\n            $this->message = $message;\n            $this->command('display_message', $msgtext, $type, $timeout * 1000);\n        }\n    }\n\n    /**\n     * Delete all stored env variables and commands\n     *\n     * @param bool $all Reset all env variables (including internal)\n     */\n    #[\\Override]\n    public function reset($all = false)\n    {\n        $framed = $this->framed;\n        $task = $this->env['task'] ?? '';\n        $env = $all ? null : array_intersect_key($this->env, ['extwin' => 1, 'framed' => 1]);\n\n        // keep jQuery-UI files\n        $css_files = $script_files = [];\n\n        foreach ($this->css_files as $file) {\n            if (str_starts_with($file, 'plugins/jqueryui')) {\n                $css_files[] = $file;\n            }\n        }\n\n        foreach ($this->script_files as $position => $files) {\n            foreach ($files as $file) {\n                if (str_starts_with($file, 'plugins/jqueryui')) {\n                    $script_files[$position][] = $file;\n                }\n            }\n        }\n\n        parent::reset();\n\n        // let some env variables survive\n        $this->env = $this->js_env = $env;\n        $this->framed = $framed || !empty($this->env['framed']);\n        $this->js_labels = [];\n        $this->js_commands = [];\n        $this->scripts = [];\n        $this->header = '';\n        $this->footer = '';\n        $this->body = '';\n        $this->css_files = [];\n        $this->script_files = [];\n\n        // load defaults\n        if (!$all) {\n            $this->init();\n        }\n\n        // Note: we merge jQuery-UI scripts after jQuery...\n        $this->css_files = array_merge($this->css_files, $css_files);\n        $this->script_files = array_merge_recursive($this->script_files, $script_files);\n\n        $this->set_env('orig_task', $task);\n    }\n\n    /**\n     * Redirect to a certain url\n     *\n     * @param mixed $p      Either a string with the action or url parameters as key-value pairs\n     * @param int   $delay  Delay in seconds\n     * @param bool  $secure Redirect to secure location (see rcmail::url())\n     */\n    #[\\Override]\n    public function redirect($p = [], $delay = 1, $secure = false)\n    {\n        if (!empty($this->env['extwin']) && !(is_string($p) && preg_match('#^https?://#', $p))) {\n            if (!is_array($p)) {\n                $p = ['_action' => $p];\n            }\n\n            $p['_extwin'] = 1;\n        }\n\n        $location = $this->app->url($p, false, false, $secure);\n        $this->header('Location: ' . $location);\n        exit;\n    }\n\n    /**\n     * Send the request output to the client.\n     * This will either parse a skin template.\n     *\n     * @param string $templ Template name\n     * @param bool   $exit  True if script should terminate (default)\n     */\n    #[\\Override]\n    public function send($templ = null, $exit = true)\n    {\n        if ($templ != 'iframe') {\n            // prevent from endless loops\n            if ($exit != 'recur' && $this->app->plugins->is_processing('render_page')) {\n                rcube::raise_error([\n                    'code' => 505,\n                    'message' => 'Recursion alert: ignoring output->send()',\n                ], true, false);\n\n                return;\n            }\n\n            $this->parse($templ, false);\n        } else {\n            $this->framed = true;\n            $this->write();\n        }\n\n        // set output asap\n        ob_flush();\n        flush();\n\n        if ($exit) {\n            exit;\n        }\n    }\n\n    /**\n     * Process template and write to stdOut\n     *\n     * @param string $template HTML template content\n     */\n    public function write($template = '')\n    {\n        if (!empty($this->script_files)) {\n            $this->set_env('request_token', $this->app->get_request_token());\n        }\n\n        // Fix assets path on blankpage\n        if (!empty($this->js_env['blankpage'])) {\n            $this->js_env['blankpage'] = $this->asset_url($this->js_env['blankpage'], true);\n        }\n\n        $commands = $this->get_js_commands($framed);\n\n        // if all js commands go to parent window we can ignore all\n        // script files and skip rcube_webmail initialization (#1489792)\n        // but not on error pages where skins may need jQuery, etc.\n        if ($framed && empty($this->js_env['server_error'])) {\n            $this->scripts = [];\n            $this->script_files = [];\n            $this->header = '';\n            $this->footer = '';\n        }\n\n        // write all javascript commands\n        if (!empty($commands)) {\n            $this->add_script($commands, 'head_top');\n        }\n\n        $this->page_headers();\n\n        // call super method\n        $this->_write($template);\n    }\n\n    /**\n     * Send common page headers\n     * For now it only (re)sets X-Frame-Options when needed\n     */\n    public function page_headers()\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        // allow (legal) iframe content to be loaded\n        $framed = $this->framed || !empty($this->env['framed']);\n        if ($framed && ($xopt = $this->app->config->get('x_frame_options', 'sameorigin'))) {\n            if (strtolower($xopt) === 'deny') {\n                $this->header('X-Frame-Options: sameorigin', true);\n            }\n        }\n    }\n\n    /**\n     * Parse a specific skin template and deliver to stdout (or return)\n     *\n     * @param string $name  Template name\n     * @param bool   $exit  Exit script\n     * @param bool   $write Don't write to stdout, return parsed content instead\n     *\n     * @see https://php.net/manual/en/function.exit.php\n     */\n    public function parse($name = 'main', $exit = true, $write = true)\n    {\n        $plugin = false;\n        $realname = $name;\n        $skin_dir = '';\n        $plugin_skin_paths = [];\n\n        $this->template_name = $realname;\n\n        $temp = explode('.', $name, 2);\n        if (count($temp) > 1) {\n            $plugin = $temp[0];\n            $name = $temp[1];\n            $skin_dir = $plugin . '/skins/' . $this->config->get('skin');\n\n            // apply skin search escalation list to plugin directory\n            foreach ($this->skin_paths as $skin_path) {\n                // skin folder in plugin dir\n                $plugin_skin_paths[] = $this->app->plugins->url . $plugin . '/' . $skin_path;\n                // plugin folder in skin dir\n                $plugin_skin_paths[] = $skin_path . '/plugins/' . $plugin;\n            }\n\n            // prepend plugin skin paths to search list\n            $this->skin_paths = array_merge($plugin_skin_paths, $this->skin_paths);\n        }\n\n        // find skin template\n        $path = false;\n        foreach ($this->skin_paths as $skin_path) {\n            // when requesting a plugin template ignore global skin path(s)\n            if ($plugin && !str_contains($skin_path, $this->app->plugins->url)) {\n                continue;\n            }\n\n            $path = RCUBE_INSTALL_PATH . \"{$skin_path}/templates/{$name}.html\";\n\n            // fallback to deprecated template names\n            if (!is_readable($path) && !empty($this->deprecated_templates[$realname])) {\n                $dname = $this->deprecated_templates[$realname];\n                $path = RCUBE_INSTALL_PATH . \"{$skin_path}/templates/{$dname}.html\";\n\n                if (is_readable($path)) {\n                    rcube::raise_error([\n                        'code' => 502,\n                        'message' => \"Using deprecated template '{$dname}' in {$skin_path}/templates. Please rename to '{$realname}'\",\n                    ], true, false);\n                }\n            }\n\n            if (is_readable($path)) {\n                $this->config->set('skin_path', $skin_path);\n                // set base_path to core skin directory (not plugin's skin)\n                $this->base_path = preg_replace('!plugins/\\w+/!', '', $skin_path);\n                $skin_dir = preg_replace('!^plugins/!', '', $skin_path);\n                break;\n            }\n\n            $path = false;\n        }\n\n        // read template file\n        if (!$path || ($templ = @file_get_contents($path)) === false) {\n            rcube::raise_error([\n                'code' => 404,\n                'message' => 'Error loading template for ' . $realname,\n            ], true, $write);\n\n            $this->skin_paths = array_slice($this->skin_paths, count($plugin_skin_paths));\n            return false;\n        }\n\n        // replace all path references to plugins/... with the configured plugins dir\n        // and /this/ to the current plugin skin directory\n        if ($plugin) {\n            $templ = preg_replace(\n                ['/\\bplugins\\//', '/([\"\\']?)\\/this\\//'],\n                [$this->app->plugins->url, '\\1' . $this->app->plugins->url . $skin_dir . '/'],\n                $templ\n            );\n        }\n\n        // parse for special tags\n        $output = $this->parse_conditions($templ);\n        $output = $this->parse_xml($output);\n\n        // trigger generic hook where plugins can put additional content to the page\n        $hook = $this->app->plugins->exec_hook('render_page', [\n            'template' => $realname,\n            'content' => $output,\n            'write' => $write,\n        ]);\n\n        // save some memory\n        $output = $hook['content'];\n        unset($hook['content']);\n\n        // remove plugin skin paths from current context\n        $this->skin_paths = array_slice($this->skin_paths, count($plugin_skin_paths));\n\n        if (!$write) {\n            return $this->postrender($output);\n        }\n\n        $this->write(trim($output));\n\n        if ($exit) {\n            exit;\n        }\n    }\n\n    /**\n     * Return executable javascript code for all registered commands\n     */\n    protected function get_js_commands(&$framed = null)\n    {\n        $out = '';\n        $parent_commands = 0;\n        $parent_prefix = '';\n        $top_commands = [];\n\n        // these should be always on top,\n        // e.g. hide_message() below depends on env.framed\n        if (!$this->framed && !empty($this->js_env)) {\n            $top_commands[] = ['set_env', $this->js_env];\n        }\n        if (!empty($this->js_labels)) {\n            $top_commands[] = ['add_label', $this->js_labels];\n        }\n\n        // unlock interface after iframe load\n        $unlock = isset($_REQUEST['_unlock']) ? preg_replace('/[^a-z0-9]/i', '', $_REQUEST['_unlock']) : 0;\n        if ($this->framed) {\n            $top_commands[] = ['iframe_loaded', $unlock];\n        } elseif ($unlock) {\n            $top_commands[] = ['hide_message', $unlock];\n        }\n\n        $commands = array_merge($top_commands, $this->js_commands);\n\n        foreach ($commands as $args) {\n            $method = array_shift($args);\n            $parent = $this->framed || preg_match('/^parent\\./', $method);\n\n            foreach ($args as $i => $arg) {\n                $args[$i] = self::json_serialize($arg, $this->devel_mode);\n            }\n\n            if ($parent) {\n                $parent_commands++;\n                $method = preg_replace('/^parent\\./', '', $method);\n                $parent_prefix = 'if (window.parent && parent.' . self::JS_OBJECT_NAME . ') parent.';\n                $method = $parent_prefix . self::JS_OBJECT_NAME . '.' . $method;\n            } else {\n                $method = self::JS_OBJECT_NAME . '.' . $method;\n            }\n\n            $out .= sprintf(\"%s(%s);\\n\", $method, implode(',', $args));\n        }\n\n        $framed = $parent_prefix && $parent_commands == count($commands);\n\n        // make the output more compact if all commands go to parent window\n        if ($framed) {\n            $out = 'if (window.parent && parent.' . self::JS_OBJECT_NAME . \") {\\n\"\n                . str_replace($parent_prefix, \"\\tparent.\", $out)\n                . \"}\\n\";\n        }\n\n        return $out;\n    }\n\n    /**\n     * Make URLs starting with a slash point to skin directory\n     *\n     * @param string $str         Input string\n     * @param bool   $search_path True if URL should be resolved using the current skin path stack\n     *\n     * @return string URL\n     */\n    public function abs_url($str, $search_path = false)\n    {\n        if (isset($str[0]) && $str[0] == '/') {\n            if ($search_path && ($file_url = $this->get_skin_file($str))) {\n                return $file_url;\n            }\n\n            return $this->base_path . $str;\n        }\n\n        return $str;\n    }\n\n    /**\n     * Show error page and terminate script execution\n     *\n     * @param int    $code    Error code\n     * @param string $message Error message\n     */\n    #[\\Override]\n    public function raise_error($code, $message)\n    {\n        $args = [\n            'code' => $code,\n            'message' => $message,\n        ];\n\n        $page = new rcmail_action_utils_error();\n        $page->run($args);\n    }\n\n    /**\n     * Modify path by adding URL prefix if configured\n     *\n     * @param string $path    Asset path\n     * @param bool   $abs_url Pass to self::abs_url() first\n     *\n     * @return string Asset path\n     */\n    public function asset_url($path, $abs_url = false)\n    {\n        // iframe content can't be in a different domain\n        // @TODO: check if assets are on a different domain\n\n        if ($abs_url) {\n            $path = $this->abs_url($path, true);\n        }\n\n        if (!$this->assets_path || in_array($path[0], ['?', '/', '.']) || strpos($path, '://')) {\n            return $this->resource_location($path);\n        }\n\n        return $this->assets_path . $path;\n    }\n\n    // Template parsing methods\n\n    /**\n     * Replace all strings ($varname)\n     * with the content of the according global variable.\n     */\n    protected function parse_with_globals($input)\n    {\n        $GLOBALS['__version'] = html::quote(RCMAIL_VERSION);\n        $GLOBALS['__comm_path'] = html::quote($this->app->comm_path);\n        $GLOBALS['__skin_path'] = html::quote($this->base_path);\n\n        return preg_replace_callback('/\\$(__[a-z0-9_\\-]+)/', [$this, 'globals_callback'], $input);\n    }\n\n    /**\n     * Callback function for preg_replace_callback() in parse_with_globals()\n     */\n    protected function globals_callback($matches)\n    {\n        return $GLOBALS[$matches[1]];\n    }\n\n    /**\n     * Correct absolute paths in images and other tags (add cache busters)\n     */\n    protected function fix_paths($output)\n    {\n        $regexp = [\n            '%(?P<name>src|background|data-src-[a-z]+)=(?P<opener>[\"\\']?)(?P<file>[a-z0-9/_.?=-]+)(?P<closer>[\"\\'\\s>])%i',\n            // fix href attributes in <link>'s only (#9941)\n            '%(?P<prefix><link[^>]*)(?P<name>href)=(?P<opener>[\"\\']?)(?P<file>[a-z0-9/_.?=-]+)(?P<closer>[\"\\'\\s>])%i',\n        ];\n\n        return preg_replace_callback($regexp, [$this, 'file_callback'], $output);\n    }\n\n    /**\n     * Callback function for preg_replace_callback in fix_paths()\n     *\n     * @return string Parsed string\n     */\n    protected function file_callback($matches)\n    {\n        $file = $matches['file'];\n        $file = preg_replace('!^/this/!', '/', $file);\n\n        // correct absolute paths\n        if ($file[0] == '/') {\n            $this->get_skin_file($file, $skin_path, $this->base_path);\n            $file = ($skin_path ?: $this->base_path) . $file;\n        }\n\n        // add file modification timestamp\n        if (preg_match('/\\.(js|css|less|ico|png|svg|jpeg)$/', $file)) {\n            $file = $this->file_mod($file);\n        }\n\n        $file = $this->resource_location($file);\n\n        return ($matches['prefix'] ?? '') . $matches['name'] . '=' . $matches['opener'] . $file . $matches['closer'];\n    }\n\n    /**\n     * Correct paths of asset files according to assets_path\n     */\n    protected function fix_assets_paths($output)\n    {\n        $regexp = '!(src|href|background)=([\"\\']?)([a-z0-9/_.?=-]+)([\"\\'\\s>])!i';\n\n        return preg_replace_callback($regexp, [$this, 'assets_callback'], $output);\n    }\n\n    /**\n     * Callback function for preg_replace_callback in fix_assets_paths()\n     *\n     * @return string Parsed string\n     */\n    protected function assets_callback($matches)\n    {\n        $file = $this->asset_url($matches[3]);\n        $file = $this->resource_location($file);\n\n        return $matches[1] . '=' . $matches[2] . $file . $matches[4];\n    }\n\n    /**\n     * Modify file by adding mtime indicator\n     */\n    protected function file_mod($file)\n    {\n        $fs = false;\n        $ext = substr($file, strrpos($file, '.') + 1);\n\n        // use minified file if exists (not in development mode)\n        if (!$this->devel_mode && !preg_match('/\\.min\\.' . $ext . '$/', $file)) {\n            $minified_file = substr($file, 0, strlen($ext) * -1) . 'min.' . $ext;\n            if ($fs = @filemtime($this->assets_dir . $minified_file)) {\n                return $minified_file . '?s=' . $fs;\n            }\n        }\n\n        if ($fs = @filemtime($this->assets_dir . $file)) {\n            $file .= '?s=' . $fs;\n        }\n\n        return $file;\n    }\n\n    /**\n     * Modify resource file location to be passed via the static.php end-point.\n     */\n    protected function resource_location($location)\n    {\n        if (!str_contains($location, '://')) {\n            $location = ltrim($location, '/');\n            $prefix = '';\n\n            // FIXME: Would REQUEST_URI be a better option than PATH_INFO?\n            if (!empty($_SERVER['PATH_INFO'])) {\n                $path = explode('/', trim($_SERVER['PATH_INFO'], '/'));\n                $prefix = str_repeat('../', count($path) + 1);\n            }\n\n            if (!str_starts_with($location, $prefix . 'static.php')\n                && !str_starts_with($location, 'data:')\n                && !str_ends_with($location, '.php')\n            ) {\n                $location = $prefix . 'static.php/' . $location;\n            }\n        }\n\n        return $location;\n    }\n\n    /**\n     * Public wrapper to dip into template parsing.\n     *\n     * @param string $input Template content\n     *\n     * @return string\n     */\n    public function just_parse($input)\n    {\n        $input = $this->parse_conditions($input);\n        $input = $this->parse_xml($input);\n        $input = $this->postrender($input);\n\n        return $input;\n    }\n\n    /**\n     * Parse for conditional tags\n     */\n    protected function parse_conditions($input)\n    {\n        $regexp1 = '/<roundcube:if\\s+([^>]+)>/is';\n        $regexp2 = '/<roundcube:(if|elseif|else|endif)\\s*([^>]*)>/is';\n\n        $pos = 0;\n\n        // Find IF tags and process them\n        while ($pos < strlen($input) && preg_match($regexp1, $input, $conditions, \\PREG_OFFSET_CAPTURE, $pos)) {\n            $pos = $start = $conditions[0][1];\n\n            // Process the 'condition' attribute\n            $attrib = html::parse_attrib_string($conditions[1][0]);\n            $condmet = isset($attrib['condition']) && $this->check_condition($attrib['condition']);\n\n            // Define start/end position of the content to pass into the output\n            $content_start = $condmet ? $pos + strlen($conditions[0][0]) : null;\n            $content_end = null;\n\n            $level = 0;\n            $endif = null;\n            $n = $pos + 1;\n\n            // Process the code until the closing tag (for the processed IF tag)\n            while (preg_match($regexp2, $input, $matches, \\PREG_OFFSET_CAPTURE, $n)) {\n                $tag_start = $matches[0][1];\n                $tag_end = $tag_start + strlen($matches[0][0]);\n                $tag_name = strtolower($matches[1][0]);\n\n                switch ($tag_name) {\n                    case 'if':\n                        $level++;\n                        break;\n                    case 'endif':\n                        if (!$level--) {\n                            $endif = $tag_end;\n                            if ($content_end === null) {\n                                $content_end = $tag_start;\n                            }\n\n                            break 2;\n                        }\n\n                        break;\n                    case 'elseif':\n                        if (!$level) {\n                            if ($condmet) {\n                                if ($content_end === null) {\n                                    $content_end = $tag_start;\n                                }\n                            } else {\n                                // Process the 'condition' attribute\n                                $attrib = html::parse_attrib_string($matches[2][0]);\n                                $condmet = isset($attrib['condition']) && $this->check_condition($attrib['condition']);\n\n                                if ($condmet) {\n                                    $content_start = $tag_end;\n                                }\n                            }\n                        }\n\n                        break;\n                    case 'else':\n                        if (!$level) {\n                            if ($condmet) {\n                                if ($content_end === null) {\n                                    $content_end = $tag_start;\n                                }\n                            } else {\n                                $content_start = $tag_end;\n                            }\n                        }\n\n                        break;\n                }\n\n                $n = $tag_end;\n            }\n\n            // No ending tag found\n            if ($endif === null) {\n                $pos = strlen($input);\n                if ($content_end === null) {\n                    $content_end = $pos;\n                }\n            }\n\n            if ($content_start === null) {\n                $content = '';\n            } else {\n                $content = substr($input, $content_start, $content_end - $content_start);\n            }\n\n            // Replace the whole IF statement with the output content\n            $input = substr_replace($input, $content, $start, max($endif, $content_end, $pos) - $start);\n            $pos = $start;\n        }\n\n        return $input;\n    }\n\n    /**\n     * Determines if a given condition is met\n     *\n     * @param string $condition Condition statement\n     *\n     * @return bool True if condition is met, False if not\n     *\n     * @todo Extend this to allow real conditions, not just \"set\"\n     */\n    protected function check_condition($condition)\n    {\n        return $this->eval_expression($condition);\n    }\n\n    /**\n     * Inserts hidden field with CSRF-prevention-token into POST forms\n     */\n    protected function alter_form_tag($matches)\n    {\n        $out = $matches[0];\n        $attrib = html::parse_attrib_string($matches[1]);\n\n        if (!empty($attrib['method']) && strtolower($attrib['method']) == 'post') {\n            $hidden = new html_hiddenfield(['name' => '_token', 'value' => $this->app->get_request_token()]);\n            $out .= \"\\n\" . $hidden->show();\n        }\n\n        return $out;\n    }\n\n    /**\n     * Parse & evaluate a given expression and return its result.\n     *\n     * @param string $expression Expression statement\n     *\n     * @return mixed Expression result\n     */\n    protected function eval_expression($expression)\n    {\n        $expression = preg_replace(\n            [\n                '/session:([a-z0-9_]+)/i',\n                '/config:([a-z0-9_]+)(:([a-z0-9_]+))?/i',\n                '/env:([a-z0-9_]+)/i',\n                '/request:([a-z0-9_]+)/i',\n                '/cookie:([a-z0-9_]+)/i',\n                '/browser:([a-z0-9_]+)/i',\n                '/template:name/i',\n            ],\n            [\n                \"(\\$_SESSION['\\\\1'] ?? null)\",\n                \"\\$this->app->config->get('\\\\1',rcube_utils::get_boolean('\\\\3'))\",\n                \"(\\$this->env['\\\\1'] ?? null)\",\n                \"rcube_utils::get_input_value('\\\\1', rcube_utils::INPUT_GPC)\",\n                \"(\\$_COOKIE['\\\\1'] ?? null)\",\n                \"(\\$this->browser->{'\\\\1'} ?? null)\",\n                \"'{$this->template_name}'\",\n            ],\n            $expression\n        );\n\n        // Note: We used create_function() before but it's deprecated in PHP 7.2\n        //       and really it was just a wrapper on eval().\n        return eval(\"return ({$expression});\");\n    }\n\n    /**\n     * Parse variable strings\n     *\n     * @param string $type Variable type (env, config etc)\n     * @param string $name Variable name\n     *\n     * @return mixed Variable value\n     */\n    protected function parse_variable($type, $name)\n    {\n        $value = '';\n\n        switch ($type) {\n            case 'env':\n                $value = $this->env[$name] ?? null;\n                break;\n            case 'config':\n                $value = $this->config->get($name);\n                if (is_array($value) && !empty($value[$_SESSION['storage_host']])) {\n                    $value = $value[$_SESSION['storage_host']];\n                }\n\n                break;\n            case 'request':\n                $value = rcube_utils::get_input_value($name, rcube_utils::INPUT_GPC);\n                break;\n            case 'session':\n                $value = $_SESSION[$name] ?? '';\n                break;\n            case 'cookie':\n                $value = htmlspecialchars($_COOKIE[$name], \\ENT_COMPAT | \\ENT_HTML401, RCUBE_CHARSET);\n                break;\n            case 'browser':\n                $value = $this->browser->{$name} ?? '';\n                break;\n        }\n\n        return $value;\n    }\n\n    /**\n     * Search for special tags in input and replace them\n     * with the appropriate content\n     *\n     * @param string $input Input string to parse\n     *\n     * @return string Altered input string\n     *\n     * @todo   Use DOM-parser to traverse template HTML\n     * @todo   Maybe a cache.\n     */\n    protected function parse_xml($input)\n    {\n        $regexp = '/<roundcube:([-_a-z]+)\\s+((?:[^>]|\\\\\\>)+)(?<!\\\\\\)>/Ui';\n\n        return preg_replace_callback($regexp, [$this, 'xml_command'], $input);\n    }\n\n    /**\n     * Callback function for parsing an xml command tag\n     * and turn it into real html content\n     *\n     * @param array $matches Matches array of preg_replace_callback\n     *\n     * @return string Tag/Object content\n     */\n    protected function xml_command($matches)\n    {\n        $command = strtolower($matches[1]);\n        $attrib = html::parse_attrib_string($matches[2]);\n\n        // empty output if required condition is not met\n        if (!empty($attrib['condition']) && !$this->check_condition($attrib['condition'])) {\n            return '';\n        }\n\n        // localize title and summary attributes\n        if ($command != 'button' && !empty($attrib['title']) && $this->app->text_exists($attrib['title'])) {\n            $attrib['title'] = $this->app->gettext($attrib['title']);\n        }\n        if ($command != 'button' && !empty($attrib['summary']) && $this->app->text_exists($attrib['summary'])) {\n            $attrib['summary'] = $this->app->gettext($attrib['summary']);\n        }\n\n        // execute command\n        switch ($command) {\n            // return a button\n            case 'button':\n                if (!empty($attrib['name']) || !empty($attrib['command'])) {\n                    return $this->button($attrib);\n                }\n\n                break;\n                // frame (<< reindent once https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/7179 is fixed)\n            case 'frame':\n                return $this->frame($attrib);\n                // show a label (<< reindent once https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/7179 is fixed)\n            case 'label':\n                if (!empty($attrib['expression'])) {\n                    $attrib['name'] = $this->eval_expression($attrib['expression']);\n                }\n\n                if (!empty($attrib['name']) || !empty($attrib['command'])) {\n                    $vars = $attrib + ['product' => $this->config->get('product_name')];\n                    unset($vars['name'], $vars['command']);\n\n                    $label = $this->app->gettext($attrib + ['vars' => $vars]);\n                    $quoting = null;\n\n                    if (!empty($attrib['quoting'])) {\n                        $quoting = strtolower($attrib['quoting']);\n                    } elseif (isset($attrib['html'])) {\n                        $quoting = rcube_utils::get_boolean((string) $attrib['html']) ? 'no' : '';\n                    }\n\n                    // 'noshow' can be used in skins to define new labels\n                    if (!empty($attrib['noshow'])) {\n                        return '';\n                    }\n\n                    switch ($quoting) {\n                        case 'no':\n                        case 'raw':\n                            break;\n                        case 'javascript':\n                        case 'js':\n                            $label = rcube::JQ($label);\n                            break;\n                        default:\n                            $label = html::quote($label);\n                            break;\n                    }\n\n                    return $label;\n                }\n\n                break;\n            case 'add_label':\n                $this->add_label($attrib['name']);\n                break;\n                // include a file (<< reindent once https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/7179 is fixed)\n            case 'include':\n                if (!empty($attrib['condition']) && !$this->check_condition($attrib['condition'])) {\n                    break;\n                }\n\n                if ($attrib['file'][0] != '/') {\n                    $attrib['file'] = '/templates/' . $attrib['file'];\n                }\n\n                $old_base_path = $this->base_path;\n                $include = '';\n                $attr_skin_path = !empty($attrib['skinpath']) ? $attrib['skinpath'] : null;\n\n                if (!empty($attrib['skin_path'])) {\n                    $attr_skin_path = $attrib['skin_path'];\n                }\n\n                if ($path = $this->get_skin_file($attrib['file'], $skin_path, $attr_skin_path)) {\n                    // set base_path to core skin directory (not plugin's skin)\n                    $this->base_path = preg_replace('!plugins/\\w+/!', '', $skin_path);\n                    $path = realpath(RCUBE_INSTALL_PATH . $path);\n                }\n\n                if (is_readable($path)) {\n                    $allow_php = $this->config->get('skin_include_php');\n                    $include = $allow_php ? $this->include_php($path) : file_get_contents($path);\n                    $include = $this->parse_conditions($include);\n                    $include = $this->parse_xml($include);\n                    $include = $this->fix_paths($include);\n                }\n\n                $this->base_path = $old_base_path;\n\n                return $include;\n            case 'plugin.include':\n                $hook = $this->app->plugins->exec_hook('template_plugin_include', $attrib + ['content' => '']);\n                return $hook['content'];\n                // define a container block (<< reindent once https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/7179 is fixed)\n            case 'container':\n                if (!empty($attrib['name']) && !empty($attrib['id'])) {\n                    $this->command('gui_container', $attrib['name'], $attrib['id']);\n                    // let plugins insert some content here\n                    $hook = $this->app->plugins->exec_hook('template_container', $attrib + ['content' => '']);\n                    return $hook['content'];\n                }\n\n                break;\n                // return code for a specific application object (<< reindent once https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/7179 is fixed)\n            case 'object':\n                $object = strtolower($attrib['name']);\n                $content = '';\n                $handler = null;\n\n                // correct deprecated object names\n                if (!empty($this->deprecated_template_objects[$object])) {\n                    $object = $this->deprecated_template_objects[$object];\n                }\n\n                if (!empty($this->object_handlers[$object])) {\n                    $handler = $this->object_handlers[$object];\n                }\n\n                // execute object handler function\n                if (is_callable($handler)) {\n                    $this->prepare_object_attribs($attrib);\n\n                    // We assume that objects with src attribute are internal (in most\n                    // cases this is a watermark frame). We need this to make sure assets_path\n                    // is added to the internal assets paths\n                    $external = empty($attrib['src']);\n                    $content = call_user_func($handler, $attrib);\n                } elseif ($object == 'doctype') {\n                    $content = html::doctype($attrib['value']);\n                } elseif ($object == 'logo') {\n                    $attrib += ['alt' => $this->xml_command(['', 'object', 'name=\"productname\"'])];\n\n                    // 'type' attribute added in 1.4 was renamed 'logo-type' in 1.5\n                    // check both for backwards compatibility\n                    $logo_type = !empty($attrib['logo-type']) ? $attrib['logo-type'] : null;\n                    $logo_match = !empty($attrib['logo-match']) ? $attrib['logo-match'] : null;\n                    if (!empty($attrib['type']) && empty($logo_type)) {\n                        $logo_type = $attrib['type'];\n                    }\n\n                    if (($template_logo = $this->get_template_logo($logo_type, $logo_match)) !== null) {\n                        $attrib['src'] = $template_logo;\n                    }\n\n                    if (($link = $this->get_template_logo('link')) !== null) {\n                        $attrib['onclick'] = \"location.href='{$link}';\";\n                        $attrib['style'] = 'cursor:pointer;';\n                    }\n\n                    $additional_logos = [];\n                    $logo_types = (array) $this->config->get('additional_logo_types');\n\n                    foreach ($logo_types as $type) {\n                        if (($template_logo = $this->get_template_logo($type)) !== null) {\n                            $additional_logos[$type] = $this->asset_url($template_logo, true);\n                        } elseif (!empty($attrib['data-src-' . $type])) {\n                            $additional_logos[$type] = $this->asset_url($attrib['data-src-' . $type], true);\n                        }\n                    }\n\n                    if (!empty($additional_logos)) {\n                        $this->set_env('additional_logos', $additional_logos);\n                    }\n\n                    if (!empty($attrib['src'])) {\n                        $content = html::img($attrib);\n                    }\n                } elseif ($object == 'productname') {\n                    $name = $this->config->get('product_name', 'Roundcube Webmail');\n                    $content = html::quote($name);\n                } elseif ($object == 'version') {\n                    $ver = (string) RCMAIL_VERSION;\n                    if (is_file(RCUBE_INSTALL_PATH . '.svn/entries')) {\n                        if (function_exists('shell_exec')) {\n                            if (preg_match('/Revision:\\s(\\d+)/', (string) @shell_exec('svn info'), $regs)) {\n                                $ver .= ' [SVN r' . $regs[1] . ']';\n                            }\n                        } else {\n                            $ver .= ' [SVN]';\n                        }\n                    } elseif (is_file(RCUBE_INSTALL_PATH . '.git/index')) {\n                        if (function_exists('shell_exec')) {\n                            if (preg_match('/Date:\\s+([^\\n]+)/', (string) @shell_exec('git log -1'), $regs)) {\n                                if ($date = date('Ymd.Hi', strtotime($regs[1]))) {\n                                    $ver .= ' [GIT ' . $date . ']';\n                                }\n                            }\n                        } else {\n                            $ver .= ' [GIT]';\n                        }\n                    }\n                    $content = html::quote($ver);\n                } elseif ($object == 'steptitle') {\n                    $content = html::quote($this->get_pagetitle(false));\n                } elseif ($object == 'pagetitle') {\n                    // Deprecated, <title> will be added automatically\n                    $content = html::quote($this->get_pagetitle());\n                } elseif ($object == 'contentframe') {\n                    if (empty($attrib['id'])) {\n                        $attrib['id'] = 'rcm' . $this->env['task'] . 'frame';\n                    }\n\n                    // parse variables\n                    if (preg_match('/^(config|env):([a-z0-9_]+)$/i', $attrib['src'], $matches)) {\n                        $attrib['src'] = $this->parse_variable($matches[1], $matches[2]);\n                    }\n\n                    $content = $this->frame($attrib, true);\n                } elseif ($object == 'meta' || $object == 'links') {\n                    if ($object == 'meta') {\n                        $source = 'meta_tags';\n                        $tag = 'meta';\n                        $key = 'name';\n                        $param = 'content';\n                    } else {\n                        $source = 'link_tags';\n                        $tag = 'link';\n                        $key = 'rel';\n                        $param = 'href';\n                    }\n\n                    foreach ($this->{$source} as $name => $vars) {\n                        // $vars can be in many forms:\n                        // - string\n                        // - ['key' => 'val']\n                        // - [string, string]\n                        // - [[], string]\n                        // - [['key' => 'val'], ['key' => 'val']]\n                        // normalise this for processing by checking for string array keys\n                        $vars = is_array($vars) ? (count(array_filter(array_keys($vars), 'is_string')) > 0 ? [$vars] : $vars) : [$vars];\n\n                        foreach ($vars as $args) {\n                            // skip unset headers e.g. when extending a skin and removing a header defined in the parent\n                            if ($args === false) {\n                                continue;\n                            }\n\n                            $args = is_array($args) ? $args : [$param => $args];\n\n                            // special handling for favicon\n                            if ($object == 'links' && $name == 'shortcut icon' && empty($args[$param])) {\n                                if ($href = $this->get_template_logo('favicon')) {\n                                    $args[$param] = $href;\n                                } elseif ($href = $this->config->get('favicon', '/images/favicon.ico')) {\n                                    $args[$param] = $href;\n                                }\n                            }\n\n                            $content .= html::tag($tag, [$key => $name, 'nl' => true] + $args);\n                        }\n                    }\n                }\n\n                // exec plugin hooks for this template object\n                $hook = $this->app->plugins->exec_hook(\"template_object_{$object}\", $attrib + ['content' => (string) $content]);\n\n                if (strlen($hook['content']) && !empty($external)) {\n                    $object_id = uniqid('TEMPLOBJECT:', true);\n                    $this->objects[$object_id] = $hook['content'];\n                    $hook['content'] = $object_id;\n                }\n\n                return $hook['content'];\n                // return <link> element (<< reindent once https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/7179 is fixed)\n            case 'link':\n                if ($attrib['condition'] && !$this->check_condition($attrib['condition'])) {\n                    break;\n                }\n\n                unset($attrib['condition']);\n\n                return html::tag('link', $attrib);\n                // return code for a specified eval expression (<< reindent once https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/7179 is fixed)\n            case 'exp':\n                return html::quote($this->eval_expression($attrib['expression']));\n                // return variable (<< reindent once https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/7179 is fixed)\n            case 'var':\n                $var = explode(':', $attrib['name']);\n                $value = $this->parse_variable($var[0], $var[1]);\n\n                if (is_array($value)) {\n                    $value = implode(', ', $value);\n                }\n\n                return html::quote((string) $value);\n            case 'form':\n                return $this->form_tag($attrib);\n        }\n\n        return '';\n    }\n\n    /**\n     * Prepares template object attributes\n     *\n     * @param array &$attribs Attributes\n     */\n    protected function prepare_object_attribs(&$attribs)\n    {\n        foreach ($attribs as $key => &$value) {\n            if (str_starts_with($key, 'data-label-')) {\n                // Localize data-label-* attributes\n                $value = $this->app->gettext($value);\n            } elseif ($key[0] == ':') {\n                // Evaluate attributes with expressions and remove special character from attribute name\n                $attribs[substr($key, 1)] = $this->eval_expression($value);\n                unset($attribs[$key]);\n            }\n        }\n    }\n\n    /**\n     * Include a specific file and return it's contents\n     *\n     * @param string $file File path\n     *\n     * @return string Contents of the processed file\n     */\n    protected function include_php($file)\n    {\n        ob_start();\n        include $file;\n        $out = ob_get_contents();\n        ob_end_clean();\n\n        return $out;\n    }\n\n    /**\n     * Put objects' content back into template output\n     */\n    protected function postrender($output)\n    {\n        // insert objects' contents\n        foreach ($this->objects as $key => $val) {\n            $output = str_replace($key, (string) $val, $output, $count);\n            if ($count) {\n                $this->objects[$key] = null;\n            }\n        }\n\n        // make sure all <form> tags have a valid request token\n        $output = preg_replace_callback('/<form\\s+([^>]+)>/Ui', [$this, 'alter_form_tag'], $output);\n\n        return $output;\n    }\n\n    /**\n     * Create and register a button\n     *\n     * @param array $attrib Named button attributes\n     *\n     * @return string HTML button\n     *\n     * @todo   Remove all inline JS calls and use jQuery instead.\n     * @todo   Remove all sprintf()'s - they are pretty, but also slow.\n     */\n    public function button($attrib)\n    {\n        static $s_button_count = 100;\n\n        // these commands can be called directly via url\n        $a_static_commands = ['compose', 'list', 'preferences', 'folders', 'identities'];\n\n        if (empty($attrib['command']) && empty($attrib['name']) && empty($attrib['href'])) {\n            return '';\n        }\n\n        $command = !empty($attrib['command']) ? $attrib['command'] : null;\n        $action = $command ?: (!empty($attrib['name']) ? $attrib['name'] : null);\n\n        if (!empty($attrib['task'])) {\n            $command = $attrib['task'] . '.' . $command;\n            $element = $attrib['task'] . '.' . $action;\n        } else {\n            $element = (!empty($this->env['task']) ? $this->env['task'] . '.' : '') . $action;\n        }\n\n        $disabled_actions = (array) $this->config->get('disabled_actions');\n\n        // remove buttons for disabled actions\n        if (in_array($element, $disabled_actions) || in_array($action, $disabled_actions)) {\n            return '';\n        }\n\n        // try to find out the button type\n        if (!empty($attrib['type'])) {\n            $attrib['type'] = strtolower($attrib['type']);\n            if (strpos($attrib['type'], '-menuitem')) {\n                $attrib['type'] = substr($attrib['type'], 0, -9);\n                $menuitem = true;\n            }\n        } elseif (!empty($attrib['image']) || !empty($attrib['imagepas']) || !empty($attrib['imageact'])) {\n            $attrib['type'] = 'image';\n        } else {\n            $attrib['type'] = 'button';\n        }\n\n        if (empty($attrib['image'])) {\n            if (!empty($attrib['imagepas'])) {\n                $attrib['image'] = $attrib['imagepas'];\n            } elseif (!empty($attrib['imageact'])) {\n                $attrib['image'] = $attrib['imageact'];\n            }\n        }\n\n        if (empty($attrib['id'])) {\n            // ensure auto generated IDs are unique between main window and content frame\n            // Elastic skin duplicates buttons between the two on smaller screens (#7618)\n            $prefix = ($this->framed || !empty($this->env['framed'])) ? 'frm' : '';\n            $attrib['id'] = sprintf('rcmbtn%s%d', $prefix, $s_button_count++);\n        }\n\n        // get localized text for labels and titles\n        $domain = !empty($attrib['domain']) ? $attrib['domain'] : null;\n        if (!empty($attrib['title'])) {\n            $attrib['title'] = html::quote($this->app->gettext($attrib['title'], $domain));\n        }\n        if (!empty($attrib['label'])) {\n            $attrib['label'] = html::quote($this->app->gettext($attrib['label'], $domain));\n        }\n        if (!empty($attrib['alt'])) {\n            $attrib['alt'] = html::quote($this->app->gettext($attrib['alt'], $domain));\n        }\n\n        // set accessibility attributes\n        if (empty($attrib['role'])) {\n            $attrib['role'] = 'button';\n        }\n\n        if (!empty($attrib['class']) && !empty($attrib['classact']) || !empty($attrib['imagepas']) && !empty($attrib['imageact'])) {\n            if (array_key_exists('tabindex', $attrib)) {\n                $attrib['data-tabindex'] = $attrib['tabindex'];\n            }\n            $attrib['tabindex'] = '-1';  // disable button by default\n            $attrib['aria-disabled'] = 'true';\n        }\n\n        // set title to alt attribute for IE browsers\n        if ($this->browser->ie && empty($attrib['title']) && !empty($attrib['alt'])) {\n            $attrib['title'] = $attrib['alt'];\n        }\n\n        // add empty alt attribute for XHTML compatibility\n        if (!isset($attrib['alt'])) {\n            $attrib['alt'] = '';\n        }\n\n        // register button in the system\n        if (!empty($attrib['command'])) {\n            $this->add_script(sprintf(\n                \"%s.register_button('%s', '%s', '%s', '%s', '%s', '%s');\",\n                self::JS_OBJECT_NAME,\n                $command,\n                $attrib['id'],\n                $attrib['type'],\n                !empty($attrib['imageact']) ? $this->abs_url($attrib['imageact']) : (!empty($attrib['classact']) ? $attrib['classact'] : ''),\n                !empty($attrib['imagesel']) ? $this->abs_url($attrib['imagesel']) : (!empty($attrib['classsel']) ? $attrib['classsel'] : ''),\n                !empty($attrib['imageover']) ? $this->abs_url($attrib['imageover']) : ''\n            ));\n\n            // make valid href to specific buttons\n            if (in_array($attrib['command'], rcmail::$main_tasks)) {\n                $attrib['href'] = $this->app->url(['task' => $attrib['command']]);\n                $attrib['onclick'] = sprintf(\"return %s.command('switch-task','%s',this,event)\", self::JS_OBJECT_NAME, $attrib['command']);\n            } elseif (!empty($attrib['task']) && in_array($attrib['task'], rcmail::$main_tasks)) {\n                $attrib['href'] = $this->app->url(['action' => $attrib['command'], 'task' => $attrib['task']]);\n            } elseif (in_array($attrib['command'], $a_static_commands)) {\n                $attrib['href'] = $this->app->url(['action' => $attrib['command']]);\n            } elseif (($attrib['command'] == 'permaurl' || $attrib['command'] == 'extwin') && !empty($this->env['permaurl'])) {\n                $attrib['href'] = $this->env['permaurl'];\n            }\n        }\n\n        // overwrite attributes\n        if (empty($attrib['href'])) {\n            $attrib['href'] = '#';\n        }\n\n        if (!empty($attrib['task'])) {\n            if (!empty($attrib['classact'])) {\n                $attrib['class'] = $attrib['classact'];\n            }\n        } elseif ($command && empty($attrib['onclick'])) {\n            $attrib['onclick'] = sprintf(\n                \"return %s.command('%s','%s',this,event)\",\n                self::JS_OBJECT_NAME,\n                $command,\n                !empty($attrib['prop']) ? $attrib['prop'] : ''\n            );\n        }\n\n        $out = '';\n        $btn_content = null;\n        $link_attrib = [];\n\n        // generate image tag\n        if ($attrib['type'] == 'image') {\n            $attrib_str = html::attrib_string(\n                $attrib,\n                [\n                    'style', 'class', 'id', 'width', 'height', 'border', 'hspace',\n                    'vspace', 'align', 'alt', 'tabindex', 'title',\n                ]\n            );\n            $btn_content = sprintf('<img src=\"%s\"%s />', $this->abs_url($attrib['image']), $attrib_str);\n            if (!empty($attrib['label'])) {\n                $btn_content .= ' ' . $attrib['label'];\n            }\n            $link_attrib = ['href', 'onclick', 'onmouseover', 'onmouseout', 'onmousedown', 'onmouseup', 'target'];\n        } elseif ($attrib['type'] == 'link') {\n            $btn_content = $attrib['content'] ?? (!empty($attrib['label']) ? $attrib['label'] : $attrib['command']);\n            $link_attrib = array_merge(html::$common_attrib, ['href', 'onclick', 'tabindex', 'target', 'rel']);\n            if (!empty($attrib['innerclass'])) {\n                $btn_content = html::span($attrib['innerclass'], $btn_content);\n            }\n        } elseif ($attrib['type'] == 'input') {\n            $attrib['type'] = 'button';\n\n            if (!empty($attrib['label'])) {\n                $attrib['value'] = $attrib['label'];\n            }\n            if (!empty($attrib['command'])) {\n                $attrib['disabled'] = 'disabled';\n            }\n\n            $out = html::tag('input', $attrib, null, ['type', 'value', 'onclick', 'id', 'class', 'style', 'tabindex', 'disabled']);\n        } else {\n            if (!empty($attrib['label'])) {\n                $attrib['value'] = $attrib['label'];\n            }\n            if (!empty($attrib['command'])) {\n                $attrib['disabled'] = 'disabled';\n            }\n\n            $content = $attrib['content'] ?? $attrib['label'];\n            $out = html::tag('button', $attrib, $content, ['type', 'value', 'onclick', 'id', 'class', 'style', 'tabindex', 'disabled']);\n        }\n\n        // generate html code for button\n        if ($btn_content) {\n            $attrib_str = html::attrib_string($attrib, $link_attrib);\n            $out = sprintf('<a%s>%s</a>', $attrib_str, $btn_content);\n        }\n\n        if (!empty($attrib['wrapper'])) {\n            $out = html::tag($attrib['wrapper'], null, $out);\n        }\n\n        if (!empty($menuitem)) {\n            $class = !empty($attrib['menuitem-class']) ? ' class=\"' . $attrib['menuitem-class'] . '\"' : '';\n            $out = '<li role=\"menuitem\"' . $class . '>' . $out . '</li>';\n        }\n\n        return $out;\n    }\n\n    /**\n     * Link an external script file\n     *\n     * @param string $file     File URL\n     * @param string $position Target position [head|head_bottom|foot]\n     */\n    public function include_script($file, $position = 'head', $add_path = true)\n    {\n        if ($add_path && !preg_match('|^https?://|i', $file) && $file[0] != '/') {\n            $file = $this->file_mod($this->scripts_path . $file);\n        }\n\n        if (!isset($this->script_files[$position]) || !is_array($this->script_files[$position])) {\n            $this->script_files[$position] = [];\n        }\n\n        if (!in_array($file, $this->script_files[$position])) {\n            $this->script_files[$position][] = $file;\n        }\n    }\n\n    /**\n     * Add inline javascript code\n     *\n     * @param string $script   JS code snippet\n     * @param string $position Target position [head|head_top|foot|docready]\n     */\n    public function add_script($script, $position = 'head')\n    {\n        if (!isset($this->scripts[$position])) {\n            $this->scripts[$position] = rtrim($script);\n        } else {\n            $this->scripts[$position] .= \"\\n\" . rtrim($script);\n        }\n    }\n\n    /**\n     * Link an external css file\n     *\n     * @param string $file File URL\n     */\n    public function include_css($file)\n    {\n        $this->css_files[] = $file;\n    }\n\n    /**\n     * Add HTML code to the page header\n     *\n     * @param string $str HTML code\n     */\n    public function add_header($str)\n    {\n        $this->header .= \"\\n\" . $str;\n    }\n\n    /**\n     * Add HTML code to the page footer\n     * To be added right before </body>\n     *\n     * @param string $str HTML code\n     */\n    public function add_footer($str)\n    {\n        $this->footer .= \"\\n\" . $str;\n    }\n\n    /**\n     * Process template and write to stdOut\n     *\n     * @param string $output HTML output\n     */\n    protected function _write($output = '')\n    {\n        $output = trim($output);\n\n        if (empty($output)) {\n            $output = html::doctype('html5') . \"\\n\" . $this->default_template;\n            $is_empty = true;\n        }\n\n        $merge_script_files = static function ($output, $script) {\n            return $output . html::script($script);\n        };\n\n        $merge_scripts = static function ($output, $script) {\n            return $output . html::script([], $script);\n        };\n\n        // put docready commands into page footer\n        if (!empty($this->scripts['docready'])) {\n            $this->add_script(\"\\$(function() {\\n\" . $this->scripts['docready'] . \"\\n});\", 'foot');\n        }\n\n        $page_header = '';\n        $page_footer = '';\n        $meta = '';\n\n        // declare page language\n        if (!empty($_SESSION['language'])) {\n            $lang = substr($_SESSION['language'], 0, 2);\n            $output = preg_replace('/<html/', '<html lang=\"' . html::quote($lang) . '\"', $output, 1);\n\n            if (!headers_sent()) {\n                $this->header('Content-Language: ' . $lang);\n            }\n        }\n\n        // include meta tag with charset\n        if (!empty($this->charset)) {\n            if (!headers_sent()) {\n                $this->header('Content-Type: text/html; charset=' . $this->charset);\n            }\n\n            $meta .= html::tag('meta', [\n                'http-equiv' => 'content-type',\n                'content' => \"text/html; charset={$this->charset}\",\n                'nl' => true,\n            ]);\n        }\n\n        // include page title (after charset specification)\n        $meta .= '<title>' . html::quote($this->get_pagetitle()) . \"</title>\\n\";\n\n        $output = (string) preg_replace('/(<head[^>]*>)\\n*/i', \"\\\\1\\n{$meta}\", $output, 1, $count);\n        if (!$count) {\n            $page_header .= $meta;\n        }\n\n        // include scripts into header/footer\n        if (!empty($this->script_files['head'])) {\n            $page_header .= array_reduce((array) $this->script_files['head'], $merge_script_files);\n        }\n\n        $head = $this->scripts['head_top'] ?? '';\n        $head .= $this->scripts['head'] ?? '';\n\n        $page_header .= array_reduce((array) $head, $merge_scripts);\n        $page_header .= $this->header . \"\\n\";\n\n        if (!empty($this->script_files['head_bottom'])) {\n            $page_header .= array_reduce((array) $this->script_files['head_bottom'], $merge_script_files);\n        }\n\n        if (!empty($this->script_files['foot'])) {\n            $page_footer .= array_reduce((array) $this->script_files['foot'], $merge_script_files);\n        }\n\n        $page_footer .= $this->footer . \"\\n\";\n\n        if (!empty($this->scripts['foot'])) {\n            $page_footer .= array_reduce((array) $this->scripts['foot'], $merge_scripts);\n        }\n\n        // find page header\n        if ($hpos = stripos($output, '</head>')) {\n            $page_header .= \"\\n\";\n        } else {\n            if (!is_numeric($hpos)) {\n                $hpos = stripos($output, '<body');\n            }\n            if (!is_numeric($hpos) && ($hpos = stripos($output, '<html'))) {\n                // @phpstan-ignore-next-line\n                while ($output[$hpos] != '>') {\n                    $hpos++;\n                }\n                $hpos++;\n            }\n            $page_header = \"<head>\\n{$page_header}\\n</head>\\n\";\n        }\n\n        // add page header\n        if ($hpos) {\n            $output = substr_replace($output, $page_header, $hpos, 0);\n        } else {\n            $output = $page_header . $output;\n        }\n\n        // add page footer\n        if (($fpos = strripos($output, '</body>')) || ($fpos = strripos($output, '</html>'))) {\n            // for Elastic: put footer content before \"footer scripts\"\n            while (($npos = strripos($output, \"\\n\", -strlen($output) + $fpos - 1))\n                && $npos != $fpos\n                && ($chunk = substr($output, $npos, $fpos - $npos)) !== ''\n                && (trim($chunk) === '' || preg_match('/\\s*<script[^>]+><\\/script>\\s*/', $chunk))\n            ) {\n                $fpos = $npos;\n            }\n\n            $output = substr_replace($output, $page_footer . \"\\n\", $fpos, 0);\n        } else {\n            $output .= \"\\n\" . $page_footer;\n        }\n\n        // add css files in head, before scripts, for speed up with parallel downloads\n        if (!empty($this->css_files) && empty($is_empty)\n            && (($pos = stripos($output, '<script ')) || ($pos = stripos($output, '</head>')))\n        ) {\n            $css = '';\n            foreach ($this->css_files as $file) {\n                $is_less = substr_compare($file, '.less', -5, 5, true) === 0;\n                $css .= html::tag('link', [\n                    'rel' => $is_less ? 'stylesheet/less' : 'stylesheet',\n                    'type' => 'text/css',\n                    'href' => $file,\n                    'nl' => true,\n                ]);\n            }\n            $output = substr_replace($output, $css, $pos, 0);\n        }\n\n        $output = $this->parse_with_globals($this->fix_paths($output));\n\n        if ($this->assets_path) {\n            $output = $this->fix_assets_paths($output);\n        }\n\n        $output = $this->postrender($output);\n\n        // trigger hook with final HTML content to be sent\n        $hook = $this->app->plugins->exec_hook('send_page', ['content' => $output]);\n        if (!$hook['abort']) {\n            if ($this->charset != RCUBE_CHARSET) {\n                echo rcube_charset::convert($hook['content'], RCUBE_CHARSET, $this->charset);\n            } else {\n                echo $hook['content'];\n            }\n        }\n    }\n\n    /**\n     * Returns iframe object, registers some related env variables\n     *\n     * @param array $attrib          HTML attributes\n     * @param bool  $is_contentframe Register this iframe as the 'contentframe' gui object\n     *\n     * @return string IFRAME element\n     */\n    public function frame($attrib, $is_contentframe = false)\n    {\n        static $idcount = 0;\n\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmframe' . ++$idcount;\n        }\n\n        $attrib['name'] = $attrib['id'];\n        $attrib['src'] = !empty($attrib['src']) ? $this->abs_url($attrib['src'], true) : 'javascript:false;';\n\n        // register as 'contentframe' object\n        if ($is_contentframe || !empty($attrib['contentframe'])) {\n            $this->set_env('contentframe', !empty($attrib['contentframe']) ? $attrib['contentframe'] : $attrib['name']);\n        }\n\n        return html::iframe($attrib);\n    }\n\n    // common functions delivering gui objects\n\n    /**\n     * Create a form tag with the necessary hidden fields\n     *\n     * @param array  $attrib  Named tag parameters\n     * @param string $content HTML content of the form\n     *\n     * @return string HTML code for the form\n     */\n    public function form_tag($attrib, $content = null)\n    {\n        $hidden = '';\n\n        if (!empty($this->env['extwin'])) {\n            $hiddenfield = new html_hiddenfield(['name' => '_extwin', 'value' => '1']);\n            $hidden = $hiddenfield->show();\n        } elseif ($this->framed || !empty($this->env['framed'])) {\n            $hiddenfield = new html_hiddenfield(['name' => '_framed', 'value' => '1']);\n            $hidden = $hiddenfield->show();\n        }\n\n        if (!$content) {\n            $attrib['noclose'] = true;\n        }\n\n        return html::tag('form',\n            $attrib + ['action' => $this->app->comm_path, 'method' => 'get'],\n            $hidden . $content,\n            ['id', 'class', 'style', 'name', 'method', 'action', 'enctype', 'onsubmit']\n        );\n    }\n\n    /**\n     * Build a form tag with a unique request token\n     *\n     * @param array  $attrib  Named tag parameters including 'action' and 'task' values\n     *                        which will be put into hidden fields\n     * @param string $content Form content\n     *\n     * @return string HTML code for the form\n     */\n    public function request_form($attrib, $content = '')\n    {\n        $hidden = new html_hiddenfield();\n\n        if (!empty($attrib['task'])) {\n            $hidden->add(['name' => '_task', 'value' => $attrib['task']]);\n        }\n\n        if (!empty($attrib['action'])) {\n            $hidden->add(['name' => '_action', 'value' => $attrib['action']]);\n        }\n\n        // we already have a <form> tag\n        if (!empty($attrib['form'])) {\n            if ($this->framed || !empty($this->env['framed'])) {\n                $hidden->add(['name' => '_framed', 'value' => '1']);\n            }\n\n            return $hidden->show() . $content;\n        }\n\n        unset($attrib['task'], $attrib['request']);\n        $attrib['action'] = './';\n\n        return $this->form_tag($attrib, $hidden->show() . $content);\n    }\n\n    /**\n     * GUI object 'username'\n     * Showing IMAP username of the current session\n     *\n     * @param array $attrib Named tag parameters (currently not used)\n     *\n     * @return string HTML code for the gui object\n     */\n    public function current_username($attrib)\n    {\n        static $username;\n\n        // already fetched\n        if (!empty($username)) {\n            return $username;\n        }\n\n        // Current username is an e-mail address\n        if (isset($_SESSION['username']) && strpos($_SESSION['username'], '@')) {\n            $username = $_SESSION['username'];\n        }\n        // get e-mail address from default identity\n        elseif ($sql_arr = $this->app->user->get_identity()) {\n            $username = $sql_arr['email'];\n        } else {\n            $username = $this->app->user->get_username();\n        }\n\n        $username = rcube_utils::idn_to_utf8($username);\n\n        return html::quote($username);\n    }\n\n    /**\n     * GUI object 'loginform'\n     * Returns code for the webmail login form\n     *\n     * @param array $attrib Named parameters\n     *\n     * @return string HTML code for the gui object\n     */\n    protected function login_form($attrib)\n    {\n        $default_host = $this->config->get('imap_host');\n        $autocomplete = (int) $this->config->get('login_autocomplete');\n        $username_filter = $this->config->get('login_username_filter');\n        $_SESSION['temp'] = true;\n\n        // save original url\n        $url = rcube_utils::get_input_string('_url', rcube_utils::INPUT_POST);\n        if (\n            empty($url)\n            && !empty($_SERVER['QUERY_STRING'])\n            && !preg_match('/_(task|action)=logout/', $_SERVER['QUERY_STRING'])\n        ) {\n            $url = $_SERVER['QUERY_STRING'];\n        }\n\n        // Disable autocapitalization on iPad/iPhone (#1488609)\n        $attrib['autocapitalize'] = 'off';\n\n        $form_name = !empty($attrib['form']) ? $attrib['form'] : 'form';\n\n        // set autocomplete attribute\n        $user_attrib = $autocomplete > 0 ? [] : ['autocomplete' => 'off'];\n        $host_attrib = $autocomplete > 0 ? [] : ['autocomplete' => 'off'];\n        $pass_attrib = $autocomplete > 1 ? [] : ['autocomplete' => 'off'];\n\n        if ($username_filter && strtolower($username_filter) == 'email') {\n            $user_attrib['type'] = 'email';\n        }\n\n        $input_task = new html_hiddenfield(['name' => '_task', 'value' => 'login']);\n        $input_action = new html_hiddenfield(['name' => '_action', 'value' => 'login']);\n        $input_tzone = new html_hiddenfield(['name' => '_timezone', 'id' => 'rcmlogintz', 'value' => '_default_']);\n        $input_url = new html_hiddenfield(['name' => '_url', 'id' => 'rcmloginurl', 'value' => $url]);\n        $input_user = new html_inputfield(['name' => '_user', 'id' => 'rcmloginuser', 'required' => 'required']\n            + $attrib + $user_attrib);\n        $input_pass = new html_passwordfield(['name' => '_pass', 'id' => 'rcmloginpwd', 'required' => 'required']\n            + $attrib + $pass_attrib);\n        $input_host = null;\n\n        $form_content = [\n            'hidden' => [\n                'task' => $input_task->show(),\n                'action' => $input_action->show(),\n                'tzone' => $input_tzone->show(),\n                'url' => $input_url->show(),\n            ],\n            'inputs' => [\n                'user' => [\n                    'title' => html::label('rcmloginuser', html::quote($this->app->gettext('username'))),\n                    'content' => $input_user->show(rcube_utils::get_input_string('_user', rcube_utils::INPUT_GPC)),\n                ],\n                'password' => [\n                    'title' => html::label('rcmloginpwd', html::quote($this->app->gettext('password'))),\n                    'content' => $input_pass->show(),\n                ],\n            ],\n            'buttons' => [],\n        ];\n\n        if (is_array($default_host) && count($default_host) > 1) {\n            $input_host = new html_select(['name' => '_host', 'id' => 'rcmloginhost', 'class' => 'custom-select']);\n\n            foreach ($default_host as $key => $value) {\n                if (!is_array($value)) {\n                    $input_host->add($value, is_numeric($key) ? $value : $key);\n                } else {\n                    $input_host = null;\n                    break;\n                }\n            }\n        } elseif (is_array($default_host) && ($host = key($default_host)) !== null) {\n            $val = is_numeric($host) ? $default_host[$host] : $host;\n            $input_host = new html_hiddenfield(['name' => '_host', 'id' => 'rcmloginhost', 'value' => $val] + $attrib);\n\n            $form_content['hidden']['host'] = $input_host->show();\n            $input_host = null;\n        } elseif (empty($default_host)) {\n            $input_host = new html_inputfield(['name' => '_host', 'id' => 'rcmloginhost', 'class' => 'form-control']\n                + $attrib + $host_attrib);\n        }\n\n        // add host selection row\n        if (is_object($input_host)) {\n            $form_content['inputs']['host'] = [\n                'title' => html::label('rcmloginhost', html::quote($this->app->gettext('server'))),\n                'content' => $input_host->show(rcube_utils::get_input_string('_host', rcube_utils::INPUT_GPC)),\n            ];\n        }\n\n        if (rcube_utils::get_boolean($attrib['submit'])) {\n            $button_attr = ['type' => 'submit', 'id' => 'rcmloginsubmit', 'class' => 'button mainaction submit'];\n            $button = html::tag('button', $button_attr, $this->app->gettext('login'));\n\n            $form_content['buttons']['submit'] = ['outterclass' => 'formbuttons', 'content' => $button];\n        }\n\n        $data = $this->app->plugins->exec_hook('loginform_content', $form_content);\n\n        $this->add_gui_object('loginform', $form_name);\n\n        // output login form contents\n        $out = implode('', $data['hidden']);\n\n        if (count($data['inputs']) > 0) {\n            // create HTML table with two cols\n            $table = new html_table(['cols' => 2]);\n\n            foreach ($data['inputs'] as $input) {\n                if (isset($input['title'])) {\n                    $table->add('title', $input['title']);\n                    $table->add('input', $input['content']);\n                } else {\n                    $table->add(['colspan' => 2, 'class' => 'input'], $input['content']);\n                }\n            }\n\n            $out .= $table->show();\n        }\n\n        foreach ($data['buttons'] as $button) {\n            $out .= html::p($button['outterclass'], $button['content']);\n        }\n\n        // surround html output with a form tag\n        if (empty($attrib['form'])) {\n            $out = $this->form_tag(['name' => $form_name, 'method' => 'post'], $out);\n        }\n\n        return $out;\n    }\n\n    /**\n     * GUI object 'preloader'\n     * Loads javascript code for images preloading\n     *\n     * @param array $attrib Named parameters\n     */\n    protected function preloader($attrib): void\n    {\n        $images = preg_split('/[\\s\\t\\n,]+/', $attrib['images'], -1, \\PREG_SPLIT_NO_EMPTY);\n        $images = array_map([$this, 'abs_url'], $images);\n        $images = array_map([$this, 'asset_url'], $images);\n\n        if (empty($images) || (isset($_REQUEST['_task']) && $_REQUEST['_task'] == 'logout')) {\n            return;\n        }\n\n        $this->add_script('var images = ' . self::json_serialize($images, $this->devel_mode) . ';\n            for (var i=0; i<images.length; i++) {\n                img = new Image();\n                img.src = images[i];\n            }', 'docready');\n    }\n\n    /**\n     * GUI object 'searchform'\n     * Returns code for search function\n     *\n     * @param array $attrib Named parameters\n     *\n     * @return string HTML code for the gui object\n     */\n    public function search_form($attrib)\n    {\n        // add some labels to client\n        $this->add_label('searching');\n\n        $attrib['name'] = '_q';\n        $attrib['class'] = trim((!empty($attrib['class']) ? $attrib['class'] : '') . ' no-bs');\n\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmqsearchbox';\n        }\n        if (isset($attrib['type']) && $attrib['type'] == 'search' && !$this->browser->khtml) {\n            unset($attrib['type'], $attrib['results']);\n        }\n        if (empty($attrib['placeholder'])) {\n            $attrib['placeholder'] = $this->app->gettext('searchplaceholder');\n        }\n\n        $label = html::label(['for' => $attrib['id'], 'class' => 'voice'], rcube::Q($this->app->gettext('arialabelsearchterms')));\n        $input_q = new html_inputfield($attrib);\n        $out = $label . $input_q->show();\n        $name = 'qsearchbox';\n\n        // Support for multiple searchforms on the same page\n        if (isset($attrib['gui-object']) && $attrib['gui-object'] !== false && $attrib['gui-object'] !== 'false') {\n            $name = $attrib['gui-object'];\n        }\n\n        $this->add_gui_object($name, $attrib['id']);\n\n        // add form tag around text field\n        if (empty($attrib['form']) && empty($attrib['no-form'])) {\n            $out = $this->form_tag([\n                'name' => !empty($attrib['form-name']) ? $attrib['form-name'] : 'rcmqsearchform',\n                'onsubmit' => sprintf(\n                    \"%s.command('%s'); return false\",\n                    self::JS_OBJECT_NAME,\n                    !empty($attrib['command']) ? $attrib['command'] : 'search'\n                ),\n                // 'style'    => \"display:inline\"\n            ], $out);\n        }\n\n        if (!empty($attrib['wrapper'])) {\n            $options_button = '';\n\n            $ariatag = !empty($attrib['ariatag']) ? $attrib['ariatag'] : 'h2';\n            $domain = !empty($attrib['label-domain']) ? $attrib['label-domain'] : null;\n            $options = !empty($attrib['options']) ? $attrib['options'] : null;\n\n            $header_label = $this->app->gettext('arialabel' . $attrib['label'], $domain);\n            $header_attrs = [\n                'id' => 'aria-label-' . $attrib['label'],\n                'class' => 'voice',\n            ];\n\n            $header = html::tag($ariatag, $header_attrs, rcube::Q($header_label));\n\n            if (!empty($attrib['options'])) {\n                $options_button = $this->button([\n                    'type' => 'link',\n                    'href' => '#search-filter',\n                    'class' => 'button options',\n                    'label' => 'options',\n                    'title' => 'options',\n                    'tabindex' => '0',\n                    'innerclass' => 'inner',\n                    'data-target' => $options,\n                ]);\n            }\n\n            $search_button = $this->button([\n                'type' => 'link',\n                'href' => '#search',\n                'class' => 'button search',\n                'label' => $attrib['buttontitle'],\n                'title' => $attrib['buttontitle'],\n                'tabindex' => '0',\n                'innerclass' => 'inner',\n            ]);\n\n            $reset_button = $this->button([\n                'type' => 'link',\n                'command' => !empty($attrib['reset-command']) ? $attrib['reset-command'] : 'reset-search',\n                'class' => 'button reset',\n                'label' => 'resetsearch',\n                'title' => 'resetsearch',\n                'tabindex' => '0',\n                'innerclass' => 'inner',\n            ]);\n\n            $out = html::div([\n                    'role' => 'search',\n                    'aria-labelledby' => !empty($attrib['label']) ? 'aria-label-' . $attrib['label'] : null,\n                    'class' => $attrib['wrapper'],\n                ],\n                \"{$header}{$out}\\n{$reset_button}\\n{$options_button}\\n{$search_button}\"\n            );\n        }\n\n        return $out;\n    }\n\n    /**\n     * Builder for GUI object 'message'\n     *\n     * @param array $attrib Named tag parameters\n     *\n     * @return string HTML code for the gui object\n     */\n    protected function message_container($attrib)\n    {\n        if (isset($attrib['id']) === false) {\n            $attrib['id'] = 'rcmMessageContainer';\n        }\n\n        $this->add_gui_object('message', $attrib['id']);\n\n        return html::div($attrib, '');\n    }\n\n    /**\n     * GUI object 'charsetselector'\n     *\n     * @param array $attrib Named parameters for the select tag\n     *\n     * @return string HTML code for the gui object\n     */\n    public function charset_selector($attrib)\n    {\n        // pass the following attributes to the form class\n        $field_attrib = ['name' => '_charset'];\n        foreach ($attrib as $attr => $value) {\n            if (in_array($attr, ['id', 'name', 'class', 'style', 'size', 'tabindex'])) {\n                $field_attrib[$attr] = $value;\n            }\n        }\n\n        $charsets = [\n            'UTF-8' => 'UTF-8 (' . $this->app->gettext('unicode') . ')',\n            'US-ASCII' => 'ASCII (' . $this->app->gettext('english') . ')',\n            'ISO-8859-1' => 'ISO-8859-1 (' . $this->app->gettext('westerneuropean') . ')',\n            'ISO-8859-2' => 'ISO-8859-2 (' . $this->app->gettext('easterneuropean') . ')',\n            'ISO-8859-4' => 'ISO-8859-4 (' . $this->app->gettext('baltic') . ')',\n            'ISO-8859-5' => 'ISO-8859-5 (' . $this->app->gettext('cyrillic') . ')',\n            'ISO-8859-6' => 'ISO-8859-6 (' . $this->app->gettext('arabic') . ')',\n            'ISO-8859-7' => 'ISO-8859-7 (' . $this->app->gettext('greek') . ')',\n            'ISO-8859-8' => 'ISO-8859-8 (' . $this->app->gettext('hebrew') . ')',\n            'ISO-8859-9' => 'ISO-8859-9 (' . $this->app->gettext('turkish') . ')',\n            'ISO-8859-10' => 'ISO-8859-10 (' . $this->app->gettext('nordic') . ')',\n            'ISO-8859-11' => 'ISO-8859-11 (' . $this->app->gettext('thai') . ')',\n            'ISO-8859-13' => 'ISO-8859-13 (' . $this->app->gettext('baltic') . ')',\n            'ISO-8859-14' => 'ISO-8859-14 (' . $this->app->gettext('celtic') . ')',\n            'ISO-8859-15' => 'ISO-8859-15 (' . $this->app->gettext('westerneuropean') . ')',\n            'ISO-8859-16' => 'ISO-8859-16 (' . $this->app->gettext('southeasterneuropean') . ')',\n            'WINDOWS-1250' => 'Windows-1250 (' . $this->app->gettext('easterneuropean') . ')',\n            'WINDOWS-1251' => 'Windows-1251 (' . $this->app->gettext('cyrillic') . ')',\n            'WINDOWS-1252' => 'Windows-1252 (' . $this->app->gettext('westerneuropean') . ')',\n            'WINDOWS-1253' => 'Windows-1253 (' . $this->app->gettext('greek') . ')',\n            'WINDOWS-1254' => 'Windows-1254 (' . $this->app->gettext('turkish') . ')',\n            'WINDOWS-1255' => 'Windows-1255 (' . $this->app->gettext('hebrew') . ')',\n            'WINDOWS-1256' => 'Windows-1256 (' . $this->app->gettext('arabic') . ')',\n            'WINDOWS-1257' => 'Windows-1257 (' . $this->app->gettext('baltic') . ')',\n            'WINDOWS-1258' => 'Windows-1258 (' . $this->app->gettext('vietnamese') . ')',\n            'ISO-2022-JP' => 'ISO-2022-JP (' . $this->app->gettext('japanese') . ')',\n            'ISO-2022-KR' => 'ISO-2022-KR (' . $this->app->gettext('korean') . ')',\n            'ISO-2022-CN' => 'ISO-2022-CN (' . $this->app->gettext('chinese') . ')',\n            'EUC-JP' => 'EUC-JP (' . $this->app->gettext('japanese') . ')',\n            'EUC-KR' => 'EUC-KR (' . $this->app->gettext('korean') . ')',\n            'EUC-CN' => 'EUC-CN (' . $this->app->gettext('chinese') . ')',\n            'BIG5' => 'BIG5 (' . $this->app->gettext('chinese') . ')',\n            'GB2312' => 'GB2312 (' . $this->app->gettext('chinese') . ')',\n            'KOI8-R' => 'KOI8-R (' . $this->app->gettext('cyrillic') . ')',\n        ];\n\n        if ($post = rcube_utils::get_input_string('_charset', rcube_utils::INPUT_POST)) {\n            $set = $post;\n        } elseif (!empty($attrib['selected'])) {\n            $set = $attrib['selected'];\n        } else {\n            $set = $this->get_charset();\n        }\n\n        $set = strtoupper($set);\n        if (!isset($charsets[$set]) && preg_match('/^[A-Z0-9-]+$/', $set)) {\n            $charsets[$set] = $set;\n        }\n\n        $select = new html_select($field_attrib);\n        $select->add(array_values($charsets), array_keys($charsets));\n\n        return $select->show($set);\n    }\n\n    /**\n     * Include content from config/about.<LANG>.html if available\n     */\n    protected function about_content($attrib)\n    {\n        $content = '';\n        $filenames = [\n            'about.' . $_SESSION['language'] . '.html',\n            'about.' . substr($_SESSION['language'], 0, 2) . '.html',\n            'about.html',\n        ];\n\n        foreach ($filenames as $file) {\n            $fn = RCUBE_CONFIG_DIR . $file;\n            if (is_readable($fn)) {\n                $content = file_get_contents($fn);\n                $content = $this->parse_conditions($content);\n                $content = $this->parse_xml($content);\n                break;\n            }\n        }\n\n        return $content;\n    }\n\n    /**\n     * Get logo URL for current template based on skin_logo config option\n     *\n     * @param string $type  Type of the logo to check for (e.g. 'print' or 'small')\n     *                      default is null (no special type)\n     * @param string $match (optional) 'all' = type, template or wildcard, 'template' = type or template\n     *                      Note: when type is specified matches are limited to type only unless $match is defined\n     *\n     * @return string|null image URL\n     */\n    protected function get_template_logo($type = null, $match = null)\n    {\n        $template_logo = null;\n\n        if ($logo = $this->config->get('skin_logo')) {\n            if (is_array($logo)) {\n                $template_names = [\n                    $this->skin_name . ':' . $this->template_name . '[' . $type . ']',\n                    $this->skin_name . ':' . $this->template_name,\n                    $this->skin_name . ':*[' . $type . ']',\n                    $this->skin_name . ':[' . $type . ']',\n                    $this->skin_name . ':*',\n                    '*:' . $this->template_name . '[' . $type . ']',\n                    '*:' . $this->template_name,\n                    '*:*[' . $type . ']',\n                    '*:[' . $type . ']',\n                    $this->template_name . '[' . $type . ']',\n                    $this->template_name,\n                    '*[' . $type . ']',\n                    '[' . $type . ']',\n                    '*',\n                ];\n\n                if (empty($type)) {\n                    // If no type provided then remove those options from the list\n                    $template_names = preg_grep('/\\]$/', $template_names, \\PREG_GREP_INVERT);\n                } elseif ($match === null) {\n                    // Type specified with no special matching requirements so remove all none type specific options from the list\n                    $template_names = preg_grep('/\\]$/', $template_names);\n                }\n\n                if ($match == 'template') {\n                    // Match only specific type or template name\n                    $template_names = preg_grep('/\\*$/', $template_names, \\PREG_GREP_INVERT);\n                }\n\n                foreach ($template_names as $key) {\n                    if (isset($logo[$key])) {\n                        $template_logo = $logo[$key];\n                        break;\n                    }\n                }\n            } elseif ($type != 'link') {\n                $template_logo = $logo;\n            }\n        }\n\n        return $template_logo;\n    }\n}\n", "patch": "@@ -516,10 +516,10 @@ public function write($template = '')\n         // write all javascript commands\n         $this->add_script($commands, 'head_top');\n \n-        // send clickjacking protection headers\n+        // allow (legal) iframe content to be loaded\n         $iframe = $this->framed || $this->env['framed'];\n-        if (!headers_sent() && ($xframe = $this->app->config->get('x_frame_options', 'sameorigin'))) {\n-            header('X-Frame-Options: ' . ($iframe && $xframe == 'deny' ? 'sameorigin' : $xframe));\n+        if (!headers_sent() && $iframe && $this->app->config->get('x_frame_options', 'sameorigin') === 'deny') {\n+            header('X-Frame-Options: sameorigin', true);\n         }\n \n         // call super method", "file_path": "files/2016_8\\11", "file_language": "php", "file_name": "program/include/rcmail_output_html.php", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/4a408843b0ef816daf70a472a02b78cd6073a4d5/program/js/app.js", "code": "/**\n * Roundcube Webmail Client Script\n *\n * This file is part of the Roundcube Webmail client\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (C) 2005-2015, The Roundcube Dev Team\n * Copyright (C) 2011-2015, Kolab Systems AG\n *\n * The JavaScript code in this page is free software: you can\n * redistribute it and/or modify it under the terms of the GNU\n * General Public License (GNU GPL) as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option)\n * any later version.  The code is distributed WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.\n *\n * As additional permission under GNU GPL version 3 section 7, you\n * may distribute non-source (e.g., minimized or compacted) forms of\n * that code without the copy of the GNU GPL normally required by\n * section 4, provided you include this license notice and a URL\n * through which recipients can access the Corresponding Source.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n *\n * @author Thomas Bruederli <roundcube@gmail.com>\n * @author Aleksander 'A.L.E.C' Machniak <alec@alec.pl>\n * @author Charles McNulty <charles@charlesmcnulty.com>\n *\n * @requires jquery.js, common.js, list.js\n */\n\nfunction rcube_webmail()\n{\n  this.labels = {};\n  this.buttons = {};\n  this.buttons_sel = {};\n  this.gui_objects = {};\n  this.gui_containers = {};\n  this.commands = {};\n  this.command_handlers = {};\n  this.onloads = [];\n  this.messages = {};\n  this.group2expand = {};\n  this.http_request_jobs = {};\n  this.menu_stack = [];\n\n  // webmail client settings\n  this.dblclick_time = 500;\n  this.message_time = 5000;\n  this.identifier_expr = /[^0-9a-z_-]/gi;\n\n  // environment defaults\n  this.env = {\n    request_timeout: 180,  // seconds\n    draft_autosave: 0,     // seconds\n    comm_path: './',\n    recipients_separator: ',',\n    recipients_delimiter: ', ',\n    popup_width: 1150,\n    popup_width_small: 900\n  };\n\n  // create protected reference to myself\n  this.ref = 'rcmail';\n  var ref = this;\n\n  // set jQuery ajax options\n  $.ajaxSetup({\n    cache: false,\n    timeout: this.env.request_timeout * 1000,\n    error: function(request, status, err){ ref.http_error(request, status, err); },\n    beforeSend: function(xmlhttp){ xmlhttp.setRequestHeader('X-Roundcube-Request', ref.env.request_token); }\n  });\n\n  // unload fix\n  $(window).on('beforeunload', function() { ref.unload = true; });\n\n  // set environment variable(s)\n  this.set_env = function(p, value)\n  {\n    if (p != null && typeof p === 'object' && !value)\n      for (var n in p)\n        this.env[n] = p[n];\n    else\n      this.env[p] = value;\n  };\n\n  // add a localized label to the client environment\n  this.add_label = function(p, value)\n  {\n    if (typeof p == 'string')\n      this.labels[p] = value;\n    else if (typeof p == 'object')\n      $.extend(this.labels, p);\n  };\n\n  // add a button to the button list\n  this.register_button = function(command, id, type, act, sel, over)\n  {\n    var button_prop = {id:id, type:type};\n\n    if (act) button_prop.act = act;\n    if (sel) button_prop.sel = sel;\n    if (over) button_prop.over = over;\n\n    if (!this.buttons[command])\n      this.buttons[command] = [];\n\n    this.buttons[command].push(button_prop);\n\n    if (this.loaded)\n      init_button(command, button_prop);\n  };\n\n  // register a specific gui object\n  this.gui_object = function(name, id)\n  {\n    this.gui_objects[name] = this.loaded ? rcube_find_object(id) : id;\n  };\n\n  // register a container object\n  this.gui_container = function(name, id)\n  {\n    this.gui_containers[name] = id;\n  };\n\n  // add a GUI element (html node) to a specified container\n  this.add_element = function(elm, container)\n  {\n    if (this.gui_containers[container] && this.gui_containers[container].jquery)\n      this.gui_containers[container].append(elm);\n  };\n\n  // register an external handler for a certain command\n  this.register_command = function(command, callback, enable)\n  {\n    this.command_handlers[command] = callback;\n\n    if (enable)\n      this.enable_command(command, true);\n  };\n\n  // execute the given script on load\n  this.add_onload = function(f)\n  {\n    this.onloads.push(f);\n  };\n\n  // initialize webmail client\n  this.init = function()\n  {\n    var n;\n    this.task = this.env.task;\n\n    // check browser capabilities (never use version checks here)\n    if (this.env.server_error != 409 && (!bw.dom || !bw.xmlhttp_test())) {\n      this.goto_url('error', '_code=0x199');\n      return;\n    }\n\n    if (!this.env.blankpage)\n      this.env.blankpage = this.assets_path('program/resources/blank.gif');\n\n    // find all registered gui containers\n    for (n in this.gui_containers)\n      this.gui_containers[n] = $('#'+this.gui_containers[n]);\n\n    // find all registered gui objects\n    for (n in this.gui_objects)\n      this.gui_objects[n] = rcube_find_object(this.gui_objects[n]);\n\n    // clickjacking protection\n    if (this.env.x_frame_options) {\n      try {\n        // bust frame if not allowed\n        if (this.env.x_frame_options == 'deny' && top.location.href != self.location.href)\n          top.location.href = self.location.href;\n        else if (top.location.hostname != self.location.hostname)\n          throw 1;\n      } catch (e) {\n        // possible clickjacking attack: disable all form elements\n        $('form').each(function(){ ref.lock_form(this, true); });\n        this.display_message(\"Blocked: possible clickjacking attack!\", 'error');\n        return;\n      }\n    }\n\n    // init registered buttons\n    this.init_buttons();\n\n    // tell parent window that this frame is loaded\n    if (this.is_framed()) {\n      parent.rcmail.set_busy(false, null, parent.rcmail.env.frame_lock);\n      parent.rcmail.env.frame_lock = null;\n    }\n\n    // enable general commands\n    this.enable_command('close', 'logout', 'mail', 'addressbook', 'settings', 'save-pref',\n      'compose', 'undo', 'about', 'switch-task', 'menu-open', 'menu-close', 'menu-save', true);\n\n    // set active task button\n    this.set_button(this.task, 'sel');\n\n    if (this.env.permaurl)\n      this.enable_command('permaurl', 'extwin', true);\n\n    switch (this.task) {\n\n      case 'mail':\n        // enable mail commands\n        this.enable_command('list', 'checkmail', 'add-contact', 'search', 'reset-search', 'collapse-folder', 'import-messages', true);\n\n        if (this.gui_objects.messagelist) {\n          this.message_list = new rcube_list_widget(this.gui_objects.messagelist, {\n            multiselect:true, multiexpand:true, draggable:true, keyboard:true,\n            column_movable:this.env.col_movable, dblclick_time:this.dblclick_time\n            });\n          this.message_list\n            .addEventListener('initrow', function(o) { ref.init_message_row(o); })\n            .addEventListener('dblclick', function(o) { ref.msglist_dbl_click(o); })\n            .addEventListener('click', function(o) { ref.msglist_click(o); })\n            .addEventListener('keypress', function(o) { ref.msglist_keypress(o); })\n            .addEventListener('select', function(o) { ref.msglist_select(o); })\n            .addEventListener('dragstart', function(o) { ref.drag_start(o); })\n            .addEventListener('dragmove', function(e) { ref.drag_move(e); })\n            .addEventListener('dragend', function(e) { ref.drag_end(e); })\n            .addEventListener('expandcollapse', function(o) { ref.msglist_expand(o); })\n            .addEventListener('column_replace', function(o) { ref.msglist_set_coltypes(o); })\n            .addEventListener('listupdate', function(o) { ref.triggerEvent('listupdate', o); })\n            .init();\n\n          // TODO: this should go into the list-widget code\n          $(this.message_list.thead).on('click', 'a.sortcol', function(e){\n            return ref.command('sort', $(this).attr('rel'), this);\n          });\n\n          this.enable_command('toggle_status', 'toggle_flag', 'sort', true);\n          this.enable_command('set-listmode', this.env.threads && !this.is_multifolder_listing());\n\n          // load messages\n          this.command('list');\n\n          $(this.gui_objects.qsearchbox).val(this.env.search_text).focusin(function() { ref.message_list.blur(); });\n        }\n\n        this.set_button_titles();\n\n        this.env.message_commands = ['show', 'reply', 'reply-all', 'reply-list',\n          'move', 'copy', 'delete', 'open', 'mark', 'edit', 'viewsource',\n          'print', 'load-attachment', 'download-attachment', 'show-headers', 'hide-headers', 'download',\n          'forward', 'forward-inline', 'forward-attachment', 'change-format'];\n\n        if (this.env.action == 'show' || this.env.action == 'preview') {\n          this.enable_command(this.env.message_commands, this.env.uid);\n          this.enable_command('reply-list', this.env.list_post);\n\n          if (this.env.action == 'show') {\n            this.http_request('pagenav', {_uid: this.env.uid, _mbox: this.env.mailbox, _search: this.env.search_request},\n              this.display_message('', 'loading'));\n          }\n\n          if (this.env.blockedobjects) {\n            if (this.gui_objects.remoteobjectsmsg)\n              this.gui_objects.remoteobjectsmsg.style.display = 'block';\n            this.enable_command('load-images', 'always-load', true);\n          }\n\n          // make preview/message frame visible\n          if (this.env.action == 'preview' && this.is_framed()) {\n            this.enable_command('compose', 'add-contact', false);\n            parent.rcmail.show_contentframe(true);\n          }\n\n          // initialize drag-n-drop on attachments, so they can e.g.\n          // be dropped into mail compose attachments in another window\n          if (this.gui_objects.attachments)\n            $('li > a', this.gui_objects.attachments).not('.drop').on('dragstart', function(e) {\n              var n, href = this.href, dt = e.originalEvent.dataTransfer;\n              if (dt) {\n                // inject username to the uri\n                href = href.replace(/^https?:\\/\\//, function(m) { return m + urlencode(ref.env.username) + '@'});\n                // cleanup the node to get filename without the size test\n                n = $(this).clone();\n                n.children().remove();\n\n                dt.setData('roundcube-uri', href);\n                dt.setData('roundcube-name', $.trim(n.text()));\n              }\n            });\n        }\n        else if (this.env.action == 'compose') {\n          this.env.address_group_stack = [];\n          this.env.compose_commands = ['send-attachment', 'remove-attachment', 'send', 'cancel',\n            'toggle-editor', 'list-addresses', 'pushgroup', 'search', 'reset-search', 'extwin',\n            'insert-response', 'save-response', 'menu-open', 'menu-close'];\n\n          if (this.env.drafts_mailbox)\n            this.env.compose_commands.push('savedraft')\n\n          this.enable_command(this.env.compose_commands, 'identities', 'responses', true);\n\n          // add more commands (not enabled)\n          $.merge(this.env.compose_commands, ['add-recipient', 'firstpage', 'previouspage', 'nextpage', 'lastpage']);\n\n          if (window.googie) {\n            this.env.editor_config.spellchecker = googie;\n            this.env.editor_config.spellcheck_observer = function(s) { ref.spellcheck_state(); };\n\n            this.env.compose_commands.push('spellcheck')\n            this.enable_command('spellcheck', true);\n          }\n\n          // initialize HTML editor\n          this.editor_init(this.env.editor_config, this.env.composebody);\n\n          // init canned response functions\n          if (this.gui_objects.responseslist) {\n            $('a.insertresponse', this.gui_objects.responseslist)\n              .attr('unselectable', 'on')\n              .mousedown(function(e) { return rcube_event.cancel(e); })\n              .on('mouseup keypress', function(e) {\n                if (e.type == 'mouseup' || rcube_event.get_keycode(e) == 13) {\n                  ref.command('insert-response', $(this).attr('rel'));\n                  $(document.body).trigger('mouseup');  // hides the menu\n                  return rcube_event.cancel(e);\n                }\n              });\n\n            // avoid textarea loosing focus when hitting the save-response button/link\n            $.each(this.buttons['save-response'] || [], function (i, v) {\n              $('#' + v.id).mousedown(function(e){ return rcube_event.cancel(e); })\n            });\n          }\n\n          // init message compose form\n          this.init_messageform();\n        }\n        else if (this.env.action == 'get')\n          this.enable_command('download', 'print', true);\n        // show printing dialog\n        else if (this.env.action == 'print' && this.env.uid\n          && !this.env.is_pgp_content && !this.env.pgp_mime_part\n        ) {\n          this.print_dialog();\n        }\n\n        // get unread count for each mailbox\n        if (this.gui_objects.mailboxlist) {\n          this.env.unread_counts = {};\n          this.gui_objects.folderlist = this.gui_objects.mailboxlist;\n          this.http_request('getunread', {_page: this.env.current_page});\n        }\n\n        // init address book widget\n        if (this.gui_objects.contactslist) {\n          this.contact_list = new rcube_list_widget(this.gui_objects.contactslist,\n            { multiselect:true, draggable:false, keyboard:true });\n          this.contact_list\n            .addEventListener('initrow', function(o) { ref.triggerEvent('insertrow', { cid:o.uid, row:o }); })\n            .addEventListener('select', function(o) { ref.compose_recipient_select(o); })\n            .addEventListener('dblclick', function(o) { ref.compose_add_recipient(); })\n            .addEventListener('keypress', function(o) {\n              if (o.key_pressed == o.ENTER_KEY) {\n                if (!ref.compose_add_recipient()) {\n                  // execute link action on <enter> if not a recipient entry\n                  if (o.last_selected && String(o.last_selected).charAt(0) == 'G') {\n                    $(o.rows[o.last_selected].obj).find('a').first().click();\n                  }\n                }\n              }\n            })\n            .init();\n\n          // remember last focused address field\n          $('#_to,#_cc,#_bcc').focus(function() { ref.env.focused_field = this; });\n        }\n\n        if (this.gui_objects.addressbookslist) {\n          this.gui_objects.folderlist = this.gui_objects.addressbookslist;\n          this.enable_command('list-addresses', true);\n        }\n\n        // ask user to send MDN\n        if (this.env.mdn_request && this.env.uid) {\n          var postact = 'sendmdn',\n            postdata = {_uid: this.env.uid, _mbox: this.env.mailbox};\n          if (!confirm(this.get_label('mdnrequest'))) {\n            postdata._flag = 'mdnsent';\n            postact = 'mark';\n          }\n          this.http_post(postact, postdata);\n        }\n\n        this.check_mailvelope(this.env.action);\n\n        // detect browser capabilities\n        if (!this.is_framed() && !this.env.extwin)\n          this.browser_capabilities_check();\n\n        break;\n\n      case 'addressbook':\n        this.env.address_group_stack = [];\n\n        if (this.gui_objects.folderlist)\n          this.env.contactfolders = $.extend($.extend({}, this.env.address_sources), this.env.contactgroups);\n\n        this.enable_command('add', 'import', this.env.writable_source);\n        this.enable_command('list', 'listgroup', 'pushgroup', 'popgroup', 'listsearch', 'search', 'reset-search', 'advanced-search', true);\n\n        if (this.gui_objects.contactslist) {\n          this.contact_list = new rcube_list_widget(this.gui_objects.contactslist,\n            {multiselect:true, draggable:this.gui_objects.folderlist?true:false, keyboard:true});\n          this.contact_list\n            .addEventListener('initrow', function(o) { ref.triggerEvent('insertrow', { cid:o.uid, row:o }); })\n            .addEventListener('keypress', function(o) { ref.contactlist_keypress(o); })\n            .addEventListener('select', function(o) { ref.contactlist_select(o); })\n            .addEventListener('dragstart', function(o) { ref.drag_start(o); })\n            .addEventListener('dragmove', function(e) { ref.drag_move(e); })\n            .addEventListener('dragend', function(e) { ref.drag_end(e); })\n            .init();\n\n          $(this.gui_objects.qsearchbox).focusin(function() { ref.contact_list.blur(); });\n\n          this.update_group_commands();\n          this.command('list');\n        }\n\n        if (this.gui_objects.savedsearchlist) {\n          this.savedsearchlist = new rcube_treelist_widget(this.gui_objects.savedsearchlist, {\n            id_prefix: 'rcmli',\n            id_encode: this.html_identifier_encode,\n            id_decode: this.html_identifier_decode\n          });\n\n          this.savedsearchlist.addEventListener('select', function(node) {\n            ref.triggerEvent('selectfolder', { folder:node.id, prefix:'rcmli' }); });\n        }\n\n        this.set_page_buttons();\n\n        if (this.env.cid) {\n          this.enable_command('show', 'edit', true);\n          // register handlers for group assignment via checkboxes\n          if (this.gui_objects.editform) {\n            $('input.groupmember').change(function() {\n              ref.group_member_change(this.checked ? 'add' : 'del', ref.env.cid, ref.env.source, this.value);\n            });\n          }\n        }\n\n        if (this.gui_objects.editform) {\n          this.enable_command('save', true);\n          if (this.env.action == 'add' || this.env.action == 'edit' || this.env.action == 'search')\n              this.init_contact_form();\n        }\n        else if (this.env.action == 'print') {\n          this.print_dialog();\n        }\n\n        break;\n\n      case 'settings':\n        this.enable_command('preferences', 'identities', 'responses', 'save', 'folders', true);\n\n        if (this.env.action == 'identities') {\n          this.enable_command('add', this.env.identities_level < 2);\n        }\n        else if (this.env.action == 'edit-identity' || this.env.action == 'add-identity') {\n          this.enable_command('save', 'edit', 'toggle-editor', true);\n          this.enable_command('delete', this.env.identities_level < 2);\n\n          // initialize HTML editor\n          this.editor_init(this.env.editor_config, 'rcmfd_signature');\n        }\n        else if (this.env.action == 'folders') {\n          this.enable_command('subscribe', 'unsubscribe', 'create-folder', 'rename-folder', true);\n        }\n        else if (this.env.action == 'edit-folder' && this.gui_objects.editform) {\n          this.enable_command('save', 'folder-size', true);\n          parent.rcmail.env.exists = this.env.messagecount;\n          parent.rcmail.enable_command('purge', this.env.messagecount);\n        }\n        else if (this.env.action == 'responses') {\n          this.enable_command('add', true);\n        }\n\n        if (this.gui_objects.identitieslist) {\n          this.identity_list = new rcube_list_widget(this.gui_objects.identitieslist,\n            {multiselect:false, draggable:false, keyboard:true});\n          this.identity_list\n            .addEventListener('select', function(o) { ref.identity_select(o); })\n            .addEventListener('keypress', function(o) {\n              if (o.key_pressed == o.ENTER_KEY) {\n                ref.identity_select(o);\n              }\n            })\n            .init()\n            .focus();\n        }\n        else if (this.gui_objects.sectionslist) {\n          this.sections_list = new rcube_list_widget(this.gui_objects.sectionslist, {multiselect:false, draggable:false, keyboard:true});\n          this.sections_list\n            .addEventListener('select', function(o) { ref.section_select(o); })\n            .addEventListener('keypress', function(o) { if (o.key_pressed == o.ENTER_KEY) ref.section_select(o); })\n            .init()\n            .focus();\n        }\n        else if (this.gui_objects.subscriptionlist) {\n          this.init_subscription_list();\n        }\n        else if (this.gui_objects.responseslist) {\n          this.responses_list = new rcube_list_widget(this.gui_objects.responseslist, {multiselect:false, draggable:false, keyboard:true});\n          this.responses_list\n            .addEventListener('select', function(list) {\n              var win, id = list.get_single_selection();\n              ref.enable_command('delete', !!id && $.inArray(id, ref.env.readonly_responses) < 0);\n              if (id && (win = ref.get_frame_window(ref.env.contentframe))) {\n                ref.set_busy(true);\n                ref.location_href({ _action:'edit-response', _key:id, _framed:1 }, win);\n              }\n            })\n            .init()\n            .focus();\n        }\n\n        break;\n\n      case 'login':\n        var tz, tz_name, jstz = window.jstz,\n            input_user = $('#rcmloginuser'),\n            input_tz = $('#rcmlogintz');\n\n        input_user.keyup(function(e) { return ref.login_user_keyup(e); });\n\n        if (input_user.val() == '')\n          input_user.focus();\n        else\n          $('#rcmloginpwd').focus();\n\n        // detect client timezone\n        if (jstz && (tz = jstz.determine()))\n          tz_name = tz.name();\n\n        input_tz.val(tz_name ? tz_name : (new Date().getStdTimezoneOffset() / -60));\n\n        // display 'loading' message on form submit, lock submit button\n        $('form').submit(function () {\n          $('input[type=submit]', this).prop('disabled', true);\n          ref.clear_messages();\n          ref.display_message('', 'loading');\n        });\n\n        this.enable_command('login', true);\n        break;\n    }\n\n    // select first input field in an edit form\n    if (this.gui_objects.editform)\n      $(\"input,select,textarea\", this.gui_objects.editform)\n        .not(':hidden').not(':disabled').first().select().focus();\n\n    // unset contentframe variable if preview_pane is enabled\n    if (this.env.contentframe && !$('#' + this.env.contentframe).is(':visible'))\n      this.env.contentframe = null;\n\n    // prevent from form submit with Enter key in file input fields\n    if (bw.ie)\n      $('input[type=file]').keydown(function(e) { if (e.keyCode == '13') e.preventDefault(); });\n\n    // flag object as complete\n    this.loaded = true;\n    this.env.lastrefresh = new Date();\n\n    // show message\n    if (this.pending_message)\n      this.display_message.apply(this, this.pending_message);\n\n    // init treelist widget\n    if (this.gui_objects.folderlist && window.rcube_treelist_widget\n      // some plugins may load rcube_treelist_widget and there's one case\n      // when this will cause problems - addressbook widget in compose,\n      // which already has been initialized using rcube_list_widget\n      && this.gui_objects.folderlist != this.gui_objects.addressbookslist\n    ) {\n      this.treelist = new rcube_treelist_widget(this.gui_objects.folderlist, {\n          selectable: true,\n          id_prefix: 'rcmli',\n          parent_focus: true,\n          id_encode: this.html_identifier_encode,\n          id_decode: this.html_identifier_decode,\n          check_droptarget: function(node) { return !node.virtual && ref.check_droptarget(node.id) }\n      });\n\n      this.treelist\n        .addEventListener('collapse', function(node) { ref.folder_collapsed(node) })\n        .addEventListener('expand', function(node) { ref.folder_collapsed(node) })\n        .addEventListener('beforeselect', function(node) { return !ref.busy; })\n        .addEventListener('select', function(node) { ref.triggerEvent('selectfolder', { folder:node.id, prefix:'rcmli' }) });\n    }\n\n    // activate html5 file drop feature (if browser supports it and if configured)\n    if (this.gui_objects.filedrop && this.env.filedrop && ((window.XMLHttpRequest && XMLHttpRequest.prototype && XMLHttpRequest.prototype.sendAsBinary) || window.FormData)) {\n      $(document.body).on('dragover dragleave drop', function(e) { return ref.document_drag_hover(e, e.type == 'dragover'); });\n      $(this.gui_objects.filedrop).addClass('droptarget')\n        .on('dragover dragleave', function(e) { return ref.file_drag_hover(e, e.type == 'dragover'); })\n        .get(0).addEventListener('drop', function(e) { return ref.file_dropped(e); }, false);\n    }\n\n    // catch document (and iframe) mouse clicks\n    var body_mouseup = function(e){ return ref.doc_mouse_up(e); };\n    $(document.body)\n      .mouseup(body_mouseup)\n      .keydown(function(e){ return ref.doc_keypress(e); });\n\n    $('iframe').on('load', function(e) {\n        try { $(this.contentDocument || this.contentWindow).on('mouseup', body_mouseup);  }\n        catch (e) {/* catch possible \"Permission denied\" error in IE */ }\n      })\n      .contents().on('mouseup', body_mouseup);\n\n    // trigger init event hook\n    this.triggerEvent('init', { task:this.task, action:this.env.action });\n\n    // execute all foreign onload scripts\n    // @deprecated\n    for (n in this.onloads) {\n      if (typeof this.onloads[n] === 'string')\n        eval(this.onloads[n]);\n      else if (typeof this.onloads[n] === 'function')\n        this.onloads[n]();\n    }\n\n    // start keep-alive and refresh intervals\n    this.start_refresh();\n    this.start_keepalive();\n  };\n\n  this.log = function(msg)\n  {\n    if (window.console && console.log)\n      console.log(msg);\n  };\n\n  /*********************************************************/\n  /*********       client command interface        *********/\n  /*********************************************************/\n\n  // execute a specific command on the web client\n  this.command = function(command, props, obj, event)\n  {\n    var ret, uid, cid, url, flag, aborted = false;\n\n    if (obj && obj.blur && !(event && rcube_event.is_keyboard(event)))\n      obj.blur();\n\n    // do nothing if interface is locked by another command\n    // with exception for searching reset and menu\n    if (this.busy && !(command == 'reset-search' && this.last_command == 'search') && !command.match(/^menu-/))\n      return false;\n\n    // let the browser handle this click (shift/ctrl usually opens the link in a new window/tab)\n    if ((obj && obj.href && String(obj.href).indexOf('#') < 0) && rcube_event.get_modifier(event)) {\n      return true;\n    }\n\n    // command not supported or allowed\n    if (!this.commands[command]) {\n      // pass command to parent window\n      if (this.is_framed())\n        parent.rcmail.command(command, props);\n\n      return false;\n    }\n\n    // check input before leaving compose step\n    if (this.task == 'mail' && this.env.action == 'compose' && !this.env.server_error && command != 'save-pref'\n      && $.inArray(command, this.env.compose_commands) < 0\n    ) {\n      if (!this.env.is_sent && this.cmp_hash != this.compose_field_hash() && !confirm(this.get_label('notsentwarning')))\n        return false;\n\n      // remove copy from local storage if compose screen is left intentionally\n      this.remove_compose_data(this.env.compose_id);\n      this.compose_skip_unsavedcheck = true;\n    }\n\n    this.last_command = command;\n\n    // process external commands\n    if (typeof this.command_handlers[command] === 'function') {\n      ret = this.command_handlers[command](props, obj, event);\n      return ret !== undefined ? ret : (obj ? false : true);\n    }\n    else if (typeof this.command_handlers[command] === 'string') {\n      ret = window[this.command_handlers[command]](props, obj, event);\n      return ret !== undefined ? ret : (obj ? false : true);\n    }\n\n    // trigger plugin hooks\n    this.triggerEvent('actionbefore', {props:props, action:command, originalEvent:event});\n    ret = this.triggerEvent('before'+command, props || event);\n    if (ret !== undefined) {\n      // abort if one of the handlers returned false\n      if (ret === false)\n        return false;\n      else\n        props = ret;\n    }\n\n    ret = undefined;\n\n    // process internal command\n    switch (command) {\n\n      case 'login':\n        if (this.gui_objects.loginform)\n          this.gui_objects.loginform.submit();\n        break;\n\n      // commands to switch task\n      case 'logout':\n      case 'mail':\n      case 'addressbook':\n      case 'settings':\n        this.switch_task(command);\n        break;\n\n      case 'about':\n        this.redirect('?_task=settings&_action=about', false);\n        break;\n\n      case 'permaurl':\n        if (obj && obj.href && obj.target)\n          return true;\n        else if (this.env.permaurl)\n          parent.location.href = this.env.permaurl;\n        break;\n\n      case 'extwin':\n        if (this.env.action == 'compose') {\n          var form = this.gui_objects.messageform,\n            win = this.open_window('');\n\n          if (win) {\n            this.save_compose_form_local();\n            this.compose_skip_unsavedcheck = true;\n            $(\"input[name='_action']\", form).val('compose');\n            form.action = this.url('mail/compose', { _id: this.env.compose_id, _extwin: 1 });\n            form.target = win.name;\n            form.submit();\n          }\n        }\n        else {\n          this.open_window(this.env.permaurl, true);\n        }\n        break;\n\n      case 'change-format':\n        url = this.env.permaurl + '&_format=' + props;\n\n        if (this.env.action == 'preview')\n          url = url.replace(/_action=show/, '_action=preview') + '&_framed=1';\n        if (this.env.extwin)\n          url += '&_extwin=1';\n\n        location.href = url;\n        break;\n\n      case 'menu-open':\n        if (props && props.menu == 'attachmentmenu') {\n          var mimetype = this.env.attachments[props.id];\n          this.enable_command('open-attachment', mimetype && this.env.mimetypes && $.inArray(mimetype, this.env.mimetypes) >= 0);\n        }\n        this.show_menu(props, props.show || undefined, event);\n        break;\n\n      case 'menu-close':\n        this.hide_menu(props, event);\n        break;\n\n      case 'menu-save':\n        this.triggerEvent(command, {props:props, originalEvent:event});\n        return false;\n\n      case 'open':\n        if (uid = this.get_single_uid()) {\n          obj.href = this.url('show', this.params_from_uid(uid));\n          return true;\n        }\n        break;\n\n      case 'close':\n        if (this.env.extwin)\n          window.close();\n        break;\n\n      case 'list':\n        if (props && props != '') {\n          this.reset_qsearch(true);\n        }\n        if (this.env.action == 'compose' && this.env.extwin) {\n          window.close();\n        }\n        else if (this.task == 'mail') {\n          this.list_mailbox(props);\n          this.set_button_titles();\n        }\n        else if (this.task == 'addressbook')\n          this.list_contacts(props);\n        break;\n\n      case 'set-listmode':\n        this.set_list_options(null, undefined, undefined, props == 'threads' ? 1 : 0);\n        break;\n\n      case 'sort':\n        var sort_order = this.env.sort_order,\n          sort_col = !this.env.disabled_sort_col ? props : this.env.sort_col;\n\n        if (!this.env.disabled_sort_order)\n          sort_order = this.env.sort_col == sort_col && sort_order == 'ASC' ? 'DESC' : 'ASC';\n\n        // set table header and update env\n        this.set_list_sorting(sort_col, sort_order);\n\n        // reload message list\n        this.list_mailbox('', '', sort_col+'_'+sort_order);\n        break;\n\n      case 'nextpage':\n        this.list_page('next');\n        break;\n\n      case 'lastpage':\n        this.list_page('last');\n        break;\n\n      case 'previouspage':\n        this.list_page('prev');\n        break;\n\n      case 'firstpage':\n        this.list_page('first');\n        break;\n\n      case 'expunge':\n        if (this.env.exists)\n          this.expunge_mailbox(this.env.mailbox);\n        break;\n\n      case 'purge':\n      case 'empty-mailbox':\n        if (this.env.exists)\n          this.purge_mailbox(this.env.mailbox);\n        break;\n\n      // common commands used in multiple tasks\n      case 'show':\n        if (this.task == 'mail') {\n          uid = this.get_single_uid();\n          if (uid && (!this.env.uid || uid != this.env.uid)) {\n            if (this.env.mailbox == this.env.drafts_mailbox)\n              this.open_compose_step({ _draft_uid: uid, _mbox: this.env.mailbox });\n            else\n              this.show_message(uid);\n          }\n        }\n        else if (this.task == 'addressbook') {\n          cid = props ? props : this.get_single_cid();\n          if (cid && !(this.env.action == 'show' && cid == this.env.cid))\n            this.load_contact(cid, 'show');\n        }\n        break;\n\n      case 'add':\n        if (this.task == 'addressbook')\n          this.load_contact(0, 'add');\n        else if (this.task == 'settings' && this.env.action == 'responses') {\n          var frame;\n          if ((frame = this.get_frame_window(this.env.contentframe))) {\n            this.set_busy(true);\n            this.location_href({ _action:'add-response', _framed:1 }, frame);\n          }\n        }\n        else if (this.task == 'settings') {\n          this.identity_list.clear_selection();\n          this.load_identity(0, 'add-identity');\n        }\n        break;\n\n      case 'edit':\n        if (this.task == 'addressbook' && (cid = this.get_single_cid()))\n          this.load_contact(cid, 'edit');\n        else if (this.task == 'settings' && props)\n          this.load_identity(props, 'edit-identity');\n        else if (this.task == 'mail' && (uid = this.get_single_uid())) {\n          url = { _mbox: this.get_message_mailbox(uid) };\n          url[this.env.mailbox == this.env.drafts_mailbox && props != 'new' ? '_draft_uid' : '_uid'] = uid;\n          this.open_compose_step(url);\n        }\n        break;\n\n      case 'save':\n        var input, form = this.gui_objects.editform;\n        if (form) {\n          // adv. search\n          if (this.env.action == 'search') {\n          }\n          // user prefs\n          else if ((input = $(\"input[name='_pagesize']\", form)) && input.length && isNaN(parseInt(input.val()))) {\n            alert(this.get_label('nopagesizewarning'));\n            input.focus();\n            break;\n          }\n          // contacts/identities\n          else {\n            // reload form\n            if (props == 'reload') {\n              form.action += '&_reload=1';\n            }\n            else if (this.task == 'settings' && (this.env.identities_level % 2) == 0  &&\n              (input = $(\"input[name='_email']\", form)) && input.length && !rcube_check_email(input.val())\n            ) {\n              alert(this.get_label('noemailwarning'));\n              input.focus();\n              break;\n            }\n\n            // clear empty input fields\n            $('input.placeholder').each(function(){ if (this.value == this._placeholder) this.value = ''; });\n          }\n\n          // add selected source (on the list)\n          if (parent.rcmail && parent.rcmail.env.source)\n            form.action = this.add_url(form.action, '_orig_source', parent.rcmail.env.source);\n\n          form.submit();\n        }\n        break;\n\n      case 'delete':\n        // mail task\n        if (this.task == 'mail')\n          this.delete_messages(event);\n        // addressbook task\n        else if (this.task == 'addressbook')\n          this.delete_contacts();\n        // settings: canned response\n        else if (this.task == 'settings' && this.env.action == 'responses')\n          this.delete_response();\n        // settings: user identities\n        else if (this.task == 'settings')\n          this.delete_identity();\n        break;\n\n      // mail task commands\n      case 'move':\n      case 'moveto': // deprecated\n        if (this.task == 'mail')\n          this.move_messages(props, event);\n        else if (this.task == 'addressbook')\n          this.move_contacts(props);\n        break;\n\n      case 'copy':\n        if (this.task == 'mail')\n          this.copy_messages(props, event);\n        else if (this.task == 'addressbook')\n          this.copy_contacts(props);\n        break;\n\n      case 'mark':\n        if (props)\n          this.mark_message(props);\n        break;\n\n      case 'toggle_status':\n      case 'toggle_flag':\n        flag = command == 'toggle_flag' ? 'flagged' : 'read';\n\n        if (uid = props) {\n          // toggle flagged/unflagged\n          if (flag == 'flagged') {\n            if (this.message_list.rows[uid].flagged)\n              flag = 'unflagged';\n          }\n          // toggle read/unread\n          else if (this.message_list.rows[uid].deleted)\n            flag = 'undelete';\n          else if (!this.message_list.rows[uid].unread)\n            flag = 'unread';\n\n          this.mark_message(flag, uid);\n        }\n\n        break;\n\n      case 'always-load':\n        if (this.env.uid && this.env.sender) {\n          this.add_contact(this.env.sender);\n          setTimeout(function(){ ref.command('load-images'); }, 300);\n          break;\n        }\n\n      case 'load-images':\n        if (this.env.uid)\n          this.show_message(this.env.uid, true, this.env.action=='preview');\n        break;\n\n      case 'load-attachment':\n      case 'open-attachment':\n      case 'download-attachment':\n        var qstring = '_mbox='+urlencode(this.env.mailbox)+'&_uid='+this.env.uid+'&_part='+props,\n          mimetype = this.env.attachments[props];\n\n        // open attachment in frame if it's of a supported mimetype\n        if (command != 'download-attachment' && mimetype && this.env.mimetypes && $.inArray(mimetype, this.env.mimetypes) >= 0) {\n          if (this.open_window(this.env.comm_path+'&_action=get&'+qstring+'&_frame=1'))\n            break;\n        }\n\n        this.goto_url('get', qstring+'&_download=1', false, true);\n        break;\n\n      case 'select-all':\n        this.select_all_mode = props ? false : true;\n        this.dummy_select = true; // prevent msg opening if there's only one msg on the list\n        if (props == 'invert')\n          this.message_list.invert_selection();\n        else\n          this.message_list.select_all(props == 'page' ? '' : props);\n        this.dummy_select = null;\n        break;\n\n      case 'select-none':\n        this.select_all_mode = false;\n        this.message_list.clear_selection();\n        break;\n\n      case 'expand-all':\n        this.env.autoexpand_threads = 1;\n        this.message_list.expand_all();\n        break;\n\n      case 'expand-unread':\n        this.env.autoexpand_threads = 2;\n        this.message_list.collapse_all();\n        this.expand_unread();\n        break;\n\n      case 'collapse-all':\n        this.env.autoexpand_threads = 0;\n        this.message_list.collapse_all();\n        break;\n\n      case 'nextmessage':\n        if (this.env.next_uid)\n          this.show_message(this.env.next_uid, false, this.env.action == 'preview');\n        break;\n\n      case 'lastmessage':\n        if (this.env.last_uid)\n          this.show_message(this.env.last_uid);\n        break;\n\n      case 'previousmessage':\n        if (this.env.prev_uid)\n          this.show_message(this.env.prev_uid, false, this.env.action == 'preview');\n        break;\n\n      case 'firstmessage':\n        if (this.env.first_uid)\n          this.show_message(this.env.first_uid);\n        break;\n\n      case 'compose':\n        url = {};\n\n        if (this.task == 'mail') {\n          url = {_mbox: this.env.mailbox, _search: this.env.search_request};\n          if (props)\n            url._to = props;\n        }\n        // modify url if we're in addressbook\n        else if (this.task == 'addressbook') {\n          // switch to mail compose step directly\n          if (props && props.indexOf('@') > 0) {\n            url._to = props;\n          }\n          else {\n            var a_cids = [];\n            // use contact id passed as command parameter\n            if (props)\n              a_cids.push(props);\n            // get selected contacts\n            else if (this.contact_list)\n              a_cids = this.contact_list.get_selection();\n\n            if (a_cids.length)\n              this.http_post('mailto', { _cid: a_cids.join(','), _source: this.env.source }, true);\n            else if (this.env.group)\n              this.http_post('mailto', { _gid: this.env.group, _source: this.env.source }, true);\n\n            break;\n          }\n        }\n        else if (props && typeof props == 'string') {\n          url._to = props;\n        }\n        else if (props && typeof props == 'object') {\n          $.extend(url, props);\n        }\n\n        this.open_compose_step(url);\n        break;\n\n      case 'spellcheck':\n        if (this.spellcheck_state()) {\n          this.editor.spellcheck_stop();\n        }\n        else {\n          this.editor.spellcheck_start();\n        }\n        break;\n\n      case 'savedraft':\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        // compose form did not change (and draft wasn't saved already)\n        if (this.env.draft_id && this.cmp_hash == this.compose_field_hash()) {\n          this.auto_save_start();\n          break;\n        }\n\n        this.submit_messageform(true);\n        break;\n\n      case 'send':\n        if (!props.nocheck && !this.env.is_sent && !this.check_compose_input(command))\n          break;\n\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        this.submit_messageform();\n        break;\n\n      case 'send-attachment':\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        if (!(flag = this.upload_file(props || this.gui_objects.uploadform, 'upload'))) {\n          if (flag !== false)\n            alert(this.get_label('selectimportfile'));\n          aborted = true;\n        }\n        break;\n\n      case 'insert-sig':\n        this.change_identity($(\"[name='_from']\")[0], true);\n        break;\n\n      case 'list-addresses':\n        this.list_contacts(props);\n        this.enable_command('add-recipient', false);\n        break;\n\n      case 'add-recipient':\n        this.compose_add_recipient(props);\n        break;\n\n      case 'reply-all':\n      case 'reply-list':\n      case 'reply':\n        if (uid = this.get_single_uid()) {\n          url = {_reply_uid: uid, _mbox: this.get_message_mailbox(uid), _search: this.env.search_request};\n          if (command == 'reply-all')\n            // do reply-list, when list is detected and popup menu wasn't used\n            url._all = (!props && this.env.reply_all_mode == 1 && this.commands['reply-list'] ? 'list' : 'all');\n          else if (command == 'reply-list')\n            url._all = 'list';\n\n          this.open_compose_step(url);\n        }\n        break;\n\n      case 'forward-attachment':\n      case 'forward-inline':\n      case 'forward':\n        var uids = this.env.uid ? [this.env.uid] : (this.message_list ? this.message_list.get_selection() : []);\n        if (uids.length) {\n          url = { _forward_uid: this.uids_to_list(uids), _mbox: this.env.mailbox, _search: this.env.search_request };\n          if (command == 'forward-attachment' || (!props && this.env.forward_attachment) || uids.length > 1)\n            url._attachment = 1;\n          this.open_compose_step(url);\n        }\n        break;\n\n      case 'print':\n        if (this.task == 'addressbook') {\n          if (uid = this.contact_list.get_single_selection()) {\n            url = '&_action=print&_cid=' + uid;\n            if (this.env.source)\n              url += '&_source=' + urlencode(this.env.source);\n            this.open_window(this.env.comm_path + url, true, true);\n          }\n        }\n        else if (this.env.action == 'get') {\n          this.gui_objects.messagepartframe.contentWindow.print();\n        }\n        else if (uid = this.get_single_uid()) {\n          url = this.url('print', this.params_from_uid(uid, {_safe: this.env.safemode ? 1 : 0}));\n          if (this.open_window(url, true, true)) {\n            if (this.env.action != 'show')\n              this.mark_message('read', uid);\n          }\n        }\n        break;\n\n      case 'viewsource':\n        if (uid = this.get_single_uid())\n          this.open_window(this.url('viewsource', this.params_from_uid(uid)), true, true);\n        break;\n\n      case 'download':\n        if (this.env.action == 'get') {\n          location.href = this.secure_url(location.href.replace(/_frame=/, '_download='));\n        }\n        else if (uid = this.get_single_uid()) {\n          this.goto_url('viewsource', this.params_from_uid(uid, {_save: 1}), false, true);\n        }\n        break;\n\n      // quicksearch\n      case 'search':\n        if (!props && this.gui_objects.qsearchbox)\n          props = this.gui_objects.qsearchbox.value;\n        if (props) {\n          this.qsearch(props);\n          break;\n        }\n\n      // reset quicksearch\n      case 'reset-search':\n        var n, s = this.env.search_request || this.env.qsearch;\n\n        this.reset_qsearch(true);\n        this.select_all_mode = false;\n\n        if (s && this.env.action == 'compose') {\n          if (this.contact_list)\n            this.list_contacts_clear();\n        }\n        else if (s && this.env.mailbox) {\n          this.list_mailbox(this.env.mailbox, 1);\n        }\n        else if (s && this.task == 'addressbook') {\n          if (this.env.source == '') {\n            for (n in this.env.address_sources) break;\n            this.env.source = n;\n            this.env.group = '';\n          }\n          this.list_contacts(this.env.source, this.env.group, 1);\n        }\n        break;\n\n      case 'pushgroup':\n        // add group ID to stack\n        this.env.address_group_stack.push(props.id);\n        if (obj && event)\n          rcube_event.cancel(event);\n\n      case 'listgroup':\n        this.reset_qsearch();\n        this.list_contacts(props.source, props.id);\n        break;\n\n      case 'popgroup':\n        if (this.env.address_group_stack.length > 1) {\n          this.env.address_group_stack.pop();\n          this.reset_qsearch();\n          this.list_contacts(props.source, this.env.address_group_stack[this.env.address_group_stack.length-1]);\n        }\n        break;\n\n      case 'import-messages':\n        var form = props || this.gui_objects.importform,\n          importlock = this.set_busy(true, 'importwait');\n\n        $('input[name=\"_unlock\"]', form).val(importlock);\n\n        if (!(flag = this.upload_file(form, 'import', importlock))) {\n          this.set_busy(false, null, importlock);\n          if (flag !== false)\n            alert(this.get_label('selectimportfile'));\n          aborted = true;\n        }\n        break;\n\n      case 'import':\n        if (this.env.action == 'import' && this.gui_objects.importform) {\n          var file = document.getElementById('rcmimportfile');\n          if (file && !file.value) {\n            alert(this.get_label('selectimportfile'));\n            aborted = true;\n            break;\n          }\n          this.gui_objects.importform.submit();\n          this.set_busy(true, 'importwait');\n          this.lock_form(this.gui_objects.importform, true);\n        }\n        else\n          this.goto_url('import', (this.env.source ? '_target='+urlencode(this.env.source)+'&' : ''));\n        break;\n\n      case 'export':\n        if (this.contact_list.rowcount > 0) {\n          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _search: this.env.search_request }, false, true);\n        }\n        break;\n\n      case 'export-selected':\n        if (this.contact_list.rowcount > 0) {\n          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _cid: this.contact_list.get_selection().join(',') }, false, true);\n        }\n        break;\n\n      case 'upload-photo':\n        this.upload_contact_photo(props || this.gui_objects.uploadform);\n        break;\n\n      case 'delete-photo':\n        this.replace_contact_photo('-del-');\n        break;\n\n      // user settings commands\n      case 'preferences':\n      case 'identities':\n      case 'responses':\n      case 'folders':\n        this.goto_url('settings/' + command);\n        break;\n\n      case 'undo':\n        this.http_request('undo', '', this.display_message('', 'loading'));\n        break;\n\n      // unified command call (command name == function name)\n      default:\n        var func = command.replace(/-/g, '_');\n        if (this[func] && typeof this[func] === 'function') {\n          ret = this[func](props, obj, event);\n        }\n        break;\n    }\n\n    if (!aborted && this.triggerEvent('after'+command, props) === false)\n      ret = false;\n    this.triggerEvent('actionafter', { props:props, action:command, aborted:aborted });\n\n    return ret === false ? false : obj ? false : true;\n  };\n\n  // set command(s) enabled or disabled\n  this.enable_command = function()\n  {\n    var i, n, args = Array.prototype.slice.call(arguments),\n      enable = args.pop(), cmd;\n\n    for (n=0; n<args.length; n++) {\n      cmd = args[n];\n      // argument of type array\n      if (typeof cmd === 'string') {\n        this.commands[cmd] = enable;\n        this.set_button(cmd, (enable ? 'act' : 'pas'));\n        this.triggerEvent('enable-command', {command: cmd, status: enable});\n      }\n      // push array elements into commands array\n      else {\n        for (i in cmd)\n          args.push(cmd[i]);\n      }\n    }\n  };\n\n  this.command_enabled = function(cmd)\n  {\n    return this.commands[cmd];\n  };\n\n  // lock/unlock interface\n  this.set_busy = function(a, message, id)\n  {\n    if (a && message) {\n      var msg = this.get_label(message);\n      if (msg == message)\n        msg = 'Loading...';\n\n      id = this.display_message(msg, 'loading');\n    }\n    else if (!a && id) {\n      this.hide_message(id);\n    }\n\n    this.busy = a;\n    //document.body.style.cursor = a ? 'wait' : 'default';\n\n    if (this.gui_objects.editform)\n      this.lock_form(this.gui_objects.editform, a);\n\n    return id;\n  };\n\n  // return a localized string\n  this.get_label = function(name, domain)\n  {\n    if (domain && this.labels[domain+'.'+name])\n      return this.labels[domain+'.'+name];\n    else if (this.labels[name])\n      return this.labels[name];\n    else\n      return name;\n  };\n\n  // alias for convenience reasons\n  this.gettext = this.get_label;\n\n  // switch to another application task\n  this.switch_task = function(task)\n  {\n    if (this.task === task && task != 'mail')\n      return;\n\n    var url = this.get_task_url(task);\n\n    if (task == 'mail')\n      url += '&_mbox=INBOX';\n    else if (task == 'logout' && !this.env.server_error) {\n      url = this.secure_url(url);\n      this.clear_compose_data();\n    }\n\n    this.redirect(url);\n  };\n\n  this.get_task_url = function(task, url)\n  {\n    if (!url)\n      url = this.env.comm_path;\n\n    if (url.match(/[?&]_task=[a-zA-Z0-9_-]+/))\n        return url.replace(/_task=[a-zA-Z0-9_-]+/, '_task=' + task);\n    else\n        return url.replace(/\\?.*$/, '') + '?_task=' + task;\n  };\n\n  this.reload = function(delay)\n  {\n    if (this.is_framed())\n      parent.rcmail.reload(delay);\n    else if (delay)\n      setTimeout(function() { ref.reload(); }, delay);\n    else if (window.location)\n      location.href = this.url('', {_extwin: this.env.extwin});\n  };\n\n  // Add variable to GET string, replace old value if exists\n  this.add_url = function(url, name, value)\n  {\n    value = urlencode(value);\n\n    if (/(\\?.*)$/.test(url)) {\n      var urldata = RegExp.$1,\n        datax = RegExp('((\\\\?|&)'+RegExp.escape(name)+'=[^&]*)');\n\n      if (datax.test(urldata)) {\n        urldata = urldata.replace(datax, RegExp.$2 + name + '=' + value);\n      }\n      else\n        urldata += '&' + name + '=' + value\n\n      return url.replace(/(\\?.*)$/, urldata);\n    }\n\n    return url + '?' + name + '=' + value;\n  };\n\n  // append CSRF protection token to the given url\n  this.secure_url = function(url)\n  {\n    return this.add_url(url, '_token', this.env.request_token);\n  },\n\n  this.is_framed = function()\n  {\n    return this.env.framed && parent.rcmail && parent.rcmail != this && typeof parent.rcmail.command == 'function';\n  };\n\n  this.save_pref = function(prop)\n  {\n    var request = {_name: prop.name, _value: prop.value};\n\n    if (prop.session)\n      request._session = prop.session;\n    if (prop.env)\n      this.env[prop.env] = prop.value;\n\n    this.http_post('save-pref', request);\n  };\n\n  this.html_identifier = function(str, encode)\n  {\n    return encode ? this.html_identifier_encode(str) : String(str).replace(this.identifier_expr, '_');\n  };\n\n  this.html_identifier_encode = function(str)\n  {\n    return Base64.encode(String(str)).replace(/=+$/, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  };\n\n  this.html_identifier_decode = function(str)\n  {\n    str = String(str).replace(/-/g, '+').replace(/_/g, '/');\n\n    while (str.length % 4) str += '=';\n\n    return Base64.decode(str);\n  };\n\n\n  /*********************************************************/\n  /*********        event handling methods         *********/\n  /*********************************************************/\n\n  this.drag_menu = function(e, target)\n  {\n    var modkey = rcube_event.get_modifier(e),\n      menu = this.gui_objects.dragmenu;\n\n    if (menu && modkey == SHIFT_KEY && this.commands['copy']) {\n      var pos = rcube_event.get_mouse_pos(e);\n      this.env.drag_target = target;\n      this.show_menu(this.gui_objects.dragmenu.id, true, e);\n      $(menu).css({top: (pos.y-10)+'px', left: (pos.x-10)+'px'});\n      return true;\n    }\n\n    return false;\n  };\n\n  this.drag_menu_action = function(action)\n  {\n    var menu = this.gui_objects.dragmenu;\n    if (menu) {\n      $(menu).hide();\n    }\n    this.command(action, this.env.drag_target);\n    this.env.drag_target = null;\n  };\n\n  this.drag_start = function(list)\n  {\n    this.drag_active = true;\n\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    // prepare treelist widget for dragging interactions\n    if (this.treelist)\n      this.treelist.drag_start();\n  };\n\n  this.drag_end = function(e)\n  {\n    var list, model;\n\n    if (this.treelist)\n      this.treelist.drag_end();\n\n    // execute drag & drop action when mouse was released\n    if (list = this.message_list)\n      model = this.env.mailboxes;\n    else if (list = this.contact_list)\n      model = this.env.contactfolders;\n\n    if (this.drag_active && model && this.env.last_folder_target) {\n      var target = model[this.env.last_folder_target];\n      list.draglayer.hide();\n\n      if (this.contact_list) {\n        if (!this.contacts_drag_menu(e, target))\n          this.command('move', target);\n      }\n      else if (!this.drag_menu(e, target))\n        this.command('move', target);\n    }\n\n    this.drag_active = false;\n    this.env.last_folder_target = null;\n  };\n\n  this.drag_move = function(e)\n  {\n    if (this.gui_objects.folderlist) {\n      var drag_target, oldclass,\n        layerclass = 'draglayernormal',\n        mouse = rcube_event.get_mouse_pos(e);\n\n      if (this.contact_list && this.contact_list.draglayer)\n        oldclass = this.contact_list.draglayer.attr('class');\n\n      // mouse intersects a valid drop target on the treelist\n      if (this.treelist && (drag_target = this.treelist.intersects(mouse, true))) {\n        this.env.last_folder_target = drag_target;\n        layerclass = 'draglayer' + (this.check_droptarget(drag_target) > 1 ? 'copy' : 'normal');\n      }\n      else {\n        // Clear target, otherwise drag end will trigger move into last valid droptarget\n        this.env.last_folder_target = null;\n      }\n\n      if (layerclass != oldclass && this.contact_list && this.contact_list.draglayer)\n        this.contact_list.draglayer.attr('class', layerclass);\n    }\n  };\n\n  this.collapse_folder = function(name)\n  {\n    if (this.treelist)\n      this.treelist.toggle(name);\n  };\n\n  this.folder_collapsed = function(node)\n  {\n    var prefname = this.env.task == 'addressbook' ? 'collapsed_abooks' : 'collapsed_folders',\n      old = this.env[prefname];\n\n    if (node.collapsed) {\n      this.env[prefname] = this.env[prefname] + '&'+urlencode(node.id)+'&';\n\n      // select the folder if one of its childs is currently selected\n      // don't select if it's virtual (#1488346)\n      if (!node.virtual && this.env.mailbox && this.env.mailbox.startsWith(node.id + this.env.delimiter))\n        this.command('list', node.id);\n    }\n    else {\n      var reg = new RegExp('&'+urlencode(node.id)+'&');\n      this.env[prefname] = this.env[prefname].replace(reg, '');\n    }\n\n    if (!this.drag_active) {\n      if (old !== this.env[prefname])\n        this.command('save-pref', { name: prefname, value: this.env[prefname] });\n\n      if (this.env.unread_counts)\n        this.set_unread_count_display(node.id, false);\n    }\n  };\n\n  // global mouse-click handler to cleanup some UI elements\n  this.doc_mouse_up = function(e)\n  {\n    var list, id, target = rcube_event.get_target(e);\n\n    // ignore event if jquery UI dialog is open\n    if ($(target).closest('.ui-dialog, .ui-widget-overlay').length)\n      return;\n\n    // remove focus from list widgets\n    if (window.rcube_list_widget && rcube_list_widget._instances.length) {\n      $.each(rcube_list_widget._instances, function(i,list){\n        if (list && !rcube_mouse_is_over(e, list.list.parentNode))\n          list.blur();\n      });\n    }\n\n    // reset 'pressed' buttons\n    if (this.buttons_sel) {\n      for (id in this.buttons_sel)\n        if (typeof id !== 'function')\n          this.button_out(this.buttons_sel[id], id);\n      this.buttons_sel = {};\n    }\n\n    // reset popup menus; delayed to have updated menu_stack data\n    setTimeout(function(e){\n      var obj, skip, config, id, i, parents = $(target).parents();\n      for (i = ref.menu_stack.length - 1; i >= 0; i--) {\n        id = ref.menu_stack[i];\n        obj = $('#' + id);\n\n        if (obj.is(':visible')\n          && target != obj.data('opener')\n          && target != obj.get(0)  // check if scroll bar was clicked (#1489832)\n          && !parents.is(obj.data('opener'))\n          && id != skip\n          && (obj.attr('data-editable') != 'true' || !$(target).parents('#' + id).length)\n          && (obj.attr('data-sticky') != 'true' || !rcube_mouse_is_over(e, obj.get(0)))\n        ) {\n          ref.hide_menu(id, e);\n        }\n        skip = obj.data('parent');\n      }\n    }, 10, e);\n  };\n\n  // global keypress event handler\n  this.doc_keypress = function(e)\n  {\n    // Helper method to move focus to the next/prev active menu item\n    var focus_menu_item = function(dir) {\n      var obj, item, mod = dir < 0 ? 'prevAll' : 'nextAll', limit = dir < 0 ? 'last' : 'first';\n      if (ref.focused_menu && (obj = $('#'+ref.focused_menu))) {\n        item = obj.find(':focus').closest('li')[mod](':has(:not([aria-disabled=true]))').find('a,input')[limit]();\n        if (!item.length)\n          item = obj.find(':focus').closest('ul')[mod](':has(:not([aria-disabled=true]))').find('a,input')[limit]();\n        return item.focus().length;\n      }\n\n      return 0;\n    };\n\n    var target = e.target || {},\n      keyCode = rcube_event.get_keycode(e);\n\n    // save global reference for keyboard detection on click events in IE\n    rcube_event._last_keyboard_event = e;\n\n    if (e.keyCode != 27 && (!this.menu_keyboard_active || target.nodeName == 'TEXTAREA' || target.nodeName == 'SELECT')) {\n      return true;\n    }\n\n    switch (keyCode) {\n      case 38:\n      case 40:\n      case 63232: // \"up\", in safari keypress\n      case 63233: // \"down\", in safari keypress\n        focus_menu_item(keyCode == 38 || keyCode == 63232 ? -1 : 1);\n        return rcube_event.cancel(e);\n\n      case 9:   // tab\n        if (this.focused_menu) {\n          var mod = rcube_event.get_modifier(e);\n          if (!focus_menu_item(mod == SHIFT_KEY ? -1 : 1)) {\n            this.hide_menu(this.focused_menu, e);\n          }\n        }\n        return rcube_event.cancel(e);\n\n      case 27:  // esc\n        if (this.menu_stack.length)\n          this.hide_menu(this.menu_stack[this.menu_stack.length-1], e);\n        break;\n    }\n\n    return true;\n  }\n\n  this.msglist_select = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    var selected = list.get_single_selection();\n\n    this.enable_command(this.env.message_commands, selected != null);\n    if (selected) {\n      // Hide certain command buttons when Drafts folder is selected\n      if (this.env.mailbox == this.env.drafts_mailbox)\n        this.enable_command('reply', 'reply-all', 'reply-list', 'forward', 'forward-attachment', 'forward-inline', false);\n      // Disable reply-list when List-Post header is not set\n      else {\n        var msg = this.env.messages[selected];\n        if (!msg.ml)\n          this.enable_command('reply-list', false);\n      }\n    }\n    // Multi-message commands\n    this.enable_command('delete', 'move', 'copy', 'mark', 'forward', 'forward-attachment', list.selection.length > 0);\n\n    // reset all-pages-selection\n    if (selected || (list.selection.length && list.selection.length != list.rowcount))\n      this.select_all_mode = false;\n\n    // start timer for message preview (wait for double click)\n    if (selected && this.env.contentframe && !list.multi_selecting && !this.dummy_select)\n      this.preview_timer = setTimeout(function() { ref.msglist_get_preview(); }, this.dblclick_time);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n  };\n\n  // This allow as to re-select selected message and display it in preview frame\n  this.msglist_click = function(list)\n  {\n    if (list.multi_selecting || !this.env.contentframe)\n      return;\n\n    if (list.get_single_selection())\n      return;\n\n    var win = this.get_frame_window(this.env.contentframe);\n\n    if (win && win.location.href.indexOf(this.env.blankpage) >= 0) {\n      if (this.preview_timer)\n        clearTimeout(this.preview_timer);\n      if (this.preview_read_timer)\n        clearTimeout(this.preview_read_timer);\n\n      this.preview_timer = setTimeout(function() { ref.msglist_get_preview(); }, this.dblclick_time);\n    }\n  };\n\n  this.msglist_dbl_click = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    var uid = list.get_single_selection();\n\n    if (uid && (this.env.messages[uid].mbox || this.env.mailbox) == this.env.drafts_mailbox)\n      this.open_compose_step({ _draft_uid: uid, _mbox: this.env.mailbox });\n    else if (uid)\n      this.show_message(uid, false, false);\n  };\n\n  this.msglist_keypress = function(list)\n  {\n    if (list.modkey == CONTROL_KEY)\n      return;\n\n    if (list.key_pressed == list.ENTER_KEY)\n      this.command('show');\n    else if (list.key_pressed == list.DELETE_KEY || list.key_pressed == list.BACKSPACE_KEY)\n      this.command('delete');\n    else if (list.key_pressed == 33)\n      this.command('previouspage');\n    else if (list.key_pressed == 34)\n      this.command('nextpage');\n  };\n\n  this.msglist_get_preview = function()\n  {\n    var uid = this.get_single_uid();\n    if (uid && this.env.contentframe && !this.drag_active)\n      this.show_message(uid, false, true);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n  };\n\n  this.msglist_expand = function(row)\n  {\n    if (this.env.messages[row.uid])\n      this.env.messages[row.uid].expanded = row.expanded;\n    $(row.obj)[row.expanded?'addClass':'removeClass']('expanded');\n  };\n\n  this.msglist_set_coltypes = function(list)\n  {\n    var i, found, name, cols = list.thead.rows[0].cells;\n\n    this.env.listcols = [];\n\n    for (i=0; i<cols.length; i++)\n      if (cols[i].id && cols[i].id.startsWith('rcm')) {\n        name = cols[i].id.slice(3);\n        this.env.listcols.push(name);\n      }\n\n    if ((found = $.inArray('flag', this.env.listcols)) >= 0)\n      this.env.flagged_col = found;\n\n    if ((found = $.inArray('subject', this.env.listcols)) >= 0)\n      this.env.subject_col = found;\n\n    this.command('save-pref', { name: 'list_cols', value: this.env.listcols, session: 'list_attrib/columns' });\n  };\n\n  this.check_droptarget = function(id)\n  {\n    switch (this.task) {\n      case 'mail':\n        return (this.env.mailboxes[id]\n            && !this.env.mailboxes[id].virtual\n            && (this.env.mailboxes[id].id != this.env.mailbox || this.is_multifolder_listing())) ? 1 : 0;\n\n      case 'addressbook':\n        var target;\n        if (id != this.env.source && (target = this.env.contactfolders[id])) {\n          // droptarget is a group\n          if (target.type == 'group') {\n            if (target.id != this.env.group && !this.env.contactfolders[target.source].readonly) {\n              var is_other = this.env.selection_sources.length > 1 || $.inArray(target.source, this.env.selection_sources) == -1;\n              return !is_other || this.commands.move ? 1 : 2;\n            }\n          }\n          // droptarget is a (writable) addressbook and it's not the source\n          else if (!target.readonly && (this.env.selection_sources.length > 1 || $.inArray(id, this.env.selection_sources) == -1)) {\n            return this.commands.move ? 1 : 2;\n          }\n        }\n    }\n\n    return 0;\n  };\n\n  // open popup window\n  this.open_window = function(url, small, toolbar)\n  {\n    var wname = 'rcmextwin' + new Date().getTime();\n\n    url += (url.match(/\\?/) ? '&' : '?') + '_extwin=1';\n\n    if (this.env.standard_windows)\n      var extwin = window.open(url, wname);\n    else {\n      var win = this.is_framed() ? parent.window : window,\n        page = $(win),\n        page_width = page.width(),\n        page_height = bw.mz ? $('body', win).height() : page.height(),\n        w = Math.min(small ? this.env.popup_width_small : this.env.popup_width, page_width),\n        h = page_height, // always use same height\n        l = (win.screenLeft || win.screenX) + 20,\n        t = (win.screenTop || win.screenY) + 20,\n        extwin = window.open(url, wname,\n          'width='+w+',height='+h+',top='+t+',left='+l+',resizable=yes,location=no,scrollbars=yes'\n          +(toolbar ? ',toolbar=yes,menubar=yes,status=yes' : ',toolbar=no,menubar=no,status=no'));\n    }\n\n    // detect popup blocker (#1489618)\n    // don't care this might not work with all browsers\n    if (!extwin || extwin.closed) {\n      this.display_message(this.get_label('windowopenerror'), 'warning');\n      return;\n    }\n\n    // write loading... message to empty windows\n    if (!url && extwin.document) {\n      extwin.document.write('<html><body>' + this.get_label('loading') + '</body></html>');\n    }\n\n    // allow plugins to grab the window reference (#1489413)\n    this.triggerEvent('openwindow', { url:url, handle:extwin });\n\n    // focus window, delayed to bring to front\n    setTimeout(function() { extwin && extwin.focus(); }, 10);\n\n    return extwin;\n  };\n\n\n  /*********************************************************/\n  /*********     (message) list functionality      *********/\n  /*********************************************************/\n\n  this.init_message_row = function(row)\n  {\n    var i, fn = {}, uid = row.uid,\n      status_icon = (this.env.status_col != null ? 'status' : 'msg') + 'icn' + row.id;\n\n    if (uid && this.env.messages[uid])\n      $.extend(row, this.env.messages[uid]);\n\n    // set eventhandler to status icon\n    if (row.icon = document.getElementById(status_icon)) {\n      fn.icon = function(e) { ref.command('toggle_status', uid); };\n    }\n\n    // save message icon position too\n    if (this.env.status_col != null)\n      row.msgicon = document.getElementById('msgicn'+row.id);\n    else\n      row.msgicon = row.icon;\n\n    // set eventhandler to flag icon\n    if (this.env.flagged_col != null && (row.flagicon = document.getElementById('flagicn'+row.id))) {\n      fn.flagicon = function(e) { ref.command('toggle_flag', uid); };\n    }\n\n    // set event handler to thread expand/collapse icon\n    if (!row.depth && row.has_children && (row.expando = document.getElementById('rcmexpando'+row.id))) {\n      fn.expando = function(e) { ref.expand_message_row(e, uid); };\n    }\n\n    // attach events\n    $.each(fn, function(i, f) {\n      row[i].onclick = function(e) { f(e); return rcube_event.cancel(e); };\n      if (bw.touch && row[i].addEventListener) {\n        row[i].addEventListener('touchend', function(e) {\n          if (e.changedTouches.length == 1) {\n            f(e);\n            return rcube_event.cancel(e);\n          }\n        }, false);\n      }\n    });\n\n    this.triggerEvent('insertrow', { uid:uid, row:row });\n  };\n\n  // create a table row in the message list\n  this.add_message_row = function(uid, cols, flags, attop)\n  {\n    if (!this.gui_objects.messagelist || !this.message_list)\n      return false;\n\n    // Prevent from adding messages from different folder (#1487752)\n    if (flags.mbox != this.env.mailbox && !flags.skip_mbox_check)\n      return false;\n\n    if (!this.env.messages[uid])\n      this.env.messages[uid] = {};\n\n    // merge flags over local message object\n    $.extend(this.env.messages[uid], {\n      deleted: flags.deleted?1:0,\n      replied: flags.answered?1:0,\n      unread: !flags.seen?1:0,\n      forwarded: flags.forwarded?1:0,\n      flagged: flags.flagged?1:0,\n      has_children: flags.has_children?1:0,\n      depth: flags.depth?flags.depth:0,\n      unread_children: flags.unread_children?flags.unread_children:0,\n      parent_uid: flags.parent_uid?flags.parent_uid:0,\n      selected: this.select_all_mode || this.message_list.in_selection(uid),\n      ml: flags.ml?1:0,\n      ctype: flags.ctype,\n      mbox: flags.mbox,\n      // flags from plugins\n      flags: flags.extra_flags\n    });\n\n    var c, n, col, html, css_class, label, status_class = '', status_label = '',\n      tree = '', expando = '',\n      list = this.message_list,\n      rows = list.rows,\n      message = this.env.messages[uid],\n      msg_id = this.html_identifier(uid,true),\n      row_class = 'message'\n        + (!flags.seen ? ' unread' : '')\n        + (flags.deleted ? ' deleted' : '')\n        + (flags.flagged ? ' flagged' : '')\n        + (message.selected ? ' selected' : ''),\n      row = { cols:[], style:{}, id:'rcmrow'+msg_id, uid:uid };\n\n    // message status icons\n    css_class = 'msgicon';\n    if (this.env.status_col === null) {\n      css_class += ' status';\n      if (flags.deleted) {\n        status_class += ' deleted';\n        status_label += this.get_label('deleted') + ' ';\n      }\n      else if (!flags.seen) {\n        status_class += ' unread';\n        status_label += this.get_label('unread') + ' ';\n      }\n      else if (flags.unread_children > 0) {\n        status_class += ' unreadchildren';\n      }\n    }\n    if (flags.answered) {\n      status_class += ' replied';\n      status_label += this.get_label('replied') + ' ';\n    }\n    if (flags.forwarded) {\n      status_class += ' forwarded';\n      status_label += this.get_label('forwarded') + ' ';\n    }\n\n    // update selection\n    if (message.selected && !list.in_selection(uid))\n      list.selection.push(uid);\n\n    // threads\n    if (this.env.threading) {\n      if (message.depth) {\n        // This assumes that div width is hardcoded to 15px,\n        tree += '<span id=\"rcmtab' + msg_id + '\" class=\"branch\" style=\"width:' + (message.depth * 15) + 'px;\">&nbsp;&nbsp;</span>';\n\n        if ((rows[message.parent_uid] && rows[message.parent_uid].expanded === false)\n          || ((this.env.autoexpand_threads == 0 || this.env.autoexpand_threads == 2) &&\n            (!rows[message.parent_uid] || !rows[message.parent_uid].expanded))\n        ) {\n          row.style.display = 'none';\n          message.expanded = false;\n        }\n        else\n          message.expanded = true;\n\n        row_class += ' thread expanded';\n      }\n      else if (message.has_children) {\n        if (message.expanded === undefined && (this.env.autoexpand_threads == 1 || (this.env.autoexpand_threads == 2 && message.unread_children))) {\n          message.expanded = true;\n        }\n\n        expando = '<div id=\"rcmexpando' + row.id + '\" class=\"' + (message.expanded ? 'expanded' : 'collapsed') + '\">&nbsp;&nbsp;</div>';\n        row_class += ' thread' + (message.expanded? ' expanded' : '');\n      }\n\n      if (flags.unread_children && flags.seen && !message.expanded)\n        row_class += ' unroot';\n    }\n\n    tree += '<span id=\"msgicn'+row.id+'\" class=\"'+css_class+status_class+'\" title=\"'+status_label+'\"></span>';\n    row.className = row_class;\n\n    // build subject link\n    if (cols.subject) {\n      var action  = flags.mbox == this.env.drafts_mailbox ? 'compose' : 'show',\n        uid_param = flags.mbox == this.env.drafts_mailbox ? '_draft_uid' : '_uid',\n        query = { _mbox: flags.mbox };\n      query[uid_param] = uid;\n      cols.subject = '<a href=\"' + this.url(action, query) + '\" onclick=\"return rcube_event.keyboard_only(event)\"' +\n        ' onmouseover=\"rcube_webmail.long_subject_title(this,'+(message.depth+1)+')\" tabindex=\"-1\"><span>'+cols.subject+'</span></a>';\n    }\n\n    // add each submitted col\n    for (n in this.env.listcols) {\n      c = this.env.listcols[n];\n      col = {className: String(c).toLowerCase(), events:{}};\n\n      if (this.env.coltypes[c] && this.env.coltypes[c].hidden) {\n        col.className += ' hidden';\n      }\n\n      if (c == 'flag') {\n        css_class = (flags.flagged ? 'flagged' : 'unflagged');\n        label = this.get_label(css_class);\n        html = '<span id=\"flagicn'+row.id+'\" class=\"'+css_class+'\" title=\"'+label+'\"></span>';\n      }\n      else if (c == 'attachment') {\n        label = this.get_label('withattachment');\n        if (flags.attachmentClass)\n          html = '<span class=\"'+flags.attachmentClass+'\" title=\"'+label+'\"></span>';\n        else if (/application\\/|multipart\\/(m|signed)/.test(flags.ctype))\n          html = '<span class=\"attachment\" title=\"'+label+'\"></span>';\n        else if (/multipart\\/report/.test(flags.ctype))\n          html = '<span class=\"report\"></span>';\n          else\n          html = '&nbsp;';\n      }\n      else if (c == 'status') {\n        label = '';\n        if (flags.deleted) {\n          css_class = 'deleted';\n          label = this.get_label('deleted');\n        }\n        else if (!flags.seen) {\n          css_class = 'unread';\n          label = this.get_label('unread');\n        }\n        else if (flags.unread_children > 0) {\n          css_class = 'unreadchildren';\n        }\n        else\n          css_class = 'msgicon';\n        html = '<span id=\"statusicn'+row.id+'\" class=\"'+css_class+status_class+'\" title=\"'+label+'\"></span>';\n      }\n      else if (c == 'threads')\n        html = expando;\n      else if (c == 'subject') {\n        if (bw.ie)\n          col.events.mouseover = function() { rcube_webmail.long_subject_title_ex(this); };\n        html = tree + cols[c];\n      }\n      else if (c == 'priority') {\n        if (flags.prio > 0 && flags.prio < 6) {\n          label = this.get_label('priority') + ' ' + flags.prio;\n          html = '<span class=\"prio'+flags.prio+'\" title=\"'+label+'\"></span>';\n        }\n        else\n          html = '&nbsp;';\n      }\n      else if (c == 'folder') {\n        html = '<span onmouseover=\"rcube_webmail.long_subject_title(this)\">' + cols[c] + '<span>';\n      }\n      else\n        html = cols[c];\n\n      col.innerHTML = html;\n      row.cols.push(col);\n    }\n\n    list.insert_row(row, attop);\n\n    // remove 'old' row\n    if (attop && this.env.pagesize && list.rowcount > this.env.pagesize) {\n      var uid = list.get_last_row();\n      list.remove_row(uid);\n      list.clear_selection(uid);\n    }\n  };\n\n  this.set_list_sorting = function(sort_col, sort_order)\n  {\n    var sort_old = this.env.sort_col == 'arrival' ? 'date' : this.env.sort_col,\n      sort_new = sort_col == 'arrival' ? 'date' : sort_col;\n\n    // set table header class\n    $('#rcm' + sort_old).removeClass('sorted' + this.env.sort_order.toUpperCase());\n    if (sort_new)\n      $('#rcm' + sort_new).addClass('sorted' + sort_order);\n\n    // if sorting by 'arrival' is selected, click on date column should not switch to 'date'\n    $('#rcmdate > a').prop('rel', sort_col == 'arrival' ? 'arrival' : 'date');\n\n    this.env.sort_col = sort_col;\n    this.env.sort_order = sort_order;\n  };\n\n  this.set_list_options = function(cols, sort_col, sort_order, threads)\n  {\n    var update, post_data = {};\n\n    if (sort_col === undefined)\n      sort_col = this.env.sort_col;\n    if (!sort_order)\n      sort_order = this.env.sort_order;\n\n    if (this.env.sort_col != sort_col || this.env.sort_order != sort_order) {\n      update = 1;\n      this.set_list_sorting(sort_col, sort_order);\n    }\n\n    if (this.env.threading != threads) {\n      update = 1;\n      post_data._threads = threads;\n    }\n\n    if (cols && cols.length) {\n      // make sure new columns are added at the end of the list\n      var i, idx, name, newcols = [], oldcols = this.env.listcols;\n      for (i=0; i<oldcols.length; i++) {\n        name = oldcols[i];\n        idx = $.inArray(name, cols);\n        if (idx != -1) {\n          newcols.push(name);\n          delete cols[idx];\n        }\n      }\n      for (i=0; i<cols.length; i++)\n        if (cols[i])\n          newcols.push(cols[i]);\n\n      if (newcols.join() != oldcols.join()) {\n        update = 1;\n        post_data._cols = newcols.join(',');\n      }\n    }\n\n    if (update)\n      this.list_mailbox('', '', sort_col+'_'+sort_order, post_data);\n  };\n\n  // when user double-clicks on a row\n  this.show_message = function(id, safe, preview)\n  {\n    if (!id)\n      return;\n\n    var win, target = window,\n      url = this.params_from_uid(id, {_caps: this.browser_capabilities()});\n\n    if (preview && (win = this.get_frame_window(this.env.contentframe))) {\n      target = win;\n      url._framed = 1;\n    }\n\n    if (safe)\n      url._safe = 1;\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    if (this.env.extwin)\n      url._extwin = 1;\n\n    url = this.url(preview ? 'preview': 'show', url);\n\n    if (preview && String(target.location.href).indexOf(url) >= 0) {\n      this.show_contentframe(true);\n    }\n    else {\n      if (!preview && this.env.message_extwin && !this.env.extwin)\n        this.open_window(url, true);\n      else\n        this.location_href(url, target, true);\n\n      // mark as read and change mbox unread counter\n      if (preview && this.message_list && this.message_list.rows[id] && this.message_list.rows[id].unread && this.env.preview_pane_mark_read > 0) {\n        this.preview_read_timer = setTimeout(function() {\n          ref.set_unread_message(id, ref.env.mailbox);\n          ref.http_post('mark', {_uid: id, _flag: 'read', _mbox: ref.env.mailbox, _quiet: 1});\n        }, this.env.preview_pane_mark_read * 1000);\n      }\n    }\n  };\n\n  // update message status and unread counter after marking a message as read\n  this.set_unread_message = function(id, folder)\n  {\n    var self = this;\n\n    // find window with messages list\n    if (!self.message_list)\n      self = self.opener();\n\n    if (!self && window.parent)\n      self = parent.rcmail;\n\n    if (!self || !self.message_list)\n      return;\n\n    // this may fail in multifolder mode\n    if (self.set_message(id, 'unread', false) === false)\n      self.set_message(id + '-' + folder, 'unread', false);\n\n    if (self.env.unread_counts[folder] > 0) {\n      self.env.unread_counts[folder] -= 1;\n      self.set_unread_count(folder, self.env.unread_counts[folder], folder == 'INBOX' && !self.is_multifolder_listing());\n    }\n  };\n\n  this.show_contentframe = function(show)\n  {\n    var frame, win, name = this.env.contentframe;\n\n    if (name && (frame = this.get_frame_element(name))) {\n      if (!show && (win = this.get_frame_window(name))) {\n        if (win.location.href.indexOf(this.env.blankpage) < 0) {\n          if (win.stop)\n            win.stop();\n          else // IE\n            win.document.execCommand('Stop');\n\n          win.location.href = this.env.blankpage;\n        }\n      }\n      else if (!bw.safari && !bw.konq)\n        $(frame)[show ? 'show' : 'hide']();\n    }\n\n    if (!show && this.env.frame_lock)\n      this.set_busy(false, null, this.env.frame_lock);\n  };\n\n  this.get_frame_element = function(id)\n  {\n    var frame;\n\n    if (id && (frame = document.getElementById(id)))\n      return frame;\n  };\n\n  this.get_frame_window = function(id)\n  {\n    var frame = this.get_frame_element(id);\n\n    if (frame && frame.name && window.frames)\n      return window.frames[frame.name];\n  };\n\n  this.lock_frame = function()\n  {\n    if (!this.env.frame_lock)\n      (this.is_framed() ? parent.rcmail : this).env.frame_lock = this.set_busy(true, 'loading');\n  };\n\n  // list a specific page\n  this.list_page = function(page)\n  {\n    if (page == 'next')\n      page = this.env.current_page+1;\n    else if (page == 'last')\n      page = this.env.pagecount;\n    else if (page == 'prev' && this.env.current_page > 1)\n      page = this.env.current_page-1;\n    else if (page == 'first' && this.env.current_page > 1)\n      page = 1;\n\n    if (page > 0 && page <= this.env.pagecount) {\n      this.env.current_page = page;\n\n      if (this.task == 'addressbook' || this.contact_list)\n        this.list_contacts(this.env.source, this.env.group, page);\n      else if (this.task == 'mail')\n        this.list_mailbox(this.env.mailbox, page);\n    }\n  };\n\n  // sends request to check for recent messages\n  this.checkmail = function()\n  {\n    var lock = this.set_busy(true, 'checkingmail'),\n      params = this.check_recent_params();\n\n    this.http_post('check-recent', params, lock);\n  };\n\n  // list messages of a specific mailbox using filter\n  this.filter_mailbox = function(filter)\n  {\n    if (this.filter_disabled)\n      return;\n\n    var lock = this.set_busy(true, 'searching');\n\n    this.clear_message_list();\n\n    // reset vars\n    this.env.current_page = 1;\n    this.env.search_filter = filter;\n    this.http_request('search', this.search_params(false, filter), lock);\n  };\n\n  // reload the current message listing\n  this.refresh_list = function()\n  {\n    this.list_mailbox(this.env.mailbox, this.env.current_page || 1, null, { _clear:1 }, true);\n    if (this.message_list)\n      this.message_list.clear_selection();\n  };\n\n  // list messages of a specific mailbox\n  this.list_mailbox = function(mbox, page, sort, url, update_only)\n  {\n    var win, target = window;\n\n    if (typeof url != 'object')\n      url = {};\n\n    if (!mbox)\n      mbox = this.env.mailbox ? this.env.mailbox : 'INBOX';\n\n    // add sort to url if set\n    if (sort)\n      url._sort = sort;\n\n    // folder change, reset page, search scope, etc.\n    if (this.env.mailbox != mbox) {\n      page = 1;\n      this.env.current_page = page;\n      this.env.search_scope = 'base';\n      this.select_all_mode = false;\n      this.reset_search_filter();\n    }\n    // also send search request to get the right messages\n    else if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    if (!update_only) {\n      // unselect selected messages and clear the list and message data\n      this.clear_message_list();\n\n      if (mbox != this.env.mailbox || (mbox == this.env.mailbox && !page && !sort))\n        url._refresh = 1;\n\n      this.select_folder(mbox, '', true);\n      this.unmark_folder(mbox, 'recent', '', true);\n      this.env.mailbox = mbox;\n    }\n\n    // load message list remotely\n    if (this.gui_objects.messagelist) {\n      this.list_mailbox_remote(mbox, page, url);\n      return;\n    }\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      target = win;\n      url._framed = 1;\n    }\n\n    if (this.env.uid)\n      url._uid = this.env.uid;\n\n    // load message list to target frame/window\n    if (mbox) {\n      this.set_busy(true, 'loading');\n      url._mbox = mbox;\n      if (page)\n        url._page = page;\n      this.location_href(url, target);\n    }\n  };\n\n  this.clear_message_list = function()\n  {\n    this.env.messages = {};\n\n    this.show_contentframe(false);\n    if (this.message_list)\n      this.message_list.clear(true);\n  };\n\n  // send remote request to load message list\n  this.list_mailbox_remote = function(mbox, page, url)\n  {\n    var lock = this.set_busy(true, 'loading');\n\n    if (typeof url != 'object')\n      url = {};\n    url._mbox = mbox;\n    if (page)\n      url._page = page;\n\n    this.http_request('list', url, lock);\n    this.update_state({ _mbox: mbox, _page: (page && page > 1 ? page : null) });\n  };\n\n  // removes messages that doesn't exists from list selection array\n  this.update_selection = function()\n  {\n    var list = this.message_list,\n      selected = list.selection,\n      rows = list.rows,\n      i, selection = [];\n\n    for (i in selected)\n      if (rows[selected[i]])\n        selection.push(selected[i]);\n\n    list.selection = selection;\n\n    // reset preview frame, if currently previewed message is not selected (has been removed)\n    try {\n      var win = this.get_frame_window(this.env.contentframe),\n        id = win.rcmail.env.uid;\n\n      if (id && !list.in_selection(id))\n        this.show_contentframe(false);\n    }\n    catch (e) {};\n  };\n\n  // expand all threads with unread children\n  this.expand_unread = function()\n  {\n    var r, tbody = this.message_list.tbody,\n      new_row = tbody.firstChild;\n\n    while (new_row) {\n      if (new_row.nodeType == 1 && (r = this.message_list.rows[new_row.uid]) && r.unread_children) {\n        this.message_list.expand_all(r);\n        this.set_unread_children(r.uid);\n      }\n\n      new_row = new_row.nextSibling;\n    }\n\n    return false;\n  };\n\n  // thread expanding/collapsing handler\n  this.expand_message_row = function(e, uid)\n  {\n    var row = this.message_list.rows[uid];\n\n    // handle unread_children mark\n    row.expanded = !row.expanded;\n    this.set_unread_children(uid);\n    row.expanded = !row.expanded;\n\n    this.message_list.expand_row(e, uid);\n  };\n\n  // message list expanding\n  this.expand_threads = function()\n  {\n    if (!this.env.threading || !this.env.autoexpand_threads || !this.message_list)\n      return;\n\n    switch (this.env.autoexpand_threads) {\n      case 2: this.expand_unread(); break;\n      case 1: this.message_list.expand_all(); break;\n    }\n  };\n\n  // Initializes threads indicators/expanders after list update\n  this.init_threads = function(roots, mbox)\n  {\n    // #1487752\n    if (mbox && mbox != this.env.mailbox)\n      return false;\n\n    for (var n=0, len=roots.length; n<len; n++)\n      this.add_tree_icons(roots[n]);\n    this.expand_threads();\n  };\n\n  // adds threads tree icons to the list (or specified thread)\n  this.add_tree_icons = function(root)\n  {\n    var i, l, r, n, len, pos, tmp = [], uid = [],\n      row, rows = this.message_list.rows;\n\n    if (root)\n      row = rows[root] ? rows[root].obj : null;\n    else\n      row = this.message_list.tbody.firstChild;\n\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (r.depth) {\n          for (i=tmp.length-1; i>=0; i--) {\n            len = tmp[i].length;\n            if (len > r.depth) {\n              pos = len - r.depth;\n              if (!(tmp[i][pos] & 2))\n                tmp[i][pos] = tmp[i][pos] ? tmp[i][pos]+2 : 2;\n            }\n            else if (len == r.depth) {\n              if (!(tmp[i][0] & 2))\n                tmp[i][0] += 2;\n            }\n            if (r.depth > len)\n              break;\n          }\n\n          tmp.push(new Array(r.depth));\n          tmp[tmp.length-1][0] = 1;\n          uid.push(r.uid);\n        }\n        else {\n          if (tmp.length) {\n            for (i in tmp) {\n              this.set_tree_icons(uid[i], tmp[i]);\n            }\n            tmp = [];\n            uid = [];\n          }\n          if (root && row != rows[root].obj)\n            break;\n        }\n      }\n      row = row.nextSibling;\n    }\n\n    if (tmp.length) {\n      for (i in tmp) {\n        this.set_tree_icons(uid[i], tmp[i]);\n      }\n    }\n  };\n\n  // adds tree icons to specified message row\n  this.set_tree_icons = function(uid, tree)\n  {\n    var i, divs = [], html = '', len = tree.length;\n\n    for (i=0; i<len; i++) {\n      if (tree[i] > 2)\n        divs.push({'class': 'l3', width: 15});\n      else if (tree[i] > 1)\n        divs.push({'class': 'l2', width: 15});\n      else if (tree[i] > 0)\n        divs.push({'class': 'l1', width: 15});\n      // separator div\n      else if (divs.length && !divs[divs.length-1]['class'])\n        divs[divs.length-1].width += 15;\n      else\n        divs.push({'class': null, width: 15});\n    }\n\n    for (i=divs.length-1; i>=0; i--) {\n      if (divs[i]['class'])\n        html += '<div class=\"tree '+divs[i]['class']+'\" />';\n      else\n        html += '<div style=\"width:'+divs[i].width+'px\" />';\n    }\n\n    if (html)\n      $('#rcmtab'+this.html_identifier(uid, true)).html(html);\n  };\n\n  // update parent in a thread\n  this.update_thread_root = function(uid, flag)\n  {\n    if (!this.env.threading)\n      return;\n\n    var root = this.message_list.find_root(uid);\n\n    if (uid == root)\n      return;\n\n    var p = this.message_list.rows[root];\n\n    if (flag == 'read' && p.unread_children) {\n      p.unread_children--;\n    }\n    else if (flag == 'unread' && p.has_children) {\n      // unread_children may be undefined\n      p.unread_children = p.unread_children ? p.unread_children + 1 : 1;\n    }\n    else {\n      return;\n    }\n\n    this.set_message_icon(root);\n    this.set_unread_children(root);\n  };\n\n  // update thread indicators for all messages in a thread below the specified message\n  // return number of removed/added root level messages\n  this.update_thread = function (uid)\n  {\n    if (!this.env.threading)\n      return 0;\n\n    var r, parent, count = 0,\n      rows = this.message_list.rows,\n      row = rows[uid],\n      depth = rows[uid].depth,\n      roots = [];\n\n    if (!row.depth) // root message: decrease roots count\n      count--;\n    else if (row.unread) {\n      // update unread_children for thread root\n      parent = this.message_list.find_root(uid);\n      rows[parent].unread_children--;\n      this.set_unread_children(parent);\n    }\n\n    parent = row.parent_uid;\n\n    // childrens\n    row = row.obj.nextSibling;\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (!r.depth || r.depth <= depth)\n          break;\n\n        r.depth--; // move left\n        // reset width and clear the content of a tab, icons will be added later\n        $('#rcmtab'+r.id).width(r.depth * 15).html('');\n        if (!r.depth) { // a new root\n          count++; // increase roots count\n          r.parent_uid = 0;\n          if (r.has_children) {\n            // replace 'leaf' with 'collapsed'\n            $('#'+r.id+' .leaf:first')\n              .attr('id', 'rcmexpando' + r.id)\n              .attr('class', (r.obj.style.display != 'none' ? 'expanded' : 'collapsed'))\n              .mousedown({uid: r.uid}, function(e) {\n                return ref.expand_message_row(e, e.data.uid);\n              });\n\n            r.unread_children = 0;\n            roots.push(r);\n          }\n          // show if it was hidden\n          if (r.obj.style.display == 'none')\n            $(r.obj).show();\n        }\n        else {\n          if (r.depth == depth)\n            r.parent_uid = parent;\n          if (r.unread && roots.length)\n            roots[roots.length-1].unread_children++;\n        }\n      }\n      row = row.nextSibling;\n    }\n\n    // update unread_children for roots\n    for (r=0; r<roots.length; r++)\n      this.set_unread_children(roots[r].uid);\n\n    return count;\n  };\n\n  this.delete_excessive_thread_rows = function()\n  {\n    var rows = this.message_list.rows,\n      tbody = this.message_list.tbody,\n      row = tbody.firstChild,\n      cnt = this.env.pagesize + 1;\n\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (!r.depth && cnt)\n          cnt--;\n\n        if (!cnt)\n          this.message_list.remove_row(row.uid);\n      }\n      row = row.nextSibling;\n    }\n  };\n\n  // set message icon\n  this.set_message_icon = function(uid)\n  {\n    var css_class, label = '',\n      row = this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (row.icon) {\n      css_class = 'msgicon';\n      if (row.deleted) {\n        css_class += ' deleted';\n        label += this.get_label('deleted') + ' ';\n      }\n      else if (row.unread) {\n        css_class += ' unread';\n        label += this.get_label('unread') + ' ';\n      }\n      else if (row.unread_children)\n        css_class += ' unreadchildren';\n      if (row.msgicon == row.icon) {\n        if (row.replied) {\n          css_class += ' replied';\n          label += this.get_label('replied') + ' ';\n        }\n        if (row.forwarded) {\n          css_class += ' forwarded';\n          label += this.get_label('forwarded') + ' ';\n        }\n        css_class += ' status';\n      }\n\n      $(row.icon).attr('class', css_class).attr('title', label);\n    }\n\n    if (row.msgicon && row.msgicon != row.icon) {\n      label = '';\n      css_class = 'msgicon';\n      if (!row.unread && row.unread_children) {\n        css_class += ' unreadchildren';\n      }\n      if (row.replied) {\n        css_class += ' replied';\n        label += this.get_label('replied') + ' ';\n      }\n      if (row.forwarded) {\n        css_class += ' forwarded';\n        label += this.get_label('forwarded') + ' ';\n      }\n\n      $(row.msgicon).attr('class', css_class).attr('title', label);\n    }\n\n    if (row.flagicon) {\n      css_class = (row.flagged ? 'flagged' : 'unflagged');\n      label = this.get_label(css_class);\n      $(row.flagicon).attr('class', css_class)\n        .attr('aria-label', label)\n        .attr('title', label);\n    }\n  };\n\n  // set message status\n  this.set_message_status = function(uid, flag, status)\n  {\n    var row = this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (flag == 'unread') {\n      if (row.unread != status)\n        this.update_thread_root(uid, status ? 'unread' : 'read');\n    }\n\n    if ($.inArray(flag, ['unread', 'deleted', 'replied', 'forwarded', 'flagged']) > -1)\n      row[flag] = status;\n  };\n\n  // set message row status, class and icon\n  this.set_message = function(uid, flag, status)\n  {\n    var row = this.message_list && this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (flag)\n      this.set_message_status(uid, flag, status);\n\n    if ($.inArray(flag, ['unread', 'deleted', 'flagged']) > -1)\n      $(row.obj)[row[flag] ? 'addClass' : 'removeClass'](flag);\n\n    this.set_unread_children(uid);\n    this.set_message_icon(uid);\n  };\n\n  // sets unroot (unread_children) class of parent row\n  this.set_unread_children = function(uid)\n  {\n    var row = this.message_list.rows[uid];\n\n    if (row.parent_uid)\n      return;\n\n    if (!row.unread && row.unread_children && !row.expanded)\n      $(row.obj).addClass('unroot');\n    else\n      $(row.obj).removeClass('unroot');\n  };\n\n  // copy selected messages to the specified mailbox\n  this.copy_messages = function(mbox, event)\n  {\n    if (mbox && typeof mbox === 'object')\n      mbox = mbox.id;\n    else if (!mbox)\n      return this.folder_selector(event, function(folder) { ref.command('copy', folder); });\n\n    // exit if current or no mailbox specified\n    if (!mbox || mbox == this.env.mailbox)\n      return;\n\n    var post_data = this.selection_post_data({_target_mbox: mbox});\n\n    // exit if selection is empty\n    if (!post_data._uid)\n      return;\n\n    // send request to server\n    this.http_post('copy', post_data, this.display_message(this.get_label('copyingmessage'), 'loading'));\n  };\n\n  // move selected messages to the specified mailbox\n  this.move_messages = function(mbox, event)\n  {\n    if (mbox && typeof mbox === 'object')\n      mbox = mbox.id;\n    else if (!mbox)\n      return this.folder_selector(event, function(folder) { ref.command('move', folder); });\n\n    // exit if current or no mailbox specified\n    if (!mbox || (mbox == this.env.mailbox && !this.is_multifolder_listing()))\n      return;\n\n    var lock = false, post_data = this.selection_post_data({_target_mbox: mbox});\n\n    // exit if selection is empty\n    if (!post_data._uid)\n      return;\n\n    // show wait message\n    if (this.env.action == 'show')\n      lock = this.set_busy(true, 'movingmessage');\n    else\n      this.show_contentframe(false);\n\n    // Hide message command buttons until a message is selected\n    this.enable_command(this.env.message_commands, false);\n\n    this._with_selected_messages('move', post_data, lock);\n  };\n\n  // delete selected messages from the current mailbox\n  this.delete_messages = function(event)\n  {\n    var list = this.message_list, trash = this.env.trash_mailbox;\n\n    // if config is set to flag for deletion\n    if (this.env.flag_for_deletion) {\n      this.mark_message('delete');\n      return false;\n    }\n    // if there isn't a defined trash mailbox or we are in it\n    else if (!trash || this.env.mailbox == trash)\n      this.permanently_remove_messages();\n    // we're in Junk folder and delete_junk is enabled\n    else if (this.env.delete_junk && this.env.junk_mailbox && this.env.mailbox == this.env.junk_mailbox)\n      this.permanently_remove_messages();\n    // if there is a trash mailbox defined and we're not currently in it\n    else {\n      // if shift was pressed delete it immediately\n      if ((list && list.modkey == SHIFT_KEY) || (event && rcube_event.get_modifier(event) == SHIFT_KEY)) {\n        if (confirm(this.get_label('deletemessagesconfirm')))\n          this.permanently_remove_messages();\n      }\n      else\n        this.move_messages(trash);\n    }\n\n    return true;\n  };\n\n  // delete the selected messages permanently\n  this.permanently_remove_messages = function()\n  {\n    var post_data = this.selection_post_data();\n\n    // exit if selection is empty\n    if (!post_data._uid)\n      return;\n\n    this.show_contentframe(false);\n    this._with_selected_messages('delete', post_data);\n  };\n\n  // Send a specific move/delete request with UIDs of all selected messages\n  // @private\n  this._with_selected_messages = function(action, post_data, lock)\n  {\n    var count = 0, msg,\n      remove = (action == 'delete' || !this.is_multifolder_listing());\n\n    // update the list (remove rows, clear selection)\n    if (this.message_list) {\n      var n, id, root, roots = [],\n        selection = this.message_list.get_selection();\n\n      for (n=0, len=selection.length; n<len; n++) {\n        id = selection[n];\n\n        if (this.env.threading) {\n          count += this.update_thread(id);\n          root = this.message_list.find_root(id);\n          if (root != id && $.inArray(root, roots) < 0) {\n            roots.push(root);\n          }\n        }\n        if (remove)\n          this.message_list.remove_row(id, (this.env.display_next && n == selection.length-1));\n      }\n      // make sure there are no selected rows\n      if (!this.env.display_next && remove)\n        this.message_list.clear_selection();\n      // update thread tree icons\n      for (n=0, len=roots.length; n<len; n++) {\n        this.add_tree_icons(roots[n]);\n      }\n    }\n\n    if (count < 0)\n      post_data._count = (count*-1);\n    // remove threads from the end of the list\n    else if (count > 0 && remove)\n      this.delete_excessive_thread_rows();\n\n    if (!remove)\n      post_data._refresh = 1;\n\n    if (!lock) {\n      msg = action == 'move' ? 'movingmessage' : 'deletingmessage';\n      lock = this.display_message(this.get_label(msg), 'loading');\n    }\n\n    // send request to server\n    this.http_post(action, post_data, lock);\n  };\n\n  // build post data for message delete/move/copy/flag requests\n  this.selection_post_data = function(data)\n  {\n    if (typeof(data) != 'object')\n      data = {};\n\n    data._mbox = this.env.mailbox;\n\n    if (!data._uid) {\n      var uids = this.env.uid ? [this.env.uid] : this.message_list.get_selection();\n      data._uid = this.uids_to_list(uids);\n    }\n\n    if (this.env.action)\n      data._from = this.env.action;\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      data._search = this.env.search_request;\n\n    if (this.env.display_next && this.env.next_uid)\n      data._next_uid = this.env.next_uid;\n\n    return data;\n  };\n\n  // set a specific flag to one or more messages\n  this.mark_message = function(flag, uid)\n  {\n    var a_uids = [], r_uids = [], len, n, id,\n      list = this.message_list;\n\n    if (uid)\n      a_uids[0] = uid;\n    else if (this.env.uid)\n      a_uids[0] = this.env.uid;\n    else if (list)\n      a_uids = list.get_selection();\n\n    if (!list)\n      r_uids = a_uids;\n    else {\n      list.focus();\n      for (n=0, len=a_uids.length; n<len; n++) {\n        id = a_uids[n];\n        if ((flag == 'read' && list.rows[id].unread)\n            || (flag == 'unread' && !list.rows[id].unread)\n            || (flag == 'delete' && !list.rows[id].deleted)\n            || (flag == 'undelete' && list.rows[id].deleted)\n            || (flag == 'flagged' && !list.rows[id].flagged)\n            || (flag == 'unflagged' && list.rows[id].flagged))\n        {\n          r_uids.push(id);\n        }\n      }\n    }\n\n    // nothing to do\n    if (!r_uids.length && !this.select_all_mode)\n      return;\n\n    switch (flag) {\n        case 'read':\n        case 'unread':\n          this.toggle_read_status(flag, r_uids);\n          break;\n        case 'delete':\n        case 'undelete':\n          this.toggle_delete_status(r_uids);\n          break;\n        case 'flagged':\n        case 'unflagged':\n          this.toggle_flagged_status(flag, a_uids);\n          break;\n    }\n  };\n\n  // set class to read/unread\n  this.toggle_read_status = function(flag, a_uids)\n  {\n    var i, len = a_uids.length,\n      post_data = this.selection_post_data({_uid: this.uids_to_list(a_uids), _flag: flag}),\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    // mark all message rows as read/unread\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'unread', (flag == 'unread' ? true : false));\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  // set image to flagged or unflagged\n  this.toggle_flagged_status = function(flag, a_uids)\n  {\n    var i, len = a_uids.length,\n      post_data = this.selection_post_data({_uid: this.uids_to_list(a_uids), _flag: flag}),\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    // mark all message rows as flagged/unflagged\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'flagged', (flag == 'flagged' ? true : false));\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  // mark all message rows as deleted/undeleted\n  this.toggle_delete_status = function(a_uids)\n  {\n    var len = a_uids.length,\n      i, uid, all_deleted = true,\n      rows = this.message_list ? this.message_list.rows : {};\n\n    if (len == 1) {\n      if (!this.message_list || (rows[a_uids[0]] && !rows[a_uids[0]].deleted))\n        this.flag_as_deleted(a_uids);\n      else\n        this.flag_as_undeleted(a_uids);\n\n      return true;\n    }\n\n    for (i=0; i<len; i++) {\n      uid = a_uids[i];\n      if (rows[uid] && !rows[uid].deleted) {\n        all_deleted = false;\n        break;\n      }\n    }\n\n    if (all_deleted)\n      this.flag_as_undeleted(a_uids);\n    else\n      this.flag_as_deleted(a_uids);\n\n    return true;\n  };\n\n  this.flag_as_undeleted = function(a_uids)\n  {\n    var i, len = a_uids.length,\n      post_data = this.selection_post_data({_uid: this.uids_to_list(a_uids), _flag: 'undelete'}),\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'deleted', false);\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  this.flag_as_deleted = function(a_uids)\n  {\n    var r_uids = [],\n      post_data = this.selection_post_data({_uid: this.uids_to_list(a_uids), _flag: 'delete'}),\n      lock = this.display_message(this.get_label('markingmessage'), 'loading'),\n      rows = this.message_list ? this.message_list.rows : {},\n      count = 0;\n\n    for (var i=0, len=a_uids.length; i<len; i++) {\n      uid = a_uids[i];\n      if (rows[uid]) {\n        if (rows[uid].unread)\n          r_uids[r_uids.length] = uid;\n\n        if (this.env.skip_deleted) {\n          count += this.update_thread(uid);\n          this.message_list.remove_row(uid, (this.env.display_next && i == this.message_list.selection.length-1));\n        }\n        else\n          this.set_message(uid, 'deleted', true);\n      }\n    }\n\n    // make sure there are no selected rows\n    if (this.env.skip_deleted && this.message_list) {\n      if (!this.env.display_next)\n        this.message_list.clear_selection();\n      if (count < 0)\n        post_data._count = (count*-1);\n      else if (count > 0)\n        // remove threads from the end of the list\n        this.delete_excessive_thread_rows();\n    }\n\n    // set of messages to mark as seen\n    if (r_uids.length)\n      post_data._ruid = this.uids_to_list(r_uids);\n\n    if (this.env.skip_deleted && this.env.display_next && this.env.next_uid)\n      post_data._next_uid = this.env.next_uid;\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  // flag as read without mark request (called from backend)\n  // argument should be a coma-separated list of uids\n  this.flag_deleted_as_read = function(uids)\n  {\n    var uid, i, len,\n      rows = this.message_list ? this.message_list.rows : {};\n\n    if (typeof uids == 'string')\n      uids = uids.split(',');\n\n    for (i=0, len=uids.length; i<len; i++) {\n      uid = uids[i];\n      if (rows[uid])\n        this.set_message(uid, 'unread', false);\n    }\n  };\n\n  // Converts array of message UIDs to comma-separated list for use in URL\n  // with select_all mode checking\n  this.uids_to_list = function(uids)\n  {\n    return this.select_all_mode ? '*' : (uids.length <= 1 ? uids.join(',') : uids);\n  };\n\n  // Sets title of the delete button\n  this.set_button_titles = function()\n  {\n    var label = 'deletemessage';\n\n    if (!this.env.flag_for_deletion\n      && this.env.trash_mailbox && this.env.mailbox != this.env.trash_mailbox\n      && (!this.env.delete_junk || !this.env.junk_mailbox || this.env.mailbox != this.env.junk_mailbox)\n    )\n      label = 'movemessagetotrash';\n\n    this.set_alttext('delete', label);\n  };\n\n  // Initialize input element for list page jump\n  this.init_pagejumper = function(element)\n  {\n    $(element).addClass('rcpagejumper')\n      .on('focus', function(e) {\n        // create and display popup with page selection\n        var i, html = '';\n\n        for (i = 1; i <= ref.env.pagecount; i++)\n          html += '<li>' + i + '</li>';\n\n        html = '<ul class=\"toolbarmenu\">' + html + '</ul>';\n\n        if (!ref.pagejump) {\n          ref.pagejump = $('<div id=\"pagejump-selector\" class=\"popupmenu\"></div>')\n            .appendTo(document.body)\n            .on('click', 'li', function() {\n              if (!ref.busy)\n                $(element).val($(this).text()).change();\n            });\n        }\n\n        if (ref.pagejump.data('count') != i)\n          ref.pagejump.html(html);\n\n        ref.pagejump.attr('rel', '#' + this.id).data('count', i);\n\n        // display page selector\n        ref.show_menu('pagejump-selector', true, e);\n        $(this).keydown();\n      })\n      // keyboard navigation\n      .on('keydown keyup click', function(e) {\n        var current, selector = $('#pagejump-selector'),\n          ul = $('ul', selector),\n          list = $('li', ul),\n          height = ul.height(),\n          p = parseInt(this.value);\n\n        if (e.which != 27 && e.which != 9 && e.which != 13 && !selector.is(':visible'))\n          return ref.show_menu('pagejump-selector', true, e);\n\n        if (e.type == 'keydown') {\n          // arrow-down\n          if (e.which == 40) {\n            if (list.length > p)\n              this.value = (p += 1);\n          }\n          // arrow-up\n          else if (e.which == 38) {\n            if (p > 1 && list.length > p - 1)\n              this.value = (p -= 1);\n          }\n          // enter\n          else if (e.which == 13) {\n            return $(this).change();\n          }\n          // esc, tab\n          else if (e.which == 27 || e.which == 9) {\n            return $(element).val(ref.env.current_page);\n          }\n        }\n\n        $('li.selected', ul).removeClass('selected');\n\n        if ((current = $(list[p - 1])).length) {\n          current.addClass('selected');\n          $('#pagejump-selector').scrollTop(((ul.height() / list.length) * (p - 1)) - selector.height() / 2);\n        }\n      })\n      .on('change', function(e) {\n        // go to specified page\n        var p = parseInt(this.value);\n        if (p && p != ref.env.current_page && !ref.busy) {\n          ref.hide_menu('pagejump-selector');\n          ref.list_page(p);\n        }\n      });\n  };\n\n  // Update page-jumper state on list updates\n  this.update_pagejumper = function()\n  {\n    $('input.rcpagejumper').val(this.env.current_page).prop('disabled', this.env.pagecount < 2);\n  };\n\n  // check for mailvelope API\n  this.check_mailvelope = function(action)\n  {\n    if (typeof window.mailvelope !== 'undefined') {\n      this.mailvelope_load(action);\n    }\n    else {\n      $(window).on('mailvelope', function() {\n        ref.mailvelope_load(action);\n      });\n    }\n  };\n\n  // Load Mailvelope functionality (and initialize keyring if needed)\n  this.mailvelope_load = function(action)\n  {\n    if (this.env.browser_capabilities)\n      this.env.browser_capabilities['pgpmime'] = 1;\n\n    var keyring = this.env.user_id;\n\n    mailvelope.getKeyring(keyring).then(function(kr) {\n      ref.mailvelope_keyring = kr;\n      ref.mailvelope_init(action, kr);\n    }, function(err) {\n      // attempt to create a new keyring for this app/user\n      mailvelope.createKeyring(keyring).then(function(kr) {\n        ref.mailvelope_keyring = kr;\n        ref.mailvelope_init(action, kr);\n      }, function(err) {\n        console.error(err);\n      });\n    });\n  };\n\n  // Initializes Mailvelope editor or display container\n  this.mailvelope_init = function(action, keyring)\n  {\n    if (!window.mailvelope)\n      return;\n\n    if (action == 'show' || action == 'preview' || action == 'print') {\n      // decrypt text body\n      if (this.env.is_pgp_content) {\n        var data = $(this.env.is_pgp_content).text();\n        ref.mailvelope_display_container(this.env.is_pgp_content, data, keyring);\n      }\n      // load pgp/mime message and pass it to the mailvelope display container\n      else if (this.env.pgp_mime_part) {\n        var msgid = this.display_message(this.get_label('loadingdata'), 'loading'),\n          selector = this.env.pgp_mime_container;\n\n        $.ajax({\n          type: 'GET',\n          url: this.url('get', { '_mbox': this.env.mailbox, '_uid': this.env.uid, '_part': this.env.pgp_mime_part }),\n          error: function(o, status, err) {\n            ref.http_error(o, status, err, msgid);\n          },\n          success: function(data) {\n            ref.mailvelope_display_container(selector, data, keyring, msgid);\n          }\n        });\n      }\n    }\n    else if (action == 'compose') {\n      this.env.compose_commands.push('compose-encrypted');\n\n      var is_html = $('input[name=\"_is_html\"]').val() > 0;\n\n      if (this.env.pgp_mime_message) {\n        // fetch PGP/Mime part and open load into Mailvelope editor\n        var lock = this.set_busy(true, this.get_label('loadingdata'));\n\n        $.ajax({\n          type: 'GET',\n          url: this.url('get', this.env.pgp_mime_message),\n          error: function(o, status, err) {\n            ref.http_error(o, status, err, lock);\n            ref.enable_command('compose-encrypted', !is_html);\n          },\n          success: function(data) {\n            ref.set_busy(false, null, lock);\n\n            if (is_html) {\n              ref.command('toggle-editor', {html: false, noconvert: true});\n              $('#' + ref.env.composebody).val('');\n            }\n\n            ref.compose_encrypted({ quotedMail: data });\n            ref.enable_command('compose-encrypted', true);\n          }\n        });\n      }\n      else {\n        // enable encrypted compose toggle\n        this.enable_command('compose-encrypted', !is_html);\n      }\n    }\n  };\n\n  // handler for the 'compose-encrypted' command\n  this.compose_encrypted = function(props)\n  {\n    var options, container = $('#' + this.env.composebody).parent();\n\n    // remove Mailvelope editor if active\n    if (ref.mailvelope_editor) {\n      ref.mailvelope_editor = null;\n      ref.compose_skip_unsavedcheck = false;\n      ref.set_button('compose-encrypted', 'act');\n\n      container.removeClass('mailvelope')\n        .find('iframe:not([aria-hidden=true])').remove();\n      $('#' + ref.env.composebody).show();\n      $(\"[name='_pgpmime']\").remove();\n\n      // disable commands that operate on the compose body\n      ref.enable_command('spellcheck', 'insert-sig', 'toggle-editor', 'insert-response', 'save-response', true);\n      ref.triggerEvent('compose-encrypted', { active:false });\n    }\n    // embed Mailvelope editor container\n    else {\n      if (this.spellcheck_state())\n        this.editor.spellcheck_stop();\n\n      if (props.quotedMail) {\n        options = { quotedMail: props.quotedMail, quotedMailIndent: false };\n      }\n      else {\n        options = { predefinedText: $('#' + this.env.composebody).val() };\n      }\n\n      if (this.env.compose_mode == 'reply') {\n        options.quotedMailIndent = true;\n        options.quotedMailHeader = this.env.compose_reply_header;\n      }\n\n      mailvelope.createEditorContainer('#' + container.attr('id'), ref.mailvelope_keyring, options).then(function(editor) {\n        ref.mailvelope_editor = editor;\n        ref.compose_skip_unsavedcheck = true;\n        ref.set_button('compose-encrypted', 'sel');\n\n        container.addClass('mailvelope');\n        $('#' + ref.env.composebody).hide();\n\n        // disable commands that operate on the compose body\n        ref.enable_command('spellcheck', 'insert-sig', 'toggle-editor', 'insert-response', 'save-response', false);\n        ref.triggerEvent('compose-encrypted', { active:true });\n\n        // notify user about loosing attachments\n        if (ref.env.attachments && !$.isEmptyObject(ref.env.attachments)) {\n          alert(ref.get_label('encryptnoattachments'));\n\n          $.each(ref.env.attachments, function(name, attach) {\n            ref.remove_from_attachment_list(name);\n          });\n        }\n      }, function(err) {\n        console.error(err);\n        console.log(options);\n      });\n    }\n  };\n\n  // callback to replace the message body with the full armored\n  this.mailvelope_submit_messageform = function(draft, saveonly)\n  {\n    // get recipients\n    var recipients = [];\n    $.each(['to', 'cc', 'bcc'], function(i,field) {\n      var pos, rcpt, val = $.trim($('[name=\"_' + field + '\"]').val());\n      while (val.length && rcube_check_email(val, true)) {\n        rcpt = RegExp.$2;\n        recipients.push(rcpt);\n        val = val.substr(val.indexOf(rcpt) + rcpt.length + 1).replace(/^\\s*,\\s*/, '');\n      }\n    });\n\n    // check if we have keys for all recipients\n    var isvalid = recipients.length > 0;\n    ref.mailvelope_keyring.validKeyForAddress(recipients).then(function(status) {\n      var missing_keys = [];\n      $.each(status, function(k,v) {\n        if (v === false) {\n          isvalid = false;\n          missing_keys.push(k);\n        }\n      });\n\n      // list recipients with missing keys\n      if (!isvalid && missing_keys.length) {\n        // load publickey.js\n        if (!$('script#publickeyjs').length) {\n          $('<script>')\n            .attr('id', 'publickeyjs')\n            .attr('src', ref.assets_path('program/js/publickey.js'))\n            .appendTo(document.body);\n        }\n\n        // display dialog with missing keys\n        ref.show_popup_dialog(\n          ref.get_label('nopubkeyfor').replace('$email', missing_keys.join(', ')) +\n          '<p>' + ref.get_label('searchpubkeyservers') + '</p>',\n          ref.get_label('encryptedsendialog'),\n          [{\n            text: ref.get_label('search'),\n            'class': 'mainaction',\n            click: function() {\n              var $dialog = $(this);\n              ref.mailvelope_search_pubkeys(missing_keys, function() {\n                $dialog.dialog('close')\n              });\n            }\n          },\n          {\n            text: ref.get_label('cancel'),\n            click: function(){\n              $(this).dialog('close');\n            }\n          }]\n        );\n        return false;\n      }\n\n      if (!isvalid) {\n        if (!recipients.length) {\n          alert(ref.get_label('norecipientwarning'));\n          $(\"[name='_to']\").focus();\n        }\n        return false;\n      }\n\n      // add sender identity to recipients to be able to decrypt our very own message\n      var senders = [], selected_sender = ref.env.identities[$(\"[name='_from'] option:selected\").val()];\n      $.each(ref.env.identities, function(k, sender) {\n        senders.push(sender.email);\n      });\n\n      ref.mailvelope_keyring.validKeyForAddress(senders).then(function(status) {\n        valid_sender = null;\n        $.each(status, function(k,v) {\n          if (v !== false) {\n            valid_sender = k;\n            if (valid_sender == selected_sender) {\n              return false;  // break\n            }\n          }\n        });\n\n        if (!valid_sender) {\n          if (!confirm(ref.get_label('nopubkeyforsender'))) {\n            return false;\n          }\n        }\n\n        recipients.push(valid_sender);\n\n        ref.mailvelope_editor.encrypt(recipients).then(function(armored) {\n          // all checks passed, send message\n          var form = ref.gui_objects.messageform,\n            hidden = $(\"[name='_pgpmime']\", form),\n            msgid = ref.set_busy(true, draft || saveonly ? 'savingmessage' : 'sendingmessage')\n\n          form.target = 'savetarget';\n          form._draft.value = draft ? '1' : '';\n          form.action = ref.add_url(form.action, '_unlock', msgid);\n          form.action = ref.add_url(form.action, '_framed', 1);\n\n          if (saveonly) {\n            form.action = ref.add_url(form.action, '_saveonly', 1);\n          }\n\n          // send pgp conent via hidden field\n          if (!hidden.length) {\n            hidden = $('<input type=\"hidden\" name=\"_pgpmime\">').appendTo(form);\n          }\n          hidden.val(armored);\n\n          form.submit();\n\n        }, function(err) {\n          console.log(err);\n        });  // mailvelope_editor.encrypt()\n\n      }, function(err) {\n        console.error(err);\n      });  // mailvelope_keyring.validKeyForAddress(senders)\n\n    }, function(err) {\n      console.error(err);\n    });  // mailvelope_keyring.validKeyForAddress(recipients)\n\n    return false;\n  };\n\n  // wrapper for the mailvelope.createDisplayContainer API call\n  this.mailvelope_display_container = function(selector, data, keyring, msgid)\n  {\n    mailvelope.createDisplayContainer(selector, data, keyring, { showExternalContent: this.env.safemode }).then(function() {\n      $(selector).addClass('mailvelope').children().not('iframe').hide();\n      ref.hide_message(msgid);\n      setTimeout(function() { $(window).resize(); }, 10);\n    }, function(err) {\n      console.error(err);\n      ref.hide_message(msgid);\n      ref.display_message('Message decryption failed: ' + err.message, 'error')\n    });\n  };\n\n  // subroutine to query keyservers for public keys\n  this.mailvelope_search_pubkeys = function(emails, resolve)\n  {\n    // query with publickey.js\n    var deferreds = [],\n      pk = new PublicKey(),\n      lock = ref.display_message(ref.get_label('loading'), 'loading');\n\n    $.each(emails, function(i, email) {\n      var d = $.Deferred();\n      pk.search(email, function(results, errorCode) {\n        if (errorCode !== null) {\n          // rejecting would make all fail\n          // d.reject(email);\n          d.resolve([email]);\n        }\n        else {\n          d.resolve([email].concat(results));\n        }\n      });\n      deferreds.push(d);\n    });\n\n    $.when.apply($, deferreds).then(function() {\n      var missing_keys = [],\n        key_selection = [];\n\n      // alanyze results of all queries\n      $.each(arguments, function(i, result) {\n        var email = result.shift();\n        if (!result.length) {\n          missing_keys.push(email);\n        }\n        else {\n          key_selection = key_selection.concat(result);\n        }\n      });\n\n      ref.hide_message(lock);\n      resolve(true);\n\n      // show key import dialog\n      if (key_selection.length) {\n        ref.mailvelope_key_import_dialog(key_selection);\n      }\n      // some keys could not be found\n      if (missing_keys.length) {\n        ref.display_message(ref.get_label('nopubkeyfor').replace('$email', missing_keys.join(', ')), 'warning');\n      }\n    }).fail(function() {\n      console.error('Pubkey lookup failed with', arguments);\n      ref.hide_message(lock);\n      ref.display_message('pubkeysearcherror', 'error');\n      resolve(false);\n    });\n  };\n\n  // list the given public keys in a dialog with options to import\n  // them into the local Maivelope keyring\n  this.mailvelope_key_import_dialog = function(candidates)\n  {\n    var ul = $('<div>').addClass('listing mailvelopekeyimport');\n    $.each(candidates, function(i, keyrec) {\n      var li = $('<div>').addClass('key');\n      if (keyrec.revoked)  li.addClass('revoked');\n      if (keyrec.disabled) li.addClass('disabled');\n      if (keyrec.expired)  li.addClass('expired');\n\n      li.append($('<label>').addClass('keyid').text(ref.get_label('keyid')));\n      li.append($('<a>').text(keyrec.keyid.substr(-8).toUpperCase())\n        .attr('href', keyrec.info)\n        .attr('target', '_blank')\n        .attr('tabindex', '-1'));\n\n      li.append($('<label>').addClass('keylen').text(ref.get_label('keylength')));\n      li.append($('<span>').text(keyrec.keylen));\n\n      if (keyrec.expirationdate) {\n        li.append($('<label>').addClass('keyexpired').text(ref.get_label('keyexpired')));\n        li.append($('<span>').text(new Date(keyrec.expirationdate * 1000).toDateString()));\n      }\n\n      if (keyrec.revoked) {\n        li.append($('<span>').addClass('keyrevoked').text(ref.get_label('keyrevoked')));\n      }\n\n      var ul_ = $('<ul>').addClass('uids');\n      $.each(keyrec.uids, function(j, uid) {\n        var li_ = $('<li>').addClass('uid');\n        if (uid.revoked)  li_.addClass('revoked');\n        if (uid.disabled) li_.addClass('disabled');\n        if (uid.expired)  li_.addClass('expired');\n\n        ul_.append(li_.text(uid.uid));\n      });\n\n      li.append(ul_);\n      li.append($('<input>')\n        .attr('type', 'button')\n        .attr('rel', keyrec.keyid)\n        .attr('value', ref.get_label('import'))\n        .addClass('button importkey')\n        .prop('disabled', keyrec.revoked || keyrec.disabled || keyrec.expired));\n\n      ul.append(li);\n    });\n\n    // display dialog with missing keys\n    ref.show_popup_dialog(\n      $('<div>')\n        .append($('<p>').html(ref.get_label('encryptpubkeysfound')))\n        .append(ul),\n      ref.get_label('importpubkeys'),\n      [{\n        text: ref.get_label('close'),\n        click: function(){\n          $(this).dialog('close');\n        }\n      }]\n    );\n\n    // delegate handler for import button clicks\n    ul.on('click', 'input.button.importkey', function() {\n      var btn = $(this),\n        keyid = btn.attr('rel'),\n        pk = new PublicKey(),\n        lock = ref.display_message(ref.get_label('loading'), 'loading');\n\n        // fetch from keyserver and import to Mailvelope keyring\n        pk.get(keyid, function(armored, errorCode) {\n          ref.hide_message(lock);\n\n          if (errorCode) {\n            ref.display_message(ref.get_label('keyservererror'), 'error');\n            return;\n          }\n\n          // import to keyring\n          ref.mailvelope_keyring.importPublicKey(armored).then(function(status) {\n            if (status === 'REJECTED') {\n              // alert(ref.get_label('Key import was rejected'));\n            }\n            else {\n              var $key = keyid.substr(-8).toUpperCase();\n              btn.closest('.key').fadeOut();\n              ref.display_message(ref.get_label('keyimportsuccess').replace('$key', $key), 'confirmation');\n            }\n          }, function(err) {\n            console.log(err);\n          });\n        });\n    });\n\n  };\n\n\n  /*********************************************************/\n  /*********       mailbox folders methods         *********/\n  /*********************************************************/\n\n  this.expunge_mailbox = function(mbox)\n  {\n    var lock, post_data = {_mbox: mbox};\n\n    // lock interface if it's the active mailbox\n    if (mbox == this.env.mailbox) {\n      lock = this.set_busy(true, 'loading');\n      post_data._reload = 1;\n      if (this.env.search_request)\n        post_data._search = this.env.search_request;\n    }\n\n    // send request to server\n    this.http_post('expunge', post_data, lock);\n  };\n\n  this.purge_mailbox = function(mbox)\n  {\n    var lock, post_data = {_mbox: mbox};\n\n    if (!confirm(this.get_label('purgefolderconfirm')))\n      return false;\n\n    // lock interface if it's the active mailbox\n    if (mbox == this.env.mailbox) {\n       lock = this.set_busy(true, 'loading');\n       post_data._reload = 1;\n     }\n\n    // send request to server\n    this.http_post('purge', post_data, lock);\n  };\n\n  // test if purge command is allowed\n  this.purge_mailbox_test = function()\n  {\n    return (this.env.exists && (\n      this.env.mailbox == this.env.trash_mailbox\n      || this.env.mailbox == this.env.junk_mailbox\n      || this.env.mailbox.startsWith(this.env.trash_mailbox + this.env.delimiter)\n      || this.env.mailbox.startsWith(this.env.junk_mailbox + this.env.delimiter)\n    ));\n  };\n\n\n  /*********************************************************/\n  /*********           login form methods          *********/\n  /*********************************************************/\n\n  // handler for keyboard events on the _user field\n  this.login_user_keyup = function(e)\n  {\n    var key = rcube_event.get_keycode(e),\n      passwd = $('#rcmloginpwd');\n\n    // enter\n    if (key == 13 && passwd.length && !passwd.val()) {\n      passwd.focus();\n      return rcube_event.cancel(e);\n    }\n\n    return true;\n  };\n\n\n  /*********************************************************/\n  /*********        message compose methods        *********/\n  /*********************************************************/\n\n  this.open_compose_step = function(p)\n  {\n    var url = this.url('mail/compose', p);\n\n    // open new compose window\n    if (this.env.compose_extwin && !this.env.extwin) {\n      this.open_window(url);\n    }\n    else {\n      this.redirect(url);\n      if (this.env.extwin)\n        window.resizeTo(Math.max(this.env.popup_width, $(window).width()), $(window).height() + 24);\n    }\n  };\n\n  // init message compose form: set focus and eventhandlers\n  this.init_messageform = function()\n  {\n    if (!this.gui_objects.messageform)\n      return false;\n\n    var i, elem, pos, input_from = $(\"[name='_from']\"),\n      input_to = $(\"[name='_to']\"),\n      input_subject = $(\"input[name='_subject']\"),\n      input_message = $(\"[name='_message']\").get(0),\n      html_mode = $(\"input[name='_is_html']\").val() == '1',\n      ac_fields = ['cc', 'bcc', 'replyto', 'followupto'],\n      ac_props, opener_rc = this.opener();\n\n    // close compose step in opener\n    if (opener_rc && opener_rc.env.action == 'compose') {\n      setTimeout(function(){\n        if (opener.history.length > 1)\n          opener.history.back();\n        else\n          opener_rc.redirect(opener_rc.get_task_url('mail'));\n      }, 100);\n      this.env.opened_extwin = true;\n    }\n\n    // configure parallel autocompletion\n    if (this.env.autocomplete_threads > 0) {\n      ac_props = {\n        threads: this.env.autocomplete_threads,\n        sources: this.env.autocomplete_sources\n      };\n    }\n\n    // init live search events\n    this.init_address_input_events(input_to, ac_props);\n    for (i in ac_fields) {\n      this.init_address_input_events($(\"[name='_\"+ac_fields[i]+\"']\"), ac_props);\n    }\n\n    if (!html_mode) {\n      pos = this.env.top_posting && this.env.compose_mode ? 0 : input_message.value.length;\n\n      // add signature according to selected identity\n      // if we have HTML editor, signature is added in a callback\n      if (input_from.prop('type') == 'select-one') {\n        this.change_identity(input_from[0]);\n      }\n\n      // set initial cursor position\n      this.set_caret_pos(input_message, pos);\n\n      // scroll to the bottom of the textarea (#1490114)\n      if (pos) {\n        $(input_message).scrollTop(input_message.scrollHeight);\n      }\n    }\n\n    // check for locally stored compose data\n    if (this.env.save_localstorage)\n      this.compose_restore_dialog(0, html_mode)\n\n    if (input_to.val() == '')\n      elem = input_to;\n    else if (input_subject.val() == '')\n      elem = input_subject;\n    else if (input_message)\n      elem = input_message;\n\n    // focus first empty element (need to be visible on IE8)\n    $(elem).filter(':visible').focus();\n\n    this.env.compose_focus_elem = document.activeElement;\n\n    // get summary of all field values\n    this.compose_field_hash(true);\n\n    // start the auto-save timer\n    this.auto_save_start();\n  };\n\n  this.compose_restore_dialog = function(j, html_mode)\n  {\n    var i, key, formdata, index = this.local_storage_get_item('compose.index', []);\n\n    var show_next = function(i) {\n      if (++i < index.length)\n        ref.compose_restore_dialog(i, html_mode)\n    }\n\n    for (i = j || 0; i < index.length; i++) {\n      key = index[i];\n      formdata = this.local_storage_get_item('compose.' + key, null, true);\n      if (!formdata) {\n        continue;\n      }\n      // restore saved copy of current compose_id\n      if (formdata.changed && key == this.env.compose_id) {\n        this.restore_compose_form(key, html_mode);\n        break;\n      }\n      // skip records from 'other' drafts\n      if (this.env.draft_id && formdata.draft_id && formdata.draft_id != this.env.draft_id) {\n        continue;\n      }\n      // skip records on reply\n      if (this.env.reply_msgid && formdata.reply_msgid != this.env.reply_msgid) {\n        continue;\n      }\n      // show dialog asking to restore the message\n      if (formdata.changed && formdata.session != this.env.session_id) {\n        this.show_popup_dialog(\n          this.get_label('restoresavedcomposedata')\n            .replace('$date', new Date(formdata.changed).toLocaleString())\n            .replace('$subject', formdata._subject)\n            .replace(/\\n/g, '<br/>'),\n          this.get_label('restoremessage'),\n          [{\n            text: this.get_label('restore'),\n            'class': 'mainaction',\n            click: function(){\n              ref.restore_compose_form(key, html_mode);\n              ref.remove_compose_data(key);  // remove old copy\n              ref.save_compose_form_local();  // save under current compose_id\n              $(this).dialog('close');\n            }\n          },\n          {\n            text: this.get_label('delete'),\n            'class': 'delete',\n            click: function(){\n              ref.remove_compose_data(key);\n              $(this).dialog('close');\n              show_next(i);\n            }\n          },\n          {\n            text: this.get_label('ignore'),\n            click: function(){\n              $(this).dialog('close');\n              show_next(i);\n            }\n          }]\n        );\n        break;\n      }\n    }\n  }\n\n  this.init_address_input_events = function(obj, props)\n  {\n    this.env.recipients_delimiter = this.env.recipients_separator + ' ';\n\n    obj.keydown(function(e) { return ref.ksearch_keydown(e, this, props); })\n      .attr({ 'autocomplete': 'off', 'aria-autocomplete': 'list', 'aria-expanded': 'false', 'role': 'combobox' });\n  };\n\n  this.submit_messageform = function(draft, saveonly)\n  {\n    var form = this.gui_objects.messageform;\n\n    if (!form)\n      return;\n\n    // the message has been sent but not saved, ask the user what to do\n    if (!saveonly && this.env.is_sent) {\n      return this.show_popup_dialog(this.get_label('messageissent'), '',\n        [{\n          text: this.get_label('save'),\n          'class': 'mainaction',\n          click: function() {\n            ref.submit_messageform(false, true);\n            $(this).dialog('close');\n          }\n        },\n        {\n          text: this.get_label('cancel'),\n          click: function() {\n            $(this).dialog('close');\n          }\n        }]\n      );\n    }\n\n    // delegate sending to Mailvelope routine\n    if (this.mailvelope_editor) {\n      return this.mailvelope_submit_messageform(draft, saveonly);\n    }\n\n    // all checks passed, send message\n    var msgid = this.set_busy(true, draft || saveonly ? 'savingmessage' : 'sendingmessage'),\n      lang = this.spellcheck_lang(),\n      files = [];\n\n    // send files list\n    $('li', this.gui_objects.attachmentlist).each(function() { files.push(this.id.replace(/^rcmfile/, '')); });\n    $('input[name=\"_attachments\"]', form).val(files.join());\n\n    form.target = 'savetarget';\n    form._draft.value = draft ? '1' : '';\n    form.action = this.add_url(form.action, '_unlock', msgid);\n    form.action = this.add_url(form.action, '_lang', lang);\n    form.action = this.add_url(form.action, '_framed', 1);\n\n    if (saveonly) {\n      form.action = this.add_url(form.action, '_saveonly', 1);\n    }\n\n    // register timer to notify about connection timeout\n    this.submit_timer = setTimeout(function(){\n      ref.set_busy(false, null, msgid);\n      ref.display_message(ref.get_label('requesttimedout'), 'error');\n    }, this.env.request_timeout * 1000);\n\n    form.submit();\n  };\n\n  this.compose_recipient_select = function(list)\n  {\n    var id, n, recipients = 0;\n    for (n=0; n < list.selection.length; n++) {\n      id = list.selection[n];\n      if (this.env.contactdata[id])\n        recipients++;\n    }\n    this.enable_command('add-recipient', recipients);\n  };\n\n  this.compose_add_recipient = function(field)\n  {\n    // find last focused field name\n    if (!field) {\n      field = $(this.env.focused_field).filter(':visible');\n      field = field.length ? field.attr('id').replace('_', '') : 'to';\n    }\n\n    var recipients = [], input = $('#_'+field), delim = this.env.recipients_delimiter;\n\n    if (this.contact_list && this.contact_list.selection.length) {\n      for (var id, n=0; n < this.contact_list.selection.length; n++) {\n        id = this.contact_list.selection[n];\n        if (id && this.env.contactdata[id]) {\n          recipients.push(this.env.contactdata[id]);\n\n          // group is added, expand it\n          if (id.charAt(0) == 'E' && this.env.contactdata[id].indexOf('@') < 0 && input.length) {\n            var gid = id.substr(1);\n            this.group2expand[gid] = { name:this.env.contactdata[id], input:input.get(0) };\n            this.http_request('group-expand', {_source: this.env.source, _gid: gid}, false);\n          }\n        }\n      }\n    }\n\n    if (recipients.length && input.length) {\n      var oldval = input.val(), rx = new RegExp(RegExp.escape(delim) + '\\\\s*$');\n      if (oldval && !rx.test(oldval))\n        oldval += delim + ' ';\n      input.val(oldval + recipients.join(delim + ' ') + delim + ' ').change();\n      this.triggerEvent('add-recipient', { field:field, recipients:recipients });\n    }\n\n    return recipients.length;\n  };\n\n  // checks the input fields before sending a message\n  this.check_compose_input = function(cmd)\n  {\n    // check input fields\n    var input_to = $(\"[name='_to']\"),\n      input_cc = $(\"[name='_cc']\"),\n      input_bcc = $(\"[name='_bcc']\"),\n      input_from = $(\"[name='_from']\"),\n      input_subject = $(\"[name='_subject']\");\n\n    // check sender (if have no identities)\n    if (input_from.prop('type') == 'text' && !rcube_check_email(input_from.val(), true)) {\n      alert(this.get_label('nosenderwarning'));\n      input_from.focus();\n      return false;\n    }\n\n    // check for empty recipient\n    var recipients = input_to.val() ? input_to.val() : (input_cc.val() ? input_cc.val() : input_bcc.val());\n    if (!rcube_check_email(recipients.replace(/^\\s+/, '').replace(/[\\s,;]+$/, ''), true)) {\n      alert(this.get_label('norecipientwarning'));\n      input_to.focus();\n      return false;\n    }\n\n    // check if all files has been uploaded\n    for (var key in this.env.attachments) {\n      if (typeof this.env.attachments[key] === 'object' && !this.env.attachments[key].complete) {\n        alert(this.get_label('notuploadedwarning'));\n        return false;\n      }\n    }\n\n    // display localized warning for missing subject\n    if (input_subject.val() == '') {\n      var buttons = {},\n        myprompt = $('<div class=\"prompt\">').html('<div class=\"message\">' + this.get_label('nosubjectwarning') + '</div>')\n          .appendTo(document.body),\n        prompt_value = $('<input>').attr({type: 'text', size: 30}).val(this.get_label('nosubject'))\n          .appendTo(myprompt),\n        save_func = function() {\n          input_subject.val(prompt_value.val());\n          myprompt.dialog('close');\n          ref.command(cmd, { nocheck:true });  // repeat command which triggered this\n        };\n\n      buttons[this.get_label('sendmessage')] = function() {\n        save_func($(this));\n      };\n      buttons[this.get_label('cancel')] = function() {\n        input_subject.focus();\n        $(this).dialog('close');\n      };\n\n      myprompt.dialog({\n        modal: true,\n        resizable: false,\n        buttons: buttons,\n        close: function(event, ui) { $(this).remove(); }\n      });\n\n      prompt_value.select().keydown(function(e) {\n        if (e.which == 13) save_func();\n      });\n\n      return false;\n    }\n\n    // check for empty body\n    if (!this.editor.get_content() && !confirm(this.get_label('nobodywarning'))) {\n      this.editor.focus();\n      return false;\n    }\n\n    // move body from html editor to textarea (just to be sure, #1485860)\n    this.editor.save();\n\n    return true;\n  };\n\n  this.toggle_editor = function(props, obj, e)\n  {\n    // @todo: this should work also with many editors on page\n    var result = this.editor.toggle(props.html, props.noconvert || false);\n\n    // satisfy the expectations of aftertoggle-editor event subscribers\n    props.mode = props.html ? 'html' : 'plain';\n\n    if (!result && e) {\n      // fix selector value if operation failed\n      props.mode = props.html ? 'plain' : 'html';\n      $(e.target).filter('select').val(props.mode);\n    }\n\n    if (result) {\n      // update internal format flag\n      $(\"input[name='_is_html']\").val(props.html ? 1 : 0);\n      // enable encrypted compose toggle\n      this.enable_command('compose-encrypted', !props.html);\n    }\n\n    return result;\n  };\n\n  this.insert_response = function(key)\n  {\n    var insert = this.env.textresponses[key] ? this.env.textresponses[key].text : null;\n\n    if (!insert)\n      return false;\n\n    this.editor.replace(insert);\n  };\n\n  /**\n   * Open the dialog to save a new canned response\n   */\n  this.save_response = function()\n  {\n    // show dialog to enter a name and to modify the text to be saved\n    var buttons = {}, text = this.editor.get_content({selection: true, format: 'text', nosig: true}),\n      html = '<form class=\"propform\">' +\n      '<div class=\"prop block\"><label>' + this.get_label('responsename') + '</label>' +\n      '<input type=\"text\" name=\"name\" id=\"ffresponsename\" size=\"40\" /></div>' +\n      '<div class=\"prop block\"><label>' + this.get_label('responsetext') + '</label>' +\n      '<textarea name=\"text\" id=\"ffresponsetext\" cols=\"40\" rows=\"8\"></textarea></div>' +\n      '</form>';\n\n    buttons[this.get_label('save')] = function(e) {\n      var name = $('#ffresponsename').val(),\n        text = $('#ffresponsetext').val();\n\n      if (!text) {\n        $('#ffresponsetext').select();\n        return false;\n      }\n      if (!name)\n        name = text.substring(0,40);\n\n      var lock = ref.display_message(ref.get_label('savingresponse'), 'loading');\n      ref.http_post('settings/responses', { _insert:1, _name:name, _text:text }, lock);\n      $(this).dialog('close');\n    };\n\n    buttons[this.get_label('cancel')] = function() {\n      $(this).dialog('close');\n    };\n\n    this.show_popup_dialog(html, this.get_label('newresponse'), buttons, {button_classes: ['mainaction']});\n\n    $('#ffresponsetext').val(text);\n    $('#ffresponsename').select();\n  };\n\n  this.add_response_item = function(response)\n  {\n    var key = response.key;\n    this.env.textresponses[key] = response;\n\n    // append to responses list\n    if (this.gui_objects.responseslist) {\n      var li = $('<li>').appendTo(this.gui_objects.responseslist);\n      $('<a>').addClass('insertresponse active')\n        .attr('href', '#')\n        .attr('rel', key)\n        .attr('tabindex', '0')\n        .html(this.quote_html(response.name))\n        .appendTo(li)\n        .mousedown(function(e) {\n          return rcube_event.cancel(e);\n        })\n        .on('mouseup keypress', function(e) {\n          if (e.type == 'mouseup' || rcube_event.get_keycode(e) == 13) {\n            ref.command('insert-response', $(this).attr('rel'));\n            $(document.body).trigger('mouseup');  // hides the menu\n            return rcube_event.cancel(e);\n          }\n        });\n    }\n  };\n\n  this.edit_responses = function()\n  {\n    // TODO: implement inline editing of responses\n  };\n\n  this.delete_response = function(key)\n  {\n    if (!key && this.responses_list) {\n      var selection = this.responses_list.get_selection();\n      key = selection[0];\n    }\n\n    // submit delete request\n    if (key && confirm(this.get_label('deleteresponseconfirm'))) {\n      this.http_post('settings/delete-response', { _key: key }, false);\n    }\n  };\n\n  // updates spellchecker buttons on state change\n  this.spellcheck_state = function()\n  {\n    var active = this.editor.spellcheck_state();\n\n    $.each(this.buttons.spellcheck || [], function(i, v) {\n      $('#' + v.id)[active ? 'addClass' : 'removeClass']('selected');\n    });\n\n    return active;\n  };\n\n  // get selected language\n  this.spellcheck_lang = function()\n  {\n    return this.editor.get_language();\n  };\n\n  this.spellcheck_lang_set = function(lang)\n  {\n    this.editor.set_language(lang);\n  };\n\n  // resume spellchecking, highlight provided mispellings without new ajax request\n  this.spellcheck_resume = function(data)\n  {\n    this.editor.spellcheck_resume(data);\n  };\n\n  this.set_draft_id = function(id)\n  {\n    if (id && id != this.env.draft_id) {\n      var filter = {task: 'mail', action: ''},\n        rc = this.opener(false, filter) || this.opener(true, filter);\n\n      // refresh the drafts folder in the opener window\n      if (rc && rc.env.mailbox == this.env.drafts_mailbox)\n        rc.command('checkmail');\n\n      this.env.draft_id = id;\n      $(\"input[name='_draft_saveid']\").val(id);\n\n      // reset history of hidden iframe used for saving draft (#1489643)\n      // but don't do this on timer-triggered draft-autosaving (#1489789)\n      if (window.frames['savetarget'] && window.frames['savetarget'].history && !this.draft_autosave_submit && !this.mailvelope_editor) {\n        window.frames['savetarget'].history.back();\n      }\n\n      this.draft_autosave_submit = false;\n    }\n\n    // always remove local copy upon saving as draft\n    this.remove_compose_data(this.env.compose_id);\n    this.compose_skip_unsavedcheck = false;\n  };\n\n  this.auto_save_start = function()\n  {\n    if (this.env.draft_autosave) {\n      this.draft_autosave_submit = false;\n      this.save_timer = setTimeout(function(){\n          ref.draft_autosave_submit = true;  // set auto-saved flag (#1489789)\n          ref.command(\"savedraft\");\n      }, this.env.draft_autosave * 1000);\n    }\n\n    // save compose form content to local storage every 5 seconds\n    if (!this.local_save_timer && window.localStorage && this.env.save_localstorage) {\n      // track typing activity and only save on changes\n      this.compose_type_activity = this.compose_type_activity_last = 0;\n      $(document).keypress(function(e) { ref.compose_type_activity++; });\n\n      this.local_save_timer = setInterval(function(){\n        if (ref.compose_type_activity > ref.compose_type_activity_last) {\n          ref.save_compose_form_local();\n          ref.compose_type_activity_last = ref.compose_type_activity;\n        }\n      }, 5000);\n\n      $(window).on('unload', function() {\n        // remove copy from local storage if compose screen is left after warning\n        if (!ref.env.server_error)\n          ref.remove_compose_data(ref.env.compose_id);\n      });\n    }\n\n    // check for unsaved changes before leaving the compose page\n    if (!window.onbeforeunload) {\n      window.onbeforeunload = function() {\n        if (!ref.compose_skip_unsavedcheck && ref.cmp_hash != ref.compose_field_hash()) {\n          return ref.get_label('notsentwarning');\n        }\n      };\n    }\n\n    // Unlock interface now that saving is complete\n    this.busy = false;\n  };\n\n  this.compose_field_hash = function(save)\n  {\n    // check input fields\n    var i, id, val, str = '', hash_fields = ['to', 'cc', 'bcc', 'subject'];\n\n    for (i=0; i<hash_fields.length; i++)\n      if (val = $('[name=\"_' + hash_fields[i] + '\"]').val())\n        str += val + ':';\n\n    str += this.editor.get_content({refresh: false});\n\n    if (this.env.attachments)\n      for (id in this.env.attachments)\n        str += id;\n\n    // we can't detect changes in the Mailvelope editor so assume it changed\n    if (this.mailvelope_editor) {\n      str += ';' + new Date().getTime();\n    }\n\n    if (save)\n      this.cmp_hash = str;\n\n    return str;\n  };\n\n  // store the contents of the compose form to localstorage\n  this.save_compose_form_local = function()\n  {\n    // feature is disabled\n    if (!this.env.save_localstorage)\n      return;\n\n    var formdata = { session:this.env.session_id, changed:new Date().getTime() },\n      ed, empty = true;\n\n    // get fresh content from editor\n    this.editor.save();\n\n    if (this.env.draft_id) {\n      formdata.draft_id = this.env.draft_id;\n    }\n    if (this.env.reply_msgid) {\n      formdata.reply_msgid = this.env.reply_msgid;\n    }\n\n    $('input, select, textarea', this.gui_objects.messageform).each(function(i, elem) {\n      switch (elem.tagName.toLowerCase()) {\n        case 'input':\n          if (elem.type == 'button' || elem.type == 'submit' || (elem.type == 'hidden' && elem.name != '_is_html')) {\n            break;\n          }\n          formdata[elem.name] = elem.type != 'checkbox' || elem.checked ? $(elem).val() : '';\n\n          if (formdata[elem.name] != '' && elem.type != 'hidden')\n            empty = false;\n          break;\n\n        case 'select':\n          formdata[elem.name] = $('option:checked', elem).val();\n          break;\n\n        default:\n          formdata[elem.name] = $(elem).val();\n          if (formdata[elem.name] != '')\n            empty = false;\n      }\n    });\n\n    if (!empty) {\n      var index = this.local_storage_get_item('compose.index', []),\n        key = this.env.compose_id;\n\n      if ($.inArray(key, index) < 0) {\n        index.push(key);\n      }\n\n      this.local_storage_set_item('compose.' + key, formdata, true);\n      this.local_storage_set_item('compose.index', index);\n    }\n  };\n\n  // write stored compose data back to form\n  this.restore_compose_form = function(key, html_mode)\n  {\n    var ed, formdata = this.local_storage_get_item('compose.' + key, true);\n\n    if (formdata && typeof formdata == 'object') {\n      $.each(formdata, function(k, value) {\n        if (k[0] == '_') {\n          var elem = $(\"*[name='\"+k+\"']\");\n          if (elem[0] && elem[0].type == 'checkbox') {\n            elem.prop('checked', value != '');\n          }\n          else {\n            elem.val(value);\n          }\n        }\n      });\n\n      // initialize HTML editor\n      if ((formdata._is_html == '1' && !html_mode) || (formdata._is_html != '1' && html_mode)) {\n        this.command('toggle-editor', {id: this.env.composebody, html: !html_mode, noconvert: true});\n      }\n    }\n  };\n\n  // remove stored compose data from localStorage\n  this.remove_compose_data = function(key)\n  {\n    var index = this.local_storage_get_item('compose.index', []);\n\n    if ($.inArray(key, index) >= 0) {\n      this.local_storage_remove_item('compose.' + key);\n      this.local_storage_set_item('compose.index', $.grep(index, function(val,i) { return val != key; }));\n    }\n  };\n\n  // clear all stored compose data of this user\n  this.clear_compose_data = function()\n  {\n    var i, index = this.local_storage_get_item('compose.index', []);\n\n    for (i=0; i < index.length; i++) {\n      this.local_storage_remove_item('compose.' + index[i]);\n    }\n\n    this.local_storage_remove_item('compose.index');\n  };\n\n  this.change_identity = function(obj, show_sig)\n  {\n    if (!obj || !obj.options)\n      return false;\n\n    if (!show_sig)\n      show_sig = this.env.show_sig;\n\n    var id = obj.options[obj.selectedIndex].value,\n      sig = this.env.identity,\n      delim = this.env.recipients_separator,\n      rx_delim = RegExp.escape(delim);\n\n    // enable manual signature insert\n    if (this.env.signatures && this.env.signatures[id]) {\n      this.enable_command('insert-sig', true);\n      this.env.compose_commands.push('insert-sig');\n    }\n    else\n      this.enable_command('insert-sig', false);\n\n    // first function execution\n    if (!this.env.identities_initialized) {\n      this.env.identities_initialized = true;\n      if (this.env.show_sig_later)\n        this.env.show_sig = true;\n      if (this.env.opened_extwin)\n        return;\n    }\n\n    // update reply-to/bcc fields with addresses defined in identities\n    $.each(['replyto', 'bcc'], function() {\n      var rx, key = this,\n        old_val = sig && ref.env.identities[sig] ? ref.env.identities[sig][key] : '',\n        new_val = id && ref.env.identities[id] ? ref.env.identities[id][key] : '',\n        input = $('[name=\"_'+key+'\"]'), input_val = input.val();\n\n      // remove old address(es)\n      if (old_val && input_val) {\n        rx = new RegExp('\\\\s*' + RegExp.escape(old_val) + '\\\\s*');\n        input_val = input_val.replace(rx, '');\n      }\n\n      // cleanup\n      rx = new RegExp(rx_delim + '\\\\s*' + rx_delim, 'g');\n      input_val = String(input_val).replace(rx, delim);\n      rx = new RegExp('^[\\\\s' + rx_delim + ']+');\n      input_val = input_val.replace(rx, '');\n\n      // add new address(es)\n      if (new_val && input_val.indexOf(new_val) == -1 && input_val.indexOf(new_val.replace(/\"/g, '')) == -1) {\n        if (input_val) {\n          rx = new RegExp('[' + rx_delim + '\\\\s]+$')\n          input_val = input_val.replace(rx, '') + delim + ' ';\n        }\n\n        input_val += new_val + delim + ' ';\n      }\n\n      if (old_val || new_val)\n        input.val(input_val).change();\n    });\n\n    this.editor.change_signature(id, show_sig);\n    this.env.identity = id;\n    this.triggerEvent('change_identity');\n    return true;\n  };\n\n  // upload (attachment) file\n  this.upload_file = function(form, action, lock)\n  {\n    if (!form)\n      return;\n\n    // count files and size on capable browser\n    var size = 0, numfiles = 0;\n\n    $('input[type=file]', form).each(function(i, field) {\n      var files = field.files ? field.files.length : (field.value ? 1 : 0);\n\n      // check file size\n      if (field.files) {\n        for (var i=0; i < files; i++)\n          size += field.files[i].size;\n      }\n\n      numfiles += files;\n    });\n\n    // create hidden iframe and post upload form\n    if (numfiles) {\n      if (this.env.max_filesize && this.env.filesizeerror && size > this.env.max_filesize) {\n        this.display_message(this.env.filesizeerror, 'error');\n        return false;\n      }\n\n      var frame_name = this.async_upload_form(form, action || 'upload', function(e) {\n        var d, content = '';\n        try {\n          if (this.contentDocument) {\n            d = this.contentDocument;\n          } else if (this.contentWindow) {\n            d = this.contentWindow.document;\n          }\n          content = d.childNodes[1].innerHTML;\n        } catch (err) {}\n\n        if (!content.match(/add2attachment/) && (!bw.opera || (ref.env.uploadframe && ref.env.uploadframe == e.data.ts))) {\n          if (!content.match(/display_message/))\n            ref.display_message(ref.get_label('fileuploaderror'), 'error');\n          ref.remove_from_attachment_list(e.data.ts);\n\n          if (lock)\n            ref.set_busy(false, null, lock);\n        }\n        // Opera hack: handle double onload\n        if (bw.opera)\n          ref.env.uploadframe = e.data.ts;\n      });\n\n      // display upload indicator and cancel button\n      var content = '<span>' + this.get_label('uploading' + (numfiles > 1 ? 'many' : '')) + '</span>',\n        ts = frame_name.replace(/^rcmupload/, '');\n\n      this.add2attachment_list(ts, { name:'', html:content, classname:'uploading', frame:frame_name, complete:false });\n\n      // upload progress support\n      if (this.env.upload_progress_time) {\n        this.upload_progress_start('upload', ts);\n      }\n\n      // set reference to the form object\n      this.gui_objects.attachmentform = form;\n      return true;\n    }\n  };\n\n  // add file name to attachment list\n  // called from upload page\n  this.add2attachment_list = function(name, att, upload_id)\n  {\n    if (upload_id)\n      this.triggerEvent('fileuploaded', {name: name, attachment: att, id: upload_id});\n\n    if (!this.env.attachments)\n      this.env.attachments = {};\n\n    if (upload_id && this.env.attachments[upload_id])\n      delete this.env.attachments[upload_id];\n\n    this.env.attachments[name] = att;\n\n    if (!this.gui_objects.attachmentlist)\n      return false;\n\n    if (!att.complete && this.env.loadingicon)\n      att.html = '<img src=\"'+this.env.loadingicon+'\" alt=\"\" class=\"uploading\" />' + att.html;\n\n    if (!att.complete && att.frame)\n      att.html = '<a title=\"'+this.get_label('cancel')+'\" onclick=\"return rcmail.cancel_attachment_upload(\\''+name+'\\', \\''+att.frame+'\\');\" href=\"#cancelupload\" class=\"cancelupload\">'\n        + (this.env.cancelicon ? '<img src=\"'+this.env.cancelicon+'\" alt=\"'+this.get_label('cancel')+'\" />' : this.get_label('cancel')) + '</a>' + att.html;\n\n    var indicator, li = $('<li>');\n\n    li.attr('id', name)\n      .addClass(att.classname)\n      .html(att.html)\n      .on('mouseover', function() { rcube_webmail.long_subject_title_ex(this); });\n\n    // replace indicator's li\n    if (upload_id && (indicator = document.getElementById(upload_id))) {\n      li.replaceAll(indicator);\n    }\n    else { // add new li\n      li.appendTo(this.gui_objects.attachmentlist);\n    }\n\n    // set tabindex attribute\n    var tabindex = $(this.gui_objects.attachmentlist).attr('data-tabindex') || '0';\n    li.find('a').attr('tabindex', tabindex);\n\n    return true;\n  };\n\n  this.remove_from_attachment_list = function(name)\n  {\n    if (this.env.attachments) {\n      delete this.env.attachments[name];\n      $('#'+name).remove();\n    }\n  };\n\n  this.remove_attachment = function(name)\n  {\n    if (name && this.env.attachments[name])\n      this.http_post('remove-attachment', { _id:this.env.compose_id, _file:name });\n\n    return true;\n  };\n\n  this.cancel_attachment_upload = function(name, frame_name)\n  {\n    if (!name || !frame_name)\n      return false;\n\n    this.remove_from_attachment_list(name);\n    $(\"iframe[name='\"+frame_name+\"']\").remove();\n    return false;\n  };\n\n  this.upload_progress_start = function(action, name)\n  {\n    setTimeout(function() { ref.http_request(action, {_progress: name}); },\n      this.env.upload_progress_time * 1000);\n  };\n\n  this.upload_progress_update = function(param)\n  {\n    var elem = $('#'+param.name + ' > span');\n\n    if (!elem.length || !param.text)\n      return;\n\n    elem.text(param.text);\n\n    if (!param.done)\n      this.upload_progress_start(param.action, param.name);\n  };\n\n  // send remote request to add a new contact\n  this.add_contact = function(value)\n  {\n    if (value)\n      this.http_post('addcontact', {_address: value});\n\n    return true;\n  };\n\n  // send remote request to search mail or contacts\n  this.qsearch = function(value)\n  {\n    if (value != '') {\n      var r, lock = this.set_busy(true, 'searching'),\n        url = this.search_params(value),\n        action = this.env.action == 'compose' && this.contact_list ? 'search-contacts' : 'search';\n\n      if (this.message_list)\n        this.clear_message_list();\n      else if (this.contact_list)\n        this.list_contacts_clear();\n\n      if (this.env.source)\n        url._source = this.env.source;\n      if (this.env.group)\n        url._gid = this.env.group;\n\n      // reset vars\n      this.env.current_page = 1;\n\n      r = this.http_request(action, url, lock);\n\n      this.env.qsearch = {lock: lock, request: r};\n      this.enable_command('set-listmode', this.env.threads && (this.env.search_scope || 'base') == 'base');\n\n      return true;\n    }\n\n    return false;\n  };\n\n  this.continue_search = function(request_id)\n  {\n    var lock = this.set_busy(true, 'stillsearching');\n\n    setTimeout(function() {\n      var url = ref.search_params();\n      url._continue = request_id;\n      ref.env.qsearch = { lock: lock, request: ref.http_request('search', url, lock) };\n    }, 100);\n  };\n\n  // build URL params for search\n  this.search_params = function(search, filter)\n  {\n    var n, url = {}, mods_arr = [],\n      mods = this.env.search_mods,\n      scope = this.env.search_scope || 'base',\n      mbox = scope == 'all' ? '*' : this.env.mailbox;\n\n    if (!filter && this.gui_objects.search_filter)\n      filter = this.gui_objects.search_filter.value;\n\n    if (!search && this.gui_objects.qsearchbox)\n      search = this.gui_objects.qsearchbox.value;\n\n    if (filter)\n      url._filter = filter;\n\n    if (this.gui_objects.search_interval)\n      url._interval = $(this.gui_objects.search_interval).val();\n\n    if (search) {\n      url._q = search;\n\n      if (mods && this.message_list)\n        mods = mods[mbox] || mods['*'];\n\n      if (mods) {\n        for (n in mods)\n          mods_arr.push(n);\n        url._headers = mods_arr.join(',');\n      }\n    }\n\n    if (scope)\n      url._scope = scope;\n    if (mbox && scope != 'all')\n      url._mbox = mbox;\n\n    return url;\n  };\n\n  // reset search filter\n  this.reset_search_filter = function()\n  {\n    this.filter_disabled = true;\n    if (this.gui_objects.search_filter)\n      $(this.gui_objects.search_filter).val('ALL').change();\n    this.filter_disabled = false;\n  };\n\n  // reset quick-search form\n  this.reset_qsearch = function(all)\n  {\n    if (this.gui_objects.qsearchbox)\n      this.gui_objects.qsearchbox.value = '';\n\n    if (this.gui_objects.search_interval)\n      $(this.gui_objects.search_interval).val('');\n\n    if (this.env.qsearch)\n      this.abort_request(this.env.qsearch);\n\n    if (all) {\n      this.env.search_scope = 'base';\n      this.reset_search_filter();\n    }\n\n    this.env.qsearch = null;\n    this.env.search_request = null;\n    this.env.search_id = null;\n\n    this.enable_command('set-listmode', this.env.threads);\n  };\n\n  this.set_searchscope = function(scope)\n  {\n    var old = this.env.search_scope;\n    this.env.search_scope = scope;\n\n    // re-send search query with new scope\n    if (scope != old && this.env.search_request) {\n      if (!this.qsearch(this.gui_objects.qsearchbox.value) && this.env.search_filter && this.env.search_filter != 'ALL')\n        this.filter_mailbox(this.env.search_filter);\n      if (scope != 'all')\n        this.select_folder(this.env.mailbox, '', true);\n    }\n  };\n\n  this.set_searchinterval = function(interval)\n  {\n    var old = this.env.search_interval;\n    this.env.search_interval = interval;\n\n    // re-send search query with new interval\n    if (interval != old && this.env.search_request) {\n      if (!this.qsearch(this.gui_objects.qsearchbox.value) && this.env.search_filter && this.env.search_filter != 'ALL')\n        this.filter_mailbox(this.env.search_filter);\n      if (interval)\n        this.select_folder(this.env.mailbox, '', true);\n    }\n  };\n\n  this.set_searchmods = function(mods)\n  {\n    var mbox = this.env.mailbox,\n      scope = this.env.search_scope || 'base';\n\n    if (scope == 'all')\n      mbox = '*';\n\n    if (!this.env.search_mods)\n      this.env.search_mods = {};\n\n    if (mbox)\n      this.env.search_mods[mbox] = mods;\n  };\n\n  this.is_multifolder_listing = function()\n  {\n    return this.env.multifolder_listing !== undefined ? this.env.multifolder_listing :\n      (this.env.search_request && (this.env.search_scope || 'base') != 'base');\n  };\n\n  // action executed after mail is sent\n  this.sent_successfully = function(type, msg, folders, save_error)\n  {\n    this.display_message(msg, type);\n    this.compose_skip_unsavedcheck = true;\n\n    if (this.env.extwin) {\n      if (!save_error)\n        this.lock_form(this.gui_objects.messageform);\n\n      var filter = {task: 'mail', action: ''},\n        rc = this.opener(false, filter) || this.opener(true, filter);\n\n      if (rc) {\n        rc.display_message(msg, type);\n        // refresh the folder where sent message was saved or replied message comes from\n        if (folders && $.inArray(rc.env.mailbox, folders) >= 0) {\n          rc.command('checkmail');\n        }\n      }\n\n      if (!save_error)\n        setTimeout(function() { window.close(); }, 1000);\n    }\n    else if (!save_error) {\n      // before redirect we need to wait some time for Chrome (#1486177)\n      setTimeout(function() { ref.list_mailbox(); }, 500);\n    }\n\n    if (save_error)\n      this.env.is_sent = true;\n  };\n\n\n  /*********************************************************/\n  /*********     keyboard live-search methods      *********/\n  /*********************************************************/\n\n  // handler for keyboard events on address-fields\n  this.ksearch_keydown = function(e, obj, props)\n  {\n    if (this.ksearch_timer)\n      clearTimeout(this.ksearch_timer);\n\n    var key = rcube_event.get_keycode(e),\n      mod = rcube_event.get_modifier(e);\n\n    switch (key) {\n      case 38:  // arrow up\n      case 40:  // arrow down\n        if (!this.ksearch_visible())\n          return;\n\n        var dir = key == 38 ? 1 : 0,\n          highlight = document.getElementById('rcmkSearchItem' + this.ksearch_selected);\n\n        if (!highlight)\n          highlight = this.ksearch_pane.__ul.firstChild;\n\n        if (highlight)\n          this.ksearch_select(dir ? highlight.previousSibling : highlight.nextSibling);\n\n        return rcube_event.cancel(e);\n\n      case 9:   // tab\n        if (mod == SHIFT_KEY || !this.ksearch_visible()) {\n          this.ksearch_hide();\n          return;\n        }\n\n      case 13:  // enter\n        if (!this.ksearch_visible())\n          return false;\n\n        // insert selected address and hide ksearch pane\n        this.insert_recipient(this.ksearch_selected);\n        this.ksearch_hide();\n\n        return rcube_event.cancel(e);\n\n      case 27:  // escape\n        this.ksearch_hide();\n        return;\n\n      case 37:  // left\n      case 39:  // right\n        return;\n    }\n\n    // start timer\n    this.ksearch_timer = setTimeout(function(){ ref.ksearch_get_results(props); }, 200);\n    this.ksearch_input = obj;\n\n    return true;\n  };\n\n  this.ksearch_visible = function()\n  {\n    return this.ksearch_selected !== null && this.ksearch_selected !== undefined && this.ksearch_value;\n  };\n\n  this.ksearch_select = function(node)\n  {\n    if (this.ksearch_pane && node) {\n      this.ksearch_pane.find('li.selected').removeClass('selected').removeAttr('aria-selected');\n    }\n\n    if (node) {\n      $(node).addClass('selected').attr('aria-selected', 'true');\n      this.ksearch_selected = node._rcm_id;\n      $(this.ksearch_input).attr('aria-activedescendant', 'rcmkSearchItem' + this.ksearch_selected);\n    }\n  };\n\n  this.insert_recipient = function(id)\n  {\n    if (id === null || !this.env.contacts[id] || !this.ksearch_input)\n      return;\n\n    // get cursor pos\n    var inp_value = this.ksearch_input.value,\n      cpos = this.get_caret_pos(this.ksearch_input),\n      p = inp_value.lastIndexOf(this.ksearch_value, cpos),\n      trigger = false,\n      insert = '',\n      // replace search string with full address\n      pre = inp_value.substring(0, p),\n      end = inp_value.substring(p+this.ksearch_value.length, inp_value.length);\n\n    this.ksearch_destroy();\n\n    // insert all members of a group\n    if (typeof this.env.contacts[id] === 'object' && this.env.contacts[id].type == 'group' && !this.env.contacts[id].email) {\n      insert += this.env.contacts[id].name + this.env.recipients_delimiter;\n      this.group2expand[this.env.contacts[id].id] = $.extend({ input: this.ksearch_input }, this.env.contacts[id]);\n      this.http_request('mail/group-expand', {_source: this.env.contacts[id].source, _gid: this.env.contacts[id].id}, false);\n    }\n    else if (typeof this.env.contacts[id] === 'object' && this.env.contacts[id].name) {\n      insert = this.env.contacts[id].name + this.env.recipients_delimiter;\n      trigger = true;\n    }\n    else if (typeof this.env.contacts[id] === 'string') {\n      insert = this.env.contacts[id] + this.env.recipients_delimiter;\n      trigger = true;\n    }\n\n    this.ksearch_input.value = pre + insert + end;\n\n    // set caret to insert pos\n    this.set_caret_pos(this.ksearch_input, p + insert.length);\n\n    if (trigger) {\n      this.triggerEvent('autocomplete_insert', { field:this.ksearch_input, insert:insert, data:this.env.contacts[id] });\n      this.compose_type_activity++;\n    }\n  };\n\n  this.replace_group_recipients = function(id, recipients)\n  {\n    if (this.group2expand[id]) {\n      this.group2expand[id].input.value = this.group2expand[id].input.value.replace(this.group2expand[id].name, recipients);\n      this.triggerEvent('autocomplete_insert', { field:this.group2expand[id].input, insert:recipients });\n      this.group2expand[id] = null;\n      this.compose_type_activity++;\n    }\n  };\n\n  // address search processor\n  this.ksearch_get_results = function(props)\n  {\n    var inp_value = this.ksearch_input ? this.ksearch_input.value : null;\n\n    if (inp_value === null)\n      return;\n\n    if (this.ksearch_pane && this.ksearch_pane.is(\":visible\"))\n      this.ksearch_pane.hide();\n\n    // get string from current cursor pos to last comma\n    var cpos = this.get_caret_pos(this.ksearch_input),\n      p = inp_value.lastIndexOf(this.env.recipients_separator, cpos-1),\n      q = inp_value.substring(p+1, cpos),\n      min = this.env.autocomplete_min_length,\n      data = this.ksearch_data;\n\n    // trim query string\n    q = $.trim(q);\n\n    // Don't (re-)search if the last results are still active\n    if (q == this.ksearch_value)\n      return;\n\n    this.ksearch_destroy();\n\n    if (q.length && q.length < min) {\n      if (!this.ksearch_info) {\n        this.ksearch_info = this.display_message(\n          this.get_label('autocompletechars').replace('$min', min));\n      }\n      return;\n    }\n\n    var old_value = this.ksearch_value;\n    this.ksearch_value = q;\n\n    // ...string is empty\n    if (!q.length)\n      return;\n\n    // ...new search value contains old one and previous search was not finished or its result was empty\n    if (old_value && old_value.length && q.startsWith(old_value) && (!data || data.num <= 0) && this.env.contacts && !this.env.contacts.length)\n      return;\n\n    var sources = props && props.sources ? props.sources : [''];\n    var reqid = this.multi_thread_http_request({\n      items: sources,\n      threads: props && props.threads ? props.threads : 1,\n      action:  props && props.action ? props.action : 'mail/autocomplete',\n      postdata: { _search:q, _source:'%s' },\n      lock: this.display_message(this.get_label('searching'), 'loading')\n    });\n\n    this.ksearch_data = { id:reqid, sources:sources.slice(), num:sources.length };\n  };\n\n  this.ksearch_query_results = function(results, search, reqid)\n  {\n    // trigger multi-thread http response callback\n    this.multi_thread_http_response(results, reqid);\n\n    // search stopped in meantime?\n    if (!this.ksearch_value)\n      return;\n\n    // ignore this outdated search response\n    if (this.ksearch_input && search != this.ksearch_value)\n      return;\n\n    // display search results\n    var i, id, len, ul, text, type, init,\n      value = this.ksearch_value,\n      maxlen = this.env.autocomplete_max ? this.env.autocomplete_max : 15;\n\n    // create results pane if not present\n    if (!this.ksearch_pane) {\n      ul = $('<ul>');\n      this.ksearch_pane = $('<div>').attr('id', 'rcmKSearchpane').attr('role', 'listbox')\n        .css({ position:'absolute', 'z-index':30000 }).append(ul).appendTo(document.body);\n      this.ksearch_pane.__ul = ul[0];\n    }\n\n    ul = this.ksearch_pane.__ul;\n\n    // remove all search results or add to existing list if parallel search\n    if (reqid && this.ksearch_pane.data('reqid') == reqid) {\n      maxlen -= ul.childNodes.length;\n    }\n    else {\n      this.ksearch_pane.data('reqid', reqid);\n      init = 1;\n      // reset content\n      ul.innerHTML = '';\n      this.env.contacts = [];\n      // move the results pane right under the input box\n      var pos = $(this.ksearch_input).offset();\n      this.ksearch_pane.css({ left:pos.left+'px', top:(pos.top + this.ksearch_input.offsetHeight)+'px', display: 'none'});\n    }\n\n    // add each result line to list\n    if (results && (len = results.length)) {\n      for (i=0; i < len && maxlen > 0; i++) {\n        text = typeof results[i] === 'object' ? (results[i].display || results[i].name) : results[i];\n        type = typeof results[i] === 'object' ? results[i].type : '';\n        id = i + this.env.contacts.length;\n        $('<li>').attr('id', 'rcmkSearchItem' + id)\n          .attr('role', 'option')\n          .html('<i class=\"icon\"></i>' + this.quote_html(text.replace(new RegExp('('+RegExp.escape(value)+')', 'ig'), '##$1%%')).replace(/##([^%]+)%%/g, '<b>$1</b>'))\n          .addClass(type || '')\n          .appendTo(ul)\n          .mouseover(function() { ref.ksearch_select(this); })\n          .mouseup(function() { ref.ksearch_click(this); })\n          .get(0)._rcm_id = id;\n        maxlen -= 1;\n      }\n    }\n\n    if (ul.childNodes.length) {\n      // set the right aria-* attributes to the input field\n      $(this.ksearch_input)\n        .attr('aria-haspopup', 'true')\n        .attr('aria-expanded', 'true')\n        .attr('aria-owns', 'rcmKSearchpane');\n\n      this.ksearch_pane.show();\n\n      // select the first\n      if (!this.env.contacts.length) {\n        this.ksearch_select($('li:first', ul).get(0));\n      }\n    }\n\n    if (len)\n      this.env.contacts = this.env.contacts.concat(results);\n\n    if (this.ksearch_data.id == reqid)\n      this.ksearch_data.num--;\n  };\n\n  this.ksearch_click = function(node)\n  {\n    if (this.ksearch_input)\n      this.ksearch_input.focus();\n\n    this.insert_recipient(node._rcm_id);\n    this.ksearch_hide();\n  };\n\n  this.ksearch_blur = function()\n  {\n    if (this.ksearch_timer)\n      clearTimeout(this.ksearch_timer);\n\n    this.ksearch_input = null;\n    this.ksearch_hide();\n  };\n\n  this.ksearch_hide = function()\n  {\n    this.ksearch_selected = null;\n    this.ksearch_value = '';\n\n    if (this.ksearch_pane)\n      this.ksearch_pane.hide();\n\n    $(this.ksearch_input)\n      .attr('aria-haspopup', 'false')\n      .attr('aria-expanded', 'false')\n      .removeAttr('aria-activedescendant')\n      .removeAttr('aria-owns');\n\n    this.ksearch_destroy();\n  };\n\n  // Clears autocomplete data/requests\n  this.ksearch_destroy = function()\n  {\n    if (this.ksearch_data)\n      this.multi_thread_request_abort(this.ksearch_data.id);\n\n    if (this.ksearch_info)\n      this.hide_message(this.ksearch_info);\n\n    if (this.ksearch_msg)\n      this.hide_message(this.ksearch_msg);\n\n    this.ksearch_data = null;\n    this.ksearch_info = null;\n    this.ksearch_msg = null;\n  };\n\n\n  /*********************************************************/\n  /*********         address book methods          *********/\n  /*********************************************************/\n\n  this.contactlist_keypress = function(list)\n  {\n    if (list.key_pressed == list.DELETE_KEY)\n      this.command('delete');\n  };\n\n  this.contactlist_select = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n\n    var n, id, sid, contact, writable = false,\n      selected = list.selection.length,\n      source = this.env.source ? this.env.address_sources[this.env.source] : null;\n\n    // we don't have dblclick handler here, so use 200 instead of this.dblclick_time\n    if (this.env.contentframe && (id = list.get_single_selection()))\n      this.preview_timer = setTimeout(function(){ ref.load_contact(id, 'show'); }, 200);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n\n    if (selected) {\n      list.draggable = false;\n\n      // no source = search result, we'll need to detect if any of\n      // selected contacts are in writable addressbook to enable edit/delete\n      // we'll also need to know sources used in selection for copy\n      // and group-addmember operations (drag&drop)\n      this.env.selection_sources = [];\n\n      if (source) {\n        this.env.selection_sources.push(this.env.source);\n      }\n\n      for (n in list.selection) {\n        contact = list.data[list.selection[n]];\n        if (!source) {\n          sid = String(list.selection[n]).replace(/^[^-]+-/, '');\n          if (sid && this.env.address_sources[sid]) {\n            writable = writable || (!this.env.address_sources[sid].readonly && !contact.readonly);\n            this.env.selection_sources.push(sid);\n          }\n        }\n        else {\n          writable = writable || (!source.readonly && !contact.readonly);\n        }\n\n        if (contact._type != 'group')\n          list.draggable = true;\n      }\n\n      this.env.selection_sources = $.unique(this.env.selection_sources);\n    }\n\n    // if a group is currently selected, and there is at least one contact selected\n    // thend we can enable the group-remove-selected command\n    this.enable_command('group-remove-selected', this.env.group && selected && writable);\n    this.enable_command('compose', this.env.group || selected);\n    this.enable_command('print', selected == 1);\n    this.enable_command('export-selected', 'copy', selected > 0);\n    this.enable_command('edit', id && writable);\n    this.enable_command('delete', 'move', selected && writable);\n\n    return false;\n  };\n\n  this.list_contacts = function(src, group, page)\n  {\n    var win, folder, url = {},\n      refresh = src === undefined && group === undefined && page === undefined,\n      target = window;\n\n    if (!src)\n      src = this.env.source;\n\n    if (refresh)\n      group = this.env.group;\n\n    if (page && this.current_page == page && src == this.env.source && group == this.env.group)\n      return false;\n\n    if (src != this.env.source) {\n      page = this.env.current_page = 1;\n      this.reset_qsearch();\n    }\n    else if (!refresh && group != this.env.group)\n      page = this.env.current_page = 1;\n\n    if (this.env.search_id)\n      folder = 'S'+this.env.search_id;\n    else if (!this.env.search_request)\n      folder = group ? 'G'+src+group : src;\n\n    this.env.source = src;\n    this.env.group = group;\n\n    // truncate groups listing stack\n    var index = $.inArray(this.env.group, this.env.address_group_stack);\n    if (index < 0)\n      this.env.address_group_stack = [];\n    else\n      this.env.address_group_stack = this.env.address_group_stack.slice(0,index);\n\n    // make sure the current group is on top of the stack\n    if (this.env.group) {\n      this.env.address_group_stack.push(this.env.group);\n\n      // mark the first group on the stack as selected in the directory list\n      folder = 'G'+src+this.env.address_group_stack[0];\n    }\n    else if (this.gui_objects.addresslist_title) {\n        $(this.gui_objects.addresslist_title).html(this.get_label('contacts'));\n    }\n\n    if (!this.env.search_id)\n      this.select_folder(folder, '', true);\n\n    // load contacts remotely\n    if (this.gui_objects.contactslist) {\n      this.list_contacts_remote(src, group, page);\n      return;\n    }\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      target = win;\n      url._framed = 1;\n    }\n\n    if (group)\n      url._gid = group;\n    if (page)\n      url._page = page;\n    if (src)\n      url._source = src;\n\n    // also send search request to get the correct listing\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    this.set_busy(true, 'loading');\n    this.location_href(url, target);\n  };\n\n  // send remote request to load contacts list\n  this.list_contacts_remote = function(src, group, page)\n  {\n    // clear message list first\n    this.list_contacts_clear();\n\n    // send request to server\n    var url = {}, lock = this.set_busy(true, 'loading');\n\n    if (src)\n      url._source = src;\n    if (page)\n      url._page = page;\n    if (group)\n      url._gid = group;\n\n    this.env.source = src;\n    this.env.group = group;\n\n    // also send search request to get the right records\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    this.http_request(this.env.task == 'mail' ? 'list-contacts' : 'list', url, lock);\n  };\n\n  this.list_contacts_clear = function()\n  {\n    this.contact_list.data = {};\n    this.contact_list.clear(true);\n    this.show_contentframe(false);\n    this.enable_command('delete', 'move', 'copy', 'print', false);\n    this.enable_command('compose', this.env.group);\n  };\n\n  this.set_group_prop = function(prop)\n  {\n    if (this.gui_objects.addresslist_title) {\n      var boxtitle = $(this.gui_objects.addresslist_title).html('');  // clear contents\n\n      // add link to pop back to parent group\n      if (this.env.address_group_stack.length > 1) {\n        $('<a href=\"#list\">...</a>')\n          .attr('title', this.get_label('uponelevel'))\n          .addClass('poplink')\n          .appendTo(boxtitle)\n          .click(function(e){ return ref.command('popgroup','',this); });\n        boxtitle.append('&nbsp;&raquo;&nbsp;');\n      }\n\n      boxtitle.append($('<span>').text(prop.name));\n    }\n\n    this.triggerEvent('groupupdate', prop);\n  };\n\n  // load contact record\n  this.load_contact = function(cid, action, framed)\n  {\n    var win, url = {}, target = window,\n      rec = this.contact_list ? this.contact_list.data[cid] : null;\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      url._framed = 1;\n      target = win;\n      this.show_contentframe(true);\n\n      // load dummy content, unselect selected row(s)\n      if (!cid)\n        this.contact_list.clear_selection();\n\n      this.enable_command('compose', rec && rec.email);\n      this.enable_command('export-selected', 'print', rec && rec._type != 'group');\n    }\n    else if (framed)\n      return false;\n\n    if (action && (cid || action == 'add') && !this.drag_active) {\n      if (this.env.group)\n        url._gid = this.env.group;\n\n      if (this.env.search_request)\n        url._search = this.env.search_request;\n\n      url._action = action;\n      url._source = this.env.source;\n      url._cid = cid;\n\n      this.location_href(url, target, true);\n    }\n\n    return true;\n  };\n\n  // add/delete member to/from the group\n  this.group_member_change = function(what, cid, source, gid)\n  {\n    if (what != 'add')\n      what = 'del';\n\n    var label = this.get_label(what == 'add' ? 'addingmember' : 'removingmember'),\n      lock = this.display_message(label, 'loading'),\n      post_data = {_cid: cid, _source: source, _gid: gid};\n\n    this.http_post('group-'+what+'members', post_data, lock);\n  };\n\n  this.contacts_drag_menu = function(e, to)\n  {\n    var dest = to.type == 'group' ? to.source : to.id,\n      source = this.env.source;\n\n    if (!this.env.address_sources[dest] || this.env.address_sources[dest].readonly)\n      return true;\n\n    // search result may contain contacts from many sources, but if there is only one...\n    if (source == '' && this.env.selection_sources.length == 1)\n      source = this.env.selection_sources[0];\n\n    if (to.type == 'group' && dest == source) {\n      var cid = this.contact_list.get_selection().join(',');\n      this.group_member_change('add', cid, dest, to.id);\n      return true;\n    }\n    // move action is not possible, \"redirect\" to copy if menu wasn't requested\n    else if (!this.commands.move && rcube_event.get_modifier(e) != SHIFT_KEY) {\n      this.copy_contacts(to);\n      return true;\n    }\n\n    return this.drag_menu(e, to);\n  };\n\n  // copy contact(s) to the specified target (group or directory)\n  this.copy_contacts = function(to)\n  {\n    var dest = to.type == 'group' ? to.source : to.id,\n      source = this.env.source,\n      group = this.env.group ? this.env.group : '',\n      cid = this.contact_list.get_selection().join(',');\n\n    if (!cid || !this.env.address_sources[dest] || this.env.address_sources[dest].readonly)\n      return;\n\n    // search result may contain contacts from many sources, but if there is only one...\n    if (source == '' && this.env.selection_sources.length == 1)\n      source = this.env.selection_sources[0];\n\n    // tagret is a group\n    if (to.type == 'group') {\n      if (dest == source)\n        return;\n\n      var lock = this.display_message(this.get_label('copyingcontact'), 'loading'),\n        post_data = {_cid: cid, _source: this.env.source, _to: dest, _togid: to.id, _gid: group};\n\n      this.http_post('copy', post_data, lock);\n    }\n    // target is an addressbook\n    else if (to.id != source) {\n      var lock = this.display_message(this.get_label('copyingcontact'), 'loading'),\n        post_data = {_cid: cid, _source: this.env.source, _to: to.id, _gid: group};\n\n      this.http_post('copy', post_data, lock);\n    }\n  };\n\n  // move contact(s) to the specified target (group or directory)\n  this.move_contacts = function(to)\n  {\n    var dest = to.type == 'group' ? to.source : to.id,\n      source = this.env.source,\n      group = this.env.group ? this.env.group : '';\n\n    if (!this.env.address_sources[dest] || this.env.address_sources[dest].readonly)\n      return;\n\n    // search result may contain contacts from many sources, but if there is only one...\n    if (source == '' && this.env.selection_sources.length == 1)\n      source = this.env.selection_sources[0];\n\n    if (to.type == 'group') {\n      if (dest == source)\n        return;\n\n      this._with_selected_contacts('move', {_to: dest, _togid: to.id});\n    }\n    // target is an addressbook\n    else if (to.id != source)\n      this._with_selected_contacts('move', {_to: to.id});\n  };\n\n  // delete contact(s)\n  this.delete_contacts = function()\n  {\n    var undelete = this.env.source && this.env.address_sources[this.env.source].undelete;\n\n    if (!undelete && !confirm(this.get_label('deletecontactconfirm')))\n      return;\n\n    return this._with_selected_contacts('delete');\n  };\n\n  this._with_selected_contacts = function(action, post_data)\n  {\n    var selection = this.contact_list ? this.contact_list.get_selection() : [];\n\n    // exit if no contact specified or if selection is empty\n    if (!selection.length && !this.env.cid)\n      return;\n\n    var n, a_cids = [],\n      label = action == 'delete' ? 'contactdeleting' : 'movingcontact',\n      lock = this.display_message(this.get_label(label), 'loading');\n\n    if (this.env.cid)\n      a_cids.push(this.env.cid);\n    else {\n      for (n=0; n<selection.length; n++) {\n        id = selection[n];\n        a_cids.push(id);\n        this.contact_list.remove_row(id, (n == selection.length-1));\n      }\n\n      // hide content frame if we delete the currently displayed contact\n      if (selection.length == 1)\n        this.show_contentframe(false);\n    }\n\n    if (!post_data)\n      post_data = {};\n\n    post_data._source = this.env.source;\n    post_data._from = this.env.action;\n    post_data._cid = a_cids.join(',');\n\n    if (this.env.group)\n      post_data._gid = this.env.group;\n\n    // also send search request to get the right records from the next page\n    if (this.env.search_request)\n      post_data._search = this.env.search_request;\n\n    // send request to server\n    this.http_post(action, post_data, lock)\n\n    return true;\n  };\n\n  // update a contact record in the list\n  this.update_contact_row = function(cid, cols_arr, newcid, source, data)\n  {\n    var list = this.contact_list;\n\n    cid = this.html_identifier(cid);\n\n    // when in searching mode, concat cid with the source name\n    if (!list.rows[cid]) {\n      cid = cid + '-' + source;\n      if (newcid)\n        newcid = newcid + '-' + source;\n    }\n\n    list.update_row(cid, cols_arr, newcid, true);\n    list.data[cid] = data;\n  };\n\n  // add row to contacts list\n  this.add_contact_row = function(cid, cols, classes, data)\n  {\n    if (!this.gui_objects.contactslist)\n      return false;\n\n    var c, col, list = this.contact_list,\n      row = { cols:[] };\n\n    row.id = 'rcmrow' + this.html_identifier(cid);\n    row.className = 'contact ' + (classes || '');\n\n    if (list.in_selection(cid))\n      row.className += ' selected';\n\n    // add each submitted col\n    for (c in cols) {\n      col = {};\n      col.className = String(c).toLowerCase();\n      col.innerHTML = cols[c];\n      row.cols.push(col);\n    }\n\n    // store data in list member\n    list.data[cid] = data;\n    list.insert_row(row);\n\n    this.enable_command('export', list.rowcount > 0);\n  };\n\n  this.init_contact_form = function()\n  {\n    var col;\n\n    if (this.env.coltypes) {\n      this.set_photo_actions($('#ff_photo').val());\n      for (col in this.env.coltypes)\n        this.init_edit_field(col, null);\n    }\n\n    $('.contactfieldgroup .row a.deletebutton').click(function() {\n      ref.delete_edit_field(this);\n      return false;\n    });\n\n    $('select.addfieldmenu').change(function() {\n      ref.insert_edit_field($(this).val(), $(this).attr('rel'), this);\n      this.selectedIndex = 0;\n    });\n\n    // enable date pickers on date fields\n    if ($.datepicker && this.env.date_format) {\n      $.datepicker.setDefaults({\n        dateFormat: this.env.date_format,\n        changeMonth: true,\n        changeYear: true,\n        yearRange: '-120:+10',\n        showOtherMonths: true,\n        selectOtherMonths: true\n//        onSelect: function(dateText) { $(this).focus().val(dateText); }\n      });\n      $('input.datepicker').datepicker();\n    }\n\n    // Submit search form on Enter\n    if (this.env.action == 'search')\n      $(this.gui_objects.editform).append($('<input type=\"submit\">').hide())\n        .submit(function() { $('input.mainaction').click(); return false; });\n  };\n\n  // group creation dialog\n  this.group_create = function()\n  {\n    var input = $('<input>').attr('type', 'text'),\n      content = $('<label>').text(this.get_label('namex')).append(input);\n\n    this.show_popup_dialog(content, this.get_label('newgroup'),\n      [{\n        text: this.get_label('save'),\n        'class': 'mainaction',\n        click: function() {\n          var name;\n\n          if (name = input.val()) {\n            ref.http_post('group-create', {_source: ref.env.source, _name: name},\n              ref.set_busy(true, 'loading'));\n          }\n\n          $(this).dialog('close');\n        }\n      }]\n    );\n  };\n\n  // group rename dialog\n  this.group_rename = function()\n  {\n    if (!this.env.group)\n      return;\n\n    var group_name = this.env.contactgroups['G' + this.env.source + this.env.group].name,\n      input = $('<input>').attr('type', 'text').val(group_name),\n      content = $('<label>').text(this.get_label('namex')).append(input);\n\n    this.show_popup_dialog(content, this.get_label('grouprename'),\n      [{\n        text: this.get_label('save'),\n        'class': 'mainaction',\n        click: function() {\n          var name;\n\n          if ((name = input.val()) && name != group_name) {\n            ref.http_post('group-rename', {_source: ref.env.source, _gid: ref.env.group, _name: name},\n              ref.set_busy(true, 'loading'));\n          }\n\n          $(this).dialog('close');\n        }\n      }],\n      {open: function() { input.select(); }}\n    );\n  };\n\n  this.group_delete = function()\n  {\n    if (this.env.group && confirm(this.get_label('deletegroupconfirm'))) {\n      var lock = this.set_busy(true, 'groupdeleting');\n      this.http_post('group-delete', {_source: this.env.source, _gid: this.env.group}, lock);\n    }\n  };\n\n  // callback from server upon group-delete command\n  this.remove_group_item = function(prop)\n  {\n    var key = 'G'+prop.source+prop.id;\n\n    if (this.treelist.remove(key)) {\n      this.triggerEvent('group_delete', { source:prop.source, id:prop.id });\n      delete this.env.contactfolders[key];\n      delete this.env.contactgroups[key];\n    }\n\n    this.list_contacts(prop.source, 0);\n  };\n\n  //remove selected contacts from current active group\n  this.group_remove_selected = function()\n  {\n    this.http_post('group-delmembers', {_cid: this.contact_list.selection,\n      _source: this.env.source, _gid: this.env.group});\n  };\n\n  //callback after deleting contact(s) from current group\n  this.remove_group_contacts = function(props)\n  {\n    if (this.env.group !== undefined && (this.env.group === props.gid)) {\n      var n, selection = this.contact_list.get_selection();\n      for (n=0; n<selection.length; n++) {\n        id = selection[n];\n        this.contact_list.remove_row(id, (n == selection.length-1));\n      }\n    }\n  };\n\n  // callback for creating a new contact group\n  this.insert_contact_group = function(prop)\n  {\n    prop.type = 'group';\n\n    var key = 'G'+prop.source+prop.id,\n      link = $('<a>').attr('href', '#')\n        .attr('rel', prop.source+':'+prop.id)\n        .click(function() { return ref.command('listgroup', prop, this); })\n        .html(prop.name);\n\n    this.env.contactfolders[key] = this.env.contactgroups[key] = prop;\n    this.treelist.insert({ id:key, html:link, classes:['contactgroup'] }, prop.source, 'contactgroup');\n\n    this.triggerEvent('group_insert', { id:prop.id, source:prop.source, name:prop.name, li:this.treelist.get_item(key) });\n  };\n\n  // callback for renaming a contact group\n  this.update_contact_group = function(prop)\n  {\n    var key = 'G'+prop.source+prop.id,\n      newnode = {};\n\n    // group ID has changed, replace link node and identifiers\n    if (prop.newid) {\n      var newkey = 'G'+prop.source+prop.newid,\n        newprop = $.extend({}, prop);\n\n      this.env.contactfolders[newkey] = this.env.contactfolders[key];\n      this.env.contactfolders[newkey].id = prop.newid;\n      this.env.group = prop.newid;\n\n      delete this.env.contactfolders[key];\n      delete this.env.contactgroups[key];\n\n      newprop.id = prop.newid;\n      newprop.type = 'group';\n\n      newnode.id = newkey;\n      newnode.html = $('<a>').attr('href', '#')\n        .attr('rel', prop.source+':'+prop.newid)\n        .click(function() { return ref.command('listgroup', newprop, this); })\n        .html(prop.name);\n    }\n    // update displayed group name\n    else {\n      $(this.treelist.get_item(key)).children().first().html(prop.name);\n      this.env.contactfolders[key].name = this.env.contactgroups[key].name = prop.name;\n    }\n\n    // update list node and re-sort it\n    this.treelist.update(key, newnode, true);\n\n    this.triggerEvent('group_update', { id:prop.id, source:prop.source, name:prop.name, li:this.treelist.get_item(key), newid:prop.newid });\n  };\n\n  this.update_group_commands = function()\n  {\n    var source = this.env.source != '' ? this.env.address_sources[this.env.source] : null,\n      supported = source && source.groups && !source.readonly;\n\n    this.enable_command('group-create', supported);\n    this.enable_command('group-rename', 'group-delete', supported && this.env.group);\n  };\n\n  this.init_edit_field = function(col, elem)\n  {\n    var label = this.env.coltypes[col].label;\n\n    if (!elem)\n      elem = $('.ff_' + col);\n\n    if (label)\n      elem.placeholder(label);\n  };\n\n  this.insert_edit_field = function(col, section, menu)\n  {\n    // just make pre-defined input field visible\n    var elem = $('#ff_'+col);\n    if (elem.length) {\n      elem.show().focus();\n      $(menu).children('option[value=\"'+col+'\"]').prop('disabled', true);\n    }\n    else {\n      var lastelem = $('.ff_'+col),\n        appendcontainer = $('#contactsection'+section+' .contactcontroller'+col);\n\n      if (!appendcontainer.length) {\n        var sect = $('#contactsection'+section),\n          lastgroup = $('.contactfieldgroup', sect).last();\n        appendcontainer = $('<fieldset>').addClass('contactfieldgroup contactcontroller'+col);\n        if (lastgroup.length)\n          appendcontainer.insertAfter(lastgroup);\n        else\n          sect.prepend(appendcontainer);\n      }\n\n      if (appendcontainer.length && appendcontainer.get(0).nodeName == 'FIELDSET') {\n        var input, colprop = this.env.coltypes[col],\n          input_id = 'ff_' + col + (colprop.count || 0),\n          row = $('<div>').addClass('row'),\n          cell = $('<div>').addClass('contactfieldcontent data'),\n          label = $('<div>').addClass('contactfieldlabel label');\n\n        if (colprop.subtypes_select)\n          label.html(colprop.subtypes_select);\n        else\n          label.html('<label for=\"' + input_id + '\">' + colprop.label + '</label>');\n\n        var name_suffix = colprop.limit != 1 ? '[]' : '';\n\n        if (colprop.type == 'text' || colprop.type == 'date') {\n          input = $('<input>')\n            .addClass('ff_'+col)\n            .attr({type: 'text', name: '_'+col+name_suffix, size: colprop.size, id: input_id})\n            .appendTo(cell);\n\n          this.init_edit_field(col, input);\n\n          if (colprop.type == 'date' && $.datepicker)\n            input.datepicker();\n        }\n        else if (colprop.type == 'textarea') {\n          input = $('<textarea>')\n            .addClass('ff_'+col)\n            .attr({ name: '_'+col+name_suffix, cols:colprop.size, rows:colprop.rows, id: input_id })\n            .appendTo(cell);\n\n          this.init_edit_field(col, input);\n        }\n        else if (colprop.type == 'composite') {\n          var i, childcol, cp, first, templ, cols = [], suffices = [];\n\n          // read template for composite field order\n          if ((templ = this.env[col+'_template'])) {\n            for (i=0; i < templ.length; i++) {\n              cols.push(templ[i][1]);\n              suffices.push(templ[i][2]);\n            }\n          }\n          else {  // list fields according to appearance in colprop\n            for (childcol in colprop.childs)\n              cols.push(childcol);\n          }\n\n          for (i=0; i < cols.length; i++) {\n            childcol = cols[i];\n            cp = colprop.childs[childcol];\n            input = $('<input>')\n              .addClass('ff_'+childcol)\n              .attr({ type: 'text', name: '_'+childcol+name_suffix, size: cp.size })\n              .appendTo(cell);\n            cell.append(suffices[i] || \" \");\n            this.init_edit_field(childcol, input);\n            if (!first) first = input;\n          }\n          input = first;  // set focus to the first of this composite fields\n        }\n        else if (colprop.type == 'select') {\n          input = $('<select>')\n            .addClass('ff_'+col)\n            .attr({ 'name': '_'+col+name_suffix, id: input_id })\n            .appendTo(cell);\n\n          var options = input.attr('options');\n          options[options.length] = new Option('---', '');\n          if (colprop.options)\n            $.each(colprop.options, function(i, val){ options[options.length] = new Option(val, i); });\n        }\n\n        if (input) {\n          var delbutton = $('<a href=\"#del\"></a>')\n            .addClass('contactfieldbutton deletebutton')\n            .attr({title: this.get_label('delete'), rel: col})\n            .html(this.env.delbutton)\n            .click(function(){ ref.delete_edit_field(this); return false })\n            .appendTo(cell);\n\n          row.append(label).append(cell).appendTo(appendcontainer.show());\n          input.first().focus();\n\n          // disable option if limit reached\n          if (!colprop.count) colprop.count = 0;\n          if (++colprop.count == colprop.limit && colprop.limit)\n            $(menu).children('option[value=\"'+col+'\"]').prop('disabled', true);\n        }\n      }\n    }\n  };\n\n  this.delete_edit_field = function(elem)\n  {\n    var col = $(elem).attr('rel'),\n      colprop = this.env.coltypes[col],\n      fieldset = $(elem).parents('fieldset.contactfieldgroup'),\n      addmenu = fieldset.parent().find('select.addfieldmenu');\n\n    // just clear input but don't hide the last field\n    if (--colprop.count <= 0 && colprop.visible)\n      $(elem).parent().children('input').val('').blur();\n    else {\n      $(elem).parents('div.row').remove();\n      // hide entire fieldset if no more rows\n      if (!fieldset.children('div.row').length)\n        fieldset.hide();\n    }\n\n    // enable option in add-field selector or insert it if necessary\n    if (addmenu.length) {\n      var option = addmenu.children('option[value=\"'+col+'\"]');\n      if (option.length)\n        option.prop('disabled', false);\n      else\n        option = $('<option>').attr('value', col).html(colprop.label).appendTo(addmenu);\n      addmenu.show();\n    }\n  };\n\n  this.upload_contact_photo = function(form)\n  {\n    if (form && form.elements._photo.value) {\n      this.async_upload_form(form, 'upload-photo', function(e) {\n        ref.set_busy(false, null, ref.file_upload_id);\n      });\n\n      // display upload indicator\n      this.file_upload_id = this.set_busy(true, 'uploading');\n    }\n  };\n\n  this.replace_contact_photo = function(id)\n  {\n    var img_src = id == '-del-' ? this.env.photo_placeholder :\n      this.env.comm_path + '&_action=photo&_source=' + this.env.source + '&_cid=' + (this.env.cid || 0) + '&_photo=' + id;\n\n    this.set_photo_actions(id);\n    $(this.gui_objects.contactphoto).children('img').attr('src', img_src);\n  };\n\n  this.photo_upload_end = function()\n  {\n    this.set_busy(false, null, this.file_upload_id);\n    delete this.file_upload_id;\n  };\n\n  this.set_photo_actions = function(id)\n  {\n    var n, buttons = this.buttons['upload-photo'];\n    for (n=0; buttons && n < buttons.length; n++)\n      $('a#'+buttons[n].id).html(this.get_label(id == '-del-' ? 'addphoto' : 'replacephoto'));\n\n    $('#ff_photo').val(id);\n    this.enable_command('upload-photo', this.env.coltypes.photo ? true : false);\n    this.enable_command('delete-photo', this.env.coltypes.photo && id != '-del-');\n  };\n\n  // load advanced search page\n  this.advanced_search = function()\n  {\n    var win, url = {_form: 1, _action: 'search'}, target = window;\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      url._framed = 1;\n      target = win;\n      this.contact_list.clear_selection();\n    }\n\n    this.location_href(url, target, true);\n\n    return true;\n  };\n\n  // unselect directory/group\n  this.unselect_directory = function()\n  {\n    this.select_folder('');\n    this.enable_command('search-delete', false);\n  };\n\n  // callback for creating a new saved search record\n  this.insert_saved_search = function(name, id)\n  {\n    var key = 'S'+id,\n      link = $('<a>').attr('href', '#')\n        .attr('rel', id)\n        .click(function() { return ref.command('listsearch', id, this); })\n        .html(name),\n      prop = { name:name, id:id };\n\n    this.savedsearchlist.insert({ id:key, html:link, classes:['contactsearch'] }, null, 'contactsearch');\n    this.select_folder(key,'',true);\n    this.enable_command('search-delete', true);\n    this.env.search_id = id;\n\n    this.triggerEvent('abook_search_insert', prop);\n  };\n\n  // creates a dialog for saved search\n  this.search_create = function()\n  {\n    var input = $('<input>').attr('type', 'text'),\n      content = $('<label>').text(this.get_label('namex')).append(input);\n\n    this.show_popup_dialog(content, this.get_label('searchsave'),\n      [{\n        text: this.get_label('save'),\n        'class': 'mainaction',\n        click: function() {\n          var name;\n\n          if (name = input.val()) {\n            ref.http_post('search-create', {_search: ref.env.search_request, _name: name},\n              ref.set_busy(true, 'loading'));\n          }\n\n          $(this).dialog('close');\n        }\n      }]\n    );\n  };\n\n  this.search_delete = function()\n  {\n    if (this.env.search_request) {\n      var lock = this.set_busy(true, 'savedsearchdeleting');\n      this.http_post('search-delete', {_sid: this.env.search_id}, lock);\n    }\n  };\n\n  // callback from server upon search-delete command\n  this.remove_search_item = function(id)\n  {\n    var li, key = 'S'+id;\n    if (this.savedsearchlist.remove(key)) {\n      this.triggerEvent('search_delete', { id:id, li:li });\n    }\n\n    this.env.search_id = null;\n    this.env.search_request = null;\n    this.list_contacts_clear();\n    this.reset_qsearch();\n    this.enable_command('search-delete', 'search-create', false);\n  };\n\n  this.listsearch = function(id)\n  {\n    var lock = this.set_busy(true, 'searching');\n\n    if (this.contact_list) {\n      this.list_contacts_clear();\n    }\n\n    this.reset_qsearch();\n\n    if (this.savedsearchlist) {\n      this.treelist.select('');\n      this.savedsearchlist.select('S'+id);\n    }\n    else\n      this.select_folder('S'+id, '', true);\n\n    // reset vars\n    this.env.current_page = 1;\n    this.http_request('search', {_sid: id}, lock);\n  };\n\n\n  /*********************************************************/\n  /*********        user settings methods          *********/\n  /*********************************************************/\n\n  // preferences section select and load options frame\n  this.section_select = function(list)\n  {\n    var win, id = list.get_single_selection(), target = window,\n      url = {_action: 'edit-prefs', _section: id};\n\n    if (id) {\n      if (win = this.get_frame_window(this.env.contentframe)) {\n        url._framed = 1;\n        target = win;\n      }\n      this.location_href(url, target, true);\n    }\n\n    return true;\n  };\n\n  this.identity_select = function(list)\n  {\n    var id;\n    if (id = list.get_single_selection()) {\n      this.enable_command('delete', list.rowcount > 1 && this.env.identities_level < 2);\n      this.load_identity(id, 'edit-identity');\n    }\n  };\n\n  // load identity record\n  this.load_identity = function(id, action)\n  {\n    if (action == 'edit-identity' && (!id || id == this.env.iid))\n      return false;\n\n    var win, target = window,\n      url = {_action: action, _iid: id};\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      url._framed = 1;\n      target = win;\n    }\n\n    if (id || action == 'add-identity') {\n      this.location_href(url, target, true);\n    }\n\n    return true;\n  };\n\n  this.delete_identity = function(id)\n  {\n    // exit if no identity is specified or if selection is empty\n    var selection = this.identity_list.get_selection();\n    if (!(selection.length || this.env.iid))\n      return;\n\n    if (!id)\n      id = this.env.iid ? this.env.iid : selection[0];\n\n    // submit request with appended token\n    if (id && confirm(this.get_label('deleteidentityconfirm')))\n      this.http_post('settings/delete-identity', { _iid: id }, true);\n  };\n\n  this.update_identity_row = function(id, name, add)\n  {\n    var list = this.identity_list,\n      rid = this.html_identifier(id);\n\n    if (add) {\n      list.insert_row({ id:'rcmrow'+rid, cols:[ { className:'mail', innerHTML:name } ] });\n      list.select(rid);\n    }\n    else {\n      list.update_row(rid, [ name ]);\n    }\n  };\n\n  this.update_response_row = function(response, oldkey)\n  {\n    var list = this.responses_list;\n\n    if (list && oldkey) {\n      list.update_row(oldkey, [ response.name ], response.key, true);\n    }\n    else if (list) {\n      list.insert_row({ id:'rcmrow'+response.key, cols:[ { className:'name', innerHTML:response.name } ] });\n      list.select(response.key);\n    }\n  };\n\n  this.remove_response = function(key)\n  {\n    var frame;\n\n    if (this.env.textresponses) {\n      delete this.env.textresponses[key];\n    }\n\n    if (this.responses_list) {\n      this.responses_list.remove_row(key);\n      if (this.env.contentframe && (frame = this.get_frame_window(this.env.contentframe))) {\n        frame.location.href = this.env.blankpage;\n      }\n    }\n\n    this.enable_command('delete', false);\n  };\n\n  this.remove_identity = function(id)\n  {\n    var frame, list = this.identity_list,\n      rid = this.html_identifier(id);\n\n    if (list && id) {\n      list.remove_row(rid);\n      if (this.env.contentframe && (frame = this.get_frame_window(this.env.contentframe))) {\n        frame.location.href = this.env.blankpage;\n      }\n    }\n\n    this.enable_command('delete', false);\n  };\n\n\n  /*********************************************************/\n  /*********        folder manager methods         *********/\n  /*********************************************************/\n\n  this.init_subscription_list = function()\n  {\n    var delim = RegExp.escape(this.env.delimiter);\n\n    this.last_sub_rx = RegExp('['+delim+']?[^'+delim+']+$');\n\n    this.subscription_list = new rcube_treelist_widget(this.gui_objects.subscriptionlist, {\n        selectable: true,\n        tabexit: false,\n        parent_focus: true,\n        id_prefix: 'rcmli',\n        id_encode: this.html_identifier_encode,\n        id_decode: this.html_identifier_decode,\n        searchbox: '#foldersearch'\n    });\n\n    this.subscription_list\n      .addEventListener('select', function(node) { ref.subscription_select(node.id); })\n      .addEventListener('collapse', function(node) { ref.folder_collapsed(node) })\n      .addEventListener('expand', function(node) { ref.folder_collapsed(node) })\n      .addEventListener('search', function(p) { if (p.query) ref.subscription_select(); })\n      .draggable({cancel: 'li.mailbox.root'})\n      .droppable({\n        // @todo: find better way, accept callback is executed for every folder\n        // on the list when dragging starts (and stops), this is slow, but\n        // I didn't find a method to check droptarget on over event\n        accept: function(node) {\n          if (!$(node).is('.mailbox'))\n            return false;\n\n          var source_folder = ref.folder_id2name($(node).attr('id')),\n            dest_folder = ref.folder_id2name(this.id),\n            source = ref.env.subscriptionrows[source_folder],\n            dest = ref.env.subscriptionrows[dest_folder];\n\n          return source && !source[2]\n            && dest_folder != source_folder.replace(ref.last_sub_rx, '')\n            && !dest_folder.startsWith(source_folder + ref.env.delimiter);\n        },\n        drop: function(e, ui) {\n          var source = ref.folder_id2name(ui.draggable.attr('id')),\n            dest = ref.folder_id2name(this.id);\n\n          ref.subscription_move_folder(source, dest);\n        }\n      });\n  };\n\n  this.folder_id2name = function(id)\n  {\n    return id ? ref.html_identifier_decode(id.replace(/^rcmli/, '')) : null;\n  };\n\n  this.subscription_select = function(id)\n  {\n    var folder;\n\n    if (id && id != '*' && (folder = this.env.subscriptionrows[id])) {\n      this.env.mailbox = id;\n      this.show_folder(id);\n      this.enable_command('delete-folder', !folder[2]);\n    }\n    else {\n      this.env.mailbox = null;\n      this.show_contentframe(false);\n      this.enable_command('delete-folder', 'purge', false);\n    }\n  };\n\n  this.subscription_move_folder = function(from, to)\n  {\n    if (from && to !== null && from != to && to != from.replace(this.last_sub_rx, '')) {\n      var path = from.split(this.env.delimiter),\n        basename = path.pop(),\n        newname = to === '' || to === '*' ? basename : to + this.env.delimiter + basename;\n\n      if (newname != from) {\n        this.http_post('rename-folder', {_folder_oldname: from, _folder_newname: newname},\n          this.set_busy(true, 'foldermoving'));\n      }\n    }\n  };\n\n  // tell server to create and subscribe a new mailbox\n  this.create_folder = function()\n  {\n    this.show_folder('', this.env.mailbox);\n  };\n\n  // delete a specific mailbox with all its messages\n  this.delete_folder = function(name)\n  {\n    if (!name)\n      name = this.env.mailbox;\n\n    if (name && confirm(this.get_label('deletefolderconfirm'))) {\n      this.http_post('delete-folder', {_mbox: name}, this.set_busy(true, 'folderdeleting'));\n    }\n  };\n\n  // Add folder row to the table and initialize it\n  this.add_folder_row = function (id, name, display_name, is_protected, subscribed, class_name, refrow, subfolders)\n  {\n    if (!this.gui_objects.subscriptionlist)\n      return false;\n\n    // reset searching\n    if (this.subscription_list.is_search()) {\n      this.subscription_select();\n      this.subscription_list.reset_search();\n    }\n\n    // disable drag-n-drop temporarily\n    this.subscription_list.draggable('destroy').droppable('destroy');\n\n    var row, n, tmp, tmp_name, rowid, collator, pos, p, parent = '',\n      folders = [], list = [], slist = [],\n      list_element = $(this.gui_objects.subscriptionlist);\n      row = refrow ? refrow : $($('li', list_element).get(1)).clone(true);\n\n    if (!row.length) {\n      // Refresh page if we don't have a table row to clone\n      this.goto_url('folders');\n      return false;\n    }\n\n    // set ID, reset css class\n    row.attr({id: 'rcmli' + this.html_identifier_encode(id), 'class': class_name});\n\n    if (!refrow || !refrow.length) {\n      // remove old data, subfolders and toggle\n      $('ul,div.treetoggle', row).remove();\n      row.removeData('filtered');\n    }\n\n    // set folder name\n    $('a:first', row).text(display_name);\n\n    // update subscription checkbox\n    $('input[name=\"_subscribed[]\"]:first', row).val(id)\n      .prop({checked: subscribed ? true : false, disabled: is_protected ? true : false});\n\n    // add to folder/row-ID map\n    this.env.subscriptionrows[id] = [name, display_name, false];\n\n    // copy folders data to an array for sorting\n    $.each(this.env.subscriptionrows, function(k, v) { v[3] = k; folders.push(v); });\n\n    try {\n      // use collator if supported (FF29, IE11, Opera15, Chrome24)\n      collator = new Intl.Collator(this.env.locale.replace('_', '-'));\n    }\n    catch (e) {};\n\n    // sort folders\n    folders.sort(function(a, b) {\n      var i, f1, f2,\n        path1 = a[0].split(ref.env.delimiter),\n        path2 = b[0].split(ref.env.delimiter),\n        len = path1.length;\n\n      for (i=0; i<len; i++) {\n        f1 = path1[i];\n        f2 = path2[i];\n\n        if (f1 !== f2) {\n          if (f2 === undefined)\n            return 1;\n          if (collator)\n            return collator.compare(f1, f2);\n          else\n            return f1 < f2 ? -1 : 1;\n        }\n        else if (i == len-1) {\n          return -1\n        }\n      }\n    });\n\n    for (n in folders) {\n      p = folders[n][3];\n      // protected folder\n      if (folders[n][2]) {\n        tmp_name = p + this.env.delimiter;\n        // prefix namespace cannot have subfolders (#1488349)\n        if (tmp_name == this.env.prefix_ns)\n          continue;\n        slist.push(p);\n        tmp = tmp_name;\n      }\n      // protected folder's child\n      else if (tmp && p.startsWith(tmp))\n        slist.push(p);\n      // other\n      else {\n        list.push(p);\n        tmp = null;\n      }\n    }\n\n    // check if subfolder of a protected folder\n    for (n=0; n<slist.length; n++) {\n      if (id.startsWith(slist[n] + this.env.delimiter))\n        rowid = slist[n];\n    }\n\n    // find folder position after sorting\n    for (n=0; !rowid && n<list.length; n++) {\n      if (n && list[n] == id)\n        rowid = list[n-1];\n    }\n\n    // add row to the table\n    if (rowid && (n = this.subscription_list.get_item(rowid, true))) {\n      // find parent folder\n      if (pos = id.lastIndexOf(this.env.delimiter)) {\n        parent = id.substring(0, pos);\n        parent = this.subscription_list.get_item(parent, true);\n\n        // add required tree elements to the parent if not already there\n        if (!$('div.treetoggle', parent).length) {\n          $('<div>&nbsp;</div>').addClass('treetoggle collapsed').appendTo(parent);\n        }\n        if (!$('ul', parent).length) {\n          $('<ul>').css('display', 'none').appendTo(parent);\n        }\n      }\n\n      if (parent && n == parent) {\n        $('ul:first', parent).append(row);\n      }\n      else {\n        while (p = $(n).parent().parent().get(0)) {\n          if (parent && p == parent)\n            break;\n          if (!$(p).is('li.mailbox'))\n            break;\n          n = p;\n        }\n\n        $(n).after(row);\n      }\n    }\n    else {\n      list_element.append(row);\n    }\n\n    // add subfolders\n    $.extend(this.env.subscriptionrows, subfolders || {});\n\n    // update list widget\n    this.subscription_list.reset(true);\n    this.subscription_select();\n\n    // expand parent\n    if (parent) {\n      this.subscription_list.expand(this.folder_id2name(parent.id));\n    }\n\n    row = row.show().get(0);\n    if (row.scrollIntoView)\n      row.scrollIntoView();\n\n    return row;\n  };\n\n  // replace an existing table row with a new folder line (with subfolders)\n  this.replace_folder_row = function(oldid, id, name, display_name, is_protected, class_name)\n  {\n    if (!this.gui_objects.subscriptionlist) {\n      if (this.is_framed()) {\n        // @FIXME: for some reason this 'parent' variable need to be prefixed with 'window.'\n        return window.parent.rcmail.replace_folder_row(oldid, id, name, display_name, is_protected, class_name);\n      }\n\n      return false;\n    }\n\n    // reset searching\n    if (this.subscription_list.is_search()) {\n      this.subscription_select();\n      this.subscription_list.reset_search();\n    }\n\n    var subfolders = {},\n      row = this.subscription_list.get_item(oldid, true),\n      parent = $(row).parent(),\n      old_folder = this.env.subscriptionrows[oldid],\n      prefix_len_id = oldid.length,\n      prefix_len_name = old_folder[0].length,\n      subscribed = $('input[name=\"_subscribed[]\"]:first', row).prop('checked');\n\n    // no renaming, only update class_name\n    if (oldid == id) {\n      $(row).attr('class', class_name || '');\n      return;\n    }\n\n    // update subfolders\n    $('li', row).each(function() {\n      var fname = ref.folder_id2name(this.id),\n        folder = ref.env.subscriptionrows[fname],\n        newid = id + fname.slice(prefix_len_id);\n\n      this.id = 'rcmli' + ref.html_identifier_encode(newid);\n      $('input[name=\"_subscribed[]\"]:first', this).val(newid);\n      folder[0] = name + folder[0].slice(prefix_len_name);\n\n      subfolders[newid] = folder;\n      delete ref.env.subscriptionrows[fname];\n    });\n\n    // get row off the list\n    row = $(row).detach();\n\n    delete this.env.subscriptionrows[oldid];\n\n    // remove parent list/toggle elements if not needed\n    if (parent.get(0) != this.gui_objects.subscriptionlist && !$('li', parent).length) {\n      $('ul,div.treetoggle', parent.parent()).remove();\n    }\n\n    // move the existing table row\n    this.add_folder_row(id, name, display_name, is_protected, subscribed, class_name, row, subfolders);\n  };\n\n  // remove the table row of a specific mailbox from the table\n  this.remove_folder_row = function(folder)\n  {\n    // reset searching\n    if (this.subscription_list.is_search()) {\n      this.subscription_select();\n      this.subscription_list.reset_search();\n    }\n\n    var list = [], row = this.subscription_list.get_item(folder, true);\n\n    // get subfolders if any\n    $('li', row).each(function() { list.push(ref.folder_id2name(this.id)); });\n\n    // remove folder row (and subfolders)\n    this.subscription_list.remove(folder);\n\n    // update local list variable\n    list.push(folder);\n    $.each(list, function(i, v) { delete ref.env.subscriptionrows[v]; });\n  };\n\n  this.subscribe = function(folder)\n  {\n    if (folder) {\n      var lock = this.display_message(this.get_label('foldersubscribing'), 'loading');\n      this.http_post('subscribe', {_mbox: folder}, lock);\n    }\n  };\n\n  this.unsubscribe = function(folder)\n  {\n    if (folder) {\n      var lock = this.display_message(this.get_label('folderunsubscribing'), 'loading');\n      this.http_post('unsubscribe', {_mbox: folder}, lock);\n    }\n  };\n\n  // when user select a folder in manager\n  this.show_folder = function(folder, path, force)\n  {\n    var win, target = window,\n      url = '&_action=edit-folder&_mbox='+urlencode(folder);\n\n    if (path)\n      url += '&_path='+urlencode(path);\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      target = win;\n      url += '&_framed=1';\n    }\n\n    if (String(target.location.href).indexOf(url) >= 0 && !force)\n      this.show_contentframe(true);\n    else\n      this.location_href(this.env.comm_path+url, target, true);\n  };\n\n  // disables subscription checkbox (for protected folder)\n  this.disable_subscription = function(folder)\n  {\n    var row = this.subscription_list.get_item(folder, true);\n    if (row)\n      $('input[name=\"_subscribed[]\"]:first', row).prop('disabled', true);\n  };\n\n  this.folder_size = function(folder)\n  {\n    var lock = this.set_busy(true, 'loading');\n    this.http_post('folder-size', {_mbox: folder}, lock);\n  };\n\n  this.folder_size_update = function(size)\n  {\n    $('#folder-size').replaceWith(size);\n  };\n\n  // filter folders by namespace\n  this.folder_filter = function(prefix)\n  {\n    this.subscription_list.reset_search();\n\n    this.subscription_list.container.children('li').each(function() {\n      var i, folder = ref.folder_id2name(this.id);\n      // show all folders\n      if (prefix == '---') {\n      }\n      // got namespace prefix\n      else if (prefix) {\n        if (folder !== prefix) {\n          $(this).data('filtered', true).hide();\n          return\n        }\n      }\n      // no namespace prefix, filter out all other namespaces\n      else {\n        // first get all namespace roots\n        for (i in ref.env.ns_roots) {\n          if (folder === ref.env.ns_roots[i]) {\n            $(this).data('filtered', true).hide();\n            return;\n          }\n        }\n      }\n\n      $(this).removeData('filtered').show();\n    });\n  };\n\n  /*********************************************************/\n  /*********           GUI functionality           *********/\n  /*********************************************************/\n\n  var init_button = function(cmd, prop)\n  {\n    var elm = document.getElementById(prop.id);\n    if (!elm)\n      return;\n\n    var preload = false;\n    if (prop.type == 'image') {\n      elm = elm.parentNode;\n      preload = true;\n    }\n\n    elm._command = cmd;\n    elm._id = prop.id;\n    if (prop.sel) {\n      elm.onmousedown = function(e) { return ref.button_sel(this._command, this._id); };\n      elm.onmouseup = function(e) { return ref.button_out(this._command, this._id); };\n      if (preload)\n        new Image().src = prop.sel;\n    }\n    if (prop.over) {\n      elm.onmouseover = function(e) { return ref.button_over(this._command, this._id); };\n      elm.onmouseout = function(e) { return ref.button_out(this._command, this._id); };\n      if (preload)\n        new Image().src = prop.over;\n    }\n  };\n\n  // set event handlers on registered buttons\n  this.init_buttons = function()\n  {\n    for (var cmd in this.buttons) {\n      if (typeof cmd !== 'string')\n        continue;\n\n      for (var i=0; i<this.buttons[cmd].length; i++) {\n        init_button(cmd, this.buttons[cmd][i]);\n      }\n    }\n  };\n\n  // set button to a specific state\n  this.set_button = function(command, state)\n  {\n    var n, button, obj, $obj, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      obj = document.getElementById(button.id);\n\n      if (!obj || button.status === state)\n        continue;\n\n      // get default/passive setting of the button\n      if (button.type == 'image' && !button.status) {\n        button.pas = obj._original_src ? obj._original_src : obj.src;\n        // respect PNG fix on IE browsers\n        if (obj.runtimeStyle && obj.runtimeStyle.filter && obj.runtimeStyle.filter.match(/src=['\"]([^'\"]+)['\"]/))\n          button.pas = RegExp.$1;\n      }\n      else if (!button.status)\n        button.pas = String(obj.className);\n\n      button.status = state;\n\n      // set image according to button state\n      if (button.type == 'image' && button[state]) {\n        obj.src = button[state];\n      }\n      // set class name according to button state\n      else if (button[state] !== undefined) {\n        obj.className = button[state];\n      }\n      // disable/enable input buttons\n      if (button.type == 'input') {\n        obj.disabled = state == 'pas';\n      }\n      else if (button.type == 'uibutton') {\n        button.status = state;\n        $(obj).button('option', 'disabled', state == 'pas');\n      }\n      else {\n        $obj = $(obj);\n        $obj\n          .attr('tabindex', state == 'pas' || state == 'sel' ? '-1' : ($obj.attr('data-tabindex') || '0'))\n          .attr('aria-disabled', state == 'pas' || state == 'sel' ? 'true' : 'false');\n      }\n    }\n  };\n\n  // display a specific alttext\n  this.set_alttext = function(command, label)\n  {\n    var n, button, obj, link, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      obj = document.getElementById(button.id);\n\n      if (button.type == 'image' && obj) {\n        obj.setAttribute('alt', this.get_label(label));\n        if ((link = obj.parentNode) && link.tagName.toLowerCase() == 'a')\n          link.setAttribute('title', this.get_label(label));\n      }\n      else if (obj)\n        obj.setAttribute('title', this.get_label(label));\n    }\n  };\n\n  // mouse over button\n  this.button_over = function(command, id)\n  {\n    this.button_event(command, id, 'over');\n  };\n\n  // mouse down on button\n  this.button_sel = function(command, id)\n  {\n    this.button_event(command, id, 'sel');\n  };\n\n  // mouse out of button\n  this.button_out = function(command, id)\n  {\n    this.button_event(command, id, 'act');\n  };\n\n  // event of button\n  this.button_event = function(command, id, event)\n  {\n    var n, button, obj, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      if (button.id == id && button.status == 'act') {\n        if (button[event] && (obj = document.getElementById(button.id))) {\n          obj[button.type == 'image' ? 'src' : 'className'] = button[event];\n        }\n\n        if (event == 'sel') {\n          this.buttons_sel[id] = command;\n        }\n      }\n    }\n  };\n\n  // write to the document/window title\n  this.set_pagetitle = function(title)\n  {\n    if (title && document.title)\n      document.title = title;\n  };\n\n  // display a system message, list of types in common.css (below #message definition)\n  this.display_message = function(msg, type, timeout, key)\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.display_message(msg, type, timeout);\n\n    if (!this.gui_objects.message) {\n      // save message in order to display after page loaded\n      if (type != 'loading')\n        this.pending_message = [msg, type, timeout, key];\n      return 1;\n    }\n\n    if (!type)\n      type = 'notice';\n\n    if (!key)\n      key = this.html_identifier(msg);\n\n    var date = new Date(),\n      id = type + date.getTime();\n\n    if (!timeout) {\n      switch (type) {\n        case 'error':\n        case 'warning':\n          timeout = this.message_time * 2;\n          break;\n\n        case 'uploading':\n          timeout = 0;\n          break;\n\n        default:\n          timeout = this.message_time;\n      }\n    }\n\n    if (type == 'loading') {\n      key = 'loading';\n      timeout = this.env.request_timeout * 1000;\n      if (!msg)\n        msg = this.get_label('loading');\n    }\n\n    // The same message is already displayed\n    if (this.messages[key]) {\n      // replace label\n      if (this.messages[key].obj)\n        this.messages[key].obj.html(msg);\n      // store label in stack\n      if (type == 'loading') {\n        this.messages[key].labels.push({'id': id, 'msg': msg});\n      }\n      // add element and set timeout\n      this.messages[key].elements.push(id);\n      setTimeout(function() { ref.hide_message(id, type == 'loading'); }, timeout);\n      return id;\n    }\n\n    // create DOM object and display it\n    var obj = $('<div>').addClass(type).html(msg).data('key', key),\n      cont = $(this.gui_objects.message).append(obj).show();\n\n    this.messages[key] = {'obj': obj, 'elements': [id]};\n\n    if (type == 'loading') {\n      this.messages[key].labels = [{'id': id, 'msg': msg}];\n    }\n    else if (type != 'uploading') {\n      obj.click(function() { return ref.hide_message(obj); })\n        .attr('role', 'alert');\n    }\n\n    this.triggerEvent('message', { message:msg, type:type, timeout:timeout, object:obj });\n\n    if (timeout > 0)\n      setTimeout(function() { ref.hide_message(id, type != 'loading'); }, timeout);\n\n    return id;\n  };\n\n  // make a message to disapear\n  this.hide_message = function(obj, fade)\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.hide_message(obj, fade);\n\n    if (!this.gui_objects.message)\n      return;\n\n    var k, n, i, o, m = this.messages;\n\n    // Hide message by object, don't use for 'loading'!\n    if (typeof obj === 'object') {\n      o = $(obj);\n      k = o.data('key');\n      this.hide_message_object(o, fade);\n      if (m[k])\n        delete m[k];\n    }\n    // Hide message by id\n    else {\n      for (k in m) {\n        for (n in m[k].elements) {\n          if (m[k] && m[k].elements[n] == obj) {\n            m[k].elements.splice(n, 1);\n            // hide DOM element if last instance is removed\n            if (!m[k].elements.length) {\n              this.hide_message_object(m[k].obj, fade);\n              delete m[k];\n            }\n            // set pending action label for 'loading' message\n            else if (k == 'loading') {\n              for (i in m[k].labels) {\n                if (m[k].labels[i].id == obj) {\n                  delete m[k].labels[i];\n                }\n                else {\n                  o = m[k].labels[i].msg;\n                  m[k].obj.html(o);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  // hide message object and remove from the DOM\n  this.hide_message_object = function(o, fade)\n  {\n    if (fade)\n      o.fadeOut(600, function() {$(this).remove(); });\n    else\n      o.hide().remove();\n  };\n\n  // remove all messages immediately\n  this.clear_messages = function()\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.clear_messages();\n\n    var k, n, m = this.messages;\n\n    for (k in m)\n      for (n in m[k].elements)\n        if (m[k].obj)\n          this.hide_message_object(m[k].obj);\n\n    this.messages = {};\n  };\n\n  // display uploading message with progress indicator\n  // data should contain: name, total, current, percent, text\n  this.display_progress = function(data)\n  {\n    if (!data || !data.name)\n      return;\n\n    var msg = this.messages['progress' + data.name];\n\n    if (!data.label)\n      data.label = this.get_label('uploadingmany');\n\n    if (!msg) {\n      if (!data.percent || data.percent < 100)\n        this.display_message(data.label, 'uploading', 0, 'progress' + data.name);\n      return;\n    }\n\n    if (!data.total || data.percent >= 100) {\n      this.hide_message(msg.obj);\n      return;\n    }\n\n    if (data.text)\n      data.label += ' ' + data.text;\n\n    msg.obj.text(data.label);\n  };\n\n  // open a jquery UI dialog with the given content\n  this.show_popup_dialog = function(content, title, buttons, options)\n  {\n    // forward call to parent window\n    if (this.is_framed()) {\n      return parent.rcmail.show_popup_dialog(content, title, buttons, options);\n    }\n\n    var popup = $('<div class=\"popup\">');\n\n    if (typeof content == 'object')\n      popup.append(content);\n    else\n      popup.html(content);\n\n    options = $.extend({\n        title: title,\n        buttons: buttons,\n        modal: true,\n        resizable: true,\n        width: 500,\n        close: function(event, ui) { $(this).remove(); }\n      }, options || {});\n\n    popup.dialog(options);\n\n    // resize and center popup\n    var win = $(window), w = win.width(), h = win.height(),\n      width = popup.width(), height = popup.height();\n\n    popup.dialog('option', {\n      height: Math.min(h - 40, height + 75 + (buttons ? 50 : 0)),\n      width: Math.min(w - 20, width + 36)\n    });\n\n    // assign special classes to dialog buttons\n    $.each(options.button_classes || [], function(i, v) {\n      if (v) $($('.ui-dialog-buttonpane button.ui-button', popup.parent()).get(i)).addClass(v);\n    });\n\n    return popup;\n  };\n\n  // enable/disable buttons for page shifting\n  this.set_page_buttons = function()\n  {\n    this.enable_command('nextpage', 'lastpage', this.env.pagecount > this.env.current_page);\n    this.enable_command('previouspage', 'firstpage', this.env.current_page > 1);\n\n    this.update_pagejumper();\n  };\n\n  // mark a mailbox as selected and set environment variable\n  this.select_folder = function(name, prefix, encode)\n  {\n    if (this.savedsearchlist) {\n      this.savedsearchlist.select('');\n    }\n\n    if (this.treelist) {\n      this.treelist.select(name);\n    }\n    else if (this.gui_objects.folderlist) {\n      $('li.selected', this.gui_objects.folderlist).removeClass('selected');\n      $(this.get_folder_li(name, prefix, encode)).addClass('selected');\n\n      // trigger event hook\n      this.triggerEvent('selectfolder', { folder:name, prefix:prefix });\n    }\n  };\n\n  // adds a class to selected folder\n  this.mark_folder = function(name, class_name, prefix, encode)\n  {\n    $(this.get_folder_li(name, prefix, encode)).addClass(class_name);\n    this.triggerEvent('markfolder', {folder: name, mark: class_name, status: true});\n  };\n\n  // adds a class to selected folder\n  this.unmark_folder = function(name, class_name, prefix, encode)\n  {\n    $(this.get_folder_li(name, prefix, encode)).removeClass(class_name);\n    this.triggerEvent('markfolder', {folder: name, mark: class_name, status: false});\n  };\n\n  // helper method to find a folder list item\n  this.get_folder_li = function(name, prefix, encode)\n  {\n    if (!prefix)\n      prefix = 'rcmli';\n\n    if (this.gui_objects.folderlist) {\n      name = this.html_identifier(name, encode);\n      return document.getElementById(prefix+name);\n    }\n  };\n\n  // for reordering column array (Konqueror workaround)\n  // and for setting some message list global variables\n  this.set_message_coltypes = function(listcols, repl, smart_col)\n  {\n    var list = this.message_list,\n      thead = list ? list.thead : null,\n      repl, cell, col, n, len, tr;\n\n    this.env.listcols = listcols;\n\n    if (!this.env.coltypes)\n      this.env.coltypes = {};\n\n    // replace old column headers\n    if (thead) {\n      if (repl) {\n        thead.innerHTML = '';\n        tr = document.createElement('tr');\n\n        for (c=0, len=repl.length; c < len; c++) {\n          cell = document.createElement('th');\n          cell.innerHTML = repl[c].html || '';\n          if (repl[c].id) cell.id = repl[c].id;\n          if (repl[c].className) cell.className = repl[c].className;\n          tr.appendChild(cell);\n        }\n        thead.appendChild(tr);\n      }\n\n      for (n=0, len=this.env.listcols.length; n<len; n++) {\n        col = this.env.listcols[n];\n        if ((cell = thead.rows[0].cells[n]) && (col == 'from' || col == 'to' || col == 'fromto')) {\n          $(cell).attr('rel', col).find('span,a').text(this.get_label(col == 'fromto' ? smart_col : col));\n        }\n      }\n    }\n\n    this.env.subject_col = null;\n    this.env.flagged_col = null;\n    this.env.status_col = null;\n\n    if (this.env.coltypes.folder)\n      this.env.coltypes.folder.hidden = !(this.env.search_request || this.env.search_id) || this.env.search_scope == 'base';\n\n    if ((n = $.inArray('subject', this.env.listcols)) >= 0) {\n      this.env.subject_col = n;\n      if (list)\n        list.subject_col = n;\n    }\n    if ((n = $.inArray('flag', this.env.listcols)) >= 0)\n      this.env.flagged_col = n;\n    if ((n = $.inArray('status', this.env.listcols)) >= 0)\n      this.env.status_col = n;\n\n    if (list) {\n      list.hide_column('folder', (this.env.coltypes.folder && this.env.coltypes.folder.hidden) || $.inArray('folder', this.env.listcols) < 0);\n      list.init_header();\n    }\n  };\n\n  // replace content of row count display\n  this.set_rowcount = function(text, mbox)\n  {\n    // #1487752\n    if (mbox && mbox != this.env.mailbox)\n      return false;\n\n    $(this.gui_objects.countdisplay).html(text);\n\n    // update page navigation buttons\n    this.set_page_buttons();\n  };\n\n  // replace content of mailboxname display\n  this.set_mailboxname = function(content)\n  {\n    if (this.gui_objects.mailboxname && content)\n      this.gui_objects.mailboxname.innerHTML = content;\n  };\n\n  // replace content of quota display\n  this.set_quota = function(content)\n  {\n    if (this.gui_objects.quotadisplay && content && content.type == 'text')\n      $(this.gui_objects.quotadisplay).text((content.percent||0) + '%').attr('title', content.title);\n\n    this.triggerEvent('setquota', content);\n    this.env.quota_content = content;\n  };\n\n  // update trash folder state\n  this.set_trash_count = function(count)\n  {\n    this[(count ? 'un' : '') + 'mark_folder'](this.env.trash_mailbox, 'empty', '', true);\n  };\n\n  // update the mailboxlist\n  this.set_unread_count = function(mbox, count, set_title, mark)\n  {\n    if (!this.gui_objects.mailboxlist)\n      return false;\n\n    this.env.unread_counts[mbox] = count;\n    this.set_unread_count_display(mbox, set_title);\n\n    if (mark)\n      this.mark_folder(mbox, mark, '', true);\n    else if (!count)\n      this.unmark_folder(mbox, 'recent', '', true);\n  };\n\n  // update the mailbox count display\n  this.set_unread_count_display = function(mbox, set_title)\n  {\n    var reg, link, text_obj, item, mycount, childcount, div;\n\n    if (item = this.get_folder_li(mbox, '', true)) {\n      mycount = this.env.unread_counts[mbox] ? this.env.unread_counts[mbox] : 0;\n      link = $(item).children('a').eq(0);\n      text_obj = link.children('span.unreadcount');\n      if (!text_obj.length && mycount)\n        text_obj = $('<span>').addClass('unreadcount').appendTo(link);\n      reg = /\\s+\\([0-9]+\\)$/i;\n\n      childcount = 0;\n      if ((div = item.getElementsByTagName('div')[0]) &&\n          div.className.match(/collapsed/)) {\n        // add children's counters\n        for (var k in this.env.unread_counts)\n          if (k.startsWith(mbox + this.env.delimiter))\n            childcount += this.env.unread_counts[k];\n      }\n\n      if (mycount && text_obj.length)\n        text_obj.html(this.env.unreadwrap.replace(/%[sd]/, mycount));\n      else if (text_obj.length)\n        text_obj.remove();\n\n      // set parent's display\n      reg = new RegExp(RegExp.escape(this.env.delimiter) + '[^' + RegExp.escape(this.env.delimiter) + ']+$');\n      if (mbox.match(reg))\n        this.set_unread_count_display(mbox.replace(reg, ''), false);\n\n      // set the right classes\n      if ((mycount+childcount)>0)\n        $(item).addClass('unread');\n      else\n        $(item).removeClass('unread');\n    }\n\n    // set unread count to window title\n    reg = /^\\([0-9]+\\)\\s+/i;\n    if (set_title && document.title) {\n      var new_title = '',\n        doc_title = String(document.title);\n\n      if (mycount && doc_title.match(reg))\n        new_title = doc_title.replace(reg, '('+mycount+') ');\n      else if (mycount)\n        new_title = '('+mycount+') '+doc_title;\n      else\n        new_title = doc_title.replace(reg, '');\n\n      this.set_pagetitle(new_title);\n    }\n  };\n\n  // display fetched raw headers\n  this.set_headers = function(content)\n  {\n    if (this.gui_objects.all_headers_row && this.gui_objects.all_headers_box && content)\n      $(this.gui_objects.all_headers_box).html(content).show();\n  };\n\n  // display all-headers row and fetch raw message headers\n  this.show_headers = function(props, elem)\n  {\n    if (!this.gui_objects.all_headers_row || !this.gui_objects.all_headers_box || !this.env.uid)\n      return;\n\n    $(elem).removeClass('show-headers').addClass('hide-headers');\n    $(this.gui_objects.all_headers_row).show();\n    elem.onclick = function() { ref.command('hide-headers', '', elem); };\n\n    // fetch headers only once\n    if (!this.gui_objects.all_headers_box.innerHTML) {\n      this.http_post('headers', {_uid: this.env.uid, _mbox: this.env.mailbox},\n        this.display_message(this.get_label('loading'), 'loading')\n      );\n    }\n  };\n\n  // hide all-headers row\n  this.hide_headers = function(props, elem)\n  {\n    if (!this.gui_objects.all_headers_row || !this.gui_objects.all_headers_box)\n      return;\n\n    $(elem).removeClass('hide-headers').addClass('show-headers');\n    $(this.gui_objects.all_headers_row).hide();\n    elem.onclick = function() { ref.command('show-headers', '', elem); };\n  };\n\n  // create folder selector popup, position and display it\n  this.folder_selector = function(event, callback)\n  {\n    var container = this.folder_selector_element;\n\n    if (!container) {\n      var rows = [],\n        delim = this.env.delimiter,\n        ul = $('<ul class=\"toolbarmenu\">'),\n        link = document.createElement('a');\n\n      container = $('<div id=\"folder-selector\" class=\"popupmenu\"></div>');\n      link.href = '#';\n      link.className = 'icon';\n\n      // loop over sorted folders list\n      $.each(this.env.mailboxes_list, function() {\n        var n = 0, s = 0,\n          folder = ref.env.mailboxes[this],\n          id = folder.id,\n          a = $(link.cloneNode(false)),\n          row = $('<li>');\n\n        if (folder.virtual)\n          a.addClass('virtual').attr('aria-disabled', 'true').attr('tabindex', '-1');\n        else\n          a.addClass('active').data('id', folder.id);\n\n        if (folder['class'])\n          a.addClass(folder['class']);\n\n        // calculate/set indentation level\n        while ((s = id.indexOf(delim, s)) >= 0) {\n          n++; s++;\n        }\n        a.css('padding-left', n ? (n * 16) + 'px' : 0);\n\n        // add folder name element\n        a.append($('<span>').text(folder.name));\n\n        row.append(a);\n        rows.push(row);\n      });\n\n      ul.append(rows).appendTo(container);\n\n      // temporarily show element to calculate its size\n      container.css({left: '-1000px', top: '-1000px'})\n        .appendTo($('body')).show();\n\n      // set max-height if the list is long\n      if (rows.length > 10)\n        container.css('max-height', $('li', container)[0].offsetHeight * 10 + 9);\n\n      // register delegate event handler for folder item clicks\n      container.on('click', 'a.active', function(e){\n        container.data('callback')($(this).data('id'));\n        return false;\n      });\n\n      this.folder_selector_element = container;\n    }\n\n    container.data('callback', callback);\n\n    // position menu on the screen\n    this.show_menu('folder-selector', true, event);\n  };\n\n\n  /***********************************************/\n  /*********    popup menu functions     *********/\n  /***********************************************/\n\n  // Show/hide a specific popup menu\n  this.show_menu = function(prop, show, event)\n  {\n    var name = typeof prop == 'object' ? prop.menu : prop,\n      obj = $('#'+name),\n      ref = event && event.target ? $(event.target) : $(obj.attr('rel') || '#'+name+'link'),\n      keyboard = rcube_event.is_keyboard(event),\n      align = obj.attr('data-align') || '',\n      stack = false;\n\n    // find \"real\" button element\n    if (ref.get(0).tagName != 'A' && ref.closest('a').length)\n      ref = ref.closest('a');\n\n    if (typeof prop == 'string')\n      prop = { menu:name };\n\n    // let plugins or skins provide the menu element\n    if (!obj.length) {\n      obj = this.triggerEvent('menu-get', { name:name, props:prop, originalEvent:event });\n    }\n\n    if (!obj || !obj.length) {\n      // just delegate the action to subscribers\n      return this.triggerEvent(show === false ? 'menu-close' : 'menu-open', { name:name, props:prop, originalEvent:event });\n    }\n\n    // move element to top for proper absolute positioning\n    obj.appendTo(document.body);\n\n    if (typeof show == 'undefined')\n      show = obj.is(':visible') ? false : true;\n\n    if (show && ref.length) {\n      var win = $(window),\n        pos = ref.offset(),\n        above = align.indexOf('bottom') >= 0;\n\n      stack = ref.attr('role') == 'menuitem' || ref.closest('[role=menuitem]').length > 0;\n\n      ref.offsetWidth = ref.outerWidth();\n      ref.offsetHeight = ref.outerHeight();\n      if (!above && pos.top + ref.offsetHeight + obj.height() > win.height()) {\n        above = true;\n      }\n      if (align.indexOf('right') >= 0) {\n        pos.left = pos.left + ref.outerWidth() - obj.width();\n      }\n      else if (stack) {\n        pos.left = pos.left + ref.offsetWidth - 5;\n        pos.top -= ref.offsetHeight;\n      }\n      if (pos.left + obj.width() > win.width()) {\n        pos.left = win.width() - obj.width() - 12;\n      }\n      pos.top = Math.max(0, pos.top + (above ? -obj.height() : ref.offsetHeight));\n      obj.css({ left:pos.left+'px', top:pos.top+'px' });\n    }\n\n    // add menu to stack\n    if (show) {\n      // truncate stack down to the one containing the ref link\n      for (var i = this.menu_stack.length - 1; stack && i >= 0; i--) {\n        if (!$(ref).parents('#'+this.menu_stack[i]).length && $(event.target).parent().attr('role') != 'menuitem')\n          this.hide_menu(this.menu_stack[i], event);\n      }\n      if (stack && this.menu_stack.length) {\n        obj.data('parent', $.last(this.menu_stack));\n        obj.css('z-index', ($('#'+$.last(this.menu_stack)).css('z-index') || 0) + 1);\n      }\n      else if (!stack && this.menu_stack.length) {\n        this.hide_menu(this.menu_stack[0], event);\n      }\n\n      obj.show().attr('aria-hidden', 'false').data('opener', ref.attr('aria-expanded', 'true').get(0));\n      this.triggerEvent('menu-open', { name:name, obj:obj, props:prop, originalEvent:event });\n      this.menu_stack.push(name);\n\n      this.menu_keyboard_active = show && keyboard;\n      if (this.menu_keyboard_active) {\n        this.focused_menu = name;\n        obj.find('a,input:not(:disabled)').not('[aria-disabled=true]').first().focus();\n      }\n    }\n    else {  // close menu\n      this.hide_menu(name, event);\n    }\n\n    return show;\n  };\n\n  // hide the given popup menu (and it's childs)\n  this.hide_menu = function(name, event)\n  {\n    if (!this.menu_stack.length) {\n      // delegate to subscribers\n      this.triggerEvent('menu-close', { name:name, props:{ menu:name }, originalEvent:event });\n      return;\n    }\n\n    var obj, keyboard = rcube_event.is_keyboard(event);\n    for (var j=this.menu_stack.length-1; j >= 0; j--) {\n      obj = $('#' + this.menu_stack[j]).hide().attr('aria-hidden', 'true').data('parent', false);\n      this.triggerEvent('menu-close', { name:this.menu_stack[j], obj:obj, props:{ menu:this.menu_stack[j] }, originalEvent:event });\n      if (this.menu_stack[j] == name) {\n        j = -1;  // stop loop\n        if (obj.data('opener')) {\n          $(obj.data('opener')).attr('aria-expanded', 'false');\n          if (keyboard)\n            obj.data('opener').focus();\n        }\n      }\n      this.menu_stack.pop();\n    }\n\n    // focus previous menu in stack\n    if (this.menu_stack.length && keyboard) {\n      this.menu_keyboard_active = true;\n      this.focused_menu = $.last(this.menu_stack);\n      if (!obj || !obj.data('opener'))\n        $('#'+this.focused_menu).find('a,input:not(:disabled)').not('[aria-disabled=true]').first().focus();\n    }\n    else {\n      this.focused_menu = null;\n      this.menu_keyboard_active = false;\n    }\n  }\n\n\n  // position a menu element on the screen in relation to other object\n  this.element_position = function(element, obj)\n  {\n    var obj = $(obj), win = $(window),\n      width = obj.outerWidth(),\n      height = obj.outerHeight(),\n      menu_pos = obj.data('menu-pos'),\n      win_height = win.height(),\n      elem_height = $(element).height(),\n      elem_width = $(element).width(),\n      pos = obj.offset(),\n      top = pos.top,\n      left = pos.left + width;\n\n    if (menu_pos == 'bottom') {\n      top += height;\n      left -= width;\n    }\n    else\n      left -= 5;\n\n    if (top + elem_height > win_height) {\n      top -= elem_height - height;\n      if (top < 0)\n        top = Math.max(0, (win_height - elem_height) / 2);\n    }\n\n    if (left + elem_width > win.width())\n      left -= elem_width + width;\n\n    element.css({left: left + 'px', top: top + 'px'});\n  };\n\n  // initialize HTML editor\n  this.editor_init = function(config, id)\n  {\n    this.editor = new rcube_text_editor(config, id);\n  };\n\n\n  /********************************************************/\n  /*********  html to text conversion functions   *********/\n  /********************************************************/\n\n  this.html2plain = function(html, func)\n  {\n    return this.format_converter(html, 'html', func);\n  };\n\n  this.plain2html = function(plain, func)\n  {\n    return this.format_converter(plain, 'plain', func);\n  };\n\n  this.format_converter = function(text, format, func)\n  {\n    // warn the user (if converted content is not empty)\n    if (!text\n      || (format == 'html' && !(text.replace(/<[^>]+>|&nbsp;|\\xC2\\xA0|\\s/g, '')).length)\n      || (format != 'html' && !(text.replace(/\\xC2\\xA0|\\s/g, '')).length)\n    ) {\n      // without setTimeout() here, textarea is filled with initial (onload) content\n      if (func)\n        setTimeout(function() { func(''); }, 50);\n      return true;\n    }\n\n    var confirmed = this.env.editor_warned || confirm(this.get_label('editorwarning'));\n\n    this.env.editor_warned = true;\n\n    if (!confirmed)\n      return false;\n\n    var url = '?_task=utils&_action=' + (format == 'html' ? 'html2text' : 'text2html'),\n      lock = this.set_busy(true, 'converting');\n\n    this.log('HTTP POST: ' + url);\n\n    $.ajax({ type: 'POST', url: url, data: text, contentType: 'application/octet-stream',\n      error: function(o, status, err) { ref.http_error(o, status, err, lock); },\n      success: function(data) {\n        ref.set_busy(false, null, lock);\n        if (func) func(data);\n      }\n    });\n\n    return true;\n  };\n\n\n  /********************************************************/\n  /*********        remote request methods        *********/\n  /********************************************************/\n\n  // compose a valid url with the given parameters\n  this.url = function(action, query)\n  {\n    var querystring = typeof query === 'string' ? query : '';\n\n    if (typeof action !== 'string')\n      query = action;\n    else if (!query || typeof query !== 'object')\n      query = {};\n\n    if (action)\n      query._action = action;\n    else if (this.env.action)\n      query._action = this.env.action;\n\n    var url = this.env.comm_path, k, param = {};\n\n    // overwrite task name\n    if (action && action.match(/([a-z0-9_-]+)\\/([a-z0-9-_.]+)/)) {\n      query._action = RegExp.$2;\n      url = url.replace(/\\_task=[a-z0-9_-]+/, '_task=' + RegExp.$1);\n    }\n\n    // remove undefined values\n    for (k in query) {\n      if (query[k] !== undefined && query[k] !== null)\n        param[k] = query[k];\n    }\n\n    if (param = $.param(param))\n      url += (url.indexOf('?') > -1 ? '&' : '?') + param;\n\n    if (querystring)\n      url += (url.indexOf('?') > -1 ? '&' : '?') + querystring;\n\n    return url;\n  };\n\n  this.redirect = function(url, lock)\n  {\n    if (lock || lock === null)\n      this.set_busy(true);\n\n    if (this.is_framed()) {\n      parent.rcmail.redirect(url, lock);\n    }\n    else {\n      if (this.env.extwin) {\n        if (typeof url == 'string')\n          url += (url.indexOf('?') < 0 ? '?' : '&') + '_extwin=1';\n        else\n          url._extwin = 1;\n      }\n      this.location_href(url, window);\n    }\n  };\n\n  this.goto_url = function(action, query, lock, secure)\n  {\n    var url = this.url(action, query)\n    if (secure) url = this.secure_url(url);\n    this.redirect(url, lock);\n  };\n\n  this.location_href = function(url, target, frame)\n  {\n    if (frame)\n      this.lock_frame();\n\n    if (typeof url == 'object')\n      url = this.env.comm_path + '&' + $.param(url);\n\n    // simulate real link click to force IE to send referer header\n    if (bw.ie && target == window)\n      $('<a>').attr('href', url).appendTo(document.body).get(0).click();\n    else\n      target.location.href = url;\n\n    // reset keep-alive interval\n    this.start_keepalive();\n  };\n\n  // update browser location to remember current view\n  this.update_state = function(query)\n  {\n    if (window.history.replaceState)\n      window.history.replaceState({}, document.title, rcmail.url('', query));\n  };\n\n  // send a http request to the server\n  this.http_request = function(action, data, lock, type)\n  {\n    if (type != 'POST')\n      type = 'GET';\n\n    if (typeof data !== 'object')\n      data = rcube_parse_query(data);\n\n    data._remote = 1;\n    data._unlock = lock ? lock : 0;\n\n    // trigger plugin hook\n    var result = this.triggerEvent('request' + action, data);\n\n    // abort if one of the handlers returned false\n    if (result === false) {\n      if (data._unlock)\n        this.set_busy(false, null, data._unlock);\n      return false;\n    }\n    else if (result !== undefined) {\n      data = result;\n      if (data._action) {\n        action = data._action;\n        delete data._action;\n      }\n    }\n\n    var url = this.url(action);\n\n    // reset keep-alive interval\n    this.start_keepalive();\n\n    // send request\n    return $.ajax({\n      type: type, url: url, data: data, dataType: 'json',\n      success: function(data) { ref.http_response(data); },\n      error: function(o, status, err) { ref.http_error(o, status, err, lock, action); }\n    });\n  };\n\n  // send a http GET request to the server\n  this.http_get = this.http_request;\n\n  // send a http POST request to the server\n  this.http_post = function(action, data, lock)\n  {\n    return this.http_request(action, data, lock, 'POST');\n  };\n\n  // aborts ajax request\n  this.abort_request = function(r)\n  {\n    if (r.request)\n      r.request.abort();\n    if (r.lock)\n      this.set_busy(false, null, r.lock);\n  };\n\n  // handle HTTP response\n  this.http_response = function(response)\n  {\n    if (!response)\n      return;\n\n    if (response.unlock)\n      this.set_busy(false);\n\n    this.triggerEvent('responsebefore', {response: response});\n    this.triggerEvent('responsebefore'+response.action, {response: response});\n\n    // set env vars\n    if (response.env)\n      this.set_env(response.env);\n\n    // we have labels to add\n    if (typeof response.texts === 'object') {\n      for (var name in response.texts)\n        if (typeof response.texts[name] === 'string')\n          this.add_label(name, response.texts[name]);\n    }\n\n    // if we get javascript code from server -> execute it\n    if (response.exec) {\n      this.log(response.exec);\n      eval(response.exec);\n    }\n\n    // execute callback functions of plugins\n    if (response.callbacks && response.callbacks.length) {\n      for (var i=0; i < response.callbacks.length; i++)\n        this.triggerEvent(response.callbacks[i][0], response.callbacks[i][1]);\n    }\n\n    // process the response data according to the sent action\n    switch (response.action) {\n      case 'delete':\n        if (this.task == 'addressbook') {\n          var sid, uid = this.contact_list.get_selection(), writable = false;\n\n          if (uid && this.contact_list.rows[uid]) {\n            // search results, get source ID from record ID\n            if (this.env.source == '') {\n              sid = String(uid).replace(/^[^-]+-/, '');\n              writable = sid && this.env.address_sources[sid] && !this.env.address_sources[sid].readonly;\n            }\n            else {\n              writable = !this.env.address_sources[this.env.source].readonly;\n            }\n          }\n          this.enable_command('compose', (uid && this.contact_list.rows[uid]));\n          this.enable_command('delete', 'edit', writable);\n          this.enable_command('export', (this.contact_list && this.contact_list.rowcount > 0));\n          this.enable_command('export-selected', 'print', false);\n        }\n\n      case 'move':\n        if (this.env.action == 'show') {\n          // re-enable commands on move/delete error\n          this.enable_command(this.env.message_commands, true);\n          if (!this.env.list_post)\n            this.enable_command('reply-list', false);\n        }\n        else if (this.task == 'addressbook') {\n          this.triggerEvent('listupdate', { folder:this.env.source, rowcount:this.contact_list.rowcount });\n        }\n\n      case 'purge':\n      case 'expunge':\n        if (this.task == 'mail') {\n          if (!this.env.exists) {\n            // clear preview pane content\n            if (this.env.contentframe)\n              this.show_contentframe(false);\n            // disable commands useless when mailbox is empty\n            this.enable_command(this.env.message_commands, 'purge', 'expunge',\n              'select-all', 'select-none', 'expand-all', 'expand-unread', 'collapse-all', false);\n          }\n          if (this.message_list)\n            this.triggerEvent('listupdate', { folder:this.env.mailbox, rowcount:this.message_list.rowcount });\n        }\n        break;\n\n      case 'refresh':\n      case 'check-recent':\n        // update message flags\n        $.each(this.env.recent_flags || {}, function(uid, flags) {\n          ref.set_message(uid, 'deleted', flags.deleted);\n          ref.set_message(uid, 'replied', flags.answered);\n          ref.set_message(uid, 'unread', !flags.seen);\n          ref.set_message(uid, 'forwarded', flags.forwarded);\n          ref.set_message(uid, 'flagged', flags.flagged);\n        });\n        delete this.env.recent_flags;\n\n      case 'getunread':\n      case 'search':\n        this.env.qsearch = null;\n      case 'list':\n        if (this.task == 'mail') {\n          var is_multifolder = this.is_multifolder_listing(),\n            list = this.message_list,\n            uid = this.env.list_uid;\n\n          this.enable_command('show', 'select-all', 'select-none', this.env.messagecount > 0);\n          this.enable_command('expunge', this.env.exists && !is_multifolder);\n          this.enable_command('purge', this.purge_mailbox_test() && !is_multifolder);\n          this.enable_command('import-messages', !is_multifolder);\n          this.enable_command('expand-all', 'expand-unread', 'collapse-all', this.env.threading && this.env.messagecount && !is_multifolder);\n\n          if (list) {\n            if (response.action == 'list' || response.action == 'search') {\n              // highlight message row when we're back from message page\n              if (uid) {\n                if (!list.rows[uid])\n                  uid += '-' + this.env.mailbox;\n                if (list.rows[uid]) {\n                  list.select(uid);\n                }\n                delete this.env.list_uid;\n              }\n\n              this.enable_command('set-listmode', this.env.threads && !is_multifolder);\n              if (list.rowcount > 0 && !$(document.activeElement).is('input,textarea'))\n                list.focus();\n\n              // trigger 'select' so all dependent actions update its state\n              // e.g. plugins use this event to activate buttons (#1490647)\n              list.triggerEvent('select');\n            }\n\n            if (response.action != 'getunread')\n              this.triggerEvent('listupdate', { folder:this.env.mailbox, rowcount:list.rowcount });\n          }\n        }\n        else if (this.task == 'addressbook') {\n          this.enable_command('export', (this.contact_list && this.contact_list.rowcount > 0));\n\n          if (response.action == 'list' || response.action == 'search') {\n            this.enable_command('search-create', this.env.source == '');\n            this.enable_command('search-delete', this.env.search_id);\n            this.update_group_commands();\n            if (this.contact_list.rowcount > 0 && !$(document.activeElement).is('input,textarea'))\n              this.contact_list.focus();\n            this.triggerEvent('listupdate', { folder:this.env.source, rowcount:this.contact_list.rowcount });\n          }\n        }\n        break;\n\n      case 'list-contacts':\n      case 'search-contacts':\n        if (this.contact_list && this.contact_list.rowcount > 0)\n          this.contact_list.focus();\n        break;\n    }\n\n    if (response.unlock)\n      this.hide_message(response.unlock);\n\n    this.triggerEvent('responseafter', {response: response});\n    this.triggerEvent('responseafter'+response.action, {response: response});\n\n    // reset keep-alive interval\n    this.start_keepalive();\n  };\n\n  // handle HTTP request errors\n  this.http_error = function(request, status, err, lock, action)\n  {\n    var errmsg = request.statusText;\n\n    this.set_busy(false, null, lock);\n    request.abort();\n\n    // don't display error message on page unload (#1488547)\n    if (this.unload)\n      return;\n\n    if (request.status && errmsg)\n      this.display_message(this.get_label('servererror') + ' (' + errmsg + ')', 'error');\n    else if (status == 'timeout')\n      this.display_message(this.get_label('requesttimedout'), 'error');\n    else if (request.status == 0 && status != 'abort')\n      this.display_message(this.get_label('connerror'), 'error');\n\n    // redirect to url specified in location header if not empty\n    var location_url = request.getResponseHeader(\"Location\");\n    if (location_url && this.env.action != 'compose')  // don't redirect on compose screen, contents might get lost (#1488926)\n      this.redirect(location_url);\n\n    // 403 Forbidden response (CSRF prevention) - reload the page.\n    // In case there's a new valid session it will be used, otherwise\n    // login form will be presented (#1488960).\n    if (request.status == 403) {\n      (this.is_framed() ? parent : window).location.reload();\n      return;\n    }\n\n    // re-send keep-alive requests after 30 seconds\n    if (action == 'keep-alive')\n      setTimeout(function(){ ref.keep_alive(); ref.start_keepalive(); }, 30000);\n  };\n\n  // handler for session errors detected on the server\n  this.session_error = function(redirect_url)\n  {\n    this.env.server_error = 401;\n\n    // save message in local storage and do not redirect\n    if (this.env.action == 'compose') {\n      this.save_compose_form_local();\n      this.compose_skip_unsavedcheck = true;\n    }\n    else if (redirect_url) {\n      setTimeout(function(){ ref.redirect(redirect_url, true); }, 2000);\n    }\n  };\n\n  // callback when an iframe finished loading\n  this.iframe_loaded = function(unlock)\n  {\n    this.set_busy(false, null, unlock);\n\n    if (this.submit_timer)\n      clearTimeout(this.submit_timer);\n  };\n\n  /**\n   Send multi-threaded parallel HTTP requests to the server for a list if items.\n   The string '%' in either a GET query or POST parameters will be replaced with the respective item value.\n   This is the argument object expected: {\n       items: ['foo','bar','gna'],      // list of items to send requests for\n       action: 'task/some-action',      // Roudncube action to call\n       query: { q:'%s' },               // GET query parameters\n       postdata: { source:'%s' },       // POST data (sends a POST request if present)\n       threads: 3,                      // max. number of concurrent requests\n       onresponse: function(data){ },   // Callback function called for every response received from server\n       whendone: function(alldata){ }   // Callback function called when all requests have been sent\n   }\n  */\n  this.multi_thread_http_request = function(prop)\n  {\n    var i, item, reqid = new Date().getTime(),\n      threads = prop.threads || 1;\n\n    prop.reqid = reqid;\n    prop.running = 0;\n    prop.requests = [];\n    prop.result = [];\n    prop._items = $.extend([], prop.items);  // copy items\n\n    if (!prop.lock)\n      prop.lock = this.display_message(this.get_label('loading'), 'loading');\n\n    // add the request arguments to the jobs pool\n    this.http_request_jobs[reqid] = prop;\n\n    // start n threads\n    for (i=0; i < threads; i++) {\n      item = prop._items.shift();\n      if (item === undefined)\n        break;\n\n      prop.running++;\n      prop.requests.push(this.multi_thread_send_request(prop, item));\n    }\n\n    return reqid;\n  };\n\n  // helper method to send an HTTP request with the given iterator value\n  this.multi_thread_send_request = function(prop, item)\n  {\n    var k, postdata, query;\n\n    // replace %s in post data\n    if (prop.postdata) {\n      postdata = {};\n      for (k in prop.postdata) {\n        postdata[k] = String(prop.postdata[k]).replace('%s', item);\n      }\n      postdata._reqid = prop.reqid;\n    }\n    // replace %s in query\n    else if (typeof prop.query == 'string') {\n      query = prop.query.replace('%s', item);\n      query += '&_reqid=' + prop.reqid;\n    }\n    else if (typeof prop.query == 'object' && prop.query) {\n      query = {};\n      for (k in prop.query) {\n        query[k] = String(prop.query[k]).replace('%s', item);\n      }\n      query._reqid = prop.reqid;\n    }\n\n    // send HTTP GET or POST request\n    return postdata ? this.http_post(prop.action, postdata) : this.http_request(prop.action, query);\n  };\n\n  // callback function for multi-threaded http responses\n  this.multi_thread_http_response = function(data, reqid)\n  {\n    var prop = this.http_request_jobs[reqid];\n    if (!prop || prop.running <= 0 || prop.cancelled)\n      return;\n\n    prop.running--;\n\n    // trigger response callback\n    if (prop.onresponse && typeof prop.onresponse == 'function') {\n      prop.onresponse(data);\n    }\n\n    prop.result = $.extend(prop.result, data);\n\n    // send next request if prop.items is not yet empty\n    var item = prop._items.shift();\n    if (item !== undefined) {\n      prop.running++;\n      prop.requests.push(this.multi_thread_send_request(prop, item));\n    }\n    // trigger whendone callback and mark this request as done\n    else if (prop.running == 0) {\n      if (prop.whendone && typeof prop.whendone == 'function') {\n        prop.whendone(prop.result);\n      }\n\n      this.set_busy(false, '', prop.lock);\n\n      // remove from this.http_request_jobs pool\n      delete this.http_request_jobs[reqid];\n    }\n  };\n\n  // abort a running multi-thread request with the given identifier\n  this.multi_thread_request_abort = function(reqid)\n  {\n    var prop = this.http_request_jobs[reqid];\n    if (prop) {\n      for (var i=0; prop.running > 0 && i < prop.requests.length; i++) {\n        if (prop.requests[i].abort)\n          prop.requests[i].abort();\n      }\n\n      prop.running = 0;\n      prop.cancelled = true;\n      this.set_busy(false, '', prop.lock);\n    }\n  };\n\n  // post the given form to a hidden iframe\n  this.async_upload_form = function(form, action, onload)\n  {\n    // create hidden iframe\n    var ts = new Date().getTime(),\n      frame_name = 'rcmupload' + ts,\n      frame = this.async_upload_form_frame(frame_name);\n\n    // upload progress support\n    if (this.env.upload_progress_name) {\n      var fname = this.env.upload_progress_name,\n        field = $('input[name='+fname+']', form);\n\n      if (!field.length) {\n        field = $('<input>').attr({type: 'hidden', name: fname});\n        field.prependTo(form);\n      }\n\n      field.val(ts);\n    }\n\n    // handle upload errors by parsing iframe content in onload\n    frame.on('load', {ts:ts}, onload);\n\n    $(form).attr({\n        target: frame_name,\n        action: this.url(action, {_id: this.env.compose_id || '', _uploadid: ts, _from: this.env.action}),\n        method: 'POST'})\n      .attr(form.encoding ? 'encoding' : 'enctype', 'multipart/form-data')\n      .submit();\n\n    return frame_name;\n  };\n\n  // create iframe element for files upload\n  this.async_upload_form_frame = function(name)\n  {\n    return $('<iframe>').attr({name: name, style: 'border: none; width: 0; height: 0; visibility: hidden'})\n      .appendTo(document.body);\n  };\n\n  // html5 file-drop API\n  this.document_drag_hover = function(e, over)\n  {\n    // don't e.preventDefault() here to not block text dragging on the page (#1490619)\n    $(this.gui_objects.filedrop)[(over?'addClass':'removeClass')]('active');\n  };\n\n  this.file_drag_hover = function(e, over)\n  {\n    e.preventDefault();\n    e.stopPropagation();\n    $(this.gui_objects.filedrop)[(over?'addClass':'removeClass')]('hover');\n  };\n\n  // handler when files are dropped to a designated area.\n  // compose a multipart form data and submit it to the server\n  this.file_dropped = function(e)\n  {\n    // abort event and reset UI\n    this.file_drag_hover(e, false);\n\n    // prepare multipart form data composition\n    var uri, files = e.target.files || e.dataTransfer.files,\n      formdata = window.FormData ? new FormData() : null,\n      fieldname = (this.env.filedrop.fieldname || '_file') + (this.env.filedrop.single ? '' : '[]'),\n      boundary = '------multipartformboundary' + (new Date).getTime(),\n      dashdash = '--', crlf = '\\r\\n',\n      multipart = dashdash + boundary + crlf,\n      args = {_id: this.env.compose_id || this.env.cid || '', _remote: 1, _from: this.env.action};\n\n    if (!files || !files.length) {\n      // Roundcube attachment, pass its uri to the backend and attach\n      if (uri = e.dataTransfer.getData('roundcube-uri')) {\n        var ts = new Date().getTime(),\n          // jQuery way to escape filename (#1490530)\n          content = $('<span>').text(e.dataTransfer.getData('roundcube-name') || this.get_label('attaching')).html();\n\n        args._uri = uri;\n        args._uploadid = ts;\n\n        // add to attachments list\n        if (!this.add2attachment_list(ts, {name: '', html: content, classname: 'uploading', complete: false}))\n          this.file_upload_id = this.set_busy(true, 'attaching');\n\n        this.http_post(this.env.filedrop.action || 'upload', args);\n      }\n      return;\n    }\n\n    // inline function to submit the files to the server\n    var submit_data = function() {\n      var multiple = files.length > 1,\n        ts = new Date().getTime(),\n        // jQuery way to escape filename (#1490530)\n        content = $('<span>').text(multiple ? ref.get_label('uploadingmany') : files[0].name).html();\n\n      // add to attachments list\n      if (!ref.add2attachment_list(ts, { name:'', html:content, classname:'uploading', complete:false }))\n        ref.file_upload_id = ref.set_busy(true, 'uploading');\n\n      // complete multipart content and post request\n      multipart += dashdash + boundary + dashdash + crlf;\n\n      args._uploadid = ts;\n\n      $.ajax({\n        type: 'POST',\n        dataType: 'json',\n        url: ref.url(ref.env.filedrop.action || 'upload', args),\n        contentType: formdata ? false : 'multipart/form-data; boundary=' + boundary,\n        processData: false,\n        timeout: 0, // disable default timeout set in ajaxSetup()\n        data: formdata || multipart,\n        headers: {'X-Roundcube-Request': ref.env.request_token},\n        xhr: function() { var xhr = jQuery.ajaxSettings.xhr(); if (!formdata && xhr.sendAsBinary) xhr.send = xhr.sendAsBinary; return xhr; },\n        success: function(data){ ref.http_response(data); },\n        error: function(o, status, err) { ref.http_error(o, status, err, null, 'attachment'); }\n      });\n    };\n\n    // get contents of all dropped files\n    var last = this.env.filedrop.single ? 0 : files.length - 1;\n    for (var j=0, i=0, f; j <= last && (f = files[i]); i++) {\n      if (!f.name) f.name = f.fileName;\n      if (!f.size) f.size = f.fileSize;\n      if (!f.type) f.type = 'application/octet-stream';\n\n      // file name contains non-ASCII characters, do UTF8-binary string conversion.\n      if (!formdata && /[^\\x20-\\x7E]/.test(f.name))\n        f.name_bin = unescape(encodeURIComponent(f.name));\n\n      // filter by file type if requested\n      if (this.env.filedrop.filter && !f.type.match(new RegExp(this.env.filedrop.filter))) {\n        // TODO: show message to user\n        continue;\n      }\n\n      // do it the easy way with FormData (FF 4+, Chrome 5+, Safari 5+)\n      if (formdata) {\n        formdata.append(fieldname, f);\n        if (j == last)\n          return submit_data();\n      }\n      // use FileReader supporetd by Firefox 3.6\n      else if (window.FileReader) {\n        var reader = new FileReader();\n\n        // closure to pass file properties to async callback function\n        reader.onload = (function(file, j) {\n          return function(e) {\n            multipart += 'Content-Disposition: form-data; name=\"' + fieldname + '\"';\n            multipart += '; filename=\"' + (f.name_bin || file.name) + '\"' + crlf;\n            multipart += 'Content-Length: ' + file.size + crlf;\n            multipart += 'Content-Type: ' + file.type + crlf + crlf;\n            multipart += reader.result + crlf;\n            multipart += dashdash + boundary + crlf;\n\n            if (j == last)  // we're done, submit the data\n              return submit_data();\n          }\n        })(f,j);\n        reader.readAsBinaryString(f);\n      }\n      // Firefox 3\n      else if (f.getAsBinary) {\n        multipart += 'Content-Disposition: form-data; name=\"' + fieldname + '\"';\n        multipart += '; filename=\"' + (f.name_bin || f.name) + '\"' + crlf;\n        multipart += 'Content-Length: ' + f.size + crlf;\n        multipart += 'Content-Type: ' + f.type + crlf + crlf;\n        multipart += f.getAsBinary() + crlf;\n        multipart += dashdash + boundary +crlf;\n\n        if (j == last)\n          return submit_data();\n      }\n\n      j++;\n    }\n  };\n\n  // starts interval for keep-alive signal\n  this.start_keepalive = function()\n  {\n    if (!this.env.session_lifetime || this.env.framed || this.env.extwin || this.task == 'login' || this.env.action == 'print')\n      return;\n\n    if (this._keepalive)\n      clearInterval(this._keepalive);\n\n    this._keepalive = setInterval(function(){ ref.keep_alive(); }, this.env.session_lifetime * 0.5 * 1000);\n  };\n\n  // starts interval for refresh signal\n  this.start_refresh = function()\n  {\n    if (!this.env.refresh_interval || this.env.framed || this.env.extwin || this.task == 'login' || this.env.action == 'print')\n      return;\n\n    if (this._refresh)\n      clearInterval(this._refresh);\n\n    this._refresh = setInterval(function(){ ref.refresh(); }, this.env.refresh_interval * 1000);\n  };\n\n  // sends keep-alive signal\n  this.keep_alive = function()\n  {\n    if (!this.busy)\n      this.http_request('keep-alive');\n  };\n\n  // sends refresh signal\n  this.refresh = function()\n  {\n    if (this.busy) {\n      // try again after 10 seconds\n      setTimeout(function(){ ref.refresh(); ref.start_refresh(); }, 10000);\n      return;\n    }\n\n    var params = {}, lock = this.set_busy(true, 'refreshing');\n\n    if (this.task == 'mail' && this.gui_objects.mailboxlist)\n      params = this.check_recent_params();\n\n    params._last = Math.floor(this.env.lastrefresh.getTime() / 1000);\n    this.env.lastrefresh = new Date();\n\n    // plugins should bind to 'requestrefresh' event to add own params\n    this.http_post('refresh', params, lock);\n  };\n\n  // returns check-recent request parameters\n  this.check_recent_params = function()\n  {\n    var params = {_mbox: this.env.mailbox};\n\n    if (this.gui_objects.mailboxlist)\n      params._folderlist = 1;\n    if (this.gui_objects.quotadisplay)\n      params._quota = 1;\n    if (this.env.search_request)\n      params._search = this.env.search_request;\n\n    if (this.gui_objects.messagelist) {\n      params._list = 1;\n\n      // message uids for flag updates check\n      params._uids = $.map(this.message_list.rows, function(row, uid) { return uid; }).join(',');\n    }\n\n    return params;\n  };\n\n\n  /********************************************************/\n  /*********            helper methods            *********/\n  /********************************************************/\n\n  /**\n   * Quote html entities\n   */\n  this.quote_html = function(str)\n  {\n    return String(str).replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n  };\n\n  // get window.opener.rcmail if available\n  this.opener = function(deep, filter)\n  {\n    var i, win = window.opener;\n\n    // catch Error: Permission denied to access property rcmail\n    try {\n      if (win && !win.closed) {\n        // try parent of the opener window, e.g. preview frame\n        if (deep && (!win.rcmail || win.rcmail.env.framed) && win.parent && win.parent.rcmail)\n          win = win.parent;\n\n        if (win.rcmail && filter)\n          for (i in filter)\n            if (win.rcmail.env[i] != filter[i])\n              return;\n\n        return win.rcmail;\n      }\n    }\n    catch (e) {}\n  };\n\n  // check if we're in show mode or if we have a unique selection\n  // and return the message uid\n  this.get_single_uid = function()\n  {\n    var uid = this.env.uid || (this.message_list ? this.message_list.get_single_selection() : null);\n    var result = ref.triggerEvent('get_single_uid', { uid: uid });\n    return result || uid;\n  };\n\n  // same as above but for contacts\n  this.get_single_cid = function()\n  {\n    var cid = this.env.cid || (this.contact_list ? this.contact_list.get_single_selection() : null);\n    var result = ref.triggerEvent('get_single_cid', { cid: cid });\n    return result || cid;\n  };\n\n  // get the IMP mailbox of the message with the given UID\n  this.get_message_mailbox = function(uid)\n  {\n    var msg = (this.env.messages && uid ? this.env.messages[uid] : null) || {};\n    return msg.mbox || this.env.mailbox;\n  };\n\n  // build request parameters from single message id (maybe with mailbox name)\n  this.params_from_uid = function(uid, params)\n  {\n    if (!params)\n      params = {};\n\n    params._uid = String(uid).split('-')[0];\n    params._mbox = this.get_message_mailbox(uid);\n\n    return params;\n  };\n\n  // gets cursor position\n  this.get_caret_pos = function(obj)\n  {\n    if (obj.selectionEnd !== undefined)\n      return obj.selectionEnd;\n\n    return obj.value.length;\n  };\n\n  // moves cursor to specified position\n  this.set_caret_pos = function(obj, pos)\n  {\n    try {\n      if (obj.setSelectionRange)\n        obj.setSelectionRange(pos, pos);\n    }\n    catch(e) {} // catch Firefox exception if obj is hidden\n  };\n\n  // get selected text from an input field\n  this.get_input_selection = function(obj)\n  {\n    var start = 0, end = 0, normalizedValue = '';\n\n    if (typeof obj.selectionStart == \"number\" && typeof obj.selectionEnd == \"number\") {\n      normalizedValue = obj.value;\n      start = obj.selectionStart;\n      end = obj.selectionEnd;\n    }\n\n    return {start: start, end: end, text: normalizedValue.substr(start, end-start)};\n  };\n\n  // disable/enable all fields of a form\n  this.lock_form = function(form, lock)\n  {\n    if (!form || !form.elements)\n      return;\n\n    var n, len, elm;\n\n    if (lock)\n      this.disabled_form_elements = [];\n\n    for (n=0, len=form.elements.length; n<len; n++) {\n      elm = form.elements[n];\n\n      if (elm.type == 'hidden')\n        continue;\n      // remember which elem was disabled before lock\n      if (lock && elm.disabled)\n        this.disabled_form_elements.push(elm);\n      else if (lock || $.inArray(elm, this.disabled_form_elements) < 0)\n        elm.disabled = lock;\n    }\n  };\n\n  this.mailto_handler_uri = function()\n  {\n    return location.href.split('?')[0] + '?_task=mail&_action=compose&_to=%s';\n  };\n\n  this.register_protocol_handler = function(name)\n  {\n    try {\n      window.navigator.registerProtocolHandler('mailto', this.mailto_handler_uri(), name);\n    }\n    catch(e) {\n      this.display_message(String(e), 'error');\n    }\n  };\n\n  this.check_protocol_handler = function(name, elem)\n  {\n    var nav = window.navigator;\n\n    if (!nav || (typeof nav.registerProtocolHandler != 'function')) {\n      $(elem).addClass('disabled').click(function(){ return false; });\n    }\n    else if (typeof nav.isProtocolHandlerRegistered == 'function') {\n      var status = nav.isProtocolHandlerRegistered('mailto', this.mailto_handler_uri());\n      if (status)\n        $(elem).parent().find('.mailtoprotohandler-status').html(status);\n    }\n    else {\n      $(elem).click(function() { ref.register_protocol_handler(name); return false; });\n    }\n  };\n\n  // Checks browser capabilities eg. PDF support, TIF support\n  this.browser_capabilities_check = function()\n  {\n    if (!this.env.browser_capabilities)\n      this.env.browser_capabilities = {};\n\n    $.each(['pdf', 'flash', 'tif'], function() {\n      if (ref.env.browser_capabilities[this] === undefined)\n        ref.env.browser_capabilities[this] = ref[this + '_support_check']();\n    });\n  };\n\n  // Returns browser capabilities string\n  this.browser_capabilities = function()\n  {\n    if (!this.env.browser_capabilities)\n      return '';\n\n    var n, ret = [];\n\n    for (n in this.env.browser_capabilities)\n      ret.push(n + '=' + this.env.browser_capabilities[n]);\n\n    return ret.join();\n  };\n\n  this.tif_support_check = function()\n  {\n    window.setTimeout(function() {\n      var img = new Image();\n      img.onload = function() { ref.env.browser_capabilities.tif = 1; };\n      img.onerror = function() { ref.env.browser_capabilities.tif = 0; };\n      img.src = ref.assets_path('program/resources/blank.tif');\n    }, 10);\n\n    return 0;\n  };\n\n  this.pdf_support_check = function()\n  {\n    var plugin = navigator.mimeTypes ? navigator.mimeTypes[\"application/pdf\"] : {},\n      plugins = navigator.plugins,\n      len = plugins.length,\n      regex = /Adobe Reader|PDF|Acrobat/i;\n\n    if (plugin && plugin.enabledPlugin)\n        return 1;\n\n    if ('ActiveXObject' in window) {\n      try {\n        if (plugin = new ActiveXObject(\"AcroPDF.PDF\"))\n          return 1;\n      }\n      catch (e) {}\n      try {\n        if (plugin = new ActiveXObject(\"PDF.PdfCtrl\"))\n          return 1;\n      }\n      catch (e) {}\n    }\n\n    for (i=0; i<len; i++) {\n      plugin = plugins[i];\n      if (typeof plugin === 'String') {\n        if (regex.test(plugin))\n          return 1;\n      }\n      else if (plugin.name && regex.test(plugin.name))\n        return 1;\n    }\n\n    window.setTimeout(function() {\n      $('<object>').css({position: 'absolute', left: '-10000px'})\n        .attr({data: ref.assets_path('program/resources/dummy.pdf'), width: 1, height: 1, type: 'application/pdf'})\n        .load(function() { ref.env.browser_capabilities.pdf = 1; })\n        .error(function() { ref.env.browser_capabilities.pdf = 0; })\n        .appendTo($('body'));\n      }, 10);\n\n    return 0;\n  };\n\n  this.flash_support_check = function()\n  {\n    var plugin = navigator.mimeTypes ? navigator.mimeTypes[\"application/x-shockwave-flash\"] : {};\n\n    if (plugin && plugin.enabledPlugin)\n        return 1;\n\n    if ('ActiveXObject' in window) {\n      try {\n        if (plugin = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\"))\n          return 1;\n      }\n      catch (e) {}\n    }\n\n    return 0;\n  };\n\n  this.assets_path = function(path)\n  {\n    if (this.env.assets_path && !path.startsWith(this.env.assets_path)) {\n      path = this.env.assets_path + path;\n    }\n\n    return path;\n  };\n\n  // Cookie setter\n  this.set_cookie = function(name, value, expires)\n  {\n    setCookie(name, value, expires, this.env.cookie_path, this.env.cookie_domain, this.env.cookie_secure);\n  };\n\n  this.get_local_storage_prefix = function()\n  {\n    if (!this.local_storage_prefix)\n      this.local_storage_prefix = 'roundcube.' + (this.env.user_id || 'anonymous') + '.';\n\n    return this.local_storage_prefix;\n  };\n\n  // wrapper for localStorage.getItem(key)\n  this.local_storage_get_item = function(key, deflt, encrypted)\n  {\n    var item, result;\n\n    // TODO: add encryption\n    try {\n      item = localStorage.getItem(this.get_local_storage_prefix() + key);\n      result = JSON.parse(item);\n    }\n    catch (e) { }\n\n    return result || deflt || null;\n  };\n\n  // wrapper for localStorage.setItem(key, data)\n  this.local_storage_set_item = function(key, data, encrypted)\n  {\n    // try/catch to handle no localStorage support, but also error\n    // in Safari-in-private-browsing-mode where localStorage exists\n    // but can't be used (#1489996)\n    try {\n      // TODO: add encryption\n      localStorage.setItem(this.get_local_storage_prefix() + key, JSON.stringify(data));\n      return true;\n    }\n    catch (e) {\n      return false;\n    }\n  };\n\n  // wrapper for localStorage.removeItem(key)\n  this.local_storage_remove_item = function(key)\n  {\n    try {\n      localStorage.removeItem(this.get_local_storage_prefix() + key);\n      return true;\n    }\n    catch (e) {\n      return false;\n    }\n  };\n\n  this.print_dialog = function()\n  {\n    if (bw.safari)\n      setTimeout('window.print()', 10);\n    else\n      window.print();\n  };\n}  // end object rcube_webmail\n\n\n// some static methods\nrcube_webmail.long_subject_title = function(elem, indent)\n{\n  if (!elem.title) {\n    var $elem = $(elem);\n    if ($elem.width() + (indent || 0) * 15 > $elem.parent().width())\n      elem.title = rcube_webmail.subject_text(elem);\n  }\n};\n\nrcube_webmail.long_subject_title_ex = function(elem)\n{\n  if (!elem.title) {\n    var $elem = $(elem),\n      txt = $.trim($elem.text()),\n      tmp = $('<span>').text(txt)\n        .css({'position': 'absolute', 'float': 'left', 'visibility': 'hidden',\n          'font-size': $elem.css('font-size'), 'font-weight': $elem.css('font-weight')})\n        .appendTo($('body')),\n      w = tmp.width();\n\n    tmp.remove();\n    if (w + $('span.branch', $elem).width() * 15 > $elem.width())\n      elem.title = rcube_webmail.subject_text(elem);\n  }\n};\n\nrcube_webmail.subject_text = function(elem)\n{\n  var t = $(elem).clone();\n  t.find('.skip-on-drag').remove();\n  return t.text();\n};\n\nrcube_webmail.prototype.get_cookie = getCookie;\n\n// copy event engine prototype\nrcube_webmail.prototype.addEventListener = rcube_event_engine.prototype.addEventListener;\nrcube_webmail.prototype.removeEventListener = rcube_event_engine.prototype.removeEventListener;\nrcube_webmail.prototype.triggerEvent = rcube_event_engine.prototype.triggerEvent;\n", "code_before": "/**\n * Roundcube Webmail Client Script\n *\n * This file is part of the Roundcube Webmail client\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (C) The Roundcube Dev Team\n * Copyright (C) Kolab Systems AG\n *\n * The JavaScript code in this page is free software: you can\n * redistribute it and/or modify it under the terms of the GNU\n * General Public License (GNU GPL) as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option)\n * any later version.  The code is distributed WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.\n *\n * As additional permission under GNU GPL version 3 section 7, you\n * may distribute non-source (e.g., minimized or compacted) forms of\n * that code without the copy of the GNU GPL normally required by\n * section 4, provided you include this license notice and a URL\n * through which recipients can access the Corresponding Source.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n *\n * @author Thomas Bruederli <roundcube@gmail.com>\n * @author Aleksander 'A.L.E.C' Machniak <alec@alec.pl>\n * @author Charles McNulty <charles@charlesmcnulty.com>\n *\n * @requires jquery.js, common.js, list.js\n */\n\nfunction rcube_webmail() {\n    this.labels = {};\n    this.buttons = {};\n    this.buttons_sel = {};\n    this.gui_objects = {};\n    this.gui_containers = {};\n    this.commands = {};\n    this.command_handlers = {};\n    this.onloads = [];\n    this.messages = {};\n    this.group2expand = {};\n    this.http_request_jobs = {};\n    this.menu_stack = [];\n    this.menu_buttons = {};\n    this.entity_selectors = [];\n    this.image_style = {};\n    this.uploads = {};\n\n    // webmail client settings\n    this.dblclick_time = 500;\n    this.message_time = 5000;\n    this.preview_delay_select = 400;\n    this.preview_delay_click = 60;\n    this.identifier_expr = /[^0-9a-z_-]/gi;\n    this.uploadTimeout = 0; // 0 = no timeout | ajax call timeout for loading attachment\n\n\n    // environment defaults\n    this.env = {\n        attachments: {},\n        request_timeout: 180, // seconds\n        draft_autosave: 0, // seconds\n        comm_path: './',\n        recipients_separator: ',', // @deprecated\n        recipients_delimiter: ', ', // @deprecated\n        popup_width: 1150,\n        popup_width_small: 900,\n        thread_padding: '15px',\n        browser_capabilities: {},\n    };\n\n    // create protected reference to myself\n    this.ref = 'rcmail';\n    var ref = this;\n\n    // set jQuery ajax options\n    $.ajaxSetup({\n        cache: false,\n        timeout: this.env.request_timeout * 1000,\n        error: function (request, status, err) {\n            ref.http_error(request, status, err);\n        },\n        beforeSend: function (xmlhttp) {\n            xmlhttp.setRequestHeader('X-Roundcube-Request', ref.env.request_token);\n        },\n    });\n\n    // unload fix\n    $(window).on('beforeunload', function () {\n        ref.unload = true;\n    });\n\n    // set environment variable(s)\n    this.set_env = function (p, value) {\n        if (p != null && typeof p === 'object' && !value) {\n            for (var n in p) {\n                this.env[n] = p[n];\n            }\n        } else {\n            this.env[p] = value;\n        }\n    };\n\n    // add a localized label to the client environment\n    this.add_label = function (p, value) {\n        if (typeof p === 'string') {\n            this.labels[p] = value;\n        } else if (typeof p === 'object') {\n            $.extend(this.labels, p);\n        }\n    };\n\n    // add a button to the button list\n    this.register_button = function (command, id, type, act, sel, over) {\n        var button_prop = { id: id, type: type };\n\n        if (act) {\n            button_prop.act = act;\n        }\n        if (sel) {\n            button_prop.sel = sel;\n        }\n        if (over) {\n            button_prop.over = over;\n        }\n\n        if (!this.buttons[command]) {\n            this.buttons[command] = [];\n        }\n\n        this.buttons[command].push(button_prop);\n\n        if (this.loaded) {\n            this.init_button(command, button_prop);\n            this.set_button(command, (this.commands[command] ? 'act' : 'pas'));\n        }\n    };\n\n    // register a button with popup menu, to set its state according to the state of all commands in the menu\n    this.register_menu_button = function (button, menu_id) {\n        if (this.menu_buttons[menu_id]) {\n            this.menu_buttons[menu_id][0].push(button);\n        } else {\n            var commands = [];\n            $('#' + menu_id).find('a').each(function () {\n                var command, link = $(this), onclick = link.attr('onclick');\n\n                if (onclick && String(onclick).match(/rcmail\\.command\\(\\'([^']+)/)) {\n                    command = RegExp.$1;\n                } else {\n                    command = function () {\n                        return link.is('.active');\n                    };\n                }\n\n                commands.push(command);\n            });\n\n            if (commands.length) {\n                this.menu_buttons[menu_id] = [[button], commands];\n            }\n        }\n\n        this.set_menu_buttons();\n    };\n\n    // set state of a menu button according to state of all menu actions\n    this.set_menu_buttons = function () {\n        // Use timeouts to not block and set menu button states only once\n        clearTimeout(this.menu_buttons_timeout);\n        this.menu_buttons_timeout = setTimeout(function () {\n            $.each(ref.menu_buttons, function () {\n                var disabled = true;\n                $.each(this[1], function () {\n                    var is_func = typeof (this) === 'function';\n                    if ((is_func && this()) || (!is_func && ref.commands[this])) {\n                        disabled = false;\n                        return disabled;\n                    }\n                });\n\n                $(this[0]).add($(this[0]).parent('.dropbutton'))\n                    .addClass(disabled ? 'disabled' : 'active')\n                    .removeClass(disabled ? 'active' : 'disabled');\n            });\n        }, 50);\n    };\n\n    // register a specific gui object\n    this.gui_object = function (name, id) {\n        this.gui_objects[name] = this.loaded ? rcube_find_object(id) : id;\n    };\n\n    // register a container object\n    this.gui_container = function (name, id) {\n        this.gui_containers[name] = id;\n    };\n\n    // add a GUI element (html node) to a specified container\n    this.add_element = function (elm, container) {\n        if (this.gui_containers[container] && this.gui_containers[container].jquery) {\n            this.gui_containers[container].append(elm);\n        }\n    };\n\n    // register an external handler for a certain command\n    this.register_command = function (command, callback, enable) {\n        this.command_handlers[command] = callback;\n\n        if (enable) {\n            this.enable_command(command, true);\n        }\n    };\n\n    // execute the given script on load\n    this.add_onload = function (f) {\n        this.onloads.push(f);\n    };\n\n    // initialize webmail client\n    this.init = function () {\n        var n;\n        this.task = this.env.task;\n\n        if (!this.env.blankpage) {\n            this.env.blankpage = 'javascript:false;';\n        }\n\n        // find all registered gui containers\n        for (n in this.gui_containers) {\n            this.gui_containers[n] = $('#' + this.gui_containers[n]);\n        }\n\n        // find all registered gui objects\n        for (n in this.gui_objects) {\n            this.gui_objects[n] = rcube_find_object(this.gui_objects[n]);\n        }\n\n        // init registered buttons\n        this.init_buttons();\n\n        // tell parent window that this frame is loaded\n        if (this.is_framed()) {\n            parent.rcmail.unlock_frame();\n        }\n\n        // enable general commands\n        this.enable_command('close', 'logout', 'mail', 'addressbook', 'settings', 'save-pref',\n            'compose', 'undo', 'about', 'switch-task', 'menu-open', 'menu-close', 'menu-save', true);\n\n        // set active task button\n        this.set_button(this.task, 'sel');\n\n        if (this.env.permaurl) {\n            this.enable_command('permaurl', 'extwin', true);\n        }\n\n        switch (this.task) {\n            case 'mail':\n                // enable mail commands\n                this.enable_command('list', 'checkmail', 'add-contact', 'search', 'reset-search', 'collapse-folder', 'import-messages', true);\n\n                if (this.gui_objects.messagelist) {\n                    // setup message list cols\n                    this.msglist_setup(this.env.layout);\n\n                    this.env.widescreen_list_template = [\n                        { className: 'threads', cells: ['threads'] },\n                        { className: 'subject', cells: ['fromto', 'date', 'size', 'status', 'subject'] },\n                        { className: 'flags', cells: ['flag', 'attachment'] },\n                    ];\n\n                    this.message_list = new rcube_list_widget(this.gui_objects.messagelist, {\n                        multiselect: true,\n                        multiexpand: true,\n                        draggable: true,\n                        keyboard: true,\n                        column_movable: this.env.col_movable,\n                        dblclick_time: this.dblclick_time,\n                    });\n                    this.message_list\n                        .addEventListener('initrow', function (o) {\n                            ref.init_message_row(o);\n                        })\n                        .addEventListener('dblclick', function (o) {\n                            ref.msglist_dbl_click(o);\n                        })\n                        .addEventListener('keypress', function (o) {\n                            ref.msglist_keypress(o);\n                        })\n                        .addEventListener('select', function (o) {\n                            ref.msglist_select(o);\n                        })\n                        .addEventListener('dragstart', function (o) {\n                            ref.drag_start(o);\n                        })\n                        .addEventListener('dragmove', function (e) {\n                            ref.drag_move(e);\n                        })\n                        .addEventListener('dragend', function (e) {\n                            ref.drag_end(e);\n                        })\n                        .addEventListener('expandcollapse', function (o) {\n                            ref.msglist_expand(o);\n                        })\n                        .addEventListener('column_replace', function (o) {\n                            ref.msglist_set_coltypes(o);\n                        })\n                        .init();\n\n                    // TODO: this should go into the list-widget code\n                    $(this.message_list.thead).on('click', 'a.sortcol', function (e) {\n                        return ref.command('sort', $(this).attr('rel'), this);\n                    });\n\n                    this.enable_command('toggle_status', 'toggle_flag', 'sort', true);\n                    this.enable_command('set-listmode', this.env.threads && !this.is_multifolder_listing());\n\n                    // load messages\n                    var searchfilter = $(this.gui_objects.search_filter).val();\n                    if (searchfilter && searchfilter != 'ALL') {\n                        this.filter_mailbox(searchfilter);\n                    } else {\n                        this.command('list');\n                    }\n\n                    $(this.gui_objects.qsearchbox).val(this.env.search_text).focusin(function () {\n                        ref.message_list.blur();\n                    });\n                }\n\n                this.set_button_titles();\n\n                this.env.message_commands = ['show', 'reply', 'reply-all', 'reply-list',\n                    'move', 'copy', 'delete', 'open', 'mark', 'edit', 'viewsource', 'bounce',\n                    'print', 'load-attachment', 'download-attachment', 'show-headers', 'hide-headers', 'download',\n                    'forward', 'forward-inline', 'forward-attachment', 'change-format'];\n\n                // Initialize Mailvelope early so e.g. fresh users have a keyring for\n                // this session directly after login.\n                // This does not hurt the following code execution because the\n                // Mailvelope-related code runs non-blocking (using Promises).\n                this.check_mailvelope(this.env.action);\n\n                if (this.env.action == 'show' || this.env.action == 'preview') {\n                    this.enable_command(this.env.message_commands, this.env.uid);\n                    this.enable_command('reply-list', this.env.list_post);\n\n                    if (this.env.action == 'show') {\n                        this.http_request('pagenav', { _uid: this.env.uid, _mbox: this.env.mailbox, _search: this.env.search_request },\n                            this.display_message('', 'loading'));\n                    }\n\n                    if (this.env.mail_read_time > 0) {\n                        setTimeout(function () {\n                            ref.http_post('mark', {\n                                _uid: ref.env.uid, _flag: 'read', _mbox: ref.env.mailbox, _quiet: 1,\n                            });\n                        }, this.env.mail_read_time * 1000);\n                    }\n\n                    if (this.env.blockedobjects) {\n                        $(this.gui_objects.remoteobjectsmsg).show();\n                        this.enable_command('load-remote', true);\n                    }\n\n                    // make preview/message frame visible\n                    if (this.env.action == 'preview' && this.is_framed()) {\n                        this.enable_command('compose', 'add-contact', false);\n                        parent.rcmail.show_contentframe(true);\n                    }\n\n                    if ($.inArray('flagged', this.env.message_flags) >= 0) {\n                        $(document.body).addClass('status-flagged');\n                    }\n\n                    // initialize drag-n-drop on attachments, so they can e.g.\n                    // be dropped into mail compose attachments in another window\n                    if (this.gui_objects.attachments) {\n                        $('li > a', this.gui_objects.attachments).not('.drop').on('dragstart', function (e) {\n                            var n, href = this.href, dt = e.originalEvent.dataTransfer;\n                            if (dt) {\n                                // inject username to the uri\n                                href = href.replace(/^https?:\\/\\//, function (m) {\n                                    return m + urlencode(ref.env.username) + '@';\n                                });\n\n                                // cleanup the node to get filename without the size test\n                                n = $(this).clone();\n                                n.children().remove();\n\n                                dt.setData('roundcube-uri', href);\n                                dt.setData('roundcube-name', n.text().trim());\n                            }\n                        });\n                    }\n                } else if (this.env.action == 'compose') {\n                    this.env.address_group_stack = [];\n                    this.env.compose_commands = ['send-attachment', 'remove-attachment', 'send', 'cancel',\n                        'toggle-editor', 'list-addresses', 'pushgroup', 'search', 'reset-search', 'extwin',\n                        'insert-response', 'menu-open', 'menu-close', 'load-attachment',\n                        'download-attachment', 'open-attachment', 'rename-attachment'];\n\n                    if (this.env.drafts_mailbox) {\n                        this.env.compose_commands.push('savedraft');\n                    }\n\n                    this.enable_command(this.env.compose_commands, true);\n\n                    // add more commands (not enabled)\n                    $.merge(this.env.compose_commands, ['add-recipient', 'firstpage', 'previouspage', 'nextpage', 'lastpage']);\n\n                    if (window.googie) {\n                        this.env.editor_config.spellchecker = googie;\n                        this.env.editor_config.spellcheck_observer = function (s) {\n                            ref.spellcheck_state();\n                        };\n\n                        this.env.compose_commands.push('spellcheck');\n                        this.enable_command('spellcheck', true);\n                    }\n\n                    // initialize HTML editor\n                    this.editor_init(null, this.env.composebody);\n\n                    // init message compose form\n                    this.init_messageform();\n                } else if (this.env.action == 'bounce') {\n                    this.init_messageform_inputs();\n                    this.env.compose_commands = [];\n                } else if (this.env.action == 'get') {\n                    this.enable_command('download', true);\n                    this.enable_command('image-scale', 'image-rotate', !!/^image\\//.test(this.env.mimetype));\n\n                    // Mozilla's PDF.js viewer does not allow printing from host page (#5125)\n                    // to minimize user confusion we disable the Print button on Firefox < 75\n                    this.enable_command('print', this.env.mimetype != 'application/pdf' || !bw.mz || bw.vendver >= 75);\n\n                    if (this.env.is_message) {\n                        this.enable_command('reply', 'reply-all', 'edit', 'viewsource',\n                            'forward', 'forward-inline', 'forward-attachment', 'bounce', true);\n                        if (this.env.list_post) {\n                            this.enable_command('reply-list', true);\n                        }\n                    }\n\n                    // center and scale the image in preview frame\n                    // TODO: Find a better way. Onload is late, also we could use embed.css\n                    if (this.env.mimetype.startsWith('image/')) {\n                        $(this.gui_objects.messagepartframe).on('load', function () {\n                            var contents = $(this).contents();\n\n                            // do not apply styles to an error page (with no image)\n                            if (contents.find('img').length) {\n                                contents.find('img').css({\n                                    maxWidth: '100%',\n                                    maxHeight: '100%',\n                                    objectFit: 'contain',\n                                });\n                                contents.find('body').css({\n                                    height: '100%',\n                                    margin: 0,\n                                    display: 'grid',\n                                    placeItems: 'center',\n                                });\n                                contents.find('html').css({ height: '100%' });\n                            }\n                        });\n                    }\n                }\n                // show printing dialog unless decryption must be done first\n                else if (this.env.action == 'print' && this.env.uid) {\n                    if (!this.env.is_pgp_content && !this.env.pgp_mime_part) {\n                        this.print_dialog();\n                    }\n                }\n\n                // get unread count for each mailbox\n                if (this.gui_objects.mailboxlist) {\n                    this.env.unread_counts = {};\n                    this.gui_objects.folderlist = this.gui_objects.mailboxlist;\n                    this.http_request('getunread', { _page: this.env.current_page });\n                }\n\n                // init address book widget\n                if (this.gui_objects.contactslist) {\n                    this.contact_list = new rcube_list_widget(this.gui_objects.contactslist,\n                        { multiselect: true, draggable: false, keyboard: true });\n                    this.contact_list\n                        .addEventListener('initrow', function (o) {\n                            ref.triggerEvent('insertrow', { cid: o.uid, row: o });\n                        })\n                        .addEventListener('select', function (o) {\n                            ref.compose_recipient_select(o);\n                        })\n                        .addEventListener('dblclick', function (o) {\n                            ref.compose_add_recipient();\n                        })\n                        .addEventListener('keypress', function (o) {\n                            if (o.key_pressed == o.ENTER_KEY) {\n                                if (!ref.compose_add_recipient()) {\n                                    // execute link action on <enter> if not a recipient entry\n                                    if (o.last_selected && String(o.last_selected).charAt(0) == 'G') {\n                                        $(o.rows[o.last_selected].obj).find('a').first().click();\n                                    }\n                                }\n                            }\n                        })\n                        .init();\n\n                    // remember last focused address field\n                    $('#_to,#_cc,#_bcc').focus(function () {\n                        ref.env.focused_field = this;\n                    });\n                }\n\n                if (this.gui_objects.addressbookslist) {\n                    this.gui_objects.folderlist = this.gui_objects.addressbookslist;\n                    this.enable_command('list-addresses', true);\n                }\n\n                // ask user to send MDN\n                if (this.env.mdn_request && this.env.uid) {\n                    this.mdn_request_dialog(this.env.uid, this.env.mailbox);\n                }\n\n                // detect browser capabilities\n                if (!this.is_framed() && !this.env.extwin) {\n                    this.browser_capabilities_check();\n                }\n\n                break;\n            case 'addressbook':\n                this.env.address_group_stack = [];\n\n                if (this.gui_objects.folderlist) {\n                    this.env.contactfolders = $.extend($.extend({}, this.env.address_sources), this.env.contactgroups);\n                }\n\n                this.enable_command('add', 'import', this.env.writable_source);\n                this.enable_command('list', 'listgroup', 'pushgroup', 'popgroup', 'listsearch', 'search', 'reset-search', 'advanced-search', true);\n\n                if (this.gui_objects.contactslist) {\n                    this.contact_list = new rcube_list_widget(this.gui_objects.contactslist,\n                        { multiselect: true, draggable: this.gui_objects.folderlist ? true : false, keyboard: true });\n                    this.contact_list\n                        .addEventListener('initrow', function (o) {\n                            ref.triggerEvent('insertrow', { cid: o.uid, row: o });\n                        })\n                        .addEventListener('keypress', function (o) {\n                            ref.list_keypress(o);\n                        })\n                        .addEventListener('select', function (o) {\n                            ref.contactlist_select(o);\n                        })\n                        .addEventListener('dragstart', function (o) {\n                            ref.drag_start(o);\n                        })\n                        .addEventListener('dragmove', function (e) {\n                            ref.drag_move(e);\n                        })\n                        .addEventListener('dragend', function (e) {\n                            ref.drag_end(e);\n                        })\n                        .init();\n\n                    $(this.gui_objects.qsearchbox).focusin(function () {\n                        ref.contact_list.blur();\n                    });\n\n                    this.update_group_commands();\n                    this.command('list');\n                }\n\n                if (this.gui_objects.savedsearchlist) {\n                    this.savedsearchlist = new rcube_treelist_widget(this.gui_objects.savedsearchlist, {\n                        id_prefix: 'rcmli',\n                        id_encode: this.html_identifier_encode,\n                        id_decode: this.html_identifier_decode,\n                    });\n\n                    this.savedsearchlist.addEventListener('select', function (node) {\n                        ref.triggerEvent('selectfolder', { folder: node.id, prefix: 'rcmli' });\n                    });\n                }\n\n                this.set_page_buttons();\n\n                if (this.env.cid) {\n                    this.enable_command('show', 'edit', 'qrcode', true);\n                    // register handlers for group assignment via checkboxes\n                    if (this.gui_objects.editform) {\n                        $('input.groupmember').change(function () {\n                            ref.group_member_change(this.checked ? 'add' : 'del', ref.env.cid, ref.env.source, this.value);\n                        });\n                    }\n                }\n\n                if (this.gui_objects.editform) {\n                    this.enable_command('save', true);\n                    if (this.env.action == 'add' || this.env.action == 'edit' || this.env.action == 'search') {\n                        this.init_contact_form();\n                    }\n                } else if (this.env.action == 'print') {\n                    this.print_dialog();\n                }\n\n                break;\n            case 'settings':\n                this.enable_command('show', 'save', true);\n\n                if (this.env.action == 'identities') {\n                    this.enable_command('add', this.env.identities_level < 2);\n                } else if (this.env.action == 'edit-identity' || this.env.action == 'add-identity') {\n                    this.enable_command('save', 'edit', true);\n                    this.enable_command('delete', this.env.identities_level < 2);\n\n                    if (this.env.action == 'edit-identity') {\n                        this.check_mailvelope(this.env.action);\n                    }\n                } else if (this.env.action == 'folders') {\n                    this.enable_command('subscribe', 'unsubscribe', 'create-folder', 'rename-folder', true);\n                } else if (this.env.action == 'edit-folder' && this.gui_objects.editform) {\n                    this.enable_command('save', 'folder-size', true);\n                    parent.rcmail.env.exists = this.env.messagecount;\n                    parent.rcmail.enable_command('purge', this.env.messagecount);\n                } else if (this.env.action == 'responses') {\n                    this.enable_command('add', true);\n                }\n\n                if (this.gui_objects.identitieslist) {\n                    this.identity_list = new rcube_list_widget(this.gui_objects.identitieslist,\n                        { multiselect: false, draggable: false, keyboard: true });\n                    this.identity_list\n                        .addEventListener('select', function (o) {\n                            ref.identity_select(o);\n                        })\n                        .addEventListener('keypress', function (o) {\n                            ref.list_keypress(o);\n                        })\n                        .init()\n                        .focus();\n                } else if (this.gui_objects.sectionslist) {\n                    this.sections_list = new rcube_list_widget(this.gui_objects.sectionslist, { multiselect: false, draggable: false, keyboard: true });\n                    this.sections_list\n                        .addEventListener('select', function (o) {\n                            ref.section_select(o);\n                        })\n                        .init()\n                        .focus();\n                } else if (this.gui_objects.subscriptionlist) {\n                    this.init_subscription_list();\n                } else if (this.gui_objects.responseslist) {\n                    this.responses_list = new rcube_list_widget(this.gui_objects.responseslist, { multiselect: false, draggable: false, keyboard: true });\n                    this.responses_list\n                        .addEventListener('select', function (o) {\n                            ref.response_select(o);\n                        })\n                        .addEventListener('keypress', function (o) {\n                            ref.list_keypress(o);\n                        })\n                        .init()\n                        .focus();\n                }\n\n                break;\n            case 'login':\n                var tz, input_user = $('#rcmloginuser');\n                input_tz = $('#rcmlogintz');\n\n                if (input_user.val() == '') {\n                    input_user.focus();\n                } else {\n                    $('#rcmloginpwd').focus();\n                }\n\n                // detect client timezone\n                try {\n                    tz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n                } catch (e) {}\n\n                input_tz.val(tz ? tz : (new Date().getStdTimezoneOffset() / -60));\n\n                // display 'loading' message on form submit, lock submit button\n                $('form').submit(function () {\n                    $('[type=submit]', this).prop('disabled', true);\n                    ref.clear_messages();\n                    ref.display_message('', 'loading');\n                });\n\n                break;\n        }\n\n        // select first input field in an edit form\n        if (this.gui_objects.editform) {\n            $('input,select,textarea', this.gui_objects.editform)\n                .not(':hidden').not(':disabled').first().select().focus();\n        }\n\n        // prevent from form submit with Enter key in file input fields\n        if (bw.ie) {\n            $('input[type=file]').keydown(function (e) {\n                if (e.keyCode == '13') {\n                    e.preventDefault();\n                }\n            });\n        }\n\n        // flag object as complete\n        this.loaded = true;\n        this.env.lastrefresh = new Date();\n\n        // show message\n        if (this.pending_message) {\n            this.display_message.apply(this, this.pending_message);\n        }\n\n        // init treelist widget\n        if (this.gui_objects.folderlist && window.rcube_treelist_widget\n            // some plugins may load rcube_treelist_widget and there's one case\n            // when this will cause problems - addressbook widget in compose,\n            // which already has been initialized using rcube_list_widget\n            && this.gui_objects.folderlist != this.gui_objects.addressbookslist\n        ) {\n            this.treelist = new rcube_treelist_widget(this.gui_objects.folderlist, {\n                selectable: true,\n                id_prefix: 'rcmli',\n                parent_focus: true,\n                id_encode: this.html_identifier_encode,\n                id_decode: this.html_identifier_decode,\n                check_droptarget: function (node) {\n                    return !node.virtual && ref.check_droptarget(node.id);\n                },\n            });\n\n            this.treelist\n                .addEventListener('collapse', function (node) {\n                    ref.folder_collapsed(node);\n                })\n                .addEventListener('expand', function (node) {\n                    ref.folder_collapsed(node);\n                })\n                .addEventListener('beforeselect', function (node) {\n                    return !ref.busy;\n                })\n                .addEventListener('select', function (node) {\n                    ref.triggerEvent('selectfolder', { folder: node.id, prefix: 'rcmli' });\n                    ref.mark_all_read_state();\n                });\n        }\n\n        // activate html5 file drop feature (if browser supports it and if configured)\n        if (this.gui_objects.filedrop && this.env.filedrop && window.FormData) {\n            $(document.body).on('dragover dragleave drop', function (e) {\n                return ref.document_drag_hover(e, e.type == 'dragover');\n            });\n\n            $(this.gui_objects.filedrop).addClass('droptarget')\n                .on('dragover dragleave', function (e) {\n                    return ref.file_drag_hover(e, e.type == 'dragover');\n                })\n                .get(0).addEventListener('drop', function (e) {\n                    return ref.file_dropped(e);\n                }, false);\n        }\n\n        // catch document (and iframe) mouse clicks\n        var body_mouseup = function (e) {\n            return ref.doc_mouse_up(e);\n        };\n        $(document.body)\n            .mouseup(body_mouseup)\n            .keydown(function (e) {\n                return ref.doc_keypress(e);\n            });\n\n        rcube_webmail.set_iframe_events({ mouseup: body_mouseup });\n\n        // trigger init event hook\n        this.triggerEvent('init', { task: this.task, action: this.env.action });\n\n        // execute all foreign onload scripts\n        // @deprecated\n        for (n in this.onloads) {\n            if (typeof this.onloads[n] === 'string') {\n                eval(this.onloads[n]);\n            } else if (typeof this.onloads[n] === 'function') {\n                this.onloads[n]();\n            }\n        }\n\n        // register menu buttons\n        $('[data-popup]').each(function () {\n            ref.register_menu_button(this, $(this).data('popup'));\n        });\n\n        // start keep-alive and refresh intervals\n        this.start_refresh();\n        this.start_keepalive();\n    };\n\n    this.log = function (msg) {\n        if (this.env.devel_mode && window.console && console.log) {\n            console.log(msg);\n        }\n    };\n\n    /*********************************************************/\n    /*               client command interface                */\n    /*********************************************************/\n\n    // execute a specific command on the web client\n    this.command = function (command, props, obj, event, allow_disabled) {\n        var ret;\n\n        if (obj && obj.blur && !(event && rcube_event.is_keyboard(event))) {\n            obj.blur();\n        }\n\n        // do nothing if interface is locked by another command\n        // with exception for searching reset and menu\n        if (this.busy && !(command == 'reset-search' && this.last_command == 'search') && !command.match(/^menu-/)) {\n            return false;\n        }\n\n        // let the browser handle this click (shift/ctrl usually opens the link in a new window/tab)\n        if ((obj && obj.href && String(obj.href).indexOf('#') < 0) && rcube_event.get_modifier(event)) {\n            return true;\n        }\n\n        // command not supported or allowed\n        if (!allow_disabled && !this.commands[command]) {\n            // pass command to parent window\n            if (this.is_framed()) {\n                parent.rcmail.command(command, props);\n            }\n\n            return false;\n        }\n\n        // check input before leaving compose step\n        if (this.task == 'mail' && this.env.action == 'compose' && !this.env.server_error && command != 'save-pref'\n            && ($.inArray(command, this.env.compose_commands) < 0 || command.startsWith('compose-encrypted') && ref.mailvelope_editor)\n            && !this.compose_skip_unsavedcheck\n        ) {\n            if (!this.env.is_sent && this.cmp_hash != this.compose_field_hash()) {\n                this.confirm_dialog(this.get_label('notsentwarning'), 'discard', function () {\n                    // remove copy from local storage if compose screen is left intentionally\n                    ref.remove_compose_data(ref.env.compose_id);\n                    ref.compose_skip_unsavedcheck = true;\n                    ref.command(command, props, obj, event);\n                });\n\n                return false;\n            }\n        }\n\n        this.last_command = command;\n        this.command_aborted = false;\n\n        // trigger plugin hooks\n        this.triggerEvent('actionbefore', { props: props, action: command, originalEvent: event });\n\n        if ((ret = this.triggerEvent('before' + command, props || event)) !== undefined) {\n            // abort if one of the handlers returned false\n            if (ret === false) {\n                return false;\n            }\n\n            props = ret;\n        }\n\n        // process external commands\n        if (typeof this.command_handlers[command] === 'function') {\n            ret = this.command_handlers[command](props, obj, event);\n        } else if (typeof this.command_handlers[command] === 'string') {\n            ret = window[this.command_handlers[command]](props, obj, event);\n        }\n        // process internal commands\n        else {\n            ret = this.command_handler(command, props, obj, event);\n        }\n\n        if (!this.command_aborted && this.triggerEvent('after' + command, props) === false) {\n            ret = false;\n        }\n\n        this.triggerEvent('actionafter', {\n            props: props, action: command, aborted: this.command_aborted, ret: ret, originalEvent: event,\n        });\n\n        if (ret === false) {\n            return false;\n        }\n\n        if ((obj && ret !== true) || this.command_aborted === true) {\n            return false;\n        }\n\n        return true;\n    };\n\n    // execute a specific known command\n    this.command_handler = function (command, props, obj, event) {\n        var uid, cid, url, flag;\n\n        // process internal command\n        switch (command) {\n            // commands to switch task\n            case 'logout':\n            case 'mail':\n            case 'addressbook':\n            case 'settings':\n                this.switch_task(command);\n\n                break;\n            case 'about':\n                this.redirect('?_task=settings&_action=about', false);\n\n                break;\n            case 'permaurl':\n                if (obj && obj.href && obj.target) {\n                    return true;\n                }\n                if (this.env.permaurl) {\n                    parent.location.href = this.env.permaurl;\n                }\n\n                break;\n            case 'extwin':\n                if (this.env.action == 'compose') {\n                    var form = this.gui_objects.messageform,\n                        win = this.open_window('');\n\n                    if (win) {\n                        this.save_compose_form_local();\n                        this.compose_skip_unsavedcheck = true;\n                        $(\"[name='_action']\", form).val('compose');\n                        form.action = this.url('mail/compose', { _id: this.env.compose_id, _extwin: 1 });\n                        form.target = win.name;\n                        form.submit();\n                    }\n                } else {\n                    this.open_window(this.env.permaurl, true);\n                }\n\n                break;\n            case 'change-format':\n                url = this.env.permaurl + '&_format=' + props;\n\n                if (this.env.action == 'preview') {\n                    url = url.replace(/_action=show/, '_action=preview') + '&_framed=1';\n                }\n                if (this.env.extwin) {\n                    url += '&_extwin=1';\n                }\n\n                location.href = url;\n\n                break;\n            case 'menu-open':\n                if (props && props.menu == 'attachmentmenu') {\n                    var mimetype = this.env.attachments[props.id];\n\n                    // in compose format is different\n                    if (mimetype && mimetype.mimetype) {\n                        mimetype = mimetype.mimetype;\n                    }\n\n                    this.enable_command('open-attachment', mimetype && this.env.mimetypes && $.inArray(mimetype, this.env.mimetypes) >= 0);\n                }\n                this.show_menu(props, props.show || undefined, event);\n\n                break;\n            case 'menu-close':\n                this.hide_menu(props, event);\n\n                break;\n            case 'menu-save':\n                this.triggerEvent(command, { props: props, originalEvent: event });\n\n                return false;\n            case 'open':\n                if (uid = this.get_single_uid()) {\n                    obj.href = this.url('show', this.params_from_uid(uid, { _extwin: 1 }));\n                    return true;\n                }\n\n                break;\n            case 'close':\n                if (this.env.extwin) {\n                    window.close();\n                }\n\n                break;\n            case 'list':\n                if (props && props != '') {\n                    this.reset_qsearch(true);\n                }\n                if (this.env.action == 'compose' && this.env.extwin) {\n                    window.close();\n                } else if (this.task == 'mail') {\n                    this.list_mailbox(props, props ? 1 : '');\n                    this.set_button_titles();\n                } else if (this.task == 'addressbook') {\n                    this.list_contacts(props);\n                }\n\n                break;\n            case 'set-listmode':\n                this.set_list_options(null, undefined, undefined, props == 'threads' ? 1 : 0);\n\n                break;\n            case 'sort':\n                var sort_order = this.env.sort_order,\n                    sort_col = !this.env.disabled_sort_col ? props : this.env.sort_col;\n\n                if (!this.env.disabled_sort_order) {\n                    sort_order = this.env.sort_col == sort_col && sort_order == 'ASC' ? 'DESC' : 'ASC';\n                }\n\n                // set table header and update env\n                this.set_list_sorting(sort_col, sort_order);\n\n                // reload message list\n                this.list_mailbox('', '', sort_col + '_' + sort_order);\n\n                break;\n            case 'nextpage':\n                this.list_page('next');\n\n                break;\n            case 'lastpage':\n                this.list_page('last');\n\n                break;\n            case 'previouspage':\n                this.list_page('prev');\n\n                break;\n            case 'firstpage':\n                this.list_page('first');\n\n                break;\n            case 'expunge':\n                if (this.env.exists) {\n                    this.expunge_mailbox(this.env.mailbox);\n                }\n\n                break;\n            case 'purge':\n            case 'empty-mailbox':\n                if (this.env.exists) {\n                    this.purge_mailbox(this.env.mailbox);\n                }\n\n                break;\n            // common commands used in multiple tasks\n            case 'show':\n                if (this.task == 'mail') {\n                    uid = this.get_single_uid();\n                    if (uid && (!this.env.uid || uid != this.env.uid)) {\n                        var mbox = this.get_message_mailbox(uid);\n                        if (mbox == this.env.drafts_mailbox) {\n                            this.open_compose_step({ _draft_uid: uid, _mbox: mbox });\n                        } else {\n                            this.show_message(uid);\n                        }\n                    }\n                } else if (this.task == 'addressbook') {\n                    cid = props ? props : this.get_single_cid();\n                    if (cid && !(this.env.action == 'show' && cid == this.env.cid)) {\n                        this.load_contact(cid, 'show');\n                    }\n                } else if (this.task == 'settings') {\n                    this.goto_url('settings/' + props, { _framed: 0 });\n                }\n\n                break;\n            case 'add':\n                if (this.task == 'addressbook') {\n                    this.load_contact(0, 'add');\n                } else if (this.task == 'settings' && this.env.action == 'responses') {\n                    this.load_response(0, 'add-response');\n                } else if (this.task == 'settings') {\n                    this.load_identity(0, 'add-identity');\n                }\n\n                break;\n            case 'edit':\n                if (this.task == 'addressbook' && (cid = this.get_single_cid())) {\n                    this.load_contact(cid, 'edit');\n                } else if (this.task == 'mail' && (uid = this.get_single_uid())) {\n                    url = { _mbox: this.get_message_mailbox(uid) };\n                    url[url._mbox == this.env.drafts_mailbox && props != 'new' ? '_draft_uid' : '_uid'] = uid;\n                    this.open_compose_step(url);\n                }\n\n                break;\n            case 'save':\n                var input, form = this.gui_objects.editform;\n                if (form) {\n                    // user prefs\n                    if ((input = $(\"[name='_pagesize']\", form)) && input.length && isNaN(parseInt(input.val(), 10))) {\n                        this.alert_dialog(this.get_label('nopagesizewarning'), function () {\n                            input.focus();\n                        });\n\n                        break;\n                    }\n                    // contacts/identities\n                    else {\n                        // reload form\n                        if (props == 'reload') {\n                            form.action += '&_reload=1';\n                        } else if (this.task == 'settings' && (this.env.identities_level % 2) == 0\n                            && (input = $(\"[name='_email']\", form)) && input.length && !rcube_check_email(input.val())\n                        ) {\n                            this.alert_dialog(this.get_label('noemailwarning'), function () {\n                                input.focus();\n                            });\n\n                            break;\n                        }\n                    }\n\n                    // add selected source (on the list)\n                    if (parent.rcmail && parent.rcmail.env.source) {\n                        form.action = this.add_url(form.action, '_orig_source', parent.rcmail.env.source);\n                    }\n\n                    form.submit();\n                }\n\n                break;\n            case 'delete':\n                // mail task\n                if (this.task == 'mail') {\n                    this.delete_messages(event);\n                }\n                // addressbook task\n                else if (this.task == 'addressbook') {\n                    this.delete_contacts();\n                }\n                // settings: canned response\n                else if (this.task == 'settings' && this.env.action == 'responses') {\n                    this.delete_response();\n                }\n                // settings: user identities\n                else if (this.task == 'settings') {\n                    this.delete_identity();\n                }\n\n                break;\n            // mail task commands\n            case 'move':\n            case 'moveto': // deprecated\n                if (this.task == 'mail') {\n                    this.move_messages(props, event);\n                } else if (this.task == 'addressbook') {\n                    this.move_contacts(props, event);\n                }\n\n                break;\n            case 'copy':\n                if (this.task == 'mail') {\n                    this.copy_messages(props, event);\n                } else if (this.task == 'addressbook') {\n                    this.copy_contacts(props, event);\n                }\n\n                break;\n            case 'mark':\n                if (props) {\n                    this.mark_message(props);\n                }\n\n                break;\n            case 'toggle_status':\n            case 'toggle_flag':\n                flag = command == 'toggle_flag' ? 'flagged' : 'read';\n\n                if (uid = props) {\n                    if (flag == 'flagged') {\n                        if (this.message_list.rows[uid].flagged) {\n                            flag = 'unflagged';\n                        }\n                    } else if (this.message_list.rows[uid].deleted) {\n                        flag = 'undelete';\n                    } else if (!this.message_list.rows[uid].unread) {\n                        flag = 'unread';\n                    }\n\n                    this.mark_message(flag, uid);\n                }\n\n                break;\n            case 'add-contact':\n                this.add_contact(props);\n\n                break;\n            case 'load-remote':\n                if (this.env.uid) {\n                    if (props && this.env.sender) {\n                        this.add_contact(this.env.sender, true, props);\n                        break;\n                    }\n\n                    this.show_message(this.env.uid, true, this.env.action == 'preview');\n                }\n\n                break;\n            case 'load-attachment':\n            case 'open-attachment':\n            case 'download-attachment':\n                var params, mimetype = this.env.attachments[props];\n\n                if (this.env.action == 'compose') {\n                    params = { _file: props, _id: this.env.compose_id };\n                    mimetype = mimetype ? mimetype.mimetype : '';\n                } else {\n                    params = { _mbox: this.env.mailbox, _uid: this.env.uid, _part: props };\n                }\n\n                // open attachment in frame if it's of a supported mimetype\n                if (command != 'download-attachment' && mimetype && this.env.mimetypes && $.inArray(mimetype, this.env.mimetypes) >= 0) {\n                    // Note: We disable _framed for proper X-Frame-Options:deny support (#6688)\n                    if (this.open_window(this.url('get', $.extend({ _frame: 1, _framed: 0 }, params)))) {\n                        return true;\n                    }\n                }\n\n                params._download = 1;\n\n                // prevent from page unload warning in compose\n                this.compose_skip_unsavedcheck = 1;\n                this.goto_url('get', params, false, true);\n                this.compose_skip_unsavedcheck = 0;\n\n                return true;\n            case 'select-all':\n                this.select_all_mode = props ? false : true;\n                this.dummy_select = true; // prevent msg opening if there's only one msg on the list\n                var list = this[this.task == 'addressbook' ? 'contact_list' : 'message_list'];\n                if (props == 'invert') {\n                    list.invert_selection();\n                } else {\n                    list.select_all(props == 'page' ? '' : props);\n                }\n                this.dummy_select = null;\n\n                break;\n            case 'select-none':\n                this.select_all_mode = false;\n                this[this.task == 'addressbook' ? 'contact_list' : 'message_list'].clear_selection();\n\n                break;\n            case 'expand-all':\n                this.env.autoexpand_threads = 1;\n                this.message_list.expand_all();\n\n                break;\n            case 'expand-unread':\n                this.env.autoexpand_threads = 2;\n                this.message_list.collapse_all();\n                this.expand_unread();\n\n                break;\n            case 'collapse-all':\n                this.env.autoexpand_threads = 0;\n                this.message_list.collapse_all();\n\n                break;\n            case 'nextmessage':\n                if (this.env.next_uid) {\n                    this.show_message(this.env.next_uid, false, this.env.action == 'preview');\n                }\n\n                break;\n            case 'lastmessage':\n                if (this.env.last_uid) {\n                    this.show_message(this.env.last_uid);\n                }\n\n                break;\n            case 'previousmessage':\n                if (this.env.prev_uid) {\n                    this.show_message(this.env.prev_uid, false, this.env.action == 'preview');\n                }\n\n                break;\n            case 'firstmessage':\n                if (this.env.first_uid) {\n                    this.show_message(this.env.first_uid);\n                }\n\n                break;\n            case 'compose':\n                url = {};\n\n                if (this.task == 'mail') {\n                    url = { _mbox: this.env.mailbox, _search: this.env.search_request };\n                    if (props) {\n                        url._to = props;\n                    }\n                }\n                // modify url if we're in addressbook\n                else if (this.task == 'addressbook') {\n                    // switch to mail compose step directly\n                    if (props && props.indexOf('@') > 0) {\n                        url._to = props;\n                    } else {\n                        var a_cids = [];\n                        // use contact id passed as command parameter\n                        if (props) {\n                            a_cids.push(props);\n                        }\n                        // get selected contacts\n                        else if (this.contact_list) {\n                            a_cids = this.contact_list.get_selection();\n                        }\n\n                        if (a_cids.length) {\n                            this.http_post('mailto', { _cid: a_cids.join(','), _source: this.env.source }, true);\n                            break;\n                        } else if (this.env.group && this.env.pagecount) {\n                            this.http_post('mailto', { _gid: this.env.group, _source: this.env.source }, true);\n                            break;\n                        }\n                    }\n                } else if (props && typeof props === 'string') {\n                    url._to = props;\n                } else if (props && typeof props === 'object') {\n                    $.extend(url, props);\n                }\n\n                this.open_compose_step(url);\n\n                break;\n            case 'spellcheck':\n                if (this.spellcheck_state()) {\n                    this.editor.spellcheck_stop();\n                } else {\n                    this.editor.spellcheck_start();\n                }\n\n                break;\n            case 'savedraft':\n                // Reset the auto-save timer\n                clearTimeout(this.save_timer);\n\n                // compose form did not change (and draft wasn't saved already)\n                if (this.env.draft_id && this.cmp_hash == this.compose_field_hash()) {\n                    this.auto_save_start();\n\n                    break;\n                }\n\n                this.submit_messageform(true);\n\n                break;\n            case 'send':\n                if (!props.nocheck && !this.env.is_sent && !this.check_compose_input(command)) {\n                    break;\n                }\n\n                // Reset the auto-save timer\n                clearTimeout(this.save_timer);\n\n                this.submit_messageform();\n\n                break;\n            case 'send-attachment':\n                // Reset the auto-save timer\n                clearTimeout(this.save_timer);\n\n                if (!(flag = this.upload_file(props || this.gui_objects.uploadform, 'upload'))) {\n                    if (flag !== false) {\n                        this.alert_dialog(this.get_label('selectimportfile'));\n                    }\n                    aborted = true;\n                }\n\n                break;\n            case 'insert-sig':\n                this.change_identity($(\"[name='_from']\")[0], true);\n\n                break;\n            case 'list-addresses':\n                this.list_contacts(props);\n                this.enable_command('add-recipient', false);\n\n                break;\n            case 'add-recipient':\n                this.compose_add_recipient(props);\n\n                break;\n            case 'reply-all':\n            case 'reply-list':\n            case 'reply':\n                if (uid = this.get_single_uid()) {\n                    url = { _reply_uid: uid, _mbox: this.get_message_mailbox(uid), _search: this.env.search_request };\n                    if (command == 'reply-all') {\n                        // do reply-list, when list is detected and popup menu wasn't used\n                        url._all = (!props && this.env.reply_all_mode == 1 && this.commands['reply-list'] ? 'list' : 'all');\n                    } else if (command == 'reply-list') {\n                        url._all = 'list';\n                    }\n\n                    this.open_compose_step(url);\n                }\n\n                break;\n            case 'forward-attachment':\n            case 'forward-inline':\n            case 'forward':\n                var uids = this.env.uid ? [this.env.uid] : (this.message_list ? this.message_list.get_selection() : []);\n                if (uids.length) {\n                    url = { _forward_uid: this.uids_to_list(uids), _mbox: this.env.mailbox, _search: this.env.search_request };\n                    if (command == 'forward-attachment' || (!props && this.env.forward_attachment) || uids.length > 1) {\n                        url._attachment = 1;\n                    }\n                    this.open_compose_step(url);\n                }\n\n                break;\n            case 'print':\n                if (this.task == 'addressbook') {\n                    if (uid = this.get_single_cid()) {\n                        url = '&_action=print&_cid=' + uid;\n                        if (this.env.source) {\n                            url += '&_source=' + urlencode(this.env.source);\n                        }\n                        this.open_window(this.env.comm_path + url, true, true);\n                    }\n                } else if (this.env.action == 'get' && !this.env.is_message) {\n                    this.gui_objects.messagepartframe.contentWindow.print();\n                } else if (uid = this.get_single_uid()) {\n                    url = this.url('print', this.params_from_uid(uid, { _safe: this.env.safemode ? 1 : 0 }));\n                    if (this.open_window(url, true, true)) {\n                        if (this.env.action != 'show' && this.env.action != 'get') {\n                            this.mark_message('read', uid);\n                        }\n                    }\n                }\n\n                break;\n            case 'viewsource':\n                if (uid = this.get_single_uid()) {\n                    this.open_window(this.url('viewsource', this.params_from_uid(uid)), true, true);\n                }\n\n                break;\n            case 'download':\n                if (this.env.action == 'get') {\n                    location.href = this.secure_url(location.href.replace(/_frame=/, '_download='));\n                } else if (uid = this.get_single_uid()) {\n                    this.goto_url('viewsource', this.params_from_uid(uid, { _save: 1 }), false, true);\n                }\n\n                break;\n            // quicksearch\n            case 'search':\n                return this.qsearch(props);\n            // reset quicksearch\n            case 'reset-search':\n                var n, s = this.env.search_request || this.env.qsearch;\n\n                this.reset_qsearch(true);\n\n                if (s && this.env.action == 'compose') {\n                    if (this.contact_list) {\n                        this.list_contacts_clear();\n                    }\n                } else if (s && this.env.mailbox) {\n                    this.list_mailbox(this.env.mailbox, 1);\n                } else if (s && this.task == 'addressbook') {\n                    this.env.source = this.env.last_source || '';\n                    this.env.group = this.env.last_group || '';\n                    this.list_contacts(this.env.source, this.env.group, 1);\n                }\n\n                break;\n            case 'pushgroup':\n                // add group ID and current search to stack\n                var group = {\n                    id: props.id,\n                    search_request: this.env.search_request,\n                    page: this.env.current_page,\n                    search: this.env.search_request && this.gui_objects.qsearchbox ? this.gui_objects.qsearchbox.value : null,\n                };\n\n                this.env.address_group_stack.push(group);\n                if (obj && event) {\n                    rcube_event.cancel(event);\n                }\n\n                // FIXME: no break?\n\n            case 'listgroup':\n                this.reset_qsearch();\n                this.list_contacts(props.source, props.id, 1, group);\n\n                break;\n            case 'popgroup':\n                if (this.env.address_group_stack.length) {\n                    var old = this.env.address_group_stack.pop();\n                    this.reset_qsearch();\n\n                    if (old.search_request) {\n                        // this code is executed when going back to the search result\n                        if (old.search && this.gui_objects.qsearchbox) {\n                            $(this.gui_objects.qsearchbox).val(old.search);\n                        }\n                        this.env.search_request = old.search_request;\n                        this.list_contacts_remote(null, null, this.env.current_page = old.page);\n                    } else {\n                        this.list_contacts(props.source, this.env.address_group_stack[this.env.address_group_stack.length - 1].id);\n                    }\n                }\n\n                break;\n            case 'import-messages':\n                var form = props || this.gui_objects.importform,\n                    importlock = this.set_busy(true, 'importwait');\n\n                if (!(flag = this.upload_file(form, 'import', importlock))) {\n                    this.set_busy(false, null, importlock);\n                    if (flag !== false) {\n                        this.alert_dialog(this.get_label('selectimportfile'));\n                    }\n                    this.command_aborted = true;\n                }\n\n                break;\n            case 'import':\n                var dialog = $('<iframe>').attr('src', this.url('import', { _framed: 1, _target: this.env.source })),\n                    import_func = function (e) {\n                        var win = dialog[0].contentWindow,\n                            form = win.rcmail.gui_objects.importformmap || win.rcmail.gui_objects.importform;\n\n                        if (form) {\n                            var lock, file = win.$('#rcmimportfile')[0];\n                            if (file && !file.value) {\n                                win.rcmail.alert_dialog(win.rcmail.get_label('selectimportfile'));\n                                return;\n                            }\n\n                            lock = win.rcmail.set_busy(true, 'importwait');\n                            $('[name=\"_unlock\"]', form).val(lock);\n                            form.submit();\n                            win.rcmail.lock_form(form, true);\n\n                            // disable Import button\n                            $(e.target).attr('disabled', true).next().focus();\n                        }\n                    },\n                    close_func = function (event, ui) {\n                        $(this).remove();\n                        if (ref.import_state == 'reload') {\n                            ref.command('list');\n                        }\n                    };\n\n                this.import_state = null;\n                this.import_dialog = this.simple_dialog(dialog, 'importcontacts', import_func, {\n                    close: close_func,\n                    button: 'import',\n                    width: 500,\n                    height: 300,\n                });\n\n                break;\n            case 'export':\n                if (this.contact_list.rowcount > 0) {\n                    this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _search: this.env.search_request }, false, true);\n                }\n\n                break;\n            case 'export-selected':\n                if (this.contact_list.rowcount > 0) {\n                    this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _cid: this.contact_list.get_selection().join(',') }, false, true);\n                }\n\n                break;\n            case 'upload-photo':\n                this.upload_contact_photo(props || this.gui_objects.uploadform);\n\n                break;\n            case 'delete-photo':\n                this.replace_contact_photo('-del-');\n\n                break;\n            case 'undo':\n                this.http_request('undo', '', this.display_message('', 'loading'));\n\n                break;\n            // unified command call (command name == function name)\n            default:\n                var func = command.replace(/-/g, '_');\n                if (this[func] && typeof this[func] === 'function') {\n                    return this[func](props, obj, event);\n                }\n        }\n    };\n\n    // set command(s) enabled or disabled\n    this.enable_command = function () {\n        var i, n, cmd, args = Array.prototype.slice.call(arguments),\n            enable = args.pop();\n\n        for (n = 0; n < args.length; n++) {\n            cmd = args[n];\n            // argument of type array\n            if (typeof cmd === 'string') {\n                this.commands[cmd] = enable;\n                this.set_button(cmd, (enable ? 'act' : 'pas'));\n                this.triggerEvent('enable-command', { command: cmd, status: enable });\n            } else {\n                // push array elements into commands array\n                for (i in cmd) {\n                    args.push(cmd[i]);\n                }\n            }\n        }\n\n        this.set_menu_buttons();\n    };\n\n    this.command_enabled = function (cmd) {\n        return this.commands[cmd];\n    };\n\n    // lock/unlock interface\n    this.set_busy = function (a, message, id) {\n        if (a && message) {\n            var msg = this.get_label(message);\n            if (msg == message) {\n                msg = 'Loading...';\n            }\n\n            id = this.display_message(msg, 'loading');\n        } else if (!a && id) {\n            this.hide_message(id);\n        }\n\n        this.busy = a;\n\n        if (this.gui_objects.editform) {\n            this.lock_form(this.gui_objects.editform, a);\n        }\n\n        return id;\n    };\n\n    // return a localized string\n    this.get_label = function (label, domain, variables = null) {\n        if (domain && this.labels[domain + '.' + label]) {\n            label = this.labels[domain + '.' + label];\n        }\n        else if (this.labels[label]) {\n            label = this.labels[label];\n        }\n\n        // set variable value in localized string\n        if (variables && Object.keys(variables).length) {\n            for (const [key, value] of Object.entries(variables)) {\n                label = label.replaceAll(`$${key}`, value);\n            }\n        }\n\n        return label;\n    };\n\n    // alias for convenience reasons\n    this.gettext = this.get_label;\n\n    // switch to another application task\n    this.switch_task = function (task) {\n        var action, path;\n\n        if ((path = task.split('/')).length == 2) {\n            task = path[0];\n            action = path[1];\n        }\n\n        if (this.task === task && task != 'mail') {\n            return;\n        }\n\n        var url = this.get_task_url(task);\n\n        if (action) {\n            url += '&_action=' + action;\n        }\n\n        if (task == 'mail') {\n            url += '&_mbox=INBOX';\n        } else if (task == 'logout') {\n            url = this.secure_url(url);\n            this.clear_compose_data();\n        }\n\n        this.redirect(url);\n    };\n\n    this.get_task_url = function (task, url) {\n        if (!url) {\n            url = this.env.comm_path;\n        }\n\n        if (url.match(/[?&]_task=[a-zA-Z0-9_-]+/)) {\n            return url.replace(/_task=[a-zA-Z0-9_-]+/, '_task=' + task);\n        }\n\n        return url.replace(/\\?.*$/, '') + '?_task=' + task;\n    };\n\n    this.reload = function (delay) {\n        if (this.is_framed()) {\n            parent.rcmail.reload(delay);\n        } else if (delay) {\n            setTimeout(function () {\n                ref.reload();\n            }, delay);\n        } else if (window.location) {\n            location.href = this.url('', { _extwin: this.env.extwin });\n        }\n    };\n\n    // Add variable to GET string, replace old value if exists\n    this.add_url = function (url, name, value) {\n        var urldata, datax, hash = '';\n\n        value = urlencode(value);\n\n        if (/(#[a-z0-9_-]*)$/.test(url)) {\n            hash = RegExp.$1;\n            url = url.substr(0, url.length - hash.length);\n        }\n\n        if (/(\\?.*)$/.test(url)) {\n            urldata = RegExp.$1;\n            datax = RegExp('((\\\\?|&)' + RegExp.escape(name) + '=[^&]*)');\n\n            if (datax.test(urldata)) {\n                urldata = urldata.replace(datax, RegExp.$2 + name + '=' + value);\n            } else {\n                urldata += '&' + name + '=' + value;\n            }\n\n            return url.replace(/(\\?.*)$/, urldata) + hash;\n        }\n\n        return url + '?' + name + '=' + value + hash;\n    };\n\n    // append CSRF protection token to the given url\n    this.secure_url = function (url) {\n        return this.add_url(url, '_token', this.env.request_token);\n    },\n\n    this.is_framed = function () {\n        return this.env.framed && parent.rcmail && parent.rcmail != this && typeof parent.rcmail.command === 'function';\n    };\n\n    this.save_pref = function (prop) {\n        var request = { _name: prop.name, _value: prop.value };\n\n        if (prop.session) {\n            request._session = prop.session;\n        }\n        if (prop.env) {\n            this.env[prop.env] = prop.value;\n        }\n\n        this.http_post('save-pref', request);\n    };\n\n    this.html_identifier = function (str, encode) {\n        return encode ? this.html_identifier_encode(str) : String(str).replace(this.identifier_expr, '_');\n    };\n\n    this.html_identifier_encode = function (str) {\n        return Base64.encode(String(str)).replace(/=+$/, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n    };\n\n    this.html_identifier_decode = function (str) {\n        str = String(str).replace(/-/g, '+').replace(/_/g, '/');\n\n        while (str.length % 4) {\n            str += '=';\n        }\n\n        return Base64.decode(str);\n    };\n\n\n    /*********************************************************/\n    /*                 event handling methods                 /\n    /*********************************************************/\n\n    this.drag_menu = function (e, target) {\n        var modkey = rcube_event.get_modifier(e),\n            menu = this.gui_objects.dragmenu;\n\n        if (menu && modkey == SHIFT_KEY && this.commands.copy) {\n            var pos = rcube_event.get_mouse_pos(e);\n            this.env.drag_target = target;\n            this.show_menu(this.gui_objects.dragmenu.id, true, e);\n            $(menu).css({ top: (pos.y - 10) + 'px', left: (pos.x - 10) + 'px' });\n            return true;\n        }\n\n        return false;\n    };\n\n    this.drag_menu_action = function (action) {\n        var menu = this.gui_objects.dragmenu;\n        if (menu) {\n            $(menu).hide();\n        }\n\n        this.command(action, this.env.drag_target);\n        this.env.drag_target = null;\n    };\n\n    this.drag_start = function (list) {\n        this.drag_active = true;\n\n        if (this.preview_timer) {\n            clearTimeout(this.preview_timer);\n        }\n\n        // prepare treelist widget for dragging interactions\n        if (this.treelist) {\n            this.treelist.drag_start();\n        }\n    };\n\n    this.drag_end = function (e) {\n        var list, model;\n\n        if (this.treelist) {\n            this.treelist.drag_end();\n        }\n\n        // execute drag & drop action when mouse was released\n        if (list = this.message_list) {\n            model = this.env.mailboxes;\n        } else if (list = this.contact_list) {\n            model = this.env.contactfolders;\n        }\n\n        // Note: we accept only mouse events to ignore dragging aborts with ESC key (#6623)\n        if (this.drag_active && model && this.env.last_folder_target && !rcube_event.is_keyboard(e)) {\n            var target = model[this.env.last_folder_target];\n            list.draglayer.hide();\n\n            if (this.contact_list) {\n                if (!this.contacts_drag_menu(e, target)) {\n                    this.command('move', target);\n                }\n            } else if (!this.drag_menu(e, target)) {\n                this.command('move', target);\n            }\n        }\n\n        this.drag_active = false;\n        this.env.last_folder_target = null;\n    };\n\n    this.drag_move = function (e) {\n        if (this.gui_objects.folderlist) {\n            var drag_target, oldclass,\n                layerclass = 'draglayernormal',\n                mouse = rcube_event.get_mouse_pos(e);\n\n            if (this.contact_list && this.contact_list.draglayer) {\n                oldclass = this.contact_list.draglayer.attr('class');\n            }\n\n            // mouse intersects a valid drop target on the treelist\n            if (this.treelist && (drag_target = this.treelist.intersects(mouse, true))) {\n                this.env.last_folder_target = drag_target;\n                layerclass = 'draglayer' + (this.check_droptarget(drag_target) > 1 ? 'copy' : 'normal');\n            } else {\n                // Clear target, otherwise drag end will trigger move into last valid droptarget\n                this.env.last_folder_target = null;\n            }\n\n            if (layerclass != oldclass && this.contact_list && this.contact_list.draglayer) {\n                this.contact_list.draglayer.attr('class', layerclass);\n            }\n        }\n    };\n\n    this.collapse_folder = function (name) {\n        if (this.treelist) {\n            this.treelist.toggle(name);\n        }\n    };\n\n    this.folder_collapsed = function (node) {\n        if (this.folder_collapsed_timer) {\n            clearTimeout(this.folder_collapsed_timer);\n        }\n\n        var prefname = this.env.task == 'addressbook' ? 'collapsed_abooks' : 'collapsed_folders',\n            old = this.env[prefname],\n            entry = '&' + urlencode(node.id) + '&';\n\n        this.env[prefname] = old.replace(entry, '');\n\n        if (node.collapsed) {\n            this.env[prefname] = this.env[prefname] + entry;\n\n            // select the folder if one of its children is currently selected\n            // don't select if it's virtual (#1488346)\n            if (!node.virtual && this.env.mailbox && this.env.mailbox.startsWith(node.id + this.env.delimiter)) {\n                this.command('list', node.id);\n            }\n        }\n\n        if (!this.drag_active) {\n            if (old !== this.env[prefname]) {\n                this.folder_collapsed_timer = setTimeout(function () {\n                    ref.command('save-pref', { name: prefname, value: ref.env[prefname] });\n                }, 10);\n            }\n\n            if (this.env.unread_counts) {\n                this.set_unread_count_display(node.id, false);\n            }\n        }\n    };\n\n    // global mouse-click handler to cleanup some UI elements\n    this.doc_mouse_up = function (e) {\n        var list, id, target = rcube_event.get_target(e);\n\n        // ignore event if jquery UI dialog is open\n        if ($(target).closest('.ui-dialog, .ui-widget-overlay').length) {\n            return;\n        }\n\n        // remove focus from list widgets\n        if (window.rcube_list_widget && rcube_list_widget._instances.length) {\n            $.each(rcube_list_widget._instances, function (i, list) {\n                if (list && !rcube_mouse_is_over(e, list.list.parentNode)) {\n                    list.blur();\n                }\n            });\n        }\n\n        // reset 'pressed' buttons\n        if (this.buttons_sel) {\n            for (id in this.buttons_sel) {\n                if (typeof id !== 'function') {\n                    this.button_out(this.buttons_sel[id], id);\n                }\n            }\n            this.buttons_sel = {};\n        }\n\n        // reset popup menus; delayed to have updated menu_stack data\n        setTimeout(function (e) {\n            var obj, skip, config, id, i, parents = $(target).parents();\n            for (i = ref.menu_stack.length - 1; i >= 0; i--) {\n                id = ref.menu_stack[i];\n                obj = $('#' + id);\n\n                if (obj.is(':visible')\n                    && target != obj.data('opener')\n                    && target != obj.get(0) // check if scroll bar was clicked (#1489832)\n                    && !parents.is(obj.data('opener'))\n                    && id != skip\n                    && (obj.attr('data-editable') != 'true' || !$(target).parents('#' + id).length)\n                    && (obj.attr('data-sticky') != 'true' || !rcube_mouse_is_over(e, obj.get(0)))\n                ) {\n                    ref.hide_menu(id, e);\n                }\n                skip = obj.data('parent');\n            }\n        }, 10, e);\n    };\n\n    // Global keypress event handler\n    this.doc_keypress = function (e) {\n        var target = e.target || {},\n            keyCode = rcube_event.get_keycode(e),\n            // Helper method to move focus to the next/prev active menu item\n            focus_menu_item = function (dir) {\n                var obj, item,\n                    mod = dir < 0 ? 'prevAll' : 'nextAll',\n                    limit = dir < 0 ? 'last' : 'first';\n\n                if (ref.focused_menu && (obj = $('#' + ref.focused_menu))) {\n                    item = obj.find(':focus').closest('li')[mod]().has(':not([aria-disabled=true])').find('a,input')[limit]();\n                    if (!item.length) {\n                        item = obj.find(':focus').closest('ul')[mod]().has(':not([aria-disabled=true])').find('a,input')[limit]();\n                    }\n                    return item.focus().length;\n                }\n\n                return 0;\n            };\n\n        if (e.keyCode != 27 && (!this.menu_keyboard_active || target.nodeName == 'TEXTAREA' || target.nodeName == 'SELECT')) {\n            return true;\n        }\n\n        switch (keyCode) {\n            case 38: // arrow-up\n            case 40: // arrow-down\n            case 63232: // arrow-up, in safari keypress\n            case 63233: // arrow-down, in safari keypress\n                focus_menu_item(keyCode == 38 || keyCode == 63232 ? -1 : 1);\n                return rcube_event.cancel(e);\n            case 9: // tab\n                if (this.focused_menu) {\n                    var mod = rcube_event.get_modifier(e);\n                    if (!focus_menu_item(mod == SHIFT_KEY ? -1 : 1)) {\n                        this.hide_menu(this.focused_menu, e);\n                    }\n                }\n\n                return rcube_event.cancel(e);\n            case 27: // esc\n                if (this.menu_stack.length) {\n                    this.hide_menu(this.menu_stack[this.menu_stack.length - 1], e);\n                }\n\n                break;\n        }\n\n        return true;\n    };\n\n    // Common handler for a keypress event on a list widget\n    this.list_keypress = function (list, conf) {\n        if (list.modkey == CONTROL_KEY) {\n            return;\n        }\n\n        if (list.key_pressed == list.DELETE_KEY || list.key_pressed == list.BACKSPACE_KEY) {\n            this.command(conf && conf.del ? conf.del : 'delete');\n        } else if (list.key_pressed == 33) {\n            this.command(conf && conf.prev ? conf.prev : 'previouspage');\n        } else if (list.key_pressed == 34) {\n            this.command(conf && conf.next ? conf.next : 'nextpage');\n        }\n    };\n\n    // Handler for a keypress event on a messages list widget\n    this.msglist_keypress = function (list) {\n        // On Enter open the message in list layout mode (no preview frame)\n        if (list.key_pressed == list.ENTER_KEY && !this.env.contentframe) {\n            this.command('show');\n        } else {\n            this.list_keypress(list);\n        }\n    };\n\n    this.msglist_select = function (list) {\n        if (this.preview_timer) {\n            clearTimeout(this.preview_timer);\n        }\n\n        var isDraft = false,\n            selected = list.get_single_selection(),\n            selection = list.get_selection(false),\n            selected_count = selection.length;\n\n        this.enable_command(this.env.message_commands, selected != null);\n\n        // Find out whether any of the selected messages comes from the Drafts folder\n        if (selected_count > 0) {\n            if (!this.env.multifolder_listing) {\n                isDraft = this.env.mailbox == this.env.drafts_mailbox;\n            } else {\n                $.each(selection, function (i, v) {\n                    if (ref.get_message_mailbox(v) == ref.env.drafts_mailbox) {\n                        isDraft = true;\n                        return false;\n                    }\n                });\n            }\n        }\n\n        // Disable some actions enabled above\n        if (selected) {\n            if (isDraft) {\n                this.enable_command('reply', 'reply-all', 'reply-list', 'forward', 'forward-inline',\n                    'forward-attachment', 'bounce', false);\n            } else {\n                var msg = this.env.messages[selected];\n                if (!msg.ml) {\n                    this.enable_command('reply-list', false);\n                }\n            }\n        }\n\n        // Multi-message commands\n        this.enable_command('delete', 'move', 'copy', 'mark', selected_count > 0);\n        this.enable_command('forward', 'forward-attachment', !isDraft && selected_count > 0);\n\n        // reset all-pages-selection\n        if (selected || (selected_count && selected_count != list.rowcount)) {\n            this.select_all_mode = false;\n        }\n\n        // start timer for message preview (wait for double click)\n        if (selected && this.env.contentframe && !list.multi_selecting && !this.dummy_select) {\n            // try to be responsive and try not to overload the server when user is pressing up/down key repeatedly\n            var now = new Date().getTime(),\n                time_diff = now - (this._last_msglist_select_time || 0),\n                preview_pane_delay = this.preview_delay_click;\n\n            // user is selecting messages repeatedly, wait until this ends (use larger delay)\n            if (time_diff < this.preview_delay_select) {\n                preview_pane_delay = this.preview_delay_select;\n                if (this.preview_timer) {\n                    clearTimeout(this.preview_timer);\n                }\n                if (this.env.contentframe) {\n                    this.show_contentframe(false);\n                }\n            }\n\n            this._last_msglist_select_time = now;\n            this.preview_timer = setTimeout(function () {\n                ref.msglist_get_preview();\n            }, preview_pane_delay);\n        } else if (this.env.contentframe) {\n            this.show_contentframe(false);\n        }\n    };\n\n    this.msglist_dbl_click = function (list) {\n        if (this.preview_timer) {\n            clearTimeout(this.preview_timer);\n        }\n\n        var mbox, uid = list.get_single_selection();\n\n        // TODO: Here we should just use this.command('show') but we can't\n        // because at this point this.busy=true (set by msglist_get_preview())\n\n        if (uid) {\n            mbox = this.get_message_mailbox(uid);\n            if (mbox == this.env.drafts_mailbox) {\n                this.open_compose_step({ _draft_uid: uid, _mbox: mbox });\n            } else {\n                this.show_message(uid);\n            }\n        }\n    };\n\n    this.msglist_get_preview = function () {\n        var uid = this.get_single_uid();\n\n        if (uid && this.env.contentframe && !this.drag_active) {\n            this.show_message(uid, false, true);\n        } else if (this.env.contentframe) {\n            this.show_contentframe(false);\n        }\n    };\n\n    this.msglist_expand = function (row) {\n        if (this.env.messages[row.uid]) {\n            this.env.messages[row.uid].expanded = row.expanded;\n        }\n\n        $(row.obj)[row.expanded ? 'addClass' : 'removeClass']('expanded');\n    };\n\n    this.msglist_set_coltypes = function (list) {\n        var i, found, name, cols = list.thead.rows[0].cells;\n\n        this.env.listcols = [];\n\n        for (i = 0; i < cols.length; i++) {\n            if (cols[i].id && cols[i].id.startsWith('rcm')) {\n                name = cols[i].id.slice(3);\n                this.env.listcols.push(name);\n            }\n        }\n\n        // update message list setup\n        this.msglist_setup(this.env.layout);\n\n        if ((found = $.inArray('flag', this.env.listcols)) >= 0) {\n            this.env.flagged_col = found;\n        }\n\n        if ((found = $.inArray('subject', this.env.listcols)) >= 0) {\n            this.env.subject_col = found;\n        }\n\n        this.command('save-pref', { name: 'list_cols', value: this.env.listcols, session: 'list_attrib/columns' });\n    };\n\n    this.msglist_setup = function (layout) {\n        var ret, listcols;\n\n        // allow plugins or skins to override default list layout\n        if (ret = this.triggerEvent('msglist_layout', layout)) {\n            layout = ret;\n        }\n\n        listcols = this.env[layout == 'widescreen' ? 'listcols_widescreen' : 'listcols'];\n\n        if (layout == 'widescreen' && !this.env.threading) {\n            listcols = $.grep(listcols, function (value) {\n                return value != 'threads';\n            });\n        }\n\n        // set env vars for message list\n        this.env.msglist_layout = layout;\n        this.env.msglist_cols = listcols;\n\n        // Set sort-* class on the list element\n        var list = this.gui_objects.messagelist,\n            classes = list.className.split(' ').filter(function (v) {\n                return !v.startsWith('sort-');\n            });\n\n        classes.push('sort-' + (this.env.sort_col || 'none'));\n        list.className = classes.join(' ');\n    };\n\n    this.check_droptarget = function (id) {\n        switch (this.task) {\n            case 'mail':\n                return (this.env.mailboxes[id]\n                    && !this.env.mailboxes[id].virtual\n                    && (this.env.mailboxes[id].id != this.env.mailbox || this.is_multifolder_listing())) ? 1 : 0;\n\n            case 'addressbook':\n                var target;\n                if (id != this.env.source && (target = this.env.contactfolders[id])) {\n                    // droptarget is a group\n                    if (target.type == 'group') {\n                        if (target.id != this.env.group && !this.env.contactfolders[target.source].readonly) {\n                            var is_other = this.env.selection_sources.length > 1 || $.inArray(target.source, this.env.selection_sources) == -1;\n                            return !is_other || this.commands.move ? 1 : 2;\n                        }\n                    }\n                    // droptarget is a (writable) addressbook and it's not the source\n                    else if (!target.readonly && (this.env.selection_sources.length > 1 || $.inArray(id, this.env.selection_sources) == -1)) {\n                        return this.commands.move ? 1 : 2;\n                    }\n                }\n        }\n\n        return 0;\n    };\n\n    // open popup window\n    this.open_window = function (url, small, toolbar) {\n        var extwin, features, wname = 'rcmextwin' + new Date().getTime();\n\n        url += (url.match(/\\?/) ? '&' : '?') + '_extwin=1';\n\n        if (!this.env.standard_windows) {\n            var win = this.is_framed() ? parent.window : window,\n                page = $(win),\n                page_width = page.width(),\n                page_height = bw.mz ? $('body', win).height() : page.height(),\n                w = Math.min(small ? this.env.popup_width_small : this.env.popup_width, page_width),\n                h = page_height, // always use same height\n                l = (win.screenLeft || win.screenX) + 20,\n                t = (win.screenTop || win.screenY) + 20;\n\n            features = 'width=' + w + ',height=' + h + ',top=' + t + ',left=' + l\n                + ',resizable=yes,location=no,scrollbars=yes'\n                + (toolbar ? ',toolbar=yes,menubar=yes,status=yes' : ',toolbar=no,menubar=no,status=no');\n        }\n\n        extwin = window.open(url, wname, features);\n\n        // detect popup blocker (#1489618)\n        // don't care this might not work with all browsers\n        if (!extwin || extwin.closed) {\n            this.display_message('windowopenerror', 'warning');\n            return;\n        }\n\n        // write loading... message to empty windows\n        if (!url && extwin.document) {\n            extwin.document.write('<html><body>' + this.get_label('loading') + '</body></html>');\n        }\n\n        // allow plugins to grab the window reference (#1489413)\n        this.triggerEvent('openwindow', { url: url, handle: extwin });\n\n        // focus window, delayed to bring to front\n        setTimeout(function () {\n            extwin && extwin.focus();\n        }, 10);\n\n        return extwin;\n    };\n\n\n    /*********************************************************/\n    /*             (message) list functionality              */\n    /*********************************************************/\n\n    this.init_message_row = function (row) {\n        var i, fn = {}, uid = row.uid,\n            status_icon = (this.env.status_col != null ? 'status' : 'msg') + 'icn' + row.id;\n\n        if (uid && this.env.messages[uid]) {\n            $.extend(row, this.env.messages[uid]);\n        }\n\n        // set eventhandler to status icon\n        if (row.icon = document.getElementById(status_icon)) {\n            fn.icon = function (e) {\n                ref.command('toggle_status', uid);\n            };\n        }\n\n        // save message icon position too\n        if (this.env.status_col != null) {\n            row.msgicon = document.getElementById('msgicn' + row.id);\n        } else {\n            row.msgicon = row.icon;\n        }\n\n        // set eventhandler to flag icon\n        if (this.env.flagged_col != null && (row.flagicon = document.getElementById('flagicn' + row.id))) {\n            fn.flagicon = function (e) {\n                ref.command('toggle_flag', uid);\n            };\n        }\n\n        // set event handler to thread expand/collapse icon\n        if (!row.depth && row.has_children && (row.expando = document.getElementById('rcmexpando' + row.id))) {\n            fn.expando = function (e) {\n                ref.expand_message_row(e, uid);\n            };\n        }\n\n        // attach events\n        $.each(fn, function (i, f) {\n            row[i].onclick = function (e) {\n                f(e); return rcube_event.cancel(e);\n            };\n            if (bw.touch && row[i].addEventListener) {\n                row[i].addEventListener('touchend', function (e) {\n                    if (e.changedTouches.length == 1) {\n                        f(e);\n                        return rcube_event.cancel(e);\n                    }\n                }, false);\n            }\n        });\n\n        this.triggerEvent('insertrow', { uid: uid, row: row });\n    };\n\n    // create a table row in the message list\n    this.add_message_row = function (uid, cols, flags, attop) {\n        if (!this.gui_objects.messagelist || !this.message_list) {\n            return false;\n        }\n\n        // Prevent from adding messages from different folder (#1487752)\n        if (flags.mbox != this.env.mailbox && !flags.skip_mbox_check) {\n            return false;\n        }\n\n        // When deleting messages fast it may happen that the same message\n        // from the next page could be added many times, we prevent this here\n        if (this.message_list.rows[uid]) {\n            return false;\n        }\n\n        if (!this.env.messages[uid]) {\n            this.env.messages[uid] = {};\n        }\n\n        // merge flags over local message object\n        $.extend(this.env.messages[uid], {\n            deleted: flags.deleted ? 1 : 0,\n            replied: flags.answered ? 1 : 0,\n            unread: !flags.seen ? 1 : 0,\n            forwarded: flags.forwarded ? 1 : 0,\n            flagged: flags.flagged ? 1 : 0,\n            has_children: flags.has_children ? 1 : 0,\n            depth: flags.depth ? flags.depth : 0,\n            unread_children: flags.unread_children || 0,\n            flagged_children: flags.flagged_children || 0,\n            parent_uid: flags.parent_uid || 0,\n            selected: this.select_all_mode || this.message_list.in_selection(uid),\n            prio: flags.prio || 0,\n            ml: flags.ml ? 1 : 0,\n            ctype: flags.ctype,\n            mbox: flags.mbox,\n            size: cols.size,\n            date: cols.date,\n            flags: flags.extra_flags, // flags from plugins\n            folder: cols.folder,\n        });\n\n        var c, n, col, html, css_class, label, status_class = '', status_label = '', tree = '', expando = '',\n            list = this.message_list,\n            rows = list.rows,\n            message = this.env.messages[uid],\n            msg_id = this.html_identifier(uid, true),\n            row_class = 'message'\n                + (!flags.seen ? ' unread' : '')\n                + (flags.deleted ? ' deleted' : '')\n                + (flags.flagged ? ' flagged' : '')\n                + (message.selected ? ' selected' : ''),\n            row = {\n                cols: [], style: {}, id: 'rcmrow' + msg_id, uid: uid,\n            },\n            layout = this.env.msglist_layout,\n            listcols = this.env.msglist_cols;\n\n        // widescreen layout does not have a separate status column\n        if (layout == 'widescreen') {\n            this.env.status_col = null;\n        } else if ((n = $.inArray('status', listcols)) >= 0) {\n            this.env.status_col = n;\n        }\n\n        // message status icons\n        css_class = 'msgicon';\n        if (this.env.status_col === null) {\n            css_class += ' status';\n            if (flags.deleted) {\n                status_class += ' deleted';\n                status_label += this.get_label('deleted') + ' ';\n            } else if (!flags.seen) {\n                status_class += ' unread';\n                status_label += this.get_label('unread') + ' ';\n            } else if (flags.unread_children > 0) {\n                status_class += ' unreadchildren';\n            }\n        }\n        if (flags.answered) {\n            status_class += ' replied';\n            status_label += this.get_label('replied') + ' ';\n        }\n        if (flags.forwarded) {\n            status_class += ' forwarded';\n            status_label += this.get_label('forwarded') + ' ';\n        }\n\n        // update selection\n        if (message.selected && !list.in_selection(uid)) {\n            list.selection.push(uid);\n        }\n\n        // threads\n        if (this.env.threading) {\n            if (message.depth) {\n                // This assumes that div width is hardcoded to 15px,\n                tree += '<span id=\"rcmtab' + msg_id + '\" class=\"branch\" style=\"width:' + (message.depth * 15) + 'px;\">&nbsp;&nbsp;</span>';\n\n                if ((rows[message.parent_uid] && rows[message.parent_uid].expanded === false)\n                    || ((this.env.autoexpand_threads == 0 || this.env.autoexpand_threads == 2)\n                        && (!rows[message.parent_uid] || !rows[message.parent_uid].expanded))\n                ) {\n                    row.style.display = 'none';\n                    message.expanded = false;\n                } else {\n                    message.expanded = true;\n                }\n\n                row_class += ' thread expanded';\n            } else if (message.has_children) {\n                if (message.expanded === undefined && (this.env.autoexpand_threads == 1 || (this.env.autoexpand_threads == 2 && message.unread_children))) {\n                    message.expanded = true;\n                }\n\n                expando = '<div id=\"rcmexpando' + row.id + '\" class=\"' + (message.expanded ? 'expanded' : 'collapsed') + '\">&nbsp;&nbsp;</div>';\n                row_class += ' thread' + (message.expanded ? ' expanded' : '');\n            }\n\n            if (flags.unread_children && flags.seen && !message.expanded) {\n                row_class += ' unroot';\n            }\n\n            if (flags.flagged_children && !message.expanded) {\n                row_class += ' flaggedroot';\n            }\n        }\n\n        tree += '<span id=\"msgicn' + row.id + '\" class=\"' + css_class + status_class + '\" title=\"' + status_label + '\"></span>';\n        row.className = row_class;\n\n        // build subject link\n        if (cols.subject) {\n            var action  = flags.mbox == this.env.drafts_mailbox ? 'compose' : 'show',\n                uid_param = flags.mbox == this.env.drafts_mailbox ? '_draft_uid' : '_uid',\n                query = { _mbox: flags.mbox };\n\n            query[uid_param] = uid;\n            cols.subject = '<a href=\"' + this.url(action, query) + '\" onclick=\"return rcube_event.keyboard_only(event)\"'\n                + ' onmouseover=\"rcube_webmail.long_subject_title(this)\" tabindex=\"-1\"><span>' + cols.subject + '</span></a>';\n        }\n\n        // add each submitted col\n        for (n in listcols) {\n            c = listcols[n];\n            col = { className: String(c).toLowerCase(), events: {} };\n\n            if (this.env.coltypes[c] && this.env.coltypes[c].hidden) {\n                col.className += ' hidden';\n            }\n\n            if (c == 'flag') {\n                css_class = (flags.flagged ? 'flagged' : 'unflagged');\n                label = this.get_label(css_class);\n                html = '<span id=\"flagicn' + row.id + '\" class=\"' + css_class + '\" title=\"' + label + '\"></span>';\n            } else if (c == 'attachment') {\n                label = this.get_label('withattachment');\n                if (flags.attachmentClass) {\n                    html = '<span class=\"' + flags.attachmentClass + '\" title=\"' + label + '\"></span>';\n                } else if (flags.ctype == 'multipart/report') {\n                    html = '<span class=\"report\"></span>';\n                } else if (flags.ctype == 'multipart/encrypted' || flags.ctype == 'application/pkcs7-mime' || flags.ctype == 'application/x-pkcs7-mime') {\n                    html = '<span class=\"encrypted\"></span>';\n                } else if (flags.hasattachment || (!flags.hasnoattachment && /application\\/|multipart\\/(m|signed)/.test(flags.ctype))) {\n                    html = '<span class=\"attachment\" title=\"' + label + '\"></span>';\n                } else {\n                    html = '&nbsp;';\n                }\n            } else if (c == 'status') {\n                label = '';\n                if (flags.deleted) {\n                    css_class = 'deleted';\n                    label = this.get_label('deleted');\n                } else if (!flags.seen) {\n                    css_class = 'unread';\n                    label = this.get_label('unread');\n                } else if (flags.unread_children > 0) {\n                    css_class = 'unreadchildren';\n                } else {\n                    css_class = 'msgicon';\n                }\n                html = '<span id=\"statusicn' + row.id + '\" class=\"' + css_class + status_class + '\" title=\"' + label + '\"></span>';\n            } else if (c == 'threads') {\n                html = expando;\n            } else if (c == 'subject') {\n                html = tree + cols[c];\n            } else if (c == 'priority') {\n                if (flags.prio > 0 && flags.prio < 6) {\n                    label = this.get_label('priority') + ' ' + flags.prio;\n                    html = '<span class=\"prio' + flags.prio + '\" title=\"' + label + '\"></span>';\n                } else {\n                    html = '&nbsp;';\n                }\n            } else if (c == 'folder') {\n                html = '<span onmouseover=\"rcube_webmail.long_subject_title(this)\">' + cols[c] + '<span>';\n            } else {\n                html = cols[c];\n            }\n\n            col.innerHTML = html;\n            row.cols.push(col);\n        }\n\n        if (layout == 'widescreen') {\n            row = this.widescreen_message_row(row, uid, message);\n        }\n\n        list.insert_row(row, attop);\n\n        // remove 'old' row\n        if (attop && this.env.pagesize && list.rowcount > this.env.pagesize) {\n            var uid = list.get_last_row();\n            list.remove_row(uid);\n            list.clear_selection(uid);\n        }\n    };\n\n    // Converts standard message list record into \"widescreen\" (3-column) layout\n    this.widescreen_message_row = function (row, uid, message) {\n        var domrow = document.createElement('tr');\n\n        domrow.id = row.id;\n        domrow.uid = row.uid;\n        domrow.className = row.className;\n        if (row.style) {\n            $.extend(domrow.style, row.style);\n        }\n\n        if (this.is_multifolder_listing()) {\n            domrow.title = rcmail.get_label('infolder').replace('$folder', message.folder);\n        }\n\n        $.each(this.env.widescreen_list_template, function () {\n            if (!ref.env.threading && this.className == 'threads') {\n                return;\n            }\n\n            var i, n, e, col, domcol,\n                domcell = document.createElement('td');\n\n            if (this.className) {\n                domcell.className = this.className;\n            }\n\n            for (i = 0; this.cells && i < this.cells.length; i++) {\n                for (n = 0; row.cols && n < row.cols.length; n++) {\n                    if (this.cells[i] == row.cols[n].className) {\n                        col = row.cols[n];\n                        domcol = document.createElement('span');\n                        domcol.className = this.cells[i];\n                        if (this.className == 'subject' && domcol.className != 'subject') {\n                            domcol.className += ' skip-on-drag';\n                        }\n                        if (col.innerHTML) {\n                            domcol.innerHTML = col.innerHTML;\n                        }\n                        domcell.appendChild(domcol);\n                        break;\n                    }\n                }\n            }\n\n            domrow.appendChild(domcell);\n        });\n\n        if (this.env.threading && message.depth) {\n            n = this.calculate_thread_padding(message.depth);\n            $('td.subject', domrow).attr('style', 'padding-left:' + n + ' !important');\n            $('span.branch', domrow).remove();\n        }\n\n        return domrow;\n    };\n\n    this.calculate_thread_padding = function (level) {\n        ref.env.thread_padding.match(/^([0-9.]+)(.+)/);\n        return (Math.min(6, level) * parseFloat(RegExp.$1)) + RegExp.$2;\n    };\n\n    this.set_list_sorting = function (sort_col, sort_order) {\n        var sort_old = this.env.sort_col == 'arrival' ? 'date' : this.env.sort_col,\n            sort_new = sort_col == 'arrival' ? 'date' : sort_col;\n\n        // set table header class\n        $('#rcm' + sort_old).removeClass('sorted' + this.env.sort_order.toUpperCase());\n        if (sort_new) {\n            $('#rcm' + sort_new).addClass('sorted' + sort_order);\n        }\n\n        // if sorting by 'arrival' is selected, click on date column should not switch to 'date'\n        $('#rcmdate > a').prop('rel', sort_col == 'arrival' ? 'arrival' : 'date');\n\n        this.env.sort_col = sort_col;\n        this.env.sort_order = sort_order;\n    };\n\n    this.set_list_options = function (cols, sort_col, sort_order, threads, layout) {\n        var update, post_data = {};\n\n        if (sort_col === undefined) {\n            sort_col = this.env.sort_col;\n        }\n        if (!sort_order) {\n            sort_order = this.env.sort_order;\n        }\n\n        if (this.env.sort_col != sort_col || this.env.sort_order != sort_order) {\n            update = 1;\n            this.set_list_sorting(sort_col, sort_order);\n        }\n\n        if (this.env.threading != threads) {\n            update = 1;\n            post_data._threads = threads;\n        }\n\n        if (layout && this.env.layout != layout) {\n            this.triggerEvent('layout-change', { old_layout: this.env.layout, new_layout: layout });\n            update = 1;\n            this.env.layout = post_data._layout = layout;\n\n            // update message list setup\n            this.msglist_setup(this.env.layout);\n        }\n\n        if (cols && cols.length) {\n            // make sure new columns are added at the end of the list\n            var i, idx, name, newcols = [], oldcols = this.env.listcols;\n\n            for (i = 0; i < oldcols.length; i++) {\n                name = oldcols[i];\n                idx = $.inArray(name, cols);\n                if (idx != -1) {\n                    newcols.push(name);\n                    delete cols[idx];\n                }\n            }\n\n            for (i = 0; i < cols.length; i++) {\n                if (cols[i]) {\n                    newcols.push(cols[i]);\n                }\n            }\n\n            if (newcols.join() != oldcols.join()) {\n                update = 1;\n                post_data._cols = newcols.join(',');\n            }\n        }\n\n        if (update) {\n            this.list_mailbox('', '', sort_col + '_' + sort_order, post_data);\n        }\n    };\n\n    // when user double-clicks on a row\n    this.show_message = function (id, safe, preview) {\n        if (!id) {\n            return;\n        }\n\n        var win, target = window,\n            url = this.params_from_uid(id, { _caps: this.browser_capabilities() });\n\n        if (preview && (win = this.get_frame_window(this.env.contentframe))) {\n            target = win;\n            url._framed = 1;\n        }\n\n        if (safe) {\n            url._safe = 1;\n        }\n\n        // also send search request to get the right messages\n        if (this.env.search_request) {\n            url._search = this.env.search_request;\n        }\n\n        if (this.env.extwin) {\n            url._extwin = 1;\n        }\n\n        url = this.url(preview ? 'preview' : 'show', url);\n\n        if (preview) {\n            this.preview_id = id;\n        }\n\n        if (preview && String(target.location.href).indexOf(url) >= 0) {\n            this.show_contentframe(true);\n        } else {\n            if (!preview && this.env.message_extwin && !this.env.extwin) {\n                this.open_window(url, true);\n            } else {\n                // \"Allow remote resources\" reloads the page, we remove this request from the history,\n                // so Back button works as expected, i.e. ignores the reload request (#6620)\n                if (safe && document.referrer && window.history.replaceState) {\n                    window.history.replaceState({}, '', document.referrer);\n                }\n\n                this.location_href(url, target, true);\n            }\n        }\n    };\n\n    // Update message status and unread counter after marking a message as read\n    this.set_unread_message = function (id, folder) {\n        var self = this;\n\n        // find window with messages list\n        if (!self.message_list) {\n            self = self.opener();\n        }\n\n        if (!self && window.parent) {\n            self = parent.rcmail;\n        }\n\n        if (!self || !self.message_list) {\n            return;\n        }\n\n        // this may fail in multifolder mode\n        if (self.set_message(id, 'unread', false) === false) {\n            self.set_message(id + '-' + folder, 'unread', false);\n        }\n\n        if (self.env.unread_counts[folder] > 0) {\n            self.env.unread_counts[folder] -= 1;\n            self.set_unread_count(folder, self.env.unread_counts[folder], folder == 'INBOX' && !self.is_multifolder_listing());\n        }\n    };\n\n    this.show_contentframe = function (show) {\n        var frame, win, name = this.env.contentframe;\n\n        if (frame = this.get_frame_element(name)) {\n            if (!show && (win = this.get_frame_window(name))) {\n                if (win.location.href.indexOf(this.env.blankpage) < 0) {\n                    win.stop();\n                    win.location.href = this.env.blankpage;\n                }\n            } else if (!bw.safari && !bw.konq) {\n                $(frame)[show ? 'show' : 'hide']();\n            }\n        }\n\n        if (!show) {\n            this.unlock_frame();\n            delete this.preview_id;\n        }\n    };\n\n    this.get_frame_element = function (id) {\n        var frame;\n\n        if (id && (frame = document.getElementById(id))) {\n            return frame;\n        }\n    };\n\n    this.get_frame_window = function (id) {\n        var frame = this.get_frame_element(id);\n\n        if (frame && frame.name && window.frames) {\n            return window.frames[frame.name];\n        }\n    };\n\n    this.lock_frame = function (target) {\n        var rc = this.is_framed() ? parent.rcmail : this;\n\n        if (!rc.env.frame_lock) {\n            rc.env.frame_lock = rc.set_busy(true, 'loading');\n        }\n\n        try {\n            if (target.frameElement) {\n                $(target.frameElement).on('load.lock', function (e) {\n                    rc.unlock_frame();\n                    $(this).off('load.lock');\n                });\n            }\n        } catch (e) {\n            // Ignore permission denied error\n        }\n    };\n\n    this.unlock_frame = function () {\n        if (this.env.frame_lock) {\n            this.set_busy(false, null, this.env.frame_lock);\n            this.env.frame_lock = null;\n        }\n    };\n\n    // List a specific page\n    this.list_page = function (page) {\n        if (page == 'next') {\n            page = this.env.current_page + 1;\n        } else if (page == 'last') {\n            page = this.env.pagecount;\n        } else if (page == 'prev' && this.env.current_page > 1) {\n            page = this.env.current_page - 1;\n        } else if (page == 'first' && this.env.current_page > 1) {\n            page = 1;\n        }\n\n        if (page > 0 && page <= this.env.pagecount) {\n            this.env.current_page = page;\n\n            if (this.task == 'addressbook' || this.contact_list) {\n                this.list_contacts(this.env.source, this.env.group, page);\n            } else if (this.task == 'mail') {\n                this.list_mailbox(this.env.mailbox, page);\n            }\n        }\n    };\n\n    // Sends request to check for recent messages\n    this.checkmail = function () {\n        var lock = this.set_busy(true, 'checkingmail'),\n            params = this.check_recent_params();\n\n        this.http_post('check-recent', params, lock);\n    };\n\n    // List messages of a specific mailbox using filter\n    this.filter_mailbox = function (filter) {\n        if (this.filter_disabled) {\n            return;\n        }\n\n        var params = this.search_params(false, filter),\n            lock = this.set_busy(true, 'searching');\n\n        this.clear_message_list();\n\n        // reset vars\n        this.env.current_page = 1;\n        this.env.search_filter = filter;\n        this.http_request('search', params, lock);\n        this.update_state({ _mbox: params._mbox, _filter: filter, _scope: params._scope });\n    };\n\n    // Reload the current message listing\n    this.refresh_list = function () {\n        this.list_mailbox(this.env.mailbox, this.env.current_page || 1, null, { _clear: 1 }, true);\n        if (this.message_list) {\n            this.message_list.clear_selection();\n        }\n    };\n\n    // List messages of a specific mailbox\n    this.list_mailbox = function (mbox, page, sort, url, update_only) {\n        var win, target = window;\n\n        if (typeof url !== 'object') {\n            url = {};\n        }\n\n        if (!mbox) {\n            mbox = this.env.mailbox ? this.env.mailbox : 'INBOX';\n        }\n\n        // add sort to url if set\n        if (sort) {\n            url._sort = sort;\n        }\n\n        // folder change, reset page, search scope, etc.\n        if (this.env.mailbox != mbox) {\n            page = 1;\n            this.env.current_page = page;\n            this.env.search_scope = this.env.search_scope || 'base';\n            this.select_all_mode = false;\n            this.reset_search_filter();\n        }\n        // also send search request to get the right messages\n        else if (this.env.search_request) {\n            url._search = this.env.search_request;\n        }\n\n        if (!update_only) {\n            // unselect selected messages and clear the list and message data\n            this.clear_message_list();\n\n            if (mbox != this.env.mailbox || (mbox == this.env.mailbox && !page && !sort)) {\n                url._refresh = 1;\n            }\n\n            this.select_folder(mbox, '', true);\n            this.unmark_folder(mbox, 'recent', '', true);\n            this.env.mailbox = mbox;\n        }\n\n        // load message list remotely\n        if (this.gui_objects.messagelist) {\n            this.list_mailbox_remote(mbox, page, url);\n            return;\n        }\n\n        if (win = this.get_frame_window(this.env.contentframe)) {\n            target = win;\n            url._framed = 1;\n        }\n\n        if (this.env.uid) {\n            url._uid = this.env.uid;\n        }\n\n        if (page) {\n            url._page = page;\n        }\n\n        // load message list to target frame/window\n        if (mbox) {\n            url._mbox = mbox;\n            this.set_busy(true, 'loading');\n            this.location_href(url, target);\n        }\n    };\n\n    this.clear_message_list = function () {\n        this.env.messages = {};\n        this.show_contentframe(false);\n\n        if (this.message_list) {\n            this.message_list.clear(true);\n        }\n    };\n\n    // send remote request to load message list\n    this.list_mailbox_remote = function (mbox, page, url) {\n        var lock = this.set_busy(true, 'loading');\n\n        if (typeof url !== 'object') {\n            url = {};\n        }\n\n        url._layout = this.env.layout;\n        url._mbox = mbox;\n        url._page = page;\n\n        this.http_request('list', url, lock);\n        this.update_state({ _mbox: mbox, _page: (page && page > 1 ? page : null) });\n    };\n\n    // Removes messages that don't exist from list selection array\n    this.update_selection = function () {\n        var list = this.message_list,\n            selected = list.selection,\n            rows = list.rows,\n            i, selection = [];\n\n        for (i in selected) {\n            if (rows[selected[i]]) {\n                selection.push(selected[i]);\n            }\n        }\n\n        list.selection = selection;\n\n        // reset preview frame, if currently previewed message is not selected (has been removed)\n        try {\n            var win = this.get_frame_window(this.env.contentframe),\n                id = win.rcmail.env.uid;\n\n            if (id && !list.in_selection(id)) {\n                this.show_contentframe(false);\n            }\n        } catch (e) {\n            // ignore\n        }\n    };\n\n    // Expand all threads with unread children\n    this.expand_unread = function () {\n        var r, tbody = this.message_list.tbody,\n            new_row = tbody.firstChild;\n\n        while (new_row) {\n            if (new_row.nodeType == 1 && (r = this.message_list.rows[new_row.uid]) && r.unread_children) {\n                this.message_list.expand_all(r);\n                this.set_unread_children(r.uid);\n            }\n\n            new_row = new_row.nextSibling;\n        }\n\n        return false;\n    };\n\n    // Thread expanding/collapsing handler\n    this.expand_message_row = function (e, uid) {\n        var row = this.message_list.rows[uid];\n\n        // handle unread_children/flagged_children mark\n        row.expanded = !row.expanded;\n        this.set_unread_children(uid);\n        this.set_flagged_children(uid);\n        row.expanded = !row.expanded;\n\n        this.message_list.expand_row(e, uid);\n    };\n\n    // Message list expanding\n    this.expand_threads = function () {\n        if (!this.env.threading || !this.env.autoexpand_threads || !this.message_list) {\n            return;\n        }\n\n        switch (this.env.autoexpand_threads) {\n            case 2:\n                this.expand_unread();\n                break;\n            case 1:\n                this.message_list.expand_all();\n                break;\n        }\n    };\n\n    // Initializes threads indicators/expanders after list update\n    this.init_threads = function (roots, mbox) {\n        // #1487752\n        if (mbox && mbox != this.env.mailbox) {\n            return false;\n        }\n\n        for (var n = 0, len = roots.length; n < len; n++) {\n            this.add_tree_icons(roots[n]);\n        }\n\n        this.expand_threads();\n    };\n\n    // adds threads tree icons to the list (or specified thread)\n    this.add_tree_icons = function (root) {\n        var i, l, r, n, len, pos, row, tmp = [], uid = [],\n            rows = this.message_list.rows;\n\n        if (root) {\n            row = rows[root] ? rows[root].obj : null;\n        } else {\n            row = this.message_list.tbody.firstChild;\n        }\n\n        while (row) {\n            if (row.nodeType == 1 && (r = rows[row.uid])) {\n                if (r.depth) {\n                    for (i = tmp.length - 1; i >= 0; i--) {\n                        len = tmp[i].length;\n                        if (len > r.depth) {\n                            pos = len - r.depth;\n                            if (!(tmp[i][pos] & 2)) {\n                                tmp[i][pos] = tmp[i][pos] ? tmp[i][pos] + 2 : 2;\n                            }\n                        } else if (len == r.depth) {\n                            if (!(tmp[i][0] & 2)) {\n                                tmp[i][0] += 2;\n                            }\n                        }\n                        if (r.depth > len) {\n                            break;\n                        }\n                    }\n\n                    tmp.push(new Array(r.depth));\n                    tmp[tmp.length - 1][0] = 1;\n                    uid.push(r.uid);\n                } else {\n                    if (tmp.length) {\n                        for (i in tmp) {\n                            this.set_tree_icons(uid[i], tmp[i]);\n                        }\n                        tmp = [];\n                        uid = [];\n                    }\n                    if (root && row != rows[root].obj) {\n                        break;\n                    }\n                }\n            }\n            row = row.nextSibling;\n        }\n\n        if (tmp.length) {\n            for (i in tmp) {\n                this.set_tree_icons(uid[i], tmp[i]);\n            }\n        }\n    };\n\n    // Adds tree icons to specified message row\n    this.set_tree_icons = function (uid, tree) {\n        var i, divs = [], html = '', len = tree.length;\n\n        for (i = 0; i < len; i++) {\n            if (tree[i] > 2) {\n                divs.push({ class: 'l3', width: 15 });\n            } else if (tree[i] > 1) {\n                divs.push({ class: 'l2', width: 15 });\n            } else if (tree[i] > 0) {\n                divs.push({ class: 'l1', width: 15 });\n            }\n            // separator div\n            else if (divs.length && !divs[divs.length - 1].class) {\n                divs[divs.length - 1].width += 15;\n            } else {\n                divs.push({ class: null, width: 15 });\n            }\n        }\n\n        for (i = divs.length - 1; i >= 0; i--) {\n            if (divs[i].class) {\n                html += '<div class=\"tree ' + divs[i].class + '\" />';\n            } else {\n                html += '<div style=\"width:' + divs[i].width + 'px\" />';\n            }\n        }\n\n        if (html) {\n            $('#rcmtab' + this.html_identifier(uid, true)).html(html);\n        }\n    };\n\n    // Update parent in a thread\n    this.update_thread_root = function (uid, flag) {\n        if (!this.env.threading) {\n            return;\n        }\n\n        var root = this.message_list.find_root(uid);\n\n        if (uid == root) {\n            return;\n        }\n\n        var p = this.message_list.rows[root];\n\n        if (flag == 'read' && p.unread_children) {\n            p.unread_children--;\n        } else if (flag == 'unread' && p.has_children) {\n            // unread_children may be undefined\n            p.unread_children = (p.unread_children || 0) + 1;\n        } else if (flag == 'unflagged' && p.flagged_children) {\n            p.flagged_children--;\n        } else if (flag == 'flagged' && p.has_children) {\n            p.flagged_children = (p.flagged_children || 0) + 1;\n        } else {\n            return;\n        }\n\n        this.set_message_icon(root);\n        this.set_unread_children(root);\n        this.set_flagged_children(root);\n    };\n\n    // Update thread indicators for all messages in a thread below the specified message\n    // return number of removed/added root level messages\n    this.update_thread = function (uid) {\n        if (!this.env.threading || !this.message_list.rows[uid]) {\n            return 0;\n        }\n\n        var r, parent, count = 0,\n            list = this.message_list,\n            rows = list.rows,\n            row = rows[uid],\n            depth = rows[uid].depth,\n            roots = [];\n\n        if (!row.depth) { // root message: decrease roots count\n            count--;\n        }\n\n        // update unread_children for thread root\n        if (row.depth && row.unread) {\n            parent = list.find_root(uid);\n            rows[parent].unread_children--;\n            this.set_unread_children(parent);\n        }\n\n        // update unread_children for thread root\n        if (row.depth && row.flagged) {\n            parent = list.find_root(uid);\n            rows[parent].flagged_children--;\n            this.set_flagged_children(parent);\n        }\n\n        parent = row.parent_uid;\n\n        // children\n        row = row.obj.nextSibling;\n        while (row) {\n            if (row.nodeType == 1 && (r = rows[row.uid])) {\n                if (!r.depth || r.depth <= depth) {\n                    break;\n                }\n\n                r.depth--; // move left\n                // reset width and clear the content of a tab, icons will be added later\n                $('#rcmtab' + r.id).width(r.depth * 15).html('');\n                if (!r.depth) { // a new root\n                    count++; // increase roots count\n                    r.parent_uid = 0;\n                    if (r.has_children) {\n                        // replace 'leaf' with 'collapsed'\n                        $('#' + r.id + ' .leaf').first()\n                            .attr('id', 'rcmexpando' + r.id)\n                            .attr('class', (r.obj.style.display != 'none' ? 'expanded' : 'collapsed'))\n                            .mousedown({ uid: r.uid }, function (e) {\n                                return ref.expand_message_row(e, e.data.uid);\n                            });\n\n                        r.unread_children = 0;\n                        roots.push(r);\n                    }\n                    // show if it was hidden\n                    if (r.obj.style.display == 'none') {\n                        $(r.obj).show();\n                    }\n                } else {\n                    if (r.depth == depth) {\n                        r.parent_uid = parent;\n                    }\n                    if (r.unread && roots.length) {\n                        roots[roots.length - 1].unread_children++;\n                    }\n                }\n            }\n            row = row.nextSibling;\n        }\n\n        // update unread_children/flagged_children for roots\n        for (r = 0; r < roots.length; r++) {\n            this.set_unread_children(roots[r].uid);\n            this.set_flagged_children(roots[r].uid);\n        }\n\n        return count;\n    };\n\n    this.delete_excessive_thread_rows = function () {\n        var rows = this.message_list.rows,\n            tbody = this.message_list.tbody,\n            row = tbody.firstChild,\n            cnt = this.env.pagesize + 1;\n\n        while (row) {\n            if (row.nodeType == 1 && (r = rows[row.uid])) {\n                if (!r.depth && cnt) {\n                    cnt--;\n                }\n\n                if (!cnt) {\n                    this.message_list.remove_row(row.uid);\n                }\n            }\n\n            row = row.nextSibling;\n        }\n    };\n\n    // Set message icon\n    this.set_message_icon = function (uid) {\n        var css_class, label = '',\n            row = this.message_list.rows[uid];\n\n        if (!row) {\n            return false;\n        }\n\n        if (row.icon) {\n            css_class = 'msgicon';\n            if (row.deleted) {\n                css_class += ' deleted';\n                label += this.get_label('deleted') + ' ';\n            } else if (row.unread) {\n                css_class += ' unread';\n                label += this.get_label('unread') + ' ';\n            } else if (row.unread_children) {\n                css_class += ' unreadchildren';\n            }\n\n            if (row.msgicon == row.icon) {\n                if (row.replied) {\n                    css_class += ' replied';\n                    label += this.get_label('replied') + ' ';\n                }\n                if (row.forwarded) {\n                    css_class += ' forwarded';\n                    label += this.get_label('forwarded') + ' ';\n                }\n                css_class += ' status';\n            }\n\n            $(row.icon).attr({ class: css_class, title: label });\n        }\n\n        if (row.msgicon && row.msgicon != row.icon) {\n            label = '';\n            css_class = 'msgicon';\n            if (!row.unread && row.unread_children) {\n                css_class += ' unreadchildren';\n            }\n            if (row.replied) {\n                css_class += ' replied';\n                label += this.get_label('replied') + ' ';\n            }\n            if (row.forwarded) {\n                css_class += ' forwarded';\n                label += this.get_label('forwarded') + ' ';\n            }\n\n            $(row.msgicon).attr({ class: css_class, title: label });\n        }\n\n        if (row.flagicon) {\n            css_class = (row.flagged ? 'flagged' : 'unflagged');\n            label = this.get_label(css_class);\n            $(row.flagicon).attr({ class: css_class, 'aria-label': label, title: label });\n        }\n    };\n\n    // Set message status\n    this.set_message_status = function (uid, flag, status) {\n        var row = this.message_list.rows[uid];\n\n        if (!row) {\n            return false;\n        }\n\n        if (flag == 'unread') {\n            if (row.unread != status) {\n                this.update_thread_root(uid, status ? 'unread' : 'read');\n            }\n        } else if (flag == 'flagged') {\n            this.update_thread_root(uid, status ? 'flagged' : 'unflagged');\n        }\n\n        if ($.inArray(flag, ['unread', 'deleted', 'replied', 'forwarded', 'flagged']) > -1) {\n            row[flag] = status;\n        }\n    };\n\n    // Set message row status, class and icon\n    this.set_message = function (uid, flag, status) {\n        var row = this.message_list && this.message_list.rows[uid];\n\n        if (!row) {\n            return false;\n        }\n\n        if (flag) {\n            this.set_message_status(uid, flag, status);\n        }\n\n        if ($.inArray(flag, ['unread', 'deleted', 'flagged']) > -1) {\n            $(row.obj)[row[flag] ? 'addClass' : 'removeClass'](flag);\n        }\n\n        this.set_unread_children(uid);\n        this.set_message_icon(uid);\n    };\n\n    // Sets unroot (unread_children) class of parent row\n    this.set_unread_children = function (uid) {\n        var row = this.message_list.rows[uid];\n\n        if (row.parent_uid) {\n            return;\n        }\n\n        var enable = !row.unread && row.unread_children && !row.expanded;\n        $(row.obj)[enable ? 'addClass' : 'removeClass']('unroot');\n    };\n\n    // Sets flaggedroot (flagged_children) class of parent row\n    this.set_flagged_children = function (uid) {\n        var row = this.message_list.rows[uid];\n\n        if (row.parent_uid) {\n            return;\n        }\n\n        var enable = row.flagged_children && !row.expanded;\n        $(row.obj)[enable ? 'addClass' : 'removeClass']('flaggedroot');\n    };\n\n    // Copy selected messages to the specified mailbox\n    this.copy_messages = function (mbox, event, uids) {\n        if (mbox && typeof mbox === 'object') {\n            if (mbox.uids) {\n                uids = mbox.uids;\n            }\n            mbox = mbox.id;\n        } else if (!mbox) {\n            uids = this.env.uid ? [this.env.uid] : this.message_list.get_selection();\n\n            return this.folder_selector(event, function (folder, obj) {\n                ref.command('copy', { id: folder, uids: uids }, obj, event, true);\n            });\n        }\n\n        // exit if current or no mailbox specified\n        if (!mbox || mbox == this.env.mailbox) {\n            return;\n        }\n\n        var post_data = this.selection_post_data({ _target_mbox: mbox, _uid: uids });\n\n        // exit if selection is empty\n        if (!post_data._uid) {\n            return;\n        }\n\n        // send request to server\n        this.http_post('copy', post_data, this.display_message('copyingmessage', 'loading'));\n    };\n\n    // Move selected messages to the specified mailbox\n    this.move_messages = function (mbox, event, uids) {\n        if (mbox && typeof mbox === 'object') {\n            if (mbox.uids) {\n                uids = mbox.uids;\n            }\n            mbox = mbox.id;\n        } else if (!mbox) {\n            uids = this.env.uid ? [this.env.uid] : this.message_list.get_selection();\n\n            return this.folder_selector(event, function (folder, obj) {\n                ref.command('move', { id: folder, uids: uids }, obj, event, true);\n            });\n        }\n\n        // exit if current or no mailbox specified\n        if (!mbox || (mbox == this.env.mailbox && !this.is_multifolder_listing())) {\n            return;\n        }\n\n        var lock = false, post_data = this.selection_post_data({ _target_mbox: mbox, _uid: uids });\n\n        // exit if selection is empty\n        if (!post_data._uid) {\n            return;\n        }\n\n        // show wait message\n        if (this.env.action == 'show') {\n            lock = this.set_busy(true, 'movingmessage');\n        }\n\n        // Hide message command buttons until a message is selected\n        this.enable_command(this.env.message_commands, false);\n\n        this.with_selected_messages('move', post_data, lock);\n\n        if (this.env.action != 'show') {\n            this.show_contentframe(false);\n        }\n    };\n\n    // Delete selected messages from the current mailbox\n    this.delete_messages = function (event, uid) {\n        var list = this.message_list, trash = this.env.trash_mailbox;\n\n        // if config is set to flag for deletion\n        if (this.env.flag_for_deletion) {\n            this.mark_message('delete', uid);\n            return false;\n        }\n\n        // if there isn't a defined trash mailbox or we are in it\n        if (!trash || this.env.mailbox == trash) {\n            this.permanently_remove_messages(uid);\n        }\n        // we're in Junk folder and delete_junk is enabled\n        else if (this.env.delete_junk && this.env.junk_mailbox && this.env.mailbox == this.env.junk_mailbox) {\n            this.permanently_remove_messages(uid);\n        }\n        // if there is a trash mailbox defined and we're not currently in it\n        else {\n            // if shift was pressed delete it immediately\n            if ((list && list.modkey == SHIFT_KEY) || (event && rcube_event.get_modifier(event) == SHIFT_KEY)) {\n                this.confirm_dialog(this.get_label('deletemessagesconfirm'), 'delete', function () {\n                    ref.permanently_remove_messages(uid);\n                });\n            } else {\n                this.move_messages(trash, event, uid ? [uid] : null);\n            }\n        }\n\n        return true;\n    };\n\n    // Delete the selected messages permanently\n    this.permanently_remove_messages = function (uid) {\n        var post_data = this.selection_post_data(uid ? { _uid: uid } : null);\n\n        // exit if selection is empty\n        if (!post_data._uid) {\n            return;\n        }\n\n        this.with_selected_messages('delete', post_data);\n        this.show_contentframe(false);\n    };\n\n    // Send a specific move/delete request with UIDs of all selected messages\n    this.with_selected_messages = function (action, post_data, lock, http_action) {\n        var msg, count = 0,\n            remove = (action == 'delete' || !this.is_multifolder_listing());\n\n        // update the list (remove rows, clear selection)\n        if (this.message_list) {\n            var n, len, id, root, roots = [],\n                selection = post_data._uid,\n                display_next = this.check_display_next();\n\n            if (selection === '*') {\n                selection = this.message_list.get_selection();\n            } else if (!Array.isArray(selection)) {\n                selection = String(selection).split(',');\n            }\n\n            for (n = 0, len = selection.length; n < len; n++) {\n                id = selection[n];\n\n                if (this.env.threading) {\n                    count += this.update_thread(id);\n                    root = this.message_list.find_root(id);\n                    if (root != id && $.inArray(root, roots) < 0) {\n                        roots.push(root);\n                    }\n                }\n\n                if (remove) {\n                    this.message_list.remove_row(id, display_next && n == selection.length - 1);\n                }\n            }\n\n            // make sure there are no selected rows\n            if (!display_next && remove) {\n                this.message_list.clear_selection();\n            }\n\n            // update thread tree icons\n            for (n = 0, len = roots.length; n < len; n++) {\n                this.add_tree_icons(roots[n]);\n            }\n        }\n\n        if (count < 0) {\n            post_data._count = (count * -1);\n        } else if (count > 0 && remove) {\n            // remove threads from the end of the list\n            this.delete_excessive_thread_rows();\n        }\n\n        if (!remove) {\n            post_data._refresh = 1;\n        }\n\n        if (!lock) {\n            msg = action == 'move' ? 'movingmessage' : 'deletingmessage';\n            lock = this.display_message(msg, 'loading');\n        }\n\n        // send request to server\n        this.http_post(http_action || action, post_data, lock);\n    };\n\n    // Build post data for message delete/move/copy/flag requests\n    this.selection_post_data = function (data) {\n        if (!data || typeof (data) !== 'object') {\n            data = {};\n        }\n\n        if (!data._uid) {\n            data._uid = this.env.uid ? [this.env.uid] : this.message_list.get_selection();\n        }\n\n        data._mbox = this.env.mailbox;\n        data._uid = this.uids_to_list(data._uid);\n\n        if (this.env.action) {\n            data._from = this.env.action;\n        }\n\n        // also send search request to get the right messages\n        if (this.env.search_request) {\n            data._search = this.env.search_request;\n        }\n\n        if (this.env.display_next && this.env.next_uid) {\n            data._next_uid = this.env.next_uid;\n        }\n\n        return data;\n    };\n\n    this.check_display_next = function () {\n        return this.env.display_next && (this.preview_id || !this.env.contentframe);\n    };\n\n    // Set a specific flag to one or more messages\n    this.mark_message = function (flag, uid) {\n        var a_uids = [], r_uids = [], len, n, id,\n            list = this.message_list;\n\n        if (uid) {\n            a_uids.push(uid);\n        } else if (this.env.uid) {\n            a_uids.push(this.env.uid);\n        } else if (list) {\n            a_uids = list.get_selection();\n        }\n\n        if (!list) {\n            r_uids = a_uids;\n        } else {\n            list.focus();\n            for (n = 0, len = a_uids.length; n < len; n++) {\n                id = a_uids[n];\n                if ((flag == 'read' && list.rows[id].unread)\n                    || (flag == 'unread' && !list.rows[id].unread)\n                    || (flag == 'delete' && !list.rows[id].deleted)\n                    || (flag == 'undelete' && list.rows[id].deleted)\n                    || (flag == 'flagged' && !list.rows[id].flagged)\n                    || (flag == 'unflagged' && list.rows[id].flagged)\n                ) {\n                    r_uids.push(id);\n                }\n            }\n        }\n\n        // nothing to do\n        if (!r_uids.length && !this.select_all_mode) {\n            return;\n        }\n\n        switch (flag) {\n            case 'read':\n            case 'unread':\n                this.toggle_read_status(flag, r_uids);\n                break;\n            case 'delete':\n            case 'undelete':\n                this.toggle_delete_status(r_uids);\n                break;\n            case 'flagged':\n            case 'unflagged':\n                this.toggle_flagged_status(flag, a_uids);\n                break;\n        }\n    };\n\n    // Set class to read/unread\n    this.toggle_read_status = function (flag, a_uids) {\n        var i, len = a_uids.length,\n            post_data = this.selection_post_data({ _uid: a_uids, _flag: flag }),\n            lock = this.display_message('markingmessage', 'loading');\n\n        // mark all message rows as read/unread\n        for (i = 0; i < len; i++) {\n            this.set_message(a_uids[i], 'unread', (flag == 'unread' ? true : false));\n        }\n\n        this.http_post('mark', post_data, lock);\n    };\n\n    // Set image to flagged or unflagged\n    this.toggle_flagged_status = function (flag, a_uids) {\n        var i, len = a_uids.length,\n            win = this.env.contentframe ? this.get_frame_window(this.env.contentframe) : window,\n            post_data = this.selection_post_data({ _uid: a_uids, _flag: flag }),\n            lock = this.display_message('markingmessage', 'loading');\n\n        // mark all message rows as flagged/unflagged\n        for (i = 0; i < len; i++) {\n            this.set_message(a_uids[i], 'flagged', (flag == 'flagged' ? true : false));\n        }\n\n        if (this.env.action == 'show' || $.inArray(this.preview_id, a_uids) >= 0) {\n            $(win.document.body)[flag == 'flagged' ? 'addClass' : 'removeClass']('status-flagged');\n        }\n\n        this.http_post('mark', post_data, lock);\n    };\n\n    // Mark all message rows as deleted/undeleted\n    this.toggle_delete_status = function (a_uids) {\n        var i, uid, all_deleted = true,\n            len = a_uids.length,\n            rows = this.message_list ? this.message_list.rows : {};\n\n        if (len == 1) {\n            if (!this.message_list || (rows[a_uids[0]] && !rows[a_uids[0]].deleted)) {\n                this.flag_as_deleted(a_uids);\n            } else {\n                this.flag_as_undeleted(a_uids);\n            }\n\n            return true;\n        }\n\n        for (i = 0; i < len; i++) {\n            uid = a_uids[i];\n            if (rows[uid] && !rows[uid].deleted) {\n                all_deleted = false;\n                break;\n            }\n        }\n\n        if (all_deleted) {\n            this.flag_as_undeleted(a_uids);\n        } else {\n            this.flag_as_deleted(a_uids);\n        }\n\n        return true;\n    };\n\n    this.flag_as_undeleted = function (a_uids) {\n        var i, len = a_uids.length,\n            post_data = this.selection_post_data({ _uid: a_uids, _flag: 'undelete' }),\n            lock = this.display_message('markingmessage', 'loading');\n\n        for (i = 0; i < len; i++) {\n            this.set_message(a_uids[i], 'deleted', false);\n        }\n\n        this.http_post('mark', post_data, lock);\n    };\n\n    this.flag_as_deleted = function (a_uids) {\n        var count = 0, r_uids = [],\n            post_data = this.selection_post_data({ _uid: a_uids, _flag: 'delete' }),\n            lock = this.display_message('markingmessage', 'loading'),\n            list = this.message_list,\n            rows = list ? list.rows : {},\n            display_next = this.check_display_next();\n\n        for (var i = 0, len = a_uids.length; i < len; i++) {\n            uid = a_uids[i];\n            if (rows[uid]) {\n                if (rows[uid].unread) {\n                    r_uids[r_uids.length] = uid;\n                }\n\n                if (this.env.skip_deleted) {\n                    count += this.update_thread(uid);\n                    list.remove_row(uid, display_next && i == list.get_selection(false).length - 1);\n                } else {\n                    this.set_message(uid, 'deleted', true);\n                }\n            }\n        }\n\n        // make sure there are no selected rows\n        if (this.env.skip_deleted && list) {\n            if (!display_next || !list.rowcount) {\n                list.clear_selection();\n            }\n            if (count < 0) {\n                post_data._count = (count * -1);\n            } else if (count > 0) {\n                // remove threads from the end of the list\n                this.delete_excessive_thread_rows();\n            }\n        }\n\n        // set of messages to mark as seen\n        if (r_uids.length) {\n            post_data._ruid = this.uids_to_list(r_uids);\n        }\n\n        if (this.env.skip_deleted && this.env.display_next && this.env.next_uid) {\n            post_data._next_uid = this.env.next_uid;\n        }\n\n        this.http_post('mark', post_data, lock);\n    };\n\n    // Flag as read without mark request (called from backend).\n    // The argument should be a coma-separated list of uids\n    this.flag_deleted_as_read = function (uids) {\n        var uid, i, len,\n            rows = this.message_list ? this.message_list.rows : {};\n\n        if (typeof uids === 'string') {\n            uids = uids.split(',');\n        }\n\n        for (i = 0, len = uids.length; i < len; i++) {\n            uid = uids[i];\n            if (rows[uid]) {\n                this.set_message(uid, 'unread', false);\n            }\n        }\n    };\n\n    // Converts array of message UIDs to comma-separated list for use in URL\n    // with select_all mode checking\n    this.uids_to_list = function (uids) {\n        if (this.select_all_mode) {\n            return '*';\n        }\n\n        // multi-folder list of uids cannot be passed as a string (#6845)\n        if (Array.isArray(uids) && (uids.length == 1 || String(uids[0]).indexOf('-') == -1)) {\n            uids = uids.join(',');\n        }\n\n        return uids;\n    };\n\n    // Sets title of the delete button\n    this.set_button_titles = function () {\n        var label = 'deletemessage';\n\n        if (!this.env.flag_for_deletion\n            && this.env.trash_mailbox && this.env.mailbox != this.env.trash_mailbox\n            && (!this.env.delete_junk || !this.env.junk_mailbox || this.env.mailbox != this.env.junk_mailbox)\n        ) {\n            label = 'movemessagetotrash';\n        }\n\n        this.set_alttext('delete', label);\n    };\n\n    // Initialize input element for list page jump\n    this.init_pagejumper = function (element) {\n        $(element).addClass('rcpagejumper')\n            .on('focus', function (e) {\n                // create and display popup with page selection\n                var i, html = '';\n\n                for (i = 1; i <= ref.env.pagecount; i++) {\n                    html += '<li>' + i + '</li>';\n                }\n\n                html = '<ul class=\"toolbarmenu menu\">' + html + '</ul>';\n\n                if (!ref.pagejump) {\n                    ref.pagejump = $('<div id=\"pagejump-selector\" class=\"popupmenu\"></div>')\n                        .appendTo(document.body)\n                        .on('click', 'li', function () {\n                            if (!ref.busy) {\n                                $(element).val($(this).text()).change();\n                            }\n                        });\n                }\n\n                if (ref.pagejump.data('count') != i) {\n                    ref.pagejump.html(html);\n                }\n\n                ref.pagejump.attr('rel', '#' + this.id).data('count', i);\n\n                // display page selector\n                ref.show_menu('pagejump-selector', true, e);\n            })\n            // keyboard navigation\n            .on('keydown keyup click', function (e) {\n                var current, selector = $('#pagejump-selector'),\n                    ul = $('ul', selector),\n                    list = $('li', ul),\n                    height = ul.height(),\n                    p = parseInt(this.value, 10);\n\n                if (e.which != 27 && e.which != 9 && e.which != 13 && !selector.is(':visible')) {\n                    return ref.show_menu('pagejump-selector', true, e);\n                }\n\n                if (e.type == 'keydown') {\n                    switch (e.which) {\n                        case 40: // arrow-down\n                            if (list.length > p) {\n                                this.value = (p += 1);\n                            }\n\n                            break;\n                        case 38: // arrow-up\n                            if (p > 1 && list.length > p - 1) {\n                                this.value = (p -= 1);\n                            }\n\n                            break;\n                        case 13: // enter\n                            return $(this).change();\n                        case 27: // esc\n                        case 9: // tab\n                            ref.hide_menu('pagejump-selector', e);\n                            return $(element).val(ref.env.current_page);\n                    }\n                }\n\n                $('li.selected', ul).removeClass('selected');\n\n                if ((current = $(list[p - 1])).length) {\n                    current.addClass('selected');\n                    $('#pagejump-selector').scrollTop(((ul.height() / list.length) * (p - 1)) - selector.height() / 2);\n                }\n            })\n            .on('change', function (e) {\n                // go to specified page\n                var p = parseInt(this.value, 10);\n                if (p && p != ref.env.current_page && !ref.busy) {\n                    ref.hide_menu('pagejump-selector', e);\n                    ref.list_page(p);\n                }\n            });\n    };\n\n    // Update page-jumper state on list updates\n    this.update_pagejumper = function () {\n        $('input.rcpagejumper').val(this.env.current_page).prop('disabled', this.env.pagecount < 2);\n    };\n\n    // Check for mailvelope API\n    this.check_mailvelope = function (action) {\n        if (window.mailvelope) {\n            this.mailvelope_load(action);\n        } else {\n            $(window).on('mailvelope', function () {\n                ref.mailvelope_load(action);\n            });\n        }\n    };\n\n    /**\n     * Triggger Mailvelope to add the current domain to the list of authorized\n     * domains (with API access).\n     */\n    this.mailvelope_enable = function () {\n        // Remove warning and enabling button if mailvelope was enabled.\n        window.addEventListener('mailvelope', function (ev) {\n            $('#mailvelope-warning').hide();\n        });\n        // Trigger Mailvelope.\n        $('body').append('<iframe style=\"display: none;\" src=\"https://api.mailvelope.com/authorize-domain/?api=true\" />');\n    };\n\n    // Load Mailvelope functionality (and initialize keyring if needed)\n    this.mailvelope_load = function (action) {\n        // Make the server code aware that this browser now knows about\n        // PGP/MIME (would otherwise only be recognized after the next login.\n        this.env.browser_capabilities.pgpmime = 1;\n        var keyring = this.env.mailvelope_main_keyring ? undefined : this.env.user_id,\n            fn = function (kr) {\n                ref.mailvelope_keyring = kr;\n                ref.mailvelope_init(action, kr);\n            };\n\n        mailvelope.getVersion().then(function (v) {\n            mailvelope.VERSION = v;\n            mailvelope.VERSION_MAJOR = Math.floor(parseFloat(v));\n            return mailvelope.getKeyring(keyring);\n        }).then(fn, function (err) {\n            if (keyring) {\n                // attempt to create a new keyring for this app/user\n                mailvelope.createKeyring(keyring).then(fn, function (err) {\n                    console.error(err);\n                });\n            } else {\n                console.error(err);\n            }\n        });\n    };\n\n    // Initializes Mailvelope editor or display container\n    this.mailvelope_init = function (action, keyring) {\n        if (!window.mailvelope) {\n            return;\n        }\n\n        if (action == 'show' || action == 'preview' || action == 'print') {\n            // decrypt text body\n            if (this.env.is_pgp_content) {\n                var data = $(this.env.is_pgp_content).text();\n                ref.mailvelope_display_container(this.env.is_pgp_content, data, keyring);\n            }\n            // load pgp/mime message and pass it to the mailvelope display container\n            else if (this.env.pgp_mime_part) {\n                var msgid = this.display_message('loadingdata', 'loading'),\n                    selector = this.env.pgp_mime_container;\n\n                $.ajax({\n                    type: 'GET',\n                    url: this.url('get', { _mbox: this.env.mailbox, _uid: this.env.uid, _part: this.env.pgp_mime_part }),\n                    error: function (o, status, err) {\n                        ref.http_error(o, status, err, msgid);\n                    },\n                    success: function (data) {\n                        ref.mailvelope_display_container(selector, data, keyring, msgid);\n                    },\n                });\n            }\n        } else if (action == 'compose') {\n            this.env.compose_commands.push('compose-encrypted');\n\n            var sign_supported = mailvelope.VERSION_MAJOR >= 2,\n                is_html = $('[name=\"_is_html\"]').val() > 0;\n\n            if (sign_supported) {\n                this.env.compose_commands.push('compose-encrypted-signed');\n            }\n\n            if (this.env.pgp_mime_message) {\n                // fetch PGP/Mime part and open load into Mailvelope editor\n                var lock = this.set_busy(true, this.get_label('loadingdata'));\n\n                $.ajax({\n                    type: 'GET',\n                    url: this.url('get', this.env.pgp_mime_message),\n                    error: function (o, status, err) {\n                        ref.http_error(o, status, err, lock);\n                        ref.enable_command('compose-encrypted', !is_html);\n                        if (sign_supported) {\n                            ref.enable_command('compose-encrypted-signed', !is_html);\n                        }\n                    },\n                    success: function (data) {\n                        ref.set_busy(false, null, lock);\n\n                        if (is_html) {\n                            ref.command('toggle-editor', { html: false, noconvert: true });\n                            $('#' + ref.env.composebody).val('');\n                        }\n\n                        ref.compose_encrypted({ quotedMail: data });\n                        ref.enable_command('compose-encrypted', true);\n                        ref.enable_command('compose-encrypted-signed', false);\n                    },\n                });\n            } else {\n                // enable encrypted compose toggle\n                this.enable_command('compose-encrypted', !is_html);\n                if (sign_supported) {\n                    this.enable_command('compose-encrypted-signed', !is_html);\n                }\n            }\n\n            // make sure to disable encryption button after toggling editor into HTML mode\n            this.addEventListener('actionafter', function (args) {\n                if (args.ret && args.action == 'toggle-editor') {\n                    ref.enable_command('compose-encrypted', !args.props.html);\n                    if (sign_supported) {\n                        ref.enable_command('compose-encrypted-signed', !args.props.html);\n                    }\n                }\n            });\n        } else if (action == 'edit-identity') {\n            ref.mailvelope_identity_keygen();\n        }\n    };\n\n    // Handler for the 'compose-encrypted-signed' command\n    this.compose_encrypted_signed = function (props) {\n        props = props || {};\n        props.signMsg = true;\n        this.compose_encrypted(props);\n    };\n\n    // Handler for the 'compose-encrypted' command\n    this.compose_encrypted = function (props) {\n        var options, container = $('#' + this.env.composebody).parent();\n\n        // remove Mailvelope editor if active\n        if (ref.mailvelope_editor) {\n            ref.mailvelope_editor = null;\n            ref.set_button('compose-encrypted', 'act');\n\n            container.removeClass('mailvelope').find('iframe:not([aria-hidden=true])').remove();\n            $('#' + ref.env.composebody).show();\n            $(\"[name='_pgpmime']\").remove();\n\n            // re-enable commands that operate on the compose body\n            ref.enable_command('toggle-editor', 'insert-response', true);\n            ref.enable_command('spellcheck', !!window.googie);\n            ref.enable_command('insert-sig', !!(ref.env.signatures && ref.env.identity && ref.env.signatures[ref.env.identity]));\n\n            ref.triggerEvent('compose-encrypted', { active: false });\n        }\n        // embed Mailvelope editor container\n        else {\n            if (this.spellcheck_state()) {\n                this.editor.spellcheck_stop();\n            }\n\n            if (props.quotedMail) {\n                options = { quotedMail: props.quotedMail, quotedMailIndent: false };\n            } else {\n                options = { predefinedText: $('#' + this.env.composebody).val() };\n            }\n\n            if (props.signMsg) {\n                options.signMsg = props.signMsg;\n            }\n\n            if (this.env.compose_mode == 'reply') {\n                options.quotedMailIndent = true;\n                options.quotedMailHeader = this.env.compose_reply_header;\n            }\n\n            mailvelope.createEditorContainer('#' + container.attr('id'), ref.mailvelope_keyring, options).then(function (editor) {\n                ref.mailvelope_editor = editor;\n                ref.set_button('compose-encrypted', 'sel');\n\n                container.addClass('mailvelope');\n                $('#' + ref.env.composebody).hide();\n\n                // disable commands that operate on the compose body\n                ref.enable_command('spellcheck', 'insert-sig', 'toggle-editor', 'insert-response', false);\n                ref.triggerEvent('compose-encrypted', { active: true });\n\n                if (!$.isEmptyObject(ref.env.attachments)) {\n                    // notify user if losing attachments\n                    if (ref.env.compose_mode != 'draft'\n                        || Object.keys(ref.env.attachments).length != 1\n                        || ref.env.attachments[Object.keys(ref.env.attachments)[0]].name != 'encrypted.asc'\n                    ) {\n                        ref.alert_dialog(ref.get_label('encryptnoattachments'));\n                    }\n\n                    $.each(ref.env.attachments, function (name, attach) {\n                        ref.remove_from_attachment_list(name);\n                    });\n                }\n            }, function (err) {\n                console.error(err);\n                console.log(options);\n            });\n        }\n    };\n\n    // Callback to replace the message body with the full armored\n    this.mailvelope_submit_messageform = function (draft, saveonly) {\n        var recipients = [];\n\n        // get recipients\n        $.each(['to', 'cc', 'bcc'], function (i, field) {\n            var pos, rcpt, val = $('[name=\"_' + field + '\"]').val().trim();\n            while (val.length && rcube_check_email(val, true)) {\n                rcpt = RegExp.$2.replace(/^<+/, '').replace(/>+$/, '');\n                recipients.push(rcpt);\n                val = val.substr(val.indexOf(rcpt) + rcpt.length + 1).replace(/^\\s*,\\s*/, '');\n            }\n        });\n\n        var isvalid = recipients.length > 0;\n\n        // check if we have keys for all recipients\n        ref.mailvelope_keyring.validKeyForAddress(recipients).then(function (status) {\n            var missing_keys = [];\n            $.each(status, function (k, v) {\n                if (v === false) {\n                    isvalid = false;\n                    missing_keys.push(k);\n                }\n            });\n\n            // list recipients with missing keys\n            if (!isvalid && missing_keys.length) {\n                // display dialog with missing keys\n                ref.simple_dialog(\n                    ref.get_label('nopubkeyfor').replace('$email', missing_keys.join(', '))\n                        + '<p>' + ref.get_label('searchpubkeyservers') + '</p>',\n                    'encryptedsendialog',\n                    function () {\n                        ref.mailvelope_search_pubkeys(missing_keys, function () {\n                            return true; // close dialog\n                        });\n                    },\n                    { button: 'search' }\n                );\n                return false;\n            }\n\n            if (!isvalid) {\n                if (!recipients.length) {\n                    ref.alert_dialog(ref.get_label('norecipientwarning'), function () {\n                        $(\"[name='_to']\").focus();\n                    });\n                }\n                return false;\n            }\n\n            // add sender identity to recipients to be able to decrypt our very own message\n            var senders = [], selected_sender = ref.env.identities[$(\"[name='_from'] option:selected\").val()];\n            $.each(ref.env.identities, function (k, sender) {\n                senders.push(sender.email);\n            });\n\n            ref.mailvelope_keyring.validKeyForAddress(senders).then(function (status) {\n                valid_sender = null;\n                $.each(status, function (k, v) {\n                    if (v !== false) {\n                        valid_sender = k;\n                        if (valid_sender == selected_sender) {\n                            return false; // break\n                        }\n                    }\n                });\n\n                if (!valid_sender) {\n                    if (!confirm(ref.get_label('nopubkeyforsender'))) {\n                        return false;\n                    }\n                }\n\n                recipients.push(valid_sender);\n\n                ref.mailvelope_editor.encrypt(recipients).then(function (armored) {\n                    // all checks passed, send message\n                    var form = ref.gui_objects.messageform,\n                        hidden = $(\"[name='_pgpmime']\", form),\n                        msgid = ref.set_busy(true, draft || saveonly ? 'savingmessage' : 'sendingmessage');\n\n                    form.target = ref.get_save_target(msgid);\n                    form._draft.value = draft ? '1' : '';\n                    form.action = ref.add_url(form.action, '_unlock', msgid);\n                    form.action = ref.add_url(form.action, '_framed', 1);\n\n                    if (saveonly) {\n                        form.action = ref.add_url(form.action, '_saveonly', 1);\n                    }\n\n                    // send pgp content via hidden field\n                    if (!hidden.length) {\n                        hidden = $('<input type=\"hidden\" name=\"_pgpmime\">').appendTo(form);\n                    }\n                    hidden.val(armored);\n\n                    form.submit();\n                }, function (err) {\n                    console.log(err);\n                }); // mailvelope_editor.encrypt()\n            }, function (err) {\n                console.error(err);\n            }); // mailvelope_keyring.validKeyForAddress(senders)\n        }, function (err) {\n            console.error(err);\n        }); // mailvelope_keyring.validKeyForAddress(recipients)\n\n        return false;\n    };\n\n    // Wrapper for the mailvelope.createDisplayContainer API call\n    this.mailvelope_display_container = function (selector, data, keyring, msgid) {\n        var error_handler = function (error) {\n            // remove mailvelope frame with the error message\n            $(selector + ' > iframe').remove();\n            ref.hide_message(msgid);\n            ref.display_message(error.message, 'error');\n        };\n\n        mailvelope.createDisplayContainer(selector, data, keyring, { senderAddress: this.env.sender }).then(function (status) {\n            if (status.error && status.error.message) {\n                return error_handler(status.error);\n            }\n\n            ref.hide_message(msgid);\n            $(selector).children().not('iframe').hide();\n            $(ref.gui_objects.messagebody).addClass('mailvelope');\n\n            // on success we can remove encrypted part from the attachments list\n            if (ref.env.pgp_mime_part) {\n                $('#attach' + ref.env.pgp_mime_part).remove();\n            }\n\n            setTimeout(function () {\n                $(window).resize();\n            }, 10);\n        }, error_handler);\n    };\n\n    // Subroutine to query keyservers for public keys\n    this.mailvelope_search_pubkeys = function (emails, resolve, import_handler) {\n        // query with publickey.js\n        var deferred = [],\n            pk = new PublicKey(this.env.keyservers),\n            lock = ref.display_message('', 'loading');\n\n        $.each(emails, function (i, email) {\n            var d = $.Deferred();\n            pk.search(email, function (results, errorCode) {\n                if (errorCode !== null) {\n                    // rejecting would make all fail\n                    // d.reject(email);\n                    d.resolve([email]);\n                } else {\n                    d.resolve([email].concat(results));\n                }\n            });\n            deferred.push(d);\n        });\n\n        $.when.apply($, deferred).then(function () {\n            var missing_keys = [],\n                key_selection = [];\n\n            // analyze results of all queries\n            $.each(arguments, function (i, result) {\n                var email = result.shift();\n                if (!result.length) {\n                    missing_keys.push(email);\n                } else {\n                    key_selection = key_selection.concat(result);\n                }\n            });\n\n            ref.hide_message(lock);\n            resolve(true);\n\n            // show key import dialog\n            if (key_selection.length) {\n                ref.mailvelope_key_import_dialog(key_selection, import_handler);\n            }\n            // some keys could not be found\n            if (missing_keys.length) {\n                ref.display_message(ref.get_label('nopubkeyfor').replace('$email', missing_keys.join(', ')), 'warning');\n            }\n        }).fail(function () {\n            console.error('Pubkey lookup failed with', arguments);\n            ref.hide_message(lock);\n            ref.display_message('pubkeysearcherror', 'error');\n            resolve(false);\n        });\n    };\n\n    // List the given public keys in a dialog with options to import\n    // them into the local Mailvelope keyring\n    this.mailvelope_key_import_dialog = function (candidates, import_handler) {\n        var ul = $('<div>').addClass('listing pgpkeyimport'),\n            get_classes = function (uid, init) {\n                var classes = [init];\n                if (uid.revoked) {\n                    classes.push('revoked');\n                }\n                if (uid.disabled) {\n                    classes.push('disabled');\n                }\n                if (uid.expired) {\n                    classes.push('expired');\n                }\n                return classes;\n            };\n\n        $.each(candidates, function (i, keyrec) {\n            var li = $('<div>').addClass(get_classes(keyrec, 'key'));\n\n            li.append($('<label>').addClass('keyid').text(ref.get_label('keyid')));\n            li.append($('<a>').text(keyrec.keyid.substr(-8).toUpperCase())\n                .attr({ href: keyrec.info, target: '_blank', tabindex: '-1' }));\n\n            li.append($('<label>').addClass('keylen').text(ref.get_label('keylength')));\n            li.append($('<span>').text(keyrec.keylen));\n\n            if (keyrec.expirationdate) {\n                li.append($('<label>').addClass('keyexpired').text(ref.get_label('keyexpired')));\n                li.append($('<span>').text(new Date(keyrec.expirationdate * 1000).toDateString()));\n            }\n\n            if (keyrec.revoked) {\n                li.append($('<span>').addClass('keyrevoked').text(ref.get_label('keyrevoked')));\n            }\n\n            var ul_ = $('<ul>').addClass('uids');\n            $.each(keyrec.uids, function (j, uid) {\n                ul_.append($('<li>').addClass(get_classes(uid, 'uid')).text(uid.uid));\n            });\n\n            li.append(ul_);\n            li.append($('<button>')\n                .attr('rel', keyrec.keyid)\n                .text(ref.get_label('import'))\n                .addClass('button import importkey')\n                .prop('disabled', keyrec.revoked || keyrec.disabled || keyrec.expired));\n\n            ul.append(li);\n        });\n\n        // display dialog with missing keys\n        ref.simple_dialog(\n            $('<div>').append($('<p>').html(ref.get_label('encryptpubkeysfound'))).append(ul),\n            'importpubkeys',\n            null,\n            { cancel_label: 'close', cancel_button: 'close' }\n        );\n\n        // delegate handler for import button clicks\n        ul.on('click', 'button.importkey', function () {\n            var btn = $(this),\n                keyid = btn.attr('rel'),\n                pk = new PublicKey(ref.env.keyservers),\n                lock = ref.display_message('', 'loading');\n\n            // fetch from keyserver and import to Mailvelope keyring\n            pk.get(keyid, function (armored, errorCode) {\n                ref.hide_message(lock);\n\n                if (errorCode) {\n                    ref.display_message('keyservererror', 'error');\n                    return;\n                }\n\n                if (import_handler) {\n                    import_handler(armored);\n                    return;\n                }\n\n                // import to keyring\n                ref.mailvelope_keyring.importPublicKey(armored).then(function (status) {\n                    if (status === 'REJECTED') {\n                        // ref.alert_dialog(ref.get_label('Key import was rejected'));\n                    } else {\n                        var $key = keyid.substr(-8).toUpperCase();\n                        btn.closest('.key').fadeOut();\n                        ref.display_message(ref.get_label('keyimportsuccess').replace('$key', $key), 'confirmation');\n                    }\n                }, function (err) {\n                    console.log(err);\n                });\n            });\n        });\n    };\n\n    // enable key management for identity\n    this.mailvelope_identity_keygen = function () {\n        var container = $(this.gui_objects.editform).find('.identity-encryption').first(),\n            identity_email = $(this.gui_objects.editform).find('.ff_email').val().trim();\n\n        if (!container.length || !identity_email || !this.mailvelope_keyring.createKeyGenContainer) {\n            return;\n        }\n\n        var key_fingerprint;\n        this.mailvelope_keyring.validKeyForAddress([identity_email])\n            .then(function (keys) {\n                var private_keys = [];\n\n                if (keys && keys[identity_email] && Array.isArray(keys[identity_email].keys)) {\n                    var checks = [];\n                    for (var j = 0; j < keys[identity_email].keys.length; j++) {\n                        checks.push((function (key) {\n                            return ref.mailvelope_keyring.hasPrivateKey(key.fingerprint)\n                                .then(function (found) {\n                                    if (found) {\n                                        private_keys.push(key);\n                                    }\n                                });\n                        })(keys[identity_email].keys[j]));\n                    }\n                    return Promise.all(checks)\n                        .then(function () {\n                            return private_keys;\n                        });\n                }\n\n                return private_keys;\n            })\n            .then(function (private_keys) {\n                var content = container.find('.identity-encryption-block').empty();\n                if (private_keys && private_keys.length) {\n                    // show private key information\n                    $('<p>').text(ref.get_label('encryptionprivkeysinmailvelope').replace('$nr', private_keys.length)).appendTo(content);\n                    var ul = $('<ul>').addClass('keylist').appendTo(content);\n                    $.each(private_keys, function (i, key) {\n                        $('<li>').appendTo(ul)\n                            .append($('<strong>').addClass('fingerprint').text(String(key.fingerprint).toUpperCase()))\n                            .append($('<span>').addClass('identity').text('<' + identity_email + '> '));\n                    });\n                } else {\n                    $('<p>').text(ref.get_label('encryptionnoprivkeysinmailvelope')).appendTo(content);\n                }\n\n                // show button to create a new key\n                $('<button>')\n                    .attr('type', 'button')\n                    .addClass('button create')\n                    .text(ref.get_label('encryptioncreatekey'))\n                    .appendTo(content)\n                    .on('click', function () {\n                        ref.mailvelope_show_keygen_container(content, identity_email);\n                    });\n                $('<span>').addClass('space').html('&nbsp;').appendTo(content);\n                $('<button>')\n                    .attr('type', 'button')\n                    .addClass('button settings')\n                    .text(ref.get_label('openmailvelopesettings'))\n                    .appendTo(content)\n                    .on('click', function () {\n                        ref.mailvelope_keyring.openSettings();\n                    });\n\n                container.show();\n                ref.triggerEvent('identity-encryption-show', { container: container });\n            })\n            .catch(function (err) {\n                console.error('Mailvelope keyring error', err);\n            });\n    };\n\n    // Start pgp key generation using Mailvelope\n    this.mailvelope_show_keygen_container = function (container, identity_email) {\n        var cid = new Date().getTime(),\n            user_id = { email: identity_email, fullName: $(ref.gui_objects.editform).find('.ff_name').val().trim() },\n            options = { userIds: [user_id], keySize: this.env.mailvelope_keysize };\n\n        $('<div>').attr('id', 'mailvelope-keygen-container-' + cid)\n            .css({ height: '245px', marginBottom: '10px' })\n            .appendTo(container.empty());\n\n        this.mailvelope_keyring.createKeyGenContainer('#mailvelope-keygen-container-' + cid, options)\n            .then(function (generator) {\n                if (generator instanceof Error) {\n                    throw generator;\n                }\n\n                // append button to start key generation\n                $('<button>')\n                    .attr('type', 'button')\n                    .addClass('button mainaction generate')\n                    .text(ref.get_label('generate'))\n                    .appendTo(container)\n                    .on('click', function () {\n                        var btn = $(this).prop('disabled', true);\n                        generator.generate()\n                            .then(function (result) {\n                                if (typeof result === 'string' && result.indexOf('BEGIN PGP') > 0) {\n                                    ref.display_message(ref.get_label('keypaircreatesuccess').replace('$identity', identity_email), 'confirmation');\n                                    // reset keygen view\n                                    ref.mailvelope_identity_keygen();\n                                }\n                            })\n                            .catch(function (err) {\n                                debugger;\n                                ref.display_message(err.message || 'errortitle', 'error');\n                                btn.prop('disabled', false);\n                            });\n                    });\n\n                $('<span>').addClass('space').html('&nbsp;').appendTo(container);\n\n                $('<button>')\n                    .attr('type', 'button')\n                    .addClass('button cancel')\n                    .text(ref.get_label('cancel'))\n                    .appendTo(container)\n                    .on('click', function () {\n                        ref.mailvelope_identity_keygen();\n                    });\n\n                ref.triggerEvent('identity-encryption-update', { container: container });\n            })\n            .catch(function (err) {\n                ref.display_message('errortitle', 'error');\n                // start over\n                ref.mailvelope_identity_keygen();\n            });\n    };\n\n    this.mdn_request_dialog = function (uid, mailbox) {\n        var props = {\n                action: 'mark',\n                data: { _uid: uid, _mbox: mailbox, _flag: 'mdnsent' },\n            },\n            buttons = [\n                {\n                    text: this.get_label('send'),\n                    class: 'mainaction send',\n                    click: function (e, ui, dialog) {\n                        props.action = 'sendmdn';\n                        (ref.is_framed() ? parent.$ : $)(dialog || this).dialog('close');\n                    },\n                },\n                {\n                    text: this.get_label('ignore'),\n                    class: 'cancel',\n                    click: function (e, ui, dialog) {\n                        (ref.is_framed() ? parent.$ : $)(dialog || this).dialog('close');\n                    },\n                },\n            ],\n            mdn_func = function (event, ui) {\n                ref.http_post(props.action, props.data);\n                // from default close function\n                $(this).remove();\n            };\n\n        if (this.env.mdn_request_save) {\n            buttons.unshift({\n                text: this.get_label('sendalwaysto').replace('$email', this.env.mdn_request_sender.mailto),\n                class: 'mainaction send',\n                click: function (e, ui, dialog) {\n                    props.data._save = ref.env.mdn_request_save;\n                    props.data._address = ref.env.mdn_request_sender.string;\n                    $(e.target).next().click();\n                },\n            });\n        }\n\n        this.show_popup_dialog(this.get_label('mdnrequest'), this.get_label('sendreceipt'), buttons, { close: mdn_func });\n    };\n\n\n    /*********************************************************/\n    /*                mailbox folders methods                */\n    /*********************************************************/\n\n    this.expunge_mailbox = function (mbox) {\n        var lock, post_data = { _mbox: mbox };\n\n        // lock interface if it's the active mailbox\n        if (mbox == this.env.mailbox) {\n            lock = this.set_busy(true, 'loading');\n            post_data._reload = 1;\n\n            if (this.env.search_request) {\n                post_data._search = this.env.search_request;\n            }\n        }\n\n        // send request to server\n        this.http_post('expunge', post_data, lock);\n    };\n\n    this.purge_mailbox = function (mbox) {\n        this.confirm_dialog(this.get_label('purgefolderconfirm'), 'delete', function () {\n            var lock, post_data = { _mbox: mbox };\n\n            // lock interface if it's the active mailbox\n            if (mbox == ref.env.mailbox) {\n                lock = ref.set_busy(true, 'loading');\n                post_data._reload = 1;\n            }\n\n            // send request to server\n            ref.http_post('purge', post_data, lock);\n        });\n\n        return false;\n    };\n\n    // Mark all messages as read in:\n    //   - selected folder (mode=cur)\n    //   - selected folder and its subfolders (mode=sub)\n    //   - all folders (mode=all)\n    this.mark_all_read = function (mbox, mode) {\n        var state, content, nodes = [],\n            list = this.message_list,\n            folder = mbox || this.env.mailbox,\n            post_data = {\n                _uid: '*', _flag: 'read', _mbox: folder, _folders: mode,\n            };\n\n        if (typeof mode !== 'string') {\n            state = this.mark_all_read_state(folder);\n            if (!state) {\n                return;\n            }\n\n            if (state > 1) {\n                // build content of the dialog\n                $.each({ cur: 1, sub: 2, all: 4 }, function (i, v) {\n                    var id = 'readallmode' + i,\n                        label = $('<label>').attr('for', id).text(ref.get_label('folders-' + i)),\n                        input = $('<input>').attr({\n                            type: 'radio', value: i, name: 'mode', id: id, disabled: !(state & v),\n                        });\n\n                    nodes.push($('<li>').append([input, label]));\n                });\n\n                content = $('<ul class=\"proplist\">').append(nodes);\n                $('input:not([disabled])', content).first().attr('checked', true);\n\n                this.simple_dialog(content, 'markallread',\n                    function () {\n                        ref.mark_all_read(folder, $('input:checked', content).val());\n                        return true;\n                    },\n                    { button: 'mark', button_class: 'save' }\n                );\n\n                return;\n            }\n\n            post_data._folders = 'cur'; // only current folder has unread messages\n        }\n\n        // mark messages on the list\n        $.each(list ? list.rows : [], function (uid, row) {\n            if (!row.unread) {\n                return;\n            }\n\n            var mbox = ref.env.messages[uid].mbox;\n            if (mode == 'all' || mbox == ref.env.mailbox\n                || (mode == 'sub' && mbox.startsWith(ref.env.mailbox + ref.env.delimiter))\n            ) {\n                ref.set_message(uid, 'unread', false);\n            }\n        });\n\n        // send the request\n        this.http_post('mark', post_data, this.display_message('markingmessage', 'loading'));\n    };\n\n    // Enable/disable mark-all-read action depending on folders state\n    this.mark_all_read_state = function (mbox) {\n        var state = 0,\n            li = this.treelist.get_item(mbox || this.env.mailbox),\n            folder_item = $(li).is('.unread') ? 1 : 0,\n            subfolder_items = $('li.unread', li).length,\n            all_items = $('li.unread', ref.gui_objects.folderlist).length;\n\n        state += folder_item;\n        state += subfolder_items ? 2 : 0;\n        state += all_items > folder_item + subfolder_items ? 4 : 0;\n\n        this.enable_command('mark-all-read', state > 0);\n\n        return state;\n    };\n\n    // Display \"bounce message\" dialog\n    this.bounce = function (props, obj, event) {\n        // get message uid and folder\n        var uid = this.get_single_uid(),\n            url = this.url('bounce', { _framed: 1, _uid: uid, _mbox: this.get_message_mailbox(uid) }),\n            dialog = $('<iframe>').attr('src', url),\n            get_form = function () {\n                var rc = $('iframe', dialog)[0].contentWindow.rcmail;\n                return { rc: rc, form: rc.gui_objects.messageform };\n            },\n            post_func = function () {\n                var post = {}, form = get_form();\n\n                $.each($(form.form).serializeArray(), function () {\n                    post[this.name] = this.value;\n                });\n\n                post._uid = form.rc.env.uid;\n                post._mbox = form.rc.env.mailbox;\n                delete post._action;\n                delete post._task;\n\n                if (post._to || post._cc || post._bcc) {\n                    ref.http_post('bounce', post, ref.set_busy(true, 'sendingmessage'));\n                    dialog.dialog('close');\n                }\n            },\n            submit_func = function () {\n                var form = get_form();\n\n                if (typeof form.form !== 'object') {\n                    return false;\n                }\n\n                if (!form.rc.check_compose_address_fields(post_func, form.form)) {\n                    return false;\n                }\n\n                return post_func();\n            };\n\n        this.hide_menu('forwardmenu', event);\n\n        dialog = this.simple_dialog(dialog, 'bouncemsg', submit_func, {\n            button: 'bounce',\n            width: 400,\n            height: 300,\n        });\n\n        return true;\n    };\n\n\n    /*********************************************************/\n    /*                 message compose methods               */\n    /*********************************************************/\n\n    this.open_compose_step = function (p) {\n        var url = this.url('mail/compose', p);\n\n        // open new compose window\n        if (this.env.compose_extwin && !this.env.extwin) {\n            this.open_window(url);\n        } else {\n            this.redirect(url);\n            if (this.env.extwin) {\n                window.resizeTo(Math.max(this.env.popup_width, $(window).width()), $(window).height() + 24);\n            }\n        }\n    };\n\n    // init message compose form: set focus and eventhandlers\n    this.init_messageform = function () {\n        if (!this.gui_objects.messageform) {\n            return false;\n        }\n\n        var elem, pos,\n            input_from = $(\"[name='_from']\"),\n            input_to = $(\"[name='_to']\"),\n            input_subject = $(\"[name='_subject']\"),\n            input_message = $(\"[name='_message']\").get(0),\n            html_mode = $(\"[name='_is_html']\").val() == '1',\n            opener_rc = this.opener();\n\n        // close compose step in opener\n        if (opener_rc && opener_rc.env.action == 'compose') {\n            setTimeout(function () {\n                if (opener.history.length > 1) {\n                    opener.history.back();\n                } else {\n                    opener_rc.redirect(opener_rc.get_task_url('mail'));\n                }\n            }, 100);\n\n            this.env.opened_extwin = true;\n        }\n\n        if (!html_mode) {\n            // On Back button Chrome will overwrite textarea with old content\n            // causing e.g. the same signature is added twice (#5809)\n            if (input_message.value && input_message.defaultValue !== undefined) {\n                input_message.value = input_message.defaultValue;\n            }\n\n            pos = this.env.top_posting && this.env.compose_mode ? 0 : input_message.value.length;\n\n            // add signature according to selected identity\n            // if we have HTML editor, signature is added in a callback\n            if (input_from.prop('type') == 'select-one') {\n                // for some reason the caret initially is not at pos=0 in Firefox 51 (#5628)\n                this.set_caret_pos(input_message, 0);\n                this.change_identity(input_from[0]);\n            }\n\n            // set initial cursor position\n            this.set_caret_pos(input_message, pos);\n\n            // scroll to the bottom of the textarea (#1490114)\n            if (pos) {\n                $(input_message).scrollTop(input_message.scrollHeight);\n            }\n        }\n\n        // check for locally stored compose data\n        if (this.env.save_localstorage) {\n            this.compose_restore_dialog(0, html_mode);\n        }\n\n        if (input_to.val() == '') {\n            elem = input_to;\n        } else if (input_subject.val() == '') {\n            elem = input_subject;\n        } else if (input_message) {\n            elem = input_message;\n        }\n\n        this.env.compose_focus_elem = this.init_messageform_inputs(elem);\n\n        // get summary of all field values\n        this.compose_field_hash(true);\n\n        // start the auto-save timer\n        this.auto_save_start();\n    };\n\n    // Init autocomplete events on compose form inputs\n    this.init_messageform_inputs = function (focused) {\n        var i,\n            input_to = $(\"[name='_to']\"),\n            ac_fields = ['cc', 'bcc', 'replyto', 'followupto'];\n\n        // init live search events\n        this.init_address_input_events(input_to);\n        for (i in ac_fields) {\n            this.init_address_input_events($(\"[name='_\" + ac_fields[i] + \"']\"));\n        }\n\n        if (!focused) {\n            focused = input_to;\n        }\n\n        // focus first empty element (and return it)\n        return $(focused).focus().get(0);\n    };\n\n    this.compose_restore_dialog = function (j, html_mode) {\n        var i, key, formdata, index = this.local_storage_get_item('compose.index', []);\n\n        var show_next = function (i) {\n            if (++i < index.length) {\n                ref.compose_restore_dialog(i, html_mode);\n            }\n        };\n\n        for (i = j || 0; i < index.length; i++) {\n            key = index[i];\n            formdata = this.local_storage_get_item('compose.' + key, null, true);\n            if (!formdata) {\n                continue;\n            }\n            // restore saved copy of current compose_id\n            if (formdata.changed && key == this.env.compose_id) {\n                this.restore_compose_form(key, html_mode);\n                break;\n            }\n            // skip records from 'other' drafts\n            if (this.env.draft_id && formdata.draft_id && formdata.draft_id != this.env.draft_id) {\n                continue;\n            }\n            // skip records on reply\n            if (this.env.reply_msgid && formdata.reply_msgid != this.env.reply_msgid) {\n                continue;\n            }\n            // show dialog asking to restore the message\n            if (formdata.changed && formdata.session != this.env.session_id) {\n                this.show_popup_dialog(\n                    this.get_label('restoresavedcomposedata')\n                        .replace('$date', new Date(formdata.changed).toLocaleString())\n                        .replace('$subject', formdata._subject)\n                        .replace(/\\n/g, '<br/>'),\n                    this.get_label('restoremessage'),\n                    [{\n                        text: this.get_label('restore'),\n                        class: 'mainaction restore',\n                        click: function () {\n                            ref.restore_compose_form(key, html_mode);\n                            ref.remove_compose_data(key); // remove old copy\n                            ref.save_compose_form_local(); // save under current compose_id\n                            $(this).dialog('close');\n                        },\n                    },\n                    {\n                        text: this.get_label('delete'),\n                        class: 'delete',\n                        click: function () {\n                            ref.remove_compose_data(key);\n                            $(this).dialog('close');\n                            show_next(i);\n                        },\n                    },\n                    {\n                        text: this.get_label('ignore'),\n                        class: 'cancel',\n                        click: function () {\n                            $(this).dialog('close');\n                            show_next(i);\n                        },\n                    }]\n                );\n                break;\n            }\n        }\n    };\n\n    this.init_address_input_events = function (obj, props) {\n        // configure parallel autocompletion\n        if (!props && this.env.autocomplete_threads > 0) {\n            props = {\n                threads: this.env.autocomplete_threads,\n                sources: this.env.autocomplete_sources,\n            };\n        }\n\n        obj.keydown(function (e) {\n            return ref.ksearch_keydown(e, this, props);\n        })\n            .attr({\n                autocomplete: 'off', 'aria-autocomplete': 'list', 'aria-expanded': 'false', role: 'combobox',\n            });\n\n        var callback = function (e) {\n            if (ref.ksearch_pane && e.target === ref.ksearch_pane.get(0)) {\n                return;\n            }\n            ref.ksearch_hide();\n        };\n\n        // hide the popup on any click\n        $(document).on('click', callback);\n        // and on scroll (that cannot be jQuery.on())\n        document.addEventListener('scroll', callback, true);\n    };\n\n    this.submit_messageform = function (draft, saveonly) {\n        var form = this.gui_objects.messageform;\n\n        if (!form) {\n            return;\n        }\n\n        // the message has been sent but not saved, ask the user what to do\n        if (!saveonly && this.env.is_sent) {\n            return this.simple_dialog(this.get_label('messageissent'), '', // TODO: dialog title\n                function () {\n                    ref.submit_messageform(false, true);\n                    return true;\n                }\n            );\n        }\n\n        // delegate sending to Mailvelope routine\n        if (this.mailvelope_editor) {\n            return this.mailvelope_submit_messageform(draft, saveonly);\n        }\n\n        // all checks passed, send message\n        var msgid = this.set_busy(true, draft || saveonly ? 'savingmessage' : 'sendingmessage'),\n            lang = this.spellcheck_lang(),\n            files = [];\n\n        // send files list\n        $('li', this.gui_objects.attachmentlist).each(function () {\n            files.push(this.id.replace(/^rcmfile/, ''));\n        });\n        $('[name=\"_attachments\"]', form).val(files.join());\n\n        form.target = this.get_save_target(msgid);\n        form._draft.value = draft ? '1' : '';\n        form.action = this.add_url(form.action, '_unlock', msgid);\n        form.action = this.add_url(form.action, '_framed', 1);\n\n        if (lang) {\n            form.action = this.add_url(form.action, '_lang', lang);\n        }\n        if (saveonly) {\n            form.action = this.add_url(form.action, '_saveonly', 1);\n        }\n\n        // register timer to notify about connection timeout\n        this.submit_timer = setTimeout(function () {\n            ref.set_busy(false, null, msgid);\n            ref.display_message('requesttimedout', 'error');\n        }, this.env.request_timeout * 1000);\n\n        form.submit();\n    };\n\n    this.compose_recipient_select = function (list) {\n        var id, n, recipients = 0, selection = list.get_selection();\n        for (n = 0; n < selection.length; n++) {\n            id = selection[n];\n            if (this.env.contactdata[id]) {\n                recipients++;\n            }\n        }\n        this.enable_command('add-recipient', recipients);\n    };\n\n    this.compose_add_recipient = function (field) {\n        // find last focused field name\n        if (!field) {\n            field = $(this.env.focused_field).filter(':visible');\n            field = field.length ? field.attr('id').replace('_', '') : 'to';\n        }\n\n        var recipients = [], input = $('#_' + field), selection = this.contact_list.get_selection();\n\n        if (this.contact_list && selection.length) {\n            var data, name, n, id;\n            for (n = 0; n < selection.length; n++) {\n                if ((id = selection[n]) && (data = this.env.contactdata[id])) {\n                    name = data.name || data;\n\n                    // group is added, expand it\n                    if (id.charAt(0) == 'E' && input.length) {\n                        // We wrap the group name with invisible markers to prevent from problems with group expanding (#7569)\n                        name = '\\u200B' + name + '\\u200B';\n                        var gid = id.substr(1);\n                        this.group2expand[gid] = { name: name, input: input.get(0) };\n                        this.http_request('group-expand', { _source: data.source || this.env.source, _gid: gid }, false);\n                    }\n\n                    recipients.push(name);\n                }\n            }\n        }\n\n        if (recipients.length && input.length) {\n            var oldval = input.val();\n            if (oldval && !/[,;]\\s*$/.test(oldval)) {\n                oldval += ', ';\n            }\n            input.val(oldval + recipients.join(', ') + ', ').change();\n            this.triggerEvent('add-recipient', { field: field, recipients: recipients });\n        }\n\n        return recipients.length;\n    };\n\n    // Checks the input fields before sending a message\n    this.check_compose_input = function (cmd) {\n        var key,\n            input_subject = $(\"[name='_subject']\");\n\n        // check if all files has been uploaded\n        for (key in this.env.attachments) {\n            if (typeof this.env.attachments[key] === 'object' && !this.env.attachments[key].complete) {\n                this.alert_dialog(this.get_label('notuploadedwarning'));\n                return false;\n            }\n        }\n\n        // display localized warning for missing subject\n        if (!this.env.nosubject_warned && input_subject.val() == '') {\n            var dialog,\n                prompt_value = $('<input>').attr({ type: 'text', size: 40, 'data-submit': 'true' }),\n                myprompt = $('<div class=\"prompt\">')\n                    .append($('<p class=\"message\">').text(this.get_label('nosubjectwarning')))\n                    .append(prompt_value),\n                save_func = function () {\n                    input_subject.val(prompt_value.val());\n                    dialog.dialog('close');\n                    if (ref.check_compose_input(cmd)) {\n                        ref.command(cmd, { nocheck: true });\n                    } // repeat command which triggered this\n                };\n\n            dialog = this.show_popup_dialog(\n                myprompt,\n                this.get_label('nosubjecttitle'),\n                [{\n                    text: this.get_label('sendmessage'),\n                    class: 'mainaction send',\n                    click: function () {\n                        save_func();\n                    },\n                }, {\n                    text: this.get_label('cancel'),\n                    class: 'cancel',\n                    click: function () {\n                        input_subject.focus();\n                        dialog.dialog('close');\n                    },\n                }],\n                { dialogClass: 'warning' }\n            );\n\n            this.env.nosubject_warned = true;\n            return false;\n        }\n\n        // check for empty body (only possible if not mailvelope encrypted)\n        if (!this.mailvelope_editor && !this.editor.get_content() && !confirm(this.get_label('nobodywarning'))) {\n            this.editor.focus();\n            return false;\n        }\n\n        if (!this.check_compose_address_fields(cmd)) {\n            return false;\n        }\n\n        // move body from html editor to textarea (just to be sure, #1485860)\n        this.editor.save();\n\n        return true;\n    };\n\n    this.check_compose_address_fields = function (cmd, form) {\n        if (!form) {\n            form = window.document;\n        }\n\n        // check input fields\n        var key, recipients, dialog,\n            limit = this.env.max_disclosed_recipients,\n            input_to = $(\"[name='_to']\", form),\n            input_cc = $(\"[name='_cc']\", form),\n            input_bcc = $(\"[name='_bcc']\", form),\n            input_from = $(\"[name='_from']\", form),\n            get_recipients = function (fields) {\n                fields = $.map(fields, function (v) {\n                    v = v.val().trim();\n                    return v.length ? v : null;\n                });\n                return fields.join(',').replace(/^[\\s,;]+/, '').replace(/[\\s,;]+$/, '');\n            };\n\n        // check sender (if have no identities)\n        if (input_from.prop('type') == 'text' && !rcube_check_email(input_from.val(), true)) {\n            this.alert_dialog(this.get_label('nosenderwarning'), function () {\n                input_from.focus();\n            });\n            return false;\n        }\n\n        // check for empty recipient\n        if (!rcube_check_email(get_recipients([input_to, input_cc, input_bcc]), true)) {\n            this.alert_dialog(this.get_label('norecipientwarning'), function () {\n                input_to.focus();\n            });\n            return false;\n        }\n\n        // check disclosed recipients limit\n        if (limit && !this.env.disclosed_recipients_warned\n            && rcube_check_email(recipients = get_recipients([input_to, input_cc]), true, true) > limit\n        ) {\n            var save_func = function (move_to_bcc) {\n                if (move_to_bcc) {\n                    var bcc = input_bcc.val();\n                    input_bcc.val((bcc ? (bcc + ', ') : '') + recipients).change();\n                    input_to.val('').change();\n                    input_cc.val('').change();\n                }\n\n                dialog.dialog('close');\n\n                if (typeof cmd === 'function') {\n                    cmd();\n                } else if (cmd) {\n                    ref.command(cmd, { nocheck: true });\n                } // repeat command which triggered this\n            };\n\n            dialog = this.show_popup_dialog(\n                this.get_label('disclosedrecipwarning'),\n                this.get_label('disclosedreciptitle'),\n                [\n                    {\n                        text: this.get_label('sendmessage'),\n                        click: function () {\n                            save_func(false);\n                        },\n                        class: 'mainaction',\n                    },\n                    {\n                        text: this.get_label('bccinstead'),\n                        click: function () {\n                            save_func(true);\n                        },\n                    },\n                    {\n                        text: this.get_label('cancel'),\n                        click: function () {\n                            dialog.dialog('close');\n                        },\n                        class: 'cancel',\n                    },\n                ],\n                { dialogClass: 'warning' }\n            );\n\n            this.env.disclosed_recipients_warned = true;\n            return false;\n        }\n\n        return true;\n    };\n\n    this.toggle_editor = function (props, obj, e) {\n        // @todo: this should work also with many editors on page\n        var mode, result = this.editor.toggle(props.html, props.noconvert || false),\n            control = $('#' + this.editor.id).data('control') || $(e ? e.target : []);\n\n        if (result) {\n            mode = props.html ? 'html' : 'plain';\n        } else {\n            mode = props.html ? 'plain' : 'html';\n        }\n\n        // update internal format flag\n        $(\"[name='_is_html']\").val(mode == 'html' ? 1 : 0);\n\n        if (control.is('[type=checkbox]')) {\n            control.prop('checked', mode == 'html');\n        } else {\n            control.val(mode);\n        }\n\n        return result;\n    };\n\n    // Inserts a predefined response to the compose editor\n    this.insert_response = function (response) {\n        if (typeof response === 'object') {\n            var replace = {};\n            replace[response.is_html ? 'html' : 'text'] = response.data;\n\n            this.editor.replace(replace);\n            this.display_message('responseinserted', 'confirmation');\n        } else {\n            var lock = this.display_message('', 'loading');\n            this.http_get('settings/response-get', { _id: response, _is_html: this.editor.is_html() ? 1 : 0 }, lock);\n        }\n    };\n\n    // Updates spellchecker buttons on state change\n    this.spellcheck_state = function () {\n        var active = this.editor.spellcheck_state();\n\n        $.each(this.buttons.spellcheck || [], function (i, v) {\n            $('#' + v.id)[active ? 'addClass' : 'removeClass']('selected');\n        });\n\n        return active;\n    };\n\n    // Get selected language\n    this.spellcheck_lang = function () {\n        return this.editor.get_language();\n    };\n\n    this.spellcheck_lang_set = function (lang) {\n        this.editor.set_language(lang);\n    };\n\n    // Resume spellchecking, highlight provided misspellings without new ajax request\n    this.spellcheck_resume = function (data) {\n        this.editor.spellcheck_resume(data);\n    };\n\n    this.set_draft_id = function (id) {\n        if (id && id != this.env.draft_id) {\n            var filter = { task: 'mail', action: '' },\n                rc = this.opener(false, filter) || this.opener(true, filter);\n\n            // refresh the drafts folder in the opener window\n            if (rc && rc.env.mailbox == this.env.drafts_mailbox) {\n                rc.command('checkmail');\n            }\n\n            this.env.draft_id = id;\n            $(\"[name='_draft_saveid']\").val(id);\n        }\n\n        // always remove local copy upon saving as draft\n        this.remove_compose_data(this.env.compose_id);\n        this.compose_skip_unsavedcheck = false;\n    };\n\n    // Create (attach) 'savetarget' iframe before use\n    this.get_save_target = function (unlock) {\n        // Removing the frame on load/error to workaround issues with window history\n        this.dummy_iframe('savetarget', 'javascript:false;')\n            .on('load error', function () {\n                // catch invalid/error response from server and unlock the UI (#7494, #7488, #7522)\n                if (unlock && $(this).contents().find('meta[name=\"generator\"][content=\"Roundcube\"]').length == 0) {\n                    ref.iframe_loaded(unlock);\n                    ref.display_message('connerror', 'error');\n                }\n\n                $(this).remove();\n            });\n\n        return 'savetarget';\n    };\n\n    this.auto_save_start = function () {\n        if (this.env.draft_autosave) {\n            this.save_timer = setTimeout(function () {\n                ref.command('savedraft');\n            }, this.env.draft_autosave * 1000);\n        }\n\n        // save compose form content to local storage every 5 seconds\n        if (!this.local_save_timer && window.localStorage && this.env.save_localstorage) {\n            // track typing activity and only save on changes\n            this.compose_type_activity = this.compose_type_activity_last = 0;\n            $(document).keypress(function (e) {\n                ref.compose_type_activity++;\n            });\n\n            this.local_save_timer = setInterval(function () {\n                if (ref.compose_type_activity > ref.compose_type_activity_last) {\n                    ref.save_compose_form_local();\n                    ref.compose_type_activity_last = ref.compose_type_activity;\n                }\n            }, 5000);\n\n            $(window).on('pagehide', function () {\n                // remove copy from local storage if compose screen is left after warning\n                if (!ref.env.server_error) {\n                    ref.remove_compose_data(ref.env.compose_id);\n                }\n            });\n        }\n\n        // check for unsaved changes before leaving the compose page\n        if (!window.onbeforeunload) {\n            window.onbeforeunload = function () {\n                if (!ref.compose_skip_unsavedcheck && ref.cmp_hash != ref.compose_field_hash()) {\n                    return ref.get_label('notsentwarning');\n                }\n            };\n        }\n\n        // Unlock interface now that saving is complete\n        this.busy = false;\n    };\n\n    this.compose_field_hash = function (save) {\n        // check input fields\n        var i, id, val, str = '', hash_fields = ['to', 'cc', 'bcc', 'subject'];\n\n        for (i = 0; i < hash_fields.length; i++) {\n            if (val = $('[name=\"_' + hash_fields[i] + '\"]').val()) {\n                str += val + ':';\n            }\n        }\n\n        str += this.editor.get_content({ refresh: false });\n\n        for (id in this.env.attachments) {\n            str += id;\n        }\n\n        // we can't detect changes in the Mailvelope editor so assume it changed\n        if (this.mailvelope_editor) {\n            str += ';' + new Date().getTime();\n        }\n\n        if (save) {\n            this.cmp_hash = str;\n        }\n\n        return str;\n    };\n\n    // store the contents of the compose form to localstorage\n    this.save_compose_form_local = function () {\n        // feature is disabled\n        if (!this.env.save_localstorage) {\n            return;\n        }\n\n        var ed, empty = true,\n            formdata = { session: this.env.session_id, changed: new Date().getTime() };\n\n        // get fresh content from editor\n        this.editor.save();\n\n        if (this.env.draft_id) {\n            formdata.draft_id = this.env.draft_id;\n        }\n\n        if (this.env.reply_msgid) {\n            formdata.reply_msgid = this.env.reply_msgid;\n        }\n\n        $('input, select, textarea', this.gui_objects.messageform).each(function (i, elem) {\n            switch (elem.tagName.toLowerCase()) {\n                case 'input':\n                    if (elem.type == 'button' || elem.type == 'submit' || (elem.type == 'hidden' && elem.name != '_is_html')) {\n                        break;\n                    }\n                    formdata[elem.name] = elem.type != 'checkbox' || elem.checked ? $(elem).val() : '';\n\n                    if (formdata[elem.name] != '' && elem.type != 'hidden') {\n                        empty = false;\n                    }\n\n                    break;\n                case 'select':\n                    formdata[elem.name] = $('option:checked', elem).val();\n                    break;\n                default:\n                    formdata[elem.name] = $(elem).val();\n                    if (formdata[elem.name] != '') {\n                        empty = false;\n                    }\n            }\n        });\n\n        if (!empty) {\n            var index = this.local_storage_get_item('compose.index', []),\n                key = this.env.compose_id;\n\n            if ($.inArray(key, index) < 0) {\n                index.push(key);\n            }\n\n            this.local_storage_set_item('compose.' + key, formdata, true);\n            this.local_storage_set_item('compose.index', index);\n        }\n    };\n\n    // write stored compose data back to form\n    this.restore_compose_form = function (key, html_mode) {\n        var ed, formdata = this.local_storage_get_item('compose.' + key, true);\n\n        if (formdata && typeof formdata === 'object') {\n            $.each(formdata, function (k, value) {\n                if (k[0] == '_') {\n                    var elem = $('[name=' + k + ']');\n                    if (elem[0] && elem[0].type == 'checkbox') {\n                        elem.prop('checked', value != '');\n                    } else {\n                        elem.val(value).change();\n                    }\n                }\n            });\n\n            // initialize HTML editor\n            if ((formdata._is_html == '1' && !html_mode) || (formdata._is_html != '1' && html_mode)) {\n                this.command('toggle-editor', { id: this.env.composebody, html: !html_mode, noconvert: true });\n            }\n        }\n    };\n\n    // Remove stored compose data from localStorage\n    this.remove_compose_data = function (key) {\n        var index = this.local_storage_get_item('compose.index', []);\n\n        if ($.inArray(key, index) >= 0) {\n            this.local_storage_remove_item('compose.' + key);\n            this.local_storage_set_item('compose.index', $.grep(index, function (val, i) {\n                return val != key;\n            }));\n        }\n    };\n\n    // Clear all stored compose data of this user\n    this.clear_compose_data = function () {\n        var i, index = this.local_storage_get_item('compose.index', []);\n\n        for (i = 0; i < index.length; i++) {\n            this.local_storage_remove_item('compose.' + index[i]);\n        }\n\n        this.local_storage_remove_item('compose.index');\n    };\n\n    this.change_identity = function (obj, show) {\n        if (!obj || !obj.options) {\n            return false;\n        }\n\n        var id = $(obj).val(),\n            got_sig = this.env.signatures && this.env.signatures[id],\n            sig = this.env.identity,\n            show_sig = show ? show : this.env.show_sig;\n\n        // enable manual signature insert\n        if (got_sig) {\n            this.enable_command('insert-sig', true);\n            this.env.compose_commands.push('insert-sig');\n            got_sig = true;\n        } else {\n            this.enable_command('insert-sig', false);\n        }\n\n        // first function execution\n        if (!this.env.identities_initialized) {\n            this.env.identities_initialized = true;\n            if (this.env.show_sig_later) {\n                this.env.show_sig = true;\n            }\n            if (this.env.opened_extwin) {\n                return;\n            }\n        }\n\n        // update reply-to/bcc fields with addresses defined in identities\n        $.each(['replyto', 'bcc'], function () {\n            var rx, key = this,\n                old_val = sig && ref.env.identities[sig] ? ref.env.identities[sig][key] : '',\n                new_val = id && ref.env.identities[id] ? ref.env.identities[id][key] : '',\n                input = $('[name=\"_' + key + '\"]'), input_val = input.val();\n\n            // remove old address(es)\n            if (old_val && input_val) {\n                rx = new RegExp('\\\\s*' + RegExp.escape(old_val) + '\\\\s*');\n                input_val = input_val.replace(rx, '');\n            }\n\n            // cleanup\n            input_val = String(input_val).replace(/[,;]\\s*[,;]/g, ',').replace(/^[\\s,;]+/, '');\n\n            // add new address(es)\n            if (new_val && input_val.indexOf(new_val) == -1 && input_val.indexOf(new_val.replace(/\"/g, '')) == -1) {\n                if (input_val) {\n                    input_val = input_val.replace(/[,;\\s]+$/, '') + ', ';\n                }\n\n                input_val += new_val + ', ';\n            }\n\n            if (old_val || new_val) {\n                input.val(input_val).change();\n            }\n        });\n\n        if (this.editor) {\n            this.editor.change_signature(id, show_sig);\n        }\n\n        if (show && got_sig) {\n            this.display_message('siginserted', 'confirmation');\n        }\n\n        this.env.identity = id;\n        this.triggerEvent('change_identity');\n\n        return true;\n    };\n\n    // Open file selection dialog for defined upload form\n    // Works only on click and only with smart-upload forms\n    this.upload_input = function (name) {\n        $('#' + name + ' input[type=\"file\"]').click();\n    };\n\n    // upload (attachment) file\n    this.upload_file = function (form, action, lock) {\n        if (form) {\n            var fname, files = [];\n            $('input', form).each(function () {\n                if (this.files) {\n                    fname = this.name;\n                    for (var i = 0; i < this.files.length; i++) {\n                        files.push(this.files[i]);\n                    }\n                }\n            });\n\n            return this.file_upload(files, { _id: this.env.compose_id || '' }, {\n                name: fname,\n                action: action,\n                lock: lock,\n            });\n        }\n    };\n\n    // Add file name to attachment list, called from upload page\n    this.add2attachment_list = function (name, att, upload_id) {\n        if (upload_id) {\n            this.triggerEvent('fileuploaded', { name: name, attachment: att, id: upload_id });\n        }\n\n        if (upload_id && this.env.attachments[upload_id]) {\n            delete this.env.attachments[upload_id];\n        }\n\n        this.env.attachments[name] = att;\n\n        if (!this.gui_objects.attachmentlist) {\n            return false;\n        }\n\n        var label, indicator, li = $('<li>');\n\n        if (!att.complete && att.html.indexOf('<') < 0) {\n            att.html = '<span class=\"uploading\">' + att.html + '</span>';\n        }\n\n        if (!att.complete && this.env.loadingicon) {\n            att.html = '<img src=\"' + this.env.loadingicon + '\" class=\"uploading\" />' + att.html;\n        }\n\n        if (!att.complete) {\n            label = this.get_label('cancel');\n            att.html = '<a title=\"' + label + '\" onclick=\"return rcmail.cancel_attachment_upload(\\'' + name + '\\');\" href=\"#cancelupload\" class=\"cancelupload\">'\n                + (this.env.cancelicon ? '<img src=\"' + this.env.cancelicon + '\" />' : '<span class=\"inner\">' + label + '</span>') + '</a>' + att.html;\n        }\n\n        li.attr('id', name).addClass(att.classname).html(att.html)\n            .find('.attachment-name').on('mouseover', function () {\n                rcube_webmail.long_subject_title_ex(this);\n            });\n\n        // replace indicator's li\n        if (upload_id && (indicator = document.getElementById(upload_id))) {\n            li.replaceAll(indicator);\n        } else {\n            // add new li\n            li.appendTo(this.gui_objects.attachmentlist);\n        }\n\n        // set tabindex attribute\n        var tabindex = $(this.gui_objects.attachmentlist).attr('data-tabindex') || '0';\n        li.find('a').attr('tabindex', tabindex);\n\n        this.triggerEvent('fileappended', {\n            name: name, attachment: att, id: upload_id, item: li,\n        });\n\n        return true;\n    };\n\n    this.remove_from_attachment_list = function (name) {\n        delete this.env.attachments[name];\n        $('#' + name).remove();\n    };\n\n    this.remove_attachment = function (name) {\n        if (name && this.env.attachments[name]) {\n            this.http_post('remove-attachment', { _id: this.env.compose_id, _file: name });\n        }\n\n        return false;\n    };\n\n    this.cancel_attachment_upload = function (name) {\n        if (!name || !this.uploads[name]) {\n            return false;\n        }\n\n        this.remove_from_attachment_list(name);\n        this.uploads[name].abort();\n        return false;\n    };\n\n    // rename uploaded attachment (in compose)\n    this.rename_attachment = function (id) {\n        var attachment = this.env.attachments[id];\n\n        if (!attachment) {\n            return;\n        }\n\n        var input = $('<input>').attr({ type: 'text', size: 50 }).val(attachment.name),\n            content = $('<label>').text(this.get_label('namex')).append(input);\n\n        this.simple_dialog(content, 'attachmentrename', function () {\n            var name;\n            if ((name = input.val()) && name != attachment.name) {\n                ref.http_post('rename-attachment', { _id: ref.env.compose_id, _file: id, _name: name },\n                    ref.set_busy(true, 'loading'));\n                return true;\n            }\n        }\n        );\n    };\n\n    // update attachments list with the new name\n    this.rename_attachment_handler = function (id, name) {\n        var attachment = this.env.attachments[id];\n\n        if (!attachment || !name) {\n            return;\n        }\n\n        attachment.name = name;\n\n        $('#' + id + ' .attachment-name').text(name).attr('title', '');\n    };\n\n    // send remote request to add a new contact\n    this.add_contact = function (value, reload, source) {\n        if (value) {\n            this.http_post('addcontact', { _address: value, _reload: reload, _source: source });\n        }\n    };\n\n    // send remote request to search mail or contacts\n    this.qsearch = function (value) {\n        // Note: Some plugins would like to do search without value,\n        // so we keep value != '' check to allow that use-case. Which means\n        // e.g. that qsearch() with no argument will execute the search.\n        if (value != '' || $(this.gui_objects.qsearchbox).val() || $(this.gui_objects.search_interval).val()) {\n            var r, lock = this.set_busy(true, 'searching'),\n                url = this.search_params(value),\n                action = this.env.action == 'compose' && this.contact_list ? 'search-contacts' : 'search';\n\n            if (this.message_list) {\n                this.clear_message_list();\n            } else if (this.contact_list) {\n                this.list_contacts_clear();\n                // use env.last_source as env.source is overwritten by search action\n                url._scope = this.env.search_scope == 'base' ? this.env.last_source : null;\n            }\n\n            if (this.env.source) {\n                url._source = this.env.source;\n            }\n            if (this.env.group) {\n                url._gid = this.env.group;\n            }\n\n            // reset vars\n            this.env.current_page = 1;\n\n            r = this.http_request(action, url, lock);\n\n            this.env.qsearch = { lock: lock, request: r };\n            this.enable_command('set-listmode', this.env.threads && (this.env.search_scope || 'base') == 'base');\n\n            return true;\n        }\n\n        return false;\n    };\n\n    this.continue_search = function (request_id) {\n        var lock = this.set_busy(true, 'stillsearching');\n\n        setTimeout(function () {\n            var url = ref.search_params();\n            url._continue = request_id;\n            ref.env.qsearch = { lock: lock, request: ref.http_request('search', url, lock) };\n        }, 100);\n    };\n\n    // build URL params for search\n    this.search_params = function (search, filter) {\n        var n, url = {}, mods_arr = [],\n            mods = this.env.search_mods,\n            scope = this.env.search_scope || 'base',\n            mbox = this.env.mailbox;\n\n        if (!filter && this.gui_objects.search_filter) {\n            filter = this.gui_objects.search_filter.value;\n        }\n\n        if (!search && this.gui_objects.qsearchbox) {\n            search = this.gui_objects.qsearchbox.value;\n        }\n\n        if (this.gui_objects.search_interval) {\n            url._interval = $(this.gui_objects.search_interval).val();\n        }\n\n        if (search) {\n            url._q = search;\n\n            if (mods && this.message_list) {\n                mods = mods[mbox] || mods['*'];\n            }\n\n            if (mods) {\n                for (n in mods) {\n                    mods_arr.push(n);\n                }\n                url._headers = mods_arr.join(',');\n            }\n        }\n\n        url._layout = this.env.layout;\n        url._filter = filter;\n        url._scope = scope;\n        url._mbox = mbox;\n\n        return url;\n    };\n\n    // reset search filter\n    this.reset_search_filter = function () {\n        this.filter_disabled = true;\n        if (this.gui_objects.search_filter) {\n            $(this.gui_objects.search_filter).val('ALL').change();\n        }\n        this.filter_disabled = false;\n    };\n\n    // reset quick-search form\n    this.reset_qsearch = function (all) {\n        if (this.gui_objects.qsearchbox) {\n            this.gui_objects.qsearchbox.value = '';\n        }\n\n        if (this.gui_objects.search_interval) {\n            $(this.gui_objects.search_interval).val('');\n        }\n\n        if (this.env.qsearch) {\n            this.abort_request(this.env.qsearch);\n        }\n\n        if (all) {\n            this.env.search_scope = this.env.search_scope || 'base';\n            this.reset_search_filter();\n        }\n\n        this.env.qsearch = null;\n        this.env.search_request = null;\n        this.env.search_id = null;\n        this.select_all_mode = false;\n\n        this.enable_command('set-listmode', this.env.threads);\n    };\n\n    this.set_searchscope = function (scope) {\n        this.env.search_scope = scope;\n    };\n\n    this.set_searchinterval = function (interval) {\n        this.env.search_interval = interval;\n    };\n\n    this.set_searchmods = function (mods) {\n        var mbox = this.env.mailbox,\n            scope = this.env.search_scope || 'base';\n\n        if (!this.env.search_mods) {\n            this.env.search_mods = {};\n        }\n\n        if (mbox) {\n            this.env.search_mods[mbox] = mods;\n        }\n    };\n\n    this.is_multifolder_listing = function () {\n        return this.env.multifolder_listing !== undefined ? this.env.multifolder_listing\n            : (this.env.search_request && (this.env.search_scope || 'base') != 'base');\n    };\n\n    // action executed after mail is sent\n    this.sent_successfully = function (type, msg, folders, save_error) {\n        this.display_message(msg, type);\n        this.compose_skip_unsavedcheck = true;\n\n        if (this.env.extwin) {\n            if (!save_error) {\n                this.lock_form(this.gui_objects.messageform);\n            }\n\n            var filter = { task: 'mail', action: '' },\n                rc = this.opener(false, filter) || this.opener(true, filter);\n\n            if (rc) {\n                rc.display_message(msg, type);\n                // refresh the folder where sent message was saved or replied message comes from\n                if (folders && $.inArray(rc.env.mailbox, folders) >= 0) {\n                    rc.command('checkmail');\n                }\n            }\n\n            if (!save_error) {\n                setTimeout(function () {\n                    window.close();\n                }, 1000);\n            }\n        } else if (!save_error) {\n            // before redirect we need to wait some time for Chrome (#1486177)\n            setTimeout(function () {\n                ref.list_mailbox();\n            }, 500);\n        }\n\n        if (save_error) {\n            this.env.is_sent = true;\n        }\n    };\n\n    this.image_rotate = function () {\n        var curr = this.image_style ? (this.image_style.rotate || 0) : 0;\n\n        this.image_style.rotate = curr > 180 ? 0 : curr + 90;\n\n        $(this.gui_objects.messagepartframe).contents().find('img')\n            .css({ rotate: this.image_style.rotate + 'deg' });\n    };\n\n    this.image_scale = function (prop) {\n        var curr = this.image_style ? (this.image_style.scale || 1) : 1,\n            img = $(this.gui_objects.messagepartframe).contents().find('img'),\n            zoom_base = img.width() <= img.height() ? (img.width() / curr) : (img.height() / curr),\n            zoom_dim = img.width() <= img.height() ? ['width', 'height'] : ['height', 'width'];\n\n        this.image_style.scale = Math.max(0.1, curr + 0.1 * (prop == '-' ? -1 : 1));\n\n        img.css({\n            maxWidth: '',\n            maxHeight: '',\n            [zoom_dim[0]]: zoom_base * this.image_style.scale,\n            [zoom_dim[1]]: 'auto',\n        });\n    };\n\n    // Update import dialog state\n    this.import_state_set = function (state) {\n        if (this.import_dialog) {\n            this.import_state = state;\n\n            var button = $(this.import_dialog).parent().find('.ui-dialog-buttonset > button').first();\n\n            if (state != 'error') {\n                // replace Import/Cancel buttons with Close button\n                button.hide();\n                button.next().text(this.gettext('close')).focus();\n            } else {\n                // activate the Import button\n                button.prop('disabled', false);\n            }\n        }\n    };\n\n\n    /*********************************************************/\n    /*              keyboard live-search methods             */\n    /*********************************************************/\n\n    // handler for keyboard events on address-fields\n    this.ksearch_keydown = function (e, obj, props) {\n        if (this.ksearch_timer) {\n            clearTimeout(this.ksearch_timer);\n        }\n\n        var key = rcube_event.get_keycode(e);\n\n        switch (key) {\n            case 38: // arrow up\n            case 40: // arrow down\n                if (!this.ksearch_visible()) {\n                    return;\n                }\n\n                var dir = key == 38 ? 1 : 0,\n                    highlight = this.ksearch_pane.find('li.selected')[0];\n\n                if (!highlight) {\n                    highlight = this.ksearch_pane.__ul.firstChild;\n                }\n\n                if (highlight) {\n                    this.ksearch_select(dir ? highlight.previousSibling : highlight.nextSibling);\n                }\n\n                return rcube_event.cancel(e);\n            case 9: // tab\n                if (rcube_event.get_modifier(e) == SHIFT_KEY || !this.ksearch_visible()) {\n                    this.ksearch_hide();\n                    return;\n                }\n\n            case 13: // enter\n                if (!this.ksearch_visible()) {\n                    return false;\n                }\n\n                // insert selected address and hide ksearch pane\n                this.insert_recipient(this.ksearch_selected);\n                this.ksearch_hide();\n\n                // Don't cancel on Tab, we want to jump to the next field (#5659)\n                return key == 9 ? null : rcube_event.cancel(e);\n            case 27: // escape\n                this.ksearch_hide();\n                return;\n            case 37: // left\n            case 39: // right\n                return;\n        }\n\n        // start timer\n        this.ksearch_timer = setTimeout(function () {\n            ref.ksearch_get_results(props);\n        }, 200);\n        this.ksearch_input = obj;\n\n        return true;\n    };\n\n    this.ksearch_visible = function () {\n        return this.ksearch_selected !== null && this.ksearch_selected !== undefined && this.ksearch_value;\n    };\n\n    this.ksearch_select = function (node) {\n        if (this.ksearch_pane && node) {\n            this.ksearch_pane.find('li.selected').removeClass('selected').removeAttr('aria-selected');\n        }\n\n        if (node) {\n            $(node).addClass('selected').attr('aria-selected', 'true');\n            this.ksearch_selected = node._rcm_id;\n            $(this.ksearch_input).attr('aria-activedescendant', 'rcmkSearchItem' + this.ksearch_selected);\n        }\n    };\n\n    this.insert_recipient = function (id) {\n        if (id === null || !this.env.contacts[id] || !this.ksearch_input) {\n            return;\n        }\n\n        var trigger = false, insert = '', delim = ', ',\n            contact = this.env.contacts[id];\n\n        this.ksearch_destroy();\n\n        // insert all members of a group\n        if (typeof contact === 'object' && contact.type == 'group' && !contact.email && contact.id) {\n            // We wrap the group name with invisible markers to prevent from problems with group expanding (#7569)\n            var name = '\\u200B' + contact.name + '\\u200B';\n            insert = name + delim;\n            this.group2expand[contact.id] = { name: name, input: this.ksearch_input };\n            this.http_request('mail/group-expand', { _source: contact.source, _gid: contact.id }, false);\n        } else if (typeof contact === 'object' && contact.name) {\n            insert = contact.name + delim;\n            trigger = true;\n        } else if (typeof contact === 'string') {\n            insert = contact + delim;\n            trigger = true;\n        }\n\n        this.ksearch_input_replace(this.ksearch_value, insert, null, trigger);\n\n        if (trigger) {\n            this.triggerEvent('autocomplete_insert', {\n                field: this.ksearch_input,\n                insert: insert,\n                data: contact,\n                search: this.ksearch_value_last,\n                result_type: 'person',\n            });\n\n            this.ksearch_value_last = null;\n            this.compose_type_activity++;\n        }\n    };\n\n    this.replace_group_recipients = function (id, recipients) {\n        var data = this.group2expand[id];\n\n        if (data) {\n            this.ksearch_input_replace(data.name, recipients, data.input);\n\n            this.triggerEvent('autocomplete_insert', {\n                field: data.input,\n                insert: recipients,\n                data: data,\n                search: this.ksearch_value_last,\n                result_type: 'group',\n            });\n\n            this.ksearch_value_last = null;\n            this.group2expand[id] = null;\n            this.compose_type_activity++;\n        }\n    };\n\n    // address search processor\n    this.ksearch_get_results = function (props) {\n        if (this.ksearch_pane && this.ksearch_pane.is(':visible')) {\n            this.ksearch_pane.hide();\n        }\n\n        // get string from cursor position back to the last comma or semicolon\n        var q = this.ksearch_input_get(),\n            min = this.env.autocomplete_min_length,\n            data = this.ksearch_data;\n\n        // trim query string\n        q = q.trim();\n\n        // Don't (re-)search if the last results are still active\n        if (q == this.ksearch_value) {\n            return;\n        }\n\n        this.ksearch_destroy();\n\n        if (q.length && q.length < min) {\n            if (!this.ksearch_info) {\n                this.ksearch_info = this.display_message(this.get_label('autocompletechars').replace('$min', min));\n            }\n            return;\n        }\n\n        var old_value = this.ksearch_value;\n        this.ksearch_value = q;\n\n        // Group expansion clears ksearch_value before calling autocomplete_insert trigger,\n        // therefore store it in separate variable for later consumption.\n        this.ksearch_value_last = q;\n\n        // ...string is empty\n        if (!q.length) {\n            return;\n        }\n\n        // ...new search value contains old one and previous search was not finished or its result was empty\n        if (old_value && old_value.length && q.startsWith(old_value) && (!data || data.num <= 0) && this.env.contacts && !this.env.contacts.length) {\n            return;\n        }\n\n        var sources = props && props.sources ? props.sources : [''];\n        var reqid = this.multi_thread_http_request({\n            items: sources,\n            threads: props && props.threads ? props.threads : 1,\n            action: props && props.action ? props.action : 'mail/autocomplete',\n            postdata: { _search: q, _source: '%s' },\n            lock: this.display_message('searching', 'loading'),\n        });\n\n        this.ksearch_data = { id: reqid, sources: sources.slice(), num: sources.length };\n    };\n\n    this.ksearch_query_results = function (results, search, reqid) {\n        // trigger multi-thread http response callback\n        this.multi_thread_http_response(results, reqid);\n\n        // search stopped in meantime?\n        if (!this.ksearch_value) {\n            return;\n        }\n\n        // ignore this outdated search response\n        if (this.ksearch_input && search != this.ksearch_value) {\n            return;\n        }\n\n        // display search results\n        var i, id, len, ul, text, type, init,\n            is_framed = this.is_framed(),\n            value = this.ksearch_value,\n            maxlen = this.env.autocomplete_max ? this.env.autocomplete_max : 15;\n\n        // create results pane if not present\n        if (!this.ksearch_pane) {\n            ul = $('<ul>');\n            this.ksearch_pane = $('<div>')\n                .attr({ id: 'rcmKSearchpane', role: 'listbox', class: 'select-menu inline' })\n                .css({ position: 'absolute', 'z-index': 30000 })\n                .append(ul)\n                .appendTo(is_framed ? parent.document.body : document.body);\n\n            this.ksearch_pane.__ul = ul[0];\n            this.triggerEvent('autocomplete_create', { obj: this.ksearch_pane });\n        }\n\n        ul = this.ksearch_pane.__ul;\n\n        // remove all search results or add to existing list if parallel search\n        if (reqid && this.ksearch_pane.data('reqid') == reqid) {\n            maxlen -= ul.childNodes.length;\n        } else {\n            this.ksearch_pane.data('reqid', reqid);\n            init = 1;\n            // reset content\n            ul.innerHTML = '';\n            this.env.contacts = [];\n\n            // Calculate the results pane position and size\n            // Elastic: On small screen we use the width/position of the whole .ac-input element (input's parent)\n            var is_composite_input = $('html').is('.layout-small,.layout-phone') && $(this.ksearch_input).parents('.ac-input').length == 1,\n                input = is_composite_input ? $(this.ksearch_input).parents('.ac-input')[0] : $(this.ksearch_input)[0],\n                pos = $(input).offset();\n\n            // ... consider scroll position\n            pos.left -= $(document.documentElement).scrollLeft();\n            pos.top -= $(document.documentElement).scrollTop();\n\n            // ... consider iframe position\n            if (is_framed) {\n                try {\n                    parent.$('iframe').each(function () {\n                        if (this.contentWindow == window) {\n                            var offset = $(this).offset();\n                            pos.left += offset.left;\n                            pos.top += offset.top;\n                        }\n                    });\n                } catch (e) {}\n            }\n\n            var w = $(is_framed ? parent : window).width(),\n                input_width = $(input).outerWidth(),\n                left = w - pos.left > 200 ? pos.left : w - 200,\n                top = (pos.top + input.offsetHeight + 1),\n                width = Math.min(400, w - left);\n\n            this.ksearch_pane.css({\n                left: (is_composite_input ? pos.left : left) + 'px',\n                top: top + 'px',\n                maxWidth: (is_composite_input ? input_width : width) + 'px',\n                minWidth: '200px',\n                width: is_composite_input ? (input_width + 'px') : 'auto',\n                display: 'none',\n            });\n        }\n\n        // add each result line to list\n        if (results && (len = results.length)) {\n            for (i = 0; i < len && maxlen > 0; i++) {\n                text = typeof results[i] === 'object' ? (results[i].display || results[i].name) : results[i];\n                type = typeof results[i] === 'object' ? results[i].type : '';\n                id = i + this.env.contacts.length;\n                $('<li>').attr({ id: 'rcmkSearchItem' + id, role: 'option' })\n                    .html('<i class=\"icon\"></i>' + this.quote_html(text.replace(new RegExp('(' + RegExp.escape(value) + ')', 'ig'), '##$1%%')).replace(/##([^%]+)%%/g, '<b>$1</b>'))\n                    .addClass(type || '')\n                    .appendTo(ul)\n                    .mouseover(function () {\n                        ref.ksearch_select(this);\n                    })\n                    .mouseup(function () {\n                        ref.ksearch_click(this);\n                    })\n                    .get(0)._rcm_id = id;\n                maxlen -= 1;\n            }\n        }\n\n        if (ul.childNodes.length) {\n            // set the right aria-* attributes to the input field\n            $(this.ksearch_input)\n                .attr({ 'aria-haspopup': 'true', 'aria-expanded': 'true', 'aria-owns': 'rcmKSearchpane' });\n\n            this.ksearch_pane.show();\n\n            // select the first\n            if (!this.env.contacts.length) {\n                this.ksearch_select($('li', ul)[0]);\n            }\n        }\n\n        if (len) {\n            this.env.contacts = this.env.contacts.concat(results);\n        }\n\n        if (this.ksearch_data.id == reqid) {\n            this.ksearch_data.num--;\n        }\n    };\n\n    // Getter for input value\n    // returns a string from the last comma to current cursor position\n    this.ksearch_input_get = function () {\n        if (!this.ksearch_input) {\n            return '';\n        }\n\n        var cp = this.get_caret_pos(this.ksearch_input);\n\n        return this.ksearch_input.value.substr(0, cp).split(/[,;]/).pop();\n    };\n\n    // Setter for input value\n    // replaces 'from' string with 'to' and sets cursor position at the end\n    this.ksearch_input_replace = function (from, to, input, trigger) {\n        if (!this.ksearch_input && !input) {\n            return;\n        }\n\n        if (!input) {\n            input = this.ksearch_input;\n        }\n\n        var cpos = this.get_caret_pos(input),\n            p = input.value.lastIndexOf(from, cpos),\n            pre = input.value.substring(0, p),\n            end = input.value.substring(p + from.length, input.value.length);\n\n        input.value = pre + to + end;\n\n        // set caret to insert pos\n        this.set_caret_pos(input, cpos + to.length - from.length);\n\n        // run onchange action on the element\n        $(input).trigger('change', [true, trigger]);\n    };\n\n    this.ksearch_click = function (node) {\n        if (this.ksearch_input) {\n            this.ksearch_input.focus();\n        }\n\n        this.insert_recipient(node._rcm_id);\n        this.ksearch_hide();\n    };\n\n    this.ksearch_blur = function () {\n        if (this.ksearch_timer) {\n            clearTimeout(this.ksearch_timer);\n        }\n\n        this.ksearch_input = null;\n        this.ksearch_hide();\n    };\n\n    this.ksearch_hide = function () {\n        this.ksearch_selected = null;\n        this.ksearch_value = '';\n\n        if (this.ksearch_pane) {\n            this.ksearch_pane.hide();\n        }\n\n        $(this.ksearch_input)\n            .attr({ 'aria-haspopup': 'false', 'aria-expanded': 'false' })\n            .removeAttr('aria-activedescendant')\n            .removeAttr('aria-owns');\n\n        this.ksearch_destroy();\n    };\n\n    // Clears autocomplete data/requests\n    this.ksearch_destroy = function () {\n        if (this.ksearch_data) {\n            this.multi_thread_request_abort(this.ksearch_data.id);\n        }\n\n        if (this.ksearch_info) {\n            this.hide_message(this.ksearch_info);\n        }\n\n        if (this.ksearch_msg) {\n            this.hide_message(this.ksearch_msg);\n        }\n\n        this.ksearch_data = null;\n        this.ksearch_info = null;\n        this.ksearch_msg = null;\n    };\n\n\n    /*********************************************************/\n    /*                  address book methods                 */\n    /*********************************************************/\n\n    this.contactlist_select = function (list) {\n        if (this.preview_timer) {\n            clearTimeout(this.preview_timer);\n        }\n\n        var id, targets,\n            groupcount = 0,\n            writable = false,\n            deletable = false,\n            copy_writable = false,\n            selected = list.get_selection().length,\n            source = this.env.source ? this.env.address_sources[this.env.source] : null;\n\n        // we don't have dblclick handler here, so use 50 instead of this.dblclick_time\n        if (this.env.contentframe && !list.multi_selecting && (id = list.get_single_selection())) {\n            this.preview_timer = setTimeout(function () {\n                ref.load_contact(id, 'show');\n            }, this.preview_delay_click);\n        } else if (this.env.contentframe) {\n            this.show_contentframe(false);\n        }\n\n        if (selected) {\n            list.draggable = false;\n\n            // no source = search result, we'll need to detect if any of\n            // selected contacts are in writable addressbook to enable edit/delete\n            // we'll also need to know sources used in selection for copy\n            // and group-addmember operations (drag&drop)\n            this.env.selection_sources = [];\n\n            if (source) {\n                this.env.selection_sources.push(this.env.source);\n            }\n\n            $.each(list.get_selection(), function (i, v) {\n                var book, sid, contact = list.data[v];\n                if (!source) {\n                    sid = String(v).replace(/^[^-]+-/, '');\n                    book = sid ? ref.env.address_sources[sid] : null;\n\n                    if (book) {\n                        writable = writable || (!book.readonly && !contact.readonly);\n                        deletable = deletable || book.deletable === true;\n                        ref.env.selection_sources.push(sid);\n                    }\n                } else {\n                    writable = writable || (!source.readonly && !contact.readonly);\n                    deletable = deletable || source.deletable === true;\n                }\n\n                if (contact._type != 'group') {\n                    list.draggable = true;\n                }\n            });\n\n            this.env.selection_sources = $.unique(this.env.selection_sources);\n\n            if (source && source.groups) {\n                $.each(this.env.contactgroups, function () {\n                    if (this.source === ref.env.source) {\n                        groupcount++;\n                    }\n                });\n            }\n\n            targets = $.map(this.env.address_sources, function (v, i) {\n                return v.readonly ? null : i;\n            });\n            copy_writable = $.grep(targets, function (v) {\n                return jQuery.inArray(v, ref.env.selection_sources) < 0;\n            }).length > 0;\n        }\n\n        // if a group is currently selected, and there is at least one contact selected\n        // we can enable the group-remove-selected command\n        this.enable_command('group-assign-selected', groupcount > 0 && writable);\n        this.enable_command('group-remove-selected', this.env.group && writable);\n        this.enable_command('print', 'qrcode', selected == 1);\n        this.enable_command('export-selected', selected > 0);\n        this.enable_command('edit', id && writable);\n        this.enable_command('delete', 'move', writable || deletable);\n        this.enable_command('copy', copy_writable);\n\n        return false;\n    };\n\n    this.list_contacts = function (src, group, page, search) {\n        var win, folder, index = -1, url = {},\n            refresh = src === undefined && group === undefined && page === undefined,\n            target = window;\n\n        if (!src) {\n            src = this.env.source;\n        }\n\n        if (refresh) {\n            group = this.env.group;\n        }\n\n        if (src != this.env.source) {\n            page = this.env.current_page = 1;\n            this.reset_qsearch();\n        } else if (!refresh && group != this.env.group) {\n            page = this.env.current_page = 1;\n        }\n\n        if (this.env.search_id) {\n            folder = 'S' + this.env.search_id;\n        } else if (!this.env.search_request) {\n            folder = group ? 'G' + src + group : src;\n        }\n\n        this.env.source = this.env.last_source = src;\n        this.env.group = this.env.last_group = group;\n\n        // truncate groups listing stack\n        $.each(this.env.address_group_stack, function (i, v) {\n            if (ref.env.group == v.id) {\n                index = i;\n                return false;\n            }\n        });\n\n        this.env.address_group_stack = index < 0 ? [] : this.env.address_group_stack.slice(0, index);\n\n        // remove cached contact group selector\n        this.destroy_entity_selector('contactgroup-selector');\n\n        // make sure the current group is on top of the stack\n        if (this.env.group) {\n            if (!search) {\n                search = {};\n            }\n            search.id = this.env.group;\n            this.env.address_group_stack.push(search);\n\n            // mark the first group on the stack as selected in the directory list\n            folder = 'G' + src + this.env.address_group_stack[0].id;\n        } else if (this.gui_objects.addresslist_title) {\n            $(this.gui_objects.addresslist_title).text(this.get_label('contacts'));\n        }\n\n        if (!this.env.search_id) {\n            this.select_folder(folder, '', true);\n        }\n\n        // load contacts remotely\n        if (this.gui_objects.contactslist) {\n            this.list_contacts_remote(src, group, page);\n            return;\n        }\n\n        if (win = this.get_frame_window(this.env.contentframe)) {\n            target = win;\n            url._framed = 1;\n        }\n\n        if (group) {\n            url._gid = group;\n        }\n        if (page) {\n            url._page = page;\n        }\n        if (src) {\n            url._source = src;\n        }\n\n        // also send search request to get the correct listing\n        if (this.env.search_request) {\n            url._search = this.env.search_request;\n        }\n\n        this.set_busy(true, 'loading');\n        this.location_href(url, target);\n    };\n\n    // send remote request to load contacts list\n    this.list_contacts_remote = function (src, group, page) {\n        // clear message list first\n        this.list_contacts_clear();\n\n        // send request to server\n        var url = {}, lock = this.set_busy(true, 'loading');\n\n        if (src) {\n            url._source = src;\n        }\n        if (page) {\n            url._page = page;\n        }\n        if (group) {\n            url._gid = group;\n        }\n\n        this.env.source = src;\n        this.env.group = group;\n\n        // also send search request to get the right records\n        if (this.env.search_request) {\n            url._search = this.env.search_request;\n        }\n\n        this.http_request(this.env.task == 'mail' ? 'list-contacts' : 'list', url, lock);\n\n        if (this.env.task != 'mail') {\n            this.update_state({\n                _source: src,\n                _page: page && page > 1 ? page : null,\n                _gid: group ? group : null,\n            });\n        }\n    };\n\n    this.list_contacts_clear = function () {\n        this.contact_list.data = {};\n        this.contact_list.clear(true);\n        this.show_contentframe(false);\n        this.enable_command('delete', 'move', 'copy', 'print', false);\n    };\n\n    this.set_group_prop = function (prop) {\n        if (this.gui_objects.addresslist_title) {\n            var boxtitle = $(this.gui_objects.addresslist_title).html(''); // clear contents\n\n            // add link to pop back to parent group\n            if (this.env.address_group_stack.length > 1\n                || (this.env.address_group_stack.length == 1 && this.env.address_group_stack[0].search_request)\n            ) {\n                var link = $('<a href=\"#list\">...</a>')\n                    .attr({ title: this.get_label('uponelevel'), class: 'poplink' })\n                    .click(function () {\n                        return ref.command('popgroup', '', this);\n                    });\n\n                boxtitle.append(link).append('&nbsp;&raquo;&nbsp;');\n            }\n\n            boxtitle.append($('<span>').text(prop ? prop.name : this.get_label('contacts')));\n        }\n    };\n\n    // load contact record\n    this.load_contact = function (cid, action, framed) {\n        var win, url = {}, target = window,\n            rec = this.contact_list ? this.contact_list.data[cid] : null;\n\n        if (win = this.get_frame_window(this.env.contentframe)) {\n            url._framed = 1;\n            target = win;\n            this.show_contentframe(true);\n\n            // load dummy content, unselect selected row(s)\n            if (!cid) {\n                this.contact_list.clear_selection();\n            }\n\n            this.enable_command('export-selected', 'print', rec && rec._type != 'group');\n        } else if (framed) {\n            return false;\n        }\n\n        if (action && (cid || action == 'add') && !this.drag_active) {\n            if (this.env.group) {\n                url._gid = this.env.group;\n            }\n\n            if (this.env.search_request) {\n                url._search = this.env.search_request;\n            }\n\n            if (cid) {\n                url._cid = this.preview_id = cid;\n            }\n\n            url._action = action;\n            url._source = this.env.source;\n\n            this.location_href(url, target, true);\n        }\n\n        return true;\n    };\n\n    // add/delete member to/from the group\n    this.group_member_change = function (what, cid, source, gid) {\n        if (what != 'add') {\n            what = 'del';\n        }\n\n        var lock = this.display_message(what == 'add' ? 'addingmember' : 'removingmember', 'loading'),\n            post_data = { _cid: cid, _source: source, _gid: gid };\n\n        this.http_post('group-' + what + 'members', post_data, lock);\n    };\n\n    this.contacts_drag_menu = function (e, to) {\n        var dest = to.type == 'group' ? to.source : to.id,\n            source = this.env.source;\n\n        if (!this.env.address_sources[dest] || this.env.address_sources[dest].readonly) {\n            return true;\n        }\n\n        // search result may contain contacts from many sources, but if there is only one...\n        if (source == '' && this.env.selection_sources.length == 1) {\n            source = this.env.selection_sources[0];\n        }\n\n        if (to.type == 'group' && dest == source) {\n            var cid = this.contact_list.get_selection().join(',');\n            this.group_member_change('add', cid, dest, to.id);\n            return true;\n        }\n\n        // move action is not possible, \"redirect\" to copy if menu wasn't requested\n        if (!this.commands.move && rcube_event.get_modifier(e) != SHIFT_KEY) {\n            this.copy_contacts(to);\n            return true;\n        }\n\n        return this.drag_menu(e, to);\n    };\n\n    // copy contact(s) to the specified target (group or directory)\n    this.copy_contacts = function (to, event, cid) {\n        if (!to) {\n            cid = this.contact_list.get_selection();\n            return this.addressbook_selector(event, function (to, obj) {\n                var to = $(obj).data('source') ? ref.env.contactgroups['G' + $(obj).data('source') + $(obj).data('gid')] : ref.env.address_sources[to];\n                ref.copy_contacts(to, null, cid);\n            });\n        }\n\n        var dest = to.type == 'group' ? to.source : to.id,\n            source = this.env.source,\n            group = this.env.group ? this.env.group : '';\n\n        cid = cid ? cid.join(',') : this.contact_list.get_selection().join(',');\n\n        if (!cid || !this.env.address_sources[dest] || this.env.address_sources[dest].readonly) {\n            return;\n        }\n\n        // search result may contain contacts from many sources, but if there is only one...\n        if (source == '' && this.env.selection_sources.length == 1) {\n            source = this.env.selection_sources[0];\n        }\n\n        // target is a group\n        if (to.type == 'group') {\n            if (dest == source) {\n                return;\n            }\n\n            var lock = this.display_message('copyingcontact', 'loading'),\n                post_data = {\n                    _cid: cid, _source: this.env.source, _to: dest, _togid: to.id, _gid: group,\n                };\n\n            this.http_post('copy', post_data, lock);\n        }\n        // target is an addressbook\n        else if (to.id != source) {\n            var lock = this.display_message('copyingcontact', 'loading'),\n                post_data = {\n                    _cid: cid, _source: this.env.source, _to: to.id, _gid: group,\n                };\n\n            this.http_post('copy', post_data, lock);\n        }\n    };\n\n    // move contact(s) to the specified target (group or directory)\n    this.move_contacts = function (to, event, cid) {\n        if (!to) {\n            cid = this.contact_list.get_selection();\n            return this.addressbook_selector(event, function (to, obj) {\n                var to = $(obj).data('source') ? ref.env.contactgroups['G' + $(obj).data('source') + $(obj).data('gid')] : ref.env.address_sources[to];\n                ref.move_contacts(to, null, cid);\n            });\n        }\n\n        var dest = to.type == 'group' ? to.source : to.id,\n            source = this.env.source,\n            group = this.env.group ? this.env.group : '';\n\n        if (!this.env.address_sources[dest] || this.env.address_sources[dest].readonly) {\n            return;\n        }\n\n        if (!cid) {\n            cid = this.contact_list.get_selection();\n        }\n\n        // search result may contain contacts from many sources, but if there is only one...\n        if (source == '' && this.env.selection_sources.length == 1) {\n            source = this.env.selection_sources[0];\n        }\n\n        if (to.type == 'group') {\n            if (dest == source) {\n                return;\n            }\n\n            this._with_selected_contacts('move', { _to: dest, _togid: to.id, _cid: cid });\n        }\n        // target is an addressbook\n        else if (to.id != source) {\n            this._with_selected_contacts('move', { _to: to.id, _cid: cid });\n        }\n    };\n\n    // delete contact(s)\n    this.delete_contacts = function () {\n        var undelete = this.env.source && this.env.address_sources[this.env.source].undelete;\n\n        if (undelete) {\n            this._with_selected_contacts('delete', { _cid: this.contact_list.get_selection() });\n        } else {\n            var cid = this.contact_list.get_selection();\n            this.confirm_dialog(this.get_label('deletecontactconfirm'), 'delete', function () {\n                ref._with_selected_contacts('delete', { _cid: cid });\n            });\n        }\n    };\n\n    this._with_selected_contacts = function (action, post_data) {\n        var selection = post_data._cid;\n\n        // exit if no contact specified or if selection is empty\n        if (!selection.length && !this.env.cid) {\n            return;\n        }\n\n        var n, a_cids = [],\n            label = action == 'delete' ? 'contactdeleting' : 'movingcontact',\n            lock = this.display_message(label, 'loading'),\n            display_next = this.check_display_next();\n\n        if (this.env.cid) {\n            a_cids.push(this.env.cid);\n        } else {\n            for (n = 0; n < selection.length; n++) {\n                id = selection[n];\n                a_cids.push(id);\n                this.contact_list.remove_row(id, display_next && n == selection.length - 1);\n            }\n\n            if (!display_next) {\n                this.contact_list.clear_selection();\n            }\n        }\n\n        if (!post_data) {\n            post_data = {};\n        }\n\n        post_data._source = this.env.source;\n        post_data._from = this.env.action;\n        post_data._cid = a_cids.join(',');\n\n        if (this.env.group) {\n            post_data._gid = this.env.group;\n        }\n\n        // also send search request to get the right records from the next page\n        if (this.env.search_request) {\n            post_data._search = this.env.search_request;\n        }\n\n        // send request to server\n        this.http_post(action, post_data, lock);\n\n        return true;\n    };\n\n    // update a contact record in the list\n    this.update_contact_row = function (cid, cols_arr, newcid, source, data) {\n        var list = this.contact_list;\n\n        cid = this.html_identifier(cid);\n\n        // when in searching mode, concat cid with the source name\n        if (!list.rows[cid]) {\n            cid = cid + '-' + source;\n            if (newcid) {\n                newcid = newcid + '-' + source;\n            }\n        }\n\n        list.update_row(cid, cols_arr, newcid, true);\n        list.data[cid] = data;\n    };\n\n    // add row to contacts list\n    this.add_contact_row = function (cid, cols, classes, data) {\n        if (!this.gui_objects.contactslist) {\n            return false;\n        }\n\n        var c, col, list = this.contact_list,\n            row = { cols: [] };\n\n        row.id = 'rcmrow' + this.html_identifier(cid);\n        row.className = 'contact ' + (classes || '');\n\n        if (list.in_selection(cid)) {\n            row.className += ' selected';\n        }\n\n        // add each submitted col\n        for (c in cols) {\n            col = {};\n            col.className = String(c).toLowerCase();\n            col.innerHTML = cols[c];\n            row.cols.push(col);\n        }\n\n        // store data in list member\n        list.data[cid] = data;\n        list.insert_row(row);\n\n        this.enable_command('export', list.rowcount > 0);\n    };\n\n    this.init_contact_form = function () {\n        var col;\n\n        if (this.env.coltypes) {\n            this.set_photo_actions($('#ff_photo').val());\n            for (col in this.env.coltypes) {\n                this.init_edit_field(col, null);\n            }\n        }\n\n        $('.contactfieldgroup .row a.deletebutton').click(function () {\n            ref.delete_edit_field(this);\n            return false;\n        });\n\n        $('select.addfieldmenu').change(function () {\n            ref.insert_edit_field($(this).val(), $(this).attr('rel'), this);\n            this.selectedIndex = 0;\n        });\n\n        // enable date pickers on date fields\n        if ($.datepicker && this.env.date_format) {\n            $.datepicker.setDefaults({\n                dateFormat: this.env.date_format,\n                changeMonth: true,\n                changeYear: true,\n                yearRange: '-120:+10',\n                showOtherMonths: true,\n                selectOtherMonths: true,\n            });\n            $('input.datepicker').datepicker();\n        }\n\n        // Submit search form on Enter\n        if (this.env.action == 'search') {\n            $(this.gui_objects.editform).append($('<input type=\"submit\">').hide())\n                .submit(function () {\n                    $('input.mainaction').click(); return false;\n                });\n        }\n    };\n\n    // group creation dialog\n    this.group_create = function () {\n        var input = $('<input>').attr({ type: 'text', 'data-submit': 'true' }),\n            content = $('<label>').text(this.get_label('namex')).append(input),\n            source = this.env.source;\n\n        this.simple_dialog(content, 'newgroup', function () {\n            var name;\n            if (name = input.val()) {\n                ref.http_post('group-create', { _source: source, _name: name },\n                    ref.set_busy(true, 'loading'));\n                return true;\n            }\n        });\n    };\n\n    // group rename dialog\n    this.group_rename = function () {\n        if (!this.env.group) {\n            return;\n        }\n\n        var group_name = this.env.contactgroups['G' + this.env.source + this.env.group].name,\n            input = $('<input>').attr({ type: 'text', 'data-submit': 'true' }).val(group_name),\n            content = $('<label>').text(this.get_label('namex')).append(input),\n            source = this.env.source,\n            group = this.env.group;\n\n        this.simple_dialog(content, 'grouprename', function () {\n            var name;\n            if ((name = input.val()) && name != group_name) {\n                ref.http_post('group-rename', { _source: source, _gid: group, _name: name },\n                    ref.set_busy(true, 'loading'));\n                return true;\n            }\n        });\n    };\n\n    this.group_delete = function () {\n        if (this.env.group) {\n            var group = this.env.group;\n            this.confirm_dialog(this.get_label('deletegroupconfirm'), 'delete', function () {\n                var lock = ref.set_busy(true, 'groupdeleting');\n                ref.http_post('group-delete', { _source: ref.env.source, _gid: group }, lock);\n            });\n        }\n    };\n\n    // Callback from server upon group-delete command\n    this.remove_group_item = function (prop) {\n        var key = 'G' + prop.source + prop.id;\n\n        if (this.treelist.remove(key)) {\n            // make sure there is no cached address book or contact group selectors\n            this.destroy_entity_selector('addressbook-selector');\n            this.destroy_entity_selector('contactgroup-selector');\n\n            this.triggerEvent('group_delete', { source: prop.source, id: prop.id });\n\n            delete this.env.contactfolders[key];\n            delete this.env.contactgroups[key];\n        }\n\n        if (prop.source == this.env.source && prop.id == this.env.group) {\n            this.list_contacts(prop.source, 0);\n        }\n    };\n\n    // assign selected contacts to a group\n    this.group_assign_selected = function (props, obj, event) {\n        var cid = ref.contact_list.get_selection(),\n            source = ref.env.source;\n\n        this.contactgroup_selector(event, function (to) {\n            ref.group_member_change('add', cid, source, to);\n        });\n    };\n\n    // remove selected contacts from current active group\n    this.group_remove_selected = function () {\n        this.http_post('group-delmembers', {\n            _cid: this.contact_list.get_selection(),\n            _source: this.env.source,\n            _gid: this.env.group,\n        });\n    };\n\n    // callback after deleting contact(s) from current group\n    this.remove_group_contacts = function (props) {\n        if (this.env.group !== undefined && this.env.group === props.gid) {\n            var n, selection = this.contact_list.get_selection(),\n                display_next = this.check_display_next();\n\n            for (n = 0; n < selection.length; n++) {\n                id = selection[n];\n                this.contact_list.remove_row(id, display_next && n == selection.length - 1);\n            }\n\n            if (!display_next) {\n                this.contact_list.clear_selection();\n            }\n        }\n    };\n\n    // callback for creating a new contact group\n    this.insert_contact_group = function (prop) {\n        prop.type = 'group';\n\n        var key = 'G' + prop.source + prop.id,\n            link = $('<a>').attr({ href: '#', rel: prop.source + ':' + prop.id })\n                .click(function () {\n                    return ref.command('listgroup', prop, this);\n                })\n                .text(prop.name);\n\n        if (!this.env.contactgroups.length) {\n            this.env.contactgroups = {};\n        }\n\n        this.env.contactfolders[key] = this.env.contactgroups[key] = prop;\n        this.treelist.insert({ id: key, html: link, classes: ['contactgroup'] }, prop.source, 'contactgroup');\n\n        // If there was a contact selected we have to clear the list because we have outdated\n        // some commands state (e.g. group-assign-selected) as well as groups list in the contact frame\n        this.contact_list.clear_selection();\n\n        // make sure there is no cached address book or contact group selectors\n        this.destroy_entity_selector('addressbook-selector');\n        this.destroy_entity_selector('contactgroup-selector');\n\n        this.triggerEvent('group_insert', {\n            id: prop.id, source: prop.source, name: prop.name, li: this.treelist.get_item(key),\n        });\n    };\n\n    // callback for renaming a contact group\n    this.update_contact_group = function (prop) {\n        var key = 'G' + prop.source + prop.id,\n            newnode = {};\n\n        // group ID has changed, replace link node and identifiers\n        if (prop.newid) {\n            var newkey = 'G' + prop.source + prop.newid,\n                newprop = $.extend({}, prop);\n\n            this.env.contactfolders[newkey] = this.env.contactfolders[key];\n            this.env.contactfolders[newkey].id = prop.newid;\n            this.env.group = prop.newid;\n\n            delete this.env.contactfolders[key];\n            delete this.env.contactgroups[key];\n\n            newprop.id = prop.newid;\n            newprop.type = 'group';\n\n            newnode.id = newkey;\n            newnode.html = $('<a>').attr({ href: '#', rel: prop.source + ':' + prop.newid })\n                .click(function () {\n                    return ref.command('listgroup', newprop, this);\n                })\n                .text(prop.name);\n        } else {\n            // update displayed group name\n            $(this.treelist.get_item(key)).children().first().text(prop.name);\n            this.env.contactfolders[key].name = this.env.contactgroups[key].name = prop.name;\n\n            if (prop.source == this.env.source && prop.id == this.env.group) {\n                this.set_group_prop(prop);\n            }\n        }\n\n        // update list node and re-sort it\n        this.treelist.update(key, newnode, true);\n\n        // make sure there is no cached address book or contact group selectors\n        this.destroy_entity_selector('addressbook-selector');\n        this.destroy_entity_selector('contactgroup-selector');\n\n        this.triggerEvent('group_update', {\n            id: prop.id, source: prop.source, name: prop.name, li: this.treelist.get_item(key), newid: prop.newid,\n        });\n    };\n\n    this.update_group_commands = function () {\n        var source = this.env.source != '' ? this.env.address_sources[this.env.source] : null,\n            supported = source && source.groups && !source.readonly;\n\n        this.enable_command('group-create', supported);\n        this.enable_command('group-rename', 'group-delete', supported && this.env.group);\n    };\n\n    this.init_edit_field = function (col, elem) {\n        var label = this.env.coltypes[col].label;\n\n        if (!elem) {\n            elem = $('.ff_' + col);\n        }\n\n        if (label && !$('label[for=\"ff_' + col + '\"]').length) {\n            elem.placeholder(label);\n        }\n    };\n\n    this.insert_edit_field = function (col, section, menu) {\n        // just make pre-defined input field visible\n        var elem = $('#ff_' + col);\n\n        if (elem.length) {\n            $('label[for=\"ff_' + col + '\"]').parent().show();\n            elem.show().focus();\n            $(menu).children('option[value=\"' + col + '\"]').prop('disabled', true);\n        } else {\n            var lastelem = $('.ff_' + col),\n                appendcontainer = $('#contactsection' + section + ' .contactcontroller' + col);\n\n            if (!appendcontainer.length) {\n                var sect = $('#contactsection' + section),\n                    lastgroup = $('.contactfieldgroup', sect).last();\n                appendcontainer = $('<fieldset>').addClass('contactfieldgroup contactcontroller' + col);\n                if (lastgroup.length) {\n                    appendcontainer.insertAfter(lastgroup);\n                } else {\n                    sect.prepend(appendcontainer);\n                }\n            }\n\n            if (appendcontainer.get(0).nodeName == 'FIELDSET') {\n                var label, input,\n                    colprop = this.env.coltypes[col],\n                    name_suffix = colprop.limit != 1 ? '[]' : '',\n                    compact = $(menu).data('compact') ? true : false,\n                    input_id = 'ff_' + col + (colprop.count || 0),\n                    row = $('<div>').addClass('row input-group'),\n                    cell = $('<div>').addClass('contactfieldcontent ' + colprop.type);\n\n                // Field label\n                if (colprop.subtypes_select) {\n                    label = $(colprop.subtypes_select);\n                    if (!compact) {\n                        label = $('<div>').addClass('contactfieldlabel label').append(label);\n                    } else {\n                        label.addClass('input-group-prepend');\n                    }\n                } else {\n                    label = $('<label>').addClass('contactfieldlabel label input-group-text')\n                        .attr('for', input_id).text(colprop.label);\n\n                    if (compact) {\n                        label = $('<span class=\"input-group-prepend\">').append(label);\n                    }\n                }\n\n                // Field input\n                if (colprop.type == 'text' || colprop.type == 'date') {\n                    input = $('<input>')\n                        .addClass('form-control ff_' + col)\n                        .attr({\n                            type: 'text', name: '_' + col + name_suffix, size: colprop.size, id: input_id,\n                        });\n\n                    this.init_edit_field(col, input);\n\n                    if (colprop.type == 'date' && $.datepicker) {\n                        input.addClass('datepicker').datepicker();\n                    }\n                } else if (colprop.type == 'textarea') {\n                    input = $('<textarea>')\n                        .addClass('form-control ff_' + col)\n                        .attr({\n                            name: '_' + col + name_suffix, cols: colprop.size, rows: colprop.rows, id: input_id,\n                        });\n\n                    this.init_edit_field(col, input);\n                } else if (colprop.type == 'composite') {\n                    var i, childcol, cp, first, templ, cols = [], suffices = [], content = cell;\n\n                    row.addClass('composite');\n\n                    if (compact) {\n                        content = $('<div class=\"content input-group-text\">');\n                    }\n\n                    // read template for composite field order\n                    if (templ = this.env[col + '_template']) {\n                        for (i = 0; i < templ.length; i++) {\n                            cols.push(templ[i][1]);\n                            suffices.push(templ[i][2]);\n                        }\n                    } else { // list fields according to appearance in colprop\n                        for (childcol in colprop.childs) {\n                            cols.push(childcol);\n                        }\n                    }\n\n                    for (i = 0; i < cols.length; i++) {\n                        childcol = cols[i];\n                        cp = colprop.childs[childcol];\n                        input = $('<input>')\n                            .addClass('form-control ff_' + childcol)\n                            .attr({ type: 'text', name: '_' + childcol + name_suffix, size: cp.size })\n                            .appendTo(content);\n\n                        if (!compact) {\n                            content.append(suffices[i] || ' ');\n                        }\n\n                        this.init_edit_field(childcol, input);\n                        if (!first) {\n                            first = input;\n                        }\n                    }\n\n                    if (compact) {\n                        input = content;\n                    } else {\n                        input = first;\n                    } // set focus to the first of this composite fields\n                } else if (colprop.type == 'select') {\n                    input = $('<select>')\n                        .addClass('custom-select ff_' + col)\n                        .attr({ name: '_' + col + name_suffix, id: input_id });\n\n                    var options = input.attr('options');\n                    options[options.length] = new Option('---', '');\n                    if (colprop.options) {\n                        $.each(colprop.options, function (i, val) {\n                            options[options.length] = new Option(val, i);\n                        });\n                    }\n                }\n\n                if (input) {\n                    var delbutton = $('<a href=\"#del\"></a>')\n                        .addClass('contactfieldbutton deletebutton input-group-text icon delete')\n                        .attr({ title: this.get_label('delete'), rel: col })\n                        .html(this.env.delbutton)\n                        .click(function () {\n                            ref.delete_edit_field(this); return false;\n                        });\n\n                    row.append(label);\n\n                    if (!compact) {\n                        if (colprop.type != 'composite') {\n                            cell.append(input);\n                        }\n                        row.append(cell.append(delbutton));\n                    } else {\n                        row.append(input).append(delbutton);\n                        delbutton.wrap('<span class=\"input-group-append\">');\n                    }\n\n                    row.appendTo(appendcontainer.show());\n\n                    if (input.is('div')) {\n                        input.find('input').first().focus();\n                    } else {\n                        input.first().focus();\n                    }\n\n                    // disable option if limit reached\n                    if (!colprop.count) {\n                        colprop.count = 0;\n                    }\n                    if (++colprop.count == colprop.limit && colprop.limit) {\n                        $(menu).children('option[value=\"' + col + '\"]').prop('disabled', true);\n                    }\n\n                    this.triggerEvent('insert-edit-field', input);\n                }\n            }\n        }\n    };\n\n    this.delete_edit_field = function (elem) {\n        var col = $(elem).attr('rel'),\n            colprop = this.env.coltypes[col],\n            input_group = $(elem).parents('div.row'),\n            fieldset = $(elem).parents('fieldset.contactfieldgroup'),\n            addmenu = fieldset.parent().find('select.addfieldmenu');\n\n        // just clear input but don't hide the last field\n        if (--colprop.count <= 0 && colprop.visible) {\n            input_group.find('input').val('').blur();\n        } else {\n            input_group.remove();\n            // hide entire fieldset if no more rows\n            if (!fieldset.children('div.row').length) {\n                fieldset.hide();\n            }\n        }\n\n        // enable option in add-field selector or insert it if necessary\n        if (addmenu.length) {\n            var option = addmenu.children('option[value=\"' + col + '\"]');\n            if (option.length) {\n                option.prop('disabled', false);\n            } else {\n                option = $('<option>').attr('value', col).html(colprop.label).appendTo(addmenu);\n            }\n            addmenu.show();\n        }\n    };\n\n    this.upload_contact_photo = function (form) {\n        if (form && form.elements._photo.value) {\n            this.async_upload_form(form, 'upload-photo', function (e) {\n                ref.set_busy(false, null, ref.file_upload_id);\n            });\n\n            // display upload indicator\n            this.file_upload_id = this.set_busy(true, 'uploading');\n        }\n    };\n\n    this.replace_contact_photo = function (id) {\n        var img_src = id == '-del-' ? this.env.photo_placeholder\n            : this.env.comm_path + '&_action=photo&_source=' + this.env.source + '&_cid=' + (this.env.cid || 0) + '&_photo=' + id;\n\n        this.set_photo_actions(id);\n        $(this.gui_objects.contactphoto).children('img').attr('src', img_src);\n    };\n\n    this.photo_upload_end = function () {\n        this.set_busy(false, null, this.file_upload_id);\n        delete this.file_upload_id;\n    };\n\n    this.set_photo_actions = function (id) {\n        var n, buttons = this.buttons['upload-photo'];\n        for (n = 0; buttons && n < buttons.length; n++) {\n            $('a#' + buttons[n].id).html(this.get_label(id == '-del-' ? 'addphoto' : 'replacephoto'));\n        }\n\n        $('#ff_photo').val(id);\n        this.enable_command('upload-photo', this.env.coltypes.photo ? true : false);\n        this.enable_command('delete-photo', this.env.coltypes.photo && id != '-del-');\n    };\n\n    // load advanced search page\n    this.advanced_search = function () {\n        var dialog = $('<iframe>').attr('src', this.url('search', { _form: 1, _framed: 1 })),\n            search_func = function () {\n                var valid = false, form = { _adv: 1 };\n\n                $.each($(dialog[0].contentWindow.rcmail.gui_objects.editform).serializeArray(), function () {\n                    if (this.name.match(/^_search/) && this.value != '') {\n                        form[this.name] = this.value;\n                        valid = true;\n                    } else if (this.name == '_scope' && this.value == 'base') {\n                        // use env.last_source as env.source is overwritten by search action\n                        form[this.name] = ref.env.last_source;\n                    }\n                });\n\n                if (valid) {\n                    ref.http_post('search', form, ref.set_busy(true, 'searching'));\n                    return true;\n                }\n            };\n\n        this.simple_dialog(dialog, 'advsearch', search_func, {\n            button: 'search',\n            width: 600,\n            height: 500,\n        });\n\n        return true;\n    };\n\n    // unselect directory/group\n    this.unselect_directory = function () {\n        this.select_folder('');\n        this.enable_command('search-delete', false);\n    };\n\n    // callback for creating a new saved search record\n    this.insert_saved_search = function (name, id) {\n        var key = 'S' + id,\n            link = $('<a>').attr({ href: '#', rel: id })\n                .click(function () {\n                    return ref.command('listsearch', id, this);\n                })\n                .html(name),\n            prop = { name: name, id: id };\n\n        this.savedsearchlist.insert({ id: key, html: link, classes: ['contactsearch'] }, null, 'contactsearch');\n        this.select_folder(key, '', true);\n        this.enable_command('search-delete', true);\n        this.env.search_id = id;\n\n        this.triggerEvent('abook_search_insert', prop);\n    };\n\n    // creates a dialog for saved search\n    this.search_create = function () {\n        var input = $('<input>').attr('type', 'text'),\n            content = $('<label>').text(this.get_label('namex')).append(input);\n\n        this.simple_dialog(content, 'searchsave',\n            function () {\n                var name;\n                if (name = input.val()) {\n                    ref.http_post('search-create', { _search: ref.env.search_request, _name: name },\n                        ref.set_busy(true, 'loading'));\n                    return true;\n                }\n            }\n        );\n    };\n\n    this.search_delete = function () {\n        if (this.env.search_request) {\n            var lock = this.set_busy(true, 'savedsearchdeleting');\n            this.http_post('search-delete', { _sid: this.env.search_id }, lock);\n        }\n    };\n\n    // callback from server upon search-delete command\n    this.remove_search_item = function (id) {\n        if (this.savedsearchlist.remove('S' + id)) {\n            this.triggerEvent('search_delete', { id: id });\n        }\n\n        this.env.search_id = null;\n        this.env.search_request = null;\n        this.list_contacts_clear();\n        this.reset_qsearch();\n        this.enable_command('search-delete', 'search-create', false);\n    };\n\n    this.listsearch = function (id) {\n        var lock = this.set_busy(true, 'searching');\n\n        if (this.contact_list) {\n            this.list_contacts_clear();\n        }\n\n        this.reset_qsearch();\n\n        if (this.savedsearchlist) {\n            this.treelist.select('');\n            this.savedsearchlist.select('S' + id);\n        } else {\n            this.select_folder('S' + id, '', true);\n        }\n\n        // reset vars\n        this.env.current_page = 1;\n        this.http_request('search', { _sid: id }, lock);\n    };\n\n    // display a dialog with QR code image\n    this.qrcode = function () {\n        var img = new Image(300, 300);\n\n        img.src = this.url('addressbook/qrcode', { _source: this.env.source, _cid: this.get_single_cid() });\n\n        return this.simple_dialog(img, 'qrcode', null, {\n            button: false,\n            cancel_button: 'close',\n            width: 300,\n            height: 300,\n        });\n    };\n\n\n    /*********************************************************/\n    /*                 user settings methods                 */\n    /*********************************************************/\n\n    // preferences section select and load options frame\n    this.section_select = function (list) {\n        var win, id = list.get_single_selection();\n\n        if (id && (win = this.get_frame_window(this.env.contentframe))) {\n            this.location_href({ _action: 'edit-prefs', _section: id, _framed: 1 }, win, true);\n        }\n    };\n\n    this.response_select = function (list) {\n        var id = list.get_single_selection();\n\n        this.enable_command('delete', !!id && $.inArray(id, this.env.readonly_responses) < 0);\n\n        if (id) {\n            this.load_response(id, 'edit-response');\n        }\n    };\n\n    // load response record\n    this.load_response = function (id, action) {\n        var win;\n\n        if (win = this.get_frame_window(this.env.contentframe)) {\n            if (id || action == 'add-response') {\n                if (!id) {\n                    this.responses_list.clear_selection();\n                }\n\n                this.location_href({ _action: action, _id: id, _framed: 1 }, win, true);\n            }\n        }\n    };\n\n    this.identity_select = function (list) {\n        var id = list.get_single_selection();\n\n        this.enable_command('delete', !!id && list.rowcount > 1 && this.env.identities_level < 2);\n\n        if (id) {\n            this.load_identity(id, 'edit-identity');\n        }\n    };\n\n    // load identity record\n    this.load_identity = function (id, action) {\n        var win;\n\n        if (win = this.get_frame_window(this.env.contentframe)) {\n            if (id || action == 'add-identity') {\n                if (!id) {\n                    this.identity_list.clear_selection();\n                }\n\n                this.location_href({ _action: action, _iid: id, _framed: 1 }, win, true);\n            }\n        }\n    };\n\n    this.delete_identity = function (id) {\n        if (!id && this.identity_list) {\n            id = this.identity_list.get_single_selection();\n        }\n\n        if (id) {\n            this.confirm_dialog(this.get_label('deleteidentityconfirm'), 'delete', function () {\n                ref.http_post('settings/delete-identity', { _iid: id }, true);\n            });\n        }\n    };\n\n    this.delete_response = function (id) {\n        if (!id && this.responses_list) {\n            id = this.responses_list.get_single_selection();\n        }\n\n        if (id) {\n            this.confirm_dialog(this.get_label('deleteresponseconfirm'), 'delete', function () {\n                ref.http_post('settings/delete-response', { _id: id }, true);\n            });\n        }\n    };\n\n    // Update indetities list (add or update a record)\n    this.update_identity_row = function (id, name, add) {\n        var list = this.identity_list,\n            rid = this.html_identifier(id);\n\n        if (add) {\n            list.insert_row({ id: 'rcmrow' + rid, cols: [{ className: 'mail', innerHTML: name }] });\n            list.select(rid);\n        } else {\n            list.update_row(rid, [name]);\n        }\n    };\n\n    // Update responses list (add or update a record)\n    this.update_response_row = function (id, name, add) {\n        var list = this.responses_list;\n\n        if (add) {\n            list.insert_row({ id: 'rcmrow' + id, cols: [{ className: 'name', innerHTML: name }] });\n            list.select(id);\n        } else {\n            list.update_row(id, [name]);\n        }\n    };\n\n    // Remove response record from the responses list\n    this.remove_response = function (id) {\n        if (this.responses_list) {\n            this.responses_list.remove_row(id);\n            this.show_contentframe(false);\n        }\n\n        this.enable_command('delete', false);\n    };\n\n    // Remove identity record from the identities list\n    this.remove_identity = function (id) {\n        var list = this.identity_list,\n            rid = this.html_identifier(id);\n\n        if (list && id) {\n            list.remove_row(rid);\n            this.show_contentframe(false);\n        }\n\n        this.enable_command('delete', false);\n    };\n\n\n    /*********************************************************/\n    /*                 folder manager methods                */\n    /*********************************************************/\n\n    this.init_subscription_list = function () {\n        var delim = RegExp.escape(this.env.delimiter);\n\n        this.last_sub_rx = RegExp('[' + delim + ']?[^' + delim + ']+$');\n\n        this.subscription_list = new rcube_treelist_widget(this.gui_objects.subscriptionlist, {\n            selectable: true,\n            tabexit: false,\n            parent_focus: true,\n            id_prefix: 'rcmli',\n            id_encode: this.html_identifier_encode,\n            id_decode: this.html_identifier_decode,\n            searchbox: '#foldersearch',\n        });\n\n        this.subscription_list\n            .addEventListener('select', function (node) {\n                ref.subscription_select(node.id);\n            })\n            .addEventListener('collapse', function (node) {\n                ref.folder_collapsed(node);\n            })\n            .addEventListener('expand', function (node) {\n                ref.folder_collapsed(node);\n            })\n            .addEventListener('search', function (p) {\n                if (p.query) {\n                    ref.subscription_select();\n                }\n            })\n            .draggable({ cancel: 'li.mailbox.root,input,div.treetoggle,.custom-control' })\n            .droppable({\n                // @todo: find better way, accept callback is executed for every folder\n                // on the list when dragging starts (and stops), this is slow, but\n                // I didn't find a method to check droptarget on over event\n                accept: function (node) {\n                    if (!node.is('.mailbox')) {\n                        return false;\n                    }\n\n                    var source_folder = ref.folder_id2name(node.attr('id')),\n                        dest_folder = ref.folder_id2name(this.id),\n                        source = ref.env.subscriptionrows[source_folder],\n                        dest = ref.env.subscriptionrows[dest_folder];\n\n                    return source && !source[2]\n                        && dest_folder != source_folder.replace(ref.last_sub_rx, '')\n                        && !dest_folder.startsWith(source_folder + ref.env.delimiter);\n                },\n                drop: function (e, ui) {\n                    var source = ref.folder_id2name(ui.draggable.attr('id')),\n                        dest = ref.folder_id2name(this.id);\n\n                    ref.subscription_move_folder(source, dest);\n                },\n            });\n    };\n\n    this.folder_id2name = function (id) {\n        return id ? ref.html_identifier_decode(id.replace(/^rcmli/, '')) : null;\n    };\n\n    this.subscription_select = function (id) {\n        var folder;\n\n        if (id && id != '*' && (folder = this.env.subscriptionrows[id])) {\n            this.env.mailbox = id;\n            this.show_folder(id);\n            this.enable_command('delete-folder', !folder[2]);\n        } else {\n            this.env.mailbox = null;\n            this.show_contentframe(false);\n            this.subscription_list.select('');\n            this.enable_command('delete-folder', 'purge', false);\n        }\n    };\n\n    this.subscription_move_folder = function (from, to) {\n        if (from && to !== null && from != to && to != from.replace(this.last_sub_rx, '')) {\n            var path = from.split(this.env.delimiter),\n                basename = path.pop(),\n                newname = to === '' || to === '*' ? basename : to + this.env.delimiter + basename;\n\n            if (newname != from) {\n                this.confirm_dialog(this.get_label('movefolderconfirm'), 'move', function () {\n                    ref.http_post('rename-folder', { _folder_oldname: from, _folder_newname: newname },\n                        ref.set_busy(true, 'foldermoving'));\n                }, { button_class: 'save move' });\n            }\n        }\n    };\n\n    // tell server to create and subscribe a new mailbox\n    this.create_folder = function () {\n        this.show_folder('', this.env.mailbox);\n    };\n\n    // delete a specific mailbox with all its messages\n    this.delete_folder = function (name) {\n        if (!name) {\n            name = this.env.mailbox;\n        }\n\n        if (name) {\n            this.confirm_dialog(this.get_label('deletefolderconfirm'), 'delete', function () {\n                ref.http_post('delete-folder', { _mbox: name }, ref.set_busy(true, 'folderdeleting'));\n            });\n        }\n    };\n\n    // Add folder row to the table and initialize it\n    this.add_folder_row = function (id, name, display_name, is_protected, subscribed, class_name, refrow, subfolders) {\n        if (!this.gui_objects.subscriptionlist) {\n            return false;\n        }\n\n        // reset searching\n        if (this.subscription_list.is_search()) {\n            this.subscription_select();\n            this.subscription_list.reset_search();\n        }\n\n        // disable drag-n-drop temporarily\n        // some skins disable dragging in mobile mode, so we have to check if it is still draggable\n        if (this.subscription_list.is_draggable()) {\n            this.subscription_list.draggable('destroy').droppable('destroy');\n        }\n\n        var n, tmp, tmp_name, rowid, collator, pos, p, parent = '',\n            folders = [], list = [], slist = [],\n            list_element = $(this.gui_objects.subscriptionlist),\n            row = refrow ? refrow : $($('li', list_element).get(1)).clone(true);\n\n        if (!row.length) {\n            // Refresh page if we don't have a table row to clone\n            this.goto_url('folders');\n            return false;\n        }\n\n        // set ID, reset css class\n        row.attr({ id: 'rcmli' + this.html_identifier_encode(id), class: class_name });\n\n        if (!refrow || !refrow.length) {\n            // remove old data, subfolders and toggle\n            $('ul,div.treetoggle', row).remove();\n            row.removeData('filtered');\n        }\n\n        // set folder name\n        $('a', row).first().text(display_name).removeAttr('title');\n\n        // update subscription checkbox\n        $('input[name=\"_subscribed[]\"]', row).first().val(id)\n            .prop({ checked: subscribed ? true : false, disabled: is_protected ? true : false });\n\n        // add to folder/row-ID map\n        this.env.subscriptionrows[id] = [name, display_name, false];\n\n        // copy folders data to an array for sorting\n        $.each(this.env.subscriptionrows, function (k, v) {\n            v[3] = k; folders.push(v);\n        });\n\n        try {\n            // use collator if supported (FF29, IE11, Opera15, Chrome24)\n            collator = new Intl.Collator(this.env.locale.replace('_', '-'));\n        } catch (e) {}\n\n        // sort folders\n        folders.sort(function (a, b) {\n            var i, f1, f2,\n                path1 = a[0].split(ref.env.delimiter),\n                path2 = b[0].split(ref.env.delimiter),\n                len = path1.length;\n\n            for (i = 0; i < len; i++) {\n                f1 = path1[i];\n                f2 = path2[i];\n\n                if (f1 !== f2) {\n                    if (f2 === undefined) {\n                        return 1;\n                    }\n                    if (collator) {\n                        return collator.compare(f1, f2);\n                    }\n\n                    return f1 < f2 ? -1 : 1;\n                }\n\n                if (i == len - 1) {\n                    return -1;\n                }\n            }\n        });\n\n        for (n in folders) {\n            p = folders[n][3];\n            // protected folder\n            if (folders[n][2]) {\n                tmp_name = p + this.env.delimiter;\n                // prefix namespace cannot have subfolders (#1488349)\n                if (tmp_name == this.env.prefix_ns) {\n                    continue;\n                }\n                slist.push(p);\n                tmp = tmp_name;\n            }\n            // protected folder's child\n            else if (tmp && p.startsWith(tmp)) {\n                slist.push(p);\n            }\n            // other\n            else {\n                list.push(p);\n                tmp = null;\n            }\n        }\n\n        // check if subfolder of a protected folder\n        for (n = 0; n < slist.length; n++) {\n            if (id.startsWith(slist[n] + this.env.delimiter)) {\n                rowid = slist[n];\n            }\n        }\n\n        // find folder position after sorting\n        for (n = 0; !rowid && n < list.length; n++) {\n            if (n && list[n] == id) {\n                rowid = list[n - 1];\n            }\n        }\n\n        // add row to the table\n        if (rowid && (n = this.subscription_list.get_item(rowid, true))) {\n            // find parent folder\n            if (pos = id.lastIndexOf(this.env.delimiter)) {\n                parent = id.substring(0, pos);\n                parent = this.subscription_list.get_item(parent, true);\n\n                // add required tree elements to the parent if not already there\n                if (!$('div.treetoggle', parent).length) {\n                    $('<div>&nbsp;</div>').addClass('treetoggle collapsed').appendTo(parent);\n                }\n                if (!$('ul', parent).length) {\n                    $('<ul>').css('display', 'none').appendTo(parent);\n                }\n            }\n\n            if (parent && n == parent) {\n                $('ul', parent).first().append(row);\n            } else {\n                while (p = $(n).parent().parent().get(0)) {\n                    if (parent && p == parent) {\n                        break;\n                    }\n                    if (!$(p).is('li.mailbox')) {\n                        break;\n                    }\n                    n = p;\n                }\n\n                $(n).after(row);\n            }\n        } else {\n            list_element.append(row);\n        }\n\n        // add subfolders\n        $.extend(this.env.subscriptionrows, subfolders || {});\n\n        // update list widget\n        this.subscription_list.reset(true);\n        this.subscription_select();\n\n        // expand parent\n        if (parent) {\n            this.subscription_list.expand(this.folder_id2name(parent.id));\n        }\n\n        row = row.show().get(0);\n        if (row.scrollIntoView) {\n            row.scrollIntoView(false);\n        }\n\n        // Let skins to do their magic, e.g. Elastic will fix pretty checkbox\n        if (!refrow) {\n            this.triggerEvent('clonerow', { row: row, id: id });\n        }\n\n        return row;\n    };\n\n    // replace an existing table row with a new folder line (with subfolders)\n    this.replace_folder_row = function (oldid, id, name, display_name, is_protected, class_name) {\n        if (!this.gui_objects.subscriptionlist) {\n            if (this.is_framed()) {\n                // @FIXME: for some reason this 'parent' variable need to be prefixed with 'window.'\n                return window.parent.rcmail.replace_folder_row(oldid, id, name, display_name, is_protected, class_name);\n            }\n\n            return false;\n        }\n\n        // reset searching\n        if (this.subscription_list.is_search()) {\n            this.subscription_select();\n            this.subscription_list.reset_search();\n        }\n\n        var subfolders = {},\n            row = this.subscription_list.get_item(oldid, true),\n            parent = $(row).parent(),\n            old_folder = this.env.subscriptionrows[oldid],\n            prefix_len_id = oldid.length,\n            prefix_len_name = old_folder[0].length,\n            subscribed = $('input[name=\"_subscribed[]\"]', row).first().prop('checked');\n\n        // no renaming, only update class_name\n        if (oldid == id) {\n            $(row).attr('class', class_name || '');\n            return;\n        }\n\n        // update subfolders\n        $('li', row).each(function () {\n            var fname = ref.folder_id2name(this.id),\n                folder = ref.env.subscriptionrows[fname],\n                newid = id + fname.slice(prefix_len_id);\n\n            this.id = 'rcmli' + ref.html_identifier_encode(newid);\n            $('input[name=\"_subscribed[]\"]', this).first().val(newid);\n            folder[0] = name + folder[0].slice(prefix_len_name);\n\n            subfolders[newid] = folder;\n            delete ref.env.subscriptionrows[fname];\n        });\n\n        // get row off the list\n        row = $(row).detach();\n\n        delete this.env.subscriptionrows[oldid];\n\n        // remove parent list/toggle elements if not needed\n        if (parent.get(0) != this.gui_objects.subscriptionlist && !$('li', parent).length) {\n            $('ul,div.treetoggle', parent.parent()).remove();\n        }\n\n        // move the existing table row\n        this.add_folder_row(id, name, display_name, is_protected, subscribed, class_name, row, subfolders);\n    };\n\n    // remove the table row of a specific mailbox from the table\n    this.remove_folder_row = function (folder) {\n        // reset searching\n        if (this.subscription_list.is_search()) {\n            this.subscription_select();\n            this.subscription_list.reset_search();\n        }\n\n        var list = [], row = this.subscription_list.get_item(folder, true);\n\n        // get subfolders if any\n        $('li', row).each(function () {\n            list.push(ref.folder_id2name(this.id));\n        });\n\n        // remove folder row (and subfolders)\n        this.subscription_list.remove(folder);\n\n        // update local list variable\n        list.push(folder);\n        $.each(list, function (i, v) {\n            delete ref.env.subscriptionrows[v];\n        });\n    };\n\n    this.subscribe = function (folder) {\n        this.change_subscription_state(folder, true);\n    };\n\n    this.unsubscribe = function (folder) {\n        this.change_subscription_state(folder, false);\n    };\n\n    this.change_subscription_state = function (folder, state) {\n        if (folder) {\n            var prefix = state ? '' : 'un',\n                lock = this.display_message('folder' + prefix + 'subscribing', 'loading');\n\n            this.http_post(prefix + 'subscribe', { _mbox: folder }, lock);\n\n            // in case this was a list of search results, update also the main list\n            $(this.gui_objects.subscriptionlist).find('input[value=\"' + folder + '\"]').prop('checked', state);\n        }\n    };\n\n\n    // when user select a folder in manager\n    this.show_folder = function (folder, path, force) {\n        var win, target = window,\n            action = folder === '' ? 'add' : 'edit',\n            url = '&_action=' + action + '-folder&_mbox=' + urlencode(folder);\n\n        if (path) {\n            url += '&_path=' + urlencode(path);\n        }\n\n        if (win = this.get_frame_window(this.env.contentframe)) {\n            target = win;\n            url += '&_framed=1';\n        }\n\n        // unselect selected row(s)\n        if (action == 'add') {\n            this.subscription_select('');\n        }\n\n        if (String(target.location.href).indexOf(url) >= 0 && !force) {\n            this.show_contentframe(true);\n        } else {\n            this.location_href(this.env.comm_path + url, target, true);\n        }\n    };\n\n    // disables subscription checkbox (for protected folder)\n    this.disable_subscription = function (folder) {\n        var row = this.subscription_list.get_item(folder, true);\n        if (row) {\n            $('input[name=\"_subscribed[]\"]', row).first().prop('disabled', true);\n        }\n    };\n\n    // resets state of subscription checkbox (e.g. on error)\n    this.reset_subscription = function (folder, state) {\n        var row = this.subscription_list.get_item(folder, true);\n        if (row) {\n            $('input[name=\"_subscribed[]\"]', row).first().prop('checked', state);\n        }\n    };\n\n    this.folder_size = function (folder) {\n        var lock = this.set_busy(true, 'loading');\n        this.http_post('folder-size', { _mbox: folder }, lock);\n    };\n\n    this.folder_size_update = function (size) {\n        $('#folder-size').replaceWith(size);\n    };\n\n    // filter folders by namespace\n    this.folder_filter = function (prefix) {\n        this.subscription_list.reset_search();\n\n        this.subscription_list.container.children('li').each(function () {\n            var i, folder = ref.folder_id2name(this.id);\n            // show all folders\n            if (prefix == '---') {\n                // do nothing\n            }\n            // got namespace prefix\n            else if (prefix) {\n                if (folder !== prefix) {\n                    $(this).data('filtered', true).hide();\n                    return;\n                }\n            }\n            // no namespace prefix, filter out all other namespaces\n            else {\n                // first get all namespace roots\n                for (i in ref.env.ns_roots) {\n                    if (folder === ref.env.ns_roots[i]) {\n                        $(this).data('filtered', true).hide();\n                        return;\n                    }\n                }\n            }\n\n            $(this).removeData('filtered').show();\n        });\n    };\n\n    /*********************************************************/\n    /*                   GUI functionality                   */\n    /*********************************************************/\n\n    this.init_button = function (cmd, prop) {\n        var elm = document.getElementById(prop.id);\n        if (!elm) {\n            return;\n        }\n\n        var preload = false;\n        if (prop.type == 'image') {\n            elm = elm.parentNode;\n            preload = true;\n        }\n\n        elm._command = cmd;\n        elm._id = prop.id;\n\n        if (prop.sel) {\n            elm.onmousedown = function (e) {\n                return ref.button_sel(this._command, this._id);\n            };\n            elm.onmouseup = function (e) {\n                return ref.button_out(this._command, this._id);\n            };\n            if (preload) {\n                new Image().src = prop.sel;\n            }\n        }\n\n        if (prop.over) {\n            elm.onmouseover = function (e) {\n                return ref.button_over(this._command, this._id);\n            };\n            elm.onmouseout = function (e) {\n                return ref.button_out(this._command, this._id);\n            };\n            if (preload) {\n                new Image().src = prop.over;\n            }\n        }\n    };\n\n    // set event handlers on registered buttons\n    this.init_buttons = function () {\n        for (var cmd in this.buttons) {\n            if (typeof cmd !== 'string') {\n                continue;\n            }\n\n            for (var i = 0; i < this.buttons[cmd].length; i++) {\n                this.init_button(cmd, this.buttons[cmd][i]);\n            }\n        }\n    };\n\n    // set button to a specific state\n    this.set_button = function (command, state) {\n        var n, button, obj, a_buttons = this.buttons[command],\n            len = a_buttons ? a_buttons.length : 0;\n\n        for (n = 0; n < len; n++) {\n            button = a_buttons[n];\n            obj = document.getElementById(button.id);\n\n            if (!obj || button.status === state) {\n                continue;\n            }\n\n            // get default/passive setting of the button\n            if (button.type == 'image' && !button.status) {\n                button.pas = obj._original_src ? obj._original_src : obj.src;\n                // respect PNG fix on IE browsers\n                if (obj.runtimeStyle && obj.runtimeStyle.filter && obj.runtimeStyle.filter.match(/src=['\"]([^'\"]+)['\"]/)) {\n                    button.pas = RegExp.$1;\n                }\n            } else if (!button.status) {\n                button.pas = String(obj.className);\n            }\n\n            button.status = state;\n\n            // set image according to button state\n            if (button.type == 'image' && button[state]) {\n                obj.src = button[state];\n            }\n            // set class name according to button state\n            else if (button[state] !== undefined) {\n                obj.className = button[state];\n            }\n\n            // disable/enable input buttons\n            if (button.type == 'input' || button.type == 'button') {\n                obj.disabled = state == 'pas';\n            } else {\n                $(obj).attr({\n                    tabindex: state == 'pas' || state == 'sel' ? '-1' : ($(obj).attr('data-tabindex') || '0'),\n                    'aria-disabled': state == 'pas' || state == 'sel' ? 'true' : 'false',\n                });\n            }\n        }\n    };\n\n    // display a specific alttext\n    this.set_alttext = function (command, label) {\n        var n, button, obj, link, label,\n            a_buttons = this.buttons[command],\n            len = a_buttons ? a_buttons.length : 0;\n\n        for (n = 0; n < len; n++) {\n            button = a_buttons[n];\n            obj = document.getElementById(button.id);\n            label = this.get_label(label);\n\n            if (obj && button.type == 'image') {\n                obj.setAttribute('alt', label);\n                if ((link = obj.parentNode) && link.tagName.toLowerCase() == 'a') {\n                    link.setAttribute('title', label);\n                }\n            } else if (obj) {\n                obj.setAttribute('title', label);\n            }\n        }\n    };\n\n    // mouse over button\n    this.button_over = function (command, id) {\n        this.button_event(command, id, 'over');\n    };\n\n    // mouse down on button\n    this.button_sel = function (command, id) {\n        this.button_event(command, id, 'sel');\n    };\n\n    // mouse out of button\n    this.button_out = function (command, id) {\n        this.button_event(command, id, 'act');\n    };\n\n    // event of button\n    this.button_event = function (command, id, event) {\n        var n, button, obj, a_buttons = this.buttons[command],\n            len = a_buttons ? a_buttons.length : 0;\n\n        for (n = 0; n < len; n++) {\n            button = a_buttons[n];\n            if (button.id == id && button.status == 'act') {\n                if (button[event] && (obj = document.getElementById(button.id))) {\n                    obj[button.type == 'image' ? 'src' : 'className'] = button[event];\n                }\n\n                if (event == 'sel') {\n                    this.buttons_sel[id] = command;\n                }\n            }\n        }\n    };\n\n    // write to the document/window title\n    this.set_pagetitle = function (title) {\n        if (title && document.title) {\n            document.title = title;\n        }\n    };\n\n    // display a system message, list of types in common.css (below #message definition)\n    this.display_message = function (msg, type, timeout, key) {\n        if (msg && msg.length && /^[a-z._]+$/.test(msg)) {\n            msg = this.get_label(msg);\n        }\n\n        // pass command to parent window\n        if (this.is_framed()) {\n            return parent.rcmail.display_message(msg, type, timeout);\n        }\n\n        if (!this.gui_objects.message) {\n            // save message in order to display after page loaded\n            if (type != 'loading') {\n                this.pending_message = [msg, type, timeout, key];\n            }\n            return 1;\n        }\n\n        if (!type) {\n            type = 'notice';\n        } else if (type == 'loading') {\n            if (!key) {\n                key = 'loading';\n            }\n            if (!timeout) {\n                timeout = this.env.request_timeout * 1000;\n            }\n            if (!msg) {\n                msg = this.get_label('loading');\n            }\n        }\n\n        if (!key) {\n            key = this.html_identifier(msg);\n        }\n\n        var date = new Date(),\n            id = type + date.getTime();\n\n        if (!timeout) {\n            switch (type) {\n                case 'error':\n                case 'warning':\n                    timeout = this.message_time * 2;\n                    break;\n                case 'uploading':\n                    timeout = 0;\n                    break;\n                default:\n                    timeout = this.message_time;\n            }\n        }\n\n        // The same message is already displayed\n        if (this.messages[key]) {\n            // replace label\n            if (this.messages[key].obj) {\n                $('div.content', this.messages[key].obj).html(msg);\n            }\n\n            // store label in stack\n            if (type == 'loading') {\n                this.messages[key].labels.push({ id: id, msg: msg });\n            }\n\n            // add element and set timeout\n            this.messages[key].elements.push(id);\n            setTimeout(function () {\n                ref.hide_message(id, type == 'loading');\n            }, timeout);\n\n            return id;\n        }\n\n        // create DOM object and display it\n        var obj = $('<div>').addClass(type + ' content').html(msg).data('key', key),\n            cont = $(this.gui_objects.message).append(obj).show();\n\n        this.messages[key] = { obj: obj, elements: [id] };\n\n        if (type == 'loading') {\n            this.messages[key].labels = [{ id: id, msg: msg }];\n        } else if (type != 'uploading') {\n            obj.click(function () {\n                return ref.hide_message(obj);\n            })\n                .attr('role', 'alert');\n        }\n\n        this.triggerEvent('message', {\n            message: msg, type: type, timeout: timeout, object: obj,\n        });\n\n        if (timeout > 0) {\n            setTimeout(function () {\n                ref.hide_message(id, type != 'loading');\n            }, timeout);\n        }\n\n        return id;\n    };\n\n    // Make a message to disappear\n    this.hide_message = function (obj, fade) {\n        // pass command to parent window\n        if (this.is_framed()) {\n            return parent.rcmail.hide_message(obj, fade);\n        }\n\n        if (!this.gui_objects.message) {\n            return;\n        }\n\n        var k, n, i, o, m = this.messages;\n\n        // Hide message by object, don't use for 'loading'!\n        if (typeof obj === 'object') {\n            o = $(obj);\n            k = o.data('key');\n            this.hide_message_object(o, fade);\n            if (m[k]) {\n                delete m[k];\n            }\n        }\n        // Hide message by id\n        else {\n            for (k in m) {\n                for (n in m[k].elements) {\n                    if (m[k] && m[k].elements[n] == obj) {\n                        m[k].elements.splice(n, 1);\n                        // hide DOM element if last instance is removed\n                        if (!m[k].elements.length) {\n                            this.hide_message_object(m[k].obj, fade);\n                            delete m[k];\n                        }\n                        // set pending action label for 'loading' message\n                        else if (k == 'loading') {\n                            for (i in m[k].labels) {\n                                if (m[k].labels[i].id == obj) {\n                                    delete m[k].labels[i];\n                                } else {\n                                    o = m[k].labels[i].msg;\n                                    $('div.content', m[k].obj).html(o);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    // hide message object and remove from the DOM\n    this.hide_message_object = function (o, fade) {\n        if (fade) {\n            o.fadeOut(600, function () {\n                $(this).remove();\n            });\n        } else {\n            o.hide().remove();\n        }\n    };\n\n    // remove all messages immediately\n    this.clear_messages = function () {\n        // pass command to parent window\n        if (this.is_framed()) {\n            return parent.rcmail.clear_messages();\n        }\n\n        var k, n, m = this.messages;\n\n        for (k in m) {\n            for (n in m[k].elements) {\n                if (m[k].obj) {\n                    this.hide_message_object(m[k].obj);\n                }\n            }\n        }\n\n        this.messages = {};\n    };\n\n    // display uploading message with progress indicator\n    // data should contain: name, total, current, percent, text\n    this.display_progress = function (data) {\n        if (!data || !data.name) {\n            return;\n        }\n\n        var msg = this.messages['progress' + data.name];\n\n        if (!data.label) {\n            data.label = this.get_label('uploadingmany');\n        }\n\n        if (!msg) {\n            if (!data.percent || data.percent < 100) {\n                this.display_message(data.label, 'uploading', 0, 'progress' + data.name);\n            }\n            return;\n        }\n\n        if (!data.total || data.percent >= 100) {\n            this.hide_message(msg.obj);\n            return;\n        }\n\n        if (data.text) {\n            data.label += ' ' + data.text;\n        }\n\n        msg.obj.text(data.label);\n    };\n\n    // open a jquery UI dialog with the given content\n    this.show_popup_dialog = function (content, title, buttons, options) {\n        // forward call to parent window\n        if (this.is_framed()) {\n            return parent.rcmail.show_popup_dialog(content, title, buttons, options);\n        }\n\n        var popup = $('<div class=\"popup\">');\n\n        if (typeof content === 'object') {\n            popup.append(content);\n            if ($(content).is('iframe')) {\n                popup.addClass('iframe');\n            }\n        } else {\n            popup.html(content);\n        }\n\n        // assign special classes to dialog buttons\n        var i = 0, fn = function (button, classes, idx) {\n            if (typeof button === 'function') {\n                button = {\n                    click: button,\n                    text: idx,\n                    class: classes,\n                };\n            } else {\n                buttons.class = classes;\n            }\n\n            return button;\n        };\n\n        if (options && options.button_classes) {\n            $.each(buttons, function (idx, button) {\n                var cl = options.button_classes[i];\n                if (cl) {\n                    buttons[idx] = fn(button, cl, idx);\n                }\n                i++;\n            });\n        }\n\n        options = $.extend({\n            title: title,\n            buttons: buttons,\n            modal: true,\n            resizable: true,\n            width: 500,\n            close: function (event, ui) {\n                $(this).remove();\n            },\n        }, options || {});\n\n        popup.dialog(options);\n\n        // Remember the jQuery instance (window), useful when closing the dialog\n        popup[0].jqref = $;\n\n        if (options.width) {\n            popup.width(options.width);\n        }\n        if (options.height) {\n            popup.height(options.height);\n        }\n\n        var dialog = popup.parent();\n\n        if (!options.noresize) {\n            // resize and center popup\n            var win = $(window), w = win.width(), h = win.height(),\n                width = popup.width(),\n                height = options.height || (popup[0].scrollHeight + 20),\n                titlebar_height = $('.ui-dialog-titlebar', dialog).outerHeight() || 0,\n                buttonpane_height = $('.ui-dialog-buttonpane', dialog).outerHeight() || 0,\n                padding = (parseInt(dialog.css('padding-top'), 10) + parseInt(popup.css('padding-top'), 10)) * 2;\n\n            popup.dialog('option', {\n                height: Math.min(h - 40, height + titlebar_height + buttonpane_height + padding + 2),\n                width: Math.min(w - 20, width + 28),\n            });\n        } else {\n            popup.css('width', 'auto');\n        }\n\n        // Don't propagate keyboard events to the UI below the dialog (#6055)\n        dialog.on('keydown keyup', function (e) {\n            e.stopPropagation();\n        });\n\n        // Add Enter key handler to the input, click the 'mainaction' button\n        dialog.find('input[data-submit]').on('keydown', function (e) {\n            if (e.which == 13) {\n                dialog.find('.ui-dialog-buttonpane button.mainaction').click();\n            }\n        });\n\n        this.triggerEvent('dialog-open', { obj: popup });\n\n        return popup;\n    };\n\n    // show_popup_dialog() wrapper for simple dialogs with action and Cancel buttons\n    this.simple_dialog = function (content, title, action_func, options) {\n        if (!options) {\n            options = {};\n        }\n\n        var title = this.get_label(title),\n            save_label = options.button || 'save',\n            save_class = options.button_class || save_label.replace(/^[^\\.]+\\./i, ''),\n            cancel_label = options.cancel_button || 'cancel',\n            cancel_class = options.cancel_class || cancel_label.replace(/^[^\\.]+\\./i, ''),\n            close_func = function (e, ui, dialog) {\n                if (!dialog) {\n                    dialog = this;\n                }\n\n                // The dialog might got open in the current window, but also any of its parents (#8627)\n                // We have to use the jQuery object that did invoke the dialog, set in show_popup_dialog()\n                dialog.jqref(dialog).dialog('close');\n                if (options.cancel_func) {\n                    options.cancel_func(e, ref);\n                }\n            },\n            buttons = [{\n                text: this.get_label(cancel_label),\n                class: cancel_class.replace(/close/i, 'cancel'),\n                click: close_func,\n            }];\n\n        if (!action_func) {\n            buttons[0].class += ' mainaction';\n        } else {\n            buttons.unshift({\n                text: this.get_label(save_label),\n                class: 'mainaction ' + save_class,\n                click: function (e, ui) {\n                    if (action_func(e, ref)) {\n                        close_func(e, ui, this);\n                    }\n                },\n            });\n        }\n\n        return this.show_popup_dialog(content, title, buttons, options);\n    };\n\n    // show_popup_dialog() wrapper for alert() type dialogs\n    this.alert_dialog = function (content, action, options) {\n        options = $.extend(options || {}, {\n            cancel_button: 'ok',\n            cancel_class: 'save',\n            cancel_func: action,\n            noresize: true,\n        });\n\n        return this.simple_dialog(content, options.title || 'alerttitle', null, options);\n    };\n\n    // simple_dialog() wrapper for confirm() type dialogs\n    this.confirm_dialog = function (content, button_label, action, options) {\n        var action_func = function (e, ref) {\n            action(e, ref); return true;\n        };\n\n        options = $.extend(options || {}, {\n            button: button_label || 'continue',\n            noresize: true,\n        });\n\n        return this.simple_dialog(content, options.title || 'confirmationtitle', action_func, options);\n    };\n\n    // enable/disable buttons for page shifting\n    this.set_page_buttons = function () {\n        this.enable_command('nextpage', 'lastpage', this.env.pagecount > this.env.current_page);\n        this.enable_command('previouspage', 'firstpage', this.env.current_page > 1);\n\n        this.update_pagejumper();\n    };\n\n    // mark a mailbox as selected and set environment variable\n    this.select_folder = function (name, prefix, encode) {\n        if (this.savedsearchlist) {\n            this.savedsearchlist.select('');\n        }\n\n        if (this.treelist) {\n            this.treelist.select(name);\n        } else if (this.gui_objects.folderlist) {\n            $('li.selected', this.gui_objects.folderlist).removeClass('selected');\n            $(this.get_folder_li(name, prefix, encode)).addClass('selected');\n\n            // trigger event hook\n            this.triggerEvent('selectfolder', { folder: name, prefix: prefix });\n        }\n    };\n\n    // adds a class to selected folder\n    this.mark_folder = function (name, class_name, prefix, encode) {\n        $(this.get_folder_li(name, prefix, encode)).addClass(class_name);\n        this.triggerEvent('markfolder', { folder: name, mark: class_name, status: true });\n    };\n\n    // adds a class to selected folder\n    this.unmark_folder = function (name, class_name, prefix, encode) {\n        $(this.get_folder_li(name, prefix, encode)).removeClass(class_name);\n        this.triggerEvent('markfolder', { folder: name, mark: class_name, status: false });\n    };\n\n    // helper method to find a folder list item\n    this.get_folder_li = function (name, prefix, encode) {\n        if (!prefix) {\n            prefix = 'rcmli';\n        }\n\n        if (this.gui_objects.folderlist) {\n            name = this.html_identifier(name, encode);\n            return document.getElementById(prefix + name);\n        }\n    };\n\n    // for reordering column array (Konqueror workaround)\n    // and for setting some message list global variables\n    this.set_message_coltypes = function (cols, repl, smart_col) {\n        // update list mode columns list\n        this.env.listcols = cols;\n\n        // reset message list cols\n        this.msglist_setup(this.env.layout);\n\n        var list = this.message_list,\n            thead = list ? list.thead : null,\n            repl, cell, col, c, n, len, tr,\n            listcols = this.env.msglist_cols;\n\n        if (!this.env.coltypes) {\n            this.env.coltypes = {};\n        }\n\n        // replace old column headers\n        if (thead) {\n            if (repl) {\n                thead.innerHTML = '';\n                tr = document.createElement('tr');\n\n                for (n in listcols) {\n                    c = listcols[n];\n                    cell = document.createElement('th');\n                    cell.innerHTML = repl[c].html || '';\n                    if (repl[c].id) {\n                        cell.id = repl[c].id;\n                    }\n                    if (repl[c].className) {\n                        cell.className = repl[c].className;\n                    }\n                    tr.appendChild(cell);\n                }\n\n                if (list.checkbox_selection) {\n                    list.insert_checkbox(tr, 'thead');\n                }\n\n                thead.appendChild(tr);\n            }\n\n            for (n = 0, len = listcols.length; n < len; n++) {\n                col = listcols[list.checkbox_selection ? n - 1 : n];\n                if ((cell = thead.rows[0].cells[n]) && (col == 'from' || col == 'to' || col == 'fromto')) {\n                    $(cell).attr('rel', col).find('span,a').text(this.get_label(col == 'fromto' ? smart_col : col));\n                }\n            }\n        }\n\n        this.env.subject_col = null;\n        this.env.flagged_col = null;\n        this.env.status_col = null;\n\n        if (this.env.coltypes.folder) {\n            this.env.coltypes.folder.hidden = !(this.env.search_request || this.env.search_id) || this.env.search_scope == 'base';\n        }\n\n        if ((n = $.inArray('subject', listcols)) >= 0) {\n            this.env.subject_col = n;\n            if (list) {\n                list.subject_col = n;\n            }\n        }\n        if ((n = $.inArray('flag', listcols)) >= 0) {\n            this.env.flagged_col = n;\n        }\n        if ((n = $.inArray('status', listcols)) >= 0) {\n            this.env.status_col = n;\n        }\n\n        if (list) {\n            list.hide_column('folder', (this.env.coltypes.folder && this.env.coltypes.folder.hidden) || $.inArray('folder', listcols) < 0);\n            list.init_header();\n        }\n    };\n\n    // replace content of row count display\n    this.set_rowcount = function (text, mbox) {\n        // #1487752\n        if (mbox && mbox != this.env.mailbox) {\n            return false;\n        }\n\n        $(this.gui_objects.countdisplay).html(text);\n\n        // update page navigation buttons\n        this.set_page_buttons();\n    };\n\n    // replace content of mailboxname display\n    this.set_mailboxname = function (content) {\n        if (this.gui_objects.mailboxname && content) {\n            this.gui_objects.mailboxname.innerHTML = content;\n        }\n    };\n\n    // replace content of quota display\n    this.set_quota = function (content) {\n        if (!content || !content.total) {\n            return;\n        }\n        if (this.gui_objects.quotadisplay && content.type == 'text') {\n            $(this.gui_objects.quotadisplay).text((content.percent || 0) + '%').attr('title', content.title || '');\n        }\n\n        this.triggerEvent('setquota', content);\n        this.env.quota_content = content;\n    };\n\n    // update trash folder state\n    this.set_trash_count = function (count) {\n        this[(count ? 'un' : '') + 'mark_folder'](this.env.trash_mailbox, 'empty', '', true);\n    };\n\n    // update the mailboxlist\n    this.set_unread_count = function (mbox, count, set_title, mark) {\n        if (!this.gui_objects.mailboxlist) {\n            return false;\n        }\n\n        this.env.unread_counts[mbox] = count;\n        this.set_unread_count_display(mbox, set_title);\n\n        if (mark) {\n            this.mark_folder(mbox, mark, '', true);\n        } else if (!count) {\n            this.unmark_folder(mbox, 'recent', '', true);\n        }\n\n        this.mark_all_read_state();\n        this.triggerEvent('set-unread-count', { mbox: mbox, count: count });\n    };\n\n    // update the mailbox count display\n    this.set_unread_count_display = function (mbox, set_title) {\n        var reg, link, text_obj, item, mycount, childcount, div;\n\n        if (item = this.get_folder_li(mbox, '', true)) {\n            mycount = this.env.unread_counts[mbox] ? this.env.unread_counts[mbox] : 0;\n            link = $(item).children('a').eq(0);\n            text_obj = link.children('span.unreadcount');\n            if (!text_obj.length && mycount) {\n                text_obj = $('<span>').addClass('unreadcount skip-content').appendTo(link);\n            }\n            reg = /\\s+\\([0-9]+\\)$/i;\n\n            childcount = 0;\n            if ((div = item.getElementsByTagName('div')[0])\n                && div.className.match(/collapsed/)\n            ) {\n                // add children's counters\n                for (var k in this.env.unread_counts) {\n                    if (k.startsWith(mbox + this.env.delimiter)) {\n                        childcount += this.env.unread_counts[k];\n                    }\n                }\n            }\n\n            if (mycount && text_obj.length) {\n                text_obj.html(this.env.unreadwrap.replace(/%[sd]/, mycount));\n            } else if (text_obj.length) {\n                text_obj.remove();\n            }\n\n            // set parent's display\n            reg = new RegExp(RegExp.escape(this.env.delimiter) + '[^' + RegExp.escape(this.env.delimiter) + ']+$');\n            if (mbox.match(reg)) {\n                this.set_unread_count_display(mbox.replace(reg, ''), false);\n            }\n\n            // set the right classes\n            if ((mycount + childcount) > 0) {\n                $(item).addClass('unread');\n            } else {\n                $(item).removeClass('unread');\n            }\n        }\n\n        // set unread count to window title\n        reg = /^\\([0-9]+\\)\\s+/i;\n        if (set_title && document.title) {\n            var new_title = '',\n                doc_title = String(document.title);\n\n            if (mycount && doc_title.match(reg)) {\n                new_title = doc_title.replace(reg, '(' + mycount + ') ');\n            } else if (mycount) {\n                new_title = '(' + mycount + ') ' + doc_title;\n            } else {\n                new_title = doc_title.replace(reg, '');\n            }\n\n            this.set_pagetitle(new_title);\n        }\n    };\n\n    // display fetched raw headers\n    this.set_headers = function (content) {\n        if (this.gui_objects.all_headers_box && content) {\n            $(this.gui_objects.all_headers_box).html(content).show();\n        }\n    };\n\n    // display all-headers row and fetch raw message headers\n    this.show_headers = function (props, elem) {\n        if (!this.gui_objects.all_headers_row || !this.gui_objects.all_headers_box || !this.env.uid) {\n            return;\n        }\n\n        $(elem).removeClass('show-headers').addClass('hide-headers');\n        $(this.gui_objects.all_headers_row).show();\n        elem.onclick = function () {\n            ref.command('hide-headers', '', elem);\n        };\n\n        // fetch headers only once\n        if (!this.gui_objects.all_headers_box.innerHTML) {\n            this.http_request('headers', { _uid: this.env.uid, _mbox: this.env.mailbox },\n                this.display_message('', 'loading')\n            );\n        }\n    };\n\n    // hide all-headers row\n    this.hide_headers = function (props, elem) {\n        if (!this.gui_objects.all_headers_row || !this.gui_objects.all_headers_box) {\n            return;\n        }\n\n        $(elem).removeClass('hide-headers').addClass('show-headers');\n        $(this.gui_objects.all_headers_row).hide();\n        elem.onclick = function () {\n            ref.command('show-headers', '', elem);\n        };\n    };\n\n    // create folder selector popup\n    this.folder_selector = function (event, callback) {\n        this.entity_selector('folder-selector', callback, this.env.mailboxes_list, function (obj, a) {\n            var folder = ref.env.mailboxes[obj],\n                id = folder.id,\n                depth = folder.level || 0,\n                row = $('<li>');\n\n            if (folder.virtual) {\n                a.addClass('virtual').attr({ 'aria-disabled': 'true', tabindex: '-1' });\n            } else {\n                a.addClass('active').data('id', folder.id);\n            }\n\n            if (folder.class) {\n                row.addClass(folder.class);\n            }\n\n            // set indentation level\n            a.css('padding-left', depth ? (depth * 16) + 'px' : 0);\n\n            // add folder name element\n            a.append($('<span>').text(folder.name));\n\n            return row.append(a);\n        }, event);\n    };\n\n    // create addressbook selector popup\n    this.addressbook_selector = function (event, callback) {\n        // build addressbook + groups list\n        var combined_sources = [];\n\n        // check we really need it before processing\n        if (!this.entity_selectors['addressbook-selector']) {\n            $.each(this.env.address_sources, function () {\n                if (!this.readonly) {\n                    var source = this;\n                    combined_sources.push(source);\n\n                    $.each(ref.env.contactgroups, function () {\n                        if (source.id === this.source) {\n                            combined_sources.push(this);\n                        }\n                    });\n                }\n            });\n        }\n\n        this.entity_selector('addressbook-selector', callback, combined_sources, function (obj, a) {\n            if (obj.type == 'group') {\n                a.attr('rel', obj.source + ':' + obj.id)\n                    .addClass('contactgroup active')\n                    .data({ source: obj.source, gid: obj.id, id: obj.source + ':' + obj.id })\n                    .css('padding-left', '16px');\n            } else {\n                a.addClass('addressbook active').data('id', obj.id);\n            }\n            a.append($('<span>').text(obj.name));\n\n            return $('<li>').append(a);\n        }, event);\n    };\n\n    // create contactgroup selector popup\n    this.contactgroup_selector = function (event, callback) {\n        this.entity_selector('contactgroup-selector', callback, this.env.contactgroups, function (obj, a) {\n            if (ref.env.source === obj.source) {\n                a.addClass('contactgroup active')\n                    .data({ id: obj.id })\n                    .append($('<span>').text(obj.name));\n\n                return $('<li>').append(a);\n            }\n        }, event);\n    };\n\n    // create selector popup (eg for folders or address books), position and display it\n    this.entity_selector = function (name, click_callback, entity_list, list_callback, event) {\n        var container = this.entity_selectors[name];\n\n        if (!container) {\n            var rows = [],\n                container = $('<div>').attr('id', name).addClass('popupmenu'),\n                ul = $('<ul>').addClass('toolbarmenu menu'),\n                link = document.createElement('a');\n\n            link.href = '#';\n            link.className = 'icon';\n\n            // loop over entity list\n            $.each(entity_list, function (i) {\n                var a = $(link.cloneNode(false)).attr('rel', this.id);\n                rows.push(list_callback(this, a, i));\n            });\n\n            ul.append(rows).appendTo(container);\n\n            // temporarily show element to calculate its size\n            container.css({ left: '-1000px', top: '-1000px' })\n                .appendTo(document.body).show();\n\n            // set max-height if the list is long\n            if (rows.length > 10) {\n                container.css('max-height', $('li', container)[0].offsetHeight * 10 + 9);\n            }\n\n            // register delegate event handler for folder item clicks\n            container.on('click', 'a.active', function (e) {\n                container.data('callback')($(this).data('id'), this);\n            });\n\n            this.entity_selectors[name] = container;\n        }\n\n        container.data('callback', click_callback);\n\n        // position menu on the screen\n        this.show_menu(name, true, event);\n    };\n\n    this.destroy_entity_selector = function (name) {\n        $('#' + name).remove();\n        delete this.entity_selectors[name];\n        this.triggerEvent('destroy-entity-selector', { name: name });\n    };\n\n    /***********************************************/\n    /*             popup menu functions            */\n    /***********************************************/\n\n    // Show/hide a specific popup menu\n    this.show_menu = function (prop, show, event) {\n        var name = typeof prop === 'object' ? prop.menu : prop,\n            obj = $('#' + name),\n            ref = event && event.target ? $(event.target) : $(obj.attr('rel') || '#' + name + 'link'),\n            keyboard = rcube_event.is_keyboard(event),\n            align = obj.attr('data-align') || '',\n            stack = false;\n\n        // find \"real\" button element\n        if (ref.get(0).tagName != 'A' && ref.closest('a').length) {\n            ref = ref.closest('a');\n        }\n\n        if (typeof prop === 'string') {\n            prop = { menu: name };\n        }\n\n        // let plugins or skins provide the menu element\n        if (!obj.length) {\n            obj = this.triggerEvent('menu-get', { name: name, props: prop, originalEvent: event });\n        }\n\n        if (!obj || !obj.length) {\n            // just delegate the action to subscribers\n            return this.triggerEvent(show === false ? 'menu-close' : 'menu-open', { name: name, props: prop, originalEvent: event });\n        }\n\n        // move element to top for proper absolute positioning\n        obj.appendTo(document.body);\n\n        if (typeof show === 'undefined') {\n            show = obj.is(':visible') ? false : true;\n        }\n\n        if (show && ref.length) {\n            var win = $(window),\n                pos = ref.offset(),\n                above = align.indexOf('bottom') >= 0;\n\n            stack = ref.attr('role') == 'menuitem' || ref.closest('[role=menuitem]').length > 0;\n\n            ref.offsetWidth = ref.outerWidth();\n            ref.offsetHeight = ref.outerHeight();\n            if (!above && pos.top + ref.offsetHeight + obj.height() > win.height()) {\n                above = true;\n            }\n            if (align.indexOf('right') >= 0) {\n                pos.left = pos.left + ref.outerWidth() - obj.width();\n            } else if (stack) {\n                pos.left = pos.left + ref.offsetWidth - 5;\n                pos.top -= ref.offsetHeight;\n            }\n            if (pos.left + obj.width() > win.width()) {\n                pos.left = win.width() - obj.width() - 12;\n            }\n            pos.top = Math.max(0, pos.top + (above ? -obj.height() : ref.offsetHeight));\n            obj.css({ left: pos.left + 'px', top: pos.top + 'px' });\n        }\n\n        // add menu to stack\n        if (show) {\n            // truncate stack down to the one containing the ref link\n            for (var i = this.menu_stack.length - 1; stack && i >= 0; i--) {\n                if (!$(ref).parents('#' + this.menu_stack[i]).length && $(event.target).parent().attr('role') != 'menuitem') {\n                    this.hide_menu(this.menu_stack[i], event);\n                }\n            }\n            if (stack && this.menu_stack.length) {\n                obj.data('parent', $.last(this.menu_stack));\n                obj.css('z-index', ($('#' + $.last(this.menu_stack)).css('z-index') || 0) + 1);\n            } else if (!stack && this.menu_stack.length) {\n                this.hide_menu(this.menu_stack[0], event);\n            }\n\n            obj.show().attr('aria-hidden', 'false').data('opener', ref.attr('aria-expanded', 'true').get(0));\n            this.triggerEvent('menu-open', {\n                name: name, obj: obj, props: prop, originalEvent: event,\n            });\n            this.menu_stack.push(name);\n\n            this.menu_keyboard_active = show && keyboard;\n            if (this.menu_keyboard_active) {\n                this.focused_menu = name;\n                obj.find('a,input:not(:disabled)').not('[aria-disabled=true]').first().focus();\n            }\n        } else { // close menu\n            this.hide_menu(name, event);\n        }\n\n        return show;\n    };\n\n    // hide the given popup menu (and its children)\n    this.hide_menu = function (name, event) {\n        if (!this.menu_stack.length) {\n            // delegate to subscribers\n            this.triggerEvent('menu-close', { name: name, props: { menu: name }, originalEvent: event });\n            return;\n        }\n\n        var obj, keyboard = rcube_event.is_keyboard(event);\n        for (var j = this.menu_stack.length - 1; j >= 0; j--) {\n            obj = $('#' + this.menu_stack[j]).hide().attr('aria-hidden', 'true').data('parent', false);\n            this.triggerEvent('menu-close', {\n                name: this.menu_stack[j], obj: obj, props: { menu: this.menu_stack[j] }, originalEvent: event,\n            });\n            if (this.menu_stack[j] == name) {\n                j = -1; // stop loop\n                if (obj.data('opener')) {\n                    $(obj.data('opener')).attr('aria-expanded', 'false');\n                    if (keyboard) {\n                        obj.data('opener').focus();\n                    }\n                }\n            }\n            this.menu_stack.pop();\n        }\n\n        // focus previous menu in stack\n        if (this.menu_stack.length && keyboard) {\n            this.menu_keyboard_active = true;\n            this.focused_menu = $.last(this.menu_stack);\n            if (!obj || !obj.data('opener')) {\n                $('#' + this.focused_menu).find('a,input:not(:disabled)').not('[aria-disabled=true]').first().focus();\n            }\n        } else {\n            this.focused_menu = null;\n            this.menu_keyboard_active = false;\n        }\n    };\n\n    // position a menu element on the screen in relation to other object\n    this.element_position = function (element, obj) {\n        var obj = $(obj), win = $(window),\n            width = obj.outerWidth(),\n            height = obj.outerHeight(),\n            menu_pos = obj.data('menu-pos'),\n            win_height = win.height(),\n            elem_height = $(element).height(),\n            elem_width = $(element).width(),\n            pos = obj.offset(),\n            top = pos.top,\n            left = pos.left + width;\n\n        if (menu_pos == 'bottom') {\n            top += height;\n            left -= width;\n        } else {\n            left -= 5;\n        }\n\n        if (top + elem_height > win_height) {\n            top -= elem_height - height;\n            if (top < 0) {\n                top = Math.max(0, (win_height - elem_height) / 2);\n            }\n        }\n\n        if (left + elem_width > win.width()) {\n            left -= elem_width + width;\n        }\n\n        element.css({ left: left + 'px', top: top + 'px' });\n    };\n\n    // initialize HTML editor\n    this.editor_init = function (config, id) {\n        this.editor = new rcube_text_editor(config || this.env.editor_config, id);\n    };\n\n\n    /********************************************************/\n    /*           html to text conversion functions          */\n    /********************************************************/\n\n    this.html2plain = function (html, func) {\n        return this.format_converter(html, 'html', func);\n    };\n\n    this.plain2html = function (plain, func) {\n        return this.format_converter(plain, 'plain', func);\n    };\n\n    this.format_converter = function (text, format, func) {\n        // warn the user (if converted content is not empty)\n        if (!text\n            || (format == 'html' && !(text.replace(/<[^>]+>|&nbsp;|\\u00C2\\u00A0|\\s/g, '')).length)\n            || (format != 'html' && !(text.replace(/\\u00C2\\u00A0|\\s/g, '')).length)\n        ) {\n            // without setTimeout() here, textarea is filled with initial (onload) content\n            if (func) {\n                setTimeout(function () {\n                    func('');\n                }, 50);\n            }\n            return true;\n        }\n\n        var confirmed = this.env.editor_warned || confirm(this.get_label('editorwarning'));\n\n        this.env.editor_warned = true;\n\n        if (!confirmed) {\n            return false;\n        }\n\n        var url = '?_task=utils&_action=' + (format == 'html' ? 'html2text' : 'text2html'),\n            lock = this.set_busy(true, 'converting');\n\n        $.ajax({\n            type: 'POST',\n            url: url,\n            data: text,\n            contentType: 'application/octet-stream',\n            error: function (o, status, err) {\n                ref.http_error(o, status, err, lock);\n            },\n            success: function (data) {\n                ref.set_busy(false, null, lock);\n                if (func) {\n                    func(data);\n                }\n            },\n        });\n\n        return true;\n    };\n\n\n    /********************************************************/\n    /*                 Remote request methods               */\n    /********************************************************/\n\n    // compose a valid url with the given parameters\n    this.url = function (action, query) {\n        var querystring = typeof query === 'string' ? query : '';\n\n        if (typeof action !== 'string') {\n            query = action;\n        } else if (!query || typeof query !== 'object') {\n            query = {};\n        }\n\n        if (action) {\n            query._action = action;\n        } else if (this.env.action) {\n            query._action = this.env.action;\n        }\n\n        var url = this.env.comm_path, k, param = {};\n\n        // overwrite task name\n        if (action && action.match(/([a-z0-9_-]+)\\/([a-z0-9-_.]+)/)) {\n            query._action = RegExp.$2;\n            url = url.replace(/\\_task=[a-z0-9_-]+/, '_task=' + RegExp.$1);\n        }\n\n        // force _framed=0\n        if (query._framed === 0) {\n            url = url.replace('&_framed=1', '');\n            query._framed = null;\n        }\n\n        // remove undefined values\n        for (k in query) {\n            if (query[k] !== undefined && query[k] !== null) {\n                param[k] = query[k];\n            }\n        }\n\n        if (param = $.param(param)) {\n            url += (url.indexOf('?') > -1 ? '&' : '?') + param;\n        }\n\n        if (querystring) {\n            url += (url.indexOf('?') > -1 ? '&' : '?') + querystring;\n        }\n\n        return url;\n    };\n\n    this.redirect = function (url, lock) {\n        if (lock !== false) {\n            this.set_busy(true, 'loading');\n        }\n\n        if (this.is_framed()) {\n            url = url.replace(/&_framed=1/, '');\n            parent.rcmail.redirect(url, lock);\n        } else {\n            if (this.env.extwin) {\n                if (typeof url === 'string') {\n                    url += (url.indexOf('?') < 0 ? '?' : '&') + '_extwin=1';\n                } else {\n                    url._extwin = 1;\n                }\n            }\n            this.location_href(url, window);\n        }\n    };\n\n    this.goto_url = function (action, query, lock, secure) {\n        var url = this.url(action, query);\n        if (secure) {\n            url = this.secure_url(url);\n        }\n        this.redirect(url, lock);\n    };\n\n    this.location_href = function (url, target, frame) {\n        if (frame) {\n            this.lock_frame(target);\n        }\n\n        if (typeof url === 'object') {\n            url = this.env.comm_path + '&' + $.param(url);\n        }\n\n        // simulate real link click to force IE to send referer header\n        if (bw.ie && target == window) {\n            $('<a>').attr('href', url).appendTo(document.body).get(0).click();\n        } else {\n            target.location.href = url;\n        }\n\n        // reset keep-alive interval\n        this.start_keepalive();\n    };\n\n    // update browser location to remember current view\n    this.update_state = function (query) {\n        if (window.history.replaceState) {\n            try {\n                // This may throw security exception in Firefox (#5400)\n                window.history.replaceState({}, document.title, rcmail.url('', query));\n            } catch (e) {\n                // ignore\n            }\n        }\n    };\n\n    // send a http request to the server\n    this.http_request = function (action, data, lock, type) {\n        if (type != 'POST') {\n            type = 'GET';\n        }\n\n        if (typeof data !== 'object') {\n            data = rcube_parse_query(data);\n        }\n\n        data._remote = 1;\n        data._unlock = lock ? lock : 0;\n\n        // trigger plugin hook\n        var result = this.triggerEvent('request' + action, data);\n\n        // abort if one of the handlers returned false\n        if (result === false) {\n            if (data._unlock) {\n                this.set_busy(false, null, data._unlock);\n            }\n            return false;\n        }\n\n        if (result && result.getResponseHeader) {\n            return result;\n        }\n\n        if (result !== undefined) {\n            data = result;\n            if (data._action) {\n                action = data._action;\n                delete data._action;\n            }\n        }\n\n        var url = this.url(action);\n\n        // reset keep-alive interval\n        this.start_keepalive();\n\n        // send request\n        return $.ajax({\n            type: type,\n            url: url,\n            data: data,\n            dataType: 'json',\n            success: function (data) {\n                ref.http_response(data);\n            },\n            error: function (o, status, err) {\n                ref.http_error(o, status, err, lock, action);\n            },\n        });\n    };\n\n    // send a http GET request to the server\n    this.http_get = this.http_request;\n\n    // send a http POST request to the server\n    this.http_post = function (action, data, lock) {\n        return this.http_request(action, data, lock, 'POST');\n    };\n\n    // aborts ajax request\n    this.abort_request = function (r) {\n        if (r.request) {\n            r.request.abort();\n        }\n        if (r.lock) {\n            this.set_busy(false, null, r.lock);\n        }\n    };\n\n    // handle HTTP response\n    this.http_response = function (response) {\n        if (!response) {\n            return;\n        }\n\n        if (response.unlock) {\n            this.set_busy(false, null, response.unlock);\n        }\n\n        this.triggerEvent('responsebefore', { response: response });\n        this.triggerEvent('responsebefore' + response.action, { response: response });\n\n        // set env vars\n        if (response.env) {\n            this.set_env(response.env);\n        }\n\n        var i;\n\n        // we have labels to add\n        if (typeof response.texts === 'object') {\n            for (i in response.texts) {\n                if (typeof response.texts[i] === 'string') {\n                    this.add_label(i, response.texts[i]);\n                }\n            }\n        }\n\n        // if we get javascript code from server -> execute it\n        if (response.exec) {\n            eval(response.exec);\n        }\n\n        // execute callback functions of plugins\n        if (response.callbacks && response.callbacks.length) {\n            for (i = 0; i < response.callbacks.length; i++) {\n                this.triggerEvent(response.callbacks[i][0], response.callbacks[i][1]);\n            }\n        }\n\n        // process the response data according to the sent action\n        switch (response.action) {\n            case 'mark':\n                // Mark the message as Seen also in the opener/parent\n                if ((this.env.action == 'show' || this.env.action == 'preview') && this.env.last_flag == 'SEEN') {\n                    this.set_unread_message(this.env.uid, this.env.mailbox);\n                }\n\n                break;\n            case 'delete':\n                if (this.task == 'addressbook') {\n                    var sid, uid = this.contact_list.get_selection(), writable = false;\n\n                    if (uid && this.contact_list.rows[uid]) {\n                        // search results, get source ID from record ID\n                        if (this.env.source == '') {\n                            sid = String(uid).replace(/^[^-]+-/, '');\n                            writable = sid && this.env.address_sources[sid] && !this.env.address_sources[sid].readonly;\n                        } else {\n                            writable = !this.env.address_sources[this.env.source].readonly;\n                        }\n                    }\n                    this.enable_command('delete', 'edit', writable);\n                    this.enable_command('export', (this.contact_list && this.contact_list.rowcount > 0));\n                    this.enable_command('export-selected', 'print', false);\n                }\n\n            case 'move':\n                if (this.env.action == 'show') {\n                    // re-enable commands on move/delete error\n                    this.enable_command(this.env.message_commands, true);\n                    if (!this.env.list_post) {\n                        this.enable_command('reply-list', false);\n                    }\n                } else if (this.task == 'addressbook') {\n                    this.triggerEvent('listupdate', { list: this.contact_list, folder: this.env.source, rowcount: this.contact_list.rowcount });\n                }\n\n            case 'purge':\n            case 'expunge':\n                if (this.task == 'mail') {\n                    if (!this.env.exists) {\n                        // clear preview pane content\n                        if (this.env.contentframe) {\n                            this.show_contentframe(false);\n                        }\n                        // disable commands useless when mailbox is empty\n                        this.enable_command(this.env.message_commands, 'purge', 'expunge',\n                            'select-all', 'select-none', 'expand-all', 'expand-unread', 'collapse-all', false);\n                    }\n                    if (this.message_list) {\n                        this.triggerEvent('listupdate', { list: this.message_list, folder: this.env.mailbox, rowcount: this.message_list.rowcount });\n                    }\n                }\n\n                break;\n            case 'refresh':\n            case 'check-recent':\n                // update message flags\n                $.each(this.env.recent_flags || {}, function (uid, flags) {\n                    ref.set_message(uid, 'deleted', flags.deleted);\n                    ref.set_message(uid, 'replied', flags.answered);\n                    ref.set_message(uid, 'unread', !flags.seen);\n                    ref.set_message(uid, 'forwarded', flags.forwarded);\n                    ref.set_message(uid, 'flagged', flags.flagged);\n                });\n                delete this.env.recent_flags;\n\n            case 'getunread':\n            case 'search':\n                this.env.qsearch = null;\n            case 'list':\n                if (this.task == 'mail') {\n                    var is_multifolder = this.is_multifolder_listing(),\n                        list = this.message_list,\n                        uid = this.env.list_uid;\n\n                    this.enable_command('show', 'select-all', 'select-none', this.env.messagecount > 0);\n                    this.enable_command('expunge', 'purge', this.env.exists && !is_multifolder);\n                    this.enable_command('import-messages', !is_multifolder);\n                    this.enable_command('expand-all', 'expand-unread', 'collapse-all', this.env.threading && this.env.messagecount && !is_multifolder);\n\n                    if (list) {\n                        if (response.action == 'list' || response.action == 'search') {\n                            // highlight message row when we're back from message page\n                            if (uid) {\n                                if (uid === 'FIRST') {\n                                    uid = list.get_first_row();\n                                } else if (uid === 'LAST') {\n                                    uid = list.get_last_row();\n                                } else if (!list.rows[uid]) {\n                                    uid += '-' + this.env.mailbox;\n                                }\n\n                                if (uid && list.rows[uid]) {\n                                    list.select(uid);\n                                }\n\n                                delete this.env.list_uid;\n                            }\n\n                            this.enable_command('set-listmode', this.env.threads && !is_multifolder);\n                            if (list.rowcount > 0 && !$(document.activeElement).is('input,textarea')) {\n                                list.focus();\n                            }\n\n                            // trigger 'select' so all dependent actions update its state\n                            // e.g. plugins use this event to activate buttons (#1490647)\n                            list.triggerEvent('select');\n                        }\n\n                        if (response.action != 'getunread') {\n                            this.triggerEvent('listupdate', { list: list, folder: this.env.mailbox, rowcount: list.rowcount });\n                        }\n                    }\n                } else if (this.task == 'addressbook') {\n                    var list = this.contact_list,\n                        uid = this.env.list_uid;\n\n                    this.enable_command('export', 'select-all', 'select-none', (list && list.rowcount > 0));\n\n                    if (response.action == 'list' || response.action == 'search') {\n                        this.enable_command('search-create', this.env.source == '');\n                        this.enable_command('search-delete', this.env.search_id);\n                        this.update_group_commands();\n\n                        if (list && uid) {\n                            if (uid === 'FIRST') {\n                                uid = list.get_first_row();\n                            } else if (uid === 'LAST') {\n                                uid = list.get_last_row();\n                            }\n\n                            if (uid && list.rows[uid]) {\n                                list.select(uid);\n                            }\n\n                            delete this.env.list_uid;\n\n                            // trigger 'select' so all dependent actions update its state\n                            list.triggerEvent('select');\n                        }\n\n                        if (list.rowcount > 0 && !$(document.activeElement).is('input,textarea')) {\n                            list.focus();\n                        }\n\n                        this.triggerEvent('listupdate', { list: list, folder: this.env.source, rowcount: list.rowcount });\n                    }\n                }\n\n                break;\n            case 'list-contacts':\n            case 'search-contacts':\n                if (this.contact_list) {\n                    if (this.contact_list.rowcount > 0) {\n                        this.contact_list.focus();\n                    }\n                    this.triggerEvent('listupdate', { list: this.contact_list, rowcount: this.contact_list.rowcount });\n                }\n\n                break;\n        }\n\n        if (response.unlock) {\n            this.hide_message(response.unlock);\n        }\n\n        this.triggerEvent('responseafter', { response: response });\n        this.triggerEvent('responseafter' + response.action, { response: response });\n\n        // reset keep-alive interval\n        this.start_keepalive();\n    };\n\n    // handle HTTP request errors\n    this.http_error = function (request, status, err, lock, action) {\n        var errmsg = request.statusText;\n\n        this.set_busy(false, null, lock);\n        request.abort();\n\n        // don't display error message on page unload (#1488547)\n        if (this.unload) {\n            return;\n        }\n\n        if (request.status && errmsg) {\n            this.display_message(this.get_label('servererror') + ' (' + errmsg + ')', 'error');\n        } else if (status == 'timeout') {\n            this.display_message('requesttimedout', 'error');\n        } else if (request.status == 0 && status != 'abort') {\n            this.display_message('connerror', 'error');\n        }\n\n        // redirect to url specified in location header if not empty\n        var location_url = request.getResponseHeader('Location');\n        if (location_url && this.env.action != 'compose') { // don't redirect on compose screen, contents might get lost (#1488926)\n            this.redirect(location_url);\n        }\n\n        // 403 Forbidden response (CSRF prevention) - reload the page.\n        // In case there's a new valid session it will be used, otherwise\n        // login form will be presented (#1488960).\n        if (request.status == 403) {\n            (this.is_framed() ? parent : window).location.reload();\n            return;\n        }\n\n        // re-send keep-alive requests after 30 seconds\n        if (action == 'keep-alive') {\n            setTimeout(function () {\n                ref.keep_alive(); ref.start_keepalive();\n            }, 30000);\n        }\n    };\n\n    // handler for session errors detected on the server\n    this.session_error = function (redirect_url) {\n        this.env.server_error = 401;\n\n        // save message in local storage and do not redirect\n        if (this.env.action == 'compose') {\n            this.save_compose_form_local();\n            this.compose_skip_unsavedcheck = true;\n            // stop keep-alive and refresh processes\n            this.env.session_lifetime = 0;\n            if (this._keepalive) {\n                clearInterval(this._keepalive);\n            }\n            if (this._refresh) {\n                clearInterval(this._refresh);\n            }\n        } else if (redirect_url) {\n            setTimeout(function () {\n                ref.redirect(redirect_url, true);\n            }, 2000);\n        }\n    };\n\n    // callback when an iframe finished loading\n    this.iframe_loaded = function (unlock) {\n        if (!unlock) {\n            unlock = this.env.frame_lock;\n        }\n\n        this.set_busy(false, null, unlock);\n\n        if (this.submit_timer) {\n            clearTimeout(this.submit_timer);\n        }\n    };\n\n    /**\n     Send multi-threaded parallel HTTP requests to the server for a list if items.\n     The string '%' in either a GET query or POST parameters will be replaced with the respective item value.\n     This is the argument object expected: {\n         items: ['foo','bar','gna'],      // list of items to send requests for\n         action: 'task/some-action',      // Roundcube action to call\n         query: { q:'%s' },               // GET query parameters\n         postdata: { source:'%s' },       // POST data (sends a POST request if present)\n         threads: 3,                      // max. number of concurrent requests\n         onresponse: function(data){ },   // Callback function called for every response received from server\n         whendone: function(alldata){ }   // Callback function called when all requests have been sent\n     }\n     */\n    this.multi_thread_http_request = function (prop) {\n        var i, item, reqid = new Date().getTime(),\n            threads = prop.threads || 1;\n\n        prop.reqid = reqid;\n        prop.running = 0;\n        prop.requests = [];\n        prop.result = [];\n        prop._items = $.extend([], prop.items); // copy items\n\n        if (!prop.lock) {\n            prop.lock = this.display_message('', 'loading');\n        }\n\n        // add the request arguments to the jobs pool\n        this.http_request_jobs[reqid] = prop;\n\n        // start n threads\n        for (i = 0; i < threads; i++) {\n            item = prop._items.shift();\n            if (item === undefined) {\n                break;\n            }\n\n            prop.running++;\n            prop.requests.push(this.multi_thread_send_request(prop, item));\n        }\n\n        return reqid;\n    };\n\n    // helper method to send an HTTP request with the given iterator value\n    this.multi_thread_send_request = function (prop, item) {\n        var k, postdata, query;\n\n        // replace %s in post data\n        if (prop.postdata) {\n            postdata = {};\n            for (k in prop.postdata) {\n                postdata[k] = String(prop.postdata[k]).replace('%s', item);\n            }\n            postdata._reqid = prop.reqid;\n        }\n        // replace %s in query\n        else if (typeof prop.query === 'string') {\n            query = prop.query.replace('%s', item);\n            query += '&_reqid=' + prop.reqid;\n        } else if (typeof prop.query === 'object' && prop.query) {\n            query = {};\n            for (k in prop.query) {\n                query[k] = String(prop.query[k]).replace('%s', item);\n            }\n            query._reqid = prop.reqid;\n        }\n\n        // send HTTP GET or POST request\n        return postdata ? this.http_post(prop.action, postdata) : this.http_request(prop.action, query);\n    };\n\n    // callback function for multi-threaded http responses\n    this.multi_thread_http_response = function (data, reqid) {\n        var prop = this.http_request_jobs[reqid];\n        if (!prop || prop.running <= 0 || prop.cancelled) {\n            return;\n        }\n\n        prop.running--;\n\n        // trigger response callback\n        if (prop.onresponse && typeof prop.onresponse === 'function') {\n            prop.onresponse(data);\n        }\n\n        prop.result = $.extend(prop.result, data);\n\n        // send next request if prop.items is not yet empty\n        var item = prop._items.shift();\n        if (item !== undefined) {\n            prop.running++;\n            prop.requests.push(this.multi_thread_send_request(prop, item));\n        }\n        // trigger whendone callback and mark this request as done\n        else if (prop.running == 0) {\n            if (prop.whendone && typeof prop.whendone === 'function') {\n                prop.whendone(prop.result);\n            }\n\n            this.set_busy(false, '', prop.lock);\n\n            // remove from this.http_request_jobs pool\n            delete this.http_request_jobs[reqid];\n        }\n    };\n\n    // abort a running multi-thread request with the given identifier\n    this.multi_thread_request_abort = function (reqid) {\n        var prop = this.http_request_jobs[reqid];\n        if (prop) {\n            for (var i = 0; prop.running > 0 && i < prop.requests.length; i++) {\n                if (prop.requests[i].abort) {\n                    prop.requests[i].abort();\n                }\n            }\n\n            prop.running = 0;\n            prop.cancelled = true;\n            this.set_busy(false, '', prop.lock);\n        }\n    };\n\n    // post the given form to a hidden iframe\n    this.async_upload_form = function (form, action, onload) {\n    // create hidden iframe\n        var ts = new Date().getTime(),\n            frame_name = 'rcmupload' + ts,\n            frame = this.dummy_iframe(frame_name);\n\n        // handle upload errors by parsing iframe content in onload\n        frame.on('load', { ts: ts }, onload);\n\n        $(form).attr({\n            target: frame_name,\n            action: this.url(action, { _id: this.env.compose_id || '', _uploadid: ts, _from: this.env.action }),\n            method: 'POST',\n            enctype: 'multipart/form-data',\n        })\n            .submit();\n\n        return frame_name;\n    };\n\n    // create hidden iframe element\n    this.dummy_iframe = function (name, src) {\n        return $('<iframe>').attr({\n            name: name,\n            src: src,\n            style: 'width:0;height:0;visibility:hidden',\n            'aria-hidden': 'true',\n        })\n            .appendTo(document.body);\n    };\n\n    // html5 file-drop API\n    this.document_drag_hover = function (e, over) {\n        // don't e.preventDefault() here to not block text dragging on the page (#1490619)\n        $(this.gui_objects.filedrop)[(over ? 'addClass' : 'removeClass')]('active');\n    };\n\n    this.file_drag_hover = function (e, over) {\n        e.preventDefault();\n        e.stopPropagation();\n        $(this.gui_objects.filedrop)[(over ? 'addClass' : 'removeClass')]('hover');\n    };\n\n    // handler when files are dropped to a designated area.\n    // compose a multipart form data and submit it to the server\n    this.file_dropped = function (e) {\n        // abort event and reset UI\n        this.file_drag_hover(e, false);\n\n        // prepare multipart form data composition\n        var uri,\n            files = e.target.files || e.dataTransfer.files,\n            args = { _id: this.env.compose_id || this.env.cid || '', _remote: 1, _from: this.env.action };\n\n        if (!files || !files.length) {\n            // Roundcube attachment, pass its uri to the backend and attach\n            if (uri = e.dataTransfer.getData('roundcube-uri')) {\n                var ts = 'upload' + new Date().getTime(),\n                    // jQuery way to escape filename (#1490530)\n                    content = $('<span>').text(e.dataTransfer.getData('roundcube-name') || this.get_label('attaching')).html();\n\n                args._uri = uri;\n                args._uploadid = ts;\n\n                // add to attachments list\n                if (!this.add2attachment_list(ts, {\n                    name: '', html: content, classname: 'uploading', complete: false,\n                })) {\n                    this.file_upload_id = this.set_busy(true, 'attaching');\n                }\n\n                this.http_post(this.env.filedrop.action || 'upload', args);\n            }\n\n            return;\n        }\n\n        this.file_upload(files, args, {\n            name: (this.env.filedrop.fieldname || '_file') + (this.env.filedrop.single ? '' : '[]'),\n            single: this.env.filedrop.single,\n            filter: this.env.filedrop.filter,\n            action: ref.env.filedrop.action,\n        });\n    };\n\n    // Files upload using ajax\n    this.file_upload = function (files, post_args, props) {\n        if (!window.FormData || !files || !files.length) {\n            return false;\n        }\n\n        var f, i, fname, size = 0, numfiles = 0,\n            formdata = new FormData(),\n            fieldname = props.name || '_file[]',\n            limit = props.single ? 1 : files.length;\n        args = $.extend({ _remote: 1, _from: this.env.action }, post_args || {});\n\n        // add files to form data\n        for (i = 0; numfiles < limit && (f = files[i]); i++) {\n            // filter by file type if requested\n            if (props.filter && !f.type.match(new RegExp(props.filter))) {\n                // TODO: show message to user\n                continue;\n            }\n\n            formdata.append(fieldname, f);\n            size += f.size;\n            fname = f.name;\n            numfiles++;\n        }\n\n        if (numfiles) {\n            if (this.env.max_filesize && this.env.filesizeerror && size > this.env.max_filesize) {\n                this.display_message(this.env.filesizeerror, 'error');\n                return false;\n            }\n\n            if (this.env.max_filecount && this.env.filecounterror && numfiles > this.env.max_filecount) {\n                this.display_message(this.env.filecounterror, 'error');\n                return false;\n            }\n\n            var ts = 'upload' + new Date().getTime(),\n                label = numfiles > 1 ? this.get_label('uploadingmany') : fname,\n                // jQuery way to escape filename (#1490530)\n                content = $('<span>').text(label).html();\n\n            // add to attachments list\n            if (!this.add2attachment_list(ts, {\n                name: '', html: content, classname: 'uploading', complete: false,\n            }) && !props.lock) {\n                props.lock = this.file_upload_id = this.set_busy(true, 'uploading');\n            }\n\n            args._uploadid = ts;\n            args._unlock = props.lock;\n\n            this.uploads[ts] = $.ajax({\n                type: 'POST',\n                dataType: 'json',\n                url: this.url(props.action || 'upload', args),\n                contentType: false,\n                processData: false,\n                timeout: this.uploadTimeout, // ajax call timeout for loading attachment\n                data: formdata,\n                headers: { 'X-Roundcube-Request': this.env.request_token },\n                xhr: function () {\n                    var xhr = $.ajaxSettings.xhr();\n                    if (xhr.upload && ref.labels.uploadprogress) {\n                        xhr.upload.onprogress = function (e) {\n                            var msg = ref.file_upload_msg(e.loaded, e.total);\n                            if (msg) {\n                                $('#' + ts).find('.uploading').text(msg);\n                            }\n                        };\n                    }\n                    return xhr;\n                },\n                success: function (data) {\n                    delete ref.uploads[ts];\n                    ref.http_response(data);\n                },\n                error: function (o, status, err) {\n                    delete ref.uploads[ts];\n                    ref.remove_from_attachment_list(ts);\n                    ref.http_error(o, status, err, props.lock, 'attachment');\n                },\n            });\n        }\n\n        return true;\n    };\n\n    this.file_upload_msg = function (current, total) {\n        if (total && current < total) {\n            var percent = Math.round(current / total * 100),\n                label = ref.get_label('uploadprogress');\n\n            if (total >= 1073741824) {\n                total = parseFloat(total / 1073741824).toFixed(1) + ' ' + this.get_label('GB');\n                current = parseFloat(current / 1073741824).toFixed(1);\n            } else if (total >= 1048576) {\n                total = parseFloat(total / 1048576).toFixed(1) + ' ' + this.get_label('MB');\n                current = parseFloat(current / 1048576).toFixed(1);\n            } else if (total >= 1024) {\n                total = parseInt(total / 1024, 10) + ' ' + this.get_label('KB');\n                current = parseInt(current / 1024, 10);\n            } else {\n                total = total + ' ' + this.get_label('B');\n            }\n\n            return label.replace('$percent', percent + '%').replace('$current', current).replace('$total', total);\n        }\n    };\n\n    // starts interval for keep-alive signal\n    this.start_keepalive = function () {\n        if (!this.env.session_lifetime || this.env.framed || this.env.extwin || this.task == 'login' || this.env.action == 'print') {\n            return;\n        }\n\n        if (this._keepalive) {\n            clearInterval(this._keepalive);\n        }\n\n        // use Math to prevent from an integer overflow (#5273)\n        // maximum interval is 15 minutes, minimum is 30 seconds\n        var interval = Math.min(1800, this.env.session_lifetime) * 0.5 * 1000;\n        this._keepalive = setInterval(function () {\n            ref.keep_alive();\n        }, interval < 30000 ? 30000 : interval);\n    };\n\n    // starts interval for refresh signal\n    this.start_refresh = function () {\n        if (!this.env.refresh_interval || this.env.framed || this.env.extwin || this.task == 'login' || this.env.action == 'print') {\n            return;\n        }\n\n        if (this._refresh) {\n            clearInterval(this._refresh);\n        }\n\n        this._refresh = setInterval(function () {\n            ref.refresh();\n        }, this.env.refresh_interval * 1000);\n    };\n\n    // sends keep-alive signal\n    this.keep_alive = function () {\n        if (!this.busy) {\n            this.http_request('keep-alive');\n        }\n    };\n\n    // sends refresh signal\n    this.refresh = function () {\n        if (this.busy) {\n            // try again after 10 seconds\n            setTimeout(function () {\n                ref.refresh(); ref.start_refresh();\n            }, 10000);\n            return;\n        }\n\n        var params = {}, lock = this.set_busy(true, 'refreshing');\n\n        if (this.task == 'mail' && this.gui_objects.mailboxlist) {\n            params = this.check_recent_params();\n        }\n\n        params._last = Math.floor(this.env.lastrefresh.getTime() / 1000);\n        this.env.lastrefresh = new Date();\n\n        // plugins should bind to 'requestrefresh' event to add own params\n        this.http_post('refresh', params, lock);\n    };\n\n    // returns check-recent request parameters\n    this.check_recent_params = function () {\n        var params = { _mbox: this.env.mailbox };\n\n        if (this.gui_objects.mailboxlist) {\n            params._folderlist = 1;\n        }\n        if (this.gui_objects.quotadisplay) {\n            params._quota = 1;\n        }\n        if (this.env.search_request) {\n            params._search = this.env.search_request;\n        }\n\n        if (this.gui_objects.messagelist) {\n            params._list = 1;\n\n            // message uids for flag updates check\n            params._uids = $.map(this.message_list.rows, function (row, uid) {\n                return uid;\n            }).join(',');\n        }\n\n        return params;\n    };\n\n\n    /********************************************************/\n    /*                     helper methods                   */\n    /********************************************************/\n\n    /**\n     * Quote html entities\n     */\n    this.quote_html = function (str) {\n        return String(str).replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n    };\n\n    // get window.opener.rcmail if available\n    this.opener = function (deep, filter) {\n        var i, win = window.opener;\n\n        // catch Error: Permission denied to access property rcmail\n        try {\n            if (win && !win.closed && win !== window) {\n                // try parent of the opener window, e.g. preview frame\n                if (deep && (!win.rcmail || win.rcmail.env.framed) && win.parent && win.parent.rcmail) {\n                    win = win.parent;\n                }\n\n                if (win.rcmail && filter) {\n                    for (i in filter) {\n                        if (win.rcmail.env[i] != filter[i]) {\n                            return;\n                        }\n                    }\n                }\n\n                return win.rcmail;\n            }\n        } catch (e) {}\n    };\n\n    // check if we're in show mode or if we have a unique selection\n    // and return the message uid\n    this.get_single_uid = function () {\n        var uid = this.env.uid || (this.message_list ? this.message_list.get_single_selection() : null);\n        var result = ref.triggerEvent('get_single_uid', { uid: uid });\n        return result || uid;\n    };\n\n    // same as above but for contacts\n    this.get_single_cid = function () {\n        var cid = this.env.cid || (this.contact_list ? this.contact_list.get_single_selection() : null);\n        var result = ref.triggerEvent('get_single_cid', { cid: cid });\n        return result || cid;\n    };\n\n    // get the IMP mailbox of the message with the given UID\n    this.get_message_mailbox = function (uid) {\n        var msg;\n\n        if (this.env.messages && uid && (msg = this.env.messages[uid]) && msg.mbox) {\n            return msg.mbox;\n        }\n\n        if (/^[0-9]+-(.*)$/.test(uid)) {\n            return RegExp.$1;\n        }\n\n        return this.env.mailbox;\n    };\n\n    // build request parameters from single message id (maybe with mailbox name)\n    this.params_from_uid = function (uid, params) {\n        if (!params) {\n            params = {};\n        }\n\n        params._uid = String(uid).split('-')[0];\n        params._mbox = this.get_message_mailbox(uid);\n\n        return params;\n    };\n\n    // gets cursor position\n    this.get_caret_pos = function (obj) {\n        if (obj.selectionEnd !== undefined) {\n            return obj.selectionEnd;\n        }\n\n        return obj.value.length;\n    };\n\n    // moves cursor to specified position\n    this.set_caret_pos = function (obj, pos) {\n        try {\n            if (obj.setSelectionRange) {\n                obj.setSelectionRange(pos, pos);\n            }\n        } catch (e) {} // catch Firefox exception if obj is hidden\n    };\n\n    // get selected text from an input field\n    this.get_input_selection = function (obj) {\n        var start = 0, end = 0, normalizedValue = '';\n\n        if (typeof obj.selectionStart === 'number' && typeof obj.selectionEnd === 'number') {\n            normalizedValue = obj.value;\n            start = obj.selectionStart;\n            end = obj.selectionEnd;\n        }\n\n        return { start: start, end: end, text: normalizedValue.substr(start, end - start) };\n    };\n\n    // disable/enable all fields of a form\n    this.lock_form = function (form, lock) {\n        if (!form || !form.elements) {\n            return;\n        }\n\n        if (lock) {\n            this.disabled_form_elements = [];\n        }\n\n        $.each(form.elements, function () {\n            if (this.type == 'hidden') {\n                return;\n            }\n            // remember which elem was disabled before lock\n            if (lock && this.disabled) {\n                ref.disabled_form_elements.push(this);\n            } else if (lock || $.inArray(this, ref.disabled_form_elements) < 0) {\n                this.disabled = lock;\n            }\n        });\n    };\n\n    this.mailto_handler_uri = function () {\n        return location.href.split('?')[0] + '?_task=mail&_action=compose&_to=%s';\n    };\n\n    this.register_protocol_handler = function (name) {\n        try {\n            window.navigator.registerProtocolHandler('mailto', this.mailto_handler_uri(), name);\n        } catch (e) {\n            this.display_message(String(e), 'error');\n        }\n    };\n\n    this.check_protocol_handler = function (name, elem) {\n        var nav = window.navigator;\n\n        if (!nav || (typeof nav.registerProtocolHandler !== 'function')) {\n            $(elem).addClass('disabled').click(function () {\n                ref.display_message('nosupporterror', 'error');\n                return false;\n            });\n        } else if (typeof nav.isProtocolHandlerRegistered === 'function') {\n            var status = nav.isProtocolHandlerRegistered('mailto', this.mailto_handler_uri());\n            if (status) {\n                $(elem).parent().find('.mailtoprotohandler-status').html(status);\n            }\n        } else {\n            $(elem).click(function () {\n                ref.register_protocol_handler(name); return false;\n            });\n        }\n    };\n\n    // Checks browser capabilities e.g. PDF support, TIF support\n    this.browser_capabilities_check = function () {\n        $.each(['pdf', 'flash', 'tiff', 'webp', 'pgpmime'], function () {\n            if (ref.env.browser_capabilities[this] === undefined) {\n                ref.env.browser_capabilities[this] = ref[this + '_support_check']();\n            }\n        });\n    };\n\n    // Returns browser capabilities string\n    this.browser_capabilities = function () {\n        var n, ret = [];\n\n        for (n in this.env.browser_capabilities) {\n            ret.push(n + '=' + this.env.browser_capabilities[n]);\n        }\n\n        return ret.join();\n    };\n\n    this.tiff_support_check = function () {\n        this.image_support_check('tiff');\n        return 0;\n    };\n\n    this.webp_support_check = function () {\n        this.image_support_check('webp');\n        return 0;\n    };\n\n    this.image_support_check = function (type) {\n        setTimeout(function () {\n            var img = new Image();\n            img.onload = function () {\n                ref.env.browser_capabilities[type] = 1;\n            };\n            img.onerror = function () {\n                ref.env.browser_capabilities[type] = 0;\n            };\n            img.src = ref.assets_path('program/resources/blank.' + type);\n        }, 10);\n    };\n\n    this.pdf_support_check = function () {\n        if ('pdfViewerEnabled' in navigator) {\n            return navigator.pdfViewerEnabled ? 1 : 0;\n        }\n\n        var i, plugin = navigator.mimeTypes ? navigator.mimeTypes['application/pdf'] : {},\n            regex = /Adobe Reader|PDF|Acrobat/i;\n\n        if (plugin && plugin.enabledPlugin) {\n            return 1;\n        }\n\n        for (i in navigator.plugins) {\n            plugin = navigator.plugins[i];\n            if (typeof plugin === 'string') {\n                if (regex.test(plugin)) {\n                    return 1;\n                }\n            } else if (plugin.name && regex.test(plugin.name)) {\n                return 1;\n            }\n        }\n\n        setTimeout(function () {\n            $('<object>').attr({\n                data: ref.assets_path('program/resources/dummy.pdf'),\n                type: 'application/pdf',\n                style: 'position: \"absolute\"; top: -1000px; height: 1px; width: 1px',\n            })\n                .on('load error', function (e) {\n                    ref.env.browser_capabilities.pdf = e.type == 'load' ? 1 : 0;\n\n                    // add a short delay before attempting to remove element (#8128)\n                    var obj = this;\n                    setTimeout(function () {\n                        $(obj).remove();\n                    }, 10);\n                })\n                .appendTo(document.body);\n        }, 10);\n\n        return 0;\n    };\n\n    this.flash_support_check = function () {\n        var plugin = navigator.mimeTypes ? navigator.mimeTypes['application/x-shockwave-flash'] : {};\n\n        if (plugin && plugin.enabledPlugin) {\n            return 1;\n        }\n\n        if ('ActiveXObject' in window) {\n            try {\n                plugin = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');\n\n                return 1;\n            } catch (e) {}\n        }\n\n        return 0;\n    };\n\n    // check for mailvelope API\n    this.pgpmime_support_check = function (action) {\n        if (window.mailvelope) {\n            return 1;\n        }\n\n        $(window).on('mailvelope', function () {\n            ref.env.browser_capabilities.pgpmime = 1;\n        });\n\n        return 0;\n    };\n\n    this.assets_path = function (path) {\n        if (this.env.assets_path && !path.startsWith(this.env.assets_path)) {\n            path = this.env.assets_path + path;\n        }\n\n        if (!path.startsWith('static.php/') && path.indexOf('://') == -1) {\n            path = 'static.php/' + path;\n        }\n\n        return path;\n    };\n\n    // Cookie setter\n    this.set_cookie = function (name, value, expires) {\n        if (expires === false) {\n            var expires = new Date();\n            expires.setYear(expires.getFullYear() + 1);\n        }\n\n        setCookie(name, value, expires, this.env.cookie_path, this.env.cookie_domain, this.env.cookie_secure);\n    };\n\n    this.get_local_storage_prefix = function () {\n        if (!this.local_storage_prefix) {\n            this.local_storage_prefix = 'roundcube.' + (this.env.user_id || 'anonymous') + '.';\n        }\n\n        return this.local_storage_prefix;\n    };\n\n    // wrapper for localStorage.getItem(key)\n    this.local_storage_get_item = function (key, deflt, encrypted) {\n        var item, result;\n\n        // TODO: add encryption\n        try {\n            item = localStorage.getItem(this.get_local_storage_prefix() + key);\n            result = JSON.parse(item);\n        } catch (e) {}\n\n        return result || deflt || null;\n    };\n\n    // wrapper for localStorage.setItem(key, data)\n    this.local_storage_set_item = function (key, data, encrypted) {\n        // try/catch to handle no localStorage support, but also error\n        // in Safari-in-private-browsing-mode where localStorage exists\n        // but can't be used (#1489996)\n        try {\n            // TODO: add encryption\n            localStorage.setItem(this.get_local_storage_prefix() + key, JSON.stringify(data));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // wrapper for localStorage.removeItem(key)\n    this.local_storage_remove_item = function (key) {\n        try {\n            localStorage.removeItem(this.get_local_storage_prefix() + key);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    this.print_dialog = function () {\n        // setTimeout for Safari\n        setTimeout('window.print()', 10);\n    };\n} // end object rcube_webmail\n\n\n// some static methods\nrcube_webmail.long_subject_title = function (elem, indent, text_elem) {\n    if (!elem.title) {\n        var siblings_width = 0, $elem = $(text_elem || elem);\n\n        $elem.siblings().each(function () {\n            // Note: width() returns 0 for elements with icons in :before (Elastic)\n            siblings_width += $(this).width() + (parseFloat(window.getComputedStyle(this, ':before').width) || 0);\n        });\n\n        // Note: 3px to be on the safe side, but also specifically for Elastic\n        if ($elem.width() + siblings_width + (indent || 0) * 15 >= $elem.parent().width() - 3) {\n            elem.title = rcube_webmail.subject_text($elem[0]);\n        }\n    }\n};\n\nrcube_webmail.long_subject_title_ex = function (elem) {\n    if (!elem.title) {\n        var $elem = $(elem),\n            txt = $elem.text().trim(),\n            indent = $('span.branch', $elem).width() || 0,\n            tmp = $('<span>').text(txt)\n                .css({\n                    position: 'absolute',\n                    float: 'left',\n                    visibility: 'hidden',\n                    'font-size': $elem.css('font-size'),\n                    'font-weight': $elem.css('font-weight'),\n                })\n                .appendTo(document.body),\n            w = tmp.width();\n\n        tmp.remove();\n        if (w + indent * 15 > $elem.width()) {\n            elem.title = rcube_webmail.subject_text(elem);\n        }\n    }\n};\n\nrcube_webmail.subject_text = function (elem) {\n    var t = $(elem).clone();\n    t.find('.skip-on-drag,.skip-content,.voice').remove();\n    return t.text().trim();\n};\n\n// set event handlers on all iframe elements (and their contents)\nrcube_webmail.set_iframe_events = function (events) {\n    $('iframe').each(function () {\n        var frame = $(this);\n        $.each(events, function (event_name, event_handler) {\n            frame.on('load', function (e) {\n                try {\n                    $(this).contents().on(event_name, event_handler);\n                } catch (e) { /* catch possible permission error in IE */ }\n            });\n\n            try {\n                frame.contents().on(event_name, event_handler);\n            } catch (e) { /* catch possible permission error in IE */ }\n        });\n    });\n};\n\nrcube_webmail.prototype.get_cookie = getCookie;\n\n// copy event engine prototype\nrcube_webmail.prototype.addEventListener = rcube_event_engine.prototype.addEventListener;\nrcube_webmail.prototype.removeEventListener = rcube_event_engine.prototype.removeEventListener;\nrcube_webmail.prototype.triggerEvent = rcube_event_engine.prototype.triggerEvent;\n", "patch": "@@ -1024,7 +1024,7 @@ function rcube_webmail()\n             break;\n         }\n \n-        this.goto_url('get', qstring+'&_download=1', false);\n+        this.goto_url('get', qstring+'&_download=1', false, true);\n         break;\n \n       case 'select-all':\n@@ -1230,10 +1230,10 @@ function rcube_webmail()\n \n       case 'download':\n         if (this.env.action == 'get') {\n-          location.href = location.href.replace(/_frame=/, '_download=');\n+          location.href = this.secure_url(location.href.replace(/_frame=/, '_download='));\n         }\n         else if (uid = this.get_single_uid()) {\n-          this.goto_url('viewsource', this.params_from_uid(uid, {_save: 1}));\n+          this.goto_url('viewsource', this.params_from_uid(uid, {_save: 1}), false, true);\n         }\n         break;\n \n@@ -1321,13 +1321,13 @@ function rcube_webmail()\n \n       case 'export':\n         if (this.contact_list.rowcount > 0) {\n-          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _search: this.env.search_request });\n+          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _search: this.env.search_request }, false, true);\n         }\n         break;\n \n       case 'export-selected':\n         if (this.contact_list.rowcount > 0) {\n-          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _cid: this.contact_list.get_selection().join(',') });\n+          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _cid: this.contact_list.get_selection().join(',') }, false, true);\n         }\n         break;\n \n@@ -1442,7 +1442,7 @@ function rcube_webmail()\n     if (task == 'mail')\n       url += '&_mbox=INBOX';\n     else if (task == 'logout' && !this.env.server_error) {\n-      url += '&_token=' + this.env.request_token;\n+      url = this.secure_url(url);\n       this.clear_compose_data();\n     }\n \n@@ -1491,6 +1491,12 @@ function rcube_webmail()\n     return url + '?' + name + '=' + value;\n   };\n \n+  // append CSRF protection token to the given url\n+  this.secure_url = function(url)\n+  {\n+    return this.add_url(url, '_token', this.env.request_token);\n+  },\n+\n   this.is_framed = function()\n   {\n     return this.env.framed && parent.rcmail && parent.rcmail != this && typeof parent.rcmail.command == 'function';\n@@ -7899,9 +7905,11 @@ function rcube_webmail()\n     }\n   };\n \n-  this.goto_url = function(action, query, lock)\n+  this.goto_url = function(action, query, lock, secure)\n   {\n-    this.redirect(this.url(action, query), lock);\n+    var url = this.url(action, query)\n+    if (secure) url = this.secure_url(url);\n+    this.redirect(url, lock);\n   };\n \n   this.location_href = function(url, target, frame)", "file_path": "files/2016_8\\12", "file_language": "js", "file_name": "program/js/app.js", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/4a408843b0ef816daf70a472a02b78cd6073a4d5/program/lib/Roundcube/rcube_message.php", "code": "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2008-2014, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Logical representation of a mail message with all its data          |\n |   and related functions                                               |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Logical representation of a mail message with all its data\n * and related functions\n *\n * @package    Framework\n * @subpackage Storage\n * @author     Thomas Bruederli <roundcube@gmail.com>\n */\nclass rcube_message\n{\n    /**\n     * Instace of framework class.\n     *\n     * @var rcube\n     */\n    private $app;\n\n    /**\n     * Instance of storage class\n     *\n     * @var rcube_storage\n     */\n    private $storage;\n\n    /**\n     * Instance of mime class\n     *\n     * @var rcube_mime\n     */\n    private $mime;\n    private $opt = array();\n    private $parse_alternative = false;\n\n    public $uid;\n    public $folder;\n    public $headers;\n    public $sender;\n    public $parts        = array();\n    public $mime_parts   = array();\n    public $inline_parts = array();\n    public $attachments  = array();\n    public $subject      = '';\n    public $is_safe      = false;\n\n    const BODY_MAX_SIZE = 1048576; // 1MB\n\n\n    /**\n     * __construct\n     *\n     * Provide a uid, and parse message structure.\n     *\n     * @param string $uid     The message UID.\n     * @param string $folder  Folder name\n     * @param bool   $is_safe Security flag\n     *\n     * @see self::$app, self::$storage, self::$opt, self::$parts\n     */\n    function __construct($uid, $folder = null, $is_safe = false)\n    {\n        // decode combined UID-folder identifier\n        if (preg_match('/^\\d+-.+/', $uid)) {\n            list($uid, $folder) = explode('-', $uid, 2);\n        }\n\n        $this->uid     = $uid;\n        $this->app     = rcube::get_instance();\n        $this->storage = $this->app->get_storage();\n        $this->folder  = strlen($folder) ? $folder : $this->storage->get_folder();\n\n        // Set current folder\n        $this->storage->set_folder($this->folder);\n        $this->storage->set_options(array('all_headers' => true));\n\n        $this->headers = $this->storage->get_message($uid);\n\n        if (!$this->headers) {\n            return;\n        }\n\n        $this->mime    = new rcube_mime($this->headers->charset);\n        $this->subject = $this->headers->get('subject');\n        list(, $this->sender) = each($this->mime->decode_address_list($this->headers->from, 1));\n\n        $this->set_safe($is_safe || $_SESSION['safe_messages'][$this->folder.':'.$uid]);\n        $this->opt = array(\n            'safe'        => $this->is_safe,\n            'prefer_html' => $this->app->config->get('prefer_html'),\n            'get_url'     => $this->app->url(array(\n                    'action' => 'get',\n                    'mbox'   => $this->folder,\n                    'uid'    => $uid),\n                false, false, true)\n        );\n\n        if (!empty($this->headers->structure)) {\n            $this->get_mime_numbers($this->headers->structure);\n            $this->parse_structure($this->headers->structure);\n        }\n        else {\n            $this->body = $this->storage->get_body($uid);\n        }\n\n        // notify plugins and let them analyze this structured message object\n        $this->app->plugins->exec_hook('message_load', array('object' => $this));\n    }\n\n    /**\n     * Return a (decoded) message header\n     *\n     * @param string $name Header name\n     * @param bool   $row  Don't mime-decode the value\n     * @return string Header value\n     */\n    public function get_header($name, $raw = false)\n    {\n        if (empty($this->headers)) {\n            return null;\n        }\n\n        return $this->headers->get($name, !$raw);\n    }\n\n    /**\n     * Set is_safe var and session data\n     *\n     * @param bool $safe enable/disable\n     */\n    public function set_safe($safe = true)\n    {\n        $_SESSION['safe_messages'][$this->folder.':'.$this->uid] = $this->is_safe = $safe;\n    }\n\n    /**\n     * Compose a valid URL for getting a message part\n     *\n     * @param string $mime_id Part MIME-ID\n     * @param mixed  $embed Mimetype class for parts to be embedded\n     * @return string URL or false if part does not exist\n     */\n    public function get_part_url($mime_id, $embed = false)\n    {\n        if ($this->mime_parts[$mime_id])\n            return $this->opt['get_url'] . '&_part=' . $mime_id . ($embed ? '&_embed=1&_mimeclass=' . $embed : '');\n        else\n            return false;\n    }\n\n    /**\n     * Get content of a specific part of this message\n     *\n     * @param string   $mime_id           Part MIME-ID\n     * @param resource $fp File           pointer to save the message part\n     * @param boolean  $skip_charset_conv Disables charset conversion\n     * @param int      $max_bytes         Only read this number of bytes\n     * @param boolean  $formatted         Enables formatting of text/* parts bodies\n     *\n     * @return string Part content\n     * @deprecated\n     */\n    public function get_part_content($mime_id, $fp = null, $skip_charset_conv = false, $max_bytes = 0, $formatted = true)\n    {\n        if ($part = $this->mime_parts[$mime_id]) {\n            // stored in message structure (winmail/inline-uuencode)\n            if (!empty($part->body) || $part->encoding == 'stream') {\n                if ($fp) {\n                    fwrite($fp, $part->body);\n                }\n                return $fp ? true : $part->body;\n            }\n\n            // get from IMAP\n            $this->storage->set_folder($this->folder);\n\n            return $this->storage->get_message_part($this->uid, $mime_id, $part,\n                NULL, $fp, $skip_charset_conv, $max_bytes, $formatted);\n        }\n    }\n\n    /**\n     * Get content of a specific part of this message\n     *\n     * @param string  $mime_id   Part ID\n     * @param boolean $formatted Enables formatting of text/* parts bodies\n     * @param int     $max_bytes Only return/read this number of bytes\n     * @param mixed   $mode      NULL to return a string, -1 to print body\n     *                           or file pointer to save the body into\n     *\n     * @return string|bool Part content or operation status\n     */\n    public function get_part_body($mime_id, $formatted = false, $max_bytes = 0, $mode = null)\n    {\n        if (!($part = $this->mime_parts[$mime_id])) {\n            return;\n        }\n\n        // allow plugins to modify part body\n        $plugin = $this->app->plugins->exec_hook('message_part_body',\n            array('object' => $this, 'part' => $part));\n\n        // only text parts can be formatted\n        $formatted = $formatted && $part->ctype_primary == 'text';\n\n        // part body not fetched yet... save in memory if it's small enough\n        if ($part->body === null && is_numeric($mime_id) && $part->size < self::BODY_MAX_SIZE) {\n            $this->storage->set_folder($this->folder);\n            // Warning: body here should be always unformatted\n            $part->body = $this->storage->get_message_part($this->uid, $mime_id, $part,\n                null, null, true, 0, false);\n        }\n\n        // body stored in message structure (winmail/inline-uuencode)\n        if ($part->body !== null || $part->encoding == 'stream') {\n            $body = $part->body;\n\n            if ($formatted && $body) {\n                $body = self::format_part_body($body, $part, $this->headers->charset);\n            }\n\n            if ($max_bytes && strlen($body) > $max_bytes) {\n                $body = substr($body, 0, $max_bytes);\n            }\n\n            if (is_resource($mode)) {\n                if ($body !== false) {\n                    fwrite($mode, $body);\n                    rewind($mode);\n                }\n\n                return $body !== false;\n            }\n\n            if ($mode === -1) {\n                if ($body !== false) {\n                    print($body);\n                }\n\n                return $body !== false;\n            }\n\n            return $body;\n        }\n\n        // get the body from IMAP\n        $this->storage->set_folder($this->folder);\n\n        $body = $this->storage->get_message_part($this->uid, $mime_id, $part,\n            $mode === -1, is_resource($mode) ? $mode : null,\n            !($mode && $formatted), $max_bytes, $mode && $formatted);\n\n        if (is_resource($mode)) {\n            rewind($mode);\n            return $body !== false;\n        }\n\n        if (!$mode && $body && $formatted) {\n            $body = self::format_part_body($body, $part, $this->headers->charset);\n        }\n\n        return $body;\n    }\n\n    /**\n     * Format text message part for display\n     *\n     * @param string             $body            Part body\n     * @param rcube_message_part $part            Part object\n     * @param string             $default_charset Fallback charset if part charset is not specified\n     *\n     * @return string Formatted body\n     */\n    public static function format_part_body($body, $part, $default_charset = null)\n    {\n        // remove useless characters\n        $body = preg_replace('/[\\t\\r\\0\\x0B]+\\n/', \"\\n\", $body);\n\n        // remove NULL characters if any (#1486189)\n        if (strpos($body, \"\\x00\") !== false) {\n            $body = str_replace(\"\\x00\", '', $body);\n        }\n\n        // detect charset...\n        if (!$part->charset || strtoupper($part->charset) == 'US-ASCII') {\n            // try to extract charset information from HTML meta tag (#1488125)\n            if ($part->ctype_secondary == 'html' && preg_match('/<meta[^>]+charset=([a-z0-9-_]+)/i', $body, $m)) {\n                $part->charset = strtoupper($m[1]);\n            }\n            else if ($default_charset) {\n                $part->charset = $default_charset;\n            }\n            else {\n                $rcube         = rcube::get_instance();\n                $part->charset = $rcube->config->get('default_charset', RCUBE_CHARSET);\n            }\n        }\n\n        // ..convert charset encoding\n        $body = rcube_charset::convert($body, $part->charset);\n\n        return $body;\n    }\n\n    /**\n     * Determine if the message contains a HTML part. This must to be\n     * a real part not an attachment (or its part)\n     *\n     * @param bool               $enriched Enables checking for text/enriched parts too\n     * @param rcube_message_part &$part    Reference to the part if found\n     *\n     * @return bool True if a HTML is available, False if not\n     */\n    public function has_html_part($enriched = false, &$part = null)\n    {\n        // check all message parts\n        foreach ($this->mime_parts as $part) {\n            if ($part->mimetype == 'text/html' || ($enriched && $part->mimetype == 'text/enriched')) {\n                // Skip if part is an attachment, don't use is_attachment() here\n                if ($part->filename) {\n                    continue;\n                }\n\n                $level = explode('.', $part->mime_id);\n                $depth = count($level);\n                $last  = '';\n\n                // Check if the part belongs to higher-level's multipart part\n                // this can be alternative/related/signed/encrypted or mixed\n                while (array_pop($level) !== null) {\n                    $parent_depth = count($level);\n                    if (!$parent_depth) {\n                        return true;\n                    }\n\n                    $parent    = $this->mime_parts[join('.', $level)];\n                    $max_delta = $depth - (1 + ($last == 'multipart/alternative' ? 1 : 0));\n                    $last      = $parent->mimetype;\n\n                    if (!preg_match('/^multipart\\/(alternative|related|signed|encrypted|mixed)$/', $parent->mimetype)\n                        || ($parent->mimetype == 'multipart/mixed' && $parent_depth < $max_delta)) {\n                        continue 2;\n                    }\n                }\n\n                if ($part->size) {\n                    return true;\n                }\n            }\n        }\n\n        $part = null;\n\n        return false;\n    }\n\n    /**\n     * Determine if the message contains a text/plain part. This must to be\n     * a real part not an attachment (or its part)\n     *\n     * @param rcube_message_part &$part Reference to the part if found\n     *\n     * @return bool True if a plain text part is available, False if not\n     */\n    public function has_text_part(&$part = null)\n    {\n        // check all message parts\n        foreach ($this->mime_parts as $part) {\n            if ($part->mimetype == 'text/plain') {\n                // Skip if part is an attachment, don't use is_attachment() here\n                if ($part->filename) {\n                    continue;\n                }\n\n                $level = explode('.', $part->mime_id);\n\n                // Check if the part belongs to higher-level's alternative/related\n                while (array_pop($level) !== null) {\n                    if (!count($level)) {\n                        return true;\n                    }\n\n                    $parent = $this->mime_parts[join('.', $level)];\n                    if ($parent->mimetype != 'multipart/alternative' && $parent->mimetype != 'multipart/related') {\n                        continue 2;\n                    }\n                }\n\n                if ($part->size) {\n                    return true;\n                }\n            }\n        }\n\n        $part = null;\n\n        return false;\n    }\n\n    /**\n     * Return the first HTML part of this message\n     *\n     * @param rcube_message_part &$part    Reference to the part if found\n     * @param bool               $enriched Enables checking for text/enriched parts too\n     *\n     * @return string HTML message part content\n     */\n    public function first_html_part(&$part = null, $enriched = false)\n    {\n        if ($this->has_html_part($enriched, $part)) {\n            $body = $this->get_part_body($part->mime_id, true);\n\n            if ($part->mimetype == 'text/enriched') {\n                $body = rcube_enriched::to_html($body);\n            }\n\n            return $body;\n        }\n    }\n\n    /**\n     * Return the first text part of this message.\n     * If there's no text/plain part but $strict=true and text/html part\n     * exists, it will be returned in text/plain format.\n     *\n     * @param rcube_message_part &$part  Reference to the part if found\n     * @param bool               $strict Check only text/plain parts\n     *\n     * @return string Plain text message/part content\n     */\n    public function first_text_part(&$part = null, $strict = false)\n    {\n        // no message structure, return complete body\n        if (empty($this->parts)) {\n            return $this->body;\n        }\n\n        if ($this->has_text_part($part)) {\n            return $this->get_part_body($part->mime_id, true);\n        }\n\n        if (!$strict && ($body = $this->first_html_part($part, true))) {\n            // create instance of html2text class\n            $h2t  = new rcube_html2text($body);\n            return $h2t->get_text();\n        }\n    }\n\n    /**\n     * Checks if part of the message is an attachment (or part of it)\n     *\n     * @param rcube_message_part $part Message part\n     *\n     * @return bool True if the part is an attachment part\n     */\n    public function is_attachment($part)\n    {\n        foreach ($this->attachments as $att_part) {\n            if ($att_part->mime_id == $part->mime_id) {\n                return true;\n            }\n\n            // check if the part is a subpart of another attachment part (message/rfc822)\n            if ($att_part->mimetype == 'message/rfc822') {\n                if (in_array($part, (array)$att_part->parts)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * In a multipart/encrypted encrypted message,\n     * find the encrypted message payload part.\n     *\n     * @return rcube_message_part\n     */\n    public function get_multipart_encrypted_part()\n    {\n        foreach ($this->mime_parts as $mime_id => $mpart) {\n            if ($mpart->mimetype == 'multipart/encrypted') {\n                $this->pgp_mime = true;\n            }\n            if ($this->pgp_mime && ($mpart->mimetype == 'application/octet-stream' ||\n                    (!empty($mpart->filename) && $mpart->filename != 'version.txt'))) {\n                $this->encrypted_part = $mime_id;\n                return $mpart;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Read the message structure returend by the IMAP server\n     * and build flat lists of content parts and attachments\n     *\n     * @param rcube_message_part $structure Message structure node\n     * @param bool               $recursive True when called recursively\n     */\n    private function parse_structure($structure, $recursive = false)\n    {\n        // real content-type of message/rfc822 part\n        if ($structure->mimetype == 'message/rfc822' && $structure->real_mimetype) {\n            $mimetype = $structure->real_mimetype;\n\n            // parse headers from message/rfc822 part\n            if (!isset($structure->headers['subject']) && !isset($structure->headers['from'])) {\n                list($headers, ) = explode(\"\\r\\n\\r\\n\", $this->get_part_body($structure->mime_id, false, 32768));\n                $structure->headers = rcube_mime::parse_headers($headers);\n            }\n        }\n        else {\n            $mimetype = $structure->mimetype;\n        }\n\n        // show message headers\n        if ($recursive && is_array($structure->headers) &&\n                (isset($structure->headers['subject']) || $structure->headers['from'] || $structure->headers['to'])) {\n            $c = new stdClass;\n            $c->type = 'headers';\n            $c->headers = $structure->headers;\n            $this->parts[] = $c;\n        }\n\n        // Allow plugins to handle message parts\n        $plugin = $this->app->plugins->exec_hook('message_part_structure',\n            array('object' => $this, 'structure' => $structure,\n                'mimetype' => $mimetype, 'recursive' => $recursive));\n\n        if ($plugin['abort']) {\n            return;\n        }\n\n        $structure = $plugin['structure'];\n        $mimetype  = $plugin['mimetype'];\n        $recursive = $plugin['recursive'];\n\n        list($message_ctype_primary, $message_ctype_secondary) = explode('/', $mimetype);\n\n        // print body if message doesn't have multiple parts\n        if ($message_ctype_primary == 'text' && !$recursive) {\n            // parts with unsupported type add to attachments list\n            if (!in_array($message_ctype_secondary, array('plain', 'html', 'enriched'))) {\n                $this->attachments[] = $structure;\n                return;\n            }\n\n            $structure->type = 'content';\n            $this->parts[] = $structure;\n\n            // Parse simple (plain text) message body\n            if ($message_ctype_secondary == 'plain') {\n                foreach ((array)$this->uu_decode($structure) as $uupart) {\n                    $this->mime_parts[$uupart->mime_id] = $uupart;\n                    $this->attachments[] = $uupart;\n                }\n            }\n        }\n        // the same for pgp signed messages\n        else if ($mimetype == 'application/pgp' && !$recursive) {\n            $structure->type = 'content';\n            $this->parts[] = $structure;\n        }\n        // message contains (more than one!) alternative parts\n        else if ($mimetype == 'multipart/alternative'\n            && is_array($structure->parts) && count($structure->parts) > 1\n        ) {\n            // get html/plaintext parts, other add to attachments list\n            foreach ($structure->parts as $p => $sub_part) {\n                $sub_mimetype = $sub_part->mimetype;\n                $is_multipart = preg_match('/^multipart\\/(related|relative|mixed|alternative)/', $sub_mimetype);\n\n                // skip empty text parts\n                if (!$sub_part->size && !$is_multipart) {\n                    continue;\n                }\n\n                // We've encountered (malformed) messages with more than\n                // one text/plain or text/html part here. There's no way to choose\n                // which one is better, so we'll display first of them and add\n                // others as attachments (#1489358)\n\n                // check if sub part is\n                if ($is_multipart)\n                    $related_part = $p;\n                else if ($sub_mimetype == 'text/plain' && !$plain_part)\n                    $plain_part = $p;\n                else if ($sub_mimetype == 'text/html' && !$html_part) {\n                    $html_part = $p;\n                    $this->got_html_part = true;\n                }\n                else if ($sub_mimetype == 'text/enriched' && !$enriched_part)\n                    $enriched_part = $p;\n                else {\n                    // add unsupported/unrecognized parts to attachments list\n                    $this->attachments[] = $sub_part;\n                }\n            }\n\n            // parse related part (alternative part could be in here)\n            if ($related_part !== null && !$this->parse_alternative) {\n                $this->parse_alternative = true;\n                $this->parse_structure($structure->parts[$related_part], true);\n                $this->parse_alternative = false;\n\n                // if plain part was found, we should unset it if html is preferred\n                if ($this->opt['prefer_html'] && count($this->parts))\n                    $plain_part = null;\n            }\n\n            // choose html/plain part to print\n            if ($html_part !== null && $this->opt['prefer_html']) {\n                $print_part = $structure->parts[$html_part];\n            }\n            else if ($enriched_part !== null) {\n                $print_part = $structure->parts[$enriched_part];\n            }\n            else if ($plain_part !== null) {\n                $print_part = $structure->parts[$plain_part];\n            }\n\n            // add the right message body\n            if (is_object($print_part)) {\n                $print_part->type = 'content';\n                $this->parts[] = $print_part;\n            }\n            // show plaintext warning\n            else if ($html_part !== null && empty($this->parts)) {\n                $c = new stdClass;\n                $c->type            = 'content';\n                $c->ctype_primary   = 'text';\n                $c->ctype_secondary = 'plain';\n                $c->mimetype        = 'text/plain';\n                $c->realtype        = 'text/html';\n\n                $this->parts[] = $c;\n            }\n        }\n        // this is an ecrypted message -> create a plaintext body with the according message\n        else if ($mimetype == 'multipart/encrypted') {\n            $p = new stdClass;\n            $p->type            = 'content';\n            $p->ctype_primary   = 'text';\n            $p->ctype_secondary = 'plain';\n            $p->mimetype        = 'text/plain';\n            $p->realtype        = 'multipart/encrypted';\n            $p->mime_id         = $structure->mime_id;\n\n            $this->parts[] = $p;\n\n            // add encrypted payload part as attachment\n            if (is_array($structure->parts)) {\n                for ($i=0; $i < count($structure->parts); $i++) {\n                    $subpart = $structure->parts[$i];\n                    if ($subpart->mimetype == 'application/octet-stream' || !empty($subpart->filename)) {\n                        $this->attachments[] = $subpart;\n                    }\n                }\n            }\n        }\n        // this is an S/MIME ecrypted message -> create a plaintext body with the according message\n        else if ($mimetype == 'application/pkcs7-mime') {\n            $p = new stdClass;\n            $p->type            = 'content';\n            $p->ctype_primary   = 'text';\n            $p->ctype_secondary = 'plain';\n            $p->mimetype        = 'text/plain';\n            $p->realtype        = 'application/pkcs7-mime';\n            $p->mime_id         = $structure->mime_id;\n\n            $this->parts[] = $p;\n\n            if (!empty($structure->filename)) {\n                $this->attachments[] = $structure;\n            }\n        }\n        // message contains multiple parts\n        else if (is_array($structure->parts) && !empty($structure->parts)) {\n            // iterate over parts\n            for ($i=0; $i < count($structure->parts); $i++) {\n                $mail_part      = &$structure->parts[$i];\n                $primary_type   = $mail_part->ctype_primary;\n                $secondary_type = $mail_part->ctype_secondary;\n                $part_mimetype  = $mail_part->mimetype;\n\n                // multipart/alternative or message/rfc822\n                if ($primary_type == 'multipart' || $part_mimetype == 'message/rfc822') {\n                    $this->parse_structure($mail_part, true);\n\n                    // list message/rfc822 as attachment as well (mostly .eml)\n                    if ($primary_type == 'message' && !empty($mail_part->filename)) {\n                        $this->attachments[] = $mail_part;\n                    }\n                }\n                // part text/[plain|html] or delivery status\n                else if ((($part_mimetype == 'text/plain' || $part_mimetype == 'text/html') && $mail_part->disposition != 'attachment') ||\n                    in_array($part_mimetype, array('message/delivery-status', 'text/rfc822-headers', 'message/disposition-notification'))\n                ) {\n                    // Allow plugins to handle also this part\n                    $plugin = $this->app->plugins->exec_hook('message_part_structure',\n                        array('object' => $this, 'structure' => $mail_part,\n                            'mimetype' => $part_mimetype, 'recursive' => true));\n\n                    if ($plugin['abort']) {\n                        continue;\n                    }\n\n                    if ($part_mimetype == 'text/html' && $mail_part->size) {\n                        $this->got_html_part = true;\n                    }\n\n                    $mail_part = $plugin['structure'];\n                    list($primary_type, $secondary_type) = explode('/', $plugin['mimetype']);\n\n                    // add text part if it matches the prefs\n                    if (!$this->parse_alternative ||\n                        ($secondary_type == 'html' && $this->opt['prefer_html']) ||\n                        ($secondary_type == 'plain' && !$this->opt['prefer_html'])\n                    ) {\n                        $mail_part->type = 'content';\n                        $this->parts[] = $mail_part;\n                    }\n\n                    // list as attachment as well\n                    if (!empty($mail_part->filename)) {\n                        $this->attachments[] = $mail_part;\n                    }\n                }\n                // ignore \"virtual\" protocol parts\n                else if ($primary_type == 'protocol') {\n                    continue;\n                }\n                // part is Microsoft Outlook TNEF (winmail.dat)\n                else if ($part_mimetype == 'application/ms-tnef') {\n                    $tnef_parts = (array) $this->tnef_decode($mail_part);\n                    foreach ($tnef_parts as $tpart) {\n                        $this->mime_parts[$tpart->mime_id] = $tpart;\n                        $this->attachments[] = $tpart;\n                    }\n\n                    // add winmail.dat to the list if it's content is unknown\n                    if (empty($tnef_parts) && !empty($mail_part->filename)) {\n                        $this->mime_parts[$mail_part->mime_id] = $mail_part;\n                        $this->attachments[] = $mail_part;\n                    }\n                }\n                // part is a file/attachment\n                else if (preg_match('/^(inline|attach)/', $mail_part->disposition) ||\n                    $mail_part->headers['content-id'] ||\n                    ($mail_part->filename &&\n                        (empty($mail_part->disposition) || preg_match('/^[a-z0-9!#$&.+^_-]+$/i', $mail_part->disposition)))\n                ) {\n                    // skip apple resource forks\n                    if ($message_ctype_secondary == 'appledouble' && $secondary_type == 'applefile')\n                        continue;\n\n                    // part belongs to a related message and is linked\n                    if (preg_match('/^multipart\\/(related|relative)/', $mimetype)\n                        && ($mail_part->headers['content-id'] || $mail_part->headers['content-location'])\n                    ) {\n                        if ($mail_part->headers['content-id'])\n                            $mail_part->content_id = preg_replace(array('/^</', '/>$/'), '', $mail_part->headers['content-id']);\n                        if ($mail_part->headers['content-location'])\n                            $mail_part->content_location = $mail_part->headers['content-base'] . $mail_part->headers['content-location'];\n\n                        $this->inline_parts[] = $mail_part;\n                    }\n                    // regular attachment with valid content type\n                    // (content-type name regexp according to RFC4288.4.2)\n                    else if (preg_match('/^[a-z0-9!#$&.+^_-]+\\/[a-z0-9!#$&.+^_-]+$/i', $part_mimetype)) {\n                        $this->attachments[] = $mail_part;\n                    }\n                    // attachment with invalid content type\n                    // replace malformed content type with application/octet-stream (#1487767)\n                    else if ($mail_part->filename) {\n                        $mail_part->ctype_primary   = 'application';\n                        $mail_part->ctype_secondary = 'octet-stream';\n                        $mail_part->mimetype        = 'application/octet-stream';\n\n                        $this->attachments[] = $mail_part;\n                    }\n                }\n                // calendar part not marked as attachment (#1490325)\n                else if ($part_mimetype == 'text/calendar') {\n                    if (!$mail_part->filename) {\n                        $mail_part->filename = 'calendar.ics';\n                    }\n\n                    $this->attachments[] = $mail_part;\n                }\n            }\n\n            // if this was a related part try to resolve references\n            if (preg_match('/^multipart\\/(related|relative)/', $mimetype) && sizeof($this->inline_parts)) {\n                $a_replaces = array();\n                $img_regexp = '/^image\\/(gif|jpe?g|png|tiff|bmp|svg)/';\n\n                foreach ($this->inline_parts as $inline_object) {\n                    $part_url = $this->get_part_url($inline_object->mime_id, $inline_object->ctype_primary);\n                    if (isset($inline_object->content_id))\n                        $a_replaces['cid:'.$inline_object->content_id] = $part_url;\n                    if ($inline_object->content_location) {\n                        $a_replaces[$inline_object->content_location] = $part_url;\n                    }\n\n                    if (!empty($inline_object->filename)) {\n                        // MS Outlook sends sometimes non-related attachments as related\n                        // In this case multipart/related message has only one text part\n                        // We'll add all such attachments to the attachments list\n                        if (!isset($this->got_html_part)) {\n                            $this->attachments[] = $inline_object;\n                        }\n                        // MS Outlook sometimes also adds non-image attachments as related\n                        // We'll add all such attachments to the attachments list\n                        // Warning: some browsers support pdf in <img/>\n                        else if (!preg_match($img_regexp, $inline_object->mimetype)) {\n                            $this->attachments[] = $inline_object;\n                        }\n                        // @TODO: we should fetch HTML body and find attachment's content-id\n                        // to handle also image attachments without reference in the body\n                        // @TODO: should we list all image attachments in text mode?\n                    }\n                }\n\n                // add replace array to each content part\n                // (will be applied later when part body is available)\n                foreach ($this->parts as $i => $part) {\n                    if ($part->type == 'content')\n                        $this->parts[$i]->replaces = $a_replaces;\n                }\n            }\n        }\n        // message is a single part non-text\n        else if ($structure->filename) {\n            $this->attachments[] = $structure;\n        }\n        // message is a single part non-text (without filename)\n        else if (preg_match('/application\\//i', $mimetype)) {\n            $this->attachments[] = $structure;\n        }\n    }\n\n    /**\n     * Fill aflat array with references to all parts, indexed by part numbers\n     *\n     * @param rcube_message_part $part Message body structure\n     */\n    private function get_mime_numbers(&$part)\n    {\n        if (strlen($part->mime_id))\n            $this->mime_parts[$part->mime_id] = &$part;\n\n        if (is_array($part->parts))\n            for ($i=0; $i<count($part->parts); $i++)\n                $this->get_mime_numbers($part->parts[$i]);\n    }\n\n    /**\n     * Decode a Microsoft Outlook TNEF part (winmail.dat)\n     *\n     * @param rcube_message_part $part Message part to decode\n     * @return array\n     */\n    function tnef_decode(&$part)\n    {\n        // @TODO: attachment may be huge, handle body via file\n        $body     = $this->get_part_body($part->mime_id);\n        $tnef     = new rcube_tnef_decoder;\n        $tnef_arr = $tnef->decompress($body);\n        $parts    = array();\n\n        unset($body);\n\n        foreach ($tnef_arr as $pid => $winatt) {\n            $tpart = new rcube_message_part;\n\n            $tpart->filename        = $this->fix_attachment_name(trim($winatt['name']), $part);\n            $tpart->encoding        = 'stream';\n            $tpart->ctype_primary   = trim(strtolower($winatt['type']));\n            $tpart->ctype_secondary = trim(strtolower($winatt['subtype']));\n            $tpart->mimetype        = $tpart->ctype_primary . '/' . $tpart->ctype_secondary;\n            $tpart->mime_id         = 'winmail.' . $part->mime_id . '.' . $pid;\n            $tpart->size            = $winatt['size'];\n            $tpart->body            = $winatt['stream'];\n\n            $parts[] = $tpart;\n            unset($tnef_arr[$pid]);\n        }\n\n        return $parts;\n    }\n\n    /**\n     * Parse message body for UUencoded attachments bodies\n     *\n     * @param rcube_message_part $part Message part to decode\n     * @return array\n     */\n    function uu_decode(&$part)\n    {\n        // @TODO: messages may be huge, handle body via file\n        $part->body = $this->get_part_body($part->mime_id);\n        $parts      = array();\n        $pid        = 0;\n\n        // FIXME: line length is max.65?\n        $uu_regexp_begin = '/begin [0-7]{3,4} ([^\\r\\n]+)\\r?\\n/s';\n        $uu_regexp_end   = '/`\\r?\\nend((\\r?\\n)|($))/s';\n\n        while (preg_match($uu_regexp_begin, $part->body, $matches, PREG_OFFSET_CAPTURE)) {\n            $startpos = $matches[0][1];\n\n            if (!preg_match($uu_regexp_end, $part->body, $m, PREG_OFFSET_CAPTURE, $startpos)) {\n                break;\n            }\n\n            $endpos    = $m[0][1];\n            $begin_len = strlen($matches[0][0]);\n            $end_len   = strlen($m[0][0]);\n\n            // extract attachment body\n            $filebody = substr($part->body, $startpos + $begin_len, $endpos - $startpos - $begin_len - 1);\n            $filebody = str_replace(\"\\r\\n\", \"\\n\", $filebody);\n\n            // remove attachment body from the message body\n            $part->body = substr_replace($part->body, '', $startpos, $endpos + $end_len - $startpos);\n            // mark body as modified so it will not be cached by rcube_imap_cache\n            $part->body_modified = true;\n\n            // add attachments to the structure\n            $uupart = new rcube_message_part;\n            $uupart->filename = trim($matches[1][0]);\n            $uupart->encoding = 'stream';\n            $uupart->body     = convert_uudecode($filebody);\n            $uupart->size     = strlen($uupart->body);\n            $uupart->mime_id  = 'uu.' . $part->mime_id . '.' . $pid;\n\n            $ctype = rcube_mime::file_content_type($uupart->body, $uupart->filename, 'application/octet-stream', true);\n            $uupart->mimetype = $ctype;\n            list($uupart->ctype_primary, $uupart->ctype_secondary) = explode('/', $ctype);\n\n            $parts[] = $uupart;\n            $pid++;\n        }\n\n        return $parts;\n    }\n\n    /**\n     * Fix attachment name encoding if needed/possible\n     */\n    protected function fix_attachment_name($name, $part)\n    {\n        if ($name == rcube_charset::clean($name)) {\n            return $name;\n        }\n\n        // find charset from part or its parent(s)\n        if ($part->charset) {\n            $charsets[] = $part->charset;\n        }\n        else {\n            // check first part (common case)\n            $n = strpos($part->mime_id, '.') ? preg_replace('/\\.[0-9]+$/', '', $part->mime_id) . '.1' : 1;\n            if (($_part = $this->mime_parts[$n]) && $_part->charset) {\n                $charsets[] = $_part->charset;\n            }\n\n            // check parents' charset\n            $items = explode('.', $part->mime_id);\n            for ($i = count($items)-1; $i > 0; $i--) {\n                $last   = array_pop($items);\n                $parent = $this->mime_parts[join('.', $items)];\n\n                if ($parent && $parent->charset) {\n                    $charsets[] = $parent->charset;\n                }\n            }\n        }\n\n        if ($this->headers->charset) {\n            $charsets[] = $this->headers->charset;\n        }\n\n        if (empty($charsets)) {\n            $rcube      = rcube::get_instance();\n            $charsets[] = rcube_charset::detect($name, $rcube->config->get('default_charset', RCUBE_CHARSET));\n        }\n\n        foreach (array_unique($charsets) as $charset) {\n            $_name = rcube_charset::convert($name, $charset);\n\n            if ($_name == rcube_charset::clean($_name)) {\n                if (!$part->charset) {\n                    $part->charset = $charset;\n                }\n\n                return $_name;\n            }\n        }\n\n        return $name;\n    }\n\n    /**\n     * Deprecated methods (to be removed)\n     */\n\n    public static function unfold_flowed($text)\n    {\n        return rcube_mime::unfold_flowed($text);\n    }\n\n    public static function format_flowed($text, $length = 72)\n    {\n        return rcube_mime::format_flowed($text, $length);\n    }\n}\n", "code_before": "<?php\n\n/*\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Logical representation of a mail message with all its data          |\n |   and related functions                                               |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Logical representation of a mail message with all its data\n * and related functions\n */\nclass rcube_message\n{\n    /**\n     * Instance of framework class.\n     *\n     * @var rcube\n     */\n    protected $app;\n\n    /**\n     * Instance of storage class\n     *\n     * @var rcube_storage\n     */\n    protected $storage;\n\n    /**\n     * Instance of mime class\n     *\n     * @var rcube_mime\n     */\n    protected $mime;\n\n    protected $opt = [];\n    protected $parse_alternative = false;\n    protected $got_html_part = false;\n    protected $tnef_decode = false;\n\n    /**\n     * This holds a list of Content-IDs and Content-Locations by which parts of\n     * this message are referenced (e.g. in HTML parts).\n     *\n     * @var array\n     */\n    protected $replacement_references = [];\n\n    public $uid;\n    public $folder;\n    public $headers;\n    public $sender;\n    public $context;\n    public $body;\n    public $subject = '';\n    public $is_safe = false;\n    public $pgp_mime = false;\n    public $encrypted_part;\n\n    /** @var array<rcube_message_part> */\n    public $parts = [];\n\n    /** @var array<rcube_message_part> */\n    public $mime_parts = [];\n\n    /** @var array<rcube_message_part> */\n    public $attachments = [];\n\n    public const BODY_MAX_SIZE = 1048576; // 1MB\n\n    /**\n     * __construct\n     *\n     * Provide a uid, and parse message structure.\n     *\n     * @param string $uid     the message UID\n     * @param string $folder  Folder name\n     * @param bool   $is_safe Security flag\n     */\n    public function __construct($uid, $folder = null, $is_safe = false)\n    {\n        // decode combined UID-folder identifier\n        if (preg_match('/^[0-9.]+-.+/', $uid)) {\n            [$uid, $folder] = explode('-', $uid, 2);\n        }\n\n        $context = null;\n        if (preg_match('/^([0-9]+)\\.([0-9.]+)$/', $uid, $matches)) {\n            $uid = $matches[1];\n            $context = $matches[2];\n        }\n\n        $this->uid = $uid;\n        $this->context = $context;\n        $this->app = rcube::get_instance();\n        $this->storage = $this->app->get_storage();\n        $this->folder = is_string($folder) && strlen($folder) ? $folder : $this->storage->get_folder();\n\n        // Set current folder\n        $this->storage->set_folder($this->folder);\n        $this->storage->set_options(['all_headers' => true]);\n\n        $this->headers = $this->storage->get_message($uid);\n\n        if (!$this->headers) {\n            return;\n        }\n\n        $this->tnef_decode = (bool) $this->app->config->get('tnef_decode', true);\n\n        $this->set_safe($is_safe || !empty($_SESSION['safe_messages'][$this->folder . ':' . $uid]));\n        $this->opt = [\n            'safe' => $this->is_safe,\n            'prefer_html' => $this->app->config->get('prefer_html'),\n            'get_url' => $this->app->url([\n                    'action' => 'get',\n                    'mbox' => $this->folder,\n                    'uid' => $uid,\n                ],\n                false, false, true\n            ),\n        ];\n\n        $this->mime = new rcube_mime($this->headers->charset);\n        $this->subject = str_replace(\"\\n\", '', (string) $this->headers->get('subject'));\n        $from = $this->mime->decode_address_list($this->headers->from, 1);\n        $this->sender = current($from);\n\n        if (!empty($this->headers->structure)) {\n            $this->get_mime_numbers($this->headers->structure);\n            $this->parse_structure($this->headers->structure);\n        } elseif ($this->context === null) {\n            $this->body = $this->storage->get_body($uid);\n        }\n\n        // notify plugins and let them analyze this structured message object\n        $this->app->plugins->exec_hook('message_load', ['object' => $this]);\n    }\n\n    /**\n     * Return a (decoded) message header\n     *\n     * @param string $name Header name\n     * @param bool   $raw  Don't mime-decode the value\n     *\n     * @return string|null Header value\n     */\n    public function get_header($name, $raw = false)\n    {\n        if (empty($this->headers)) {\n            return null;\n        }\n\n        return $this->headers->get($name, !$raw);\n    }\n\n    /**\n     * Set is_safe var and session data\n     *\n     * @param bool $safe enable/disable\n     */\n    public function set_safe($safe = true)\n    {\n        $_SESSION['safe_messages'][$this->folder . ':' . $this->uid] = $this->is_safe = $safe;\n    }\n\n    /**\n     * Compose a valid URL for getting a message part\n     *\n     * @param string $mime_id Part MIME-ID\n     * @param mixed  $embed   Mimetype class for parts to be embedded\n     *\n     * @return string|false URL or false if part does not exist\n     */\n    public function get_part_url($mime_id, $embed = false)\n    {\n        if (!empty($this->mime_parts[$mime_id])) {\n            return $this->opt['get_url'] . '&_part=' . $mime_id\n                . ($embed ? '&_embed=1&_mimeclass=' . $embed : '');\n        }\n\n        return false;\n    }\n\n    /**\n     * Get content of a specific part of this message\n     *\n     * @param string   $mime_id           Part MIME-ID\n     * @param resource $fp                File pointer to save the message part\n     * @param bool     $skip_charset_conv Disables charset conversion\n     * @param int      $max_bytes         Only read this number of bytes\n     * @param bool     $formatted         Enables formatting of text/* parts bodies\n     *\n     * @return string|bool Part content, False on error\n     *\n     * @deprecated\n     */\n    public function get_part_content($mime_id, $fp = null, $skip_charset_conv = false, $max_bytes = 0, $formatted = true)\n    {\n        $part = $this->mime_parts[$mime_id] ?? null;\n\n        if ($part) {\n            // stored in message structure (winmail/inline-uuencode)\n            if (!empty($part->body) || $part->encoding == 'stream') {\n                if ($fp) {\n                    fwrite($fp, $part->body);\n                }\n\n                return $fp ? true : $part->body;\n            }\n\n            // get from IMAP\n            $this->storage->set_folder($this->folder);\n\n            return $this->storage->get_message_part($this->uid, $mime_id, $part,\n                null, $fp, $skip_charset_conv, $max_bytes, $formatted);\n        }\n\n        return false;\n    }\n\n    /**\n     * Get content of a specific part of this message\n     *\n     * @param string $mime_id   Part ID\n     * @param bool   $formatted Enables formatting of text/* parts bodies\n     * @param int    $max_bytes Only return/read this number of bytes\n     * @param mixed  $mode      NULL to return a string, -1 to print body\n     *                          or file pointer to save the body into\n     *\n     * @return string|bool Part content or operation status, False on error\n     */\n    public function get_part_body($mime_id, $formatted = false, $max_bytes = 0, $mode = null)\n    {\n        if (empty($this->mime_parts[$mime_id])) {\n            return false;\n        }\n\n        $part = $this->mime_parts[$mime_id];\n\n        // allow plugins to modify part body\n        $plugin = $this->app->plugins->exec_hook('message_part_body',\n            ['object' => $this, 'part' => $part]);\n\n        // only text parts can be formatted\n        $formatted = $formatted && $part->ctype_primary == 'text';\n\n        // part body not fetched yet... save in memory if it's small enough\n        if ($part->body === null && is_numeric($mime_id) && $part->size < self::BODY_MAX_SIZE) {\n            $this->storage->set_folder($this->folder);\n            // Warning: body here should be always unformatted\n            $body = $this->storage->get_message_part($this->uid, $mime_id, $part, null, null, true, 0, false);\n            if ($body === false) {\n                return false;\n            }\n\n            $part->body = $body;\n        }\n\n        $charset = !empty($this->headers) ? $this->headers->charset : null;\n\n        // body stored in message structure (winmail/inline-uuencode)\n        if (is_string($part->body) || $part->encoding == 'stream') {\n            $body = $part->body;\n\n            if ($formatted) {\n                $body = self::format_part_body($body, $part, $charset);\n            }\n\n            if ($max_bytes && strlen($body) > $max_bytes) {\n                $body = substr($body, 0, $max_bytes);\n            }\n\n            if (is_resource($mode)) {\n                fwrite($mode, $body);\n                @rewind($mode);\n                return true;\n            }\n\n            if ($mode === -1) {\n                echo $body;\n                return true;\n            }\n\n            return $body;\n        }\n\n        // get the body from IMAP\n        $this->storage->set_folder($this->folder);\n\n        $body = $this->storage->get_message_part($this->uid, $mime_id, $part,\n            $mode === -1, is_resource($mode) ? $mode : null,\n            !($mode && $formatted), $max_bytes, $mode && $formatted);\n\n        if (is_resource($mode)) {\n            @rewind($mode);\n            return $body !== false;\n        }\n\n        if (!$mode && is_string($body) && $formatted) {\n            $body = self::format_part_body($body, $part, $charset);\n        }\n\n        return $body;\n    }\n\n    /**\n     * Format text message part for display\n     *\n     * @param string             $body            Part body\n     * @param rcube_message_part $part            Part object\n     * @param string             $default_charset Fallback charset if part charset is not specified\n     *\n     * @return string Formatted body\n     */\n    public static function format_part_body($body, $part, $default_charset = null)\n    {\n        // remove useless characters\n        $body = preg_replace('/[\\t\\r\\0\\x0B]+\\n/', \"\\n\", $body);\n\n        // remove NULL characters if any (#1486189)\n        if (str_contains($body, \"\\x00\")) {\n            $body = str_replace(\"\\x00\", '', $body);\n        }\n\n        // detect charset...\n        if (empty($part->charset) || strtoupper($part->charset) == 'US-ASCII') {\n            // try to extract charset information from HTML meta tag (#1488125)\n            if ($part->ctype_secondary == 'html' && preg_match('/<meta[^>]+charset=([a-z0-9-_]+)/i', $body, $m)) {\n                $part->charset = strtoupper($m[1]);\n            } elseif ($default_charset) {\n                $part->charset = $default_charset;\n            } else {\n                $rcube = rcube::get_instance();\n                $part->charset = $rcube->config->get('default_charset', RCUBE_CHARSET);\n            }\n        }\n\n        // ..convert charset encoding\n        $body = rcube_charset::convert($body, $part->charset);\n\n        return $body;\n    }\n\n    /**\n     * Determine if the message contains a HTML part. This must to be\n     * a real part not an attachment (or its part)\n     *\n     * @param bool                    $check_convertible Enables checking for text/enriched or markdown parts, too\n     * @param rcube_message_part|null &$ref              Reference to the part if found\n     *\n     * @return bool True if a HTML is available, False if not\n     */\n    public function has_html_part($check_convertible = false, &$ref = null)\n    {\n        // check all message parts\n        foreach ($this->mime_parts as $part) {\n            if ($part->mimetype == 'text/html' || ($check_convertible && ($part->mimetype == 'text/enriched' || $part->mimetype === 'text/markdown' || $part->mimetype === 'text/x-markdown'))) {\n                // Skip if part is an attachment, don't use is_attachment() here\n                if ($part->filename) {\n                    continue;\n                }\n\n                if (!$part->size) {\n                    continue;\n                }\n\n                if (!$this->check_context($part)) {\n                    continue;\n                }\n\n                // The HTML body part extracted from a winmail.dat attachment part\n                if (str_starts_with($part->mime_id, 'winmail.')) {\n                    $ref = $part;\n\n                    return true;\n                }\n\n                $level = explode('.', $part->mime_id);\n                $depth = count($level);\n                $last = '';\n\n                // Check if the part does not belong to a message/rfc822 part\n                // @phpstan-ignore-next-line\n                while (array_pop($level) !== null) {\n                    if (!count($level)) {\n                        break;\n                    }\n\n                    $parent = $this->mime_parts[implode('.', $level)];\n\n                    if (!$this->check_context($parent)) {\n                        break;\n                    }\n\n                    if ($parent->mimetype == 'message/rfc822') {\n                        continue 2;\n                    }\n                }\n\n                $ref = $part;\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Determine if the message contains a text/plain part. This must to be\n     * a real part not an attachment (or its part)\n     *\n     * @param ?rcube_message_part &$ref Reference to the part if found\n     *\n     * @return bool True if a plain text part is available, False if not\n     */\n    public function has_text_part(&$ref = null)\n    {\n        // check all message parts\n        foreach ($this->mime_parts as $part) {\n            if ($part->mimetype == 'text/plain') {\n                // Skip if part is an attachment, don't use is_attachment() here\n                if (!empty($part->filename)) {\n                    continue;\n                }\n\n                if (empty($part->size)) {\n                    continue;\n                }\n\n                if (!$this->check_context($part)) {\n                    continue;\n                }\n\n                $level = explode('.', $part->mime_id);\n\n                // Check if the part does not belong to a message/rfc822 part\n                // @phpstan-ignore-next-line\n                while (array_pop($level) !== null) {\n                    if (!count($level)) {\n                        break;\n                    }\n\n                    $parent = $this->mime_parts[implode('.', $level)];\n\n                    if (!$this->check_context($parent)) {\n                        break;\n                    }\n\n                    if ($parent->mimetype == 'message/rfc822') {\n                        continue 2;\n                    }\n                }\n\n                $ref = $part;\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Return the first HTML part of this message\n     *\n     * @param rcube_message_part &$part             Reference to the part if found\n     * @param bool               $check_convertible Enables checking for text/enriched or markdown parts, too\n     *\n     * @return string|null HTML message part content\n     */\n    public function first_html_part(&$part = null, $check_convertible = false)\n    {\n        if ($this->has_html_part($check_convertible, $part)) {\n            $body = $this->get_part_body($part->mime_id, true);\n\n            if ($part->mimetype == 'text/enriched') {\n                $body = rcube_enriched::to_html($body);\n            } elseif ($part->mimetype == 'text/markdown' || $part->mimetype == 'text/x-markdown') {\n                $body = rcube_markdown::to_html($body);\n            }\n\n            return $body;\n        }\n\n        return null;\n    }\n\n    /**\n     * Return the first text part of this message.\n     * If there's no text/plain part but $strict=true and text/html part\n     * exists, it will be returned in text/plain format.\n     *\n     * @param rcube_message_part &$part  Reference to the part if found\n     * @param bool               $strict Check only text/plain parts\n     *\n     * @return string|null Plain text message/part content\n     */\n    public function first_text_part(&$part = null, $strict = false)\n    {\n        // no message structure, return complete body\n        if (empty($this->parts)) {\n            return $this->body;\n        }\n\n        if ($this->has_text_part($part)) {\n            return $this->get_part_body($part->mime_id, true);\n        }\n\n        if (!$strict && ($body = $this->first_html_part($part, true))) {\n            // create instance of html2text class\n            $h2t = new rcube_html2text($body);\n            return $h2t->get_text();\n        }\n\n        return null;\n    }\n\n    /**\n     * Return message parts in current context\n     *\n     * @return array<rcube_message_part> Message parts\n     */\n    public function mime_parts()\n    {\n        if ($this->context === null) {\n            return $this->mime_parts;\n        }\n\n        $parts = [];\n\n        foreach ($this->mime_parts as $part_id => $part) {\n            if ($this->check_context($part)) {\n                $parts[$part_id] = $part;\n            }\n        }\n\n        return $parts;\n    }\n\n    /**\n     * Checks if part of the message is an attachment (or part of it)\n     *\n     * @param rcube_message_part $part Message part\n     *\n     * @return bool True if the part is an attachment part\n     */\n    public function is_attachment($part)\n    {\n        foreach ($this->attachments as $att_part) {\n            if ($att_part->mime_id === $part->mime_id) {\n                return true;\n            }\n\n            // check if the part is a subpart of another attachment part (message/rfc822)\n            if ($att_part->mimetype == 'message/rfc822') {\n                if (in_array($part, (array) $att_part->parts)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    private function parse_html_for_replacement_references(rcube_message_part $part): array\n    {\n        // Check if the part is actually referenced in a text/html-part sibling\n        // (i.e. that is part of the same `$part`).\n        $html_parts = $this->find_html_parts($part);\n        if (empty($html_parts)) {\n            return [];\n        }\n        // Note: There might be more than one HTML part, thus we use a callback\n        // and concatenate the results.\n        $html_content = implode('', array_map(function ($html_part) { return $this->get_part_body($html_part->mime_id); }, $html_parts));\n\n        $referenced_content_identifiers = [];\n        $replacements = [];\n        // TODO: recursion.\n        // TODO: only get replacements from siblings\n        foreach ($this->mime_parts as $mime_part) {\n            $replacements = array_merge($replacements, array_keys($mime_part->replaces));\n        }\n        foreach ($replacements as $content_identifier) {\n            // Is the Content-Id or Content-Location used?\n            // TODO: match Content-Location more strictly. E.g. \"image.jpg\" is a\n            // valid value here, too, which can easily be matched wrongly\n            // currently.\n            if (str_contains($html_content, $content_identifier)) {\n                $referenced_content_identifiers[] = preg_replace('/^cid:/', '', $content_identifier);\n            }\n        }\n        return $referenced_content_identifiers;\n    }\n\n    /**\n     * Get a cached list of replacement references, which are collected during\n     * parsing from Content-Id and Content-Location headers of mime-parts.\n     */\n    protected function get_replacement_references(rcube_message_part $part): array\n    {\n        if (!isset($this->replacement_references[$part->mime_id])) {\n            $this->replacement_references[$part->mime_id] = $this->parse_html_for_replacement_references($part);\n        }\n\n        return $this->replacement_references[$part->mime_id];\n    }\n\n    /**\n     * Checks if a given message part is referred to from another message part.\n     * Usually this happens if an HTML-part includes images to show inline, but\n     * technically there can be other cases, too.\n     * In any case, an attachment that is *not* referred to, shall be shown to\n     * the users (either in/after the message body or as downloadable file).\n     *\n     * @param rcube_message_part $part Message part\n     *\n     * @return bool True if the part is an attachment part\n     */\n    public function is_referred_attachment(rcube_message_part $part): bool\n    {\n        // This code is intentionally verbose to keep it comprehensible.\n        $references = $this->get_replacement_references($part);\n\n        // Filter out attachments that are referenced by their Content-ID in\n        // another mime-part.\n        if (!empty($part->content_id) && in_array($part->content_id, $references)) {\n            return true;\n        }\n\n        // Filter out attachments that are referenced by their Content-Location\n        // in another mime-part.\n        if (!empty($part->content_location) && in_array($part->content_location, $references)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * In a multipart/encrypted encrypted message,\n     * find the encrypted message payload part.\n     *\n     * @return rcube_message_part|null\n     */\n    public function get_multipart_encrypted_part()\n    {\n        foreach ($this->mime_parts as $mime_id => $mpart) {\n            if ($mpart->mimetype == 'multipart/encrypted') {\n                $this->pgp_mime = true;\n            }\n            if ($this->pgp_mime && ($mpart->mimetype == 'application/octet-stream'\n                    || (!empty($mpart->filename) && $mpart->filename != 'version.txt'))\n            ) {\n                $this->encrypted_part = $mime_id;\n                return $mpart;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Read the message structure returned by the IMAP server\n     * and build flat lists of content parts and attachments\n     *\n     * @param rcube_message_part $structure Message structure node\n     * @param bool               $recursive True when called recursively\n     */\n    private function parse_structure($structure, $recursive = false)\n    {\n        // real content-type of message/rfc822 part\n        if ($structure->mimetype == 'message/rfc822' && !empty($structure->real_mimetype)) {\n            $mimetype = $structure->real_mimetype;\n\n            // parse headers from message/rfc822 part\n            if (!isset($structure->headers['subject']) && !isset($structure->headers['from'])) {\n                $part_body = $this->get_part_body($structure->mime_id, false, 32768);\n\n                if (str_contains($part_body, \"\\r\\n\\r\\n\")) {\n                    [$headers] = explode(\"\\r\\n\\r\\n\", $part_body, 2);\n                }\n\n                $structure->headers = rcube_mime::parse_headers($headers);\n\n                if ($this->context === $structure->mime_id) {\n                    $this->headers = rcube_message_header::from_array($structure->headers);\n                }\n\n                // For small text messages we can optimize, so an additional FETCH is not needed\n                if ($structure->size < 32768) {\n                    $decoder = new rcube_mime_decode();\n                    $decoded = $decoder->decode($part_body);\n\n                    // Non-multipart message\n                    if (isset($decoded->body) && count($structure->parts) == 1) {\n                        $structure->parts[0]->body = $decoded->body;\n                    }\n                    // Multipart message\n                    else {\n                        foreach ($decoded->parts as $idx => $p) {\n                            if (array_key_exists($idx, $structure->parts)) {\n                                $structure->parts[$idx]->body = $p->body;\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            $mimetype = $structure->mimetype;\n        }\n\n        // show message headers\n        if (\n            $recursive\n            && (\n                isset($structure->headers['subject'])\n                || !empty($structure->headers['from'])\n                || !empty($structure->headers['to'])\n            )\n        ) {\n            $c = new rcube_message_part();\n            $c->type = 'headers';\n            $c->headers = $structure->headers;\n            $this->add_part($c);\n        }\n\n        // Allow plugins to handle message parts\n        $plugin = $this->app->plugins->exec_hook('message_part_structure', [\n            'object' => $this,\n            'structure' => $structure,\n            'mimetype' => $mimetype,\n            'recursive' => $recursive,\n        ]);\n\n        if ($plugin['abort']) {\n            return;\n        }\n\n        /** @var rcube_message_part $structure */\n        $structure = $plugin['structure'];\n        $mimetype = $plugin['mimetype'];\n        $recursive = $plugin['recursive'];\n\n        [$message_ctype_primary, $message_ctype_secondary] = explode('/', $mimetype);\n\n        // print body if message doesn't have multiple parts\n        if ($message_ctype_primary == 'text' && !$recursive) {\n            // parts with unsupported type add to attachments list\n            if (!in_array($message_ctype_secondary, ['plain', 'html', 'enriched', 'markdown', 'x-markdown'])) {\n                $this->add_attachment($structure);\n                return;\n            }\n\n            $structure->type = 'content';\n            $this->add_part($structure);\n\n            // Parse simple (plain text) message body\n            if ($message_ctype_secondary == 'plain') {\n                foreach ((array) $this->uu_decode($structure) as $uupart) {\n                    $this->mime_parts[$uupart->mime_id] = $uupart;\n                    $this->add_attachment($uupart);\n                }\n            }\n        }\n        // the same for pgp signed messages\n        elseif ($mimetype == 'application/pgp' && !$recursive) {\n            $structure->type = 'content';\n            $this->add_part($structure);\n        }\n        // message contains (more than one!) alternative parts\n        elseif ($mimetype == 'multipart/alternative' && count($structure->parts) > 1) {\n            // get html/plaintext parts, other add to attachments list\n            foreach ($structure->parts as $p => $sub_part) {\n                $sub_mimetype = $sub_part->mimetype;\n                $is_multipart = preg_match('/^multipart\\/(related|relative|mixed|alternative)/', $sub_mimetype);\n\n                // skip empty text parts\n                if (!$sub_part->size && !$is_multipart) {\n                    continue;\n                }\n\n                // We've encountered (malformed) messages with more than\n                // one text/plain or text/html part here. There's no way to choose\n                // which one is better, so we'll display first of them and add\n                // others as attachments (#1489358)\n\n                // check if sub part is\n                if ($is_multipart) {\n                    $related_part = $p;\n                } elseif ($sub_mimetype == 'text/plain' && !isset($plain_part)) {\n                    $plain_part = $p;\n                } elseif ($sub_mimetype == 'text/html' && !isset($html_part)) {\n                    $html_part = $p;\n                    $this->got_html_part = true;\n                } elseif ($sub_mimetype == 'text/enriched' && !isset($enriched_part)) {\n                    $enriched_part = $p;\n                } elseif (($sub_mimetype === 'text/markdown' || $sub_mimetype === 'text/x-markdown') && !isset($markdown_part)) {\n                    $markdown_part = $p;\n                } else {\n                    // add unsupported/unrecognized parts to attachments list\n                    $this->add_attachment($sub_part);\n                }\n            }\n\n            // parse related part (alternative part could be in here)\n            if (isset($related_part) && !$this->parse_alternative) {\n                $this->parse_alternative = true;\n                $this->parse_structure($structure->parts[$related_part], true);\n                $this->parse_alternative = false;\n\n                // if plain part was found, we should unset it if html is preferred\n                if (!empty($this->opt['prefer_html']) && count($this->parts)) {\n                    $plain_part = null;\n                }\n            }\n\n            // choose html/plain part to print\n            $print_part = null;\n            if (isset($html_part) && !empty($this->opt['prefer_html'])) {\n                $print_part = $structure->parts[$html_part];\n            } elseif (isset($enriched_part)) {\n                $print_part = $structure->parts[$enriched_part];\n            } elseif (isset($markdown_part)) {\n                $print_part = $structure->parts[$markdown_part];\n            } elseif (isset($plain_part)) {\n                $print_part = $structure->parts[$plain_part];\n            }\n\n            // add the right message body\n            if (is_object($print_part)) {\n                $print_part->type = 'content';\n\n                // Allow plugins to handle also this part\n                $plugin = $this->app->plugins->exec_hook('message_part_structure', [\n                    'object' => $this,\n                    'structure' => $print_part,\n                    'mimetype' => $print_part->mimetype,\n                    'recursive' => true,\n                ]);\n\n                if (!$plugin['abort']) {\n                    $this->add_part($print_part);\n                }\n            }\n            // show plaintext warning\n            elseif (isset($html_part) && empty($this->parts)) {\n                $c = new rcube_message_part();\n                $c->type = 'content';\n                $c->ctype_primary = 'text';\n                $c->ctype_secondary = 'plain';\n                $c->mimetype = 'text/plain';\n                $c->realtype = 'text/html';\n\n                $this->add_part($c);\n            }\n        }\n        // this is an encrypted message -> create a plaintext body with the according message\n        elseif ($mimetype == 'multipart/encrypted') {\n            $p = new rcube_message_part();\n            $p->type = 'content';\n            $p->ctype_primary = 'text';\n            $p->ctype_secondary = 'plain';\n            $p->mimetype = 'text/plain';\n            $p->realtype = 'multipart/encrypted';\n            $p->mime_id = $structure->mime_id;\n\n            $this->add_part($p);\n\n            // add encrypted payload part as attachment\n            if (!empty($structure->parts)) {\n                for ($i = 0; $i < count($structure->parts); $i++) {\n                    $subpart = $structure->parts[$i];\n                    if ($subpart->mimetype == 'application/octet-stream' || !empty($subpart->filename)) {\n                        $this->add_attachment($subpart);\n                    }\n                }\n            }\n        }\n        // this is an S/MIME encrypted message -> create a plaintext body with the according message\n        elseif ($mimetype == 'application/pkcs7-mime') {\n            $p = new rcube_message_part();\n            $p->type = 'content';\n            $p->ctype_primary = 'text';\n            $p->ctype_secondary = 'plain';\n            $p->mimetype = 'text/plain';\n            $p->realtype = 'application/pkcs7-mime';\n            $p->mime_id = $structure->mime_id;\n\n            $this->add_part($p);\n\n            if (!empty($structure->filename)) {\n                $this->add_attachment($structure);\n            }\n        }\n        // message contains multiple parts\n        elseif (!empty($structure->parts)) {\n            // iterate over parts\n            foreach ($structure->parts as $mail_part) {\n                $primary_type = $mail_part->ctype_primary;\n                $secondary_type = $mail_part->ctype_secondary;\n                $part_mimetype = $mail_part->mimetype;\n\n                // multipart/alternative or message/rfc822\n                if ($primary_type == 'multipart' || $part_mimetype == 'message/rfc822') {\n                    // list message/rfc822 as attachment as well\n                    if ($part_mimetype == 'message/rfc822') {\n                        $this->add_attachment($mail_part);\n                    }\n\n                    $this->parse_structure($mail_part, true);\n                }\n                // part text/[plain|html] or delivery status\n                elseif ((in_array($part_mimetype, ['text/plain', 'text/html', 'text/markdown', 'text/x-markdown']) && $mail_part->disposition != 'attachment')\n                    || in_array($part_mimetype, ['message/delivery-status', 'text/rfc822-headers', 'message/disposition-notification'])\n                ) {\n                    // Allow plugins to handle also this part\n                    $plugin = $this->app->plugins->exec_hook('message_part_structure', [\n                        'object' => $this,\n                        'structure' => $mail_part,\n                        'mimetype' => $part_mimetype,\n                        'recursive' => true,\n                    ]);\n\n                    if ($plugin['abort']) {\n                        continue;\n                    }\n\n                    if ($part_mimetype == 'text/html' && $mail_part->size) {\n                        $this->got_html_part = true;\n                    }\n\n                    $mail_part = $plugin['structure'];\n                    [$primary_type, $secondary_type] = explode('/', $plugin['mimetype']);\n\n                    // add text part if it matches the prefs\n                    if (!$this->parse_alternative\n                        || ($secondary_type == 'html' && $this->opt['prefer_html'])\n                        || ($secondary_type == 'plain' && !$this->opt['prefer_html'])\n                    ) {\n                        $mail_part->type = 'content';\n                        $this->add_part($mail_part);\n                    }\n\n                    // list as attachment as well\n                    if (!empty($mail_part->filename)) {\n                        $this->add_attachment($mail_part);\n                    }\n                }\n                // ignore \"virtual\" protocol parts\n                elseif ($primary_type == 'protocol') {\n                    continue;\n                }\n                // part is Microsoft Outlook TNEF (winmail.dat)\n                // Note: It can be application/ms-tnef or application/vnd.ms-tnef\n                elseif ($primary_type == 'application' && str_contains($secondary_type, 'ms-tnef')\n                    && $this->tnef_decode\n                ) {\n                    $tnef_parts = (array) $this->tnef_decode($mail_part);\n\n                    foreach ($tnef_parts as $tpart) {\n                        $this->mime_parts[$tpart->mime_id] = $tpart;\n\n                        if (strpos($tpart->mime_id, '.html')) {\n                            if ($this->opt['prefer_html']) {\n                                $tpart->type = 'content';\n\n                                // Reset type on the plain text part that usually is added to winmail.dat messages\n                                // (on the same level in the structure as the attachment itself)\n                                $level = count(explode('.', $mail_part->mime_id));\n                                foreach ($this->parts as $p) {\n                                    if ($p->type == 'content' && $p->mimetype == 'text/plain'\n                                        && count(explode('.', $p->mime_id)) == $level\n                                    ) {\n                                        $p->type = null;\n                                    }\n                                }\n                            }\n                            $this->add_part($tpart);\n                        } else {\n                            $this->add_attachment($tpart);\n                        }\n                    }\n\n                    // add winmail.dat to the list if it's content is unknown\n                    if (empty($tnef_parts) && !empty($mail_part->filename)) {\n                        $this->mime_parts[$mail_part->mime_id] = $mail_part;\n                        $this->add_attachment($mail_part);\n                    }\n                }\n                // part is a file/attachment\n                elseif (\n                    preg_match('/^(inline|attach)/', $mail_part->disposition)\n                    || !empty($mail_part->headers['content-id'])\n                    || ($mail_part->filename\n                        && (empty($mail_part->disposition) || preg_match('/^[a-z0-9!#$&.+^_-]+$/i', $mail_part->disposition)))\n                ) {\n                    // skip apple resource forks\n                    if ($message_ctype_secondary == 'appledouble' && $secondary_type == 'applefile') {\n                        continue;\n                    }\n\n                    if (!empty($mail_part->headers['content-id'])) {\n                        $mail_part->content_id = preg_replace(['/^</', '/>$/'], '', $mail_part->headers['content-id']);\n                    }\n\n                    if (!empty($mail_part->headers['content-location'])) {\n                        $mail_part->content_location = '';\n                        if (!empty($mail_part->headers['content-base'])) {\n                            $mail_part->content_location = $mail_part->headers['content-base'];\n                        }\n                        $mail_part->content_location .= $mail_part->headers['content-location'];\n                    }\n\n                    // application/smil message's are known to use inline images that aren't really inline (#8870)\n                    // TODO: This code probably does not belong here. I.e. we should not default to\n                    // disposition=inline in rcube_imap::structure_part().\n                    if ($primary_type === 'image'\n                        && !empty($structure->ctype_parameters['type'])\n                        && $structure->ctype_parameters['type'] === 'application/smil'\n                    ) {\n                        $mail_part->disposition = 'attachment';\n                    }\n\n                    // part belongs to a related message\n                    // Note: mixed is not supposed to contain inline images, but we've found such examples (#5905)\n                    if (preg_match('/^multipart\\/(related|relative|mixed)/', $mimetype)) {\n                        $this->add_attachment($mail_part);\n                        continue;\n                    }\n\n                    // Any non-inline attachment\n                    if (!preg_match('/^inline/i', $mail_part->disposition) || empty($mail_part->headers['content-id'])) {\n                        // Content-Type name regexp according to RFC4288.4.2\n                        if (!preg_match('/^[a-z0-9!#$&.+^_-]+\\/[a-z0-9!#$&.+^_-]+$/i', $part_mimetype)) {\n                            // replace malformed content type with application/octet-stream (#1487767)\n                            $mail_part->ctype_primary = 'application';\n                            $mail_part->ctype_secondary = 'octet-stream';\n                            $mail_part->mimetype = 'application/octet-stream';\n                        }\n\n                        $this->add_attachment($mail_part);\n                    }\n                }\n                // calendar part not marked as attachment (#1490325)\n                elseif ($part_mimetype == 'text/calendar') {\n                    if (!$mail_part->filename) {\n                        $mail_part->filename = 'calendar.ics';\n                    }\n\n                    $this->add_attachment($mail_part);\n                }\n                // Last resort, non-text and non-multipart part of multipart/mixed message (#7117)\n                elseif ($mimetype == 'multipart/mixed'\n                    && $primary_type && $primary_type != 'text' && $primary_type != 'multipart'\n                ) {\n                    $this->add_attachment($mail_part);\n                }\n            }\n\n            // if this is a related part try to resolve references\n            // Note: mixed is not supposed to contain inline images, but we've found such examples (#5905)\n            if (preg_match('/^multipart\\/(related|relative|mixed)/', $mimetype)) {\n                $a_replaces = [];\n\n                foreach ($this->attachments as $attachment) {\n                    $part_url = $this->get_part_url($attachment->mime_id, $attachment->ctype_primary);\n                    // We did not yet check if the values of these\n                    // Content-Id/Content-Location headers are actually present in\n                    // the corresponding HTML part body, because it's too expensive\n                    // right now.\n                    // Storing the replacement references just in case.\n                    if (isset($attachment->content_id)) {\n                        $a_replaces['cid:' . $attachment->content_id] = $part_url;\n                    }\n                    if (!empty($attachment->content_location)) {\n                        $a_replaces[$attachment->content_location] = $part_url;\n                    }\n                }\n\n                // add replace array to each content part\n                // (will be applied later when part body is available)\n                foreach ($this->parts as $i => $part) {\n                    if ($part->type == 'content') {\n                        $this->parts[$i]->replaces = $a_replaces;\n                    }\n                }\n            }\n        }\n        // message is a single part non-text\n        elseif ($structure->filename || preg_match('/^application\\//i', $mimetype)) {\n            $this->add_attachment($structure);\n        }\n    }\n\n    private function find_parent_part($child_part, $start_part)\n    {\n        $parts = $start_part->mime_parts ?? $start_part->parts;\n        foreach ($parts as $mime_part) {\n            if ($mime_part->mime_id === $child_part->mime_id) {\n                return $start_part;\n            } elseif (!empty($mime_part->parts)) {\n                return $this->find_parent_part($child_part, $mime_part);\n            }\n        }\n    }\n\n    private function find_html_parts($initial_part)\n    {\n        // Find the parent part of the initial part.\n        $parent_part = $this->find_parent_part($initial_part, $this);\n        if (empty($parent_part)) {\n            // Shouldn't happen, but who knows...\n            // TODO: handle this error more explicitly?\n            return [];\n        }\n\n        $html_parts = [];\n        foreach ($parent_part->parts as $child_part) {\n            if ($child_part->mimetype === 'text/html') {\n                $html_parts[] = $child_part;\n            }\n        }\n\n        return $html_parts;\n    }\n\n    /**\n     * Fill a flat array with references to all parts, indexed by part numbers\n     *\n     * @param rcube_message_part $part Message body structure\n     */\n    private function get_mime_numbers(&$part)\n    {\n        if (strlen($part->mime_id)) {\n            $this->mime_parts[$part->mime_id] = &$part;\n        }\n\n        for ($i = 0; $i < count($part->parts); $i++) {\n            $this->get_mime_numbers($part->parts[$i]);\n        }\n    }\n\n    /**\n     * Add a part to the list of attachments (with context check)\n     *\n     * @param rcube_message_part $part Message part\n     */\n    private function add_attachment($part)\n    {\n        if ($this->check_context($part)) {\n            // It may happen that we add the same part to the array many times\n            // use part ID index to prevent from duplicates\n            $this->attachments[$part->mime_id] = $part;\n        }\n    }\n\n    /**\n     * Add a part to object parts array(s) (with context check)\n     *\n     * @param rcube_message_part $part Message part\n     */\n    private function add_part($part)\n    {\n        if ($this->check_context($part)) {\n            $this->parts[] = $part;\n        }\n    }\n\n    /**\n     * Check if specified part belongs to the current context\n     *\n     * @param rcube_message_part $part Message part\n     *\n     * @return bool True if the part belongs to the current context, False otherwise\n     */\n    private function check_context($part)\n    {\n        return $this->context === null || str_starts_with($part->mime_id, $this->context . '.');\n    }\n\n    /**\n     * Decode a Microsoft Outlook TNEF part (winmail.dat)\n     *\n     * @param rcube_message_part $part Message part to decode\n     *\n     * @return rcube_message_part[] List of message parts extracted from TNEF\n     */\n    public function tnef_decode(&$part)\n    {\n        // @TODO: attachment may be huge, handle body via file\n        $body = $this->get_part_body($part->mime_id);\n        $tnef = new rcube_tnef_decoder();\n        $tnef_arr = $tnef->decompress($body, true);\n        $parts = [];\n\n        unset($body);\n\n        // HTML body\n        if (!empty($tnef_arr['message'])) {\n            $tpart = new rcube_message_part();\n\n            $tpart->encoding = 'stream';\n            $tpart->ctype_primary = 'text';\n            $tpart->ctype_secondary = 'html';\n            $tpart->mimetype = 'text/html';\n            $tpart->mime_id = 'winmail.' . $part->mime_id . '.html';\n            $tpart->size = strlen($tnef_arr['message']);\n            $tpart->body = $tnef_arr['message'];\n            $tpart->charset = RCUBE_CHARSET;\n\n            $parts[] = $tpart;\n        }\n\n        // Attachments\n        foreach ($tnef_arr['attachments'] as $pid => $winatt) {\n            $tpart = new rcube_message_part();\n\n            $tpart->filename = $this->fix_attachment_name(trim($winatt['name']), $part);\n            $tpart->encoding = 'stream';\n            $tpart->ctype_primary = trim(strtolower($winatt['type']));\n            $tpart->ctype_secondary = trim(strtolower($winatt['subtype']));\n            $tpart->mimetype = $tpart->ctype_primary . '/' . $tpart->ctype_secondary;\n            $tpart->mime_id = 'winmail.' . $part->mime_id . '.' . $pid;\n            $tpart->size = $winatt['size'] ?? 0;\n            $tpart->body = $winatt['stream'];\n\n            if (!empty($winatt['content-id'])) {\n                $tpart->content_id = $winatt['content-id'];\n            }\n\n            $parts[] = $tpart;\n            unset($tnef_arr[$pid]);\n        }\n\n        return $parts;\n    }\n\n    /**\n     * Parse message body for UUencoded attachments bodies\n     *\n     * @param rcube_message_part $part Message part to decode\n     *\n     * @return rcube_message_part[] List of message parts extracted from the file\n     */\n    public function uu_decode(&$part)\n    {\n        // @TODO: messages may be huge, handle body via file\n        $part->body = $this->get_part_body($part->mime_id);\n        $parts = [];\n        $pid = 0;\n\n        // FIXME: line length is max.65?\n        $uu_regexp_begin = '/begin [0-7]{3,4} ([^\\r\\n]+)\\r?\\n/s';\n        $uu_regexp_end = '/`\\r?\\nend((\\r?\\n)|($))/s';\n\n        while (preg_match($uu_regexp_begin, $part->body, $matches, \\PREG_OFFSET_CAPTURE)) {\n            $startpos = $matches[0][1];\n\n            if (!preg_match($uu_regexp_end, $part->body, $m, \\PREG_OFFSET_CAPTURE, $startpos)) {\n                break;\n            }\n\n            $endpos = $m[0][1];\n            $begin_len = strlen($matches[0][0]);\n            $end_len = strlen($m[0][0]);\n\n            // extract attachment body\n            $filebody = substr($part->body, $startpos + $begin_len, $endpos - $startpos - $begin_len - 1);\n            $filebody = str_replace(\"\\r\\n\", \"\\n\", $filebody);\n\n            // remove attachment body from the message body\n            $part->body = substr_replace($part->body, '', $startpos, $endpos + $end_len - $startpos);\n            // mark body as modified so it will not be cached by rcube_imap_cache\n            $part->body_modified = true;\n\n            // add attachments to the structure\n            $uupart = new rcube_message_part();\n            $uupart->filename = trim($matches[1][0]);\n            $uupart->encoding = 'stream';\n            $uupart->body = convert_uudecode($filebody);\n            $uupart->size = strlen($uupart->body);\n            $uupart->mime_id = 'uu.' . $part->mime_id . '.' . $pid;\n\n            $ctype = rcube_mime::file_content_type($uupart->body, $uupart->filename, 'application/octet-stream', true);\n            $uupart->mimetype = $ctype;\n            [$uupart->ctype_primary, $uupart->ctype_secondary] = explode('/', $ctype);\n\n            $parts[] = $uupart;\n            $pid++;\n        }\n\n        return $parts;\n    }\n\n    /**\n     * Fix attachment name encoding if needed and possible\n     *\n     * @param string             $name Attachment name\n     * @param rcube_message_part $part Message part\n     *\n     * @return string Fixed attachment name\n     */\n    protected function fix_attachment_name($name, $part)\n    {\n        if ($name == rcube_charset::clean($name)) {\n            return $name;\n        }\n\n        $charsets = [];\n\n        // find charset from part or its parent(s)\n        if ($part->charset) {\n            $charsets[] = $part->charset;\n        } else {\n            // check first part (common case)\n            $n = strpos($part->mime_id, '.') ? preg_replace('/\\.[0-9]+$/', '', $part->mime_id) . '.1' : 1;\n            $_part = $this->mime_parts[$n] ?? null;\n            if ($_part && $_part->charset) {\n                $charsets[] = $_part->charset;\n            }\n\n            // check parents' charset\n            $items = explode('.', $part->mime_id);\n            for ($i = count($items) - 1; $i > 0; $i--) {\n                array_pop($items);\n                $parent = $this->mime_parts[implode('.', $items)] ?? null;\n\n                if ($parent && $parent->charset) {\n                    $charsets[] = $parent->charset;\n                }\n            }\n        }\n\n        if ($this->headers->charset) {\n            $charsets[] = $this->headers->charset;\n        }\n\n        if ($charset = rcube_charset::check($name, $charsets)) {\n            $name = rcube_charset::convert($name, $charset);\n            $part->charset = $charset;\n        }\n\n        return $name;\n    }\n\n    /**\n     * Deprecated methods (to be removed)\n     */\n    public static function unfold_flowed($text)\n    {\n        return rcube_mime::unfold_flowed($text);\n    }\n\n    public static function format_flowed($text, $length = 72)\n    {\n        return rcube_mime::format_flowed($text, $length);\n    }\n}\n", "patch": "@@ -108,7 +108,8 @@ function __construct($uid, $folder = null, $is_safe = false)\n             'get_url'     => $this->app->url(array(\n                     'action' => 'get',\n                     'mbox'   => $this->folder,\n-                    'uid'    => $uid))\n+                    'uid'    => $uid),\n+                false, false, true)\n         );\n \n         if (!empty($this->headers->structure)) {", "file_path": "files/2016_8\\13", "file_language": "php", "file_name": "program/lib/Roundcube/rcube_message.php", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/4a408843b0ef816daf70a472a02b78cd6073a4d5/program/lib/Roundcube/rcube_output.php", "code": "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube PHP suite                          |\n | Copyright (C) 2005-2014 The Roundcube Dev Team                        |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | CONTENTS:                                                             |\n |   Abstract class for output generation                                |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <alec@alec.pl>                            |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Class for output generation\n *\n * @package    Framework\n * @subpackage View\n */\nabstract class rcube_output\n{\n    public $browser;\n\n    protected $app;\n    protected $config;\n    protected $charset = RCUBE_CHARSET;\n    protected $env = array();\n    protected $skins = array();\n\n\n    /**\n     * Object constructor\n     */\n    public function __construct()\n    {\n        $this->app     = rcube::get_instance();\n        $this->config  = $this->app->config;\n        $this->browser = new rcube_browser();\n    }\n\n    /**\n     * Magic getter\n     */\n    public function __get($var)\n    {\n        // allow read-only access to some members\n        switch ($var) {\n            case 'env':     return $this->env;\n            case 'skins':   return $this->skins;\n            case 'charset': return $this->charset;\n        }\n\n        return null;\n    }\n\n    /**\n     * Setter for output charset.\n     * To be specified in a meta tag and sent as http-header\n     *\n     * @param string $charset Charset name\n     */\n    public function set_charset($charset)\n    {\n        $this->charset = $charset;\n    }\n\n    /**\n     * Getter for output charset\n     *\n     * @return string Output charset name\n     */\n    public function get_charset()\n    {\n        return $this->charset;\n    }\n\n    /**\n     * Set environment variable\n     *\n     * @param string $name   Property name\n     * @param mixed  $value  Property value\n     */\n    public function set_env($name, $value)\n    {\n        $this->env[$name] = $value;\n    }\n\n    /**\n     * Environment variable getter.\n     *\n     * @param string $name  Property name\n     *\n     * @return mixed Property value\n     */\n    public function get_env($name)\n    {\n        return $this->env[$name];\n    }\n\n    /**\n     * Delete all stored env variables and commands\n     */\n    public function reset()\n    {\n        $this->env = array();\n    }\n\n    /**\n     * Invoke display_message command\n     *\n     * @param string  $message  Message to display\n     * @param string  $type     Message type [notice|confirm|error]\n     * @param array   $vars     Key-value pairs to be replaced in localized text\n     * @param boolean $override Override last set message\n     * @param int     $timeout  Message displaying time in seconds\n     */\n    abstract function show_message($message, $type = 'notice', $vars = null, $override = true, $timeout = 0);\n\n    /**\n     * Redirect to a certain url.\n     *\n     * @param mixed $p     Either a string with the action or url parameters as key-value pairs\n     * @param int   $delay Delay in seconds\n     */\n    abstract function redirect($p = array(), $delay = 1);\n\n    /**\n     * Send output to the client.\n     */\n    abstract function send();\n\n    /**\n     * Send HTTP headers to prevent caching a page\n     */\n    public function nocacheing_headers()\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        header(\"Expires: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n        header(\"Last-Modified: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n\n        // We need to set the following headers to make downloads work using IE in HTTPS mode.\n        if ($this->browser->ie && rcube_utils::https_check()) {\n            header('Pragma: private');\n            header(\"Cache-Control: private, must-revalidate\");\n        }\n        else {\n            header(\"Cache-Control: private, no-cache, no-store, must-revalidate, post-check=0, pre-check=0\");\n            header(\"Pragma: no-cache\");\n        }\n    }\n\n    /**\n     * Send header with expire date 30 days in future\n     *\n     * @param int Expiration time in seconds\n     */\n    public function future_expire_header($offset = 2600000)\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        header(\"Expires: \" . gmdate(\"D, d M Y H:i:s\", time()+$offset) . \" GMT\");\n        header(\"Cache-Control: max-age=$offset\");\n        header(\"Pragma: \");\n    }\n\n    /**\n     * Send browser compatibility/security/etc. headers\n     */\n    public function common_headers()\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        // Unlock IE compatibility mode\n        if ($this->browser->ie) {\n            header('X-UA-Compatible: IE=edge');\n        }\n\n        // Request browser to disable DNS prefetching (CVE-2010-0464)\n        header(\"X-DNS-Prefetch-Control: off\");\n\n        // send CSRF and clickjacking protection headers\n        if ($xframe = $this->app->config->get('x_frame_options', 'sameorigin')) {\n            header('X-Frame-Options: ' . $xframe);\n        }\n    }\n\n    /**\n     * Show error page and terminate script execution\n     *\n     * @param int    $code     Error code\n     * @param string $message  Error message\n     */\n    public function raise_error($code, $message)\n    {\n        // STUB: to be overloaded by specific output classes\n        fputs(STDERR, \"Error $code: $message\\n\");\n        exit(-1);\n    }\n\n    /**\n     * Create an edit field for inclusion on a form\n     *\n     * @param string col field name\n     * @param string value field value\n     * @param array attrib HTML element attributes for field\n     * @param string type HTML element type (default 'text')\n     *\n     * @return string HTML field definition\n     */\n    public static function get_edit_field($col, $value, $attrib, $type = 'text')\n    {\n        static $colcounts = array();\n\n        $fname = '_'.$col;\n        $attrib['name']  = $fname . ($attrib['array'] ? '[]' : '');\n        $attrib['class'] = trim($attrib['class'] . ' ff_' . $col);\n\n        if ($type == 'checkbox') {\n            $attrib['value'] = '1';\n            $input = new html_checkbox($attrib);\n        }\n        else if ($type == 'textarea') {\n            $attrib['cols'] = $attrib['size'];\n            $input = new html_textarea($attrib);\n        }\n        else if ($type == 'select') {\n            $input = new html_select($attrib);\n            $input->add('---', '');\n            $input->add(array_values($attrib['options']), array_keys($attrib['options']));\n        }\n        else if ($attrib['type'] == 'password') {\n            $input = new html_passwordfield($attrib);\n        }\n        else {\n            if ($attrib['type'] != 'text' && $attrib['type'] != 'hidden') {\n                $attrib['type'] = 'text';\n            }\n            $input = new html_inputfield($attrib);\n        }\n\n        // use value from post\n        if (isset($_POST[$fname])) {\n            $postvalue = rcube_utils::get_input_value($fname, rcube_utils::INPUT_POST, true);\n            $value = $attrib['array'] ? $postvalue[intval($colcounts[$col]++)] : $postvalue;\n        }\n\n        $out = $input->show($value);\n\n        return $out;\n    }\n\n    /**\n     * Convert a variable into a javascript object notation\n     *\n     * @param mixed Input value\n     *\n     * @return string Serialized JSON string\n     */\n    public static function json_serialize($input)\n    {\n        $input = rcube_charset::clean($input);\n\n        // sometimes even using rcube_charset::clean() the input contains invalid UTF-8 sequences\n        // that's why we have @ here\n        return @json_encode($input);\n    }\n}\n", "code_before": "<?php\n\n/*\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | CONTENTS:                                                             |\n |   Abstract class for output generation                                |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <alec@alec.pl>                            |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Class for output generation\n */\nabstract class rcube_output\n{\n    public $browser;\n    public $skins = [];\n    public $charset = RCUBE_CHARSET;\n\n    protected $app;\n    protected $config;\n    protected $env = [];\n\n    /**\n     * Object constructor\n     */\n    public function __construct()\n    {\n        $this->app = rcube::get_instance();\n        $this->config = $this->app->config;\n        $this->browser = new rcube_browser();\n    }\n\n    /**\n     * Magic getter\n     */\n    public function __get($var)\n    {\n        // allow read-only access to some members\n        switch ($var) {\n            case 'env':     return $this->env;\n            case 'skins':   return $this->skins;\n            case 'charset': return $this->charset;\n        }\n    }\n\n    /**\n     * Setter for output charset.\n     * To be specified in a meta tag and sent as http-header\n     *\n     * @param string $charset Charset name\n     */\n    public function set_charset($charset)\n    {\n        $this->charset = $charset;\n    }\n\n    /**\n     * Getter for output charset\n     *\n     * @return string Output charset name\n     */\n    public function get_charset()\n    {\n        return $this->charset;\n    }\n\n    /**\n     * Set environment variable\n     *\n     * @param string $name  Property name\n     * @param mixed  $value Property value\n     */\n    public function set_env($name, $value)\n    {\n        $this->env[$name] = $value;\n    }\n\n    /**\n     * Environment variable getter.\n     *\n     * @param string $name Property name\n     *\n     * @return mixed Property value\n     */\n    public function get_env($name)\n    {\n        return $this->env[$name] ?? null;\n    }\n\n    /**\n     * Delete all stored env variables and commands\n     */\n    public function reset()\n    {\n        $this->env = [];\n    }\n\n    /**\n     * Invoke display_message command\n     *\n     * @param string $message  Message to display\n     * @param string $type     Message type [notice|confirm|error]\n     * @param array  $vars     Key-value pairs to be replaced in localized text\n     * @param bool   $override Override last set message\n     * @param int    $timeout  Message displaying time in seconds\n     */\n    abstract public function show_message($message, $type = 'notice', $vars = null, $override = true, $timeout = 0);\n\n    /**\n     * Redirect to a certain url.\n     *\n     * @param array|string $p     Either a string with the action or url parameters as key-value pairs\n     * @param int          $delay Delay in seconds\n     */\n    abstract public function redirect($p = [], $delay = 1);\n\n    /**\n     * Send output to the client.\n     */\n    abstract public function send();\n\n    /**\n     * Send HTTP headers to prevent caching a page\n     */\n    public function nocacheing_headers()\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        $this->header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n        $this->header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n\n        // We need to set the following headers to make downloads work using IE in HTTPS mode.\n        if ($this->browser->ie && rcube_utils::https_check()) {\n            $this->header('Pragma: private');\n            $this->header('Cache-Control: private, must-revalidate');\n        } else {\n            $this->header('Cache-Control: private, no-cache, no-store, must-revalidate, post-check=0, pre-check=0');\n            $this->header('Pragma: no-cache');\n        }\n    }\n\n    /**\n     * Send header with expire date 30 days in future\n     *\n     * @param int $offset Expiration time in seconds\n     */\n    public function future_expire_header($offset = 2600000)\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        $this->header('Expires: ' . gmdate('D, d M Y H:i:s', time() + $offset) . ' GMT');\n        $this->header(\"Cache-Control: max-age={$offset}\");\n        $this->header('Pragma: ');\n    }\n\n    /**\n     * Send browser compatibility/security/privacy headers\n     *\n     * @param bool $privacy Enable privacy headers\n     */\n    public function common_headers($privacy = true)\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        $headers = [];\n\n        // Unlock IE compatibility mode\n        if ($this->browser->ie) {\n            $headers['X-UA-Compatible'] = 'IE=edge';\n        }\n\n        if ($privacy) {\n            // Request browser to disable DNS prefetching (CVE-2010-0464)\n            $headers['X-DNS-Prefetch-Control'] = 'off';\n\n            // Request browser disable Referer (sic) header\n            $headers['Referrer-Policy'] = 'same-origin';\n        }\n\n        // send CSRF and clickjacking protection headers\n        if ($xframe = $this->app->config->get('x_frame_options', 'sameorigin')) {\n            $headers['X-Frame-Options'] = $xframe;\n        }\n\n        $plugin = $this->app->plugins->exec_hook('common_headers', ['headers' => $headers, 'privacy' => $privacy]);\n\n        foreach ($plugin['headers'] as $header => $value) {\n            $this->header(\"{$header}: {$value}\");\n        }\n    }\n\n    /**\n     * Send headers related to file downloads.\n     *\n     * @param string $filename File name\n     * @param array  $params   Optional parameters:\n     *                         type         - File content type (default: 'application/octet-stream')\n     *                         disposition  - Download type: 'inline' or 'attachment' (default)\n     *                         length       - Content length\n     *                         charset      - File name character set\n     *                         type_charset - Content character set\n     *                         time_limit   - Script execution limit (default: 3600)\n     */\n    public function download_headers($filename, $params = [])\n    {\n        // For security reasons we validate type, filename and charset params.\n        // Some HTTP servers might drop a header that is malformed or very long, this then\n        // can lead to web browsers unintentionally executing javascript code in the body.\n\n        if (empty($params['disposition'])) {\n            $params['disposition'] = 'attachment';\n        }\n\n        $ctype = 'application/octet-stream';\n        $disposition = $params['disposition'];\n\n        if (!empty($params['type']) && is_string($params['type']) && strlen($params['type']) < 256\n            && preg_match('/^[a-z0-9!#$&.+^_-]+\\/[a-z0-9!#$&.+^_-]+$/i', $params['type'])\n        ) {\n            $ctype = strtolower($params['type']);\n        }\n\n        // Send unsafe content as plain text\n        if ($disposition == 'inline') {\n            if ($ctype != 'image/svg+xml' && preg_match('~(javascript|jscript|ecmascript|xml|html|text/)~', $ctype)) {\n                $ctype = 'text/plain';\n            }\n\n            if (str_starts_with($ctype, 'text')) {\n                $charset = $this->charset;\n                if (!empty($params['type_charset']) && rcube_charset::is_valid($params['type_charset'])) {\n                    $charset = $params['type_charset'];\n                }\n\n                $ctype .= \"; charset={$charset}\";\n            }\n        }\n\n        // @phpstan-ignore-next-line\n        if (is_string($filename) && $filename !== '' && strlen($filename) <= 1024) {\n            // For non-ascii characters we'll use RFC2231 syntax\n            $fallback_filename = preg_replace('/[^a-zA-Z0-9_.(),;@+ -]/', '_', $filename);\n            $disposition .= \"; filename=\\\"{$fallback_filename}\\\"\";\n\n            if ($fallback_filename != $filename) {\n                $filename = rawurlencode($filename);\n                $charset = $this->charset;\n                if (!empty($params['charset']) && rcube_charset::is_valid($params['charset'])) {\n                    $charset = $params['charset'];\n                }\n                $disposition .= \"; filename*={$charset}''{$filename}\";\n            }\n        }\n\n        $this->header(\"Content-Disposition: {$disposition}\");\n        $this->header(\"Content-Type: {$ctype}\");\n\n        if ($params['disposition'] == 'attachment' && $this->browser->ie) {\n            $this->header('Content-Type: application/force-download');\n        }\n\n        if (isset($params['length'])) {\n            $this->header('Content-Length: ' . $params['length']);\n        }\n\n        // Use strict security policy to make sure no javascript content is executed\n        // img-src is needed to be able to print attachment preview page\n        $this->header(\"Content-Security-Policy: default-src 'none'; img-src 'self'\");\n\n        // don't kill the connection if download takes more than 30 sec.\n        if (!array_key_exists('time_limit', $params)) {\n            $params['time_limit'] = 3600;\n        }\n\n        if (is_numeric($params['time_limit'])) {\n            @set_time_limit($params['time_limit']);\n        }\n    }\n\n    /**\n     * Show error page and terminate script execution\n     *\n     * @param int    $code    Error code\n     * @param string $message Error message\n     */\n    public function raise_error($code, $message)\n    {\n        // STUB: to be overloaded by specific output classes\n        fwrite(\\STDERR, \"Error {$code}: {$message}\\n\");\n        exit(-1);\n    }\n\n    /**\n     * Create an edit field for inclusion on a form\n     *\n     * @param string $name   Field name\n     * @param string $value  Field value\n     * @param array  $attrib HTML element attributes for the field\n     * @param string $type   HTML element type (default 'text')\n     *\n     * @return string HTML field definition\n     */\n    public static function get_edit_field($name, $value, $attrib = [], $type = 'text')\n    {\n        static $colcounts = [];\n\n        $fname = '_' . $name;\n        $attrib['name'] = $fname . (!empty($attrib['array']) ? '[]' : '');\n        $attrib['class'] = trim((!empty($attrib['class']) ? $attrib['class'] : '') . ' ff_' . $name);\n\n        if ($type == 'checkbox') {\n            $attrib['value'] = '1';\n            $input = new html_checkbox($attrib);\n        } elseif ($type == 'textarea') {\n            if (!empty($attrib['size'])) {\n                $attrib['cols'] = $attrib['size'];\n            }\n            $input = new html_textarea($attrib);\n        } elseif ($type == 'select') {\n            $input = new html_select($attrib);\n            if (empty($attrib['skip-empty'])) {\n                $input->add('---', '');\n            }\n            if (!empty($attrib['options'])) {\n                $input->add(array_values($attrib['options']), array_keys($attrib['options']));\n            }\n        } elseif ($type == 'password' || (isset($attrib['type']) && $attrib['type'] == 'password')) {\n            $input = new html_passwordfield($attrib);\n        } else {\n            if (!isset($attrib['type']) || ($attrib['type'] != 'text' && $attrib['type'] != 'hidden')) {\n                $attrib['type'] = 'text';\n            }\n            $input = new html_inputfield($attrib);\n        }\n\n        // use value from post\n        if (isset($_POST[$fname])) {\n            $postvalue = rcube_utils::get_input_value($fname, rcube_utils::INPUT_POST, true);\n            if (!empty($attrib['array'])) {\n                if (!isset($colcounts[$name])) {\n                    $colcounts[$name] = 0;\n                }\n                $idx = intval($colcounts[$name]++);\n                $value = $postvalue[$idx] ?? null;\n            } else {\n                $value = $postvalue;\n            }\n        }\n\n        return $input->show($value);\n    }\n\n    /**\n     * Convert a variable into a javascript object notation\n     *\n     * @param mixed $input  Input value\n     * @param bool  $pretty Enable JSON formatting\n     * @param bool  $inline Enable inline mode (generates output safe for use inside HTML)\n     *\n     * @return string Serialized JSON string\n     */\n    public static function json_serialize($input, $pretty = false, $inline = true)\n    {\n        $options = \\JSON_UNESCAPED_SLASHES | \\JSON_UNESCAPED_UNICODE | \\JSON_INVALID_UTF8_IGNORE;\n\n        // JSON_HEX_TAG is needed for inlining JSON inside of the <script> tag\n        // if input contains a html tag it will cause issues (#6207)\n        if ($inline) {\n            $options |= \\JSON_HEX_TAG;\n        }\n\n        if ($pretty) {\n            $options |= \\JSON_PRETTY_PRINT;\n        }\n\n        return json_encode($input, $options);\n    }\n\n    /**\n     * A wrapper for header() function, so it can be replaced for automated tests\n     *\n     * @param string $header  The header string\n     * @param bool   $replace Replace previously set header?\n     */\n    public function header($header, $replace = true)\n    {\n        header($header, $replace);\n    }\n\n    /**\n     * A helper to send output to the browser and exit\n     *\n     * @param string $body    The output body\n     * @param array  $headers Headers\n     *\n     * @return never\n     */\n    public function sendExit($body = '', $headers = [])\n    {\n        foreach ($headers as $header) {\n            $this->header($header);\n        }\n\n        echo $body;\n        exit;\n    }\n\n    /**\n     * A helper to send HTTP error code and message to the browser, and exit.\n     *\n     * @param int    $code    The HTTP error code\n     * @param string $message The HTTP error message\n     *\n     * @return never\n     */\n    public function sendExitError($code, $message = '')\n    {\n        http_response_code($code);\n        exit($message);\n    }\n}\n", "patch": "@@ -190,6 +190,11 @@ public function common_headers()\n \n         // Request browser to disable DNS prefetching (CVE-2010-0464)\n         header(\"X-DNS-Prefetch-Control: off\");\n+\n+        // send CSRF and clickjacking protection headers\n+        if ($xframe = $this->app->config->get('x_frame_options', 'sameorigin')) {\n+            header('X-Frame-Options: ' . $xframe);\n+        }\n     }\n \n     /**", "file_path": "files/2016_8\\14", "file_language": "php", "file_name": "program/lib/Roundcube/rcube_output.php", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/4a408843b0ef816daf70a472a02b78cd6073a4d5/program/steps/addressbook/export.inc", "code": "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | program/steps/addressbook/export.inc                                  |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2008-2013, The Roundcube Dev Team                       |\n | Copyright (C) 2011-2013, Kolab Systems AG                             |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Export the selected address book as vCard file                      |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <machniak@kolabsys.com>                   |\n +-----------------------------------------------------------------------+\n*/\n\n$RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n\n// Use search result\nif (!empty($_REQUEST['_search']) && isset($_SESSION['search'][$_REQUEST['_search']])) {\n    $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $search  = (array)$_SESSION['search'][$_REQUEST['_search']];\n    $records = array();\n\n    // Get records from all sources\n    foreach ($search as $s => $set) {\n        $source = $RCMAIL->get_address_book($s);\n\n        // reset page\n        $source->set_page(1);\n        $source->set_pagesize(99999);\n        $source->set_search_set($set);\n\n        // get records\n        $result = $source->list_records();\n\n        while ($record = $result->next()) {\n            // because vcard_map is per-source we need to create vcard here\n            prepare_for_export($record, $source);\n\n            $record['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($record, $sort_col);\n            $records[$key] = $record;\n        }\n\n        unset($result);\n    }\n\n    // sort the records\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n    $result->records = array_values($records);\n}\n// selected contacts\nelse if (!empty($_REQUEST['_cid'])) {\n    $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $records  = array();\n\n    // Selected contact IDs (with multi-source support)\n    $cids = rcmail_get_cids();\n\n    foreach ($cids as $s => $ids) {\n        $source = $RCMAIL->get_address_book($s);\n        $result = $source->search('ID', $ids, 1, true, true);\n\n        while ($record = $result->next()) {\n            // because vcard_map is per-source we need to create vcard here\n            prepare_for_export($record, $source);\n\n            $record['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($record, $sort_col);\n            $records[$key] = $record;\n        }\n    }\n\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n    $result->records = array_values($records);\n}\n// selected directory/group\nelse {\n    $CONTACTS = rcmail_contact_source(null, true);\n\n    // get contacts for this user\n    $CONTACTS->set_page(1);\n    $CONTACTS->set_pagesize(99999);\n    $result = $CONTACTS->list_records(null, 0, true);\n}\n\n// Give plugins a possibility to implement other output formats or modify the result\n$plugin = $RCMAIL->plugins->exec_hook('addressbook_export', array('result' => $result));\n$result = $plugin['result'];\n\nif ($plugin['abort']) {\n    exit;\n}\n\n// send downlaod headers\nheader('Content-Type: text/x-vcard; charset='.RCUBE_CHARSET);\nheader('Content-Disposition: attachment; filename=\"contacts.vcf\"');\n\nwhile ($result && ($row = $result->next())) {\n    if ($CONTACTS) {\n        prepare_for_export($row, $CONTACTS);\n    }\n\n    // fix folding and end-of-line chars\n    $row['vcard'] = preg_replace('/\\r|\\n\\s+/', '', $row['vcard']);\n    $row['vcard'] = preg_replace('/\\n/', rcube_vcard::$eol, $row['vcard']);\n    echo rcube_vcard::rfc2425_fold($row['vcard']) . rcube_vcard::$eol;\n}\n\nexit;\n\n\n/**\n * Copy contact record properties into a vcard object\n */\nfunction prepare_for_export(&$record, $source = null)\n{\n    $groups   = $source && $source->groups && $source->export_groups ? $source->get_record_groups($record['ID']) : null;\n    $fieldmap = $source ? $source->vcard_map : null;\n\n    if (empty($record['vcard'])) {\n        $vcard = new rcube_vcard($record['vcard'], RCUBE_CHARSET, false, $fieldmap);\n        $vcard->reset();\n\n        foreach ($record as $key => $values) {\n            list($field, $section) = explode(':', $key);\n            // avoid unwanted casting of DateTime objects to an array\n            // (same as in rcube_contacts::convert_save_data())\n            if (is_object($values) && is_a($values, 'DateTime')) {\n                $values = array($values);\n            }\n\n            foreach ((array) $values as $value) {\n                if (is_array($value) || is_a($value, 'DateTime') || @strlen($value)) {\n                    $vcard->set($field, $value, strtoupper($section));\n                }\n            }\n        }\n\n        // append group names\n        if ($groups) {\n            $vcard->set('groups', join(',', $groups), null);\n        }\n\n        $record['vcard'] = $vcard->export();\n    }\n    // patch categories to alread existing vcard block\n    else if ($record['vcard']) {\n        $vcard = new rcube_vcard($record['vcard'], RCUBE_CHARSET, false, $fieldmap);\n\n        // unset CATEGORIES entry, it might be not up-to-date (#1490277)\n        $vcard->set('groups', null);\n        $record['vcard'] = $vcard->export();\n\n        if (!empty($groups)) {\n            $vgroups = 'CATEGORIES:' . rcube_vcard::vcard_quote($groups, ',');\n            $record['vcard'] = str_replace('END:VCARD', $vgroups . rcube_vcard::$eol . 'END:VCARD', $record['vcard']);\n        }\n    }\n}\n", "code_before": "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n | Copyright (C) Kolab Systems AG                                        |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Export the selected address book as vCard file                      |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <machniak@kolabsys.com>                   |\n +-----------------------------------------------------------------------+\n*/\n\n$RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n\n// Use search result\nif (!empty($_REQUEST['_search']) && isset($_SESSION['search'][$_REQUEST['_search']])) {\n    $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $search  = (array)$_SESSION['search'][$_REQUEST['_search']];\n    $records = array();\n\n    // Get records from all sources\n    foreach ($search as $s => $set) {\n        $source = $RCMAIL->get_address_book($s);\n\n        // reset page\n        $source->set_page(1);\n        $source->set_pagesize(99999);\n        $source->set_search_set($set);\n\n        // get records\n        $result = $source->list_records();\n\n        while ($record = $result->next()) {\n            // because vcard_map is per-source we need to create vcard here\n            prepare_for_export($record, $source);\n\n            $record['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($record, $sort_col);\n            $records[$key] = $record;\n        }\n\n        unset($result);\n    }\n\n    // sort the records\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n    $result->records = array_values($records);\n}\n// selected contacts\nelse if (!empty($_REQUEST['_cid'])) {\n    $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $records  = array();\n\n    // Selected contact IDs (with multi-source support)\n    $cids = rcmail_get_cids();\n\n    foreach ($cids as $s => $ids) {\n        $source = $RCMAIL->get_address_book($s);\n\n        // reset page and page size (#6103)\n        $source->set_page(1);\n        $source->set_pagesize(count($ids));\n\n        $result = $source->search('ID', $ids, 1, true, true);\n\n        while ($record = $result->next()) {\n            // because vcard_map is per-source we need to create vcard here\n            prepare_for_export($record, $source);\n\n            $record['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($record, $sort_col);\n            $records[$key] = $record;\n        }\n    }\n\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n    $result->records = array_values($records);\n}\n// selected directory/group\nelse {\n    $CONTACTS = rcmail_contact_source(null, true);\n\n    // get contacts for this user\n    $CONTACTS->set_page(1);\n    $CONTACTS->set_pagesize(99999);\n    $result = $CONTACTS->list_records(null, 0, true);\n}\n\n// Give plugins a possibility to implement other output formats or modify the result\n$plugin = $RCMAIL->plugins->exec_hook('addressbook_export', array('result' => $result));\n$result = $plugin['result'];\n\nif ($plugin['abort']) {\n    exit;\n}\n\n// send downlaod headers\nheader('Content-Type: text/vcard; charset=' . RCUBE_CHARSET);\nheader('Content-Disposition: attachment; filename=\"contacts.vcf\"');\n\nwhile ($result && ($row = $result->next())) {\n    if ($CONTACTS) {\n        prepare_for_export($row, $CONTACTS);\n    }\n\n    // fix folding and end-of-line chars\n    $row['vcard'] = preg_replace('/\\r|\\n\\s+/', '', $row['vcard']);\n    $row['vcard'] = preg_replace('/\\n/', rcube_vcard::$eol, $row['vcard']);\n    echo rcube_vcard::rfc2425_fold($row['vcard']) . rcube_vcard::$eol;\n}\n\nexit;\n\n\n/**\n * Copy contact record properties into a vcard object\n */\nfunction prepare_for_export(&$record, $source = null)\n{\n    $groups   = $source && $source->groups && $source->export_groups ? $source->get_record_groups($record['ID']) : null;\n    $fieldmap = $source ? $source->vcard_map : null;\n\n    if (empty($record['vcard'])) {\n        $vcard = new rcube_vcard($record['vcard'], RCUBE_CHARSET, false, $fieldmap);\n        $vcard->reset();\n\n        foreach ($record as $key => $values) {\n            list($field, $section) = explode(':', $key);\n            // avoid unwanted casting of DateTime objects to an array\n            // (same as in rcube_contacts::convert_save_data())\n            if (is_object($values) && is_a($values, 'DateTime')) {\n                $values = array($values);\n            }\n\n            foreach ((array) $values as $value) {\n                if (is_array($value) || is_a($value, 'DateTime') || @strlen($value)) {\n                    $vcard->set($field, $value, strtoupper($section));\n                }\n            }\n        }\n\n        // append group names\n        if ($groups) {\n            $vcard->set('groups', join(',', $groups), null);\n        }\n\n        $record['vcard'] = $vcard->export();\n    }\n    // patch categories to alread existing vcard block\n    else if ($record['vcard']) {\n        $vcard = new rcube_vcard($record['vcard'], RCUBE_CHARSET, false, $fieldmap);\n\n        // unset CATEGORIES entry, it might be not up-to-date (#1490277)\n        $vcard->set('groups', null);\n        $record['vcard'] = $vcard->export();\n\n        if (!empty($groups)) {\n            $vgroups = 'CATEGORIES:' . rcube_vcard::vcard_quote($groups, ',');\n            $record['vcard'] = str_replace('END:VCARD', $vgroups . rcube_vcard::$eol . 'END:VCARD', $record['vcard']);\n        }\n    }\n}\n", "patch": "@@ -21,6 +21,8 @@\n  +-----------------------------------------------------------------------+\n */\n \n+$RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n+\n // Use search result\n if (!empty($_REQUEST['_search']) && isset($_SESSION['search'][$_REQUEST['_search']])) {\n     $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');", "file_path": "files/2016_8\\15", "file_language": "inc", "file_name": "program/steps/addressbook/export.inc", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/4a408843b0ef816daf70a472a02b78cd6073a4d5/program/steps/mail/get.inc", "code": "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | program/steps/mail/get.inc                                            |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2005-2013, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Delivering a specific part of a mail message                        |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n\n// show loading page\nif (!empty($_GET['_preload'])) {\n    $_get = $_GET + array('_mimewarning' => 1, '_embed' => 1);\n    unset($_get['_preload']);\n    $url = $RCMAIL->url($_get);\n    $message = $RCMAIL->gettext('loadingdata');\n\n    header('Content-Type: text/html; charset=' . RCUBE_CHARSET);\n    print \"<html>\\n<head>\\n\"\n        . '<meta http-equiv=\"refresh\" content=\"0; url='.rcube::Q($url).'\">' . \"\\n\"\n        . '<meta http-equiv=\"content-type\" content=\"text/html; charset='.RCUBE_CHARSET.'\">' . \"\\n\"\n        . \"</head>\\n<body>\\n$message\\n</body>\\n</html>\";\n    exit;\n}\n\nob_end_clean();\n\n// similar code as in program/steps/mail/show.inc\nif (!empty($_GET['_uid'])) {\n    $uid = rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET);\n    $RCMAIL->config->set('prefer_html', true);\n    $MESSAGE = new rcube_message($uid, null, intval($_GET['_safe']));\n}\n\n// check connection status\ncheck_storage_status();\n\n$part_id = rcube_utils::get_input_value('_part', rcube_utils::INPUT_GPC);\n\n// show part page\nif (!empty($_GET['_frame'])) {\n    if ($part_id && ($part = $MESSAGE->mime_parts[$part_id])) {\n        $filename = rcmail_attachment_name($part);\n        $OUTPUT->set_pagetitle($filename);\n    }\n\n    // register UI objects\n    $OUTPUT->add_handlers(array(\n        'messagepartframe'    => 'rcmail_message_part_frame',\n        'messagepartcontrols' => 'rcmail_message_part_controls',\n    ));\n\n    $OUTPUT->set_env('mailbox', $RCMAIL->storage->get_folder());\n    $OUTPUT->set_env('uid', $uid);\n    $OUTPUT->set_env('part', $part_id);\n    $OUTPUT->set_env('filename', $filename);\n\n    $OUTPUT->send('messagepart');\n    exit;\n}\n\n// render thumbnail of an image attachment\nelse if ($_GET['_thumb']) {\n    $pid = rcube_utils::get_input_value('_part', rcube_utils::INPUT_GET);\n    if ($part = $MESSAGE->mime_parts[$pid]) {\n        $thumbnail_size = $RCMAIL->config->get('image_thumbnail_size', 240);\n        $temp_dir       = $RCMAIL->config->get('temp_dir');\n        $mimetype       = $part->mimetype;\n        $file_ident     = $MESSAGE->headers->messageID . ':' . $part->mime_id . ':' . $part->size . ':' . $part->mimetype;\n        $cache_basename = $temp_dir . '/' . md5($file_ident . ':' . $RCMAIL->user->ID . ':' . $thumbnail_size);\n        $cache_file     = $cache_basename . '.thumb';\n\n        // render thumbnail image if not done yet\n        if (!is_file($cache_file)) {\n            if ($fp = fopen(($orig_name = $cache_basename . '.tmp'), 'w')) {\n                $MESSAGE->get_part_body($part->mime_id, false, 0, $fp);\n                fclose($fp);\n\n                $image = new rcube_image($orig_name);\n                if ($imgtype = $image->resize($thumbnail_size, $cache_file, true)) {\n                    $mimetype = 'image/' . $imgtype;\n                    unlink($orig_name);\n                }\n                else if (stripos($mimetype, 'image/svg') === 0) {\n                    $content = rcmail_svg_filter(file_get_contents($orig_name));\n                    file_put_contents($cache_file, $content);\n                    unlink($orig_name);\n                }\n                else {\n                    rename($orig_name, $cache_file);\n                }\n            }\n        }\n\n        if (is_file($cache_file)) {\n            header('Content-Type: ' . $mimetype);\n            readfile($cache_file);\n        }\n    }\n\n    exit;\n}\nelse if (strlen($part_id)) {\n    if ($part = $MESSAGE->mime_parts[$part_id]) {\n        $mimetype = rcmail_fix_mimetype($part->mimetype);\n\n        // allow post-processing of the message body\n        $plugin = $RCMAIL->plugins->exec_hook('message_part_get', array(\n            'uid'      => $MESSAGE->uid,\n            'id'       => $part->mime_id,\n            'mimetype' => $mimetype,\n            'part'     => $part,\n            'download' => !empty($_GET['_download'])\n        ));\n\n        if ($plugin['abort']) {\n            exit;\n        }\n\n        // require CSRF protected url for downloads\n        if ($plugin['download'])\n            $RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n\n        // overwrite modified vars from plugin\n        $mimetype   = $plugin['mimetype'];\n        $extensions = rcube_mime::get_mime_extensions($mimetype);\n\n        if ($plugin['body']) {\n            $body = $plugin['body'];\n        }\n\n        // compare file mimetype with the stated content-type headers and file extension to avoid malicious operations\n        if (!empty($_REQUEST['_embed']) && empty($_REQUEST['_nocheck'])) {\n            $file_extension = strtolower(pathinfo($part->filename, PATHINFO_EXTENSION));\n\n            // 1. compare filename suffix with expected suffix derived from mimetype\n            $valid = $file_extension && in_array($file_extension, (array)$extensions) || empty($extensions) || !empty($_REQUEST['_mimeclass']);\n\n            // 2. detect the real mimetype of the attachment part and compare it with the stated mimetype and filename extension\n            if ($valid || !$file_extension || $mimetype == 'application/octet-stream' || stripos($mimetype, 'text/') === 0) {\n                $tmp_body = $body ?: $MESSAGE->get_part_body($part->mime_id, false, 2048);\n\n                // detect message part mimetype\n                $real_mimetype = rcube_mime::file_content_type($tmp_body, $part->filename, $mimetype, true, true);\n                list($real_ctype_primary, $real_ctype_secondary) = explode('/', $real_mimetype);\n\n                // accept text/plain with any extension\n                if ($real_mimetype == 'text/plain' && $real_mimetype == $mimetype) {\n                    $valid_extension = true;\n                }\n                // ignore differences in text/* mimetypes. Filetype detection isn't very reliable here\n                else if ($real_ctype_primary == 'text' && strpos($mimetype, $real_ctype_primary) === 0) {\n                    $real_mimetype   = $mimetype;\n                    $valid_extension = true;\n                }\n                // ignore filename extension if mimeclass matches (#1489029)\n                else if (!empty($_REQUEST['_mimeclass']) && $real_ctype_primary == $_REQUEST['_mimeclass']) {\n                    $valid_extension = true;\n                }\n                else {\n                    // get valid file extensions\n                    $extensions      = rcube_mime::get_mime_extensions($real_mimetype);\n                    $valid_extension = !$file_extension || empty($extensions) || in_array($file_extension, (array)$extensions);\n                }\n\n                // fix mimetype for images wrongly declared as octet-stream\n                if ($mimetype == 'application/octet-stream' && strpos($real_mimetype, 'image/') === 0 && $valid_extension) {\n                    $mimetype = $real_mimetype;\n                }\n\n                // \"fix\" real mimetype the same way the original is before comparison\n                $real_mimetype = rcmail_fix_mimetype($real_mimetype);\n\n                $valid = $real_mimetype == $mimetype && $valid_extension;\n            }\n            else {\n                $real_mimetype = $mimetype;\n            }\n\n            // show warning if validity checks failed\n            if (!$valid) {\n                // send blocked.gif for expected images\n                if (empty($_REQUEST['_mimewarning']) && strpos($mimetype, 'image/') === 0) {\n                    // Do not cache. Failure might be the result of a misconfiguration, thus real content should be returned once fixed. \n                    $content = $RCMAIL->get_resource_content('blocked.gif');\n                    $OUTPUT->nocacheing_headers();\n                    header(\"Content-Type: image/gif\");\n                    header(\"Content-Transfer-Encoding: binary\");\n                    header(\"Content-Length: \" . strlen($content));\n                    echo $content;\n                }\n                else {  // html warning with a button to load the file anyway\n                    $OUTPUT = new rcmail_html_page();\n                    $OUTPUT->write(html::tag('html', null, html::tag('body', 'embed',\n                        html::div(array('class' => 'rcmail-inline-message rcmail-inline-warning'),\n                            $RCMAIL->gettext(array(\n                                'name' => 'attachmentvalidationerror',\n                                'vars' => array(\n                                    'expected' => $mimetype . ($file_extension ? \" (.$file_extension)\" : ''),\n                                    'detected' => $real_mimetype . ($extensions[0] ? \" (.$extensions[0])\" : ''),\n                                )\n                            ))\n                            . html::p(array('class' => 'rcmail-inline-buttons'),\n                                html::tag('button', array(\n                                    'onclick' => \"location.href='\" . $RCMAIL->url(array_merge($_GET, array('_nocheck' => 1))) . \"'\"\n                                ),\n                                $RCMAIL->gettext('showanyway'))\n                            )\n                        ))));\n                }\n\n                exit;\n            }\n        }\n\n\n        // TIFF to JPEG conversion, if needed\n        $tiff_support = !empty($_SESSION['browser_caps']) && !empty($_SESSION['browser_caps']['tif']);\n        if (!empty($_REQUEST['_embed']) && !$tiff_support\n            && rcube_image::is_convertable('image/tiff')\n            && rcmail_part_image_type($part) == 'image/tiff'\n        ) {\n            $tiff2jpeg = true;\n            $mimetype  = 'image/jpeg';\n        }\n\n\n        $browser = $RCMAIL->output->browser;\n        list($ctype_primary, $ctype_secondary) = explode('/', $mimetype);\n\n        if (!$plugin['download'] && $ctype_primary == 'text') {\n            header(\"Content-Type: text/$ctype_secondary; charset=\" . ($part->charset ?: RCUBE_CHARSET));\n        }\n        else {\n            header(\"Content-Type: $mimetype\");\n            header(\"Content-Transfer-Encoding: binary\");\n        }\n\n        // deliver part content\n        if ($ctype_primary == 'text' && $ctype_secondary == 'html' && empty($plugin['download'])) {\n            // Check if we have enough memory to handle the message in it\n            // #1487424: we need up to 10x more memory than the body\n            if (!rcube_utils::mem_check($part->size * 10)) {\n                $out = '<body>' . $RCMAIL->gettext('messagetoobig'). ' '\n                    . html::a('?_task=mail&_action=get&_download=1&_uid='.$MESSAGE->uid.'&_part='.$part->mime_id\n                        .'&_mbox='. urlencode($MESSAGE->folder), $RCMAIL->gettext('download')) . '</body></html>';\n            }\n            else {\n                // get part body if not available\n                if (!isset($body)) {\n                    $body = $MESSAGE->get_part_body($part->mime_id, true);\n                }\n\n                // show images?\n                rcmail_check_safe($MESSAGE);\n\n                // render HTML body\n                $out = rcmail_print_body($body, $part, array('safe' => $MESSAGE->is_safe, 'inline_html' => false));\n\n                // insert remote objects warning into HTML body\n                if ($REMOTE_OBJECTS) {\n                    $body_start = 0;\n                    if ($body_pos = strpos($out, '<body')) {\n                        $body_start = strpos($out, '>', $body_pos) + 1;\n                    }\n\n                    $out = substr($out, 0, $body_start)\n                        . html::div(array('class' => 'rcmail-inline-message rcmail-inline-warning'),\n                            rcube::Q($RCMAIL->gettext('blockedimages')) . '&nbsp;' .\n                            html::tag('button',\n                                array('onclick' => \"location.href='\" . $RCMAIL->url(array_merge($_GET, array('_safe' => 1))) . \"'\"),\n                                rcube::Q($RCMAIL->gettext('showimages')))\n                        )\n                        . substr($out, $body_start);\n                }\n            }\n\n            // check connection status\n            if ($part->size && empty($body)) {\n                check_storage_status();\n            }\n\n            $OUTPUT = new rcmail_html_page();\n            $OUTPUT->write($out);\n        }\n        else {\n            // don't kill the connection if download takes more than 30 sec.\n            @set_time_limit(0);\n\n            $filename = rcmail_attachment_name($part);\n\n            if ($browser->ie)\n                $filename = rawurlencode($filename);\n            else\n                $filename = addcslashes($filename, '\"');\n\n            $disposition = !empty($plugin['download']) ? 'attachment' : 'inline';\n\n            // Workaround for nasty IE bug (#1488844)\n            // If Content-Disposition header contains string \"attachment\" e.g. in filename\n            // IE handles data as attachment not inline\n            if ($disposition == 'inline' && $browser->ie && $browser->ver < 9) {\n                $filename = str_ireplace('attachment', 'attach', $filename);\n            }\n\n            // add filename extension if missing\n            if (!pathinfo($filename, PATHINFO_EXTENSION) && ($extensions = rcube_mime::get_mime_extensions($mimetype))) {\n                $filename .= '.' . $extensions[0];\n            }\n\n            header(\"Content-Disposition: $disposition; filename=\\\"$filename\\\"\");\n\n            // handle tiff to jpeg conversion\n            if (!empty($tiff2jpeg)) {\n                $temp_dir  = unslashify($RCMAIL->config->get('temp_dir'));\n                $file_path = tempnam($temp_dir, 'rcmAttmnt');\n\n                // write content to temp file\n                if ($body) {\n                    $saved = file_put_contents($file_path, $body);\n                }\n                else if ($part->size) {\n                    $fd    = fopen($file_path, 'w');\n                    $saved = $MESSAGE->get_part_body($part->mime_id, false, 0, $fd);\n                    fclose($fd);\n                }\n\n                // convert image to jpeg and send it to the browser\n                if ($sent = $saved) {\n                    $image = new rcube_image($file_path);\n                    if ($image->convert(rcube_image::TYPE_JPG, $file_path)) {\n                        header(\"Content-Length: \" . filesize($file_path));\n                        readfile($file_path);\n                    }\n                    unlink($file_path);\n                }\n            }\n            else {\n                $sent = rcmail_message_part_output($body, $part, $mimetype, $plugin['download']);\n            }\n\n            // check connection status\n            if ($part->size && !$sent) {\n                check_storage_status();\n            }\n        }\n\n        exit;\n    }\n}\n// print message\nelse {\n    // send correct headers for content type\n    header(\"Content-Type: text/html\");\n\n    $cont = \"<html>\\n<head><title></title>\\n</head>\\n<body>\";\n    $cont .= rcmail_message_body(array());\n    $cont .= \"\\n</body>\\n</html>\";\n\n    $OUTPUT = new rcmail_html_page();\n    $OUTPUT->write($cont);\n\n    exit;\n}\n\n\n// if we arrive here, the requested part was not found\nheader('HTTP/1.1 404 Not Found');\nexit;\n\n/**\n * Handles nicely storage connection errors\n */\nfunction check_storage_status()\n{\n    $error = rcmail::get_instance()->storage->get_error_code();\n\n    // Check if we have a connection error\n    if ($error == rcube_imap_generic::ERROR_BAD) {\n        ob_end_clean();\n\n        // Get action is often executed simultanously.\n        // Some servers have MAXPERIP or other limits.\n        // To workaround this we'll wait for some time\n        // and try again (once).\n        // Note: Random sleep interval is used to minimize concurency\n        // in getting message parts\n\n        if (!isset($_GET['_redirected'])) {\n            usleep(rand(10,30)*100000); // 1-3 sec.\n            header('Location: ' . $_SERVER['REQUEST_URI'] . '&_redirected=1');\n        }\n        else {\n            rcube::raise_error(array(\n                'code' => 500, 'type' => 'php',\n                'file' => __FILE__, 'line' => __LINE__,\n                'message' => 'Unable to get/display message part. IMAP connection error'),\n                true, true);\n        }\n\n        // Don't kill session, just quit (#1486995)\n        exit;\n    }\n}\n\n/**\n * Attachment properties table\n */\nfunction rcmail_message_part_controls($attrib)\n{\n    global $MESSAGE, $RCMAIL;\n\n    $part = asciiwords(rcube_utils::get_input_value('_part', rcube_utils::INPUT_GPC));\n    if (!is_object($MESSAGE) || !is_array($MESSAGE->parts)\n        || !($_GET['_uid'] && $_GET['_part']) || !$MESSAGE->mime_parts[$part]\n    ) {\n        return '';\n    }\n\n    $part  = $MESSAGE->mime_parts[$part];\n    $table = new html_table(array('cols' => 2));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('namex')).':');\n    $table->add('header', rcube::Q(rcmail_attachment_name($part)));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('type')).':');\n    $table->add('header', rcube::Q($part->mimetype));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('size')).':');\n    $table->add('header', rcube::Q($RCMAIL->message_part_size($part)));\n\n    return $table->show($attrib);\n}\n\n/**\n * Attachment preview frame\n */\nfunction rcmail_message_part_frame($attrib)\n{\n    global $MESSAGE, $RCMAIL;\n\n    $part = $MESSAGE->mime_parts[asciiwords(rcube_utils::get_input_value('_part', rcube_utils::INPUT_GPC))];\n    $ctype_primary = strtolower($part->ctype_primary);\n\n    $attrib['src'] = './?' . str_replace('_frame=', ($ctype_primary=='text' ? '_embed=' : '_preload='), $_SERVER['QUERY_STRING']);\n\n    $RCMAIL->output->add_gui_object('messagepartframe', $attrib['id']);\n\n    return html::iframe($attrib);\n}\n\n/**\n * Output attachment body with content filtering\n */\nfunction rcmail_message_part_output($body, $part, $mimetype, $download)\n{\n    global $MESSAGE, $RCMAIL;\n\n    if (!$part->size && !$body) {\n        return false;\n    }\n\n    $browser = $RCMAIL->output->browser;\n    $secure  = stripos($mimetype, 'image/') === false || $download;\n\n    // Remove <script> in SVG images\n    if (!$secure && stripos($mimetype, 'image/svg') === 0) {\n        if (!$body) {\n            $body = $MESSAGE->get_part_body($part->mime_id, false);\n            if (empty($body)) {\n                return false;\n            }\n        }\n\n        echo rcmail_svg_filter($body);\n        return true;\n    }\n\n    // Remove dangerous content in images for older IE (to be removed)\n    if (!$secure && $browser->ie && $browser->ver <= 8) {\n        if ($body) {\n            echo preg_match('/<(script|iframe|object)/i', $body) ? '' : $body;\n            return true;\n        }\n        else {\n            $stdout = fopen('php://output', 'w');\n            stream_filter_register('rcube_content', 'rcube_content_filter') or die('Failed to register content filter');\n            stream_filter_append($stdout, 'rcube_content');\n            return $MESSAGE->get_part_body($part->mime_id, true, 0, $stdout);\n        }\n    }\n\n    if ($body && !$download) {\n        header(\"Content-Length: \" . strlen($body));\n        echo $body;\n        return true;\n    }\n\n    // Don't be tempted to set Content-Length to $part->d_parameters['size'] (#1490482)\n    // RFC2183 says \"The size parameter indicates an approximate size\"\n\n    return $MESSAGE->get_part_body($part->mime_id, false, 0, -1);\n}\n\n/**\n * Remove <script> in SVG images\n */\nfunction rcmail_svg_filter($body)\n{\n    // clean SVG with washhtml\n    $wash_opts = array(\n        'show_washed'   => false,\n        'allow_remote'  => false,\n        'charset'       => RCUBE_CHARSET,\n        'html_elements' => array('title'),\n//        'blocked_src'   => 'program/resources/blocked.gif',\n    );\n\n    // initialize HTML washer\n    $washer = new rcube_washtml($wash_opts);\n\n    // allow CSS styles, will be sanitized by rcmail_washtml_callback()\n    $washer->add_callback('style', 'rcmail_washtml_callback');\n\n    return $washer->wash($body);\n}\n", "code_before": "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Delivering a specific uploaded file or mail message attachment      |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <alec@alec.pl>                            |\n +-----------------------------------------------------------------------+\n*/\n\n// This resets X-Frame-Options for framed output (#6688)\n$OUTPUT->page_headers();\n\n// show loading page\nif (!empty($_GET['_preload'])) {\n    unset($_GET['_preload']);\n    unset($_GET['_safe']);\n\n    $url     = $RCMAIL->url($_GET + array('_mimewarning' => 1, '_embed' => 1));\n    $message = $RCMAIL->gettext('loadingdata');\n\n    header('Content-Type: text/html; charset=' . RCUBE_CHARSET);\n    print \"<html>\\n<head>\\n\"\n        . '<meta http-equiv=\"refresh\" content=\"0; url='.rcube::Q($url).'\">' . \"\\n\"\n        . '<meta http-equiv=\"content-type\" content=\"text/html; charset='.RCUBE_CHARSET.'\">' . \"\\n\"\n        . \"</head>\\n<body>\\n$message\\n</body>\\n</html>\";\n    exit;\n}\n\n$attachment = new rcmail_attachment_handler;\n$mimetype   = $attachment->mimetype;\n$filename   = $attachment->filename;\n\n// show part page\nif (!empty($_GET['_frame'])) {\n    $OUTPUT->set_pagetitle($filename);\n\n    // register UI objects\n    $OUTPUT->add_handlers(array(\n        'messagepartframe'    => 'rcmail_message_part_frame',\n        'messagepartcontrols' => 'rcmail_message_part_controls',\n    ));\n\n    $part_id = rcube_utils::get_input_value('_part', rcube_utils::INPUT_GET);\n    $uid     = rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET);\n\n    // message/rfc822 preview (Note: handle also multipart/ parts, they can\n    // come from Enigma, which replaces message/rfc822 with real mimetype)\n    if ($part_id && ($mimetype == 'message/rfc822' || strpos($mimetype, 'multipart/') === 0)) {\n        $uid = preg_replace('/\\.[0-9.]+/', '', $uid);\n        $uid .= '.' . $part_id;\n\n        $OUTPUT->set_env('is_message', true);\n    }\n\n    $OUTPUT->set_env('mailbox', $RCMAIL->storage->get_folder());\n    $OUTPUT->set_env('uid', $uid);\n    $OUTPUT->set_env('part', $part_id);\n    $OUTPUT->set_env('filename', $filename);\n    $OUTPUT->set_env('mimetype', $mimetype);\n\n    $OUTPUT->send('messagepart');\n    exit;\n}\n\n// render thumbnail of an image attachment\nif (!empty($_GET['_thumb']) && $attachment->is_valid()) {\n    $thumbnail_size = $RCMAIL->config->get('image_thumbnail_size', 240);\n    $file_ident     = $attachment->ident;\n    $thumb_name     = 'thumb' . md5($file_ident . ':' . $RCMAIL->user->ID . ':' . $thumbnail_size);\n    $cache_file     = rcube_utils::temp_filename($thumb_name, false, false);\n\n    // render thumbnail image if not done yet\n    if (!is_file($cache_file) && $attachment->body_to_file($orig_name = $cache_file . '.tmp')) {\n        $image = new rcube_image($orig_name);\n\n        if ($imgtype = $image->resize($thumbnail_size, $cache_file, true)) {\n            $mimetype = 'image/' . $imgtype;\n        }\n        else {\n            // Resize failed, we need to check the file mimetype\n            // So, we do not exit here, but goto generic file body handler below\n            $_GET['_thumb']     = 0;\n            $_REQUEST['_embed'] = 1;\n        }\n    }\n\n    if (!empty($_GET['_thumb'])) {\n        if (is_file($cache_file)) {\n            $RCMAIL->output->future_expire_header(3600);\n            header('Content-Type: ' . $mimetype);\n            header('Content-Length: ' . filesize($cache_file));\n            readfile($cache_file);\n        }\n\n        exit;\n    }\n}\n\n// Handle attachment body (display or download)\nif (empty($_GET['_thumb']) && $attachment->is_valid()) {\n    // require CSRF protected url for downloads\n    if (!empty($_GET['_download'])) {\n        $RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n    }\n\n    $extensions = rcube_mime::get_mime_extensions($mimetype);\n\n    // compare file mimetype with the stated content-type headers and file extension to avoid malicious operations\n    if (!empty($_REQUEST['_embed']) && empty($_REQUEST['_nocheck'])) {\n        $file_extension = strtolower(pathinfo($filename, PATHINFO_EXTENSION));\n\n        // 1. compare filename suffix with expected suffix derived from mimetype\n        $valid = $file_extension && in_array($file_extension, (array)$extensions) || empty($extensions) || !empty($_REQUEST['_mimeclass']);\n\n        // 2. detect the real mimetype of the attachment part and compare it with the stated mimetype and filename extension\n        if ($valid || !$file_extension || $mimetype == 'application/octet-stream' || stripos($mimetype, 'text/') === 0) {\n            $tmp_body = $attachment->body(2048);\n\n            // detect message part mimetype\n            $real_mimetype = rcube_mime::file_content_type($tmp_body, $filename, $mimetype, true, true);\n            list($real_ctype_primary, $real_ctype_secondary) = explode('/', $real_mimetype);\n\n            // accept text/plain with any extension\n            if ($real_mimetype == 'text/plain' && rcmail_mimetype_compare($real_mimetype, $mimetype)) {\n                $valid_extension = true;\n            }\n            // ignore differences in text/* mimetypes. Filetype detection isn't very reliable here\n            else if ($real_ctype_primary == 'text' && strpos($mimetype, $real_ctype_primary) === 0) {\n                $real_mimetype   = $mimetype;\n                $valid_extension = true;\n            }\n            // ignore filename extension if mimeclass matches (#1489029)\n            else if (!empty($_REQUEST['_mimeclass']) && $real_ctype_primary == $_REQUEST['_mimeclass']) {\n                $valid_extension = true;\n            }\n            else {\n                // get valid file extensions\n                $extensions      = rcube_mime::get_mime_extensions($real_mimetype);\n                $valid_extension = !$file_extension || empty($extensions) || in_array($file_extension, (array)$extensions);\n            }\n\n            // fix mimetype for files wrongly declared as octet-stream\n            if ($mimetype == 'application/octet-stream' && $valid_extension) {\n                $mimetype = $real_mimetype;\n            }\n            // fix mimetype for images with wrong mimetype\n            else if (strpos($real_mimetype, 'image/') === 0 && strpos($mimetype, 'image/') === 0) {\n                $mimetype = $real_mimetype;\n            }\n\n            // \"fix\" real mimetype the same way the original is before comparison\n            $real_mimetype = rcube_mime::fix_mimetype($real_mimetype);\n\n            $valid = $valid_extension && rcmail_mimetype_compare($real_mimetype, $mimetype);\n        }\n        else {\n            $real_mimetype = $mimetype;\n        }\n\n        // show warning if validity checks failed\n        if (!$valid) {\n            // send blocked.gif for expected images\n            if (empty($_REQUEST['_mimewarning']) && strpos($mimetype, 'image/') === 0) {\n                // Do not cache. Failure might be the result of a misconfiguration, thus real content should be returned once fixed. \n                $content = $RCMAIL->get_resource_content('blocked.gif');\n                $OUTPUT->nocacheing_headers();\n                header(\"Content-Type: image/gif\");\n                header(\"Content-Transfer-Encoding: binary\");\n                header(\"Content-Length: \" . strlen($content));\n                echo $content;\n            }\n            // html warning with a button to load the file anyway\n            else {\n                $OUTPUT = new rcmail_html_page();\n                $OUTPUT->register_inline_warning(\n                        $RCMAIL->gettext(array(\n                                'name' => 'attachmentvalidationerror',\n                                'vars' => array(\n                                    'expected' => $mimetype . ($file_extension ? \" (.$file_extension)\" : ''),\n                                    'detected' => $real_mimetype . ($extensions[0] ? \" (.$extensions[0])\" : ''),\n                                )\n                            )\n                        ),\n                        $RCMAIL->gettext('showanyway'),\n                        $RCMAIL->url(array_merge($_GET, array('_nocheck' => 1)))\n                );\n\n                $OUTPUT->write();\n            }\n\n            exit;\n        }\n    }\n\n    // TIFF/WEBP to JPEG conversion, if needed\n    foreach (array('tiff', 'webp') as $type) {\n        $img_support = !empty($_SESSION['browser_caps']) && !empty($_SESSION['browser_caps'][$type]);\n        if (!empty($_REQUEST['_embed']) && !$img_support\n            && $attachment->image_type() == 'image/' . $type\n            && rcube_image::is_convertable('image/' . $type)\n        ) {\n            $convert2jpeg = true;\n            $mimetype     = 'image/jpeg';\n            break;\n        }\n    }\n\n    // deliver part content\n    if ($mimetype == 'text/html' && empty($_GET['_download'])) {\n        $OUTPUT = new rcmail_html_page();\n\n        // Check if we have enough memory to handle the message in it\n        // #1487424: we need up to 10x more memory than the body\n        if (!rcube_utils::mem_check($attachment->size * 10)) {\n            $OUTPUT->register_inline_warning(\n                $RCMAIL->gettext('messagetoobig'),\n                $RCMAIL->gettext('download'),\n                $RCMAIL->url(array_merge($_GET, array('_download' => 1)))\n            );\n        }\n        else {\n            // render HTML body\n            $out = $attachment->html();\n\n            // insert remote objects warning into HTML body\n            if ($REMOTE_OBJECTS) {\n                $OUTPUT->register_inline_warning(\n                    $RCMAIL->gettext('blockedresources'),\n                    $RCMAIL->gettext('allow'),\n                    $RCMAIL->url(array_merge($_GET, array('_safe' => 1)))\n                );\n            }\n        }\n\n        $OUTPUT->write($out);\n        exit;\n    }\n\n    // add filename extension if missing\n    if (!pathinfo($filename, PATHINFO_EXTENSION) && ($extensions = rcube_mime::get_mime_extensions($mimetype))) {\n        $filename .= '.' . $extensions[0];\n    }\n\n    $OUTPUT->download_headers($filename, array(\n            'type'         => $mimetype,\n            'type_charset' => $attachment->charset,\n            'disposition'  => !empty($_GET['_download']) ? 'attachment' : 'inline',\n    ));\n\n    // handle tiff to jpeg conversion\n    if (!empty($convert2jpeg)) {\n        $file_path = rcube_utils::temp_filename('attmnt');\n\n        // convert image to jpeg and send it to the browser\n        if ($attachment->body_to_file($file_path)) {\n            $image = new rcube_image($file_path);\n            if ($image->convert(rcube_image::TYPE_JPG, $file_path)) {\n                header(\"Content-Length: \" . filesize($file_path));\n                readfile($file_path);\n            }\n        }\n    }\n    else {\n        $attachment->output($mimetype);\n    }\n\n    exit;\n}\n\n// if we arrive here, the requested part was not found\nheader('HTTP/1.1 404 Not Found');\nexit;\n\n\n/**\n * Compares two mimetype strings with making sure that\n * e.g. image/bmp and image/x-ms-bmp are treated as equal.\n */\nfunction rcmail_mimetype_compare($type1, $type2)\n{\n    $regexp = '~/(x-ms-|x-)~';\n    $type1  = preg_replace($regexp, '/', $type1);\n    $type2  = preg_replace($regexp, '/', $type2);\n\n    return $type1 === $type2;\n}\n\n/**\n * Attachment properties table\n */\nfunction rcmail_message_part_controls($attrib)\n{\n    global $attachment, $RCMAIL;\n\n    if (!$attachment->is_valid()) {\n        return '';\n    }\n\n    $table = new html_table(array('cols' => 2));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('namex')).':');\n    $table->add('header', rcube::Q($attachment->filename));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('type')).':');\n    $table->add('header', rcube::Q($attachment->mimetype));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('size')).':');\n    $table->add('header', rcube::Q($attachment->size()));\n\n    return $table->show($attrib);\n}\n\n/**\n * Attachment preview frame\n */\nfunction rcmail_message_part_frame($attrib)\n{\n    global $RCMAIL;\n\n    if ($RCMAIL->output->get_env('is_message')) {\n        $url = array(\n            'task'   => 'mail',\n            'action' => 'preview',\n            'uid'    => $RCMAIL->output->get_env('uid'),\n            'mbox'   => $RCMAIL->output->get_env('mailbox'),\n        );\n    }\n    else {\n        $mimetype = $RCMAIL->output->get_env('mimetype');\n        $url      = $_GET;\n        $url[strpos($mimetype, 'text/') === 0 ? '_embed' : '_preload'] = 1;\n        unset($url['_frame']);\n    }\n\n    $url['_framed'] = 1; // For proper X-Frame-Options:deny handling\n\n    $attrib['src'] = $RCMAIL->url($url);\n\n    $RCMAIL->output->add_gui_object('messagepartframe', $attrib['id']);\n\n    return html::iframe($attrib);\n}\n\n/**\n * Wrapper class with unified access to attachment properties and body\n *\n * Unified for message parts as well as uploaded attachments\n */\nclass rcmail_attachment_handler\n{\n    public $filename;\n    public $size;\n    public $mimetype;\n    public $ident;\n    public $charset = RCUBE_CHARSET;\n\n    private $message;\n    private $part;\n    private $upload;\n    private $body;\n    private $body_file;\n    private $download = false;\n\n    /**\n     * Class constructor.\n     * Reads request parameters and initializes attachment/part props.\n     */\n    public function __construct()\n    {\n        ob_end_clean();\n\n        $part_id    = rcube_utils::get_input_value('_part', rcube_utils::INPUT_GET);\n        $file_id    = rcube_utils::get_input_value('_file', rcube_utils::INPUT_GET);\n        $compose_id = rcube_utils::get_input_value('_id', rcube_utils::INPUT_GET);\n        $uid        = rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET);\n        $rcube      = rcube::get_instance();\n\n        $this->download = !empty($_GET['_download']);\n\n        // similar code as in program/steps/mail/show.inc\n        if (!empty($uid)) {\n            $rcube->config->set('prefer_html', true);\n            $this->message = new rcube_message($uid, null, intval($_GET['_safe']));\n\n            if ($this->part = $this->message->mime_parts[$part_id]) {\n                $this->filename = rcmail_attachment_name($this->part);\n                $this->mimetype = $this->part->mimetype;\n                $this->size     = $this->part->size;\n                $this->ident    = $this->message->headers->messageID . ':' . $this->part->mime_id . ':' . $this->size . ':' . $this->mimetype;\n                $this->charset  = $this->part->charset ?: RCUBE_CHARSET;\n\n                if (empty($_GET['_frame'])) {\n                    // allow post-processing of the attachment body\n                    $plugin = $rcube->plugins->exec_hook('message_part_get', array(\n                            'uid'      => $uid,\n                            'id'       => $this->part->mime_id,\n                            'mimetype' => $this->mimetype,\n                            'part'     => $this->part,\n                            'download' => $this->download,\n                    ));\n\n                    if ($plugin['abort']) {\n                        exit;\n                    }\n\n                    // overwrite modified vars from plugin\n                    $this->mimetype = $plugin['mimetype'];\n\n                    if ($plugin['body']) {\n                        $this->body = $plugin['body'];\n                        $this->size = strlen($this->body);\n                    }\n                }\n            }\n        }\n        else if ($file_id && $compose_id) {\n            $file_id = preg_replace('/^rcmfile/', '', $file_id);\n\n            if (($compose = $_SESSION['compose_data_' . $compose_id])\n                && ($this->upload = $compose['attachments'][$file_id])\n            ) {\n                $this->filename = $this->upload['name'];\n                $this->mimetype = $this->upload['mimetype'];\n                $this->size     = $this->upload['size'];\n                $this->ident    = sprintf('%s:%s%s', $compose_id, $file_id, $this->size);\n                $this->charset  = $this->upload['charset'] ?: RCUBE_CHARSET;\n            }\n        }\n\n        if (empty($this->part) && empty($this->upload)) {\n            header('HTTP/1.1 404 Not Found');\n            exit;\n        }\n\n        // check connection status\n        self::check_storage_status();\n\n        $this->mimetype = rcube_mime::fix_mimetype($this->mimetype);\n    }\n\n    /**\n     * Remove temp files, etc.\n     */\n    public function __destruct()\n    {\n        if ($this->body_file) {\n            @unlink($this->body_file);\n        }\n    }\n\n    /**\n     * Check if the object is a message part not uploaded file\n     *\n     * @return bool True if the object is a meesage part\n     */\n    public function is_message_part()\n    {\n        return !empty($this->message);\n    }\n\n    /**\n     * Object/request status\n     *\n     * @return bool Status\n     */\n    public function is_valid()\n    {\n        return !empty($this->part) || !empty($this->upload);\n    }\n\n    /**\n     * Return attachment/part mimetype if this is an image\n     * of supported type.\n     *\n     * @return string Image mimetype\n     */\n    public function image_type()\n    {\n        $part = (object) array(\n            'filename' => $this->filename,\n            'mimetype' => $this->mimetype,\n        );\n\n        return rcmail_part_image_type($part);\n    }\n\n    /**\n     * Formatted attachment/part size (with units)\n     *\n     * @return string Attachment/part size (with units)\n     */\n    public function size()\n    {\n        $part = $this->part ?: ((object) array('size' => $this->size, 'exact_size' => true));\n        return rcube::get_instance()->message_part_size($part);\n    }\n\n    /**\n     * Returns, prints or saves the attachment/part body\n     */\n    public function body($size = null, $fp = null)\n    {\n        // we may have the body in memory or file already\n        if ($this->body !== null) {\n            if ($fp == -1) {\n                echo $size ? substr($this->body, 0, $size) : $this->body;\n            }\n            else if ($fp) {\n                $result = fwrite($fp, $size ? substr($this->body, $size) : $this->body) !== false;\n            }\n            else {\n                $result = $size ? substr($this->body, 0, $size) : $this->body;\n            }\n        }\n        else if ($this->body_file) {\n            if ($size) {\n                $result = file_get_contents($this->body_file, false, null, 0, $size);\n            }\n            else {\n                $result = file_get_contents($this->body_file);\n            }\n\n            if ($fp == -1) {\n                echo $result;\n            }\n            else if ($fp) {\n                $result = fwrite($fp, $result) !== false;\n            }\n        }\n        else if ($this->message) {\n            $result = $this->message->get_part_body($this->part->mime_id, false, 0, $fp);\n\n            // check connection status\n            if (!$fp && $this->size && empty($result)) {\n                self::check_storage_status();\n            }\n        }\n        else if ($this->upload) {\n            // This hook retrieves the attachment contents from the file storage backend\n            $attachment = rcube::get_instance()->plugins->exec_hook('attachment_get', $this->upload);\n\n            if ($fp && $fp != -1) {\n                if ($attachment['data']) {\n                    $result = fwrite($fp, $size ? substr($attachment['data'], 0, $size) : $attachment['data']) !== false;\n                }\n                else if ($attachment['path']) {\n                    if ($fh = fopen($attachment['path'], 'rb')) {\n                        $result = stream_copy_to_stream($fh, $fp, $size ? $size : -1);\n                    }\n                }\n            }\n            else {\n                $data = $attachment['data'];\n                if (!$data && $attachment['path']) {\n                    $data = file_get_contents($attachment['path']);\n                }\n\n                if ($fp == -1) {\n                    echo $size ? substr($data, 0, $size) : $data;\n                }\n                else {\n                    $result = $size ? substr($data, 0, $size) : $data;\n                }\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Save the body to a file\n     *\n     * @param string $filename File name with path\n     *\n     * @return bool True on success, False on failure\n     */\n    public function body_to_file($filename)\n    {\n        if ($filename && $this->size && ($fp = fopen($filename, 'w'))) {\n            $this->body(0, $fp);\n            $this->body_file = $filename;\n            fclose($fp);\n            @chmod(filename, 0600);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Output attachment body with content filtering\n     */\n    public function output($mimetype)\n    {\n        if (!$this->size) {\n            return false;\n        }\n\n        $secure = stripos($mimetype, 'image/') === false || $this->download;\n\n        // Remove <script> in SVG images\n        if (!$secure && stripos($mimetype, 'image/svg') === 0) {\n            if (!$this->body) {\n                $this->body = $this->body();\n                if (empty($this->body)) {\n                    return false;\n                }\n            }\n\n            echo self::svg_filter($this->body);\n            return true;\n        }\n\n        if ($this->body !== null && !$this->download) {\n            header(\"Content-Length: \" . strlen($this->body));\n            echo $this->body;\n            return true;\n        }\n\n        // Don't be tempted to set Content-Length to $part->d_parameters['size'] (#1490482)\n        // RFC2183 says \"The size parameter indicates an approximate size\"\n\n        return $this->body(0, -1);\n    }\n\n    /**\n     * Returns formatted HTML if the attachment is HTML\n     */\n    public function html()\n    {\n        list($type, $subtype) = explode($this->mimetype, '/');\n        $part = (object) array(\n            'charset'         => $this->charset,\n            'ctype_secondary' => $subtype,\n        );\n\n        // get part body if not available\n        // fix formatting and charset\n        $body = rcube_message::format_part_body($this->body(), $part);\n\n        // show images?\n        $is_safe = $this->is_safe();\n\n        return rcmail_wash_html($body, array('safe' => $is_safe, 'inline_html' => false));\n    }\n\n    /**\n     * Remove <script> in SVG images\n     */\n    public static function svg_filter($body)\n    {\n        // clean SVG with washtml\n        $wash_opts = array(\n            'show_washed'   => false,\n            'allow_remote'  => false,\n            'charset'       => RCUBE_CHARSET,\n            'html_elements' => array('title'),\n        );\n\n        // initialize HTML washer\n        $washer = new rcube_washtml($wash_opts);\n\n        // allow CSS styles, will be sanitized by rcmail_washtml_callback()\n        $washer->add_callback('style', 'rcmail_washtml_callback');\n\n        return $washer->wash($body);\n    }\n\n    /**\n     * Handles nicely storage connection errors\n     */\n    public static function check_storage_status()\n    {\n        $error = rcmail::get_instance()->storage->get_error_code();\n\n        // Check if we have a connection error\n        if ($error == rcube_imap_generic::ERROR_BAD) {\n            ob_end_clean();\n\n            // Get action is often executed simultaneously.\n            // Some servers have MAXPERIP or other limits.\n            // To workaround this we'll wait for some time\n            // and try again (once).\n            // Note: Random sleep interval is used to minimize concurency\n            // in getting message parts\n\n            if (!isset($_GET['_redirected'])) {\n                usleep(rand(10,30)*100000); // 1-3 sec.\n                header('Location: ' . $_SERVER['REQUEST_URI'] . '&_redirected=1');\n            }\n            else {\n                rcube::raise_error(array(\n                    'code' => 500, 'file' => __FILE__, 'line' => __LINE__,\n                    'message' => 'Unable to get/display message part. IMAP connection error'),\n                    true, true);\n            }\n\n            // Don't kill session, just quit (#1486995)\n            exit;\n        }\n    }\n\n    public function is_safe()\n    {\n        if ($this->message) {\n            return rcmail_check_safe($this->message);\n        }\n\n        return !empty($_GET['_safe']);\n    }\n}\n", "patch": "@@ -129,6 +129,10 @@ else if (strlen($part_id)) {\n             exit;\n         }\n \n+        // require CSRF protected url for downloads\n+        if ($plugin['download'])\n+            $RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n+\n         // overwrite modified vars from plugin\n         $mimetype   = $plugin['mimetype'];\n         $extensions = rcube_mime::get_mime_extensions($mimetype);", "file_path": "files/2016_8\\16", "file_language": "inc", "file_name": "program/steps/mail/get.inc", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/4a408843b0ef816daf70a472a02b78cd6073a4d5/program/steps/mail/viewsource.inc", "code": "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | program/steps/mail/viewsource.inc                                     |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2005-2013, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Display a mail message similar as a usual mail application does     |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\nif (!empty($_GET['_save'])) {\n    $RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n}\n\nob_end_clean();\n\n// similar code as in program/steps/mail/get.inc\nif ($uid = rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET)) {\n    $headers = $RCMAIL->storage->get_message_headers($uid);\n    $charset = $headers->charset ?: $RCMAIL->config->get('default_charset');\n\n    header(\"Content-Type: text/plain; charset={$charset}\");\n\n    if (!empty($_GET['_save'])) {\n        $subject  = rcube_mime::decode_header($headers->subject, $headers->charset);\n        $filename = ($subject ?: $RCMAIL->config->get('product_name', 'email')) . '.eml';\n        $browser  = $RCMAIL->output->browser;\n\n        if ($browser->ie)\n            $filename = rawurlencode($filename);\n        else\n            $filename = addcslashes($filename, '\"');\n\n        header(\"Content-Length: {$headers->size}\");\n        header(\"Content-Disposition: attachment; filename=\\\"$filename\\\"\");\n    }\n\n    $RCMAIL->storage->print_raw_body($uid, empty($_GET['_save']));\n}\nelse {\n    rcube::raise_error(array(\n            'code'    => 500,\n            'type'    => 'php',\n            'file'    => __FILE__,\n            'line'    => __LINE__,\n            'message' => \"Message UID $uid not found\"\n        ),\n        true, true);\n}\n\nexit;\n", "code_before": "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Display a mail message similar as a usual mail application does     |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\nif (!empty($_GET['_save'])) {\n    $RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n}\n\nob_end_clean();\n\n// similar code as in program/steps/mail/get.inc\nif ($uid = rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET)) {\n    if ($pos = strpos($uid, '.')) {\n        $message = new rcube_message($uid);\n        $headers = $message->headers;\n        $part_id = substr($uid, $pos + 1);\n    }\n    else {\n        $headers = $RCMAIL->storage->get_message_headers($uid);\n    }\n\n    $charset = $headers->charset ?: $RCMAIL->config->get('default_charset');\n\n    if (!empty($_GET['_save'])) {\n        $subject  = rcube_mime::decode_header($headers->subject, $headers->charset);\n        $filename = rcmail_filename_from_subject(mb_substr($subject, 0, 128));\n        $filename = ($filename ?: $uid)  . '.eml';\n\n        $RCMAIL->output->download_headers($filename, array(\n                'length'       => $headers->size,\n                'type'         => 'text/plain',\n                'type_charset' => $charset,\n        ));\n    }\n    else {\n        header(\"Content-Type: text/plain; charset={$charset}\");\n    }\n\n    if (isset($message)) {\n        $message->get_part_body($part_id, empty($_GET['_save']), 0, -1);\n    }\n    else {\n        $RCMAIL->storage->print_raw_body($uid, empty($_GET['_save']));\n    }\n}\nelse {\n    rcube::raise_error(array(\n            'code'    => 500,\n            'type'    => 'php',\n            'file'    => __FILE__,\n            'line'    => __LINE__,\n            'message' => \"Message UID $uid not found\"\n        ),\n        true, true);\n}\n\nexit;\n\n\n/**\n * Helper function to convert message subject into filename\n */\nfunction rcmail_filename_from_subject($str)\n{\n    $str = preg_replace('/[:\\t\\n\\r\\0\\x0B\\/]+\\s*/', ' ', $str);\n\n    return trim($str, \" \\t\\n\\r\\0\\x0B./_\");\n}\n", "patch": "@@ -19,6 +19,10 @@\n  +-----------------------------------------------------------------------+\n */\n \n+if (!empty($_GET['_save'])) {\n+    $RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n+}\n+\n ob_end_clean();\n \n // similar code as in program/steps/mail/get.inc", "file_path": "files/2016_8\\17", "file_language": "inc", "file_name": "program/steps/mail/viewsource.inc", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}], "outdated": 0}
{"index": 2, "cve_id": "CVE-2016-4069", "cwe_id": ["CWE-352"], "cve_language": "PHP", "cve_description": "Cross-site request forgery (CSRF) vulnerability in Roundcube Webmail before 1.1.5 allows remote attackers to hijack the authentication of users for requests that download attachments and cause a denial of service (disk consumption) via unspecified vectors.", "cvss": "8.8", "publish_date": "August 25, 2016", "AV": "NETWORK", "AC": "LOW", "PR": "NONE", "UI": "REQUIRED", "S": "UNCHANGED", "C": "HIGH", "I": "HIGH", "A": "HIGH", "commit_id": "699af1e5206ed9114322adaa3c25c1c969640a53", "commit_message": "Protect download urls against CSRF using unique request tokens (#1490642)\nSend X-Frame-Options headers with every HTTP response\n\nConflicts:\n\tplugins/enigma/enigma.js\n\tplugins/enigma/lib/enigma_ui.php\n\tprogram/lib/Roundcube/rcube_message.php", "commit_date": "2016-03-06T13:35:48Z", "project": "roundcube/roundcubemail", "url": "https://api.github.com/repos/roundcube/roundcubemail/commits/699af1e5206ed9114322adaa3c25c1c969640a53", "html_url": "https://github.com/roundcube/roundcubemail/commit/699af1e5206ed9114322adaa3c25c1c969640a53", "windows_before": "", "windows_after": "", "parents": [{"commit_id_before": "b01689caf8e372d40112eda0f14a84eed41389d5", "url_before": "https://api.github.com/repos/roundcube/roundcubemail/commits/b01689caf8e372d40112eda0f14a84eed41389d5", "html_url_before": "https://github.com/roundcube/roundcubemail/commit/b01689caf8e372d40112eda0f14a84eed41389d5"}], "details": [{"raw_url": "https://github.com/roundcube/roundcubemail/raw/699af1e5206ed9114322adaa3c25c1c969640a53/plugins/managesieve/lib/Roundcube/rcube_sieve_engine.php", "code": "<?php\n\n/**\n * Managesieve (Sieve Filters) Engine\n *\n * Engine part of Managesieve plugin implementing UI and backend access.\n *\n * Copyright (C) 2008-2014, The Roundcube Dev Team\n * Copyright (C) 2011-2014, Kolab Systems AG\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see http://www.gnu.org/licenses/.\n */\n\nclass rcube_sieve_engine\n{\n    protected $rc;\n    protected $sieve;\n    protected $errors;\n    protected $form;\n    protected $tips = array();\n    protected $script = array();\n    protected $exts = array();\n    protected $list;\n    protected $active = array();\n    protected $headers = array(\n        'subject' => 'Subject',\n        'from'    => 'From',\n        'to'      => 'To',\n    );\n    protected $addr_headers = array(\n        // Required\n        \"from\", \"to\", \"cc\", \"bcc\", \"sender\", \"resent-from\", \"resent-to\",\n        // Additional (RFC 822 / RFC 2822)\n        \"reply-to\", \"resent-reply-to\", \"resent-sender\", \"resent-cc\", \"resent-bcc\",\n        // Non-standard (RFC 2076, draft-palme-mailext-headers-08.txt)\n        \"for-approval\", \"for-handling\", \"for-comment\", \"apparently-to\", \"errors-to\",\n        \"delivered-to\", \"return-receipt-to\", \"x-admin\", \"read-receipt-to\",\n        \"x-confirm-reading-to\", \"return-receipt-requested\",\n        \"registered-mail-reply-requested-by\", \"mail-followup-to\", \"mail-reply-to\",\n        \"abuse-reports-to\", \"x-complaints-to\", \"x-report-abuse-to\",\n        // Undocumented\n        \"x-beenthere\",\n    );\n    protected $notify_methods = array(\n        'mailto',\n        // 'sms',\n        // 'tel',\n    );\n    protected $notify_importance_options = array(\n        3 => 'notifyimportancelow',\n        2 => 'notifyimportancenormal',\n        1 => 'notifyimportancehigh'\n    );\n\n    const VERSION  = '8.4';\n    const PROGNAME = 'Roundcube (Managesieve)';\n    const PORT     = 4190;\n\n\n    /**\n     * Class constructor\n     */\n    function __construct($plugin)\n    {\n        $this->rc     = rcube::get_instance();\n        $this->plugin = $plugin;\n    }\n\n    /**\n     * Loads configuration, initializes plugin (including sieve connection)\n     */\n    function start($mode = null)\n    {\n        // register UI objects\n        $this->rc->output->add_handlers(array(\n            'filterslist'    => array($this, 'filters_list'),\n            'filtersetslist' => array($this, 'filtersets_list'),\n            'filterframe'    => array($this, 'filter_frame'),\n            'filterform'     => array($this, 'filter_form'),\n            'filtersetform'  => array($this, 'filterset_form'),\n        ));\n\n        // connect to managesieve server\n        $error = $this->connect($_SESSION['username'], $this->rc->decrypt($_SESSION['password']));\n\n        // load current/active script\n        if (!$error) {\n            // Get list of scripts\n            $list = $this->list_scripts();\n\n            // reset current script when entering filters UI (#1489412)\n            if ($this->rc->action == 'plugin.managesieve') {\n                $this->rc->session->remove('managesieve_current');\n            }\n\n            if ($mode != 'vacation') {\n                if (!empty($_GET['_set']) || !empty($_POST['_set'])) {\n                    $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_GPC, true);\n                }\n                else if (!empty($_SESSION['managesieve_current'])) {\n                    $script_name = $_SESSION['managesieve_current'];\n                }\n            }\n\n            $error = $this->load_script($script_name);\n        }\n\n        // finally set script objects\n        if ($error) {\n            switch ($error) {\n                case rcube_sieve::ERROR_CONNECTION:\n                case rcube_sieve::ERROR_LOGIN:\n                    $this->rc->output->show_message('managesieve.filterconnerror', 'error');\n                    break;\n\n                default:\n                    $this->rc->output->show_message('managesieve.filterunknownerror', 'error');\n                    break;\n            }\n\n            // reload interface in case of possible error when specified script wasn't found (#1489412)\n            if ($script_name !== null && !empty($list) && !in_array($script_name, $list)) {\n                $this->rc->output->command('reload', 500);\n            }\n\n            // to disable 'Add filter' button set env variable\n            $this->rc->output->set_env('filterconnerror', true);\n            $this->script = array();\n        }\n        else {\n            $this->exts = $this->sieve->get_extensions();\n            $this->init_script();\n            $this->rc->output->set_env('currentset', $this->sieve->current);\n            $_SESSION['managesieve_current'] = $this->sieve->current;\n        }\n\n        return $error;\n    }\n\n    /**\n     * Connect to configured managesieve server\n     *\n     * @param string $username User login\n     * @param string $password User password\n     *\n     * @return int Connection status: 0 on success, >0 on failure\n     */\n    public function connect($username, $password)\n    {\n        // Get connection parameters\n        $host = $this->rc->config->get('managesieve_host', 'localhost');\n        $port = $this->rc->config->get('managesieve_port');\n        $tls  = $this->rc->config->get('managesieve_usetls', false);\n\n        $host = rcube_utils::parse_host($host);\n        $host = rcube_utils::idn_to_ascii($host);\n\n        // remove tls:// prefix, set TLS flag\n        if (($host = preg_replace('|^tls://|i', '', $host, 1, $cnt)) && $cnt) {\n            $tls = true;\n        }\n\n        if (empty($port)) {\n            $port = getservbyname('sieve', 'tcp');\n            if (empty($port)) {\n                $port = self::PORT;\n            }\n        }\n\n        $plugin = $this->rc->plugins->exec_hook('managesieve_connect', array(\n            'user'      => $username,\n            'password'  => $password,\n            'host'      => $host,\n            'port'      => $port,\n            'usetls'    => $tls,\n            'auth_type' => $this->rc->config->get('managesieve_auth_type'),\n            'disabled'  => $this->rc->config->get('managesieve_disabled_extensions'),\n            'debug'     => $this->rc->config->get('managesieve_debug', false),\n            'auth_cid'  => $this->rc->config->get('managesieve_auth_cid'),\n            'auth_pw'   => $this->rc->config->get('managesieve_auth_pw'),\n            'socket_options' => $this->rc->config->get('managesieve_conn_options'),\n        ));\n\n        // try to connect to managesieve server and to fetch the script\n        $this->sieve = new rcube_sieve(\n            $plugin['user'],\n            $plugin['password'],\n            $plugin['host'],\n            $plugin['port'],\n            $plugin['auth_type'],\n            $plugin['usetls'],\n            $plugin['disabled'],\n            $plugin['debug'],\n            $plugin['auth_cid'],\n            $plugin['auth_pw'],\n            $plugin['socket_options']\n        );\n\n        $error = $this->sieve->error();\n\n        if ($error) {\n            rcube::raise_error(array(\n                    'code'    => 403,\n                    'file'    => __FILE__,\n                    'line'    => __LINE__,\n                    'message' => \"Unable to connect to managesieve on $host:$port\"\n                ), true, false);\n        }\n\n        return $error;\n    }\n\n    /**\n     * Load specified (or active) script\n     *\n     * @param string $script_name Optional script name\n     *\n     * @return int Connection status: 0 on success, >0 on failure\n     */\n    protected function load_script($script_name = null)\n    {\n        // Get list of scripts\n        $list = $this->list_scripts();\n\n        if ($script_name === null || $script_name === '') {\n            // get (first) active script\n            if (!empty($this->active)) {\n               $script_name = $this->active[0];\n            }\n            else if ($list) {\n                $script_name = $list[0];\n            }\n            // create a new (initial) script\n            else {\n                // if script not exists build default script contents\n                $script_file = $this->rc->config->get('managesieve_default');\n                $script_name = $this->rc->config->get('managesieve_script_name');\n\n                if (empty($script_name)) {\n                    $script_name = 'roundcube';\n                }\n\n                if ($script_file && is_readable($script_file)) {\n                    $content = file_get_contents($script_file);\n                }\n\n                // add script and set it active\n                if ($this->sieve->save_script($script_name, $content)) {\n                    $this->activate_script($script_name);\n                    $this->list[] = $script_name;\n                }\n            }\n        }\n\n        if ($script_name) {\n            $this->sieve->load($script_name);\n        }\n\n        return $this->sieve->error();\n    }\n\n    /**\n     * User interface actions handler\n     */\n    function actions()\n    {\n        $error = $this->start();\n\n        // Handle user requests\n        if ($action = rcube_utils::get_input_value('_act', rcube_utils::INPUT_GPC)) {\n            $fid = (int) rcube_utils::get_input_value('_fid', rcube_utils::INPUT_POST);\n\n            if ($action == 'delete' && !$error) {\n                if (isset($this->script[$fid])) {\n                    if ($this->sieve->script->delete_rule($fid))\n                        $result = $this->save_script();\n\n                    if ($result === true) {\n                        $this->rc->output->show_message('managesieve.filterdeleted', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'del', array('id' => $fid));\n                    } else {\n                        $this->rc->output->show_message('managesieve.filterdeleteerror', 'error');\n                    }\n                }\n            }\n            else if ($action == 'move' && !$error) {\n                if (isset($this->script[$fid])) {\n                    $to   = (int) rcube_utils::get_input_value('_to', rcube_utils::INPUT_POST);\n                    $rule = $this->script[$fid];\n\n                    // remove rule\n                    unset($this->script[$fid]);\n                    $this->script = array_values($this->script);\n\n                    // add at target position\n                    if ($to >= count($this->script)) {\n                        $this->script[] = $rule;\n                    }\n                    else {\n                        $script = array();\n                        foreach ($this->script as $idx => $r) {\n                            if ($idx == $to)\n                                $script[] = $rule;\n                            $script[] = $r;\n                        }\n                        $this->script = $script;\n                    }\n\n                    $this->sieve->script->content = $this->script;\n                    $result = $this->save_script();\n\n                    if ($result === true) {\n                        $result = $this->list_rules();\n\n                        $this->rc->output->show_message('managesieve.moved', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'list',\n                            array('list' => $result, 'clear' => true, 'set' => $to));\n                    } else {\n                        $this->rc->output->show_message('managesieve.moveerror', 'error');\n                    }\n                }\n            }\n            else if ($action == 'act' && !$error) {\n                if (isset($this->script[$fid])) {\n                    $rule     = $this->script[$fid];\n                    $disabled = $rule['disabled'] ? true : false;\n                    $rule['disabled'] = !$disabled;\n                    $result = $this->sieve->script->update_rule($fid, $rule);\n\n                    if ($result !== false)\n                        $result = $this->save_script();\n\n                    if ($result === true) {\n                        if ($rule['disabled'])\n                            $this->rc->output->show_message('managesieve.deactivated', 'confirmation');\n                        else\n                            $this->rc->output->show_message('managesieve.activated', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'update',\n                            array('id' => $fid, 'disabled' => $rule['disabled']));\n                    } else {\n                        if ($rule['disabled'])\n                            $this->rc->output->show_message('managesieve.deactivateerror', 'error');\n                        else\n                            $this->rc->output->show_message('managesieve.activateerror', 'error');\n                    }\n                }\n            }\n            else if ($action == 'setact' && !$error) {\n                $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_POST, true);\n                $result = $this->activate_script($script_name);\n                $kep14  = $this->rc->config->get('managesieve_kolab_master');\n\n                if ($result === true) {\n                    $this->rc->output->set_env('active_sets', $this->active);\n                    $this->rc->output->show_message('managesieve.setactivated', 'confirmation');\n                    $this->rc->output->command('managesieve_updatelist', 'setact',\n                        array('name' => $script_name, 'active' => true, 'all' => !$kep14));\n                } else {\n                    $this->rc->output->show_message('managesieve.setactivateerror', 'error');\n                }\n            }\n            else if ($action == 'deact' && !$error) {\n                $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_POST, true);\n                $result = $this->deactivate_script($script_name);\n\n                if ($result === true) {\n                    $this->rc->output->set_env('active_sets', $this->active);\n                    $this->rc->output->show_message('managesieve.setdeactivated', 'confirmation');\n                    $this->rc->output->command('managesieve_updatelist', 'setact',\n                        array('name' => $script_name, 'active' => false));\n                } else {\n                    $this->rc->output->show_message('managesieve.setdeactivateerror', 'error');\n                }\n            }\n            else if ($action == 'setdel' && !$error) {\n                $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_POST, true);\n                $result = $this->remove_script($script_name);\n\n                if ($result === true) {\n                    $this->rc->output->show_message('managesieve.setdeleted', 'confirmation');\n                    $this->rc->output->command('managesieve_updatelist', 'setdel',\n                        array('name' => $script_name));\n                    $this->rc->session->remove('managesieve_current');\n                } else {\n                    $this->rc->output->show_message('managesieve.setdeleteerror', 'error');\n                }\n            }\n            else if ($action == 'setget') {\n                $this->rc->request_security_check(rcube_utils::INPUT_GET);\n\n                $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_GPC, true);\n                $script      = $this->sieve->get_script($script_name);\n\n                if (is_a($script, 'PEAR_Error')) {\n                    exit;\n                }\n\n                $browser = new rcube_browser;\n\n                // send download headers\n                header(\"Content-Type: application/octet-stream\");\n                header(\"Content-Length: \".strlen($script));\n\n                if ($browser->ie) {\n                    header(\"Content-Type: application/force-download\");\n                    $filename = rawurlencode($script_name);\n                }\n                else {\n                    $filename = addcslashes($script_name, '\\\\\"');\n                }\n\n                header(\"Content-Disposition: attachment; filename=\\\"$filename.txt\\\"\");\n                echo $script;\n                exit;\n            }\n            else if ($action == 'list') {\n                $result = $this->list_rules();\n\n                $this->rc->output->command('managesieve_updatelist', 'list', array('list' => $result));\n            }\n            else if ($action == 'ruleadd') {\n                $rid = rcube_utils::get_input_value('_rid', rcube_utils::INPUT_POST);\n                $id = $this->genid();\n                $content = $this->rule_div($fid, $id, false);\n\n                $this->rc->output->command('managesieve_rulefill', $content, $id, $rid);\n            }\n            else if ($action == 'actionadd') {\n                $aid = rcube_utils::get_input_value('_aid', rcube_utils::INPUT_POST);\n                $id = $this->genid();\n                $content = $this->action_div($fid, $id, false);\n\n                $this->rc->output->command('managesieve_actionfill', $content, $id, $aid);\n            }\n            else if ($action == 'addresses') {\n                $aid = rcube_utils::get_input_value('_aid', rcube_utils::INPUT_POST);\n\n                $this->rc->output->command('managesieve_vacation_addresses_update', $aid, $this->user_emails());\n            }\n\n            $this->rc->output->send();\n        }\n        else if ($this->rc->task == 'mail') {\n            // Initialize the form\n            $rules = rcube_utils::get_input_value('r', rcube_utils::INPUT_GET);\n            if (!empty($rules)) {\n                $i = 0;\n                foreach ($rules as $rule) {\n                    list($header, $value) = explode(':', $rule, 2);\n                    $tests[$i] = array(\n                        'type' => 'contains',\n                        'test' => 'header',\n                        'arg1' => $header,\n                        'arg2' => $value,\n                    );\n                    $i++;\n                }\n\n                $this->form = array(\n                    'join'  => count($tests) > 1 ? 'allof' : 'anyof',\n                    'name'  => '',\n                    'tests' => $tests,\n                    'actions' => array(\n                        0 => array('type' => 'fileinto'),\n                        1 => array('type' => 'stop'),\n                    ),\n                );\n            }\n        }\n\n        $this->send();\n    }\n\n    function save()\n    {\n        // Init plugin and handle managesieve connection\n        $error = $this->start();\n\n        // get request size limits (#1488648)\n        $max_post = max(array(\n            ini_get('max_input_vars'),\n            ini_get('suhosin.request.max_vars'),\n            ini_get('suhosin.post.max_vars'),\n        ));\n        $max_depth = max(array(\n            ini_get('suhosin.request.max_array_depth'),\n            ini_get('suhosin.post.max_array_depth'),\n        ));\n\n        // check request size limit\n        if ($max_post && count($_POST, COUNT_RECURSIVE) >= $max_post) {\n            rcube::raise_error(array(\n                'code' => 500, 'type' => 'php',\n                'file' => __FILE__, 'line' => __LINE__,\n                'message' => \"Request size limit exceeded (one of max_input_vars/suhosin.request.max_vars/suhosin.post.max_vars)\"\n                ), true, false);\n            $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n        }\n        // check request depth limits\n        else if ($max_depth && count($_POST['_header']) > $max_depth) {\n            rcube::raise_error(array(\n                'code' => 500, 'type' => 'php',\n                'file' => __FILE__, 'line' => __LINE__,\n                'message' => \"Request size limit exceeded (one of suhosin.request.max_array_depth/suhosin.post.max_array_depth)\"\n                ), true, false);\n            $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n        }\n        // filters set add action\n        else if (!empty($_POST['_newset'])) {\n            $name       = rcube_utils::get_input_value('_name', rcube_utils::INPUT_POST, true);\n            $copy       = rcube_utils::get_input_value('_copy', rcube_utils::INPUT_POST, true);\n            $from       = rcube_utils::get_input_value('_from', rcube_utils::INPUT_POST);\n            $exceptions = $this->rc->config->get('managesieve_filename_exceptions');\n            $kolab      = $this->rc->config->get('managesieve_kolab_master');\n            $name_uc    = mb_strtolower($name);\n            $list       = $this->list_scripts();\n\n            if (!$name) {\n                $this->errors['name'] = $this->plugin->gettext('cannotbeempty');\n            }\n            else if (mb_strlen($name) > 128) {\n                $this->errors['name'] = $this->plugin->gettext('nametoolong');\n            }\n            else if (!empty($exceptions) && in_array($name, (array)$exceptions)) {\n                $this->errors['name'] = $this->plugin->gettext('namereserved');\n            }\n            else if (!empty($kolab) && in_array($name_uc, array('MASTER', 'USER', 'MANAGEMENT'))) {\n                $this->errors['name'] = $this->plugin->gettext('namereserved');\n            }\n            else if (in_array($name, $list)) {\n                $this->errors['name'] = $this->plugin->gettext('setexist');\n            }\n            else if ($from == 'file') {\n                // from file\n                if (is_uploaded_file($_FILES['_file']['tmp_name'])) {\n                    $file = file_get_contents($_FILES['_file']['tmp_name']);\n                    $file = preg_replace('/\\r/', '', $file);\n                    // for security don't save script directly\n                    // check syntax before, like this...\n                    $this->sieve->load_script($file);\n                    if (!$this->save_script($name)) {\n                        $this->errors['file'] = $this->plugin->gettext('setcreateerror');\n                    }\n                }\n                else {  // upload failed\n                    $err = $_FILES['_file']['error'];\n\n                    if ($err == UPLOAD_ERR_INI_SIZE || $err == UPLOAD_ERR_FORM_SIZE) {\n                        $msg = $this->rc->gettext(array('name' => 'filesizeerror',\n                            'vars' => array('size' =>\n                                $this->rc->show_bytes(parse_bytes(ini_get('upload_max_filesize'))))));\n                    }\n                    else {\n                        $this->errors['file'] = $this->plugin->gettext('fileuploaderror');\n                    }\n                }\n            }\n            else if (!$this->sieve->copy($name, $from == 'set' ? $copy : '')) {\n                $error = 'managesieve.setcreateerror';\n            }\n\n            if (!$error && empty($this->errors)) {\n                // Find position of the new script on the list\n                $list[] = $name;\n                asort($list, SORT_LOCALE_STRING);\n                $list  = array_values($list);\n                $index = array_search($name, $list);\n\n                $this->rc->output->show_message('managesieve.setcreated', 'confirmation');\n                $this->rc->output->command('parent.managesieve_updatelist', 'setadd',\n                    array('name' => $name, 'index' => $index));\n            } else if ($msg) {\n                $this->rc->output->command('display_message', $msg, 'error');\n            } else if ($error) {\n                $this->rc->output->show_message($error, 'error');\n            }\n        }\n        // filter add/edit action\n        else if (isset($_POST['_name'])) {\n            $name = trim(rcube_utils::get_input_value('_name', rcube_utils::INPUT_POST, true));\n            $fid  = trim(rcube_utils::get_input_value('_fid', rcube_utils::INPUT_POST));\n            $join = trim(rcube_utils::get_input_value('_join', rcube_utils::INPUT_POST));\n\n            // and arrays\n            $headers        = rcube_utils::get_input_value('_header', rcube_utils::INPUT_POST);\n            $cust_headers   = rcube_utils::get_input_value('_custom_header', rcube_utils::INPUT_POST);\n            $ops            = rcube_utils::get_input_value('_rule_op', rcube_utils::INPUT_POST);\n            $sizeops        = rcube_utils::get_input_value('_rule_size_op', rcube_utils::INPUT_POST);\n            $sizeitems      = rcube_utils::get_input_value('_rule_size_item', rcube_utils::INPUT_POST);\n            $sizetargets    = rcube_utils::get_input_value('_rule_size_target', rcube_utils::INPUT_POST);\n            $targets        = rcube_utils::get_input_value('_rule_target', rcube_utils::INPUT_POST, true);\n            $mods           = rcube_utils::get_input_value('_rule_mod', rcube_utils::INPUT_POST);\n            $mod_types      = rcube_utils::get_input_value('_rule_mod_type', rcube_utils::INPUT_POST);\n            $body_trans     = rcube_utils::get_input_value('_rule_trans', rcube_utils::INPUT_POST);\n            $body_types     = rcube_utils::get_input_value('_rule_trans_type', rcube_utils::INPUT_POST, true);\n            $comparators    = rcube_utils::get_input_value('_rule_comp', rcube_utils::INPUT_POST);\n            $indexes        = rcube_utils::get_input_value('_rule_index', rcube_utils::INPUT_POST);\n            $lastindexes    = rcube_utils::get_input_value('_rule_index_last', rcube_utils::INPUT_POST);\n            $dateheaders    = rcube_utils::get_input_value('_rule_date_header', rcube_utils::INPUT_POST);\n            $dateparts      = rcube_utils::get_input_value('_rule_date_part', rcube_utils::INPUT_POST);\n            $act_types      = rcube_utils::get_input_value('_action_type', rcube_utils::INPUT_POST, true);\n            $mailboxes      = rcube_utils::get_input_value('_action_mailbox', rcube_utils::INPUT_POST, true);\n            $act_targets    = rcube_utils::get_input_value('_action_target', rcube_utils::INPUT_POST, true);\n            $domain_targets = rcube_utils::get_input_value('_action_target_domain', rcube_utils::INPUT_POST);\n            $area_targets   = rcube_utils::get_input_value('_action_target_area', rcube_utils::INPUT_POST, true);\n            $reasons        = rcube_utils::get_input_value('_action_reason', rcube_utils::INPUT_POST, true);\n            $addresses      = rcube_utils::get_input_value('_action_addresses', rcube_utils::INPUT_POST, true);\n            $intervals      = rcube_utils::get_input_value('_action_interval', rcube_utils::INPUT_POST);\n            $interval_types = rcube_utils::get_input_value('_action_interval_type', rcube_utils::INPUT_POST);\n            $subject        = rcube_utils::get_input_value('_action_subject', rcube_utils::INPUT_POST, true);\n            $flags          = rcube_utils::get_input_value('_action_flags', rcube_utils::INPUT_POST);\n            $varnames       = rcube_utils::get_input_value('_action_varname', rcube_utils::INPUT_POST);\n            $varvalues      = rcube_utils::get_input_value('_action_varvalue', rcube_utils::INPUT_POST);\n            $varmods        = rcube_utils::get_input_value('_action_varmods', rcube_utils::INPUT_POST);\n            $notifymethods  = rcube_utils::get_input_value('_action_notifymethod', rcube_utils::INPUT_POST);\n            $notifytargets  = rcube_utils::get_input_value('_action_notifytarget', rcube_utils::INPUT_POST, true);\n            $notifyoptions  = rcube_utils::get_input_value('_action_notifyoption', rcube_utils::INPUT_POST, true);\n            $notifymessages = rcube_utils::get_input_value('_action_notifymessage', rcube_utils::INPUT_POST, true);\n            $notifyfrom     = rcube_utils::get_input_value('_action_notifyfrom', rcube_utils::INPUT_POST);\n            $notifyimp      = rcube_utils::get_input_value('_action_notifyimportance', rcube_utils::INPUT_POST);\n\n            // we need a \"hack\" for radiobuttons\n            foreach ($sizeitems as $item)\n                $items[] = $item;\n\n            $this->form['disabled'] = $_POST['_disabled'] ? true : false;\n            $this->form['join']     = $join=='allof' ? true : false;\n            $this->form['name']     = $name;\n            $this->form['tests']    = array();\n            $this->form['actions']  = array();\n\n            if ($name == '')\n                $this->errors['name'] = $this->plugin->gettext('cannotbeempty');\n            else {\n                foreach($this->script as $idx => $rule)\n                    if($rule['name'] == $name && $idx != $fid) {\n                        $this->errors['name'] = $this->plugin->gettext('ruleexist');\n                        break;\n                    }\n            }\n\n            $i = 0;\n            // rules\n            if ($join == 'any') {\n                $this->form['tests'][0]['test'] = 'true';\n            }\n            else {\n                foreach ($headers as $idx => $header) {\n                    // targets are indexed differently (assume form order)\n                    $target     = $this->strip_value(array_shift($targets), true);\n                    $header     = $this->strip_value($header);\n                    $operator   = $this->strip_value($ops[$idx]);\n                    $comparator = $this->strip_value($comparators[$idx]);\n\n                    if ($header == 'size') {\n                        $sizeop     = $this->strip_value($sizeops[$idx]);\n                        $sizeitem   = $this->strip_value($items[$idx]);\n                        $sizetarget = $this->strip_value($sizetargets[$idx]);\n\n                        $this->form['tests'][$i]['test'] = 'size';\n                        $this->form['tests'][$i]['type'] = $sizeop;\n                        $this->form['tests'][$i]['arg']  = $sizetarget;\n\n                        if ($sizetarget == '')\n                            $this->errors['tests'][$i]['sizetarget'] = $this->plugin->gettext('cannotbeempty');\n                        else if (!preg_match('/^[0-9]+(K|M|G)?$/i', $sizetarget.$sizeitem, $m)) {\n                            $this->errors['tests'][$i]['sizetarget'] = $this->plugin->gettext('forbiddenchars');\n                            $this->form['tests'][$i]['item'] = $sizeitem;\n                        }\n                        else\n                            $this->form['tests'][$i]['arg'] .= $m[1];\n                    }\n                    else if ($header == 'currentdate') {\n                        $datepart = $this->strip_value($dateparts[$idx]);\n\n                        if (preg_match('/^not/', $operator))\n                            $this->form['tests'][$i]['not'] = true;\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        $this->form['tests'][$i]['test'] = 'currentdate';\n                        $this->form['tests'][$i]['type'] = $type;\n                        $this->form['tests'][$i]['part'] = $datepart;\n                        $this->form['tests'][$i]['arg']  = $target;\n\n                        if ($type != 'exists') {\n                            if (!count($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            }\n                            else if (strpos($type, 'count-') === 0) {\n                                foreach ($target as $arg) {\n                                    if (preg_match('/[^0-9]/', $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n                            else if (strpos($type, 'value-') === 0) {\n                                // Some date/time formats do not support i;ascii-numeric comparator\n                                if ($comparator == 'i;ascii-numeric' && in_array($datepart, array('date', 'time', 'iso8601', 'std11'))) {\n                                    $comparator = '';\n                                }\n                            }\n\n                            if (!preg_match('/^(regex|matches|count-)/', $type) && count($target)) {\n                                foreach ($target as $arg) {\n                                    if (!$this->validate_date_part($datepart, $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('invaliddateformat');\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else if ($header == 'date') {\n                        $datepart    = $this->strip_value($dateparts[$idx]);\n                        $dateheader  = $this->strip_value($dateheaders[$idx]);\n                        $index       = $this->strip_value($indexes[$idx]);\n                        $indexlast   = $this->strip_value($lastindexes[$idx]);\n\n                        if (preg_match('/^not/', $operator))\n                            $this->form['tests'][$i]['not'] = true;\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        if (!empty($index) && $mod != 'envelope') {\n                            $this->form['tests'][$i]['index'] = intval($index);\n                            $this->form['tests'][$i]['last']  = !empty($indexlast);\n                        }\n\n                        if (empty($dateheader)) {\n                            $dateheader = 'Date';\n                        }\n                        else if (!preg_match('/^[\\x21-\\x39\\x41-\\x7E]+$/i', $dateheader)) {\n                            $this->errors['tests'][$i]['dateheader'] = $this->plugin->gettext('forbiddenchars');\n                        }\n\n                        $this->form['tests'][$i]['test']   = 'date';\n                        $this->form['tests'][$i]['type']   = $type;\n                        $this->form['tests'][$i]['part']   = $datepart;\n                        $this->form['tests'][$i]['arg']    = $target;\n                        $this->form['tests'][$i]['header'] = $dateheader;\n\n                        if ($type != 'exists') {\n                            if (!count($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            }\n                            else if (strpos($type, 'count-') === 0) {\n                                foreach ($target as $arg) {\n                                    if (preg_match('/[^0-9]/', $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n                            else if (strpos($type, 'value-') === 0) {\n                                // Some date/time formats do not support i;ascii-numeric comparator\n                                if ($comparator == 'i;ascii-numeric' && in_array($datepart, array('date', 'time', 'iso8601', 'std11'))) {\n                                    $comparator = '';\n                                }\n                            }\n\n                            if (count($target) && !preg_match('/^(regex|matches|count-)/', $type)) {\n                                foreach ($target as $arg) {\n                                    if (!$this->validate_date_part($datepart, $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('invaliddateformat');\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else if ($header == 'body') {\n                        $trans      = $this->strip_value($body_trans[$idx]);\n                        $trans_type = $this->strip_value($body_types[$idx], true);\n\n                        if (preg_match('/^not/', $operator))\n                            $this->form['tests'][$i]['not'] = true;\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        $this->form['tests'][$i]['test'] = 'body';\n                        $this->form['tests'][$i]['type'] = $type;\n                        $this->form['tests'][$i]['arg']  = $target;\n\n                        if (empty($target) && $type != 'exists') {\n                            $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                        }\n                        else if (preg_match('/^(value|count)-/', $type)) {\n                            foreach ($target as $target_value) {\n                                if (preg_match('/[^0-9]/', $target_value)) {\n                                    $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                }\n                            }\n                        }\n\n                        $this->form['tests'][$i]['part'] = $trans;\n                        if ($trans == 'content') {\n                            $this->form['tests'][$i]['content'] = $trans_type;\n                        }\n                    }\n                    else {\n                        $cust_header = $headers = $this->strip_value(array_shift($cust_headers));\n                        $mod         = $this->strip_value($mods[$idx]);\n                        $mod_type    = $this->strip_value($mod_types[$idx]);\n                        $index       = $this->strip_value($indexes[$idx]);\n                        $indexlast   = $this->strip_value($lastindexes[$idx]);\n\n                        if (preg_match('/^not/', $operator))\n                            $this->form['tests'][$i]['not'] = true;\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if (!empty($index) && $mod != 'envelope') {\n                            $this->form['tests'][$i]['index'] = intval($index);\n                            $this->form['tests'][$i]['last']  = !empty($indexlast);\n                        }\n\n                        if ($header == '...') {\n                            if (!count($headers))\n                                $this->errors['tests'][$i]['header'] = $this->plugin->gettext('cannotbeempty');\n                            else {\n                                foreach ($headers as $hr) {\n                                    // RFC2822: printable ASCII except colon\n                                    if (!preg_match('/^[\\x21-\\x39\\x41-\\x7E]+$/i', $hr)) {\n                                        $this->errors['tests'][$i]['header'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n\n                            if (empty($this->errors['tests'][$i]['header']))\n                                $cust_header = (is_array($headers) && count($headers) == 1) ? $headers[0] : $headers;\n                        }\n\n                        $header = $header == '...' ? $cust_header : $header;\n\n                        if (is_array($header)) {\n                            foreach ($header as $h_index => $val) {\n                                if (isset($this->headers[$val])) {\n                                    $header[$h_index] = $this->headers[$val];\n                                }\n                            }\n                        }\n\n                        if ($type == 'exists') {\n                            $this->form['tests'][$i]['test'] = 'exists';\n                            $this->form['tests'][$i]['arg'] = $header;\n                        }\n                        else {\n                            $test = 'header';\n\n                            if ($mod == 'address' || $mod == 'envelope') {\n                                $found = false;\n                                if (empty($this->errors['tests'][$i]['header'])) {\n                                    foreach ((array)$header as $hdr) {\n                                        if (!in_array(strtolower(trim($hdr)), $this->addr_headers))\n                                            $found = true;\n                                    }\n                                }\n                                if (!$found)\n                                    $test = $mod;\n                            }\n\n                            $this->form['tests'][$i]['type'] = $type;\n                            $this->form['tests'][$i]['test'] = $test;\n                            $this->form['tests'][$i]['arg1'] = $header;\n                            $this->form['tests'][$i]['arg2'] = $target;\n\n                            if (empty($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            }\n                            else if (preg_match('/^(value|count)-/', $type)) {\n                                foreach ($target as $target_value) {\n                                    if (preg_match('/[^0-9]/', $target_value)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n\n                            if ($mod) {\n                                $this->form['tests'][$i]['part'] = $mod_type;\n                            }\n                        }\n                    }\n\n                    if ($header != 'size' && $comparator) {\n                        $this->form['tests'][$i]['comparator'] = $comparator;\n                    }\n\n                    $i++;\n                }\n            }\n\n            $i = 0;\n            // actions\n            foreach ($act_types as $idx => $type) {\n                $type = $this->strip_value($type);\n\n                switch ($type) {\n                case 'fileinto':\n                case 'fileinto_copy':\n                    $mailbox = $this->strip_value($mailboxes[$idx], false, false);\n                    $this->form['actions'][$i]['target'] = $this->mod_mailbox($mailbox, 'in');\n\n                    if ($type == 'fileinto_copy') {\n                        $type = 'fileinto';\n                        $this->form['actions'][$i]['copy'] = true;\n                    }\n                    break;\n\n                case 'reject':\n                case 'ereject':\n                    $target = $this->strip_value($area_targets[$idx]);\n                    $this->form['actions'][$i]['target'] = str_replace(\"\\r\\n\", \"\\n\", $target);\n\n //                 if ($target == '')\n//                      $this->errors['actions'][$i]['targetarea'] = $this->plugin->gettext('cannotbeempty');\n                    break;\n\n                case 'redirect':\n                case 'redirect_copy':\n                    $target = $this->strip_value($act_targets[$idx]);\n                    $domain = $this->strip_value($domain_targets[$idx]);\n\n                    // force one of the configured domains\n                    $domains = (array) $this->rc->config->get('managesieve_domains');\n                    if (!empty($domains) && !empty($target)) {\n                        if (!$domain || !in_array($domain, $domains)) {\n                            $domain = $domains[0];\n                        }\n\n                        $target .= '@' . $domain;\n                    }\n\n                    $this->form['actions'][$i]['target'] = $target;\n\n                    if ($target == '')\n                        $this->errors['actions'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                    else if (!rcube_utils::check_email($target))\n                        $this->errors['actions'][$i]['target'] = $this->plugin->gettext(!empty($domains) ? 'forbiddenchars' : 'noemailwarning');\n\n                    if ($type == 'redirect_copy') {\n                        $type = 'redirect';\n                        $this->form['actions'][$i]['copy'] = true;\n                    }\n\n                    break;\n\n                case 'addflag':\n                case 'setflag':\n                case 'removeflag':\n                    $_target = array();\n                    if (empty($flags[$idx])) {\n                        $this->errors['actions'][$i]['target'] = $this->plugin->gettext('noflagset');\n                    }\n                    else {\n                        foreach ($flags[$idx] as $flag) {\n                            $_target[] = $this->strip_value($flag);\n                        }\n                    }\n                    $this->form['actions'][$i]['target'] = $_target;\n                    break;\n\n                case 'vacation':\n                    $reason        = $this->strip_value($reasons[$idx]);\n                    $interval_type = $interval_types[$idx] == 'seconds' ? 'seconds' : 'days';\n\n                    $this->form['actions'][$i]['reason']    = str_replace(\"\\r\\n\", \"\\n\", $reason);\n                    $this->form['actions'][$i]['subject']   = $subject[$idx];\n                    $this->form['actions'][$i]['addresses'] = array_shift($addresses);\n                    $this->form['actions'][$i][$interval_type] = $intervals[$idx];\n// @TODO: vacation :mime, :from, :handle\n\n                    foreach ((array)$this->form['actions'][$i]['addresses'] as $aidx => $address) {\n                        $this->form['actions'][$i]['addresses'][$aidx] = $address = trim($address);\n\n                        if (empty($address)) {\n                            unset($this->form['actions'][$i]['addresses'][$aidx]);\n                        }\n                        else if (!rcube_utils::check_email($address)) {\n                            $this->errors['actions'][$i]['addresses'] = $this->plugin->gettext('noemailwarning');\n                            break;\n                        }\n                    }\n\n                    if ($this->form['actions'][$i]['reason'] == '')\n                        $this->errors['actions'][$i]['reason'] = $this->plugin->gettext('cannotbeempty');\n                    if ($this->form['actions'][$i][$interval_type] && !preg_match('/^[0-9]+$/', $this->form['actions'][$i][$interval_type]))\n                        $this->errors['actions'][$i]['interval'] = $this->plugin->gettext('forbiddenchars');\n                    break;\n\n                case 'set':\n                    $this->form['actions'][$i]['name'] = $varnames[$idx];\n                    $this->form['actions'][$i]['value'] = $varvalues[$idx];\n                    foreach ((array)$varmods[$idx] as $v_m) {\n                        $this->form['actions'][$i][$v_m] = true;\n                    }\n\n                    if (empty($varnames[$idx])) {\n                        $this->errors['actions'][$i]['name'] = $this->plugin->gettext('cannotbeempty');\n                    }\n                    else if (!preg_match('/^[0-9a-z_]+$/i', $varnames[$idx])) {\n                        $this->errors['actions'][$i]['name'] = $this->plugin->gettext('forbiddenchars');\n                    }\n\n                    if (!isset($varvalues[$idx]) || $varvalues[$idx] === '') {\n                        $this->errors['actions'][$i]['value'] = $this->plugin->gettext('cannotbeempty');\n                    }\n                    break;\n\n                case 'notify':\n                    if (empty($notifymethods[$idx])) {\n                        $this->errors['actions'][$i]['method'] = $this->plugin->gettext('cannotbeempty');\n                    }\n                    if (empty($notifytargets[$idx])) {\n                        $this->errors['actions'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                    }\n                    if (!empty($notifyfrom[$idx]) && !rcube_utils::check_email($notifyfrom[$idx])) {\n                        $this->errors['actions'][$i]['from'] = $this->plugin->gettext('noemailwarning');\n                    }\n\n                    // skip empty options\n                    foreach ((array)$notifyoptions[$idx] as $opt_idx => $opt) {\n                        if (!strlen(trim($opt))) {\n                            unset($notifyoptions[$idx][$opt_idx]);\n                        }\n                    }\n\n                    $this->form['actions'][$i]['method']     = $notifymethods[$idx] . ':' . $notifytargets[$idx];\n                    $this->form['actions'][$i]['options']    = $notifyoptions[$idx];\n                    $this->form['actions'][$i]['message']    = $notifymessages[$idx];\n                    $this->form['actions'][$i]['from']       = $notifyfrom[$idx];\n                    $this->form['actions'][$i]['importance'] = $notifyimp[$idx];\n                    break;\n                }\n\n                $this->form['actions'][$i]['type'] = $type;\n                $i++;\n            }\n\n            if (!$this->errors && !$error) {\n                // save the script\n                if (!isset($this->script[$fid])) {\n                    $fid = $this->sieve->script->add_rule($this->form);\n                    $new = true;\n                }\n                else {\n                    $fid = $this->sieve->script->update_rule($fid, $this->form);\n                }\n\n                if ($fid !== false)\n                    $save = $this->save_script();\n\n                if ($save && $fid !== false) {\n                    $this->rc->output->show_message('managesieve.filtersaved', 'confirmation');\n                    if ($this->rc->task != 'mail') {\n                        $this->rc->output->command('parent.managesieve_updatelist',\n                            isset($new) ? 'add' : 'update',\n                            array(\n                                'name' => $this->form['name'],\n                                'id' => $fid,\n                                'disabled' => $this->form['disabled']\n                        ));\n                    }\n                    else {\n                        $this->rc->output->command('managesieve_dialog_close');\n                        $this->rc->output->send('iframe');\n                    }\n                }\n                else {\n                    $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n//                  $this->rc->output->send();\n                }\n            }\n        }\n\n        $this->send();\n    }\n\n    protected function send()\n    {\n        // Handle form action\n        if (isset($_GET['_framed']) || isset($_POST['_framed'])) {\n            if (isset($_GET['_newset']) || isset($_POST['_newset'])) {\n                $this->rc->output->send('managesieve.setedit');\n            }\n            else {\n                $this->rc->output->send('managesieve.filteredit');\n            }\n        }\n        else {\n            $this->rc->output->set_pagetitle($this->plugin->gettext('filters'));\n            $this->rc->output->send('managesieve.managesieve');\n        }\n    }\n\n    // return the filters list as HTML table\n    function filters_list($attrib)\n    {\n        // add id to message list table if not specified\n        if (!strlen($attrib['id']))\n            $attrib['id'] = 'rcmfilterslist';\n\n        // define list of cols to be displayed\n        $a_show_cols = array('name');\n\n        $result = $this->list_rules();\n\n        // create XHTML table\n        $out = $this->rc->table_output($attrib, $result, $a_show_cols, 'id');\n\n        // set client env\n        $this->rc->output->add_gui_object('filterslist', $attrib['id']);\n        $this->rc->output->include_script('list.js');\n\n        // add some labels to client\n        $this->rc->output->add_label('managesieve.filterdeleteconfirm');\n\n        return $out;\n    }\n\n    // return the filters list as <SELECT>\n    function filtersets_list($attrib, $no_env = false)\n    {\n        // add id to message list table if not specified\n        if (!strlen($attrib['id']))\n            $attrib['id'] = 'rcmfiltersetslist';\n\n        $list = $this->list_scripts();\n\n        if ($list) {\n            asort($list, SORT_LOCALE_STRING);\n        }\n\n        if (!empty($attrib['type']) && $attrib['type'] == 'list') {\n            // define list of cols to be displayed\n            $a_show_cols = array('name');\n\n            if ($list) {\n                foreach ($list as $idx => $set) {\n                    $scripts['S'.$idx] = $set;\n                    $result[] = array(\n                        'name' => $set,\n                        'id' => 'S'.$idx,\n                        'class' => !in_array($set, $this->active) ? 'disabled' : '',\n                    );\n                }\n            }\n\n            // create XHTML table\n            $out = $this->rc->table_output($attrib, $result, $a_show_cols, 'id');\n\n            $this->rc->output->set_env('filtersets', $scripts);\n            $this->rc->output->include_script('list.js');\n        }\n        else {\n            $select = new html_select(array('name' => '_set', 'id' => $attrib['id'],\n                'onchange' => $this->rc->task != 'mail' ? 'rcmail.managesieve_set()' : ''));\n\n            if ($list) {\n                foreach ($list as $set)\n                    $select->add($set, $set);\n            }\n\n            $out = $select->show($this->sieve->current);\n        }\n\n        // set client env\n        if (!$no_env) {\n            $this->rc->output->add_gui_object('filtersetslist', $attrib['id']);\n            $this->rc->output->add_label('managesieve.setdeleteconfirm');\n        }\n\n        return $out;\n    }\n\n    function filter_frame($attrib)\n    {\n        return $this->rc->output->frame($attrib, true);\n    }\n\n    function filterset_form($attrib)\n    {\n        if (!$attrib['id'])\n            $attrib['id'] = 'rcmfiltersetform';\n\n        $out = '<form name=\"filtersetform\" action=\"./\" method=\"post\" enctype=\"multipart/form-data\">'.\"\\n\";\n\n        $hiddenfields = new html_hiddenfield(array('name' => '_task', 'value' => $this->rc->task));\n        $hiddenfields->add(array('name' => '_action', 'value' => 'plugin.managesieve-save'));\n        $hiddenfields->add(array('name' => '_framed', 'value' => ($_POST['_framed'] || $_GET['_framed'] ? 1 : 0)));\n        $hiddenfields->add(array('name' => '_newset', 'value' => 1));\n\n        $out .= $hiddenfields->show();\n\n        $name     = rcube_utils::get_input_value('_name', rcube_utils::INPUT_POST);\n        $copy     = rcube_utils::get_input_value('_copy', rcube_utils::INPUT_POST);\n        $selected = rcube_utils::get_input_value('_from', rcube_utils::INPUT_POST);\n\n        // filter set name input\n        $input_name = new html_inputfield(array('name' => '_name', 'id' => '_name', 'size' => 30,\n            'class' => ($this->errors['name'] ? 'error' : '')));\n\n        $out .= sprintf('<label for=\"%s\"><b>%s:</b></label> %s<br /><br />',\n            '_name', rcube::Q($this->plugin->gettext('filtersetname')), $input_name->show($name));\n\n        $out .=\"\\n<fieldset class=\\\"itemlist\\\"><legend>\" . $this->plugin->gettext('filters') . \":</legend>\\n\";\n        $out .= '<input type=\"radio\" id=\"from_none\" name=\"_from\" value=\"none\"'\n            .(!$selected || $selected=='none' ? ' checked=\"checked\"' : '').'></input>';\n        $out .= sprintf('<label for=\"%s\">%s</label> ', 'from_none', rcube::Q($this->plugin->gettext('none')));\n\n        // filters set list\n        $list   = $this->list_scripts();\n        $select = new html_select(array('name' => '_copy', 'id' => '_copy'));\n\n        if (is_array($list)) {\n            asort($list, SORT_LOCALE_STRING);\n\n            if (!$copy)\n                $copy = $_SESSION['managesieve_current'];\n\n            foreach ($list as $set) {\n                $select->add($set, $set);\n            }\n\n            $out .= '<br /><input type=\"radio\" id=\"from_set\" name=\"_from\" value=\"set\"'\n                .($selected=='set' ? ' checked=\"checked\"' : '').'></input>';\n            $out .= sprintf('<label for=\"%s\">%s:</label> ', 'from_set', rcube::Q($this->plugin->gettext('fromset')));\n            $out .= $select->show($copy);\n        }\n\n        // script upload box\n        $upload = new html_inputfield(array('name' => '_file', 'id' => '_file', 'size' => 30,\n            'type' => 'file', 'class' => ($this->errors['file'] ? 'error' : '')));\n\n        $out .= '<br /><input type=\"radio\" id=\"from_file\" name=\"_from\" value=\"file\"'\n            .($selected=='file' ? ' checked=\"checked\"' : '').'></input>';\n        $out .= sprintf('<label for=\"%s\">%s:</label> ', 'from_file', rcube::Q($this->plugin->gettext('fromfile')));\n        $out .= $upload->show();\n        $out .= '</fieldset>';\n\n        $this->rc->output->add_gui_object('sieveform', 'filtersetform');\n\n        if ($this->errors['name'])\n            $this->add_tip('_name', $this->errors['name'], true);\n        if ($this->errors['file'])\n            $this->add_tip('_file', $this->errors['file'], true);\n\n        $this->print_tips();\n\n        return $out;\n    }\n\n\n    function filter_form($attrib)\n    {\n        if (!$attrib['id'])\n            $attrib['id'] = 'rcmfilterform';\n\n        $fid = rcube_utils::get_input_value('_fid', rcube_utils::INPUT_GPC);\n        $scr = isset($this->form) ? $this->form : $this->script[$fid];\n\n        $hiddenfields = new html_hiddenfield(array('name' => '_task', 'value' => $this->rc->task));\n        $hiddenfields->add(array('name' => '_action', 'value' => 'plugin.managesieve-save'));\n        $hiddenfields->add(array('name' => '_framed', 'value' => ($_POST['_framed'] || $_GET['_framed'] ? 1 : 0)));\n        $hiddenfields->add(array('name' => '_fid', 'value' => $fid));\n\n        $out = '<form name=\"filterform\" action=\"./\" method=\"post\">'.\"\\n\";\n        $out .= $hiddenfields->show();\n\n        // 'any' flag\n        if ((!isset($this->form) && empty($scr['tests']) && !empty($scr))\n            || (sizeof($scr['tests']) == 1 && $scr['tests'][0]['test'] == 'true' && !$scr['tests'][0]['not'])\n        ) {\n            $any = true;\n        }\n\n        // filter name input\n        $field_id = '_name';\n        $input_name = new html_inputfield(array('name' => '_name', 'id' => $field_id, 'size' => 30,\n            'class' => ($this->errors['name'] ? 'error' : '')));\n\n        if ($this->errors['name'])\n            $this->add_tip($field_id, $this->errors['name'], true);\n\n        if (isset($scr))\n            $input_name = $input_name->show($scr['name']);\n        else\n            $input_name = $input_name->show();\n\n        $out .= sprintf(\"\\n<label for=\\\"%s\\\"><b>%s:</b></label> %s\\n\",\n            $field_id, rcube::Q($this->plugin->gettext('filtername')), $input_name);\n\n        // filter set selector\n        if ($this->rc->task == 'mail') {\n            $out .= sprintf(\"\\n&nbsp;<label for=\\\"%s\\\"><b>%s:</b></label> %s\\n\",\n                $field_id, rcube::Q($this->plugin->gettext('filterset')),\n                $this->filtersets_list(array('id' => 'sievescriptname'), true));\n        }\n\n        $out .= '<br /><br /><fieldset><legend>' . rcube::Q($this->plugin->gettext('messagesrules')) . \"</legend>\\n\";\n\n        // any, allof, anyof radio buttons\n        $field_id = '_allof';\n        $input_join = new html_radiobutton(array('name' => '_join', 'id' => $field_id, 'value' => 'allof',\n            'onclick' => 'rule_join_radio(\\'allof\\')', 'class' => 'radio'));\n\n        if (isset($scr) && !$any)\n            $input_join = $input_join->show($scr['join'] ? 'allof' : '');\n        else\n            $input_join = $input_join->show();\n\n        $out .= sprintf(\"%s<label for=\\\"%s\\\">%s</label>&nbsp;\\n\",\n            $input_join, $field_id, rcube::Q($this->plugin->gettext('filterallof')));\n\n        $field_id = '_anyof';\n        $input_join = new html_radiobutton(array('name' => '_join', 'id' => $field_id, 'value' => 'anyof',\n            'onclick' => 'rule_join_radio(\\'anyof\\')', 'class' => 'radio'));\n\n        if (isset($scr) && !$any)\n            $input_join = $input_join->show($scr['join'] ? '' : 'anyof');\n        else\n            $input_join = $input_join->show('anyof'); // default\n\n        $out .= sprintf(\"%s<label for=\\\"%s\\\">%s</label>\\n\",\n            $input_join, $field_id, rcube::Q($this->plugin->gettext('filteranyof')));\n\n        $field_id = '_any';\n        $input_join = new html_radiobutton(array('name' => '_join', 'id' => $field_id, 'value' => 'any',\n            'onclick' => 'rule_join_radio(\\'any\\')', 'class' => 'radio'));\n\n        $input_join = $input_join->show($any ? 'any' : '');\n\n        $out .= sprintf(\"%s<label for=\\\"%s\\\">%s</label>\\n\",\n            $input_join, $field_id, rcube::Q($this->plugin->gettext('filterany')));\n\n        $rows_num = !empty($scr['tests']) ? sizeof($scr['tests']) : 1;\n\n        $out .= '<div id=\"rules\"'.($any ? ' style=\"display: none\"' : '').'>';\n        for ($x=0; $x<$rows_num; $x++)\n            $out .= $this->rule_div($fid, $x);\n        $out .= \"</div>\\n\";\n\n        $out .= \"</fieldset>\\n\";\n\n        // actions\n        $out .= '<fieldset><legend>' . rcube::Q($this->plugin->gettext('messagesactions')) . \"</legend>\\n\";\n\n        $rows_num = isset($scr) ? sizeof($scr['actions']) : 1;\n\n        $out .= '<div id=\"actions\">';\n        for ($x=0; $x<$rows_num; $x++)\n            $out .= $this->action_div($fid, $x);\n        $out .= \"</div>\\n\";\n\n        $out .= \"</fieldset>\\n\";\n\n        $this->print_tips();\n\n        if ($scr['disabled']) {\n            $this->rc->output->set_env('rule_disabled', true);\n        }\n        $this->rc->output->add_label(\n            'managesieve.ruledeleteconfirm',\n            'managesieve.actiondeleteconfirm'\n        );\n        $this->rc->output->add_gui_object('sieveform', 'filterform');\n\n        return $out;\n    }\n\n    function rule_div($fid, $id, $div=true)\n    {\n        $rule     = isset($this->form) ? $this->form['tests'][$id] : $this->script[$fid]['tests'][$id];\n        $rows_num = isset($this->form) ? sizeof($this->form['tests']) : sizeof($this->script[$fid]['tests']);\n\n        // headers select\n        $select_header = new html_select(array('name' => \"_header[]\", 'id' => 'header'.$id,\n            'onchange' => 'rule_header_select(' .$id .')'));\n\n        foreach ($this->headers as $index => $header) {\n            $header = $this->rc->text_exists($index) ? $this->plugin->gettext($index) : $header;\n            $select_header->add($header, $index);\n        }\n        $select_header->add($this->plugin->gettext('...'), '...');\n        if (in_array('body', $this->exts))\n            $select_header->add($this->plugin->gettext('body'), 'body');\n        $select_header->add($this->plugin->gettext('size'), 'size');\n        if (in_array('date', $this->exts)) {\n            $select_header->add($this->plugin->gettext('datetest'), 'date');\n            $select_header->add($this->plugin->gettext('currdate'), 'currentdate');\n        }\n\n        if (isset($rule['test'])) {\n            if (in_array($rule['test'], array('header', 'address', 'envelope'))) {\n                if (is_array($rule['arg1']) && count($rule['arg1']) == 1) {\n                    $rule['arg1'] = $rule['arg1'][0];\n                }\n\n                $matches = ($header = strtolower($rule['arg1'])) && isset($this->headers[$header]);\n                $test    = $matches ? $header : '...';\n            }\n            else if ($rule['test'] == 'exists') {\n                if (is_array($rule['arg']) && count($rule['arg']) == 1) {\n                    $rule['arg'] = $rule['arg'][0];\n                }\n\n                $matches = ($header = strtolower($rule['arg'])) && isset($this->headers[$header]);\n                $test    = $matches ? $header : '...';\n            }\n            else if (in_array($rule['test'], array('size', 'body', 'date', 'currentdate'))) {\n                $test = $rule['test'];\n            }\n            else if ($rule['test'] != 'true') {\n                $test = '...';\n            }\n        }\n\n        $aout = $select_header->show($test);\n\n        // custom headers input\n        if (isset($rule['test']) && in_array($rule['test'], array('header', 'address', 'envelope'))) {\n            $custom = (array) $rule['arg1'];\n            if (count($custom) == 1 && isset($this->headers[strtolower($custom[0])])) {\n                unset($custom);\n            }\n        }\n        else if (isset($rule['test']) && $rule['test'] == 'exists') {\n            $custom = (array) $rule['arg'];\n            if (count($custom) == 1 && isset($this->headers[strtolower($custom[0])])) {\n                unset($custom);\n            }\n        }\n\n        $tout = $this->list_input($id, 'custom_header', $custom, isset($custom),\n            $this->error_class($id, 'test', 'header', 'custom_header'), 15) . \"\\n\";\n\n        // matching type select (operator)\n        $select_op = new html_select(array('name' => \"_rule_op[]\", 'id' => 'rule_op'.$id,\n            'style' => 'display:' .($rule['test']!='size' ? 'inline' : 'none'),\n            'class' => 'operator_selector',\n            'onchange' => 'rule_op_select(this, '.$id.')'));\n        $select_op->add(rcube::Q($this->plugin->gettext('filtercontains')), 'contains');\n        $select_op->add(rcube::Q($this->plugin->gettext('filternotcontains')), 'notcontains');\n        $select_op->add(rcube::Q($this->plugin->gettext('filteris')), 'is');\n        $select_op->add(rcube::Q($this->plugin->gettext('filterisnot')), 'notis');\n        $select_op->add(rcube::Q($this->plugin->gettext('filterexists')), 'exists');\n        $select_op->add(rcube::Q($this->plugin->gettext('filternotexists')), 'notexists');\n        $select_op->add(rcube::Q($this->plugin->gettext('filtermatches')), 'matches');\n        $select_op->add(rcube::Q($this->plugin->gettext('filternotmatches')), 'notmatches');\n        if (in_array('regex', $this->exts)) {\n            $select_op->add(rcube::Q($this->plugin->gettext('filterregex')), 'regex');\n            $select_op->add(rcube::Q($this->plugin->gettext('filternotregex')), 'notregex');\n        }\n        if (in_array('relational', $this->exts)) {\n            $select_op->add(rcube::Q($this->plugin->gettext('countisgreaterthan')), 'count-gt');\n            $select_op->add(rcube::Q($this->plugin->gettext('countisgreaterthanequal')), 'count-ge');\n            $select_op->add(rcube::Q($this->plugin->gettext('countislessthan')), 'count-lt');\n            $select_op->add(rcube::Q($this->plugin->gettext('countislessthanequal')), 'count-le');\n            $select_op->add(rcube::Q($this->plugin->gettext('countequals')), 'count-eq');\n            $select_op->add(rcube::Q($this->plugin->gettext('countnotequals')), 'count-ne');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueisgreaterthan')), 'value-gt');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueisgreaterthanequal')), 'value-ge');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueislessthan')), 'value-lt');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueislessthanequal')), 'value-le');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueequals')), 'value-eq');\n            $select_op->add(rcube::Q($this->plugin->gettext('valuenotequals')), 'value-ne');\n        }\n\n        $test   = self::rule_test($rule);\n        $target = '';\n\n        // target(s) input\n        if (in_array($rule['test'], array('header', 'address', 'envelope'))) {\n            $target = $rule['arg2'];\n        }\n        else if (in_array($rule['test'], array('body', 'date', 'currentdate'))) {\n            $target = $rule['arg'];\n        }\n        else if ($rule['test'] == 'size') {\n            if (preg_match('/^([0-9]+)(K|M|G)?$/', $rule['arg'], $matches)) {\n                $sizetarget = $matches[1];\n                $sizeitem   = $matches[2];\n            }\n            else {\n                $sizetarget = $rule['arg'];\n                $sizeitem   = $rule['item'];\n            }\n        }\n\n        // (current)date part select\n        if (in_array('date', $this->exts) || in_array('currentdate', $this->exts)) {\n            $date_parts = array('date', 'iso8601', 'std11', 'julian', 'time',\n                'year', 'month', 'day', 'hour', 'minute', 'second', 'weekday', 'zone');\n            $select_dp = new html_select(array('name' => \"_rule_date_part[]\", 'id' => 'rule_date_part'.$id,\n                'style' => in_array($rule['test'], array('currentdate', 'date')) && !preg_match('/^(notcount|count)-/', $test) ? '' : 'display:none',\n                'class' => 'datepart_selector',\n            ));\n\n            foreach ($date_parts as $part) {\n                $select_dp->add(rcube::Q($this->plugin->gettext($part)), $part);\n            }\n\n            $tout .= $select_dp->show($rule['test'] == 'currentdate' || $rule['test'] == 'date' ? $rule['part'] : '');\n        }\n\n        $tout .= $select_op->show($test);\n        $tout .= $this->list_input($id, 'rule_target', $target,\n            $rule['test'] != 'size' && $rule['test'] != 'exists',\n            $this->error_class($id, 'test', 'target', 'rule_target')) . \"\\n\";\n\n        $select_size_op = new html_select(array('name' => \"_rule_size_op[]\", 'id' => 'rule_size_op'.$id));\n        $select_size_op->add(rcube::Q($this->plugin->gettext('filterover')), 'over');\n        $select_size_op->add(rcube::Q($this->plugin->gettext('filterunder')), 'under');\n\n        $tout .= '<div id=\"rule_size' .$id. '\" style=\"display:' . ($rule['test']=='size' ? 'inline' : 'none') .'\">';\n        $tout .= $select_size_op->show($rule['test']=='size' ? $rule['type'] : '');\n        $tout .= '<input type=\"text\" name=\"_rule_size_target[]\" id=\"rule_size_i'.$id.'\" value=\"'.$sizetarget.'\" size=\"10\" ' \n            . $this->error_class($id, 'test', 'sizetarget', 'rule_size_i') .' />\n            <label><input type=\"radio\" name=\"_rule_size_item['.$id.']\" value=\"\"'\n                . (!$sizeitem ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->rc->gettext('B').'</label>\n            <label><input type=\"radio\" name=\"_rule_size_item['.$id.']\" value=\"K\"'\n                . ($sizeitem=='K' ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->rc->gettext('KB').'</label>\n            <label><input type=\"radio\" name=\"_rule_size_item['.$id.']\" value=\"M\"'\n                . ($sizeitem=='M' ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->rc->gettext('MB').'</label>\n            <label><input type=\"radio\" name=\"_rule_size_item['.$id.']\" value=\"G\"'\n                . ($sizeitem=='G' ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->rc->gettext('GB').'</label>';\n        $tout .= '</div>';\n\n        // Advanced modifiers (address, envelope)\n        $select_mod = new html_select(array('name' => \"_rule_mod[]\", 'id' => 'rule_mod_op'.$id,\n            'onchange' => 'rule_mod_select(' .$id .')'));\n        $select_mod->add(rcube::Q($this->plugin->gettext('none')), '');\n        $select_mod->add(rcube::Q($this->plugin->gettext('address')), 'address');\n        if (in_array('envelope', $this->exts))\n            $select_mod->add(rcube::Q($this->plugin->gettext('envelope')), 'envelope');\n\n        $select_type = new html_select(array('name' => \"_rule_mod_type[]\", 'id' => 'rule_mod_type'.$id));\n        $select_type->add(rcube::Q($this->plugin->gettext('allparts')), 'all');\n        $select_type->add(rcube::Q($this->plugin->gettext('domain')), 'domain');\n        $select_type->add(rcube::Q($this->plugin->gettext('localpart')), 'localpart');\n        if (in_array('subaddress', $this->exts)) {\n            $select_type->add(rcube::Q($this->plugin->gettext('user')), 'user');\n            $select_type->add(rcube::Q($this->plugin->gettext('detail')), 'detail');\n        }\n\n        $need_mod = !in_array($rule['test'], array('size', 'body', 'date', 'currentdate'));\n        $mout = '<div id=\"rule_mod' .$id. '\" class=\"adv\"' . (!$need_mod ? ' style=\"display:none\"' : '') . '>';\n        $mout .= ' <span class=\"label\">' . rcube::Q($this->plugin->gettext('modifier')) . ' </span>';\n        $mout .= $select_mod->show($rule['test']);\n        $mout .= ' <span id=\"rule_mod_type' . $id . '\"';\n        $mout .= ' style=\"display:' . (in_array($rule['test'], array('address', 'envelope')) ? 'inline' : 'none') .'\">';\n        $mout .= rcube::Q($this->plugin->gettext('modtype')) . ' ';\n        $mout .= $select_type->show($rule['part']);\n        $mout .= '</span>';\n        $mout .= '</div>';\n\n        // Advanced modifiers (body transformations)\n        $select_mod = new html_select(array('name' => \"_rule_trans[]\", 'id' => 'rule_trans_op'.$id,\n            'onchange' => 'rule_trans_select(' .$id .')'));\n        $select_mod->add(rcube::Q($this->plugin->gettext('text')), 'text');\n        $select_mod->add(rcube::Q($this->plugin->gettext('undecoded')), 'raw');\n        $select_mod->add(rcube::Q($this->plugin->gettext('contenttype')), 'content');\n\n        $mout .= '<div id=\"rule_trans' .$id. '\" class=\"adv\"' . ($rule['test'] != 'body' ? ' style=\"display:none\"' : '') . '>';\n        $mout .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('modifier')) . '</span>';\n        $mout .= $select_mod->show($rule['part']);\n        $mout .= '<input type=\"text\" name=\"_rule_trans_type[]\" id=\"rule_trans_type'.$id\n            . '\" value=\"'.(is_array($rule['content']) ? implode(',', $rule['content']) : $rule['content'])\n            .'\" size=\"20\"' . ($rule['part'] != 'content' ? ' style=\"display:none\"' : '')\n            . $this->error_class($id, 'test', 'part', 'rule_trans_type') .' />';\n        $mout .= '</div>';\n\n        // Advanced modifiers (body transformations)\n        $select_comp = new html_select(array('name' => \"_rule_comp[]\", 'id' => 'rule_comp_op'.$id));\n        $select_comp->add(rcube::Q($this->plugin->gettext('default')), '');\n        $select_comp->add(rcube::Q($this->plugin->gettext('octet')), 'i;octet');\n        $select_comp->add(rcube::Q($this->plugin->gettext('asciicasemap')), 'i;ascii-casemap');\n        if (in_array('comparator-i;ascii-numeric', $this->exts)) {\n            $select_comp->add(rcube::Q($this->plugin->gettext('asciinumeric')), 'i;ascii-numeric');\n        }\n\n        // Comparators\n        $mout .= '<div id=\"rule_comp' .$id. '\" class=\"adv\"' . ($rule['test'] == 'size' ? ' style=\"display:none\"' : '') . '>';\n        $mout .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('comparator')) . '</span>';\n        $mout .= $select_comp->show($rule['comparator']);\n        $mout .= '</div>';\n\n        // Date header\n        if (in_array('date', $this->exts)) {\n            $mout .= '<div id=\"rule_date_header_div' .$id. '\" class=\"adv\"'. ($rule['test'] != 'date' ? ' style=\"display:none\"' : '') .'>';\n            $mout .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('dateheader')) . '</span>';\n            $mout .= '<input type=\"text\" name=\"_rule_date_header[]\" id=\"rule_date_header'.$id\n                . '\" value=\"'. Q($rule['test'] == 'date' ? $rule['header'] : '')\n                . '\" size=\"15\"' . $this->error_class($id, 'test', 'dateheader', 'rule_date_header') .' />';\n            $mout .= '</div>';\n        }\n\n        // Index\n        if (in_array('index', $this->exts)) {\n            $need_index = in_array($rule['test'], array('header', ', address', 'date'));\n            $mout .= '<div id=\"rule_index_div' .$id. '\" class=\"adv\"'. (!$need_index ? ' style=\"display:none\"' : '') .'>';\n            $mout .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('index')) . '</span>';\n            $mout .= '<input type=\"text\" name=\"_rule_index[]\" id=\"rule_index'.$id\n                . '\" value=\"'. ($rule['index'] ? intval($rule['index']) : '')\n                . '\" size=\"3\"' . $this->error_class($id, 'test', 'index', 'rule_index') .' />';\n            $mout .= '&nbsp;<input type=\"checkbox\" name=\"_rule_index_last[]\" id=\"rule_index_last'.$id\n                . '\" value=\"1\"' . (!empty($rule['last']) ? ' checked=\"checked\"' : '') . ' />'\n                . '<label for=\"rule_index_last'.$id.'\">'.rcube::Q($this->plugin->gettext('indexlast')).'</label>';\n            $mout .= '</div>';\n        }\n\n        // Build output table\n        $out = $div ? '<div class=\"rulerow\" id=\"rulerow' .$id .'\">'.\"\\n\" : '';\n        $out .= '<table><tr>';\n        $out .= '<td class=\"advbutton\">';\n        $out .= '<a href=\"#\" id=\"ruleadv' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('advancedopts')). '\"\n            onclick=\"rule_adv_switch(' . $id .', this)\" class=\"show\">&nbsp;&nbsp;</a>';\n        $out .= '</td>';\n        $out .= '<td class=\"rowactions\">' . $aout . '</td>';\n        $out .= '<td class=\"rowtargets\">' . $tout . \"\\n\";\n        $out .= '<div id=\"rule_advanced' .$id. '\" style=\"display:none\">' . $mout . '</div>';\n        $out .= '</td>';\n\n        // add/del buttons\n        $out .= '<td class=\"rowbuttons\">';\n        $out .= '<a href=\"#\" id=\"ruleadd' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('add')). '\"\n            onclick=\"rcmail.managesieve_ruleadd(' . $id .')\" class=\"button add\"></a>';\n        $out .= '<a href=\"#\" id=\"ruledel' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('del')). '\"\n            onclick=\"rcmail.managesieve_ruledel(' . $id .')\" class=\"button del' . ($rows_num<2 ? ' disabled' : '') .'\"></a>';\n        $out .= '</td>';\n        $out .= '</tr></table>';\n\n        $out .= $div ? \"</div>\\n\" : '';\n\n        return $out;\n    }\n\n    private static function rule_test(&$rule)\n    {\n        // first modify value/count tests with 'not' keyword\n        // we'll revert the meaning of operators\n        if ($rule['not'] && preg_match('/^(count|value)-([gteqnl]{2})/', $rule['type'], $m)) {\n            $rule['not'] = false;\n\n            switch ($m[2]) {\n            case 'gt': $rule['type'] = $m[1] . '-le'; break;\n            case 'ge': $rule['type'] = $m[1] . '-lt'; break;\n            case 'lt': $rule['type'] = $m[1] . '-ge'; break;\n            case 'le': $rule['type'] = $m[1] . '-gt'; break;\n            case 'eq': $rule['type'] = $m[1] . '-ne'; break;\n            case 'ne': $rule['type'] = $m[1] . '-eq'; break;\n            }\n        }\n        else if ($rule['not'] && $rule['test'] == 'size') {\n            $rule['not']  = false;\n            $rule['type'] = $rule['type'] == 'over' ? 'under' : 'over';\n        }\n\n        $set = array('header', 'address', 'envelope', 'body', 'date', 'currentdate');\n\n        // build test string supported by select element\n        if ($rule['size']) {\n            $test = $rule['type'];\n        }\n        else if (in_array($rule['test'], $set)) {\n            $test = ($rule['not'] ? 'not' : '') . ($rule['type'] ? $rule['type'] : 'is');\n        }\n        else {\n            $test = ($rule['not'] ? 'not' : '') . $rule['test'];\n        }\n\n        return $test;\n    }\n\n    function action_div($fid, $id, $div=true)\n    {\n        $action   = isset($this->form) ? $this->form['actions'][$id] : $this->script[$fid]['actions'][$id];\n        $rows_num = isset($this->form) ? sizeof($this->form['actions']) : sizeof($this->script[$fid]['actions']);\n\n        $out = $div ? '<div class=\"actionrow\" id=\"actionrow' .$id .'\">'.\"\\n\" : '';\n\n        $out .= '<table><tr><td class=\"rowactions\">';\n\n        // action select\n        $select_action = new html_select(array('name' => \"_action_type[$id]\", 'id' => 'action_type'.$id,\n            'onchange' => 'action_type_select(' .$id .')'));\n        if (in_array('fileinto', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagemoveto')), 'fileinto');\n        if (in_array('fileinto', $this->exts) && in_array('copy', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagecopyto')), 'fileinto_copy');\n        $select_action->add(rcube::Q($this->plugin->gettext('messageredirect')), 'redirect');\n        if (in_array('copy', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagesendcopy')), 'redirect_copy');\n        if (in_array('reject', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagediscard')), 'reject');\n        else if (in_array('ereject', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagediscard')), 'ereject');\n        if (in_array('vacation', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagereply')), 'vacation');\n        $select_action->add(rcube::Q($this->plugin->gettext('messagedelete')), 'discard');\n        if (in_array('imapflags', $this->exts) || in_array('imap4flags', $this->exts)) {\n            $select_action->add(rcube::Q($this->plugin->gettext('setflags')), 'setflag');\n            $select_action->add(rcube::Q($this->plugin->gettext('addflags')), 'addflag');\n            $select_action->add(rcube::Q($this->plugin->gettext('removeflags')), 'removeflag');\n        }\n        if (in_array('variables', $this->exts)) {\n            $select_action->add(rcube::Q($this->plugin->gettext('setvariable')), 'set');\n        }\n        if (in_array('enotify', $this->exts) || in_array('notify', $this->exts)) {\n            $select_action->add(rcube::Q($this->plugin->gettext('notify')), 'notify');\n        }\n        $select_action->add(rcube::Q($this->plugin->gettext('messagekeep')), 'keep');\n        $select_action->add(rcube::Q($this->plugin->gettext('rulestop')), 'stop');\n\n        $select_type = $action['type'];\n        if (in_array($action['type'], array('fileinto', 'redirect')) && $action['copy']) {\n            $select_type .= '_copy';\n        }\n\n        $out .= $select_action->show($select_type);\n        $out .= '</td>';\n\n        // actions target inputs\n        $out .= '<td class=\"rowtargets\">';\n\n        // force domain selection in redirect email input\n        $domains = (array) $this->rc->config->get('managesieve_domains');\n        if (!empty($domains)) {\n            sort($domains);\n\n            $domain_select = new html_select(array('name' => \"_action_target_domain[$id]\", 'id' => 'action_target_domain'.$id));\n            $domain_select->add(array_combine($domains, $domains));\n\n            if ($action['type'] == 'redirect') {\n                $parts = explode('@', $action['target']);\n                if (!empty($parts)) {\n                    $action['domain'] = array_pop($parts);\n                    $action['target'] = implode('@', $parts);\n                }\n            }\n        }\n\n        // redirect target\n        $out .= '<span id=\"redirect_target' . $id . '\" style=\"white-space:nowrap;'\n            . ' display:' . ($action['type'] == 'redirect' ? 'inline' : 'none') . '\">'\n            . '<input type=\"text\" name=\"_action_target['.$id.']\" id=\"action_target' .$id. '\"'\n            . ' value=\"' .($action['type'] == 'redirect' ? rcube::Q($action['target'], 'strict', false) : '') . '\"'\n            . (!empty($domains) ? ' size=\"20\"' : ' size=\"35\"')\n            . $this->error_class($id, 'action', 'target', 'action_target') .' />'\n            . (!empty($domains) ? ' @ ' . $domain_select->show($action['domain']) : '')\n            . '</span>';\n\n        // (e)reject target\n        $out .= '<textarea name=\"_action_target_area['.$id.']\" id=\"action_target_area' .$id. '\" '\n            .'rows=\"3\" cols=\"35\" '. $this->error_class($id, 'action', 'targetarea', 'action_target_area')\n            .'style=\"display:' .(in_array($action['type'], array('reject', 'ereject')) ? 'inline' : 'none') .'\">'\n            . (in_array($action['type'], array('reject', 'ereject')) ? rcube::Q($action['target'], 'strict', false) : '')\n            . \"</textarea>\\n\";\n\n        // vacation\n        $vsec      = in_array('vacation-seconds', $this->exts);\n        $auto_addr = $this->rc->config->get('managesieve_vacation_addresses_init');\n        $addresses = isset($action['addresses']) || !$auto_addr ? (array) $action['addresses'] : $this->user_emails();\n\n        $out .= '<div id=\"action_vacation' .$id.'\" style=\"display:' .($action['type']=='vacation' ? 'inline' : 'none') .'\">';\n        $out .= '<span class=\"label\">'. rcube::Q($this->plugin->gettext('vacationreason')) .'</span><br />'\n            .'<textarea name=\"_action_reason['.$id.']\" id=\"action_reason' .$id. '\" '\n            .'rows=\"3\" cols=\"35\" '. $this->error_class($id, 'action', 'reason', 'action_reason') . '>'\n            . Q($action['reason'], 'strict', false) . \"</textarea>\\n\";\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('vacationsubject')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_subject['.$id.']\" id=\"action_subject'.$id.'\" '\n            .'value=\"' . (is_array($action['subject']) ? rcube::Q(implode(', ', $action['subject']), 'strict', false) : $action['subject']) . '\" size=\"35\" '\n            . $this->error_class($id, 'action', 'subject', 'action_subject') .' />';\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('vacationaddr')) . '</span><br />'\n            . $this->list_input($id, 'action_addresses', $addresses, true,\n                $this->error_class($id, 'action', 'addresses', 'action_addresses'), 30)\n            . html::a(array('href' => '#', 'onclick' => rcmail_output::JS_OBJECT_NAME . \".managesieve_vacation_addresses($id)\"),\n                rcube::Q($this->plugin->gettext('filladdresses')));\n        $out .= '<br /><span class=\"label\">' . rcube::Q($this->plugin->gettext($vsec ? 'vacationinterval' : 'vacationdays')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_interval['.$id.']\" id=\"action_interval'.$id.'\" '\n            .'value=\"' .rcube::Q(rcube_sieve_vacation::vacation_interval($action), 'strict', false) . '\" size=\"2\" '\n            . $this->error_class($id, 'action', 'interval', 'action_interval') .' />';\n        if ($vsec) {\n            $out .= '&nbsp;<label><input type=\"radio\" name=\"_action_interval_type['.$id.']\" value=\"days\"'\n                . (!isset($action['seconds']) ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->plugin->gettext('days').'</label>'\n                . '&nbsp;<label><input type=\"radio\" name=\"_action_interval_type['.$id.']\" value=\"seconds\"'\n                . (isset($action['seconds']) ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->plugin->gettext('seconds').'</label>';\n        }\n        $out .= '</div>';\n\n        // flags\n        $flags = array(\n            'read'      => '\\\\Seen',\n            'answered'  => '\\\\Answered',\n            'flagged'   => '\\\\Flagged',\n            'deleted'   => '\\\\Deleted',\n            'draft'     => '\\\\Draft',\n        );\n        $flags_target = (array)$action['target'];\n\n        $out .= '<div id=\"action_flags' .$id.'\" style=\"display:' \n            . (preg_match('/^(set|add|remove)flag$/', $action['type']) ? 'inline' : 'none') . '\"'\n            . $this->error_class($id, 'action', 'flags', 'action_flags') . '>';\n        foreach ($flags as $fidx => $flag) {\n            $out .= '<input type=\"checkbox\" name=\"_action_flags[' .$id .'][]\" value=\"' . $flag . '\"'\n                . (in_array_nocase($flag, $flags_target) ? 'checked=\"checked\"' : '') . ' />'\n                . rcube::Q($this->plugin->gettext('flag'.$fidx)) .'<br>';\n        }\n        $out .= '</div>';\n\n        // set variable\n        $set_modifiers = array(\n            'lower',\n            'upper',\n            'lowerfirst',\n            'upperfirst',\n            'quotewildcard',\n            'length'\n        );\n\n        $out .= '<div id=\"action_set' .$id.'\" style=\"display:' .($action['type']=='set' ? 'inline' : 'none') .'\">';\n        $out .= '<span class=\"label\">' .rcube::Q($this->plugin->gettext('setvarname')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_varname['.$id.']\" id=\"action_varname'.$id.'\" '\n            .'value=\"' . rcube::Q($action['name']) . '\" size=\"35\" '\n            . $this->error_class($id, 'action', 'name', 'action_varname') .' />';\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('setvarvalue')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_varvalue['.$id.']\" id=\"action_varvalue'.$id.'\" '\n            .'value=\"' . rcube::Q($action['value']) . '\" size=\"35\" '\n            . $this->error_class($id, 'action', 'value', 'action_varvalue') .' />';\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('setvarmodifiers')) . '</span><br />';\n        foreach ($set_modifiers as $s_m) {\n            $s_m_id = 'action_varmods' . $id . $s_m;\n            $out .= sprintf('<input type=\"checkbox\" name=\"_action_varmods[%s][]\" value=\"%s\" id=\"%s\"%s />%s<br>',\n                $id, $s_m, $s_m_id,\n                (array_key_exists($s_m, (array)$action) && $action[$s_m] ? ' checked=\"checked\"' : ''),\n                rcube::Q($this->plugin->gettext('var' . $s_m)));\n        }\n        $out .= '</div>';\n\n        // notify\n        $notify_methods     = (array) $this->rc->config->get('managesieve_notify_methods');\n        $importance_options = $this->notify_importance_options;\n\n        if (empty($notify_methods)) {\n            $notify_methods = $this->notify_methods;\n        }\n\n        list($method, $target) = explode(':', $action['method'], 2);\n        $method = strtolower($method);\n\n        if ($method && !in_array($method, $notify_methods)) {\n            $notify_methods[] = $method;\n        }\n\n        $select_method = new html_select(array(\n            'name'  => \"_action_notifymethod[$id]\",\n            'id'    => \"_action_notifymethod$id\",\n            'class' => $this->error_class($id, 'action', 'method', 'action_notifymethod'),\n        ));\n        foreach ($notify_methods as $m_n) {\n            $select_method->add(rcube::Q($this->rc->text_exists('managesieve.notifymethod'.$m_n) ? $this->plugin->gettext('managesieve.notifymethod'.$m_n) : $m_n), $m_n);\n        }\n\n        $select_importance = new html_select(array(\n            'name'  => \"_action_notifyimportance[$id]\",\n            'id'    => \"_action_notifyimportance$id\",\n            'class' => $this->error_class($id, 'action', 'importance', 'action_notifyimportance')\n        ));\n        foreach ($importance_options as $io_v => $io_n) {\n            $select_importance->add(rcube::Q($this->plugin->gettext($io_n)), $io_v);\n        }\n\n        // @TODO: nice UI for mailto: (other methods too) URI parameters\n        $out .= '<div id=\"action_notify' .$id.'\" style=\"display:' .($action['type'] == 'notify' ? 'inline' : 'none') .'\">';\n        $out .= '<span class=\"label\">' .rcube::Q($this->plugin->gettext('notifytarget')) . '</span><br />'\n            . $select_method->show($method)\n            .'<input type=\"text\" name=\"_action_notifytarget['.$id.']\" id=\"action_notifytarget'.$id.'\" '\n            .'value=\"' . rcube::Q($target) . '\" size=\"25\" '\n            . $this->error_class($id, 'action', 'target', 'action_notifytarget') .' />';\n        $out .= '<br /><span class=\"label\">'. rcube::Q($this->plugin->gettext('notifymessage')) .'</span><br />'\n            .'<textarea name=\"_action_notifymessage['.$id.']\" id=\"action_notifymessage' .$id. '\" '\n            .'rows=\"3\" cols=\"35\" '. $this->error_class($id, 'action', 'message', 'action_notifymessage') . '>'\n            . rcube::Q($action['message'], 'strict', false) . \"</textarea>\\n\";\n        if (in_array('enotify', $this->exts)) {\n            $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('notifyfrom')) . '</span><br />'\n                .'<input type=\"text\" name=\"_action_notifyfrom['.$id.']\" id=\"action_notifyfrom'.$id.'\" '\n                .'value=\"' . rcube::Q($action['from']) . '\" size=\"35\" '\n                . $this->error_class($id, 'action', 'from', 'action_notifyfrom') .' />';\n        }\n        $out .= '<br /><span class=\"label\">' . rcube::Q($this->plugin->gettext('notifyimportance')) . '</span><br />';\n        $out .= $select_importance->show($action['importance'] ? (int) $action['importance'] : 2);\n        $out .= '<div id=\"action_notifyoption_div' . $id  . '\">'\n            .'<span class=\"label\">' . rcube::Q($this->plugin->gettext('notifyoptions')) . '</span><br />'\n            .$this->list_input($id, 'action_notifyoption', (array)$action['options'], true,\n                $this->error_class($id, 'action', 'options', 'action_notifyoption'), 30) . '</div>';\n        $out .= '</div>';\n\n        // mailbox select\n        if ($action['type'] == 'fileinto') {\n            $mailbox = $this->mod_mailbox($action['target'], 'out');\n            // make sure non-existing (or unsubscribed) mailbox is listed (#1489956)\n            $additional = array($mailbox);\n        }\n        else {\n            $mailbox = '';\n        }\n\n        $select = $this->rc->folder_selector(array(\n            'realnames'  => false,\n            'maxlength'  => 100,\n            'id'         => 'action_mailbox' . $id,\n            'name'       => \"_action_mailbox[$id]\",\n            'style'      => 'display:'.(empty($action['type']) || $action['type'] == 'fileinto' ? 'inline' : 'none'),\n            'additional' => $additional,\n        ));\n        $out .= $select->show($mailbox);\n        $out .= '</td>';\n\n        // add/del buttons\n        $out .= '<td class=\"rowbuttons\">';\n        $out .= '<a href=\"#\" id=\"actionadd' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('add')). '\"\n            onclick=\"rcmail.managesieve_actionadd(' . $id .')\" class=\"button add\"></a>';\n        $out .= '<a href=\"#\" id=\"actiondel' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('del')). '\"\n            onclick=\"rcmail.managesieve_actiondel(' . $id .')\" class=\"button del' . ($rows_num<2 ? ' disabled' : '') .'\"></a>';\n        $out .= '</td>';\n\n        $out .= '</tr></table>';\n\n        $out .= $div ? \"</div>\\n\" : '';\n\n        return $out;\n    }\n\n    protected function genid()\n    {\n        return preg_replace('/[^0-9]/', '', microtime(true));\n    }\n\n    protected function strip_value($str, $allow_html = false, $trim = true)\n    {\n        if (is_array($str)) {\n            foreach ($str as $idx => $val) {\n                $val = $this->strip_value($val, $allow_html, $trim);\n\n                if ($val === '') {\n                    unset($str[$idx]);\n                }\n            }\n\n            return $str;\n        }\n\n        if (!$allow_html) {\n            $str = strip_tags($str);\n        }\n\n        return $trim ? trim($str) : $str;\n    }\n\n    protected function error_class($id, $type, $target, $elem_prefix='')\n    {\n        // TODO: tooltips\n        if (($type == 'test' && ($str = $this->errors['tests'][$id][$target])) ||\n            ($type == 'action' && ($str = $this->errors['actions'][$id][$target]))\n        ) {\n            $this->add_tip($elem_prefix.$id, $str, true);\n            return ' class=\"error\"';\n        }\n\n        return '';\n    }\n\n    protected function add_tip($id, $str, $error=false)\n    {\n        if ($error)\n            $str = html::span('sieve error', $str);\n\n        $this->tips[] = array($id, $str);\n    }\n\n    protected function print_tips()\n    {\n        if (empty($this->tips))\n            return;\n\n        $script = rcmail_output::JS_OBJECT_NAME.'.managesieve_tip_register('.json_encode($this->tips).');';\n        $this->rc->output->add_script($script, 'foot');\n    }\n\n    protected function list_input($id, $name, $value, $enabled, $class, $size=null)\n    {\n        $value = (array) $value;\n        $value = array_map(array('rcube', 'Q'), $value);\n        $value = implode(\"\\n\", $value);\n\n        return '<textarea data-type=\"list\" name=\"_' . $name . '['.$id.']\" id=\"' . $name.$id . '\"'\n            . ($enabled ? '' : ' disabled=\"disabled\"')\n            . ($size ? ' data-size=\"'.$size.'\"' : '')\n            . $class\n            . ' style=\"display:none\">' . $value . '</textarea>';\n    }\n\n    /**\n     * Validate input for date part elements\n     */\n    protected function validate_date_part($type, $value)\n    {\n        // we do simple validation of date/part format\n        switch ($type) {\n            case 'date': // yyyy-mm-dd\n                return preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $value);\n            case 'iso8601':\n                return preg_match('/^[0-9: .,ZWT+-]+$/', $value);\n            case 'std11':\n                return preg_match('/^((Sun|Mon|Tue|Wed|Thu|Fri|Sat),\\s+)?[0-9]{1,2}\\s+'\n                    . '(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+[0-9]{2,4}\\s+'\n                    . '[0-9]{2}:[0-9]{2}(:[0-9]{2})?\\s+([+-]*[0-9]{4}|[A-Z]{1,3})$', $value);\n            case 'julian':\n                return preg_match('/^[0-9]+$/', $value);\n            case 'time': // hh:mm:ss\n                return preg_match('/^[0-9]{2}:[0-9]{2}:[0-9]{2}$/', $value);\n            case 'year':\n                return preg_match('/^[0-9]{4}$/', $value);\n            case 'month':\n                return preg_match('/^[0-9]{2}$/', $value) && $value > 0 && $value < 13;\n            case 'day':\n                return preg_match('/^[0-9]{2}$/', $value) && $value > 0 && $value < 32;\n            case 'hour':\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 24;\n            case 'minute':\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 60;\n            case 'second':\n                // According to RFC5260, seconds can be from 00 to 60\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 61;\n            case 'weekday':\n                return preg_match('/^[0-9]$/', $value) && $value < 7;\n            case 'zone':\n                return preg_match('/^[+-][0-9]{4}$/', $value);\n        }\n    }\n\n    /**\n     * Converts mailbox name from/to UTF7-IMAP from/to internal Sieve encoding\n     * with delimiter replacement.\n     *\n     * @param string $mailbox Mailbox name\n     * @param string $mode    Conversion direction ('in'|'out')\n     *\n     * @return string Mailbox name\n     */\n    protected function mod_mailbox($mailbox, $mode = 'out')\n    {\n        $delimiter         = $_SESSION['imap_delimiter'];\n        $replace_delimiter = $this->rc->config->get('managesieve_replace_delimiter');\n        $mbox_encoding     = $this->rc->config->get('managesieve_mbox_encoding', 'UTF7-IMAP');\n\n        if ($mode == 'out') {\n            $mailbox = rcube_charset::convert($mailbox, $mbox_encoding, 'UTF7-IMAP');\n            if ($replace_delimiter && $replace_delimiter != $delimiter)\n                $mailbox = str_replace($replace_delimiter, $delimiter, $mailbox);\n        }\n        else {\n            $mailbox = rcube_charset::convert($mailbox, 'UTF7-IMAP', $mbox_encoding);\n            if ($replace_delimiter && $replace_delimiter != $delimiter)\n                $mailbox = str_replace($delimiter, $replace_delimiter, $mailbox);\n        }\n\n        return $mailbox;\n    }\n\n    /**\n     * List sieve scripts\n     *\n     * @return array Scripts list\n     */\n    public function list_scripts()\n    {\n        if ($this->list !== null) {\n            return $this->list;\n        }\n\n        $this->list = $this->sieve->get_scripts();\n\n        // Handle active script(s) and list of scripts according to Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            // Skip protected names\n            foreach ((array)$this->list as $idx => $name) {\n                $_name = strtoupper($name);\n                if ($_name == 'MASTER')\n                    $master_script = $name;\n                else if ($_name == 'MANAGEMENT')\n                    $management_script = $name;\n                else if($_name == 'USER')\n                    $user_script = $name;\n                else\n                    continue;\n\n                unset($this->list[$idx]);\n            }\n\n            // get active script(s), read USER script\n            if ($user_script) {\n                $extension = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n                $filename_regex = '/'.preg_quote($extension, '/').'$/';\n                $_SESSION['managesieve_user_script'] = $user_script;\n\n                $this->sieve->load($user_script);\n\n                foreach ($this->sieve->script->as_array() as $rules) {\n                    foreach ($rules['actions'] as $action) {\n                        if ($action['type'] == 'include' && empty($action['global'])) {\n                            $name = preg_replace($filename_regex, '', $action['target']);\n                            // make sure the script exist\n                            if (in_array($name, $this->list)) {\n                                $this->active[] = $name;\n                            }\n                        }\n                    }\n                }\n            }\n            // create USER script if it doesn't exist\n            else {\n                $content = \"# USER Management Script\\n\"\n                    .\"#\\n\"\n                    .\"# This script includes the various active sieve scripts\\n\"\n                    .\"# it is AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY!\\n\"\n                    .\"#\\n\"\n                    .\"# For more information, see http://wiki.kolab.org/KEP:14#USER\\n\"\n                    .\"#\\n\";\n                if ($this->sieve->save_script('USER', $content)) {\n                    $_SESSION['managesieve_user_script'] = 'USER';\n                    if (empty($this->master_file))\n                        $this->sieve->activate('USER');\n                }\n            }\n        }\n        else if (!empty($this->list)) {\n            // Get active script name\n            if ($active = $this->sieve->get_active()) {\n                $this->active = array($active);\n            }\n\n            // Hide scripts from config\n            $exceptions = $this->rc->config->get('managesieve_filename_exceptions');\n            if (!empty($exceptions)) {\n                $this->list = array_diff($this->list, (array)$exceptions);\n            }\n        }\n\n        // reindex\n        if (!empty($this->list)) {\n            $this->list = array_values($this->list);\n        }\n\n        return $this->list;\n    }\n\n    /**\n     * Removes sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function remove_script($name)\n    {\n        $result = $this->sieve->remove($name);\n\n        // Kolab's KEP:14\n        if ($result && $this->rc->config->get('managesieve_kolab_master')) {\n            $this->deactivate_script($name);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Activates sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function activate_script($name)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $extension   = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n            $user_script = $_SESSION['managesieve_user_script'];\n\n            // if the script is not active...\n            if ($user_script && array_search($name, $this->active) === false) {\n                // ...rewrite USER file adding appropriate include command\n                if ($this->sieve->load($user_script)) {\n                    $script = $this->sieve->script->as_array();\n                    $list   = array();\n                    $regexp = '/' . preg_quote($extension, '/') . '$/';\n\n                    // Create new include entry\n                    $rule = array(\n                        'actions' => array(\n                            0 => array(\n                                'target'   => $name.$extension,\n                                'type'     => 'include',\n                                'personal' => true,\n                    )));\n\n                    // get all active scripts for sorting\n                    foreach ($script as $rid => $rules) {\n                        foreach ($rules['actions'] as $action) {\n                            if ($action['type'] == 'include' && empty($action['global'])) {\n                                $target = $extension ? preg_replace($regexp, '', $action['target']) : $action['target'];\n                                $list[] = $target;\n                            }\n                        }\n                    }\n                    $list[] = $name;\n\n                    // Sort and find current script position\n                    asort($list, SORT_LOCALE_STRING);\n                    $list = array_values($list);\n                    $index = array_search($name, $list);\n\n                    // add rule at the end of the script\n                    if ($index === false || $index == count($list)-1) {\n                        $this->sieve->script->add_rule($rule);\n                    }\n                    // add rule at index position\n                    else {\n                        $script2 = array();\n                        foreach ($script as $rid => $rules) {\n                            if ($rid == $index) {\n                                $script2[] = $rule;\n                            }\n                            $script2[] = $rules;\n                        }\n                        $this->sieve->script->content = $script2;\n                    }\n\n                    $result = $this->sieve->save();\n                    if ($result) {\n                        $this->active[] = $name;\n                    }\n                }\n            }\n        }\n        else {\n            $result = $this->sieve->activate($name);\n            if ($result)\n                $this->active = array($name);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Deactivates sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function deactivate_script($name)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $extension   = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n            $user_script = $_SESSION['managesieve_user_script'];\n\n            // if the script is active...\n            if ($user_script && ($key = array_search($name, $this->active)) !== false) {\n                // ...rewrite USER file removing appropriate include command\n                if ($this->sieve->load($user_script)) {\n                    $script = $this->sieve->script->as_array();\n                    $name   = $name.$extension;\n\n                    foreach ($script as $rid => $rules) {\n                        foreach ($rules['actions'] as $action) {\n                            if ($action['type'] == 'include' && empty($action['global'])\n                                && $action['target'] == $name\n                            ) {\n                                break 2;\n                            }\n                        }\n                    }\n\n                    // Entry found\n                    if ($rid < count($script)) {\n                        $this->sieve->script->delete_rule($rid);\n                        $result = $this->sieve->save();\n                        if ($result) {\n                            unset($this->active[$key]);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            $result = $this->sieve->deactivate();\n            if ($result)\n                $this->active = array();\n        }\n\n        return $result;\n    }\n\n    /**\n     * Saves current script (adding some variables)\n     */\n    public function save_script($name = null)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $this->sieve->script->set_var('EDITOR', self::PROGNAME);\n            $this->sieve->script->set_var('EDITOR_VERSION', self::VERSION);\n        }\n\n        return $this->sieve->save($name);\n    }\n\n    /**\n     * Returns list of rules from the current script\n     *\n     * @return array List of rules\n     */\n    public function list_rules()\n    {\n        $result = array();\n        $i      = 1;\n\n        foreach ($this->script as $idx => $filter) {\n            if (empty($filter['actions'])) {\n                continue;\n            }\n            $fname = $filter['name'] ? $filter['name'] : \"#$i\";\n            $result[] = array(\n                'id'    => $idx,\n                'name'  => $fname,\n                'class' => $filter['disabled'] ? 'disabled' : '',\n            );\n            $i++;\n        }\n\n        return $result;\n    }\n\n    /**\n     * Initializes internal script data\n     */\n    protected function init_script()\n    {\n        if (!$this->sieve->script) {\n            return;\n        }\n\n        $this->script = $this->sieve->script->as_array();\n\n        $headers    = array();\n        $exceptions = array('date', 'currentdate', 'size', 'body');\n\n        // find common headers used in script, will be added to the list\n        // of available (predefined) headers (#1489271)\n        foreach ($this->script as $rule) {\n            foreach ((array) $rule['tests'] as $test) {\n                if ($test['test'] == 'header') {\n                    foreach ((array) $test['arg1'] as $header) {\n                        $lc_header = strtolower($header);\n\n                        // skip special names to not confuse UI\n                        if (in_array($lc_header, $exceptions)) {\n                            continue;\n                        }\n\n                        if (!isset($this->headers[$lc_header]) && !isset($headers[$lc_header])) {\n                            $headers[$lc_header] = $header;\n                        }\n                    }\n                }\n            }\n        }\n\n        ksort($headers);\n\n        $this->headers += $headers;\n    }\n\n    /**\n     * Get all e-mail addresses of the user\n     */\n    protected function user_emails()\n    {\n        $addresses = $this->rc->user->list_emails();\n\n        foreach ($addresses as $idx => $email) {\n            $addresses[$idx] = $email['email'];\n        }\n\n        $addresses = array_unique($addresses);\n        sort($addresses);\n\n        return $addresses;\n    }\n}\n", "code_before": "<?php\n\n/**\n * Managesieve (Sieve Filters) Engine\n *\n * Engine part of Managesieve plugin implementing UI and backend access.\n *\n * Copyright (C) The Roundcube Dev Team\n * Copyright (C) Kolab Systems AG\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see https://www.gnu.org/licenses/.\n */\n\nclass rcube_sieve_engine\n{\n    protected $rc;\n    protected $sieve;\n    protected $plugin;\n    protected $errors;\n    protected $form;\n    protected $list;\n    protected $master_file;\n    protected $tips = [];\n    protected $script = [];\n    protected $exts = [];\n    protected $active = [];\n    protected $headers = [];\n    protected $disabled_actions = [];\n    protected $addr_headers = [\n        // Required\n        'from', 'to', 'cc', 'bcc', 'sender', 'resent-from', 'resent-to',\n        // Additional (RFC 822 / RFC 2822)\n        'reply-to', 'resent-reply-to', 'resent-sender', 'resent-cc', 'resent-bcc',\n        // Non-standard (RFC 2076, draft-palme-mailext-headers-08.txt)\n        'for-approval', 'for-handling', 'for-comment', 'apparently-to', 'errors-to',\n        'delivered-to', 'return-receipt-to', 'x-admin', 'read-receipt-to',\n        'x-confirm-reading-to', 'return-receipt-requested',\n        'registered-mail-reply-requested-by', 'mail-followup-to', 'mail-reply-to',\n        'abuse-reports-to', 'x-complaints-to', 'x-report-abuse-to',\n        // Undocumented\n        'x-beenthere',\n    ];\n    protected $notify_methods = [\n        'mailto',\n        // 'sms',\n        // 'tel',\n    ];\n    protected $notify_importance_options = [\n        3 => 'notifyimportancelow',\n        2 => 'notifyimportancenormal',\n        1 => 'notifyimportancehigh',\n    ];\n\n    public const VERSION = '9.5';\n    public const PROGNAME = 'Roundcube (Managesieve)';\n    public const PORT = 4190;\n\n    /**\n     * Class constructor\n     */\n    public function __construct($plugin)\n    {\n        $this->rc = rcube::get_instance();\n        $this->plugin = $plugin;\n        $this->headers = $this->get_default_headers();\n    }\n\n    /**\n     * Loads configuration, initializes plugin (including sieve connection)\n     */\n    public function start($mode = null)\n    {\n        // register UI objects\n        $this->rc->output->add_handlers([\n            'filterslist' => [$this, 'filters_list'],\n            'filtersetslist' => [$this, 'filtersets_list'],\n            'filterform' => [$this, 'filter_form'],\n            'filtersetform' => [$this, 'filterset_form'],\n            'filterseteditraw' => [$this, 'filterset_editraw'],\n        ]);\n\n        $this->disabled_actions = (array) $this->rc->config->get('managesieve_disabled_actions');\n\n        // connect to managesieve server\n        $error = $this->connect($_SESSION['username'], $this->rc->decrypt($_SESSION['password']));\n\n        $script_name = null;\n        $list = [];\n\n        // load current/active script\n        if (!$error) {\n            // Get list of scripts\n            $list = $this->list_scripts();\n\n            // reset current script when entering filters UI (#1489412)\n            if ($this->rc->action == 'plugin.managesieve') {\n                $this->rc->session->remove('managesieve_current');\n            }\n\n            if ($mode != 'vacation' && $mode != 'forward') {\n                if (!empty($_GET['_set']) || !empty($_POST['_set'])) {\n                    $script_name = rcube_utils::get_input_string('_set', rcube_utils::INPUT_GPC, true);\n                } elseif (!empty($_SESSION['managesieve_current'])) {\n                    $script_name = $_SESSION['managesieve_current'];\n                }\n            }\n\n            $error = $this->load_script($script_name);\n        }\n\n        // finally set script objects\n        if ($error) {\n            switch ($error) {\n                case rcube_sieve::ERROR_CONNECTION:\n                case rcube_sieve::ERROR_LOGIN:\n                    $this->rc->output->show_message('managesieve.filterconnerror', 'error');\n                    break;\n                default:\n                    $this->rc->output->show_message('managesieve.filterunknownerror', 'error');\n                    break;\n            }\n\n            // reload interface in case of possible error when specified script wasn't found (#1489412)\n            if ($script_name !== null && !empty($list) && !in_array($script_name, $list)) {\n                $this->rc->output->command('reload', 500);\n            }\n\n            // to disable 'Add filter' button set env variable\n            $this->rc->output->set_env('filterconnerror', true);\n            $this->script = [];\n        } else {\n            $this->exts = $this->sieve->get_extensions();\n            $this->init_script();\n            $this->rc->output->set_env('currentset', $this->sieve->current);\n            $_SESSION['managesieve_current'] = $this->sieve->current;\n        }\n\n        $this->rc->output->set_env('raw_sieve_editor', $this->rc->config->get('managesieve_raw_editor', true));\n        $this->rc->output->set_env('managesieve_disabled_actions', $this->disabled_actions);\n        $this->rc->output->set_env('managesieve_no_set_list', in_array('list_sets', $this->disabled_actions));\n\n        return $error;\n    }\n\n    /**\n     * Connect to configured managesieve server\n     *\n     * @param string $username User login\n     * @param string $password User password\n     *\n     * @return int Connection status: 0 on success, >0 on failure\n     */\n    public function connect($username, $password)\n    {\n        $host = $this->rc->config->get('managesieve_host', 'localhost');\n\n        // $config['managesieve_host'] parameter now can be configured in two ways:\n        // - as an array, which allows to switch between different servers. E.g.,\n        //   a user can log in as user@some.host, or as otheruser@other.host and\n        //   have different sieve servers for different hosts.\n        // - as a string (default).\n        if (is_array($host)) {\n            // By now, the $_SESSION['storage_host'] variable should contain the host name\n            // of a mail server, user logged in. This entry should match the mapping in the\n            // $config['managesieve_host'] parameter in the configuration, e.g.:\n            // ['example.com' => 'sieve.example.net'].\n            if (array_key_exists($_SESSION['storage_host'], $host)) {\n                $host = $host[$this->rc->config->mail_domain($_SESSION['storage_host'])];\n            } else {\n                rcube::raise_error([\n                    'code' => 500,\n                    'message' => \"Can't locate the sieve server. Please check the 'managesieve_host' config option.\",\n                ], true, false);\n                return rcube_sieve::ERROR_CONNECTION;\n            }\n        }\n\n        $host = rcube_utils::parse_host($host);\n\n        $plugin = $this->rc->plugins->exec_hook('managesieve_connect', [\n            'user' => $username,\n            'password' => $password,\n            'host' => $host,\n            'auth_type' => $this->rc->config->get('managesieve_auth_type'),\n            'disabled' => $this->rc->config->get('managesieve_disabled_extensions'),\n            'debug' => $this->rc->config->get('managesieve_debug', false),\n            'auth_cid' => $this->rc->config->get('managesieve_auth_cid'),\n            'auth_pw' => $this->rc->config->get('managesieve_auth_pw'),\n            'socket_options' => $this->rc->config->get('managesieve_conn_options'),\n            'gssapi_context' => null,\n            'gssapi_cn' => null,\n        ]);\n\n        [$host, $scheme, $port] = rcube_utils::parse_host_uri($plugin['host']);\n\n        // Support explicit STARTTLS by establishing an unencrypted TCP connection, then instructing Net_Sieve to send the `STARTTLS` command.\n        $tls = $scheme === 'tls';\n\n        // Support implicit SSL by passing the URI scheme through to Net_Sieve -> Net_Socket -> stream_socket_client().\n        if ($scheme === 'ssl') {\n            $host = 'ssl://' . $host;\n        }\n\n        if (empty($port)) {\n            $port = getservbyname('sieve', 'tcp') ?: self::PORT;\n        }\n\n        $host = rcube_utils::idn_to_ascii($host);\n\n        // Handle per-host socket options\n        rcube_utils::parse_socket_options($plugin['socket_options'], $host);\n\n        // try to connect to managesieve server and to fetch the script\n        $this->sieve = new rcube_sieve(\n            $plugin['user'],\n            $plugin['password'],\n            $host,\n            $port,\n            $plugin['auth_type'],\n            $tls,\n            $plugin['disabled'],\n            $plugin['debug'],\n            $plugin['auth_cid'],\n            $plugin['auth_pw'],\n            $plugin['socket_options'],\n            $plugin['gssapi_context'],\n            $plugin['gssapi_cn']\n        );\n\n        $error = $this->sieve->error();\n\n        if ($error) {\n            rcube::raise_error([\n                'code' => 403,\n                'message' => \"Unable to connect to managesieve on {$host}:{$port}\",\n            ], true, false);\n        }\n\n        return $error;\n    }\n\n    /**\n     * Load specified (or active) script\n     *\n     * @param string $script_name Optional script name\n     *\n     * @return int Connection status: 0 on success, >0 on failure\n     */\n    protected function load_script($script_name = null)\n    {\n        // Get list of scripts\n        $list = $this->list_scripts();\n\n        if ($script_name === null || $script_name === '') {\n            // get (first) active script\n            if (!empty($this->active)) {\n                $script_name = $this->active[0];\n            } elseif (!empty($list)) {\n                $script_name = $list[0];\n            } else {\n                // if script does not exist create one with default content\n                $script_name = $this->create_default_script();\n            }\n        }\n\n        if ($script_name) {\n            if ($this->is_protected_script($script_name)) {\n                return rcube_sieve::ERROR_NOT_EXISTS;\n            }\n\n            $this->sieve->load($script_name);\n        }\n\n        return $this->sieve->error();\n    }\n\n    /**\n     * User interface actions handler\n     */\n    public function actions()\n    {\n        $error = $this->start();\n\n        // Handle user requests\n        if ($action = rcube_utils::get_input_string('_act', rcube_utils::INPUT_GPC)) {\n            $fid = (int) rcube_utils::get_input_value('_fid', rcube_utils::INPUT_POST);\n\n            if ($action == 'delete' && !$error) {\n                if (!in_array('delete_filter', $this->disabled_actions)) {\n                    if (isset($this->script[$fid])) {\n                        $result = false;\n                        if ($this->sieve->script->delete_rule($fid)) {\n                            $result = $this->save_script();\n                        }\n\n                        if ($result === true) {\n                            $this->rc->output->show_message('managesieve.filterdeleted', 'confirmation');\n                            $this->rc->output->command('managesieve_updatelist', 'del', ['id' => $fid]);\n                        } else {\n                            $this->rc->output->show_message('managesieve.filterdeleteerror', 'error');\n                        }\n                    }\n                } else {\n                    $this->rc->output->show_message('managesieve.disabledaction', 'error');\n                }\n            } elseif ($action == 'move' && !$error) {\n                if (isset($this->script[$fid])) {\n                    $to = (int) rcube_utils::get_input_value('_to', rcube_utils::INPUT_POST);\n                    $rule = $this->script[$fid];\n\n                    // remove rule\n                    unset($this->script[$fid]);\n                    $this->script = array_values($this->script);\n\n                    // add at target position\n                    if ($to >= count($this->script)) {\n                        $this->script[] = $rule;\n                    } else {\n                        $script = [];\n                        foreach ($this->script as $idx => $r) {\n                            if ($idx == $to) {\n                                $script[] = $rule;\n                            }\n                            $script[] = $r;\n                        }\n                        $this->script = $script;\n                    }\n\n                    $this->sieve->script->content = $this->script;\n                    $result = $this->save_script();\n\n                    if ($result === true) {\n                        $result = $this->list_rules();\n\n                        $this->rc->output->show_message('managesieve.moved', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'list',\n                            ['list' => $result, 'clear' => true, 'set' => $to]);\n                    } else {\n                        $this->rc->output->show_message('managesieve.moveerror', 'error');\n                    }\n                }\n            } elseif ($action == 'act' && !$error) {\n                if (isset($this->script[$fid])) {\n                    $rule = $this->script[$fid];\n                    $disabled = !empty($rule['disabled']);\n                    $rule['disabled'] = !$disabled;\n                    $result = $this->sieve->script->update_rule($fid, $rule);\n\n                    if ($result !== false) {\n                        $result = $this->save_script();\n                    }\n\n                    if ($result === true) {\n                        if ($rule['disabled']) {\n                            $this->rc->output->show_message('managesieve.deactivated', 'confirmation');\n                        } else {\n                            $this->rc->output->show_message('managesieve.activated', 'confirmation');\n                        }\n                        $this->rc->output->command('managesieve_updatelist', 'update',\n                            ['id' => $fid, 'disabled' => $rule['disabled']]);\n                    } else {\n                        if ($rule['disabled']) {\n                            $this->rc->output->show_message('managesieve.deactivateerror', 'error');\n                        } else {\n                            $this->rc->output->show_message('managesieve.activateerror', 'error');\n                        }\n                    }\n                }\n            } elseif ($action == 'setact' && !$error) {\n                if (!in_array('enable_disable_set', $this->disabled_actions)) {\n                    $script_name = rcube_utils::get_input_string('_set', rcube_utils::INPUT_POST, true);\n                    $result = $this->activate_script($script_name);\n                    $kep14 = $this->rc->config->get('managesieve_kolab_master');\n\n                    if ($result === true) {\n                        $this->rc->output->set_env('active_sets', $this->active);\n                        $this->rc->output->show_message('managesieve.setactivated', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'setact',\n                            ['name' => $script_name, 'active' => true, 'all' => !$kep14]);\n                    } else {\n                        $this->rc->output->show_message('managesieve.setactivateerror', 'error');\n                    }\n                } else {\n                    $this->rc->output->show_message('managesieve.disabledaction', 'error');\n                }\n            } elseif ($action == 'deact' && !$error) {\n                if (!in_array('enable_disable_set', $this->disabled_actions)) {\n                    $script_name = rcube_utils::get_input_string('_set', rcube_utils::INPUT_POST, true);\n                    $result = $this->deactivate_script($script_name);\n\n                    if ($result === true) {\n                        $this->rc->output->set_env('active_sets', $this->active);\n                        $this->rc->output->show_message('managesieve.setdeactivated', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'setact',\n                            ['name' => $script_name, 'active' => false]);\n                    } else {\n                        $this->rc->output->show_message('managesieve.setdeactivateerror', 'error');\n                    }\n                } else {\n                    $this->rc->output->show_message('managesieve.disabledaction', 'error');\n                }\n            } elseif ($action == 'setdel' && !$error) {\n                if (!in_array('delete_set', $this->disabled_actions)) {\n                    $script_name = rcube_utils::get_input_string('_set', rcube_utils::INPUT_POST, true);\n                    $result = $this->remove_script($script_name);\n\n                    if ($result === true) {\n                        $this->rc->output->show_message('managesieve.setdeleted', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'setdel', ['name' => $script_name]);\n                        $this->rc->session->remove('managesieve_current');\n                    } else {\n                        $this->rc->output->show_message('managesieve.setdeleteerror', 'error');\n                    }\n                } else {\n                    $this->rc->output->show_message('managesieve.disabledaction', 'error');\n                }\n            } elseif ($action == 'setget') {\n                if (!in_array('download_set', $this->disabled_actions)) {\n                    $this->rc->request_security_check(rcube_utils::INPUT_GET);\n\n                    $script_name = rcube_utils::get_input_string('_set', rcube_utils::INPUT_GPC, true);\n\n                    if ($this->is_protected_script($script_name)) {\n                        exit;\n                    }\n\n                    $script = $this->sieve->get_script($script_name);\n\n                    if ($script !== false) {\n                        $this->rc->output->download_headers($script_name . '.txt', ['length' => strlen($script)]);\n                        echo $script;\n                    }\n\n                    exit;\n                }\n            } elseif ($action == 'list') {\n                $result = $this->list_rules();\n\n                $this->rc->output->command('managesieve_updatelist', 'list', ['list' => $result]);\n            } elseif ($action == 'ruleadd') {\n                $rid = rcube_utils::get_input_string('_rid', rcube_utils::INPUT_POST);\n                $id = $this->genid();\n                $content = $this->rule_div($fid, $id, false, !empty($_SESSION['managesieve-compact-form']));\n\n                $this->rc->output->command('managesieve_rulefill', $content, $id, $rid);\n            } elseif ($action == 'actionadd') {\n                $aid = rcube_utils::get_input_string('_aid', rcube_utils::INPUT_POST);\n                $id = $this->genid();\n                $content = $this->action_div($fid, $id, false);\n\n                $this->rc->output->command('managesieve_actionfill', $content, $id, $aid);\n            } elseif ($action == 'addresses') {\n                $aid = rcube_utils::get_input_string('_aid', rcube_utils::INPUT_POST);\n\n                $this->rc->output->command('managesieve_vacation_addresses_update', $aid, $this->user_emails());\n            }\n\n            $this->rc->output->send();\n        } elseif ($this->rc->task == 'mail') {\n            // Initialize the form\n            $rules = rcube_utils::get_input_value('r', rcube_utils::INPUT_GET);\n            if (!empty($rules)) {\n                $tests = [];\n                foreach ($rules as $rule) {\n                    [$header, $value] = explode(':', $rule, 2);\n                    $tests[] = [\n                        'type' => 'contains',\n                        'test' => 'header',\n                        'arg1' => $header,\n                        'arg2' => $value,\n                    ];\n                }\n\n                $this->form = [\n                    'join' => count($tests) > 1 ? 'allof' : 'anyof',\n                    'name' => '',\n                    'tests' => $tests,\n                    'actions' => [\n                        ['type' => 'fileinto'],\n                        ['type' => 'stop'],\n                    ],\n                ];\n            }\n        }\n\n        $this->send();\n    }\n\n    public function saveraw()\n    {\n        // Init plugin and handle managesieve connection\n        $error = $this->start();\n\n        $script_name = rcube_utils::get_input_string('_set', rcube_utils::INPUT_POST);\n\n        $result = empty($error) && !$this->is_protected_script($script_name)\n            && $this->sieve->save_script($script_name, $_POST['rawsetcontent']);\n\n        if ($result === false) {\n            $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n            $errorLines = $this->sieve->get_error_lines();\n            if (count($errorLines) > 0) {\n                $this->rc->output->set_env('sieve_errors', $errorLines);\n            }\n        } else {\n            $this->rc->output->show_message('managesieve.setupdated', 'confirmation');\n            $this->rc->output->command('parent.managesieve_updatelist', 'refresh');\n        }\n\n        $this->send();\n    }\n\n    public function save()\n    {\n        // Init plugin and handle managesieve connection\n        $error = $this->start();\n\n        // get request size limits (#1488648)\n        $max_post = max([\n            ini_get('max_input_vars'),\n            ini_get('suhosin.request.max_vars'),\n            ini_get('suhosin.post.max_vars'),\n        ]);\n        $max_depth = max([\n            ini_get('suhosin.request.max_array_depth'),\n            ini_get('suhosin.post.max_array_depth'),\n        ]);\n\n        // check request size limit\n        if ($max_post && count($_POST, \\COUNT_RECURSIVE) >= $max_post) {\n            rcube::raise_error([\n                'code' => 500,\n                'message' => 'Request size limit exceeded (one of max_input_vars/suhosin.request.max_vars/suhosin.post.max_vars)',\n            ], true, false);\n            $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n        }\n        // check request depth limits\n        elseif ($max_depth && count($_POST['_header']) > $max_depth) {\n            rcube::raise_error([\n                'code' => 500,\n                'message' => 'Request size limit exceeded (one of suhosin.request.max_array_depth/suhosin.post.max_array_depth)',\n            ], true, false);\n            $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n        }\n        // filters set add action\n        elseif (!empty($_POST['_newset'])) {\n            $name = rcube_utils::get_input_string('_name', rcube_utils::INPUT_POST, true);\n            $copy = rcube_utils::get_input_string('_copy', rcube_utils::INPUT_POST, true);\n            $from = rcube_utils::get_input_string('_from', rcube_utils::INPUT_POST);\n            $exceptions = $this->rc->config->get('managesieve_filename_exceptions');\n            $kolab = $this->rc->config->get('managesieve_kolab_master');\n            $name_uc = mb_strtolower($name);\n            $list = $this->list_scripts();\n\n            if (in_array('new_set', $this->disabled_actions)) {\n                $error = 'managesieve.disabledaction';\n            } elseif (!$name) {\n                $this->errors['name'] = $this->plugin->gettext('cannotbeempty');\n            } elseif (mb_strlen($name) > 128) {\n                $this->errors['name'] = $this->plugin->gettext('nametoolong');\n            } elseif (!empty($exceptions) && in_array($name, (array) $exceptions)) {\n                $this->errors['name'] = $this->plugin->gettext('namereserved');\n            } elseif (!empty($kolab) && in_array($name_uc, ['MASTER', 'USER', 'MANAGEMENT'])) {\n                $this->errors['name'] = $this->plugin->gettext('namereserved');\n            } elseif (in_array($name, $list)) {\n                $this->errors['name'] = $this->plugin->gettext('setexist');\n            } elseif ($from == 'file') {\n                // from file\n                if (is_uploaded_file($_FILES['_file']['tmp_name'])) {\n                    $file = file_get_contents($_FILES['_file']['tmp_name']);\n                    $file = preg_replace('/\\r/', '', $file);\n                    // for security don't save script directly\n                    // check syntax before, like this...\n                    $this->sieve->load_script($file);\n                    if (!$this->save_script($name)) {\n                        $this->errors['file'] = $this->plugin->gettext('setcreateerror');\n                    }\n                } else {\n                    // upload failed\n                    rcmail_action::upload_error($_FILES['_file']['error']);\n                }\n            } elseif (!$this->sieve->copy($name, $from == 'set' ? $copy : '')) {\n                $error = 'managesieve.setcreateerror';\n            }\n\n            if (!$error && empty($this->errors)) {\n                // Find position of the new script on the list\n                $list[] = $name;\n                asort($list, \\SORT_LOCALE_STRING);\n                $list = array_values($list);\n                $index = array_search($name, $list);\n\n                $this->rc->output->show_message('managesieve.setcreated', 'confirmation');\n                $this->rc->output->command('parent.managesieve_updatelist', 'setadd',\n                    ['name' => $name, 'index' => $index]);\n            } elseif ($error) {\n                $this->rc->output->show_message($error, 'error');\n            }\n        }\n        // filter add/edit action\n        elseif (isset($_POST['_name'])) {\n            $name = trim(rcube_utils::get_input_string('_name', rcube_utils::INPUT_POST, true));\n            $fid = trim(rcube_utils::get_input_string('_fid', rcube_utils::INPUT_POST));\n            $join = trim(rcube_utils::get_input_string('_join', rcube_utils::INPUT_POST));\n\n            // and arrays\n            $headers = rcube_utils::get_input_value('_header', rcube_utils::INPUT_POST);\n            $cust_headers = rcube_utils::get_input_value('_custom_header', rcube_utils::INPUT_POST);\n            $cust_vars = rcube_utils::get_input_value('_custom_var', rcube_utils::INPUT_POST);\n            $ops = rcube_utils::get_input_value('_rule_op', rcube_utils::INPUT_POST);\n            $sizeops = rcube_utils::get_input_value('_rule_size_op', rcube_utils::INPUT_POST);\n            $sizeitems = rcube_utils::get_input_value('_rule_size_item', rcube_utils::INPUT_POST);\n            $sizetargets = rcube_utils::get_input_value('_rule_size_target', rcube_utils::INPUT_POST);\n            $spamtestops = rcube_utils::get_input_value('_rule_spamtest_op', rcube_utils::INPUT_POST);\n            $spamtesttargets = rcube_utils::get_input_value('_rule_spamtest_target', rcube_utils::INPUT_POST);\n            $targets = rcube_utils::get_input_value('_rule_target', rcube_utils::INPUT_POST, true);\n            $mods = rcube_utils::get_input_value('_rule_mod', rcube_utils::INPUT_POST);\n            $mod_types = rcube_utils::get_input_value('_rule_mod_type', rcube_utils::INPUT_POST);\n            $body_trans = rcube_utils::get_input_value('_rule_trans', rcube_utils::INPUT_POST);\n            $body_types = rcube_utils::get_input_value('_rule_trans_type', rcube_utils::INPUT_POST, true);\n            $comparators = rcube_utils::get_input_value('_rule_comp', rcube_utils::INPUT_POST);\n            $indexes = rcube_utils::get_input_value('_rule_index', rcube_utils::INPUT_POST);\n            $lastindexes = rcube_utils::get_input_value('_rule_index_last', rcube_utils::INPUT_POST);\n            $dateheaders = rcube_utils::get_input_value('_rule_date_header', rcube_utils::INPUT_POST);\n            $dateparts = rcube_utils::get_input_value('_rule_date_part', rcube_utils::INPUT_POST);\n            $mime_parts = rcube_utils::get_input_value('_rule_mime_part', rcube_utils::INPUT_POST);\n            $mime_types = rcube_utils::get_input_value('_rule_mime_type', rcube_utils::INPUT_POST);\n            $mime_params = rcube_utils::get_input_value('_rule_mime_param', rcube_utils::INPUT_POST, true);\n            $message = rcube_utils::get_input_value('_rule_message', rcube_utils::INPUT_POST);\n            $dup_handles = rcube_utils::get_input_value('_rule_duplicate_handle', rcube_utils::INPUT_POST, true);\n            $dup_headers = rcube_utils::get_input_value('_rule_duplicate_header', rcube_utils::INPUT_POST, true);\n            $dup_uniqueids = rcube_utils::get_input_value('_rule_duplicate_uniqueid', rcube_utils::INPUT_POST, true);\n            $dup_seconds = rcube_utils::get_input_value('_rule_duplicate_seconds', rcube_utils::INPUT_POST);\n            $dup_lasts = rcube_utils::get_input_value('_rule_duplicate_last', rcube_utils::INPUT_POST);\n            $act_types = rcube_utils::get_input_value('_action_type', rcube_utils::INPUT_POST, true);\n            $mailboxes = rcube_utils::get_input_value('_action_mailbox', rcube_utils::INPUT_POST, true);\n            $act_targets = rcube_utils::get_input_value('_action_target', rcube_utils::INPUT_POST, true);\n            $domain_targets = rcube_utils::get_input_value('_action_target_domain', rcube_utils::INPUT_POST);\n            $area_targets = rcube_utils::get_input_value('_action_target_area', rcube_utils::INPUT_POST, true);\n            $reasons = rcube_utils::get_input_value('_action_reason', rcube_utils::INPUT_POST, true);\n            $addresses = rcube_utils::get_input_value('_action_addresses', rcube_utils::INPUT_POST, true);\n            $intervals = rcube_utils::get_input_value('_action_interval', rcube_utils::INPUT_POST);\n            $interval_types = rcube_utils::get_input_value('_action_interval_type', rcube_utils::INPUT_POST);\n            $from = rcube_utils::get_input_value('_action_from', rcube_utils::INPUT_POST, true);\n            $subject = rcube_utils::get_input_value('_action_subject', rcube_utils::INPUT_POST, true);\n            $flags = rcube_utils::get_input_value('_action_flags', rcube_utils::INPUT_POST);\n            $varnames = rcube_utils::get_input_value('_action_varname', rcube_utils::INPUT_POST);\n            $varvalues = rcube_utils::get_input_value('_action_varvalue', rcube_utils::INPUT_POST);\n            $varmods = rcube_utils::get_input_value('_action_varmods', rcube_utils::INPUT_POST);\n            $notifymethods = rcube_utils::get_input_value('_action_notifymethod', rcube_utils::INPUT_POST);\n            $notifytargets = rcube_utils::get_input_value('_action_notifytarget', rcube_utils::INPUT_POST, true);\n            $notifyoptions = rcube_utils::get_input_value('_action_notifyoption', rcube_utils::INPUT_POST, true);\n            $notifymessages = rcube_utils::get_input_value('_action_notifymessage', rcube_utils::INPUT_POST, true);\n            $notifyfrom = rcube_utils::get_input_value('_action_notifyfrom', rcube_utils::INPUT_POST, true);\n            $notifyimp = rcube_utils::get_input_value('_action_notifyimportance', rcube_utils::INPUT_POST);\n            $addheader_name = rcube_utils::get_input_value('_action_addheader_name', rcube_utils::INPUT_POST);\n            $addheader_value = rcube_utils::get_input_value('_action_addheader_value', rcube_utils::INPUT_POST, true);\n            $addheader_pos = rcube_utils::get_input_value('_action_addheader_pos', rcube_utils::INPUT_POST);\n            $delheader_name = rcube_utils::get_input_value('_action_delheader_name', rcube_utils::INPUT_POST);\n            $delheader_value = rcube_utils::get_input_value('_action_delheader_value', rcube_utils::INPUT_POST, true);\n            $delheader_pos = rcube_utils::get_input_value('_action_delheader_pos', rcube_utils::INPUT_POST);\n            $delheader_index = rcube_utils::get_input_value('_action_delheader_index', rcube_utils::INPUT_POST);\n            $delheader_op = rcube_utils::get_input_value('_action_delheader_op', rcube_utils::INPUT_POST);\n            $delheader_comp = rcube_utils::get_input_value('_action_delheader_comp', rcube_utils::INPUT_POST);\n\n            $this->form['disabled'] = empty($_POST['_enabled']);\n            $this->form['join'] = $join == 'allof';\n            $this->form['name'] = $name;\n            $this->form['tests'] = [];\n            $this->form['actions'] = [];\n\n            if ($name == '') {\n                $this->errors['name'] = $this->plugin->gettext('cannotbeempty');\n            } else {\n                foreach ($this->script as $idx => $rule) {\n                    if ($rule['name'] == $name && $idx != $fid) {\n                        $this->errors['name'] = $this->plugin->gettext('ruleexist');\n                        break;\n                    }\n                }\n            }\n\n            $i = 0;\n            // rules\n            if ($join == 'any') {\n                $this->form['tests'][0]['test'] = 'true';\n            } else {\n                foreach ($headers as $idx => $header) {\n                    // targets are indexed differently (assume form order)\n                    $target = $this->strip_value($targets[$idx], true);\n                    $header = $this->strip_value($header);\n                    $operator = $this->strip_value($ops[$idx]);\n                    $comparator = $this->strip_value($comparators[$idx]);\n\n                    if ($header == 'size') {\n                        $sizeop = $this->strip_value($sizeops[$idx]);\n                        $sizeitem = $this->strip_value($sizeitems[$idx]);\n                        $sizetarget = $this->strip_value($sizetargets[$idx]);\n\n                        $this->form['tests'][$i]['test'] = 'size';\n                        $this->form['tests'][$i]['type'] = $sizeop;\n                        $this->form['tests'][$i]['arg'] = $sizetarget;\n\n                        if ($sizetarget === '') {\n                            $this->errors['tests'][$i]['sizetarget'] = $this->plugin->gettext('cannotbeempty');\n                        } elseif (!preg_match('/^[0-9]+(K|M|G)?$/i', $sizetarget . $sizeitem, $m)) {\n                            $this->errors['tests'][$i]['sizetarget'] = $this->plugin->gettext('forbiddenchars');\n                            $this->form['tests'][$i]['item'] = $sizeitem;\n                        } else {\n                            $this->form['tests'][$i]['arg'] .= $m[1];\n                        }\n                    } elseif ($header == 'spamtest') {\n                        $spamtestop = $this->strip_value($spamtestops[$idx]);\n                        $spamtesttarget = $this->strip_value($spamtesttargets[$idx]);\n                        $comparator = 'i;ascii-numeric';\n\n                        if (!$spamtestop) {\n                            $spamtestop = 'value-eq';\n                            $spamtesttarget = '0';\n                        }\n\n                        $this->form['tests'][$i]['test'] = 'spamtest';\n                        $this->form['tests'][$i]['type'] = $spamtestop;\n                        $this->form['tests'][$i]['arg'] = $spamtesttarget;\n\n                        if ($spamtesttarget === '') {\n                            $this->errors['tests'][$i]['spamtesttarget'] = $this->plugin->gettext('cannotbeempty');\n                        } elseif (!preg_match('/^([0-9]|10)$/i', $spamtesttarget)) {\n                            $this->errors['tests'][$i]['spamtesttarget'] = $this->plugin->gettext('forbiddenchars');\n                        }\n                    } elseif ($header == 'currentdate') {\n                        $datepart = $this->strip_value($dateparts[$idx]);\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        $this->form['tests'][$i]['test'] = 'currentdate';\n                        $this->form['tests'][$i]['type'] = $type;\n                        $this->form['tests'][$i]['part'] = $datepart;\n                        $this->form['tests'][$i]['arg'] = $target;\n                        $this->form['tests'][$i]['not'] = preg_match('/^not/', $operator) === 1;\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        if ($type != 'exists') {\n                            if (empty($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            } elseif (str_starts_with($type, 'count-')) {\n                                foreach ($target as $arg) {\n                                    if (preg_match('/[^0-9]/', $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            } elseif (str_starts_with($type, 'value-')) {\n                                // Some date/time formats do not support i;ascii-numeric comparator\n                                if ($comparator == 'i;ascii-numeric' && in_array($datepart, ['date', 'time', 'iso8601', 'std11'])) {\n                                    $comparator = '';\n                                }\n                            }\n\n                            if (!preg_match('/^(regex|matches|count-)/', $type) && !empty($target)) {\n                                foreach ($target as $arg) {\n                                    if (!$this->validate_date_part($datepart, $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('invaliddateformat');\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    } elseif ($header == 'date') {\n                        $datepart = $this->strip_value($dateparts[$idx]);\n                        $dateheader = $this->strip_value($dateheaders[$idx]);\n                        $index = $this->strip_value($indexes[$idx]);\n                        $indexlast = $this->strip_value($lastindexes[$idx] ?? null);\n                        $mod = $this->strip_value($mods[$idx]);\n\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        if (!empty($index) && $mod != 'envelope') {\n                            $this->form['tests'][$i]['index'] = intval($index);\n                            $this->form['tests'][$i]['last'] = !empty($indexlast);\n                        }\n\n                        if (empty($dateheader)) {\n                            $dateheader = 'Date';\n                        } elseif (!preg_match('/^[\\x21-\\x39\\x41-\\x7E]+$/i', $dateheader)) {\n                            $this->errors['tests'][$i]['dateheader'] = $this->plugin->gettext('forbiddenchars');\n                        }\n\n                        $this->form['tests'][$i]['test'] = 'date';\n                        $this->form['tests'][$i]['type'] = $type;\n                        $this->form['tests'][$i]['part'] = $datepart;\n                        $this->form['tests'][$i]['arg'] = $target;\n                        $this->form['tests'][$i]['header'] = $dateheader;\n                        $this->form['tests'][$i]['not'] = preg_match('/^not/', $operator) === 1;\n\n                        if ($type != 'exists') {\n                            if (empty($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            } elseif (str_starts_with($type, 'count-')) {\n                                foreach ($target as $arg) {\n                                    if (preg_match('/[^0-9]/', $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            } elseif (str_starts_with($type, 'value-')) {\n                                // Some date/time formats do not support i;ascii-numeric comparator\n                                if ($comparator == 'i;ascii-numeric' && in_array($datepart, ['date', 'time', 'iso8601', 'std11'])) {\n                                    $comparator = '';\n                                }\n                            }\n\n                            if (!empty($target) && !preg_match('/^(regex|matches|count-)/', $type)) {\n                                foreach ($target as $arg) {\n                                    if (!$this->validate_date_part($datepart, $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('invaliddateformat');\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    } elseif ($header == 'body') {\n                        $trans = $this->strip_value($body_trans[$idx]);\n                        $trans_type = $this->strip_value($body_types[$idx], true);\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        $this->form['tests'][$i]['test'] = 'body';\n                        $this->form['tests'][$i]['type'] = $type;\n                        $this->form['tests'][$i]['arg'] = $target;\n                        $this->form['tests'][$i]['not'] = preg_match('/^not/', $operator) === 1;\n                        $this->form['tests'][$i]['part'] = $trans;\n\n                        if ($trans == 'content') {\n                            $this->form['tests'][$i]['content'] = $trans_type;\n                        }\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        if (empty($target) && $type != 'exists') {\n                            $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                        } elseif (preg_match('/^(value|count)-/', $type)) {\n                            foreach ($target as $target_value) {\n                                if (preg_match('/[^0-9]/', $target_value)) {\n                                    $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                }\n                            }\n                        }\n                    } elseif ($header == 'message') {\n                        $test = $this->strip_value($message[$idx]);\n\n                        if (preg_match('/^not/', $test)) {\n                            $this->form['tests'][$i]['not'] = true;\n                            $test = substr($test, 3);\n                        }\n\n                        $this->form['tests'][$i]['test'] = $test;\n\n                        if ($test == 'duplicate') {\n                            $this->form['tests'][$i]['last'] = !empty($dup_lasts[$idx]);\n                            $this->form['tests'][$i]['handle'] = trim($dup_handles[$idx]);\n                            $this->form['tests'][$i]['header'] = trim($dup_headers[$idx]);\n                            $this->form['tests'][$i]['uniqueid'] = trim($dup_uniqueids[$idx]);\n                            $this->form['tests'][$i]['seconds'] = trim($dup_seconds[$idx]);\n\n                            if ($this->form['tests'][$i]['seconds']\n                                && preg_match('/[^0-9]/', $this->form['tests'][$i]['seconds'])\n                            ) {\n                                $this->errors['tests'][$i]['duplicate_seconds'] = $this->plugin->gettext('forbiddenchars');\n                            }\n\n                            if ($this->form['tests'][$i]['header'] && $this->form['tests'][$i]['uniqueid']) {\n                                $this->errors['tests'][$i]['duplicate_uniqueid'] = $this->plugin->gettext('duplicate.conflict.err');\n                            }\n                        }\n                    } else {\n                        $cust_header = $headers = $this->strip_value($cust_headers[$idx]);\n                        $mod = $this->strip_value($mods[$idx]);\n                        $mod_type = $this->strip_value($mod_types[$idx]);\n                        $index = isset($indexes[$idx]) ? $this->strip_value($indexes[$idx]) : null;\n                        $indexlast = isset($lastindexes[$idx]) ? $this->strip_value($lastindexes[$idx]) : null;\n                        $mime_param = isset($mime_params[$idx]) ? $this->strip_value($mime_params[$idx]) : null;\n                        $mime_type = $mime_types[$idx] ?? null;\n                        $mime_part = $mime_parts[$idx] ?? null;\n                        $cust_var = null;\n\n                        if ($header == 'string') {\n                            $cust_var = $headers = $this->strip_value($cust_vars[$idx]);\n                        }\n\n                        $this->form['tests'][$i]['not'] = preg_match('/^not/', $operator) === 1;\n\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if (!empty($index) && $mod != 'envelope') {\n                            $this->form['tests'][$i]['index'] = intval($index);\n                            $this->form['tests'][$i]['last'] = !empty($indexlast);\n                        }\n\n                        if ($header == '...' || $header == 'string') {\n                            if (!count($headers)) {\n                                $this->errors['tests'][$i]['header'] = $this->plugin->gettext('cannotbeempty');\n                            } elseif ($header == '...') {\n                                foreach ($headers as $hr) {\n                                    // RFC2822: printable ASCII except colon\n                                    if (!preg_match('/^[\\x21-\\x39\\x41-\\x7E]+$/i', $hr)) {\n                                        $this->errors['tests'][$i]['header'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n\n                            if (empty($this->errors['tests'][$i]['header'])) {\n                                $cust_header = $cust_var = (is_array($headers) && count($headers) == 1) ? $headers[0] : $headers;\n                            }\n                        }\n\n                        $test = $header == 'string' ? 'string' : 'header';\n                        $header = $header == 'string' ? $cust_var : $header;\n                        $header = $header == '...' ? $cust_header : $header;\n\n                        if (is_array($header)) {\n                            foreach ($header as $h_index => $val) {\n                                if (isset($this->headers[$val])) {\n                                    $header[$h_index] = $this->headers[$val];\n                                }\n                            }\n                        }\n\n                        if ($type == 'exists') {\n                            $this->form['tests'][$i]['test'] = 'exists';\n                            $this->form['tests'][$i]['arg'] = $header;\n                        } else {\n                            if ($mod == 'address' || $mod == 'envelope') {\n                                $found = false;\n                                if (empty($this->errors['tests'][$i]['header'])) {\n                                    foreach ((array) $header as $hdr) {\n                                        if (!in_array(strtolower(trim($hdr)), $this->addr_headers)) {\n                                            $found = true;\n                                        }\n                                    }\n                                }\n                                if (!$found) {\n                                    $test = $mod;\n                                }\n                            }\n\n                            $this->form['tests'][$i]['type'] = $type;\n                            $this->form['tests'][$i]['test'] = $test;\n                            $this->form['tests'][$i]['arg1'] = $header;\n                            $this->form['tests'][$i]['arg2'] = $target;\n\n                            if (empty($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            } elseif (preg_match('/^(value|count)-/', $type)) {\n                                foreach ($target as $target_value) {\n                                    if (preg_match('/[^0-9]/', $target_value)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n\n                            if ($mod) {\n                                $this->form['tests'][$i]['part'] = $mod_type;\n                            }\n                        }\n\n                        if ($test == 'header') {\n                            if (in_array($mime_type, ['type', 'subtype', 'contenttype', 'param'])) {\n                                $this->form['tests'][$i]['mime-' . $mime_type] = true;\n                                if ($mime_type == 'param') {\n                                    if (empty($mime_param)) {\n                                        $this->errors['tests'][$i]['mime-param'] = $this->plugin->gettext('cannotbeempty');\n                                    }\n\n                                    $this->form['tests'][$i]['mime-param'] = $mime_param;\n                                }\n                            }\n\n                            if ($mime_part == 'anychild') {\n                                $this->form['tests'][$i]['mime-anychild'] = true;\n                            }\n                        }\n                    }\n\n                    if ($header != 'size' && $comparator) {\n                        $this->form['tests'][$i]['comparator'] = $comparator;\n                    }\n\n                    $i++;\n                }\n            }\n\n            $i = 0;\n            // actions\n            foreach ($act_types as $idx => $type) {\n                $type = $this->strip_value($type);\n\n                switch ($type) {\n                    case 'fileinto':\n                    case 'fileinto_copy':\n                        $mailbox = $this->strip_value($mailboxes[$idx], false, false);\n                        $this->form['actions'][$i]['target'] = $this->mod_mailbox($mailbox, 'in');\n\n                        if ($type == 'fileinto_copy') {\n                            $type = 'fileinto';\n                            $this->form['actions'][$i]['copy'] = true;\n                        }\n\n                        break;\n                    case 'reject':\n                    case 'ereject':\n                        $target = $this->strip_value($area_targets[$idx]);\n                        $this->form['actions'][$i]['target'] = str_replace(\"\\r\\n\", \"\\n\", $target);\n\n                        // if ($target == '') {\n                        //     $this->errors['actions'][$i]['targetarea'] = $this->plugin->gettext('cannotbeempty');\n                        // }\n\n                        break;\n                    case 'redirect':\n                    case 'redirect_copy':\n                        $target = $this->strip_value($act_targets[$idx] ?? null);\n                        $domain = $this->strip_value($domain_targets[$idx] ?? null);\n\n                        // force one of the configured domains\n                        $domains = (array) $this->rc->config->get('managesieve_domains');\n                        if (!empty($domains) && !empty($target)) {\n                            if (!$domain || !in_array($domain, $domains)) {\n                                $domain = $domains[0];\n                            }\n\n                            $target .= '@' . $domain;\n                        }\n\n                        $this->form['actions'][$i]['target'] = $target;\n\n                        if ($target === '') {\n                            $this->errors['actions'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                        } elseif (!rcube_utils::check_email($target)) {\n                            $this->errors['actions'][$i]['target'] = $this->plugin->gettext(!empty($domains) ? 'forbiddenchars' : 'noemailwarning');\n                        }\n\n                        if ($type == 'redirect_copy') {\n                            $type = 'redirect';\n                            $this->form['actions'][$i]['copy'] = true;\n                        }\n\n                        break;\n                    case 'addflag':\n                    case 'setflag':\n                    case 'removeflag':\n                        $this->form['actions'][$i]['target'] = $this->strip_value($flags[$idx]);\n\n                        if (empty($this->form['actions'][$i]['target'])) {\n                            $this->errors['actions'][$i]['flag'] = $this->plugin->gettext('noflagset');\n                        }\n\n                        break;\n                    case 'addheader':\n                    case 'deleteheader':\n                        $this->form['actions'][$i]['name'] = trim($type == 'addheader' ? $addheader_name[$idx] : $delheader_name[$idx]);\n                        $this->form['actions'][$i]['value'] = $type == 'addheader' ? $addheader_value[$idx] : $delheader_value[$idx];\n                        $this->form['actions'][$i]['last'] = ($type == 'addheader' ? $addheader_pos[$idx] : $delheader_pos[$idx]) == 'last';\n\n                        if (empty($this->form['actions'][$i]['name'])) {\n                            $this->errors['actions'][$i]['name'] = $this->plugin->gettext('cannotbeempty');\n                        } elseif (!preg_match('/^[0-9a-z_-]+$/i', $this->form['actions'][$i]['name'])) {\n                            $this->errors['actions'][$i]['name'] = $this->plugin->gettext('forbiddenchars');\n                        }\n\n                        if ($type == 'deleteheader') {\n                            foreach ((array) $this->form['actions'][$i]['value'] as $pidx => $pattern) {\n                                if (empty($pattern)) {\n                                    unset($this->form['actions'][$i]['value'][$pidx]);\n                                }\n                            }\n\n                            $this->form['actions'][$i]['match-type'] = $delheader_op[$idx];\n                            $this->form['actions'][$i]['comparator'] = $delheader_comp[$idx];\n                            $this->form['actions'][$i]['index'] = $delheader_index[$idx];\n\n                            if (empty($this->form['actions'][$i]['index'])) {\n                                if (!empty($this->form['actions'][$i]['last'])) {\n                                    $this->errors['actions'][$i]['index'] = $this->plugin->gettext('lastindexempty');\n                                }\n                            } elseif (!preg_match('/^[0-9]+$/i', $this->form['actions'][$i]['index'])) {\n                                $this->errors['actions'][$i]['index'] = $this->plugin->gettext('forbiddenchars');\n                            }\n                        } else {\n                            if (empty($this->form['actions'][$i]['value'])) {\n                                $this->errors['actions'][$i]['value'] = $this->plugin->gettext('cannotbeempty');\n                            }\n                        }\n\n                        break;\n                    case 'vacation':\n                        $reason = $this->strip_value($reasons[$idx], true);\n                        $interval_type = $interval_types && $interval_types[$idx] == 'seconds' ? 'seconds' : 'days';\n\n                        $this->form['actions'][$i]['reason'] = str_replace(\"\\r\\n\", \"\\n\", $reason);\n                        $this->form['actions'][$i]['from'] = $from[$idx];\n                        $this->form['actions'][$i]['subject'] = $subject[$idx];\n                        $this->form['actions'][$i]['addresses'] = $addresses[$idx];\n                        $this->form['actions'][$i][$interval_type] = $intervals[$idx];\n\n                        // @TODO: vacation :mime, :handle\n\n                        foreach ((array) $this->form['actions'][$i]['addresses'] as $aidx => $address) {\n                            $this->form['actions'][$i]['addresses'][$aidx] = $address = trim($address);\n\n                            if (empty($address)) {\n                                unset($this->form['actions'][$i]['addresses'][$aidx]);\n                            } elseif (!rcube_utils::check_email($address)) {\n                                $this->errors['actions'][$i]['addresses'] = $this->plugin->gettext('noemailwarning');\n                                break;\n                            }\n                        }\n\n                        if (!empty($this->form['actions'][$i]['from'])) {\n                            // According to RFC5230 the :from string must specify a valid [RFC2822] mailbox-list\n                            $this->action_email_input($i, 'from');\n                        }\n\n                        if ($this->form['actions'][$i]['reason'] == '') {\n                            $this->errors['actions'][$i]['reason'] = $this->plugin->gettext('cannotbeempty');\n                        }\n                        if ($this->form['actions'][$i][$interval_type] && !preg_match('/^[0-9]+$/', $this->form['actions'][$i][$interval_type])) {\n                            $this->errors['actions'][$i]['interval'] = $this->plugin->gettext('forbiddenchars');\n                        }\n\n                        break;\n                    case 'set':\n                        $this->form['actions'][$i]['name'] = $varnames[$idx];\n                        $this->form['actions'][$i]['value'] = $varvalues[$idx];\n                        foreach ((array) $varmods[$idx] as $v_m) {\n                            $this->form['actions'][$i][$v_m] = true;\n                        }\n\n                        if (empty($varnames[$idx])) {\n                            $this->errors['actions'][$i]['name'] = $this->plugin->gettext('cannotbeempty');\n                        } elseif (!preg_match('/^[0-9a-z_]+$/i', $varnames[$idx])) {\n                            $this->errors['actions'][$i]['name'] = $this->plugin->gettext('forbiddenchars');\n                        }\n\n                        if (!isset($varvalues[$idx]) || $varvalues[$idx] === '') {\n                            $this->errors['actions'][$i]['value'] = $this->plugin->gettext('cannotbeempty');\n                        }\n\n                        break;\n                    case 'notify':\n                        if (empty($notifymethods[$idx])) {\n                            $this->errors['actions'][$i]['method'] = $this->plugin->gettext('cannotbeempty');\n                        }\n                        if (empty($notifytargets[$idx])) {\n                            $this->errors['actions'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                        }\n\n                        // skip empty options\n                        foreach ((array) $notifyoptions[$idx] as $opt_idx => $opt) {\n                            if (!strlen(trim($opt))) {\n                                unset($notifyoptions[$idx][$opt_idx]);\n                            }\n                        }\n\n                        $this->form['actions'][$i]['method'] = $notifymethods[$idx] . ':' . $notifytargets[$idx];\n                        $this->form['actions'][$i]['options'] = $notifyoptions[$idx];\n                        $this->form['actions'][$i]['message'] = $notifymessages[$idx];\n                        $this->form['actions'][$i]['from'] = $notifyfrom[$idx];\n                        $this->form['actions'][$i]['importance'] = $notifyimp[$idx];\n\n                        if (!empty($notifyfrom[$idx]) && stripos($this->form['actions'][$i]['method'], 'mailto:') === 0) {\n                            // For mailto method :from string must specify a valid [RFC2822] mailbox-list\n                            $this->action_email_input($i, 'from');\n                        }\n\n                        break;\n                }\n\n                $this->form['actions'][$i]['type'] = $type;\n                $i++;\n            }\n\n            if (!$this->errors && !$error) {\n                // save the script\n                if (!isset($this->script[$fid])) {\n                    $fid = $this->sieve->script->add_rule($this->form);\n                    $new = true;\n                } else {\n                    $fid = $this->sieve->script->update_rule($fid, $this->form);\n                }\n\n                if ($fid !== false) {\n                    $save = $this->save_script();\n                }\n\n                if (!empty($save) && $fid !== false) {\n                    $this->rc->output->show_message('managesieve.filtersaved', 'confirmation');\n                    if ($this->rc->task != 'mail') {\n                        $args = [\n                            'name' => $this->form['name'],\n                            'id' => $fid,\n                            'disabled' => $this->form['disabled'],\n                        ];\n                        $this->rc->output->command('parent.managesieve_updatelist', isset($new) ? 'add' : 'update', $args);\n                    } else {\n                        $this->rc->output->command('managesieve_dialog_close');\n                        $this->rc->output->send('iframe');\n                    }\n                } else {\n                    $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n                }\n            } else {\n                $this->rc->output->show_message('managesieve.filterformerror', 'warning');\n            }\n        }\n\n        $this->send();\n    }\n\n    protected function send()\n    {\n        // Handle form action\n        if (isset($_GET['_framed']) || isset($_POST['_framed'])) {\n            if (isset($_GET['_newset']) || isset($_POST['_newset'])) {\n                $this->rc->output->send('managesieve.setedit');\n            } elseif (isset($_GET['_seteditraw']) || isset($_POST['_seteditraw'])) {\n                $this->rc->output->send('managesieve.seteditraw');\n            } else {\n                $this->rc->output->send('managesieve.filteredit');\n            }\n        } else {\n            $this->rc->output->set_pagetitle($this->plugin->gettext('filters'));\n            $this->rc->output->send('managesieve.managesieve');\n        }\n    }\n\n    /**\n     * Return the filters list as HTML table\n     */\n    public function filters_list($attrib)\n    {\n        // add id to message list table if not specified\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmfilterslist';\n        }\n\n        // define list of cols to be displayed\n        $a_show_cols = ['name'];\n\n        $result = $this->list_rules();\n\n        // create the table\n        $out = rcmail_action::table_output($attrib, $result, $a_show_cols, 'id');\n\n        // set client env\n        $this->rc->output->add_gui_object('filterslist', $attrib['id']);\n        $this->rc->output->include_script('list.js');\n\n        // add some labels to client\n        $this->rc->output->add_label('managesieve.filterdeleteconfirm');\n\n        return $out;\n    }\n\n    /**\n     * Return the filters list as <SELECT>\n     */\n    public function filtersets_list($attrib, $no_env = false)\n    {\n        // add id to message list table if not specified\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmfiltersetslist';\n        }\n\n        $list = $this->list_scripts();\n\n        if ($list) {\n            asort($list, \\SORT_LOCALE_STRING);\n        }\n\n        if (!empty($attrib['type']) && $attrib['type'] == 'list') {\n            // define list of cols to be displayed\n            $a_show_cols = ['name'];\n            $result = [];\n            $scripts = [];\n\n            if ($list) {\n                foreach ($list as $idx => $set) {\n                    $scripts['S' . $idx] = $set;\n                    $result[] = [\n                        'name' => $set,\n                        'id' => 'S' . $idx,\n                        'class' => !in_array($set, $this->active) ? 'disabled' : '',\n                    ];\n                }\n            }\n\n            // create XHTML table\n            $out = $this->rc->table_output($attrib, $result, $a_show_cols, 'id');\n\n            $this->rc->output->set_env('filtersets', $scripts);\n            $this->rc->output->include_script('list.js');\n        } else {\n            $select = new html_select([\n                'name' => '_set',\n                'id' => $attrib['id'],\n                'class' => 'custom-select',\n                'onchange' => $this->rc->task != 'mail' ? 'rcmail.managesieve_set()' : '',\n            ]);\n\n            if ($list) {\n                foreach ($list as $set) {\n                    $select->add($set, $set);\n                }\n            }\n\n            $out = $select->show($this->sieve->current);\n        }\n\n        // set client env\n        if (!$no_env) {\n            $this->rc->output->add_gui_object('filtersetslist', $attrib['id']);\n            $this->rc->output->add_label('managesieve.setdeleteconfirm');\n        }\n\n        return $out;\n    }\n\n    public function filterset_editraw($attrib)\n    {\n        $script_name = rcube_utils::get_input_string('_set', rcube_utils::INPUT_GP);\n        $script = $this->sieve->get_script($script_name);\n        $script_post = !empty($_POST['rawsetcontent']) ? $_POST['rawsetcontent'] : null;\n        $framed = !empty($_POST['_framed']) || !empty($_GET['_framed']);\n\n        $hiddenfields = new html_hiddenfield();\n        $hiddenfields->add(['name' => '_task', 'value' => $this->rc->task]);\n        $hiddenfields->add(['name' => '_action', 'value' => 'plugin.managesieve-saveraw']);\n        $hiddenfields->add(['name' => '_set', 'value' => $script_name]);\n        $hiddenfields->add(['name' => '_seteditraw', 'value' => 1]);\n        $hiddenfields->add(['name' => '_framed', 'value' => $framed ? 1 : 0]);\n\n        $out = $hiddenfields->show();\n\n        $txtarea = new html_textarea([\n            'id' => 'rawfiltersettxt',\n            'name' => 'rawsetcontent',\n            'class' => 'form-control',\n            'rows' => '15',\n        ]);\n\n        $out .= $txtarea->show($script_post !== null ? $script_post : ($script !== false ? rtrim($script) : ''));\n\n        $this->rc->output->add_gui_object('sievesetrawform', 'filtersetrawform');\n        $this->plugin->include_stylesheet('codemirror/lib/codemirror.css');\n        $this->plugin->include_script('codemirror/lib/codemirror.js');\n        $this->plugin->include_script('codemirror/addon/selection/active-line.js');\n        $this->plugin->include_script('codemirror/mode/sieve/sieve.js');\n\n        if ($script === false) {\n            $this->rc->output->show_message('managesieve.filterunknownerror', 'error');\n        }\n\n        $out = html::tag('form', $attrib + [\n                'id' => 'filtersetrawform',\n                'name' => 'filtersetrawform',\n                'action' => './',\n                'method' => 'post',\n                'enctype' => 'multipart/form-data',\n            ], $out\n        );\n\n        return str_replace('</form>', '', $out);\n    }\n\n    public function filterset_form($attrib)\n    {\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmfiltersetform';\n        }\n\n        $framed = !empty($_POST['_framed']) || !empty($_GET['_framed']);\n        $table = new html_table(['cols' => 2, 'class' => 'propform']);\n        $hiddenfields = new html_hiddenfield(['name' => '_task', 'value' => $this->rc->task]);\n        $hiddenfields->add(['name' => '_action', 'value' => 'plugin.managesieve-save']);\n        $hiddenfields->add(['name' => '_framed', 'value' => $framed ? 1 : 0]);\n        $hiddenfields->add(['name' => '_newset', 'value' => 1]);\n\n        $name = rcube_utils::get_input_string('_name', rcube_utils::INPUT_POST);\n        $copy = rcube_utils::get_input_string('_copy', rcube_utils::INPUT_POST);\n        $selected = rcube_utils::get_input_string('_from', rcube_utils::INPUT_POST);\n\n        // filter set name input\n        $input_name = new html_inputfield([\n            'name' => '_name',\n            'id' => '_name',\n            'size' => 30,\n            'class' => !empty($this->errors['name']) ? 'error form-control' : 'form-control',\n        ]);\n\n        $table->add('title', html::label('_name', rcube::Q($this->plugin->gettext('filtersetname'))));\n        $table->add(null, $input_name->show($name));\n\n        $filters = '<ul class=\"proplist\">';\n        $filters .= '<li>' . html::label('from_none', html::tag('input', [\n            'type' => 'radio',\n            'id' => 'from_none',\n            'name' => '_from',\n            'value' => 'none',\n            'checked' => !$selected || $selected == 'none',\n        ]) . rcube::Q($this->plugin->gettext('none'))) . '</li>';\n\n        // filters set list\n        $list = $this->list_scripts();\n        $select = new html_select(['name' => '_copy', 'id' => '_copy', 'class' => 'custom-select']);\n\n        if (is_array($list)) {\n            asort($list, \\SORT_LOCALE_STRING);\n\n            if (!$copy && isset($_SESSION['managesieve_current'])) {\n                $copy = $_SESSION['managesieve_current'];\n            }\n\n            foreach ($list as $set) {\n                $select->add($set, $set);\n            }\n\n            $filters .= '<li>' . html::label('from_set', html::tag('input', [\n                'type' => 'radio',\n                'id' => 'from_set',\n                'name' => '_from',\n                'value' => 'set',\n                'checked' => $selected == 'set',\n            ]) . rcube::Q($this->plugin->gettext('fromset')) . ' ' . $select->show($copy)) . '</li>';\n        }\n\n        // script upload box\n        $upload = new html_inputfield([\n            'name' => '_file',\n            'id' => '_file',\n            'size' => 30,\n            'type' => 'file',\n            'class' => !empty($this->errors['file']) ? 'error form-control' : 'form-control',\n        ]);\n\n        $filters .= '<li>' . html::label('from_file', html::tag('input', [\n            'type' => 'radio',\n            'id' => 'from_file',\n            'name' => '_from',\n            'value' => 'file',\n            'checked' => $selected == 'file',\n        ]) . rcube::Q($this->plugin->gettext('fromfile')) . ' ' . $upload->show()) . '</li>';\n\n        $filters .= '</ul>';\n\n        $table->add('title', html::label('from_none', rcube::Q($this->plugin->gettext('filters'))));\n        $table->add('', $filters);\n\n        $out = '<form name=\"filtersetform\" action=\"./\" method=\"post\" enctype=\"multipart/form-data\">'\n            . \"\\n\" . $hiddenfields->show() . \"\\n\" . $table->show();\n\n        $this->rc->output->add_gui_object('sieveform', 'filtersetform');\n\n        if (!empty($this->errors['name'])) {\n            $this->add_tip('_name', $this->errors['name'], true);\n        }\n        if (!empty($this->errors['file'])) {\n            $this->add_tip('_file', $this->errors['file'], true);\n        }\n\n        $this->print_tips();\n\n        return $out;\n    }\n\n    /**\n     * Filter form object for templates engine\n     */\n    public function filter_form($attrib)\n    {\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmfilterform';\n        }\n\n        $fid = rcube_utils::get_input_string('_fid', rcube_utils::INPUT_GPC);\n        $scr = $this->form ?? (array_key_exists($fid, $this->script) ? $this->script[$fid] : null);\n        $compact = !empty($attrib['compact-form']);\n        $framed = !empty($_POST['_framed']) || !empty($_GET['_framed']);\n\n        $_SESSION['managesieve-compact-form'] = $compact;\n\n        // do not allow creation of new filters\n        if ($fid === '' && in_array('new_filter', $this->disabled_actions)) {\n            $this->rc->output->show_message('managesieve.disabledaction', 'error');\n            return;\n        }\n\n        $hiddenfields = new html_hiddenfield(['name' => '_task', 'value' => $this->rc->task]);\n        $hiddenfields->add(['name' => '_action', 'value' => 'plugin.managesieve-save']);\n        $hiddenfields->add(['name' => '_framed', 'value' => $framed ? 1 : 0]);\n        $hiddenfields->add(['name' => '_fid', 'value' => $fid]);\n\n        $out = $hiddenfields->show();\n\n        // 'any' flag\n        $any = (\n            (!isset($this->form) && !empty($scr) && empty($scr['tests']))\n            || (!empty($scr['tests']) && count($scr['tests']) == 1\n                && $scr['tests'][0]['test'] == 'true' && empty($scr['tests'][0]['not'])\n            )\n        );\n\n        // filter name input\n        $input_name = new html_inputfield([\n            'name' => '_name',\n            'id' => '_name',\n            'size' => 30,\n            'class' => !empty($this->errors['name']) ? 'form-control error' : 'form-control',\n        ]);\n\n        if (!empty($this->errors['name'])) {\n            $this->add_tip('_name', $this->errors['name'], true);\n        }\n\n        $input_name = $input_name->show($scr['name'] ?? '');\n\n        $out .= sprintf(\"\\n\" . '<div class=\"form-group row\">'\n            . '<label for=\"_name\" class=\"col-sm-4 col-form-label\">%s</label>'\n            . '<div class=\"col-sm-8\">%s</div></div>',\n            rcube::Q($this->plugin->gettext('filtername')), $input_name\n        );\n\n        // filter set selector\n        if ($this->rc->task == 'mail') {\n            $out .= sprintf(\"\\n\" . '<div class=\"form-group row\">'\n                . '<label for=\"%s\" class=\"col-sm-4 col-form-label\">%s</label>'\n                . '<div class=\"col-sm-8\">%s</div></div>',\n                'sievescriptname',\n                rcube::Q($this->plugin->gettext('filterset')),\n                $this->filtersets_list(['id' => 'sievescriptname'], true)\n            );\n        }\n\n        $out .= sprintf(\"\\n\" . '<div class=\"form-group row form-check\">'\n            . '<label for=\"fenabled\" class=\"col-sm-4 col-form-label\">%s</label>'\n            . '<div class=\"col-sm-8 form-check\">'\n                . '<input type=\"checkbox\" id=\"fenabled\" name=\"_enabled\" value=\"1\"' . (empty($scr['disabled']) ? ' checked' : '') . ' />'\n            . '</div></div>',\n            rcube::Q($this->plugin->gettext('filterenabled'))\n        );\n\n        if ($compact) {\n            $select = new html_select(['name' => '_join', 'id' => '_join', 'class' => 'custom-select',\n                'onchange' => 'rule_join_radio(this.value)']);\n\n            foreach (['allof', 'anyof', 'any'] as $val) {\n                $select->add($this->plugin->gettext('filter' . $val), $val);\n            }\n\n            $join = $any ? 'any' : 'allof';\n            if (isset($scr) && !$any) {\n                $join = !empty($scr['join']) ? 'allof' : 'anyof';\n            }\n\n            $out .= sprintf(\"\\n\" . '<div class=\"form-group row\">'\n                . '<label for=\"_join\" class=\"col-sm-4 col-form-label\">%s</label>'\n                . '<div class=\"col-sm-8\">%s</div></div>',\n                rcube::Q($this->plugin->gettext('scope')), $select->show($join)\n            );\n\n            $out .= '<div id=\"rules\"' . ($any ? ' style=\"display: none\"' : '') . '>';\n            $out .= \"\\n<fieldset><legend>\" . rcube::Q($this->plugin->gettext('rules')) . \"</legend>\\n\";\n        } else {\n            $out .= '<br><fieldset><legend>' . rcube::Q($this->plugin->gettext('messagesrules')) . \"</legend>\\n\";\n\n            // any, allof, anyof radio buttons\n            $field_id = '_allof';\n            $input_join = new html_radiobutton(['name' => '_join', 'id' => $field_id, 'value' => 'allof',\n                'onclick' => 'rule_join_radio(\\'allof\\')', 'class' => 'radio']);\n\n            if (isset($scr) && !$any) {\n                $input_join = $input_join->show($scr['join'] ? 'allof' : '');\n            } else {\n                $input_join = $input_join->show();\n            }\n\n            $out .= $input_join . html::label($field_id, rcube::Q($this->plugin->gettext('filterallof')));\n\n            $field_id = '_anyof';\n            $input_join = new html_radiobutton(['name' => '_join', 'id' => $field_id, 'value' => 'anyof',\n                'onclick' => 'rule_join_radio(\\'anyof\\')', 'class' => 'radio']);\n\n            if (isset($scr) && !$any) {\n                $input_join = $input_join->show($scr['join'] ? '' : 'anyof');\n            } else {\n                $input_join = $input_join->show('anyof'); // default\n            }\n\n            $out .= $input_join . html::label($field_id, rcube::Q($this->plugin->gettext('filteranyof')));\n\n            $field_id = '_any';\n            $input_join = new html_radiobutton(['name' => '_join', 'id' => $field_id, 'value' => 'any',\n                'onclick' => 'rule_join_radio(\\'any\\')', 'class' => 'radio']);\n\n            $input_join = $input_join->show($any ? 'any' : '');\n\n            $out .= $input_join . html::label($field_id, rcube::Q($this->plugin->gettext('filterany')));\n            $out .= '<div id=\"rules\"' . ($any ? ' style=\"display: none\"' : '') . '>';\n        }\n\n        $rows_num = !empty($scr['tests']) ? count($scr['tests']) : 1;\n        for ($x = 0; $x < $rows_num; $x++) {\n            $out .= $this->rule_div($fid, $x, true, $compact);\n        }\n\n        $out .= $compact ? \"</fieldset>\\n</div>\\n\" : \"</div>\\n</fieldset>\\n\";\n\n        // actions\n        $label = $this->plugin->gettext($compact ? 'actions' : 'messagesactions');\n        $out .= '<fieldset><legend>' . rcube::Q($label) . \"</legend>\\n\";\n\n        $rows_num = isset($scr) ? count($scr['actions']) : 1;\n\n        $out .= '<div id=\"actions\">';\n        for ($x = 0; $x < $rows_num; $x++) {\n            $out .= $this->action_div($fid, $x);\n        }\n        $out .= \"</div>\\n\";\n\n        $out .= \"</fieldset>\\n\";\n\n        $this->print_tips();\n\n        $this->rc->output->add_label(\n            'managesieve.ruledeleteconfirm',\n            'managesieve.actiondeleteconfirm'\n        );\n        $this->rc->output->set_env('rule_disabled', !empty($scr['disabled']));\n        $this->rc->output->add_gui_object('sieveform', 'filterform');\n\n        $attrib['name'] = 'filterform';\n        $attrib['action'] = './';\n        $attrib['method'] = 'post';\n\n        $out = html::tag('form', $attrib, $out, ['name', 'action', 'method', 'class']);\n\n        if (!$compact) {\n            $out = str_replace('</form>', '', $out);\n        }\n\n        return $out;\n    }\n\n    public function rule_div($fid, $id, $div = true, $compact = false)\n    {\n        if (isset($id) && isset($this->form)) {\n            $rule = $this->form['tests'][$id];\n        } elseif (isset($id) && isset($this->script[$fid]['tests'][$id])) {\n            $rule = $this->script[$fid]['tests'][$id];\n        } else {\n            $rule = ['test' => null];\n        }\n\n        if (isset($this->form['tests'])) {\n            $rows_num = count($this->form['tests']);\n        } elseif (isset($this->script[$fid]['tests'])) {\n            $rows_num = count($this->script[$fid]['tests']);\n        } else {\n            $rows_num = 0;\n        }\n\n        // headers select\n        $select_header = new html_select(['name' => \"_header[{$id}]\", 'id' => 'header' . $id,\n            'onchange' => 'rule_header_select(' . $id . ')', 'class' => 'custom-select']);\n\n        foreach ($this->headers as $index => $header) {\n            $header = $this->rc->text_exists($index) ? $this->plugin->gettext($index) : $header;\n            $select_header->add($header, $index);\n        }\n        $select_header->add($this->plugin->gettext('...'), '...');\n        if (in_array('body', $this->exts)) {\n            $select_header->add($this->plugin->gettext('body'), 'body');\n        }\n        $select_header->add($this->plugin->gettext('size'), 'size');\n        if (in_array('spamtest', $this->exts)) {\n            $select_header->add($this->plugin->gettext('spamtest'), 'spamtest');\n        }\n        if (in_array('date', $this->exts)) {\n            $select_header->add($this->plugin->gettext('datetest'), 'date');\n            $select_header->add($this->plugin->gettext('currdate'), 'currentdate');\n        }\n        if (in_array('variables', $this->exts)) {\n            $select_header->add($this->plugin->gettext('string'), 'string');\n        }\n        if (in_array('duplicate', $this->exts)) {\n            $select_header->add($this->plugin->gettext('message'), 'message');\n        }\n\n        $test = null;\n\n        if (isset($rule['test'])) {\n            if (in_array($rule['test'], ['header', 'address', 'envelope'])) {\n                if (is_array($rule['arg1']) && count($rule['arg1']) == 1) {\n                    $rule['arg1'] = $rule['arg1'][0];\n                }\n\n                $header = !is_array($rule['arg1']) ? strtolower($rule['arg1']) : null;\n                $matches = !is_array($rule['arg1']) && $header && isset($this->headers[$header]);\n                $test = $matches ? $header : '...';\n            } elseif ($rule['test'] == 'exists') {\n                if (is_array($rule['arg']) && count($rule['arg']) == 1) {\n                    $rule['arg'] = $rule['arg'][0];\n                }\n\n                $header = !is_array($rule['arg']) ? strtolower($rule['arg']) : null;\n                $matches = !is_array($rule['arg']) && $header && isset($this->headers[$header]);\n                $test = $matches ? $header : '...';\n            } elseif (in_array($rule['test'], ['size', 'spamtest', 'body', 'date', 'currentdate', 'string'])) {\n                $test = $rule['test'];\n            } elseif (in_array($rule['test'], ['duplicate'])) {\n                $test = 'message';\n            } elseif ($rule['test'] != 'true') {\n                $test = '...';\n            }\n        }\n\n        $tout = '<div class=\"flexbox\">';\n        $aout = $select_header->show($test);\n\n        $custom = null;\n        $customv = null;\n\n        // custom headers input\n        if (isset($rule['test']) && in_array($rule['test'], ['header', 'address', 'envelope'])) {\n            $custom = (array) $rule['arg1'];\n            if (count($custom) == 1 && isset($this->headers[strtolower($custom[0])])) {\n                $custom = null;\n            }\n        } elseif (isset($rule['test']) && $rule['test'] == 'string') {\n            $customv = (array) $rule['arg1'];\n            if (count($customv) == 1 && isset($this->headers[strtolower($customv[0])])) {\n                $customv = null;\n            }\n        } elseif (isset($rule['test']) && $rule['test'] == 'exists') {\n            $custom = (array) $rule['arg'];\n            if (count($custom) == 1 && isset($this->headers[strtolower($custom[0])])) {\n                $custom = null;\n            }\n        }\n\n        // custom header and variable inputs\n        $aout .= $this->list_input($id, 'custom_header', $custom, 15, false, [\n            'disabled' => !isset($custom),\n            'class' => $this->error_class($id, 'test', 'header', 'custom_header'),\n            'placeholder' => $this->plugin->gettext('headername'),\n            'title' => $this->plugin->gettext('headername'),\n        ]) . \"\\n\";\n\n        $aout .= $this->list_input($id, 'custom_var', $customv, 15, false, [\n            'disabled' => !isset($customv),\n            'class' => $this->error_class($id, 'test', 'header', 'custom_var'),\n        ]) . \"\\n\";\n\n        $test = self::rule_test($rule);\n        $target = '';\n        $sizetarget = null;\n        $sizeitem = null;\n\n        // target(s) input\n        if (in_array($rule['test'], ['header', 'address', 'envelope', 'string'])) {\n            $target = $rule['arg2'];\n        } elseif (in_array($rule['test'], ['body', 'date', 'currentdate', 'spamtest'])) {\n            $target = $rule['arg'];\n        } elseif ($rule['test'] == 'size') {\n            if (preg_match('/^([0-9]+)(K|M|G)?$/', $rule['arg'], $matches)) {\n                $sizetarget = $matches[1];\n                $sizeitem = $matches[2];\n            } else {\n                $sizetarget = $rule['arg'];\n                $sizeitem = $rule['item'];\n            }\n        }\n\n        // (current)date part select\n        if (in_array('date', $this->exts) || in_array('currentdate', $this->exts)) {\n            $date_parts = ['date', 'iso8601', 'std11', 'julian', 'time',\n                'year', 'month', 'day', 'hour', 'minute', 'second', 'weekday', 'zone'];\n            $select_dp = new html_select([\n                'name' => \"_rule_date_part[{$id}]\",\n                'id' => 'rule_date_part' . $id,\n                'style' => in_array($rule['test'], ['currentdate', 'date']) && !preg_match('/^(notcount|count)-/', $test) ? '' : 'display:none',\n                'class' => 'datepart_selector custom-select',\n            ]);\n\n            foreach ($date_parts as $part) {\n                $select_dp->add(rcube::Q($this->plugin->gettext($part)), $part);\n            }\n\n            $aout .= $select_dp->show($rule['test'] == 'currentdate' || $rule['test'] == 'date' ? $rule['part'] : '');\n        }\n\n        // message test select (e.g. duplicate)\n        if (in_array('duplicate', $this->exts)) {\n            $select_msg = new html_select([\n                'name' => \"_rule_message[{$id}]\",\n                'id' => 'rule_message' . $id,\n                'style' => in_array($rule['test'], ['duplicate']) ? '' : 'display:none',\n                'class' => 'message_selector custom-select',\n            ]);\n\n            $select_msg->add(rcube::Q($this->plugin->gettext('duplicate')), 'duplicate');\n            $select_msg->add(rcube::Q($this->plugin->gettext('notduplicate')), 'notduplicate');\n\n            $tout .= $select_msg->show($test);\n        }\n\n        $tout .= $this->match_type_selector('rule_op', $id, $test, $rule['test']);\n        $tout .= $this->list_input($id, 'rule_target', $target, null, false, [\n            'disabled' => in_array($rule['test'], ['size', 'exists', 'duplicate', 'spamtest']),\n            'class' => $this->error_class($id, 'test', 'target', 'rule_target'),\n        ]) . \"\\n\";\n\n        $select_size_op = new html_select([\n            'name' => \"_rule_size_op[{$id}]\",\n            'id' => 'rule_size_op' . $id,\n            'class' => 'input-group-prepend custom-select',\n        ]);\n        $select_size_op->add(rcube::Q($this->plugin->gettext('filterover')), 'over');\n        $select_size_op->add(rcube::Q($this->plugin->gettext('filterunder')), 'under');\n\n        $select_size_item = new html_select([\n            'name' => \"_rule_size_item[{$id}]\",\n            'id' => 'rule_size_item' . $id,\n            'class' => 'input-group-append custom-select',\n        ]);\n        foreach (['', 'K', 'M', 'G'] as $unit) {\n            $select_size_item->add($this->plugin->gettext($unit . 'B'), $unit);\n        }\n\n        $tout .= '<div id=\"rule_size' . $id . '\" class=\"input-group\" style=\"display:' . ($rule['test'] == 'size' ? 'inline' : 'none') . '\">';\n        $tout .= $select_size_op->show($rule['test'] == 'size' ? $rule['type'] : '');\n        $tout .= html::tag('input', [\n            'type' => 'text',\n            'name' => \"_rule_size_target[{$id}]\",\n            'id' => 'rule_size_i' . $id,\n            'value' => $sizetarget,\n            'size' => 10,\n            'class' => $this->error_class($id, 'test', 'sizetarget', 'rule_size_i'),\n        ]);\n        $tout .= \"\\n\" . $select_size_item->show($sizeitem);\n        $tout .= '</div>';\n        $tout .= '</div>';\n\n        if (in_array('relational', $this->exts)) {\n            $select_spamtest_op = new html_select([\n                'name' => \"_rule_spamtest_op[{$id}]\",\n                'id' => 'rule_spamtest_op' . $id,\n                'class' => 'input-group-prepend custom-select',\n                'onchange' => 'rule_spamtest_select(' . $id . ')',\n            ]);\n            $select_spamtest_op->add(rcube::Q($this->plugin->gettext('spamtestisunknown')), '');\n            $select_spamtest_op->add(rcube::Q($this->plugin->gettext('spamtestisgreaterthan')), 'value-gt');\n            $select_spamtest_op->add(rcube::Q($this->plugin->gettext('spamtestisgreaterthanequal')), 'value-ge');\n            $select_spamtest_op->add(rcube::Q($this->plugin->gettext('spamtestislessthan')), 'value-lt');\n            $select_spamtest_op->add(rcube::Q($this->plugin->gettext('spamtestislessthanequal')), 'value-le');\n            $select_spamtest_op->add(rcube::Q($this->plugin->gettext('spamtestequals')), 'value-eq');\n            $select_spamtest_op->add(rcube::Q($this->plugin->gettext('spamtestnotequals')), 'value-ne');\n\n            $select_spamtest_target = new html_select([\n                'name' => \"_rule_spamtest_target[{$id}]\",\n                'id' => 'rule_spamtest_target' . $id,\n                'class' => 'input-group-append custom-select',\n            ]);\n            $select_spamtest_target->add(rcube::Q('0%'), '1');\n            $select_spamtest_target->add(rcube::Q('20%'), '2');\n            $select_spamtest_target->add(rcube::Q('30%'), '3');\n            $select_spamtest_target->add(rcube::Q('40%'), '4');\n            $select_spamtest_target->add(rcube::Q('50%'), '5');\n            $select_spamtest_target->add(rcube::Q('60%'), '6');\n            $select_spamtest_target->add(rcube::Q('70%'), '7');\n            $select_spamtest_target->add(rcube::Q('80%'), '8');\n            $select_spamtest_target->add(rcube::Q('90%'), '9');\n            $select_spamtest_target->add(rcube::Q('100%'), '10');\n\n            $tout .= '<div id=\"rule_spamtest' . $id . '\" class=\"input-group\" style=\"display:' . ($rule['test'] == 'spamtest' ? 'inline' : 'none') . '\">';\n            $tout .= $select_spamtest_op->show($rule['test'] == 'spamtest' && $target > 0 ? $rule['type'] : '');\n            $tout .= $select_spamtest_target->show($rule['test'] == 'spamtest' ? $target : '');\n\n            $tout .= '</div>';\n        }\n        // Advanced modifiers (address, envelope)\n        $select_mod = new html_select([\n            'name' => \"_rule_mod[{$id}]\",\n            'id' => 'rule_mod_op' . $id,\n            'class' => 'custom-select',\n            'onchange' => 'rule_mod_select(' . $id . ')',\n        ]);\n        $select_mod->add(rcube::Q($this->plugin->gettext('none')), '');\n        $select_mod->add(rcube::Q($this->plugin->gettext('address')), 'address');\n        if (in_array('envelope', $this->exts)) {\n            $select_mod->add(rcube::Q($this->plugin->gettext('envelope')), 'envelope');\n        }\n\n        $select_type = new html_select([\n            'name' => \"_rule_mod_type[{$id}]\",\n            'id' => 'rule_mod_type' . $id,\n            'class' => 'custom-select',\n        ]);\n        $select_type->add(rcube::Q($this->plugin->gettext('allparts')), 'all');\n        $select_type->add(rcube::Q($this->plugin->gettext('domain')), 'domain');\n        $select_type->add(rcube::Q($this->plugin->gettext('localpart')), 'localpart');\n        if (in_array('subaddress', $this->exts)) {\n            $select_type->add(rcube::Q($this->plugin->gettext('user')), 'user');\n            $select_type->add(rcube::Q($this->plugin->gettext('detail')), 'detail');\n        }\n\n        $need_mod = !in_array($rule['test'], ['size', 'spamtest', 'body', 'date', 'currentdate', 'duplicate', 'string']);\n        $mout = '<div id=\"rule_mod' . $id . '\" class=\"adv input-group\"' . (!$need_mod ? ' style=\"display:none\"' : '') . '>';\n        $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('modifier'))));\n        $mout .= $select_mod->show($rule['test']);\n        $mout .= '</div>';\n        $mout .= '<div id=\"rule_mod_type' . $id . '\" class=\"adv input-group\"';\n        $mout .= (!in_array($rule['test'], ['address', 'envelope']) ? ' style=\"display:none\"' : '') . '>';\n        $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('modtype'))));\n        $mout .= $select_type->show($rule['part'] ?? null);\n        $mout .= '</div>';\n\n        // Advanced modifiers (comparators)\n        $need_comp = $rule['test'] != 'size' && $rule['test'] != 'spamtest' && $rule['test'] != 'duplicate';\n        $mout .= '<div id=\"rule_comp' . $id . '\" class=\"adv input-group\"' . (!$need_comp ? ' style=\"display:none\"' : '') . '>';\n        $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('comparator'))));\n        $mout .= $this->comparator_selector($rule['comparator'] ?? null, 'rule_comp', $id);\n        $mout .= '</div>';\n\n        // Advanced modifiers (mime)\n        if (in_array('mime', $this->exts)) {\n            $need_mime = !$rule || in_array($rule['test'], ['header', 'address', 'exists']);\n            $mime_type = '';\n            $select_mime = new html_select([\n                'name' => \"_rule_mime_type[{$id}]\",\n                'id' => 'rule_mime_type' . $id,\n                'style' => 'min-width:8em', 'onchange' => 'rule_mime_select(' . $id . ')',\n                'class' => 'custom-select',\n            ]);\n            $select_mime->add('-', '');\n\n            foreach (['contenttype', 'type', 'subtype', 'param'] as $val) {\n                if (isset($rule['mime-' . $val])) {\n                    $mime_type = $val;\n                }\n\n                $select_mime->add(rcube::Q($this->plugin->gettext('mime-' . $val)), $val);\n            }\n\n            $select_mime_part = new html_select([\n                'name' => \"_rule_mime_part[{$id}]\",\n                'id' => 'rule_mime_part' . $id,\n                'class' => 'custom-select',\n            ]);\n            $select_mime_part->add(rcube::Q($this->plugin->gettext('mime-message')), '');\n            $select_mime_part->add(rcube::Q($this->plugin->gettext('mime-anychild')), 'anychild');\n\n            $mout .= '<div id=\"rule_mime_part' . $id . '\" class=\"adv input-group\"' . (!$need_mime ? ' style=\"display:none\"' : '') . '>';\n            $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('mimepart'))));\n            $mout .= $select_mime_part->show(!empty($rule['mime-anychild']) ? 'anychild' : '');\n            $mout .= '</div>';\n            $mout .= '<div id=\"rule_mime' . $id . '\" class=\"adv input-group\"' . (!$need_mime ? ' style=\"display:none\"' : '') . '>';\n            $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('mime'))));\n            $mout .= $select_mime->show($mime_type);\n            $mout .= $this->list_input($id, 'rule_mime_param', $rule['mime-param'] ?? null,\n                30, $mime_type != 'param', ['class' => $this->error_class($id, 'test', 'mime_param', 'rule_mime_param')]\n            );\n            $mout .= '</div>';\n        }\n\n        // Advanced modifiers (body transformations)\n        $select_mod = new html_select([\n            'name' => \"_rule_trans[{$id}]\",\n            'id' => 'rule_trans_op' . $id,\n            'class' => 'custom-select',\n            'onchange' => 'rule_trans_select(' . $id . ')',\n        ]);\n        $select_mod->add(rcube::Q($this->plugin->gettext('text')), 'text');\n        $select_mod->add(rcube::Q($this->plugin->gettext('undecoded')), 'raw');\n        $select_mod->add(rcube::Q($this->plugin->gettext('contenttype')), 'content');\n\n        $rule_content = '';\n        if (isset($rule['content'])) {\n            $rule_content = is_array($rule['content']) ? implode(',', $rule['content']) : $rule['content'];\n        }\n\n        $mout .= '<div id=\"rule_trans' . $id . '\" class=\"adv input-group\"' . ($rule['test'] != 'body' ? ' style=\"display:none\"' : '') . '>';\n        $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('modifier'))));\n        $mout .= $select_mod->show($rule['part'] ?? null);\n        $mout .= html::tag('input', [\n            'type' => 'text',\n            'name' => \"_rule_trans_type[{$id}]\",\n            'id' => 'rule_trans_type' . $id,\n            'value' => $rule_content,\n            'size' => 20,\n            'style' => !isset($rule['part']) || $rule['part'] != 'content' ? 'display:none' : '',\n            'class' => $this->error_class($id, 'test', 'part', 'rule_trans_type'),\n        ]);\n        $mout .= '</div>';\n\n        // Date header\n        if (in_array('date', $this->exts)) {\n            $mout .= '<div id=\"rule_date_header_div' . $id . '\" class=\"adv input-group\"' . ($rule['test'] != 'date' ? ' style=\"display:none\"' : '') . '>';\n            $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('dateheader'))));\n            $mout .= html::tag('input', [\n                'type' => 'text',\n                'name' => \"_rule_date_header[{$id}]\",\n                'id' => 'rule_date_header' . $id,\n                'value' => $rule['test'] == 'date' ? $rule['header'] : '',\n                'size' => 15,\n                'class' => $this->error_class($id, 'test', 'dateheader', 'rule_date_header'),\n            ]);\n            $mout .= '</div>';\n        }\n\n        // Index\n        if (in_array('index', $this->exts)) {\n            $need_index = in_array($rule['test'], ['header', ', address', 'date']);\n            $mout .= '<div id=\"rule_index_div' . $id . '\" class=\"adv input-group\"' . (!$need_index ? ' style=\"display:none\"' : '') . '>';\n            $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('index'))));\n            $mout .= html::tag('input', [\n                'type' => 'text',\n                'name' => \"_rule_index[{$id}]\",\n                'id' => 'rule_index' . $id,\n                'value' => !empty($rule['index']) ? intval($rule['index']) : '',\n                'size' => 3,\n                'class' => $this->error_class($id, 'test', 'index', 'rule_index'),\n            ]);\n            $mout .= html::label('input-group-append',\n                html::tag('input', [\n                    'type' => 'checkbox',\n                    'name' => \"_rule_index_last[{$id}]\",\n                    'id' => 'rule_index_last' . $id,\n                    'value' => 1,\n                    'checked' => !empty($rule['last']),\n                ]) . rcube::Q($this->plugin->gettext('indexlast')));\n            $mout .= '</div>';\n        }\n\n        // Duplicate\n        if (in_array('duplicate', $this->exts)) {\n            $need_duplicate = $rule['test'] == 'duplicate';\n            $mout .= '<div id=\"rule_duplicate_div' . $id . '\" class=\"adv\"' . (!$need_duplicate ? ' style=\"display:none\"' : '') . '>';\n\n            foreach (['handle', 'header', 'uniqueid'] as $unit) {\n                $mout .= '<div class=\"input-group\">';\n                $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('duplicate.' . $unit))));\n                $mout .= html::tag('input', [\n                    'type' => 'text',\n                    'name' => '_rule_duplicate_' . $unit . \"[{$id}]\",\n                    'id' => 'rule_duplicate_' . $unit . $id,\n                    'value' => $rule[$unit] ?? '',\n                    'size' => 30,\n                    'class' => $this->error_class($id, 'test', 'duplicate_' . $unit, 'rule_duplicate_' . $unit),\n                ]);\n                $mout .= '</div>';\n            }\n\n            $mout .= '<div class=\"input-group\">';\n            $mout .= html::span('label input-group-prepend', html::span('input-group-text', rcube::Q($this->plugin->gettext('duplicate.seconds'))));\n            $mout .= html::tag('input', [\n                'type' => 'text',\n                'name' => \"_rule_duplicate_seconds[{$id}]\",\n                'id' => 'rule_duplicate_seconds' . $id,\n                'value' => $rule['seconds'] ?? '',\n                'size' => 6,\n                'class' => $this->error_class($id, 'test', 'duplicate_seconds', 'rule_duplicate_seconds'),\n            ]);\n            $mout .= html::label('input-group-append',\n                html::tag('input', [\n                    'type' => 'checkbox',\n                    'name' => \"_rule_duplicate_last[{$id}]\",\n                    'id' => 'rule_duplicate_last' . $id,\n                    'value' => 1,\n                    'checked' => !empty($rule['last']),\n                ]) . rcube::Q($this->plugin->gettext('duplicate.last')));\n            $mout .= '</div>';\n            $mout .= '</div>';\n        }\n\n        $add_title = rcube::Q($this->plugin->gettext('add'));\n        $del_title = rcube::Q($this->plugin->gettext('del'));\n        $adv_title = rcube::Q($this->plugin->gettext('advancedopts'));\n\n        // Build output table\n        $out = $div ? '<div class=\"rulerow\" id=\"rulerow' . $id . '\">' . \"\\n\" : '';\n        $out .= '<table class=\"compact-table\"><tr>';\n\n        if (!$compact) {\n            $out .= '<td class=\"advbutton\">';\n            $out .= sprintf('<a href=\"#\" id=\"ruleadv%s\" title=\"%s\" onclick=\"rule_adv_switch(%s, this); return false\" class=\"show\">'\n                . '<span class=\"inner\">%s</span></a>', $id, $adv_title, $id, $adv_title);\n            $out .= '</td>';\n        }\n\n        $out .= '<td class=\"rowactions\"><div class=\"flexbox\">' . $aout . '</div></td>';\n        $out .= '<td class=\"rowtargets\">' . $tout . \"\\n\";\n        $out .= '<div id=\"rule_advanced' . $id . '\" style=\"display:none\" class=\"advanced\">' . $mout . '</div>';\n        $out .= '</td>';\n        $out .= '<td class=\"rowbuttons\">';\n        if ($compact) {\n            $out .= sprintf('<a href=\"#\" id=\"ruleadv%s\" title=\"%s\" onclick=\"rule_adv_switch(%s, this); return false\" class=\"advanced show\">'\n                . '<span class=\"inner\">%s</span></a>', $id, $adv_title, $id, $adv_title);\n        }\n        $out .= sprintf('<a href=\"#\" id=\"ruleadd%s\" title=\"%s\" onclick=\"rcmail.managesieve_ruleadd(\\'%s\\'); return false\" class=\"button create add\">'\n            . '<span class=\"inner\">%s</span></a>', $id, $add_title, $id, $add_title);\n        $out .= sprintf('<a href=\"#\" id=\"ruledel%s\" title=\"%s\" onclick=\"rcmail.managesieve_ruledel(\\'%s\\'); return false\" class=\"button delete del%s\">'\n            . '<span class=\"inner\">%s</span></a>', $id, $del_title, $id, $rows_num < 2 ? ' disabled' : '', $del_title);\n        $out .= '</td>';\n\n        $out .= '</tr></table>';\n        $out .= $div ? \"</div>\\n\" : '';\n\n        return $out;\n    }\n\n    private static function rule_test(&$rule)\n    {\n        // first modify value/count tests with 'not' keyword\n        // we'll revert the meaning of operators\n        if (!empty($rule['not']) && !empty($rule['type'])\n            && preg_match('/^(count|value)-([gteqnl]{2})/', $rule['type'], $m)\n        ) {\n            $rule['not'] = false;\n\n            switch ($m[2]) {\n                case 'gt':\n                    $rule['type'] = $m[1] . '-le';\n                    break;\n                case 'ge':\n                    $rule['type'] = $m[1] . '-lt';\n                    break;\n                case 'lt':\n                    $rule['type'] = $m[1] . '-ge';\n                    break;\n                case 'le':\n                    $rule['type'] = $m[1] . '-gt';\n                    break;\n                case 'eq':\n                    $rule['type'] = $m[1] . '-ne';\n                    break;\n                case 'ne':\n                    $rule['type'] = $m[1] . '-eq';\n                    break;\n            }\n        } elseif (!empty($rule['not']) && !empty($rule['test']) && $rule['test'] == 'size') {\n            $rule['not'] = false;\n            $rule['type'] = $rule['type'] == 'over' ? 'under' : 'over';\n        }\n\n        $set = ['header', 'address', 'envelope', 'body', 'date', 'currentdate', 'string'];\n        $test = null;\n\n        // build test string supported by select element\n        if (!empty($rule['size'])) {\n            $test = $rule['type'];\n        } elseif (!empty($rule['test']) && in_array($rule['test'], $set)) {\n            $test = (!empty($rule['not']) ? 'not' : '') . ($rule['type'] ?: 'is');\n        } elseif (!empty($rule['test'])) {\n            $test = (!empty($rule['not']) ? 'not' : '') . $rule['test'];\n        }\n\n        return $test;\n    }\n\n    public function action_div($fid, $id, $div = true)\n    {\n        if (isset($id) && isset($this->form)) {\n            $action = $this->form['actions'][$id];\n        } elseif (isset($id) && isset($this->script[$fid]['actions'][$id])) {\n            $action = $this->script[$fid]['actions'][$id];\n        } else {\n            $action = ['type' => null];\n        }\n\n        if (isset($this->form['actions'])) {\n            $rows_num = count($this->form['actions']);\n        } elseif (isset($this->script[$fid]['actions'])) {\n            $rows_num = count($this->script[$fid]['actions']);\n        } else {\n            $rows_num = 0;\n        }\n\n        $out = $div ? '<div class=\"actionrow\" id=\"actionrow' . $id . '\">' . \"\\n\" : '';\n\n        $out .= '<table class=\"compact-table\"><tr><td class=\"rowactions\">';\n\n        // action select\n        $select_action = new html_select([\n            'name' => \"_action_type[{$id}]\",\n            'id' => 'action_type' . $id,\n            'class' => 'custom-select',\n            'onchange' => \"action_type_select({$id})\",\n        ]);\n        if (in_array('fileinto', $this->exts)) {\n            $select_action->add($this->plugin->gettext('messagemoveto'), 'fileinto');\n        }\n        if (in_array('fileinto', $this->exts) && in_array('copy', $this->exts)) {\n            $select_action->add($this->plugin->gettext('messagecopyto'), 'fileinto_copy');\n        }\n        if ($action['type'] == 'redirect' || !in_array('redirect', $this->disabled_actions)) {\n            $select_action->add($this->plugin->gettext('messageredirect'), 'redirect');\n            if (in_array('copy', $this->exts)) {\n                $select_action->add($this->plugin->gettext('messagesendcopy'), 'redirect_copy');\n            }\n        }\n        if (in_array('reject', $this->exts)) {\n            $select_action->add($this->plugin->gettext('messagediscard'), 'reject');\n        } elseif (in_array('ereject', $this->exts)) {\n            $select_action->add($this->plugin->gettext('messagediscard'), 'ereject');\n        }\n        if (in_array('vacation', $this->exts)) {\n            $select_action->add($this->plugin->gettext('messagereply'), 'vacation');\n        }\n        $select_action->add($this->plugin->gettext('messagedelete'), 'discard');\n        if (in_array('imapflags', $this->exts) || in_array('imap4flags', $this->exts)) {\n            $select_action->add($this->plugin->gettext('setflags'), 'setflag');\n            $select_action->add($this->plugin->gettext('addflags'), 'addflag');\n            $select_action->add($this->plugin->gettext('removeflags'), 'removeflag');\n        }\n        if (in_array('editheader', $this->exts)) {\n            $select_action->add($this->plugin->gettext('addheader'), 'addheader');\n            $select_action->add($this->plugin->gettext('deleteheader'), 'deleteheader');\n        }\n        if (in_array('variables', $this->exts)) {\n            $select_action->add($this->plugin->gettext('setvariable'), 'set');\n        }\n        if (in_array('enotify', $this->exts) || in_array('notify', $this->exts)) {\n            $select_action->add($this->plugin->gettext('notify'), 'notify');\n        }\n        $select_action->add($this->plugin->gettext('messagekeep'), 'keep');\n        $select_action->add($this->plugin->gettext('rulestop'), 'stop');\n\n        $select_type = $action['type'];\n        if (in_array($action['type'], ['fileinto', 'redirect']) && !empty($action['copy'])) {\n            $select_type .= '_copy';\n        }\n\n        $out .= $select_action->show($select_type);\n        $out .= '</td>';\n\n        // actions target inputs\n        $out .= '<td class=\"rowtargets\">';\n\n        // force domain selection in redirect email input\n        $domains = (array) $this->rc->config->get('managesieve_domains');\n\n        if (!empty($domains)) {\n            sort($domains);\n\n            $domain_select = new html_select([\n                'name' => \"_action_target_domain[{$id}]\",\n                'id' => 'action_target_domain' . $id,\n                'class' => 'custom-select',\n            ]);\n\n            $domain_select->add(array_combine($domains, $domains));\n\n            if ($action['type'] == 'redirect') {\n                $parts = explode('@', $action['target']);\n                if (count($parts) > 1) {\n                    $action['domain'] = array_pop($parts);\n                    $action['target'] = implode('@', $parts);\n                }\n            }\n        }\n\n        // redirect target\n        $out .= '<span id=\"redirect_target' . $id . '\" class=\"input-group\" style=\"white-space:nowrap;'\n            . ' display:' . ($action['type'] == 'redirect' ? '' : 'none') . '\">'\n            . html::tag('input', [\n                'type' => 'text',\n                'name' => \"_action_target[{$id}]\",\n                'id' => 'action_target' . $id,\n                'value' => $action['type'] == 'redirect' ? $action['target'] : '',\n                'size' => !empty($domains) ? 20 : 35,\n                'class' => $this->error_class($id, 'action', 'target', 'action_target'),\n            ]);\n        $out .= isset($domain_select) ? '<span class=\"input-group-append input-group-prepend\">'\n            . ' <span class=\"input-group-text\">@</span> </span>'\n            . $domain_select->show(!empty($action['domain']) ? $action['domain'] : '') : '';\n        $out .= '</span>';\n\n        // (e)reject target\n        $out .= html::tag('textarea', [\n                'name' => '_action_target_area[' . $id . ']',\n                'id' => 'action_target_area' . $id,\n                'rows' => 3,\n                'cols' => 35,\n                'class' => $this->error_class($id, 'action', 'targetarea', 'action_target_area'),\n                'style' => 'display:' . (in_array($action['type'], ['reject', 'ereject']) ? 'inline' : 'none'),\n            ],\n            in_array($action['type'], ['reject', 'ereject']) ? rcube::Q($action['target'], 'strict', false) : ''\n        );\n\n        // vacation\n        $vsec = in_array('vacation-seconds', $this->exts);\n        $auto_addr = $this->rc->config->get('managesieve_vacation_addresses_init');\n        $from_addr = $this->rc->config->get('managesieve_vacation_from_init');\n\n        if (empty($action)) {\n            if ($auto_addr) {\n                $action['addresses'] = $this->user_emails();\n            }\n            if ($from_addr) {\n                $default_identity = $this->rc->user->list_emails(true);\n                $action['from'] = format_email_recipient($default_identity['email'], $default_identity['name']);\n            }\n        } elseif (!empty($action['from'])) {\n            $from = rcube_mime::decode_address_list($action['from'], null, true, RCUBE_CHARSET);\n            foreach ((array) $from as $idx => $addr) {\n                $from[$idx] = format_email_recipient($addr['mailto'], $addr['name']);\n            }\n            if (!empty($from)) {\n                $action['from'] = implode(', ', $from);\n            }\n        }\n\n        $action_subject = '';\n        if (isset($action['subject'])) {\n            $action_subject = is_array($action['subject']) ? implode(', ', $action['subject']) : $action['subject'];\n        }\n\n        $out .= '<div id=\"action_vacation' . $id . '\" style=\"display:' . ($action['type'] == 'vacation' ? 'inline' : 'none') . '\" class=\"composite\">';\n        $out .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('vacationreason')) . '</span><br>';\n        $out .= html::tag('textarea', [\n            'name' => \"_action_reason[{$id}]\",\n            'id' => 'action_reason' . $id,\n            'rows' => 3,\n            'cols' => 35,\n            'class' => $this->error_class($id, 'action', 'reason', 'action_reason'),\n        ], rcube::Q($action['reason'] ?? '', 'strict', false));\n        $out .= '<br><span class=\"label\">' . rcube::Q($this->plugin->gettext('vacationsubject')) . '</span><br>';\n        $out .= html::tag('input', [\n            'type' => 'text',\n            'name' => \"_action_subject[{$id}]\",\n            'id' => 'action_subject' . $id,\n            'value' => $action_subject,\n            'size' => 35,\n            'class' => $this->error_class($id, 'action', 'subject', 'action_subject'),\n        ]);\n        $out .= '<br><span class=\"label\">' . rcube::Q($this->plugin->gettext('vacationfrom')) . '</span><br>';\n        $out .= html::tag('input', [\n            'type' => 'text',\n            'name' => \"_action_from[{$id}]\",\n            'id' => 'action_from' . $id,\n            'value' => $action['from'] ?? '',\n            'size' => 35,\n            'class' => $this->error_class($id, 'action', 'from', 'action_from'),\n        ]);\n        $out .= '<br><span class=\"label\">' . rcube::Q($this->plugin->gettext('vacationaddr')) . '</span><br>';\n        $out .= $this->list_input($id, 'action_addresses', $action['addresses'] ?? null,\n            30, false, ['class' => $this->error_class($id, 'action', 'addresses', 'action_addresses')]\n        )\n            . html::a(['href' => '#', 'onclick' => rcmail_output::JS_OBJECT_NAME . \".managesieve_vacation_addresses({$id})\"],\n                rcube::Q($this->plugin->gettext('filladdresses')));\n        $out .= '<br><span class=\"label\">' . rcube::Q($this->plugin->gettext('vacationinterval')) . '</span><br>';\n        $out .= '<div class=\"input-group\">' . html::tag('input', [\n            'type' => 'text',\n            'name' => \"_action_interval[{$id}]\",\n            'id' => 'action_interval' . $id,\n            'value' => rcube_sieve_vacation::vacation_interval($action, $this->exts),\n            'size' => 2,\n            'class' => $this->error_class($id, 'action', 'interval', 'action_interval'),\n        ]);\n        if ($vsec) {\n            $interval_select = new html_select([\n                'name' => \"_action_interval_type[{$id}]\",\n                'class' => 'input-group-append custom-select',\n            ]);\n            $interval_select->add($this->plugin->gettext('days'), 'days');\n            $interval_select->add($this->plugin->gettext('seconds'), 'seconds');\n            $out .= $interval_select->show(isset($action['seconds']) ? 'seconds' : 'days');\n        } else {\n            $out .= \"\\n\" . html::span('input-group-append', html::span('input-group-text', $this->plugin->gettext('days')));\n        }\n        $out .= '</div></div>';\n\n        // flags\n        $flags = [\n            'read' => '\\Seen',\n            'answered' => '\\Answered',\n            'flagged' => '\\Flagged',\n            'deleted' => '\\Deleted',\n            'draft' => '\\Draft',\n        ];\n\n        $flags_target = isset($action['target']) ? (array) $action['target'] : [];\n        $custom_flags = [];\n        $is_flag_action = preg_match('/^(set|add|remove)flag$/', (string) $action['type']);\n\n        if ($is_flag_action) {\n            $custom_flags = array_filter($flags_target, static function ($v) use ($flags) {\n                return !in_array_nocase($v, $flags);\n            });\n        }\n\n        $flout = '';\n\n        foreach ($flags as $fidx => $flag) {\n            $flout .= html::label(null, html::tag('input', [\n                    'type' => 'checkbox',\n                    'name' => \"_action_flags[{$id}][]\",\n                    'value' => $flag,\n                    'checked' => $is_flag_action && in_array_nocase($flag, $flags_target),\n                ])\n                . rcube::Q($this->plugin->gettext('flag' . $fidx))) . '<br>';\n        }\n\n        $flout .= $this->list_input($id, 'action_flags', $custom_flags, null, false, [\n            'class' => $this->error_class($id, 'action', 'flag', 'action_flags_flag'),\n            'id' => \"action_flags_flag{$id}\",\n        ]);\n\n        $out .= html::div([\n            'id' => 'action_flags' . $id,\n            'style' => 'display:' . ($is_flag_action ? 'inline' : 'none'),\n            'class' => trim('checklist ' . $this->error_class($id, 'action', 'flags', 'action_flags')),\n        ], $flout);\n\n        // set variable\n        $set_modifiers = [\n            'lower',\n            'upper',\n            'lowerfirst',\n            'upperfirst',\n            'quotewildcard',\n            'length',\n        ];\n\n        if (in_array('enotify', $this->exts)) {\n            $set_modifiers[] = 'encodeurl';\n        }\n\n        $out .= '<div id=\"action_set' . $id . '\" class=\"composite\" style=\"display:' . ($action['type'] == 'set' ? 'inline' : 'none') . '\">';\n        foreach (['name', 'value'] as $unit) {\n            $out .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('setvar' . $unit)) . '</span><br>';\n            $out .= html::tag('input', [\n                'type' => 'text',\n                'name' => '_action_var' . $unit . '[' . $id . ']',\n                'id' => 'action_var' . $unit . $id,\n                'value' => isset($action[$unit]) && !is_array($action[$unit]) ? $action[$unit] : '',\n                'size' => 35,\n                'class' => $this->error_class($id, 'action', $unit, 'action_var' . $unit),\n            ]);\n            $out .= '<br>';\n        }\n\n        $smout = '';\n        foreach ($set_modifiers as $s_m) {\n            $smout .= html::label(null,\n                html::tag('input', [\n                    'type' => 'checkbox',\n                    'name' => \"_action_varmods[{$id}][]\",\n                    'value' => $s_m,\n                    'checked' => array_key_exists($s_m, (array) $action) && !empty($action[$s_m]),\n                ])\n                . rcube::Q($this->plugin->gettext('var' . $s_m))\n            );\n        }\n\n        $out .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('setvarmodifiers')) . '</span>';\n        $out .= html::div('checklist', $smout);\n        $out .= '</div>';\n\n        // notify\n        $notify_methods = (array) $this->rc->config->get('managesieve_notify_methods');\n        $importance_options = $this->notify_importance_options;\n\n        if (empty($notify_methods)) {\n            $notify_methods = $this->notify_methods;\n        }\n\n        $method = $target = '';\n\n        if (!empty($action['method'])) {\n            [$method, $target] = explode(':', $action['method'], 2);\n            $method = strtolower($method);\n        }\n\n        if ($method && !in_array($method, $notify_methods)) {\n            $notify_methods[] = $method;\n        }\n\n        $select_method = new html_select([\n            'name' => \"_action_notifymethod[{$id}]\",\n            'id' => \"_action_notifymethod{$id}\",\n            'class' => 'input-group-prepend custom-select ' . $this->error_class($id, 'action', 'method', 'action_notifymethod'),\n        ]);\n\n        foreach ($notify_methods as $m_n) {\n            $select_method->add(rcube::Q($this->rc->text_exists('managesieve.notifymethod' . $m_n) ? $this->plugin->gettext('managesieve.notifymethod' . $m_n) : $m_n), $m_n);\n        }\n\n        $select_importance = new html_select([\n            'name' => \"_action_notifyimportance[{$id}]\",\n            'id' => \"_action_notifyimportance{$id}\",\n            'class' => 'custom-select ' . $this->error_class($id, 'action', 'importance', 'action_notifyimportance'),\n        ]);\n\n        foreach ($importance_options as $io_v => $io_n) {\n            $select_importance->add(rcube::Q($this->plugin->gettext($io_n)), $io_v);\n        }\n\n        // @TODO: nice UI for mailto: (other methods too) URI parameters\n        $out .= '<div id=\"action_notify' . $id . '\" style=\"display:' . ($action['type'] == 'notify' ? 'inline' : 'none') . '\" class=\"composite\">';\n        $out .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('notifytarget')) . '</span><br>';\n        $out .= '<div class=\"input-group\">';\n        $out .= $select_method->show($method);\n        $out .= html::tag('input', [\n            'type' => 'text',\n            'name' => \"_action_notifytarget[{$id}]\",\n            'id' => 'action_notifytarget' . $id,\n            'value' => $target,\n            'size' => 25,\n            'class' => $this->error_class($id, 'action', 'target', 'action_notifytarget'),\n        ]);\n        $out .= '</div>';\n        $out .= '<br><span class=\"label\">' . rcube::Q($this->plugin->gettext('notifymessage')) . '</span><br>';\n        $out .= html::tag('textarea', [\n                'name' => \"_action_notifymessage[{$id}]\",\n                'id' => 'action_notifymessage' . $id,\n                'rows' => 3,\n                'cols' => 35,\n                'class' => $this->error_class($id, 'action', 'message', 'action_notifymessage'),\n            ], isset($action['message']) ? rcube::Q($action['message'], 'strict', false) : ''\n        );\n        if (in_array('enotify', $this->exts)) {\n            $out .= '<br><span class=\"label\">' . rcube::Q($this->plugin->gettext('notifyfrom')) . '</span><br>';\n            $out .= html::tag('input', [\n                'type' => 'text',\n                'name' => \"_action_notifyfrom[{$id}]\",\n                'id' => 'action_notifyfrom' . $id,\n                'value' => $action['from'] ?? '',\n                'size' => 35,\n                'class' => $this->error_class($id, 'action', 'from', 'action_notifyfrom'),\n            ]);\n        }\n        $out .= '<br><span class=\"label\">' . rcube::Q($this->plugin->gettext('notifyimportance')) . '</span><br>';\n        $out .= $select_importance->show(!empty($action['importance']) ? (int) $action['importance'] : 2);\n        $out .= '<div id=\"action_notifyoption_div' . $id . '\">'\n            . '<span class=\"label\">' . rcube::Q($this->plugin->gettext('notifyoptions')) . '</span><br>'\n            . $this->list_input($id, 'action_notifyoption', !empty($action['options']) ? (array) $action['options'] : [],\n                30, false, ['class' => $this->error_class($id, 'action', 'options', 'action_notifyoption')]\n            ) . '</div>';\n        $out .= '</div>';\n\n        if (in_array('editheader', $this->exts)) {\n            $action['pos'] = !empty($action['last']) ? 'last' : '';\n            $pos1_selector = new html_select([\n                'name' => \"_action_addheader_pos[{$id}]\",\n                'id' => \"action_addheader_pos{$id}\",\n                'class' => 'custom-select ' . $this->error_class($id, 'action', 'pos', 'action_addheader_pos'),\n            ]);\n            $pos1_selector->add($this->plugin->gettext('headeratstart'), '');\n            $pos1_selector->add($this->plugin->gettext('headeratend'), 'last');\n            $pos2_selector = new html_select([\n                'name' => \"_action_delheader_pos[{$id}]\",\n                'id' => \"action_delheader_pos{$id}\",\n                'class' => 'custom-select ' . $this->error_class($id, 'action', 'pos', 'action_delheader_pos'),\n            ]);\n            $pos2_selector->add($this->plugin->gettext('headerfromstart'), '');\n            $pos2_selector->add($this->plugin->gettext('headerfromend'), 'last');\n\n            // addheader\n            $out .= '<div id=\"action_addheader' . $id . '\" style=\"display:' . ($action['type'] == 'addheader' ? 'inline' : 'none') . '\" class=\"composite\">';\n            $out .= '<label class=\"label\" for=\"action_addheader_name' . $id . '\">' . rcube::Q($this->plugin->gettext('headername')) . '</label><br>';\n            $out .= html::tag('input', [\n                'type' => 'text',\n                'name' => \"_action_addheader_name[{$id}]\",\n                'id' => \"action_addheader_name{$id}\",\n                'value' => $action['name'] ?? '',\n                'size' => 35,\n                'class' => $this->error_class($id, 'action', 'name', 'action_addheader_name'),\n            ]);\n            $out .= '<br><label class=\"label\" for=\"action_addheader_value' . $id . '\">' . rcube::Q($this->plugin->gettext('headervalue')) . '</label><br>';\n            $out .= html::tag('input', [\n                'type' => 'text',\n                'name' => \"_action_addheader_value[{$id}]\",\n                'id' => \"action_addheader_value{$id}\",\n                'value' => $action['type'] == 'addheader' ? ($action['value'] ?? '') : '',\n                'size' => 35,\n                'class' => $this->error_class($id, 'action', 'value', 'action_addheader_value'),\n            ]);\n            $out .= '<br><label class=\"label\" for=\"action_addheader_pos' . $id . '\">' . rcube::Q($this->plugin->gettext('headerpos')) . '</label><br>';\n            $out .= $pos1_selector->show($action['pos']);\n            $out .= '</div>';\n\n            // deleteheader\n            $out .= '<div id=\"action_deleteheader' . $id . '\" style=\"display:' . ($action['type'] == 'deleteheader' ? 'inline' : 'none') . '\" class=\"composite\">';\n            $out .= '<label class=\"label\" for=\"action_delheader_name' . $id . '\">' . rcube::Q($this->plugin->gettext('headername')) . '</label><br>';\n            $out .= html::tag('input', [\n                'type' => 'text',\n                'name' => \"_action_delheader_name[{$id}]\",\n                'id' => \"action_delheader_name{$id}\",\n                'value' => $action['name'] ?? '',\n                'size' => 35,\n                'class' => $this->error_class($id, 'action', 'name', 'action_delheader_name'),\n            ]);\n            $out .= '<br><label class=\"label\" for=\"action_delheader_value' . $id . '\">' . rcube::Q($this->plugin->gettext('headerpatterns')) . '</label><br>';\n            $out .= $this->list_input($id, 'action_delheader_value', $action['value'] ?? null,\n                null, false, ['class' => $this->error_class($id, 'action', 'value', 'action_delheader_value')]) . \"\\n\";\n            $out .= '<br><div class=\"adv input-group\">';\n            $out .= html::span('label input-group-prepend', html::label([\n                'class' => 'input-group-text', 'for' => 'action_delheader_op' . $id,\n            ], rcube::Q($this->plugin->gettext('headermatchtype'))));\n            $out .= $this->match_type_selector('action_delheader_op', $id, $action['match-type'] ?? null, null, 'basic');\n            $out .= '</div>';\n            $out .= '<div class=\"adv input-group\">';\n            $out .= html::span('label input-group-prepend', html::label([\n                'class' => 'input-group-text', 'for' => 'action_delheader_comp_op' . $id,\n            ], rcube::Q($this->plugin->gettext('comparator'))));\n            $out .= $this->comparator_selector($action['comparator'] ?? null, 'action_delheader_comp', $id);\n            $out .= '</div>';\n            $out .= '<br><label class=\"label\" for=\"action_delheader_index' . $id . '\">' . rcube::Q($this->plugin->gettext('headeroccurrence')) . '</label><br>';\n            $out .= '<div class=\"input-group\">';\n            $out .= html::tag('input', [\n                'type' => 'text',\n                'name' => \"_action_delheader_index[{$id}]\",\n                'id' => \"action_delheader_index{$id}\",\n                'value' => !empty($action['index']) ? intval($action['index']) : '',\n                'size' => 5,\n                'class' => $this->error_class($id, 'action', 'index', 'action_delheader_index'),\n            ]);\n            $out .= ' ' . $pos2_selector->show($action['pos']);\n            $out .= '</div></div>';\n        }\n\n        // mailbox select\n        $additional = [];\n        if ($action['type'] == 'fileinto' && isset($action['target'])) {\n            // make sure non-existing (or unsubscribed) mailbox is listed (#1489956)\n            if ($mailbox = $this->mod_mailbox($action['target'], 'out')) {\n                $additional = [$mailbox];\n            }\n        } else {\n            $mailbox = '';\n        }\n\n        $select = rcmail_action::folder_selector([\n            'maxlength' => 100,\n            'name' => \"_action_mailbox[{$id}]\",\n            'id' => \"action_mailbox{$id}\",\n            'style' => 'display:' . (empty($action['type']) || $action['type'] == 'fileinto' ? 'inline' : 'none'),\n            'additional' => $additional,\n        ]);\n        $out .= $select->show($mailbox);\n        $out .= '</td>';\n\n        // add/del buttons\n        $add_label = rcube::Q($this->plugin->gettext('add'));\n        $del_label = rcube::Q($this->plugin->gettext('del'));\n        $out .= '<td class=\"rowbuttons\">';\n        $out .= sprintf('<a href=\"#\" id=\"actionadd%s\" title=\"%s\" onclick=\"rcmail.managesieve_actionadd(%s)\" class=\"button create add\">'\n            . '<span class=\"inner\">%s</span></a>', $id, $add_label, $id, $add_label);\n        $out .= sprintf('<a href=\"#\" id=\"actiondel%s\" title=\"%s\" onclick=\"rcmail.managesieve_actiondel(%s)\" class=\"button delete del%s\">'\n            . '<span class=\"inner\">%s</span></a>', $id, $del_label, $id, $rows_num < 2 ? ' disabled' : '', $del_label);\n        $out .= '</td>';\n\n        $out .= '</tr></table>';\n\n        $out .= $div ? \"</div>\\n\" : '';\n\n        return $out;\n    }\n\n    /**\n     * Generates a numeric identifier for a filter\n     */\n    protected function genid()\n    {\n        return preg_replace('/[^0-9]/', '', microtime(true));\n    }\n\n    /**\n     * Trims and makes safe an input value\n     *\n     * @param string|array $str        Input value\n     * @param bool         $allow_html Allow HTML tags in the value\n     * @param bool         $trim       Trim the value\n     *\n     * @return string|array\n     */\n    protected function strip_value($str, $allow_html = false, $trim = true)\n    {\n        if (is_array($str)) {\n            foreach ($str as $idx => $val) {\n                $str[$idx] = $this->strip_value($val, $allow_html, $trim);\n\n                if ($str[$idx] === '') {\n                    unset($str[$idx]);\n                }\n            }\n\n            return $str;\n        }\n\n        $str = (string) $str;\n\n        if (!$allow_html) {\n            $str = strip_tags($str);\n        }\n\n        return $trim ? trim($str) : $str;\n    }\n\n    /**\n     * Returns error class, if there's a form error \"registered\"\n     */\n    protected function error_class($id, $type, $target, $elem_prefix = '')\n    {\n        // TODO: tooltips\n        if (\n            ($type == 'test' && !empty($this->errors['tests'][$id][$target]))\n            || ($type == 'action' && !empty($this->errors['actions'][$id][$target]))\n        ) {\n            $str = $this->errors[$type == 'test' ? 'tests' : 'actions'][$id][$target];\n            $this->add_tip($elem_prefix . $id, $str, true);\n\n            return 'error';\n        }\n\n        return '';\n    }\n\n    protected function add_tip($id, $str, $error = false)\n    {\n        $class = $error ? 'sieve error' : '';\n\n        $this->tips[] = [$id, $class, $str];\n    }\n\n    protected function print_tips()\n    {\n        if (empty($this->tips)) {\n            return;\n        }\n\n        $script = rcmail_output::JS_OBJECT_NAME . '.managesieve_tip_register(' . json_encode($this->tips) . ');';\n        $this->rc->output->add_script($script, 'docready');\n    }\n\n    protected function list_input($id, $name, $value, $size = null, $hidden = false, $attrib = [])\n    {\n        $value = (array) $value;\n        $value = array_map(['rcube', 'Q'], $value);\n        $value = implode(\"\\n\", $value);\n\n        $attrib = array_merge($attrib, [\n            'data-type' => 'list',\n            'data-size' => $size,\n            'data-hidden' => $hidden ?: null,\n            'name' => '_' . $name . '[' . $id . ']',\n            'style' => 'display:none',\n        ]);\n\n        if (empty($attrib['id'])) {\n            $attrib['id'] = $name . $id;\n        }\n\n        return html::tag('textarea', $attrib, $value);\n    }\n\n    /**\n     * Validate input for date part elements\n     */\n    protected function validate_date_part($type, $value)\n    {\n        // we do simple validation of date/part format\n        switch ($type) {\n            case 'date': // yyyy-mm-dd\n                return preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $value);\n            case 'iso8601':\n                return preg_match('/^[0-9: .,ZWT+-]+$/', $value);\n            case 'std11':\n                return preg_match('/^((Sun|Mon|Tue|Wed|Thu|Fri|Sat),\\s+)?[0-9]{1,2}\\s+'\n                    . '(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+[0-9]{2,4}\\s+'\n                    . '[0-9]{2}:[0-9]{2}(:[0-9]{2})?\\s+([+-]*[0-9]{4}|[A-Z]{1,3})$/', $value);\n            case 'julian':\n                return preg_match('/^[0-9]+$/', $value);\n            case 'time': // hh:mm:ss\n                return preg_match('/^[0-9]{2}:[0-9]{2}:[0-9]{2}$/', $value);\n            case 'year':\n                return preg_match('/^[0-9]{4}$/', $value);\n            case 'month':\n                return preg_match('/^[0-9]{2}$/', $value) && $value > 0 && $value < 13;\n            case 'day':\n                return preg_match('/^[0-9]{2}$/', $value) && $value > 0 && $value < 32;\n            case 'hour':\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 24;\n            case 'minute':\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 60;\n            case 'second':\n                // According to RFC5260, seconds can be from 00 to 60\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 61;\n            case 'weekday':\n                return preg_match('/^[0-9]$/', $value) && $value < 7;\n            case 'zone':\n                return preg_match('/^[+-][0-9]{4}$/', $value);\n        }\n    }\n\n    /**\n     * Converts mailbox name from/to UTF7-IMAP from/to internal Sieve encoding\n     * with delimiter replacement.\n     *\n     * @param string $mailbox Mailbox name\n     * @param string $mode    Conversion direction ('in'|'out')\n     *\n     * @return string Mailbox name\n     */\n    protected function mod_mailbox($mailbox, $mode = 'out')\n    {\n        $delimiter = $_SESSION['imap_delimiter'];\n        $replace_delimiter = $this->rc->config->get('managesieve_replace_delimiter');\n        $mbox_encoding = $this->rc->config->get('managesieve_mbox_encoding', 'UTF7-IMAP');\n\n        if ($mode == 'out') {\n            $mailbox = rcube_charset::convert($mailbox, $mbox_encoding, 'UTF7-IMAP');\n            if ($replace_delimiter && $replace_delimiter != $delimiter) {\n                $mailbox = str_replace($replace_delimiter, $delimiter, $mailbox);\n            }\n        } else {\n            $mailbox = rcube_charset::convert($mailbox, 'UTF7-IMAP', $mbox_encoding);\n            if ($replace_delimiter && $replace_delimiter != $delimiter) {\n                $mailbox = str_replace($delimiter, $replace_delimiter, $mailbox);\n            }\n        }\n\n        return $mailbox;\n    }\n\n    /**\n     * List sieve scripts\n     *\n     * @return array|false Scripts list\n     */\n    public function list_scripts()\n    {\n        if ($this->list !== null) {\n            return $this->list;\n        }\n\n        $this->list = $this->sieve->get_scripts();\n\n        // Handle active script(s) and list of scripts according to Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            // Skip protected names\n            foreach ((array) $this->list as $idx => $name) {\n                $_name = strtoupper($name);\n                if ($_name == 'MASTER') {\n                    $master_script = $name;\n                } elseif ($_name == 'MANAGEMENT') {\n                    $management_script = $name;\n                } elseif ($_name == 'USER') {\n                    $user_script = $name;\n                } else {\n                    continue;\n                }\n\n                unset($this->list[$idx]);\n            }\n\n            // get active script(s), read USER script\n            if (!empty($user_script)) {\n                $extension = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n                $filename_regex = '/' . preg_quote($extension, '/') . '$/';\n                $_SESSION['managesieve_user_script'] = $user_script;\n\n                $this->sieve->load($user_script);\n\n                if (!empty($this->sieve->script)) {\n                    foreach ($this->sieve->script->as_array() as $rules) {\n                        foreach ($rules['actions'] as $action) {\n                            if ($action['type'] == 'include' && empty($action['global'])) {\n                                $name = preg_replace($filename_regex, '', $action['target']);\n                                // make sure the script exist\n                                if (in_array($name, $this->list)) {\n                                    $this->active[] = $name;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // create USER script if it doesn't exist\n            else {\n                $content = \"# USER Management Script\\n\"\n                    . \"#\\n\"\n                    . \"# This script includes the various active sieve scripts\\n\"\n                    . \"# it is AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY!\\n\"\n                    . \"#\\n\"\n                    . \"# For more information, see http://wiki.kolab.org/KEP:14#USER\\n\"\n                    . \"#\\n\";\n\n                if ($this->sieve->save_script('USER', $content)) {\n                    $_SESSION['managesieve_user_script'] = 'USER';\n                    if (empty($this->master_file)) {\n                        $this->sieve->activate('USER');\n                    }\n                }\n            }\n        } elseif (!empty($this->list)) {\n            // Get active script name\n            if ($active = $this->sieve->get_active()) {\n                $this->active = [$active];\n            }\n\n            // Hide scripts from config\n            $exceptions = $this->rc->config->get('managesieve_filename_exceptions');\n            if (!empty($exceptions)) {\n                $this->list = array_diff($this->list, (array) $exceptions);\n            }\n        }\n\n        // When no script listing allowed limit the list to the defined script\n        if (in_array('list_sets', $this->disabled_actions)) {\n            $script_name = $this->rc->config->get('managesieve_script_name', 'roundcube');\n            $this->list = array_intersect($this->list, [$script_name]);\n            $this->active = null;\n            if (in_array($script_name, $this->list)) {\n                // Because its the only allowed script make sure its active\n                $this->activate_script($script_name);\n            }\n        }\n\n        // reindex\n        if (!empty($this->list)) {\n            $this->list = array_values($this->list);\n        }\n\n        return $this->list;\n    }\n\n    /**\n     * Removes sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function remove_script($name)\n    {\n        if ($this->is_protected_script($name)) {\n            return false;\n        }\n\n        $result = $this->sieve->remove($name);\n\n        // Kolab's KEP:14\n        if ($result && $this->rc->config->get('managesieve_kolab_master')) {\n            $this->deactivate_script($name);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Activates sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function activate_script($name)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $extension = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n            $user_script = $_SESSION['managesieve_user_script'];\n            $result = false;\n\n            // if the script is not active...\n            if ($user_script && array_search($name, (array) $this->active) === false) {\n                // ...rewrite USER file adding appropriate include command\n                if ($this->sieve->load($user_script)) {\n                    $script = $this->sieve->script->as_array();\n                    $list = [];\n                    $regexp = '/' . preg_quote($extension, '/') . '$/';\n\n                    // Create new include entry\n                    $rule = [\n                        'actions' => [\n                            [\n                                'target' => $name . $extension,\n                                'type' => 'include',\n                                'personal' => true,\n                            ],\n                        ],\n                    ];\n\n                    // get all active scripts for sorting\n                    foreach ($script as $rid => $rules) {\n                        foreach ($rules['actions'] as $action) {\n                            if ($action['type'] == 'include' && empty($action['global'])) {\n                                $target = $extension ? preg_replace($regexp, '', $action['target']) : $action['target'];\n                                $list[] = $target;\n                            }\n                        }\n                    }\n                    $list[] = $name;\n\n                    // Sort and find current script position\n                    asort($list, \\SORT_LOCALE_STRING);\n                    $list = array_values($list);\n                    $index = array_search($name, $list);\n\n                    // add rule at the end of the script\n                    if ($index === false || $index == count($list) - 1) {\n                        $this->sieve->script->add_rule($rule);\n                    }\n                    // add rule at index position\n                    else {\n                        $script2 = [];\n                        foreach ($script as $rid => $rules) {\n                            if ($rid == $index) {\n                                $script2[] = $rule;\n                            }\n                            $script2[] = $rules;\n                        }\n                        $this->sieve->script->content = $script2;\n                    }\n\n                    $result = $this->sieve->save();\n                    if ($result) {\n                        $this->active[] = $name;\n                    }\n                }\n            }\n        } else {\n            $result = $this->sieve->activate($name);\n            if ($result) {\n                $this->active = [$name];\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Deactivates sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function deactivate_script($name)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $extension = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n            $user_script = $_SESSION['managesieve_user_script'];\n            $result = false;\n\n            // if the script is active...\n            if ($user_script && ($key = array_search($name, $this->active)) !== false) {\n                // ...rewrite USER file removing appropriate include command\n                if ($this->sieve->load($user_script)) {\n                    $script = $this->sieve->script->as_array();\n                    $name .= $extension;\n                    $rid = 0;\n\n                    foreach ($script as $rules) {\n                        foreach ($rules['actions'] as $action) {\n                            if ($action['type'] == 'include' && empty($action['global'])\n                                && $action['target'] == $name\n                            ) {\n                                break 2;\n                            }\n                        }\n                        $rid++;\n                    }\n\n                    // Entry found\n                    if ($rid < count($script)) {\n                        $this->sieve->script->delete_rule($rid);\n                        $result = $this->sieve->save();\n                        if ($result) {\n                            unset($this->active[$key]);\n                        }\n                    }\n                }\n            }\n        } else {\n            $result = $this->sieve->deactivate();\n            if ($result) {\n                $this->active = [];\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Saves current script (adding some variables)\n     */\n    public function save_script($name = null)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $this->sieve->script->set_var('EDITOR', self::PROGNAME);\n            $this->sieve->script->set_var('EDITOR_VERSION', self::VERSION);\n        }\n\n        return $this->sieve->save($name);\n    }\n\n    /**\n     * Check if the script is protected\n     */\n    protected function is_protected_script($name)\n    {\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            if (in_array(strtoupper($name), ['MASTER', 'MANAGEMENT', 'USER'])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns list of rules from the current script\n     *\n     * @return array List of rules\n     */\n    public function list_rules()\n    {\n        $result = [];\n        $i = 1;\n\n        foreach ($this->script as $idx => $filter) {\n            if (empty($filter['actions'])) {\n                continue;\n            }\n            $fname = !empty($filter['name']) ? $filter['name'] : \"#{$i}\";\n            $result[] = [\n                'id' => $idx,\n                'name' => $fname,\n                'class' => !empty($filter['disabled']) ? 'disabled' : '',\n            ];\n            $i++;\n        }\n\n        return $result;\n    }\n\n    /**\n     * Initializes internal script data\n     */\n    protected function init_script()\n    {\n        if (!$this->sieve->script) {\n            return;\n        }\n\n        $this->script = $this->sieve->script->as_array();\n\n        $headers = [];\n        $exceptions = ['date', 'currentdate', 'size', 'spamtest', 'body'];\n\n        // find common headers used in script, will be added to the list\n        // of available (predefined) headers (#1489271)\n        foreach ($this->script as $rule) {\n            foreach ((array) ($rule['tests'] ?? []) as $test) {\n                if ($test['test'] == 'header') {\n                    foreach ((array) $test['arg1'] as $header) {\n                        $lc_header = strtolower($header);\n\n                        // skip special names to not confuse UI\n                        if (in_array($lc_header, $exceptions)) {\n                            continue;\n                        }\n\n                        if (!isset($this->headers[$lc_header]) && !isset($headers[$lc_header])) {\n                            $headers[$lc_header] = $header;\n                        }\n                    }\n                }\n            }\n        }\n\n        ksort($headers);\n\n        $this->headers += $headers;\n    }\n\n    /**\n     * Get all e-mail addresses of the user\n     */\n    protected function user_emails()\n    {\n        $addresses = $this->rc->user->list_emails();\n\n        foreach ($addresses as $idx => $email) {\n            $addresses[$idx] = $email['email'];\n        }\n\n        $addresses = array_unique($addresses);\n        sort($addresses);\n\n        return $addresses;\n    }\n\n    /**\n     * Convert configured default headers into internal format\n     */\n    protected function get_default_headers()\n    {\n        $default = ['Subject', 'From', 'To'];\n        $headers = (array) $this->rc->config->get('managesieve_default_headers', $default);\n\n        if (empty($headers) || $headers === ['']) {\n            $headers = $default;\n        }\n\n        $keys = array_map('strtolower', $headers);\n        $headers = array_combine($keys, $headers);\n\n        // make sure there's no Date header\n        unset($headers['date']);\n\n        return $headers;\n    }\n\n    /**\n     * Match type selector\n     */\n    protected function match_type_selector($name, $id, $test, $rule = null, $mode = 'all')\n    {\n        // matching type select (operator)\n        $select_op = new html_select([\n            'name' => \"_{$name}[{$id}]\",\n            'id' => \"{$name}{$id}\",\n            'style' => 'display:' . (!in_array($rule, ['size', 'duplicate', 'spamtest']) ? 'inline' : 'none'),\n            'class' => 'operator_selector col-6 custom-select',\n            'onchange' => \"{$name}_select(this, '{$id}')\",\n        ]);\n\n        $select_op->add(rcube::Q($this->plugin->gettext('filtercontains')), 'contains');\n        if ($mode == 'all') {\n            $select_op->add(rcube::Q($this->plugin->gettext('filternotcontains')), 'notcontains');\n        }\n        $select_op->add(rcube::Q($this->plugin->gettext('filteris')), 'is');\n        if ($mode == 'all') {\n            $select_op->add(rcube::Q($this->plugin->gettext('filterisnot')), 'notis');\n            $select_op->add(rcube::Q($this->plugin->gettext('filterexists')), 'exists');\n            $select_op->add(rcube::Q($this->plugin->gettext('filternotexists')), 'notexists');\n        }\n        $select_op->add(rcube::Q($this->plugin->gettext('filtermatches')), 'matches');\n        if ($mode == 'all') {\n            $select_op->add(rcube::Q($this->plugin->gettext('filternotmatches')), 'notmatches');\n        }\n        if (in_array('regex', $this->exts)) {\n            $select_op->add(rcube::Q($this->plugin->gettext('filterregex')), 'regex');\n            if ($mode == 'all') {\n                $select_op->add(rcube::Q($this->plugin->gettext('filternotregex')), 'notregex');\n            }\n        }\n        if ($mode == 'all' && in_array('relational', $this->exts)) {\n            $select_op->add(rcube::Q($this->plugin->gettext('countisgreaterthan')), 'count-gt');\n            $select_op->add(rcube::Q($this->plugin->gettext('countisgreaterthanequal')), 'count-ge');\n            $select_op->add(rcube::Q($this->plugin->gettext('countislessthan')), 'count-lt');\n            $select_op->add(rcube::Q($this->plugin->gettext('countislessthanequal')), 'count-le');\n            $select_op->add(rcube::Q($this->plugin->gettext('countequals')), 'count-eq');\n            $select_op->add(rcube::Q($this->plugin->gettext('countnotequals')), 'count-ne');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueisgreaterthan')), 'value-gt');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueisgreaterthanequal')), 'value-ge');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueislessthan')), 'value-lt');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueislessthanequal')), 'value-le');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueequals')), 'value-eq');\n            $select_op->add(rcube::Q($this->plugin->gettext('valuenotequals')), 'value-ne');\n        }\n\n        return $select_op->show($test);\n    }\n\n    protected function comparator_selector($comparator, $name, $id)\n    {\n        $select_comp = new html_select([\n            'name' => \"_{$name}[{$id}]\",\n            'id' => \"{$name}_op{$id}\",\n            'class' => 'custom-select',\n        ]);\n        $select_comp->add(rcube::Q($this->plugin->gettext('default')), '');\n        $select_comp->add(rcube::Q($this->plugin->gettext('octet')), 'i;octet');\n        $select_comp->add(rcube::Q($this->plugin->gettext('asciicasemap')), 'i;ascii-casemap');\n        if (in_array('comparator-i;ascii-numeric', $this->exts)) {\n            $select_comp->add(rcube::Q($this->plugin->gettext('asciinumeric')), 'i;ascii-numeric');\n        }\n\n        return $select_comp->show($comparator);\n    }\n\n    /**\n     * Merge a rule into the script\n     */\n    protected function merge_rule($rule, $existing, &$script_name = null)\n    {\n        // if script does not exist create a new one\n        if ($script_name === null || $script_name === false) {\n            $script_name = $this->create_default_script();\n            $this->sieve->load($script_name);\n            $this->init_script();\n        }\n\n        if (!$this->sieve->script) {\n            return false;\n        }\n\n        $script_active = in_array($script_name, $this->active);\n        $rule_active = empty($rule['disabled']);\n        $rule_index = 0;\n        $activate_script = false;\n\n        // If the script is not active, but the rule is,\n        // put the rule in an active script if there is one\n        if (!$script_active && $rule_active && !empty($this->active)) {\n            // Remove the rule from current (inactive) script\n            if (isset($existing['idx'])) {\n                unset($this->script[$existing['idx']]);\n                $this->sieve->script->content = $this->script;\n                $this->save_script($script_name);\n            }\n\n            // Load and init the active script, add the rule there\n            $this->sieve->load($script_name = $this->active[0]);\n            $this->init_script();\n            array_unshift($this->script, $rule);\n        }\n        // update original forward rule/script\n        else {\n            // re-order rules if needed\n            if (isset($rule['after']) && $rule['after'] !== '') {\n                // unset the original rule\n                if (isset($existing['idx'])) {\n                    $this->script[$existing['idx']] = null;\n                }\n\n                // add at target position\n                if ($rule['after'] >= count($this->script) - 1) {\n                    $this->script[] = $rule;\n                    $this->script = array_values(array_filter($this->script));\n                    $rule_index = count($this->script);\n                } else {\n                    $script = [];\n\n                    foreach ($this->script as $idx => $r) {\n                        if ($r) {\n                            $script[] = $r;\n                        }\n\n                        if ($idx == $rule['after']) {\n                            $script[] = $rule;\n                            $rule_index = count($script);\n                        }\n                    }\n\n                    $this->script = $script;\n                }\n            }\n            // rule exists, update it \"in place\"\n            elseif (isset($existing['idx'])) {\n                $this->script[$existing['idx']] = $rule;\n                $rule_index = $existing['idx'];\n            }\n            // otherwise put the rule on top\n            else {\n                array_unshift($this->script, $rule);\n                $rule_index = 0;\n            }\n\n            // if the script is not active, but the rule is, we need to de-activate\n            // all rules except the forward rule\n            if (!$script_active && $rule_active) {\n                $activate_script = true;\n                foreach ($this->script as $idx => $r) {\n                    if ($idx !== $rule_index) {\n                        $this->script[$idx]['disabled'] = true;\n                    }\n                }\n            }\n        }\n\n        $this->sieve->script->content = $this->script;\n\n        // save the script\n        $saved = $this->save_script($script_name);\n\n        // activate the script\n        if ($saved && $activate_script) {\n            $this->activate_script($script_name);\n        }\n\n        return $saved;\n    }\n\n    /**\n     * Create default script\n     */\n    protected function create_default_script()\n    {\n        // if script not exists build default script contents\n        $script_file = $this->rc->config->get('managesieve_default');\n        $script_name = $this->rc->config->get('managesieve_script_name');\n        $kolab_master = $this->rc->config->get('managesieve_kolab_master');\n        $content = '';\n\n        if (empty($script_name)) {\n            $script_name = 'roundcube';\n        }\n\n        if ($script_file && !$kolab_master && is_readable($script_file) && !is_dir($script_file)) {\n            $content = file_get_contents($script_file);\n        }\n\n        // add script and set it active\n        if ($this->sieve->save_script($script_name, $content)) {\n            $this->activate_script($script_name);\n            $this->list[] = $script_name;\n        }\n\n        return $script_name;\n    }\n\n    /**\n     * Read email address input, parse it and check validity\n     */\n    protected function action_email_input($i, $field)\n    {\n        // According to RFC5230 the :from string must specify a valid [RFC2822] mailbox-list\n        // we'll try to extract addresses and validate them separately\n        $from = rcube_mime::decode_address_list($this->form['actions'][$i][$field], null, true, RCUBE_CHARSET);\n        foreach ($from as $idx => $addr) {\n            if (empty($addr['mailto']) || !rcube_utils::check_email($addr['mailto'])) {\n                $this->errors['actions'][$i][$field] = $this->plugin->gettext('noemailwarning');\n                break;\n            }\n\n            $from[$idx] = format_email_recipient($addr['mailto'], $addr['name']);\n        }\n\n        // Only one address is allowed (at least on cyrus imap)\n        if (count($from) > 1) {\n            $this->errors['actions'][$i][$field] = $this->plugin->gettext('noemailwarning');\n        }\n\n        // Then we convert it back to RFC2822 format\n        if (empty($this->errors['actions'][$i][$field]) && !empty($from)) {\n            $this->form['actions'][$i][$field] = Mail_mimePart::encodeHeader(\n                'From', implode(', ', $from), RCUBE_CHARSET, 'base64', '');\n\n            return true;\n        }\n\n        return false;\n    }\n}\n", "patch": "@@ -397,6 +397,8 @@ function actions()\n                 }\n             }\n             else if ($action == 'setget') {\n+                $this->rc->request_security_check(rcube_utils::INPUT_GET);\n+\n                 $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_GPC, true);\n                 $script      = $this->sieve->get_script($script_name);\n ", "file_path": "files/2016_8\\18", "file_language": "php", "file_name": "plugins/managesieve/lib/Roundcube/rcube_sieve_engine.php", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/699af1e5206ed9114322adaa3c25c1c969640a53/plugins/managesieve/managesieve.js", "code": "/**\n * (Manage)Sieve Filters plugin\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (c) 2012-2014, The Roundcube Dev Team\n *\n * The JavaScript code in this page is free software: you can redistribute it\n * and/or modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n */\n\nif (window.rcmail) {\n  rcmail.addEventListener('init', function(evt) {\n    // add managesieve-create command to message_commands array,\n    // so it's state will be updated on message selection/unselection\n    if (rcmail.env.task == 'mail') {\n      if (rcmail.env.action != 'show')\n        rcmail.env.message_commands.push('managesieve-create');\n      else\n        rcmail.enable_command('managesieve-create', true);\n    }\n\n    if (rcmail.env.task == 'mail' || rcmail.env.action.startsWith('plugin.managesieve')) {\n      // Create layer for form tips\n      if (!rcmail.env.framed) {\n        rcmail.env.ms_tip_layer = $('<div id=\"managesieve-tip\" class=\"popupmenu\"></div>');\n        rcmail.env.ms_tip_layer.appendTo(document.body);\n      }\n    }\n\n    // register commands\n    rcmail.register_command('plugin.managesieve-save', function() { rcmail.managesieve_save() });\n    rcmail.register_command('plugin.managesieve-act', function() { rcmail.managesieve_act() });\n    rcmail.register_command('plugin.managesieve-add', function() { rcmail.managesieve_add() });\n    rcmail.register_command('plugin.managesieve-del', function() { rcmail.managesieve_del() });\n    rcmail.register_command('plugin.managesieve-move', function() { rcmail.managesieve_move() });\n    rcmail.register_command('plugin.managesieve-setadd', function() { rcmail.managesieve_setadd() });\n    rcmail.register_command('plugin.managesieve-setdel', function() { rcmail.managesieve_setdel() });\n    rcmail.register_command('plugin.managesieve-setact', function() { rcmail.managesieve_setact() });\n    rcmail.register_command('plugin.managesieve-setget', function() { rcmail.managesieve_setget() });\n\n    if (rcmail.env.action.startsWith('plugin.managesieve')) {\n      if (rcmail.gui_objects.sieveform) {\n        rcmail.enable_command('plugin.managesieve-save', true);\n        sieve_form_init();\n      }\n      else {\n        rcmail.enable_command('plugin.managesieve-add', 'plugin.managesieve-setadd', !rcmail.env.sieveconnerror);\n      }\n\n      var setcnt, set = rcmail.env.currentset;\n\n      if (rcmail.gui_objects.filterslist) {\n        rcmail.filters_list = new rcube_list_widget(rcmail.gui_objects.filterslist,\n          {multiselect:false, draggable:true, keyboard:true});\n\n        rcmail.filters_list\n          .addEventListener('select', function(e) { rcmail.managesieve_select(e); })\n          .addEventListener('dragstart', function(e) { rcmail.managesieve_dragstart(e); })\n          .addEventListener('dragend', function(e) { rcmail.managesieve_dragend(e); })\n          .addEventListener('initrow', function(row) {\n            row.obj.onmouseover = function() { rcmail.managesieve_focus_filter(row); };\n            row.obj.onmouseout = function() { rcmail.managesieve_unfocus_filter(row); };\n          })\n          .init();\n      }\n\n      if (rcmail.gui_objects.filtersetslist) {\n        rcmail.filtersets_list = new rcube_list_widget(rcmail.gui_objects.filtersetslist,\n          {multiselect:false, draggable:false, keyboard:true});\n\n        rcmail.filtersets_list.init().focus();\n\n        if (set != null) {\n          set = rcmail.managesieve_setid(set);\n          rcmail.filtersets_list.select(set);\n        }\n\n        // attach select event after initial record was selected\n        rcmail.filtersets_list.addEventListener('select', function(e) { rcmail.managesieve_setselect(e); });\n\n        setcnt = rcmail.filtersets_list.rowcount;\n        rcmail.enable_command('plugin.managesieve-set', true);\n        rcmail.enable_command('plugin.managesieve-setact', 'plugin.managesieve-setget', setcnt);\n        rcmail.enable_command('plugin.managesieve-setdel', setcnt > 1);\n\n        // Fix dragging filters over sets list\n        $('tr', rcmail.gui_objects.filtersetslist).each(function (i, e) { rcmail.managesieve_fixdragend(e); });\n      }\n    }\n\n    if (rcmail.gui_objects.sieveform && rcmail.env.rule_disabled)\n      $('#disabled').attr('checked', true);\n  });\n};\n\n/*********************************************************/\n/*********       Managesieve UI methods          *********/\n/*********************************************************/\n\nrcube_webmail.prototype.managesieve_add = function()\n{\n  this.load_managesieveframe();\n  this.filters_list.clear_selection();\n};\n\nrcube_webmail.prototype.managesieve_del = function()\n{\n  var id = this.filters_list.get_single_selection();\n  if (confirm(this.get_label('managesieve.filterdeleteconfirm'))) {\n    var lock = this.set_busy(true, 'loading');\n    this.http_post('plugin.managesieve-action',\n      '_act=delete&_fid='+this.filters_list.rows[id].uid, lock);\n  }\n};\n\nrcube_webmail.prototype.managesieve_act = function()\n{\n  var id = this.filters_list.get_single_selection(),\n    lock = this.set_busy(true, 'loading');\n\n  this.http_post('plugin.managesieve-action',\n    '_act=act&_fid='+this.filters_list.rows[id].uid, lock);\n};\n\n// Filter selection\nrcube_webmail.prototype.managesieve_select = function(list)\n{\n  var id = list.get_single_selection();\n  if (id != null)\n    this.load_managesieveframe(list.rows[id].uid);\n};\n\n// Set selection\nrcube_webmail.prototype.managesieve_setselect = function(list)\n{\n  this.show_contentframe(false);\n  this.filters_list.clear(true);\n  this.enable_command('plugin.managesieve-setdel', list.rowcount > 1);\n  this.enable_command('plugin.managesieve-setact', 'plugin.managesieve-setget', true);\n\n  var id = list.get_single_selection();\n  if (id != null)\n    this.managesieve_list(this.env.filtersets[id]);\n};\n\nrcube_webmail.prototype.managesieve_rowid = function(id)\n{\n  var i, rows = this.filters_list.rows;\n\n  for (i in rows)\n    if (rows[i] != null && rows[i].uid == id)\n      return i;\n};\n\n// Returns set's identifier\nrcube_webmail.prototype.managesieve_setid = function(name)\n{\n  for (var i in this.env.filtersets)\n    if (this.env.filtersets[i] == name)\n      return i;\n};\n\n// Filters listing request\nrcube_webmail.prototype.managesieve_list = function(script)\n{\n  var lock = this.set_busy(true, 'loading');\n\n  this.http_post('plugin.managesieve-action', '_act=list&_set='+urlencode(script), lock);\n};\n\n// Script download request\nrcube_webmail.prototype.managesieve_setget = function()\n{\n  var id = this.filtersets_list.get_single_selection(),\n    script = this.env.filtersets[id];\n\n  this.goto_url('plugin.managesieve-action', {_act: 'setget', _set: script}, false, true);\n};\n\n// Set activate/deactivate request\nrcube_webmail.prototype.managesieve_setact = function()\n{\n  var id = this.filtersets_list.get_single_selection(),\n   lock = this.set_busy(true, 'loading'),\n    script = this.env.filtersets[id],\n    action = $('#rcmrow'+id).hasClass('disabled') ? 'setact' : 'deact';\n\n  this.http_post('plugin.managesieve-action', '_act='+action+'&_set='+urlencode(script), lock);\n};\n\n// Set delete request\nrcube_webmail.prototype.managesieve_setdel = function()\n{\n  if (!confirm(this.get_label('managesieve.setdeleteconfirm')))\n    return false;\n\n  var id = this.filtersets_list.get_single_selection(),\n    lock = this.set_busy(true, 'loading'),\n    script = this.env.filtersets[id];\n\n  this.http_post('plugin.managesieve-action', '_act=setdel&_set='+urlencode(script), lock);\n};\n\n// Set add request\nrcube_webmail.prototype.managesieve_setadd = function()\n{\n  this.filters_list.clear_selection();\n  this.enable_command('plugin.managesieve-act', 'plugin.managesieve-del', false);\n\n  if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n    var lock = this.set_busy(true, 'loading');\n    target = window.frames[this.env.contentframe];\n    target.location.href = this.env.comm_path+'&_action=plugin.managesieve-action&_framed=1&_newset=1&_unlock='+lock;\n  }\n};\n\nrcube_webmail.prototype.managesieve_updatelist = function(action, o)\n{\n  this.set_busy(true);\n\n  switch (action) {\n    // Delete filter row\n    case 'del':\n      var id = o.id, list = this.filters_list;\n\n      list.remove_row(this.managesieve_rowid(o.id));\n      list.clear_selection();\n      this.show_contentframe(false);\n      this.enable_command('plugin.managesieve-del', 'plugin.managesieve-act', false);\n\n      // filter identifiers changed, fix the list\n      $('tr', this.filters_list.list).each(function() {\n        // remove hidden (deleted) rows\n        if (this.style.display == 'none') {\n          $(this).detach();\n          return;\n        }\n\n        var rowid = this.id.substr(6);\n\n        // remove all attached events\n        $(this).unbind();\n\n        // update row id\n        if (rowid > id) {\n          this.uid = rowid - 1;\n          $(this).attr('id', 'rcmrow' + this.uid);\n        }\n      });\n      list.init();\n\n      break;\n\n    // Update filter row\n    case 'update':\n      var i, row = $('#rcmrow'+this.managesieve_rowid(o.id));\n\n      if (o.name)\n        $('td', row).text(o.name);\n      if (o.disabled)\n        row.addClass('disabled');\n      else\n        row.removeClass('disabled');\n\n      $('#disabled', $('iframe').contents()).prop('checked', o.disabled);\n\n      break;\n\n    // Add filter row to the list\n    case 'add':\n      var list = this.filters_list,\n        row = $('<tr><td class=\"name\"></td></tr>');\n\n      $('td', row).text(o.name);\n      row.attr('id', 'rcmrow'+o.id);\n      if (o.disabled)\n        row.addClass('disabled');\n\n      list.insert_row(row.get(0));\n      list.highlight_row(o.id);\n\n      this.enable_command('plugin.managesieve-del', 'plugin.managesieve-act', true);\n\n      break;\n\n    // Filling rules list\n    case 'list':\n      var i, tr, td, el, list = this.filters_list;\n\n      if (o.clear)\n        list.clear();\n\n      for (i in o.list) {\n        el = o.list[i];\n        tr = document.createElement('TR');\n        td = document.createElement('TD');\n\n        $(td).text(el.name);\n        td.className = 'name';\n        tr.id = 'rcmrow' + el.id;\n        if (el['class'])\n            tr.className = el['class'];\n        tr.appendChild(td);\n\n        list.insert_row(tr);\n      }\n\n      if (o.set)\n        list.highlight_row(o.set);\n      else\n        this.enable_command('plugin.managesieve-del', 'plugin.managesieve-act', false);\n\n      break;\n\n    // Sactivate/deactivate set\n    case 'setact':\n      var id = this.managesieve_setid(o.name), row = $('#rcmrow' + id);\n      if (o.active) {\n        if (o.all)\n          $('tr', this.gui_objects.filtersetslist).addClass('disabled');\n        row.removeClass('disabled');\n      }\n      else\n        row.addClass('disabled');\n\n      break;\n\n    // Delete set row\n    case 'setdel':\n      var id = this.managesieve_setid(o.name);\n\n      this.filtersets_list.remove_row(id);\n      this.filters_list.clear();\n      this.show_contentframe(false);\n      this.enable_command('plugin.managesieve-setdel', 'plugin.managesieve-setact', 'plugin.managesieve-setget', false);\n\n      delete this.env.filtersets[id];\n\n      break;\n\n    // Create set row\n    case 'setadd':\n      var id = 'S' + new Date().getTime(),\n        list = this.filtersets_list,\n        row = $('<tr class=\"disabled\"><td class=\"name\"></td></tr>');\n\n      $('td', row).text(o.name);\n      row.attr('id', 'rcmrow'+id);\n\n      this.env.filtersets[id] = o.name;\n      list.insert_row(row.get(0));\n\n      // move row into its position on the list\n      if (o.index != list.rowcount-1) {\n        row.detach();\n        var elem = $('tr:visible', list.list).get(o.index);\n        row.insertBefore(elem);\n      }\n\n      list.select(id);\n\n      // Fix dragging filters over sets list\n      this.managesieve_fixdragend(row);\n\n      break;\n  }\n\n  this.set_busy(false);\n};\n\n// load filter frame\nrcube_webmail.prototype.load_managesieveframe = function(id)\n{\n  var has_id = typeof(id) != 'undefined' && id != null;\n  this.enable_command('plugin.managesieve-act', 'plugin.managesieve-del', has_id);\n\n  if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n    target = window.frames[this.env.contentframe];\n    var msgid = this.set_busy(true, 'loading');\n    target.location.href = this.env.comm_path+'&_action=plugin.managesieve-action&_framed=1'\n      +(has_id ? '&_fid='+id : '')+'&_unlock='+msgid;\n  }\n};\n\n// load filter frame\nrcube_webmail.prototype.managesieve_dragstart = function(list)\n{\n  var id = this.filters_list.get_single_selection();\n\n  this.drag_active = true;\n  this.drag_filter = id;\n};\n\nrcube_webmail.prototype.managesieve_dragend = function(e)\n{\n  if (this.drag_active) {\n    if (this.drag_filter_target) {\n      var lock = this.set_busy(true, 'loading');\n\n      this.show_contentframe(false);\n      this.http_post('plugin.managesieve-action', '_act=move&_fid='+this.drag_filter\n        +'&_to='+this.drag_filter_target, lock);\n    }\n    this.drag_active = false;\n  }\n};\n\n// Fixes filters dragging over sets list\n// @TODO: to be removed after implementing copying filters\nrcube_webmail.prototype.managesieve_fixdragend = function(elem)\n{\n  var p = this;\n  $(elem).bind('mouseup' + ((bw.iphone || bw.ipad) ? ' touchend' : ''), function(e) {\n    if (p.drag_active)\n      p.filters_list.drag_mouse_up(e);\n  });\n};\n\nrcube_webmail.prototype.managesieve_focus_filter = function(row)\n{\n  var id = row.id.replace(/^rcmrow/, '');\n  if (this.drag_active && id != this.drag_filter) {\n    this.drag_filter_target = id;\n    $(row.obj).addClass(id < this.drag_filter ? 'filtermoveup' : 'filtermovedown');\n  }\n};\n\nrcube_webmail.prototype.managesieve_unfocus_filter = function(row)\n{\n  if (this.drag_active) {\n    $(row.obj).removeClass('filtermoveup filtermovedown');\n    this.drag_filter_target = null;\n  }\n};\n\n/*********************************************************/\n/*********          Filter Form methods          *********/\n/*********************************************************/\n\n// Form submition\nrcube_webmail.prototype.managesieve_save = function()\n{\n  if (this.env.action == 'plugin.managesieve-vacation') {\n    var data = $(this.gui_objects.sieveform).serialize();\n    this.http_post('plugin.managesieve-vacation', data, this.display_message(this.get_label('managesieve.vacation.saving'), 'loading'));\n    return;\n  }\n\n  if (parent.rcmail && parent.rcmail.filters_list && this.gui_objects.sieveform.name != 'filtersetform') {\n    var id = parent.rcmail.filters_list.get_single_selection();\n    if (id != null)\n      this.gui_objects.sieveform.elements['_fid'].value = parent.rcmail.filters_list.rows[id].uid;\n  }\n  this.gui_objects.sieveform.submit();\n};\n\n// Operations on filters form\nrcube_webmail.prototype.managesieve_ruleadd = function(id)\n{\n  this.http_post('plugin.managesieve-action', '_act=ruleadd&_rid='+id);\n};\n\nrcube_webmail.prototype.managesieve_rulefill = function(content, id, after)\n{\n  if (content != '') {\n    // create new element\n    var div = document.getElementById('rules'),\n      row = document.createElement('div');\n\n    this.managesieve_insertrow(div, row, after);\n    // fill row after inserting (for IE)\n    row.setAttribute('id', 'rulerow'+id);\n    row.className = 'rulerow';\n    row.innerHTML = content;\n\n    // initialize smart list inputs\n    $('textarea[data-type=\"list\"]', row).each(function() {\n      smart_field_init(this);\n    });\n\n    this.managesieve_formbuttons(div);\n  }\n};\n\nrcube_webmail.prototype.managesieve_ruledel = function(id)\n{\n  if ($('#ruledel'+id).hasClass('disabled'))\n    return;\n\n  if (confirm(this.get_label('managesieve.ruledeleteconfirm'))) {\n    var row = document.getElementById('rulerow'+id);\n    row.parentNode.removeChild(row);\n    this.managesieve_formbuttons(document.getElementById('rules'));\n  }\n};\n\nrcube_webmail.prototype.managesieve_actionadd = function(id)\n{\n  this.http_post('plugin.managesieve-action', '_act=actionadd&_aid='+id);\n};\n\nrcube_webmail.prototype.managesieve_actionfill = function(content, id, after)\n{\n  if (content != '') {\n    var div = document.getElementById('actions'),\n      row = document.createElement('div');\n\n    this.managesieve_insertrow(div, row, after);\n    // fill row after inserting (for IE)\n    row.className = 'actionrow';\n    row.setAttribute('id', 'actionrow'+id);\n    row.innerHTML = content;\n\n    // initialize smart list inputs\n    $('textarea[data-type=\"list\"]', row).each(function() {\n      smart_field_init(this);\n    });\n\n    this.managesieve_formbuttons(div);\n  }\n};\n\nrcube_webmail.prototype.managesieve_actiondel = function(id)\n{\n  if ($('#actiondel'+id).hasClass('disabled'))\n    return;\n\n  if (confirm(this.get_label('managesieve.actiondeleteconfirm'))) {\n    var row = document.getElementById('actionrow'+id);\n    row.parentNode.removeChild(row);\n    this.managesieve_formbuttons(document.getElementById('actions'));\n  }\n};\n\n// insert rule/action row in specified place on the list\nrcube_webmail.prototype.managesieve_insertrow = function(div, row, after)\n{\n  for (var i=0; i<div.childNodes.length; i++) {\n    if (div.childNodes[i].id == (div.id == 'rules' ? 'rulerow' : 'actionrow')  + after)\n      break;\n  }\n\n  if (div.childNodes[i+1])\n    div.insertBefore(row, div.childNodes[i+1]);\n  else\n    div.appendChild(row);\n};\n\n// update Delete buttons status\nrcube_webmail.prototype.managesieve_formbuttons = function(div)\n{\n  var i, button, buttons = [];\n\n  // count and get buttons\n  for (i=0; i<div.childNodes.length; i++) {\n    if (div.id == 'rules' && div.childNodes[i].id) {\n      if (/rulerow/.test(div.childNodes[i].id))\n        buttons.push('ruledel' + div.childNodes[i].id.replace(/rulerow/, ''));\n    }\n    else if (div.childNodes[i].id) {\n      if (/actionrow/.test(div.childNodes[i].id))\n        buttons.push( 'actiondel' + div.childNodes[i].id.replace(/actionrow/, ''));\n    }\n  }\n\n  for (i=0; i<buttons.length; i++) {\n    button = document.getElementById(buttons[i]);\n    if (i>0 || buttons.length>1) {\n      $(button).removeClass('disabled');\n    }\n    else {\n      $(button).addClass('disabled');\n    }\n  }\n};\n\n// update vacation addresses field with user identities\nrcube_webmail.prototype.managesieve_vacation_addresses = function(id)\n{\n  var lock = this.set_busy(true, 'loading');\n  this.http_post('plugin.managesieve-action', {_act: 'addresses', _aid: id}, lock);\n};\n\n// update vacation addresses field with user identities\nrcube_webmail.prototype.managesieve_vacation_addresses_update = function(id, addresses)\n{\n  var field = $('#vacation_addresses,#action_addresses' + (id || ''));\n  smart_field_reset(field.get(0), addresses);\n};\n\nfunction rule_header_select(id)\n{\n  var obj = document.getElementById('header' + id),\n    size = document.getElementById('rule_size' + id),\n    op = document.getElementById('rule_op' + id),\n    header = document.getElementById('custom_header' + id + '_list'),\n    mod = document.getElementById('rule_mod' + id),\n    trans = document.getElementById('rule_trans' + id),\n    comp = document.getElementById('rule_comp' + id),\n    datepart = document.getElementById('rule_date_part' + id),\n    dateheader = document.getElementById('rule_date_header_div' + id),\n    h = obj.value;\n\n  if (h == 'size') {\n    size.style.display = 'inline';\n    $.each([op, header, mod, trans, comp], function() { this.style.display = 'none'; });\n  }\n  else {\n    header.style.display = h != '...' ? 'none' : 'inline-block';\n    size.style.display = 'none';\n    op.style.display = 'inline';\n    comp.style.display = '';\n    mod.style.display = h == 'body' || h == 'currentdate' || h == 'date' ? 'none' : 'block';\n    trans.style.display = h == 'body' ? 'block' : 'none';\n  }\n\n  if (datepart)\n    datepart.style.display = h == 'currentdate' || h == 'date' ? 'inline' : 'none';\n  if (dateheader)\n    dateheader.style.display = h == 'date' ? '' : 'none';\n\n  rule_op_select(op, id, h);\n  rule_mod_select(id, h);\n  obj.style.width = h == '...' ? '40px' : '';\n};\n\nfunction rule_op_select(obj, id, header)\n{\n  var target = document.getElementById('rule_target' + id + '_list');\n\n  if (!header)\n    header = document.getElementById('header' + id).value;\n\n  target.style.display = obj.value == 'exists' || obj.value == 'notexists' || header == 'size' ? 'none' : 'inline-block';\n};\n\nfunction rule_trans_select(id)\n{\n  var obj = document.getElementById('rule_trans_op' + id),\n    target = document.getElementById('rule_trans_type' + id);\n\n  target.style.display = obj.value != 'content' ? 'none' : 'inline';\n};\n\nfunction rule_mod_select(id, header)\n{\n  var obj = document.getElementById('rule_mod_op' + id),\n    target = document.getElementById('rule_mod_type' + id),\n    index = document.getElementById('rule_index_div' + id);\n\n  if (!header)\n    header = document.getElementById('header' + id).value;\n\n  target.style.display = obj.value != 'address' && obj.value != 'envelope' ? 'none' : 'inline';\n\n  if (index)\n    index.style.display = header != 'body' && header != 'currentdate' && header != 'size' && obj.value != 'envelope'  ? '' : 'none';\n};\n\nfunction rule_join_radio(value)\n{\n  $('#rules').css('display', value == 'any' ? 'none' : 'block');\n};\n\nfunction rule_adv_switch(id, elem)\n{\n  var elem = $(elem), enabled = elem.hasClass('hide'), adv = $('#rule_advanced'+id);\n\n  if (enabled) {\n    adv.hide();\n    elem.removeClass('hide').addClass('show');\n  }\n  else {\n    adv.show();\n    elem.removeClass('show').addClass('hide');\n  }\n}\n\nfunction action_type_select(id)\n{\n  var obj = document.getElementById('action_type' + id),\n    v = obj.value, enabled = {},\n    elems = {\n      mailbox: document.getElementById('action_mailbox' + id),\n      target: document.getElementById('redirect_target' + id),\n      target_area: document.getElementById('action_target_area' + id),\n      flags: document.getElementById('action_flags' + id),\n      vacation: document.getElementById('action_vacation' + id),\n      set: document.getElementById('action_set' + id),\n      notify: document.getElementById('action_notify' + id)\n    };\n\n  if (v == 'fileinto' || v == 'fileinto_copy') {\n    enabled.mailbox = 1;\n  }\n  else if (v == 'redirect' || v == 'redirect_copy') {\n    enabled.target = 1;\n  }\n  else if (v.match(/^reject|ereject$/)) {\n    enabled.target_area = 1;\n  }\n  else if (v.match(/^(add|set|remove)flag$/)) {\n    enabled.flags = 1;\n  }\n  else if (v == 'vacation') {\n    enabled.vacation = 1;\n  }\n  else if (v == 'set') {\n    enabled.set = 1;\n  }\n  else if (v == 'notify') {\n    enabled.notify = 1;\n  }\n\n  for (var x in elems) {\n    elems[x].style.display = !enabled[x] ? 'none' : 'inline';\n  }\n};\n\nfunction vacation_action_select()\n{\n  var selected = $('#vacation_action').val();\n\n  $('#action_target_span')[selected == 'discard' || selected == 'keep' ? 'hide' : 'show']();\n};\n\n// Inititalizes smart list input\nfunction smart_field_init(field)\n{\n  var id = field.id + '_list',\n    area = $('<span class=\"listarea\"></span>'),\n    list = field.value ? field.value.split(\"\\n\") : [''];\n\n  if ($('#'+id).length)\n    return;\n\n  // add input rows\n  $.each(list, function(i, v) {\n    area.append(smart_field_row(v, field.name, i, $(field).data('size')));\n  });\n\n  area.attr('id', id);\n  field = $(field);\n\n  if (field.attr('disabled'))\n    area.hide();\n  // disable the original field anyway, we don't want it in POST\n  else\n    field.prop('disabled', true);\n\n  field.after(area);\n\n  if (field.hasClass('error')) {\n    area.addClass('error');\n    rcmail.managesieve_tip_register([[id, field.data('tip')]]);\n  }\n};\n\nfunction smart_field_row(value, name, idx, size)\n{\n  // build row element content\n  var input, content = '<span class=\"listelement\">'\n      + '<span class=\"reset\"></span><input type=\"text\"></span>',\n    elem = $(content),\n    attrs = {value: value, name: name + '[]'};\n\n  if (size)\n    attrs.size = size;\n\n  input = $('input', elem).attr(attrs).keydown(function(e) {\n    var input = $(this);\n\n    // element creation event (on Enter)\n    if (e.which == 13) {\n      var name = input.attr('name').replace(/\\[\\]$/, ''),\n        dt = (new Date()).getTime(),\n        elem = smart_field_row('', name, dt, size);\n\n      input.parent().after(elem);\n      $('input', elem).focus();\n    }\n    // backspace or delete: remove input, focus previous one\n    else if ((e.which == 8 || e.which == 46) && input.val() == '') {\n\n      var parent = input.parent(), siblings = parent.parent().children();\n\n      if (siblings.length > 1) {\n        if (parent.prev().length)\n          parent.prev().children('input').focus();\n        else\n          parent.next().children('input').focus();\n\n        parent.remove();\n        return false;\n      }\n    }\n  });\n\n  // element deletion event\n  $('span[class=\"reset\"]', elem).click(function() {\n    var span = $(this.parentNode);\n\n    if (span.parent().children().length > 1)\n      span.remove();\n    else\n      $('input', span).val('').focus();\n  });\n\n  return elem;\n}\n\n// Reset and fill the smart list input with new data\nfunction smart_field_reset(field, data)\n{\n  var id = field.id + '_list',\n    list = data.length ? data : [''];\n    area = $('#' + id);\n\n  area.empty();\n\n  // add input rows\n  $.each(list, function(i, v) {\n    area.append(smart_field_row(v, field.name, i, $(field).data('size')));\n  });\n}\n\n// Register onmouse(leave/enter) events for tips on specified form element\nrcube_webmail.prototype.managesieve_tip_register = function(tips)\n{\n  var n, framed = parent.rcmail,\n    tip = framed ? parent.rcmail.env.ms_tip_layer : rcmail.env.ms_tip_layer;\n\n  for (var n in tips) {\n    $('#'+tips[n][0])\n      .data('tip', tips[n][1])\n      .bind('mouseenter', function(e) {\n        var elem = $(this),\n          offset = elem.offset(),\n          left = offset.left,\n          top = offset.top - 12,\n          minwidth = elem.width();\n\n        if (framed) {\n          offset = $((rcmail.env.task == 'mail'  ? '#sievefilterform > iframe' : '#filter-box'), parent.document).offset();\n          top  += offset.top;\n          left += offset.left;\n        }\n\n        tip.html(elem.data('tip'));\n        top -= tip.height();\n\n        tip.css({left: left, top: top, minWidth: (minwidth-2) + 'px'}).show();\n      })\n    .bind('mouseleave', function(e) { tip.hide(); });\n  }\n};\n\n// format time string\nfunction sieve_formattime(hour, minutes)\n{\n  var i, c, h, time = '', format = rcmail.env.time_format || 'H:i';\n\n  for (i=0; i<format.length; i++) {\n    c = format.charAt(i);\n    switch (c) {\n      case 'a': time += hour > 12 ? 'am' : 'pm'; break;\n      case 'A': time += hour > 12 ? 'AM' : 'PM'; break;\n      case 'g':\n      case 'h':\n        h = hour == 0 ? 12 : hour > 12 ? hour - 12 : hour;\n        time += (c == 'h' && hour < 10 ? '0' : '') + hour;\n        break;\n      case 'G': time += hour; break;\n      case 'H': time += (hour < 10 ? '0' : '') + hour; break;\n      case 'i': time += (minutes < 10 ? '0' : '') + minutes; break;\n      case 's': time += '00';\n      default: time += c;\n    }\n  }\n\n  return time;\n}\n\nfunction sieve_form_init()\n{\n  // small resize for header element\n  $('select[name=\"_header[]\"]', rcmail.gui_objects.sieveform).each(function() {\n    if (this.value == '...') this.style.width = '40px';\n  });\n\n  // resize dialog window\n  if (rcmail.env.action == 'plugin.managesieve' && rcmail.env.task == 'mail') {\n    parent.rcmail.managesieve_dialog_resize(rcmail.gui_objects.sieveform);\n  }\n\n  $('input[type=\"text\"]:first', rcmail.gui_objects.sieveform).focus();\n\n  // initialize smart list inputs\n  $('textarea[data-type=\"list\"]', rcmail.gui_objects.sieveform).each(function() {\n    smart_field_init(this);\n  });\n\n  // enable date pickers on date fields\n  if ($.datepicker && rcmail.env.date_format) {\n    $.datepicker.setDefaults({\n      dateFormat: rcmail.env.date_format,\n      changeMonth: true,\n      showOtherMonths: true,\n      selectOtherMonths: true,\n      onSelect: function(dateText) { $(this).focus().val(dateText); }\n    });\n    $('input.datepicker').datepicker();\n  }\n\n  // configure drop-down menu on time input fields based on jquery UI autocomplete\n  $('#vacation_timefrom, #vacation_timeto')\n    .attr('autocomplete', \"off\")\n    .autocomplete({\n      delay: 100,\n      minLength: 1,\n      source: function(p, callback) {\n        var h, result = [];\n        for (h = 0; h < 24; h++)\n          result.push(sieve_formattime(h, 0));\n        result.push(sieve_formattime(23, 59));\n\n        return callback(result);\n      },\n      open: function(event, ui) {\n        // scroll to current time\n        var $this = $(this), val = $this.val(),\n          widget = $this.autocomplete('widget').css('width', '10em'),\n          menu = $this.data('ui-autocomplete').menu;\n\n        if (val && val.length)\n          widget.children().each(function() {\n            var li = $(this);\n            if (li.text().indexOf(val) == 0)\n              menu._scrollIntoView(li);\n          });\n      },\n      select: function(event, ui) {\n        $(this).val(ui.item.value);\n        return false;\n      }\n    })\n    .click(function() {  // show drop-down upon clicks\n      $(this).autocomplete('search', $(this).val() || ' ');\n    })\n}\n\n\n/*********************************************************/\n/*********           Mail UI methods             *********/\n/*********************************************************/\n\nrcube_webmail.prototype.managesieve_create = function(force)\n{\n  if (!force && this.env.action != 'show') {\n    var uid = this.message_list.get_single_selection(),\n      lock = this.set_busy(true, 'loading');\n\n    this.http_post('plugin.managesieve-action', {_uid: uid}, lock);\n    return;\n  }\n\n  if (!this.env.sieve_headers || !this.env.sieve_headers.length)\n    return;\n\n  var i, html, buttons = {}, dialog = $(\"#sievefilterform\");\n\n  // create dialog window\n  if (!dialog.length) {\n    dialog = $('<div id=\"sievefilterform\"></div>');\n    $('body').append(dialog);\n  }\n\n  // build dialog window content\n  html = '<fieldset><legend>'+this.gettext('managesieve.usedata')+'</legend><ul>';\n  for (i in this.env.sieve_headers)\n    html += '<li><input type=\"checkbox\" name=\"headers[]\" id=\"sievehdr'+i+'\" value=\"'+i+'\" checked=\"checked\" />'\n      +'<label for=\"sievehdr'+i+'\">'+this.env.sieve_headers[i][0]+':</label> '+this.env.sieve_headers[i][1]+'</li>';\n  html += '</ul></fieldset>';\n\n  dialog.html(html);\n\n  // [Next Step] button action\n  buttons[this.gettext('managesieve.nextstep')] = function () {\n    // check if there's at least one checkbox checked\n    var hdrs = $('input[name=\"headers[]\"]:checked', dialog);\n    if (!hdrs.length) {\n      alert(rcmail.gettext('managesieve.nodata'));\n      return;\n    }\n\n    // build frame URL\n    var url = rcmail.get_task_url('mail');\n    url = rcmail.add_url(url, '_action', 'plugin.managesieve');\n    url = rcmail.add_url(url, '_framed', 1);\n\n    hdrs.map(function() {\n      var val = rcmail.env.sieve_headers[this.value];\n      url = rcmail.add_url(url, 'r['+this.value+']', val[0]+':'+val[1]);\n    });\n\n    // load form in the iframe\n    var frame = $('<iframe>').attr({src: url, frameborder: 0})\n    dialog.empty().append(frame).dialog('widget').resize();\n\n    // Change [Next Step] button with [Save] button\n    buttons = {};\n    buttons[rcmail.gettext('save')] = function() {\n      var win = $('iframe', dialog).get(0).contentWindow;\n      win.rcmail.managesieve_save();\n    };\n    dialog.dialog('option', 'buttons', buttons);\n  };\n\n  // show dialog window\n  dialog.dialog({\n    modal: false,\n    resizable: true,\n    closeOnEscape: !bw.ie7,  // disable for performance reasons\n    title: this.gettext('managesieve.newfilter'),\n    close: function() { rcmail.managesieve_dialog_close(); },\n    buttons: buttons,\n    minWidth: 600,\n    minHeight: 300,\n    height: 250\n  }).show();\n\n  this.env.managesieve_dialog = dialog;\n}\n\nrcube_webmail.prototype.managesieve_dialog_close = function()\n{\n  var dialog = this.env.managesieve_dialog;\n\n  // BUG(?): if we don't remove the iframe first, it will be reloaded\n  dialog.html('');\n  dialog.dialog('destroy').hide();\n}\n\nrcube_webmail.prototype.managesieve_dialog_resize = function(o)\n{\n  var dialog = this.env.managesieve_dialog,\n    win = $(window), form = $(o);\n    width = $('fieldset:first', o).width(), // fieldset width is more appropriate here\n    height = form.height(),\n    w = win.width(), h = win.height();\n\n  dialog.dialog('option', { height: Math.min(h-20, height+120), width: Math.min(w-20, width+65) })\n    .dialog('option', 'position', ['center', 'center']);  // works in a separate call only (!?)\n}\n", "code_before": "/**\n * (Manage)Sieve Filters plugin\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (c) The Roundcube Dev Team\n *\n * The JavaScript code in this page is free software: you can redistribute it\n * and/or modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n */\n\nif (window.rcmail) {\n    rcmail.addEventListener('init', function (evt) {\n    // add managesieve-create command to message_commands array,\n    // so it's state will be updated on message selection/unselection\n        if (rcmail.env.task == 'mail') {\n            if (rcmail.env.action != 'show') {\n                rcmail.env.message_commands.push('managesieve-create');\n            } else {\n                rcmail.enable_command('managesieve-create', true);\n            }\n        }\n\n        if (rcmail.env.task == 'mail' || rcmail.env.action.startsWith('plugin.managesieve')) {\n            // Create layer for form tips\n            if (!rcmail.env.framed) {\n                rcmail.env.ms_tip_layer = $('<div id=\"managesieve-tip\" class=\"popupmenu\"></div>');\n                rcmail.env.ms_tip_layer.appendTo(document.body);\n            }\n        }\n\n        // register commands\n        rcmail.register_command('plugin.managesieve-save', function () {\n            rcmail.managesieve_save();\n        });\n        rcmail.register_command('plugin.managesieve-act', function () {\n            rcmail.managesieve_act();\n        });\n        rcmail.register_command('plugin.managesieve-add', function () {\n            rcmail.managesieve_add();\n        });\n        rcmail.register_command('plugin.managesieve-del', function () {\n            rcmail.managesieve_del();\n        });\n        rcmail.register_command('plugin.managesieve-move', function () {\n            rcmail.managesieve_move();\n        });\n        rcmail.register_command('plugin.managesieve-setadd', function () {\n            rcmail.managesieve_setadd();\n        });\n        rcmail.register_command('plugin.managesieve-setdel', function () {\n            rcmail.managesieve_setdel();\n        });\n        rcmail.register_command('plugin.managesieve-setact', function () {\n            rcmail.managesieve_setact();\n        });\n        rcmail.register_command('plugin.managesieve-setget', function () {\n            rcmail.managesieve_setget();\n        });\n        rcmail.register_command('plugin.managesieve-seteditraw', function () {\n            rcmail.managesieve_seteditraw();\n        });\n\n        if (rcmail.env.action.startsWith('plugin.managesieve')) {\n            if (rcmail.gui_objects.sieveform) {\n                rcmail.enable_command('plugin.managesieve-save', true);\n                sieve_form_init();\n            } else if (rcmail.gui_objects.sievesetrawform) {\n                rcmail.enable_command('plugin.managesieve-save', true);\n                sieve_raw_editor_init();\n            } else {\n                rcmail.enable_command('plugin.managesieve-add', !rcmail.env.sieveconnerror && $.inArray('new_filter', rcmail.env.managesieve_disabled_actions) == -1);\n                rcmail.enable_command('plugin.managesieve-setadd', !rcmail.env.sieveconnerror && $.inArray('new_set', rcmail.env.managesieve_disabled_actions) == -1);\n            }\n\n            var setcnt, set = rcmail.env.currentset;\n\n            if (rcmail.gui_objects.filterslist) {\n                rcmail.filters_list = new rcube_list_widget(rcmail.gui_objects.filterslist,\n                    { multiselect: false, draggable: true, keyboard: true });\n\n                rcmail.filters_list\n                    .addEventListener('select', function (o) {\n                        rcmail.managesieve_select(o);\n                    })\n                    .addEventListener('keypress', function (o) {\n                        rcmail.list_keypress(o, { del: 'plugin.managesieve-del' });\n                    })\n                    .addEventListener('dragstart', function (o) {\n                        rcmail.managesieve_dragstart(o);\n                    })\n                    .addEventListener('dragend', function (o) {\n                        rcmail.managesieve_dragend(o);\n                    })\n                    .addEventListener('initrow', function (row) {\n                        row.obj.onmouseover = function () {\n                            rcmail.managesieve_focus_filter(row);\n                        };\n                        row.obj.onmouseout = function () {\n                            rcmail.managesieve_unfocus_filter(row);\n                        };\n                    })\n                    .init();\n            }\n\n            if (rcmail.gui_objects.filtersetslist) {\n                rcmail.filtersets_list = new rcube_list_widget(rcmail.gui_objects.filtersetslist,\n                    { multiselect: false, draggable: false, keyboard: true });\n\n                rcmail.filtersets_list.init().focus();\n\n                if (set != null) {\n                    $('#filterset-name').text(set);\n                    set = rcmail.managesieve_setid(set);\n                    rcmail.filtersets_list.select(set);\n                }\n\n                // attach select event after initial record was selected\n                rcmail.filtersets_list.addEventListener('select', function (e) {\n                    rcmail.managesieve_setselect(e);\n                });\n\n                setcnt = rcmail.filtersets_list.rowcount;\n                rcmail.enable_command('plugin.managesieve-set', true);\n                rcmail.enable_command('plugin.managesieve-setact', setcnt > 0 && $.inArray('enable_disable_set', rcmail.env.managesieve_disabled_actions) == -1);\n                rcmail.enable_command('plugin.managesieve-setget', setcnt > 0 && $.inArray('download_set', rcmail.env.managesieve_disabled_actions) == -1);\n                rcmail.enable_command('plugin.managesieve-setdel', setcnt > 1 && $.inArray('delete_set', rcmail.env.managesieve_disabled_actions) == -1);\n                rcmail.enable_command('plugin.managesieve-seteditraw', setcnt > 0 && rcmail.env.raw_sieve_editor);\n\n                // Fix dragging filters over sets list\n                $('tr', rcmail.gui_objects.filtersetslist).each(function (i, e) {\n                    rcmail.managesieve_fixdragend(e);\n                });\n            }\n        }\n    });\n}\n\n/*********************************************************/\n/* ********       Managesieve UI methods         *********/\n/*********************************************************/\n\nrcube_webmail.prototype.managesieve_add = function () {\n    this.load_managesieveframe('_nav=hide', true);\n};\n\nrcube_webmail.prototype.managesieve_del = function () {\n    var id = this.filters_list.get_single_selection();\n    this.confirm_dialog(this.get_label('managesieve.filterdeleteconfirm'), 'delete', function (e, ref) {\n        var post = '_act=delete&_fid=' + ref.filters_list.rows[id].uid,\n            lock = ref.set_busy(true, 'loading');\n\n        ref.http_post('plugin.managesieve-action', post, lock);\n    });\n};\n\nrcube_webmail.prototype.managesieve_act = function () {\n    var id = this.filters_list.get_single_selection(),\n        lock = this.set_busy(true, 'loading');\n\n    this.http_post('plugin.managesieve-action',\n        '_act=act&_fid=' + this.filters_list.rows[id].uid, lock);\n};\n\n// Filter selection\nrcube_webmail.prototype.managesieve_select = function (list) {\n    var id = list.get_single_selection();\n\n    if (id != null) {\n        id = list.rows[id].uid;\n        this.load_managesieveframe('_fid=' + id);\n    }\n\n    var has_id = typeof (id) !== 'undefined' && id != null;\n\n    this.enable_command('plugin.managesieve-act', has_id);\n    this.enable_command('plugin.managesieve-del', has_id && $.inArray('delete_filter', rcmail.env.managesieve_disabled_actions) == -1);\n};\n\n// Set selection\nrcube_webmail.prototype.managesieve_setselect = function (list) {\n    this.enable_command('plugin.managesieve-setdel', list.rowcount > 1 && $.inArray('delete_set', rcmail.env.managesieve_disabled_actions) == -1);\n    this.enable_command('plugin.managesieve-setact', list.rowcount > 0 && $.inArray('enable_disable_set', rcmail.env.managesieve_disabled_actions) == -1);\n    this.enable_command('plugin.managesieve-setget', list.rowcount > 0 && $.inArray('delete_set', rcmail.env.managesieve_disabled_actions) == -1);\n    this.enable_command('plugin.managesieve-seteditraw', list.rowcount > 0 && this.env.raw_sieve_editor);\n\n    if (rcmail.env.contextmenu_opening) {\n        return;\n    }\n\n    this.show_contentframe(false);\n    this.filters_list.clear(true);\n\n    var id = list.get_single_selection();\n    if (id != null) {\n        this.managesieve_list(this.env.filtersets[id]);\n        $('#filterset-name').text(this.env.filtersets[id]);\n    }\n};\n\nrcube_webmail.prototype.managesieve_rowid = function (id) {\n    var i, rows = this.filters_list.rows;\n\n    for (i in rows) {\n        if (rows[i] != null && rows[i].uid == id) {\n            return i;\n        }\n    }\n};\n\n// Returns set's identifier\nrcube_webmail.prototype.managesieve_setid = function (name) {\n    for (var i in this.env.filtersets) {\n        if (this.env.filtersets[i] == name) {\n            return i;\n        }\n    }\n};\n\n// Filters listing request\nrcube_webmail.prototype.managesieve_list = function (script) {\n    var lock = this.set_busy(true, 'loading');\n\n    this.http_post('plugin.managesieve-action', '_act=list&_set=' + urlencode(script), lock);\n};\n\n// Script download request\nrcube_webmail.prototype.managesieve_setget = function () {\n    var id = this.filtersets_list.get_single_selection(),\n        script = this.env.filtersets[id];\n\n    this.goto_url('plugin.managesieve-action', { _act: 'setget', _set: script }, false, true);\n};\n\n// Set activate/deactivate request\nrcube_webmail.prototype.managesieve_setact = function () {\n    var id = this.filtersets_list.get_single_selection(),\n        lock = this.set_busy(true, 'loading'),\n        script = this.env.filtersets[id],\n        action = $('#rcmrow' + id).hasClass('disabled') ? 'setact' : 'deact';\n\n    this.http_post('plugin.managesieve-action', '_act=' + action + '&_set=' + urlencode(script), lock);\n};\n\n// Set delete request\nrcube_webmail.prototype.managesieve_setdel = function () {\n    var id = this.filtersets_list.get_single_selection();\n    this.confirm_dialog(this.get_label('managesieve.setdeleteconfirm'), 'delete', function (e, ref) {\n        var script = ref.env.filtersets[id],\n            lock = ref.set_busy(true, 'loading');\n\n        ref.http_post('plugin.managesieve-action', '_act=setdel&_set=' + urlencode(script), lock);\n    });\n};\n\n// Set edit raw request\nrcube_webmail.prototype.managesieve_seteditraw = function () {\n    var id = this.filtersets_list.get_single_selection(),\n        script = this.env.filtersets[id];\n\n    this.load_managesieveframe('_nav=hide&_seteditraw=1&_set=' + urlencode(script), true);\n};\n\n// Set add request\nrcube_webmail.prototype.managesieve_setadd = function () {\n    this.load_managesieveframe('_nav=hide&_newset=1', true);\n};\n\nrcube_webmail.prototype.managesieve_updatelist = function (action, o) {\n    this.set_busy(true);\n\n    switch (action) {\n    // Delete filter row\n        case 'del':\n            var id = o.id, list = this.filters_list;\n\n            list.remove_row(this.managesieve_rowid(o.id));\n            this.show_contentframe(false);\n            this.reset_filters_list();\n\n            // filter identifiers changed, fix the list\n            $('tr', this.filters_list.list).each(function () {\n                // remove hidden (deleted) rows\n                if (this.style.display == 'none') {\n                    $(this).detach();\n                    return;\n                }\n\n                var rowid = this.id.substr(6);\n\n                // remove all attached events\n                $(this).off();\n\n                // update row id\n                if (rowid > id) {\n                    this.uid = String(rowid - 1);\n                    $(this).attr('id', 'rcmrow' + this.uid);\n                }\n            });\n            list.init();\n\n            break;\n        // Update filter row\n        case 'update':\n            var i, row = $('#rcmrow' + this.managesieve_rowid(o.id));\n\n            if (o.name) {\n                $('td', row).text(o.name);\n            }\n            if (o.disabled) {\n                row.addClass('disabled');\n            } else {\n                row.removeClass('disabled');\n            }\n\n            $('#fenabled', $('iframe').contents()).prop('checked', !o.disabled);\n\n            break;\n        // Add filter row to the list\n        case 'add':\n            var list = this.filters_list,\n                row = $('<tr><td class=\"name\"></td></tr>');\n\n            $('td', row).text(o.name);\n            row.attr('id', 'rcmrow' + o.id);\n            if (o.disabled) {\n                row.addClass('disabled');\n            }\n\n            list.insert_row(row.get(0));\n            list.highlight_row(o.id);\n\n            this.enable_command('plugin.managesieve-del', $.inArray('delete_rule', rcmail.env.managesieve_disabled_actions) == -1);\n            this.enable_command('plugin.managesieve-act', true);\n\n            break;\n        // Filling rules list\n        case 'list':\n            var i, tr, td, el, list = this.filters_list;\n\n            if (o.clear) {\n                list.clear();\n            }\n\n            for (i in o.list) {\n                el = o.list[i];\n                tr = document.createElement('TR');\n                td = document.createElement('TD');\n\n                $(td).text(el.name);\n                td.className = 'name';\n                tr.id = 'rcmrow' + el.id;\n                if (el.class) {\n                    tr.className = el.class;\n                }\n                tr.appendChild(td);\n\n                list.insert_row(tr);\n            }\n\n            if (o.set) {\n                list.highlight_row(o.set);\n            } else {\n                this.enable_command('plugin.managesieve-del', 'plugin.managesieve-act', false);\n            }\n\n            break;\n        // Activate/Deactivate the set\n        case 'setact':\n            var id = this.managesieve_setid(o.name), row = $('#rcmrow' + id);\n            if (o.active) {\n                if (o.all) {\n                    $('tr', this.gui_objects.filtersetslist).addClass('disabled');\n                }\n                row.removeClass('disabled');\n            } else {\n                row.addClass('disabled');\n            }\n\n            break;\n        // Delete set row\n        case 'setdel':\n            var id = this.managesieve_setid(o.name);\n\n            this.filters_list.clear();\n            this.show_contentframe(false);\n            this.enable_command('plugin.managesieve-setdel', 'plugin.managesieve-setact',\n                'plugin.managesieve-setget', 'plugin.managesieve-seteditraw', false);\n\n            this.filtersets_list.remove_row(id, true);\n            delete this.env.filtersets[id];\n\n            break;\n        // Create set row\n        case 'setadd':\n            var id = 'S' + new Date().getTime(),\n                list = this.filtersets_list,\n                row = $('<tr class=\"disabled\"><td class=\"name\"></td></tr>');\n\n            $('td', row).text(o.name);\n            row.attr('id', 'rcmrow' + id);\n\n            this.env.filtersets[id] = o.name;\n            list.insert_row(row.get(0));\n\n            // move row into its position on the list\n            if (o.index != list.rowcount - 1) {\n                row.detach();\n                var elem = $('tr:visible', list.list).get(o.index);\n                row.insertBefore(elem);\n            }\n\n            list.select(id);\n\n            // Fix dragging filters over sets list\n            this.managesieve_fixdragend(row);\n\n            break;\n        case 'refresh':\n            this.reset_filters_list(true);\n\n            break;\n    }\n\n    this.set_busy(false);\n};\n\n// Resets filters list state\nrcube_webmail.prototype.reset_filters_list = function (reload) {\n    this.filters_list.clear_selection();\n    this.enable_command('plugin.managesieve-act', 'plugin.managesieve-del', false);\n\n    if (reload) {\n        var id = this.filtersets_list.get_single_selection();\n\n        this.filters_list.clear(true);\n        this.managesieve_list(this.env.filtersets[id]);\n    }\n};\n\n// load filter frame\nrcube_webmail.prototype.load_managesieveframe = function (add_url, reset) {\n    if (reset) {\n        this.reset_filters_list();\n    }\n\n    var target = this.get_frame_window(this.env.contentframe),\n        url = this.url('plugin.managesieve-action', '_framed=1' + (add_url ? ('&' + add_url) : ''));\n\n    if (target) {\n        this.location_href(url, target, true);\n    }\n};\n\n// load filter frame\nrcube_webmail.prototype.managesieve_dragstart = function (list) {\n    var id = this.filters_list.get_single_selection();\n\n    this.drag_active = true;\n    this.drag_filter = id;\n};\n\nrcube_webmail.prototype.managesieve_dragend = function (e) {\n    if (this.drag_active) {\n        if (this.drag_filter_target) {\n            var lock = this.set_busy(true, 'loading');\n\n            this.show_contentframe(false);\n            this.http_post('plugin.managesieve-action', '_act=move&_fid=' + this.drag_filter\n                + '&_to=' + this.drag_filter_target, lock);\n        }\n        this.drag_active = false;\n    }\n};\n\n// Fixes filters dragging over sets list\n// @TODO: to be removed after implementing copying filters\nrcube_webmail.prototype.managesieve_fixdragend = function (elem) {\n    var p = this;\n    $(elem).on('mouseup' + ((bw.iphone || bw.ipad) ? ' touchend' : ''), function (e) {\n        if (p.drag_active) {\n            p.filters_list.drag_mouse_up(e);\n        }\n    });\n};\n\nrcube_webmail.prototype.managesieve_focus_filter = function (row) {\n    var id = row.id.replace(/^rcmrow/, '');\n    if (this.drag_active && id != this.drag_filter) {\n        this.drag_filter_target = id;\n        $(row.obj).addClass(id < this.drag_filter ? 'filtermoveup' : 'filtermovedown');\n    }\n};\n\nrcube_webmail.prototype.managesieve_unfocus_filter = function (row) {\n    if (this.drag_active) {\n        $(row.obj).removeClass('filtermoveup filtermovedown');\n        this.drag_filter_target = null;\n    }\n};\n\n/*********************************************************/\n/* ********          Filter Form methods         *********/\n/*********************************************************/\n\n// Form submission\nrcube_webmail.prototype.managesieve_save = function () {\n    if (this.env.action == 'plugin.managesieve-vacation') {\n        var data = $(this.gui_objects.sieveform).serialize();\n        this.http_post('plugin.managesieve-vacation', data, this.display_message(this.get_label('managesieve.vacation.saving'), 'loading'));\n        return;\n    }\n\n    if (this.env.action == 'plugin.managesieve-forward') {\n        var data = $(this.gui_objects.sieveform).serialize();\n        this.http_post('plugin.managesieve-forward', data, this.display_message(this.get_label('managesieve.forward.saving'), 'loading'));\n        return;\n    }\n\n    if (this.gui_objects.sieveform) {\n        if (parent.rcmail && parent.rcmail.filters_list && this.gui_objects.sieveform.name != 'filtersetform') {\n            var id = parent.rcmail.filters_list.get_single_selection();\n            if (id != null) {\n                this.gui_objects.sieveform.elements._fid.value = parent.rcmail.filters_list.rows[id].uid;\n            }\n        }\n        this.gui_objects.sieveform.submit();\n    } else if (this.gui_objects.sievesetrawform) {\n        this.gui_objects.sievesetrawform.submit();\n    }\n};\n\n// Operations on filters form\nrcube_webmail.prototype.managesieve_ruleadd = function (id) {\n    this.http_post('plugin.managesieve-action', '_act=ruleadd&_rid=' + id);\n};\n\nrcube_webmail.prototype.managesieve_rulefill = function (content, id, after) {\n    if (content != '') {\n    // create new element\n        var div = $('#rules')[0],\n            row = $('<div>').attr({ class: 'rulerow', id: 'rulerow' + id })\n                .html(content);\n\n        this.managesieve_insertrow(div, row, after);\n\n        // initialize smart list inputs\n        $('textarea[data-type=\"list\"]', row).each(function () {\n            smart_field_init(this);\n        });\n\n        this.managesieve_formbuttons(div);\n    }\n};\n\nrcube_webmail.prototype.managesieve_ruledel = function (id) {\n    if ($('#ruledel' + id).hasClass('disabled')) {\n        return;\n    }\n\n    this.confirm_dialog(this.get_label('managesieve.ruledeleteconfirm'), 'delete', function (e, ref) {\n        var row = document.getElementById('rulerow' + id);\n        row.parentNode.removeChild(row);\n        ref.managesieve_formbuttons(document.getElementById('rules'));\n    });\n};\n\nrcube_webmail.prototype.managesieve_actionadd = function (id) {\n    this.http_post('plugin.managesieve-action', '_act=actionadd&_aid=' + id);\n};\n\nrcube_webmail.prototype.managesieve_actionfill = function (content, id, after) {\n    if (content != '') {\n        var div = $('#actions')[0],\n            row = $('<div>').attr({ class: 'actionrow', id: 'actionrow' + id })\n                .html(content);\n\n        this.managesieve_insertrow(div, row, after);\n\n        // initialize smart list inputs\n        $('textarea[data-type=\"list\"]', row).each(function () {\n            smart_field_init(this);\n        });\n\n        this.managesieve_formbuttons(div);\n    }\n};\n\nrcube_webmail.prototype.managesieve_actiondel = function (id) {\n    if ($('#actiondel' + id).hasClass('disabled')) {\n        return;\n    }\n\n    this.confirm_dialog(this.get_label('managesieve.actiondeleteconfirm'), 'delete', function (e, ref) {\n        var row = document.getElementById('actionrow' + id);\n        row.parentNode.removeChild(row);\n        ref.managesieve_formbuttons(document.getElementById('actions'));\n    });\n};\n\n// insert rule/action row in specified place on the list\nrcube_webmail.prototype.managesieve_insertrow = function (div, row, after) {\n    var node = $('#' + ($(div).attr('id') == 'rules' ? 'rulerow' : 'actionrow') + after)[0];\n\n    if (node) {\n        $(row).insertAfter(node);\n    } else {\n        $(div).append(row);\n    }\n\n    this.triggerEvent('managesieve.insertrow', { obj: row });\n};\n\n// update Delete buttons status\nrcube_webmail.prototype.managesieve_formbuttons = function (div) {\n    var buttons = $('a.delete', div);\n\n    buttons.removeClass('disabled');\n    if (buttons.length == 1) {\n        buttons.addClass('disabled');\n    }\n};\n\n// update vacation addresses field with user identities\nrcube_webmail.prototype.managesieve_vacation_addresses = function (id) {\n    var lock = this.set_busy(true, 'loading');\n    this.http_post('plugin.managesieve-action', { _act: 'addresses', _aid: id }, lock);\n};\n\n// update vacation addresses field with user identities\nrcube_webmail.prototype.managesieve_vacation_addresses_update = function (id, addresses) {\n    var field = $('#vacation_addresses,#action_addresses' + (id || ''));\n    smart_field_reset(field.get(0), addresses);\n};\n\nfunction rule_header_select(id) {\n    var is_header,\n        obj = document.getElementById('header' + id),\n        size = document.getElementById('rule_size' + id),\n        spamtest = document.getElementById('rule_spamtest' + id),\n        msg = document.getElementById('rule_message' + id),\n        op = document.getElementById('rule_op' + id),\n        header = document.getElementById('custom_header' + id + '_list'),\n        custstr = document.getElementById('custom_var' + id + '_list'),\n        mod = document.getElementById('rule_mod' + id),\n        trans = document.getElementById('rule_trans' + id),\n        comp = document.getElementById('rule_comp' + id),\n        mime = document.getElementById('rule_mime' + id),\n        mime_part = document.getElementById('rule_mime_part' + id),\n        datepart = document.getElementById('rule_date_part' + id),\n        dateheader = document.getElementById('rule_date_header_div' + id),\n        rule = $('#rule_op' + id),\n        h = obj.value,\n        set = [op, header, custstr, mod, trans, comp, size, mime, mime_part];\n\n    if (h == 'size') {\n        if (msg) {\n            set.push(msg);\n        }\n        $.each(set, function () {\n            if (this != window) {\n                this.style.display = 'none';\n            }\n        });\n        if (spamtest) {\n            spamtest.style.display = 'none';\n        }\n        size.style.display = '';\n    } else if (h == 'spamtest') {\n        if (msg) {\n            set.push(msg);\n        }\n        $.each(set, function () {\n            if (this != window) {\n                this.style.display = 'none';\n            }\n        });\n        if (spamtest) {\n            spamtest.style.display = '';\n        }\n        size.style.display = 'none';\n    } else if (h == 'message' && msg) {\n        $.each(set, function () {\n            if (this != window) {\n                this.style.display = 'none';\n            }\n        });\n        msg.style.display = '';\n    } else {\n        is_header = h != 'body' && h != 'currentdate' && h != 'date' && h != 'string';\n        header.style.display = h != '...' ? 'none' : '';\n        custstr.style.display = h != 'string' ? 'none' : '';\n        size.style.display = 'none';\n        op.style.display = '';\n        comp.style.display = '';\n        mod.style.display = is_header ? '' : 'none';\n        trans.style.display = h == 'body' ? '' : 'none';\n        if (spamtest) {\n            spamtest.style.display = 'none';\n        }\n        if (mime) {\n            mime.style.display = is_header ? '' : 'none';\n        }\n        if (mime_part) {\n            mime_part.style.display = is_header ? '' : 'none';\n        }\n        if (msg) {\n            msg.style.display = h == 'message' ? '' : 'none';\n        }\n    }\n\n    if (datepart) {\n        datepart.style.display = h == 'currentdate' || h == 'date' ? 'inline' : 'none';\n    }\n    if (dateheader) {\n        dateheader.style.display = h == 'date' ? '' : 'none';\n    }\n\n    $('[value=\"exists\"],[value=\"notexists\"]', rule).prop('disabled', h == 'string');\n    if (!rule.val()) {\n        rule.val('contains');\n    }\n\n    rule_op_select(op, id, h);\n    rule_mod_select(id, h, !is_header);\n    rule_mime_select(id);\n    if (spamtest) {\n        rule_spamtest_select(id);\n    }\n\n    obj.style.width = h == '...' ? '40px' : '';\n}\n\nfunction rule_op_select(obj, id, header) {\n    var target = document.getElementById('rule_target' + id + '_list');\n\n    if (!header) {\n        header = document.getElementById('header' + id).value;\n    }\n\n    target.style.display = obj.value.match(/^(exists|notexists)$/) || header.match(/^(size|spamtest|message)$/) ? 'none' : '';\n}\n\nfunction rule_trans_select(id) {\n    var obj = document.getElementById('rule_trans_op' + id),\n        target = document.getElementById('rule_trans_type' + id);\n\n    target.style.display = obj.value != 'content' ? 'none' : 'inline';\n}\n\nfunction rule_mod_select(id, header, reset) {\n    var obj = document.getElementById('rule_mod_op' + id),\n        target = document.getElementById('rule_mod_type' + id),\n        duplicate = document.getElementById('rule_duplicate_div' + id),\n        index = document.getElementById('rule_index_div' + id);\n\n    if (reset) {\n        obj.value = '';\n    }\n\n    if (!header) {\n        header = document.getElementById('header' + id).value;\n    }\n\n    target.style.display = obj.value != 'address' && obj.value != 'envelope' ? 'none' : '';\n\n    if (index) {\n        index.style.display = !header.match(/^(body|currentdate|size|spamtest|message|string)$/) && obj.value != 'envelope' ? '' : 'none';\n    }\n\n    if (duplicate) {\n        duplicate.style.display = header == 'message' ? '' : 'none';\n    }\n}\n\nfunction rule_spamtest_select(id) {\n    var obj = document.getElementById('rule_spamtest_op' + id),\n        target = document.getElementById('rule_spamtest_target' + id);\n\n    target.style.display = obj.value ? '' : 'none';\n    $(obj)[obj.value ? 'removeClass' : 'addClass']('rounded-right');\n}\n\nfunction rule_join_radio(value) {\n    $('#rules').css('display', value == 'any' ? 'none' : 'block');\n}\n\nfunction rule_adv_switch(id, elem) {\n    var elem = $(elem), enabled = elem.hasClass('hide'), adv = $('#rule_advanced' + id);\n\n    if (enabled) {\n        adv.get(0).style.display = 'none';\n        elem.removeClass('hide').addClass('show');\n    } else {\n        adv.get(0).style.display = '';\n        elem.removeClass('show').addClass('hide');\n    }\n}\n\nfunction rule_mime_select(id) {\n    var elem = $('#rule_mime_type' + id),\n        param_elem = $('#rule_mime_param' + id + '_list');\n\n    if (param_elem.length) {\n        param_elem[0].style.display = elem.val() == 'param' ? '' : 'none';\n    }\n}\n\nfunction action_type_select(id) {\n    var obj = document.getElementById('action_type' + id),\n        v = obj.value, enabled = {},\n        elems = {\n            mailbox: document.getElementById('action_mailbox' + id),\n            target: document.getElementById('redirect_target' + id),\n            target_area: document.getElementById('action_target_area' + id),\n            flags: document.getElementById('action_flags' + id),\n            vacation: document.getElementById('action_vacation' + id),\n            forward: document.getElementById('action_forward' + id),\n            set: document.getElementById('action_set' + id),\n            notify: document.getElementById('action_notify' + id),\n            addheader: document.getElementById('action_addheader' + id),\n            deleteheader: document.getElementById('action_deleteheader' + id),\n        };\n\n    if (v == 'fileinto' || v == 'fileinto_copy') {\n        enabled.mailbox = 1;\n    } else if (v == 'redirect' || v == 'redirect_copy') {\n        enabled.target = 1;\n    } else if (v.match(/^reject|ereject$/)) {\n        enabled.target_area = 1;\n    } else if (v.match(/^(add|set|remove)flag$/)) {\n        enabled.flags = 1;\n    } else if (v.match(/^(vacation|forward|set|notify|addheader|deleteheader)$/)) {\n        enabled[v] = 1;\n    }\n\n    for (var x in elems) {\n        if (elems[x]) {\n            elems[x].style.display = !enabled[x] ? 'none' : '';\n        }\n    }\n}\n\nfunction vacation_action_select() {\n    var selected = $('#vacation_action').val();\n\n    $('#action_target_span')[selected == 'discard' || selected == 'keep' ? 'hide' : 'show']();\n}\n\n// Initializes smart list input\nfunction smart_field_init(field) {\n    if (window.UI && UI.smart_field_init) {\n        return UI.smart_field_init(field);\n    }\n\n    var id = field.id + '_list',\n        area = $('<span class=\"listarea\"></span>'),\n        list = field.value ? field.value.split('\\n') : [''];\n\n    if ($('#' + id).length) {\n        return;\n    }\n\n    // add input rows\n    $.each(list, function (i, v) {\n        area.append(smart_field_row(v, i, field));\n    });\n\n    area.attr('id', id);\n    field = $(field);\n\n    if (field.attr('disabled')) {\n        area.hide();\n    }\n    // disable the original field anyway, we don't want it in POST\n    else {\n        field.prop('disabled', true);\n    }\n\n    if (field.data('hidden')) {\n        area.hide();\n    }\n\n    field.after(area);\n\n    if (field.hasClass('error')) {\n        area.addClass('error');\n        rcmail.managesieve_tip_register([[id, field.data('tip-class'), field.data('tip-msg')]]);\n    }\n}\n\nfunction smart_field_row(value, idx, field) {\n    // build row element content\n    var input, content = '<span class=\"listelement\">'\n      + '<span class=\"reset\"></span><input type=\"text\"></span>',\n        elem = $(content),\n        attrs = {\n            value: value,\n            name: field.name + '[]',\n            size: $(field).data('size'),\n            title: field.title,\n            placeholder: $(field).attr('placeholder'),\n        };\n\n    input = elem.find('input').attr(attrs).keydown(function (e) {\n        var input = $(this);\n\n        // element creation event (on Enter)\n        if (e.which == 13) {\n            var elem = smart_field_row('', (new Date()).getTime(), field);\n\n            input.parent().after(elem);\n            $('input', elem).focus();\n        }\n        // backspace or delete: remove input, focus previous one\n        else if ((e.which == 8 || e.which == 46) && input.val() == '') {\n            var parent = input.parent(), siblings = parent.parent().children();\n\n            if (siblings.length > 1) {\n                if (parent.prev().length) {\n                    parent.prev().children('input').focus();\n                } else {\n                    parent.next().children('input').focus();\n                }\n\n                parent.remove();\n                return false;\n            }\n        }\n    });\n\n    // element deletion event\n    $('span[class=\"reset\"]', elem).click(function () {\n        var span = $(this.parentNode);\n\n        if (span.parent().children().length > 1) {\n            span.remove();\n        } else {\n            $('input', span).val('').focus();\n        }\n    });\n\n    return elem;\n}\n\n// Reset and fill the smart list input with new data\nfunction smart_field_reset(field, data) {\n    if (window.UI && UI.smart_field_reset) {\n        return UI.smart_field_reset(field, data);\n    }\n\n    var id = field.id + '_list',\n        list = data.length ? data : [''];\n    area = $('#' + id);\n\n    area.empty();\n\n    // add input rows\n    $.each(list, function (i, v) {\n        area.append(smart_field_row(v, i, field));\n    });\n}\n\n// Register onmouse(leave/enter) events for tips on specified form element\nrcube_webmail.prototype.managesieve_tip_register = function (tips) {\n    if (window.UI && UI.form_errors) {\n        return UI.form_errors(tips);\n    }\n\n    var n, framed = parent.rcmail,\n        tip = framed ? parent.rcmail.env.ms_tip_layer : rcmail.env.ms_tip_layer;\n\n    for (n in tips) {\n        $('#' + tips[n][0])\n            .data('tip-class', tips[n][1])\n            .data('tip-msg', tips[n][2])\n            .mouseleave(function (e) {\n                tip.hide();\n            })\n            .mouseenter(function (e) {\n                var elem = $(this),\n                    offset = elem.offset(),\n                    left = offset.left,\n                    top = offset.top - 12,\n                    minwidth = elem.width(),\n                    span = $('<span>').addClass(elem.data('tip-class')).text(elem.data('tip-msg'));\n\n                if (framed) {\n                    offset = $((rcmail.env.task == 'mail' ? '#sievefilterform > iframe' : '#filter-box'), parent.document).offset();\n                    top += offset.top;\n                    left += offset.left;\n                }\n\n                tip.html('').append(span);\n                top -= tip.height();\n\n                tip.css({ left: left, top: top, minWidth: (minwidth - 2) + 'px' }).show();\n            });\n    }\n};\n\n// format time string\nfunction sieve_formattime(hour, minutes) {\n    var i, c, h, time = '', format = rcmail.env.time_format || 'H:i';\n\n    for (i = 0; i < format.length; i++) {\n        c = format.charAt(i);\n        switch (c) {\n            case 'a':\n                time += hour >= 12 ? 'pm' : 'am';\n\n                break;\n            case 'A':\n                time += hour >= 12 ? 'PM' : 'AM';\n\n                break;\n            case 'g':\n            case 'h':\n                h = hour % 12;\n                h = h === 0 ? 12 : h;\n                time += (c === 'h' && h < 10 ? '0' : '') + h;\n\n                break;\n            case 'G':\n                time += hour;\n\n                break;\n            case 'H':\n                time += (hour < 10 ? '0' : '') + hour;\n\n                break;\n            case 'i':\n                time += (minutes < 10 ? '0' : '') + minutes;\n\n                break;\n            case 's':\n                time += '00';\n\n                break;\n            default:\n                time += c;\n        }\n    }\n\n    return time;\n}\n\nfunction sieve_form_init() {\n    var form = rcmail.gui_objects.sieveform;\n\n    // resize dialog window\n    if (rcmail.env.action == 'plugin.managesieve' && rcmail.env.task == 'mail') {\n        parent.rcmail.managesieve_dialog_resize(form);\n    }\n\n    $('input[type=\"text\"]', form).first().focus();\n\n    // initialize smart list inputs\n    $('textarea[data-type=\"list\"]', form).each(function () {\n        smart_field_init(this);\n    });\n\n    // initialize rules form(s)\n    $('[name^=\"_header\"]', form).each(function () {\n        if (/([0-9]+)$/.test(this.id)) {\n            rule_header_select(RegExp.$1);\n        }\n    });\n\n    // enable date pickers on date fields\n    if ($.datepicker && rcmail.env.date_format) {\n        $.datepicker.setDefaults({\n            dateFormat: rcmail.env.date_format,\n            changeMonth: true,\n            showOtherMonths: true,\n            selectOtherMonths: true,\n            onSelect: function (dateText) {\n                $(this).focus().val(dateText);\n            },\n        });\n        $('input.datepicker').datepicker();\n    }\n\n    // configure drop-down menu on time input fields based on jquery UI autocomplete\n    $('#vacation_timefrom, #vacation_timeto')\n        .attr('autocomplete', 'off')\n        .autocomplete({\n            delay: 100,\n            minLength: 1,\n            source: function (p, callback) {\n                var h, result = [];\n                for (h = 0; h < 24; h++) {\n                    result.push(sieve_formattime(h, 0));\n                }\n                result.push(sieve_formattime(23, 59));\n\n                return callback(result);\n            },\n            open: function (event, ui) {\n                // scroll to current time\n                var $this = $(this), val = $this.val(),\n                    widget = $this.autocomplete('widget').css('width', '10em'),\n                    menu = $this.data('ui-autocomplete').menu;\n\n                if (val && val.length) {\n                    widget.children().each(function () {\n                        var li = $(this);\n                        if (li.text().indexOf(val) == 0) {\n                            menu._scrollIntoView(li);\n                        }\n                    });\n                }\n            },\n            select: function (event, ui) {\n                $(this).val(ui.item.value);\n                return false;\n            },\n        })\n        .click(function () { // show drop-down upon clicks\n            $(this).autocomplete('search', $(this).val() || ' ');\n        });\n\n    // display advanced controls when contain errors\n    $('input.error').each(function () {\n        if (String(this.id).match(/([0-9]+)$/)) {\n            $('#ruleadv' + RegExp.$1 + '.show').click();\n        }\n    });\n}\n\n/*********************************************************/\n/* ********        RAW editor methods            *********/\n/*********************************************************/\n\nvar cmeditor;\n\nfunction cmCreateErrorElem(msg) {\n    var marker = document.createElement('div');\n    marker.style.color = '#822';\n    marker.innerHTML = '\u25cf';\n    marker.title = msg;\n\n    return marker;\n}\n\nfunction cmScrollToError() {\n    var line = $('.CodeMirror-lines .line-error'),\n        scroll = $('.CodeMirror-scroll'),\n        h = line.parent();\n\n    scroll.scrollTop(line.offset().top - scroll.offset().top - Math.round(scroll.height() / 2));\n}\n\nfunction sieve_raw_editor_init() {\n    var textArea = document.getElementById('rawfiltersettxt');\n    if (textArea && !cmeditor) {\n        cmeditor = CodeMirror.fromTextArea(textArea, {\n            mode: 'sieve',\n            lineNumbers: true,\n            gutters: ['CodeMirror-linenumbers', 'errorGutter'],\n            styleActiveLine: true,\n        });\n\n        // fetching errors from environment and setting the line background\n        // and a gutter element with the error message accordingly\n        $.each(rcmail.env.sieve_errors || [], function (i, err) {\n            var lineNo = Number(err.line) - 1;\n            cmeditor.addLineClass(lineNo, 'background', 'line-error');\n            cmeditor.setGutterMarker(lineNo, 'errorGutter', cmCreateErrorElem(err.msg));\n            if (!i) {\n                cmScrollToError();\n            }\n        });\n    }\n}\n\n\n/*********************************************************/\n/* ********           Mail UI methods            *********/\n/*********************************************************/\n\nrcube_webmail.prototype.managesieve_create = function (force) {\n    if (!force && this.env.action != 'show') {\n        var uid = this.message_list.get_single_selection(),\n            lock = this.set_busy(true, 'loading');\n\n        this.http_post('plugin.managesieve-action', { _uid: uid }, lock);\n        return;\n    }\n\n    if (!this.env.sieve_headers || !this.env.sieve_headers.length) {\n        return;\n    }\n\n    var i, buttons = {},\n        title = this.get_label('managesieve.newfilter'),\n        dialog = $('<div id=\"sievefilterform\" class=\"propform\"></div>'),\n        props = { minWidth: 600, minHeight: 250, height: 300 };\n\n\n    // build dialog window content\n    dialog.append($('<fieldset>')\n        .append($('<legend>').text(this.get_label('managesieve.usedata')))\n        .append($('<ul class=\"proplist\">'))\n    );\n\n    $.each(this.env.sieve_headers, function (i, v) {\n        var attr = {\n                type: 'checkbox', name: 'headers[]', id: 'sievehdr' + i, value: i, checked: v[2] !== false,\n            },\n            label = v[0] + ': ' + v[1];\n\n        $('ul', dialog).append($('<li>')\n            .append($('<input>').attr(attr))\n            .append($('<label>').attr('for', 'sievehdr' + i).text(label))\n        );\n    });\n\n    // [Next Step] button action\n    buttons[this.get_label('managesieve.nextstep')] = function () {\n    // check if there's at least one checkbox checked\n        var hdrs = $('input[name=\"headers[]\"]:checked', dialog);\n        if (!hdrs.length) {\n            rcmail.alert_dialog(rcmail.get_label('managesieve.nodata'));\n            return;\n        }\n\n        // build frame URL\n        var url = rcmail.get_task_url('mail');\n        url = rcmail.add_url(url, '_action', 'plugin.managesieve');\n        url = rcmail.add_url(url, '_framed', 1);\n\n        hdrs.map(function () {\n            var val = rcmail.env.sieve_headers[this.value];\n            url = rcmail.add_url(url, 'r[' + this.value + ']', val[0] + ':' + val[1]);\n        });\n\n        // load form in the iframe\n        var buttons = {}, iframe = $('<iframe>').attr({ src: url, frameborder: 0 });\n\n        // Change [Next Step] button with [Save] button\n        buttons[rcmail.get_label('save')] = function () {\n            var win = $('iframe', dialog).get(0).contentWindow;\n            win.rcmail.managesieve_save();\n        };\n        buttons[rcmail.get_label('cancel')] = function () {\n            $(this).dialog('destroy');\n        };\n\n        dialog.dialog('destroy');\n\n        rcmail.env.managesieve_dialog = dialog = rcmail.show_popup_dialog(\n            iframe, title, buttons, $.extend(props, { button_classes: ['mainaction save', 'cancel'] })\n        );\n    };\n\n    buttons[this.get_label('cancel')] = function () {\n        $(this).dialog('destroy');\n    };\n\n    this.env.managesieve_dialog = dialog = this.show_popup_dialog(\n        dialog, title, buttons, $.extend(props, { button_classes: ['mainaction next', 'cancel'] })\n    );\n};\n\nrcube_webmail.prototype.managesieve_dialog_close = function () {\n    this.env.managesieve_dialog.dialog('destroy');\n};\n\nrcube_webmail.prototype.managesieve_dialog_resize = function (o) {\n    var dialog = this.env.managesieve_dialog,\n        win = $(window), form = $(o);\n    width = $('fieldset', o).first().width(), // fieldset width is more appropriate here\n    height = form.height(),\n    w = win.width(), h = win.height();\n\n    if (height < 100) {\n        return;\n    }\n\n    dialog.dialog('option', { height: Math.min(h - 20, height + 120), width: Math.min(w - 20, width + 65) });\n};\n", "patch": "@@ -181,7 +181,7 @@ rcube_webmail.prototype.managesieve_setget = function()\n   var id = this.filtersets_list.get_single_selection(),\n     script = this.env.filtersets[id];\n \n-  location.href = this.env.comm_path+'&_action=plugin.managesieve-action&_act=setget&_set='+urlencode(script);\n+  this.goto_url('plugin.managesieve-action', {_act: 'setget', _set: script}, false, true);\n };\n \n // Set activate/deactivate request", "file_path": "files/2016_8\\19", "file_language": "js", "file_name": "plugins/managesieve/managesieve.js", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/699af1e5206ed9114322adaa3c25c1c969640a53/plugins/zipdownload/zipdownload.js", "code": "/**\n * ZipDownload plugin script\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (c) 2013-2014, The Roundcube Dev Team\n *\n * The JavaScript code in this page is free software: you can redistribute it\n * and/or modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n */\n\nwindow.rcmail && rcmail.addEventListener('init', function(evt) {\n    // register additional actions\n    rcmail.register_command('download-eml', function() { rcmail_zipdownload('eml'); });\n    rcmail.register_command('download-mbox', function() { rcmail_zipdownload('mbox'); });\n    rcmail.register_command('download-maildir', function() { rcmail_zipdownload('maildir'); });\n\n    // commands status\n    rcmail.message_list && rcmail.message_list.addEventListener('select', function(list) {\n        var selected = list.get_selection().length;\n\n        rcmail.enable_command('download', selected > 0);\n        rcmail.enable_command('download-eml', selected == 1);\n        rcmail.enable_command('download-mbox', 'download-maildir', selected > 1);\n    });\n\n    // hook before default download action\n    rcmail.addEventListener('beforedownload', rcmail_zipdownload_menu);\n\n    // find and modify default download link/button\n    $.each(rcmail.buttons['download'] || [], function() {\n        var link = $('#' + this.id),\n            span = $('span', link);\n\n        if (!span.length) {\n            span = $('<span>');\n            link.html('').append(span);\n        }\n\n        span.text(rcmail.gettext('zipdownload.download'));\n        rcmail.env.download_link = link;\n    });\n  });\n\n\nfunction rcmail_zipdownload(mode)\n{\n    // default .eml download of single message\n    if (mode == 'eml') {\n        var uid = rcmail.get_single_uid();\n        rcmail.goto_url('viewsource', rcmail.params_from_uid(uid, {_save: 1}), false, true);\n        return;\n    }\n\n    // multi-message download, use hidden form to POST selection\n    if (rcmail.message_list && rcmail.message_list.get_selection().length > 1) {\n        var inputs = [], form = $('#zipdownload-form'),\n            post = rcmail.selection_post_data();\n\n        post._mode = mode;\n        post._token = rcmail.env.request_token;\n\n        $.each(post, function(k, v) {\n            if (typeof v == 'object' && v.length > 1) {\n              for (var j=0; j < v.length; j++)\n                  inputs.push($('<input>').attr({type: 'hidden', name: k+'[]', value: v[j]}));\n            }\n            else {\n                inputs.push($('<input>').attr({type: 'hidden', name: k, value: v}));\n            }\n        });\n\n        if (!form.length)\n            form = $('<form>').attr({\n                    style: 'display: none',\n                    method: 'POST',\n                    action: '?_task=mail&_action=plugin.zipdownload.messages'\n                })\n                .appendTo('body');\n\n        form.html('').append(inputs).submit();\n    }\n}\n\n// display download options menu\nfunction rcmail_zipdownload_menu(e)\n{\n    // show (sub)menu for download selection\n    rcmail.command('menu-open', 'zipdownload-menu', e && e.target ? e.target : rcmail.env.download_link, e);\n\n    // abort default download action\n    return false;\n}\n", "code_before": "/**\n * ZipDownload plugin script\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (c) The Roundcube Dev Team\n *\n * The JavaScript code in this page is free software: you can redistribute it\n * and/or modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n */\n\nwindow.rcmail && rcmail.addEventListener('init', function (evt) {\n    // register additional actions\n    rcmail.register_command('download-eml', function () {\n        rcmail_zipdownload('eml');\n    });\n    rcmail.register_command('download-mbox', function () {\n        rcmail_zipdownload('mbox');\n    });\n    rcmail.register_command('download-maildir', function () {\n        rcmail_zipdownload('maildir');\n    });\n\n    // commands status\n    rcmail.message_list && rcmail.message_list.addEventListener('select', function (list) {\n        var selected = list.get_selection().length;\n\n        rcmail.enable_command('download', selected > 0);\n    });\n\n    // hook before default download action\n    rcmail.addEventListener('beforedownload', rcmail_zipdownload_menu);\n\n    // find and modify default download link/button\n    $.each(rcmail.buttons.download || [], function () {\n        var link = $('#' + this.id),\n            span = $('span', link);\n\n        if (!span.length) {\n            span = $('<span>');\n            link.html('').append(span);\n        }\n\n        link.attr('aria-haspopup', 'true');\n\n        span.text(rcmail.get_label('zipdownload.download'));\n        rcmail.env.download_link = link;\n    });\n});\n\n\nfunction rcmail_zipdownload(mode) {\n    // default .eml download of single message\n    if (mode == 'eml') {\n        var uid = rcmail.get_single_uid();\n        rcmail.goto_url('viewsource', rcmail.params_from_uid(uid, { _save: 1 }), false, true);\n        return;\n    }\n\n    // multi-message download, use hidden form to POST selection\n    if (rcmail.message_list && rcmail.message_list.get_selection().length > 1) {\n        var inputs = [],\n            post = rcmail.selection_post_data(),\n            id = 'zipdownload-' + new Date().getTime(),\n            iframe = $('<iframe>').attr({ name: id, style: 'display:none' }),\n            form = $('<form>').attr({\n                target: id,\n                style: 'display: none',\n                method: 'post',\n                action: rcmail.url('mail/plugin.zipdownload.messages'),\n            });\n\n        post._mode = mode;\n        post._token = rcmail.env.request_token;\n\n        $.each(post, function (k, v) {\n            if (typeof v === 'object' && v.length > 1) {\n                for (var j = 0; j < v.length; j++) {\n                    inputs.push($('<input>').attr({ type: 'hidden', name: k + '[]', value: v[j] }));\n                }\n            } else {\n                inputs.push($('<input>').attr({ type: 'hidden', name: k, value: v }));\n            }\n        });\n\n        iframe.appendTo(document.body);\n        form.append(inputs).appendTo(document.body).submit();\n    }\n}\n\n// display download options menu\nfunction rcmail_zipdownload_menu(e) {\n    // Menu option status\n    var selected = rcmail.message_list.get_selection().length;\n    rcmail.enable_command('download-eml', selected == 1);\n    rcmail.enable_command('download-mbox', 'download-maildir', selected > 1);\n\n    // show (sub)menu for download selection\n    rcmail.command('menu-open', 'zipdownload-menu', e && e.target ? e.target : rcmail.env.download_link, e);\n\n    // abort default download action\n    return false;\n}\n", "patch": "@@ -54,7 +54,7 @@ function rcmail_zipdownload(mode)\n     // default .eml download of single message\n     if (mode == 'eml') {\n         var uid = rcmail.get_single_uid();\n-        rcmail.goto_url('viewsource', rcmail.params_from_uid(uid, {_save: 1}));\n+        rcmail.goto_url('viewsource', rcmail.params_from_uid(uid, {_save: 1}), false, true);\n         return;\n     }\n ", "file_path": "files/2016_8\\20", "file_language": "js", "file_name": "plugins/zipdownload/zipdownload.js", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/699af1e5206ed9114322adaa3c25c1c969640a53/plugins/zipdownload/zipdownload.php", "code": "<?php\n\n/**\n * ZipDownload\n *\n * Plugin to allow the download of all message attachments in one zip file\n * and downloading of many messages in one go.\n *\n * @version 3.0\n * @requires php_zip extension (including ZipArchive class)\n * @author Philip Weir\n * @author Thomas Bruderli\n * @author Aleksander Machniak\n */\nclass zipdownload extends rcube_plugin\n{\n    public $task = 'mail';\n    private $charset = 'ASCII';\n\n    /**\n     * Plugin initialization\n     */\n    public function init()\n    {\n        // check requirements first\n        if (!class_exists('ZipArchive', false)) {\n            rcmail::raise_error(array(\n                'code'    => 520,\n                'file'    => __FILE__,\n                'line'    => __LINE__,\n                'message' => \"php_zip extension is required for the zipdownload plugin\"), true, false);\n            return;\n        }\n\n        $rcmail = rcmail::get_instance();\n\n        $this->load_config();\n        $this->charset = $rcmail->config->get('zipdownload_charset', RCUBE_CHARSET);\n        $this->add_texts('localization');\n\n        if ($rcmail->config->get('zipdownload_attachments', 1) > -1 && ($rcmail->action == 'show' || $rcmail->action == 'preview')) {\n            $this->add_hook('template_object_messageattachments', array($this, 'attachment_ziplink'));\n        }\n\n        $this->register_action('plugin.zipdownload.attachments', array($this, 'download_attachments'));\n        $this->register_action('plugin.zipdownload.messages', array($this, 'download_messages'));\n\n        if (!$rcmail->action && $rcmail->config->get('zipdownload_selection')) {\n            $this->download_menu();\n        }\n    }\n\n    /**\n     * Place a link/button after attachments listing to trigger download\n     */\n    public function attachment_ziplink($p)\n    {\n        $rcmail = rcmail::get_instance();\n\n        // only show the link if there is more than the configured number of attachments\n        if (substr_count($p['content'], '<li') > $rcmail->config->get('zipdownload_attachments', 1)) {\n            $href = $rcmail->url(array(\n                '_action' => 'plugin.zipdownload.attachments',\n                '_mbox'   => $rcmail->output->env['mailbox'],\n                '_uid'    => $rcmail->output->env['uid'],\n            ), false, false, true);\n\n            $link = html::a(array('href' => $href, 'class' => 'button zipdownload'),\n                rcube::Q($this->gettext('downloadall'))\n            );\n\n            // append link to attachments list, slightly different in some skins\n            switch (rcmail::get_instance()->config->get('skin')) {\n                case 'classic':\n                    $p['content'] = str_replace('</ul>', html::tag('li', array('class' => 'zipdownload'), $link) . '</ul>', $p['content']);\n                    break;\n\n                default:\n                    $p['content'] .= $link;\n                    break;\n            }\n\n            $this->include_stylesheet($this->local_skin_path() . '/zipdownload.css');\n        }\n\n        return $p;\n    }\n\n    /**\n     * Adds download options menu to the page\n     */\n    public function download_menu()\n    {\n        $this->include_script('zipdownload.js');\n        $this->add_label('download');\n\n        $rcmail  = rcmail::get_instance();\n        $menu    = array();\n        $ul_attr = array('role' => 'menu', 'aria-labelledby' => 'aria-label-zipdownloadmenu');\n        if ($rcmail->config->get('skin') != 'classic') {\n            $ul_attr['class'] = 'toolbarmenu';\n        }\n\n        foreach (array('eml', 'mbox', 'maildir') as $type) {\n            $menu[] = html::tag('li', null, $rcmail->output->button(array(\n                    'command'  => \"download-$type\",\n                    'label'    => \"zipdownload.download$type\",\n                    'classact' => 'active',\n            )));\n        }\n\n        $rcmail->output->add_footer(html::div(array('id' => 'zipdownload-menu', 'class' => 'popupmenu', 'aria-hidden' => 'true'),\n            html::tag('h2', array('class' => 'voice', 'id' => 'aria-label-zipdownloadmenu'), \"Message Download Options Menu\") .\n            html::tag('ul', $ul_attr, implode('', $menu))));\n    }\n\n    /**\n     * Handler for attachment download action\n     */\n    public function download_attachments()\n    {\n        $rcmail    = rcmail::get_instance();\n\n        // require CSRF protected request\n        $rcmail->request_security_check(rcube_utils::INPUT_GET);\n\n        $imap      = $rcmail->get_storage();\n        $temp_dir  = $rcmail->config->get('temp_dir');\n        $tmpfname  = tempnam($temp_dir, 'zipdownload');\n        $tempfiles = array($tmpfname);\n        $message   = new rcube_message(rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET));\n\n        // open zip file\n        $zip = new ZipArchive();\n        $zip->open($tmpfname, ZIPARCHIVE::OVERWRITE);\n\n        foreach ($message->attachments as $part) {\n            $pid      = $part->mime_id;\n            $part     = $message->mime_parts[$pid];\n            $filename = $part->filename;\n\n            if ($filename === null || $filename === '') {\n                $ext      = (array) rcube_mime::get_mime_extensions($part->mimetype);\n                $ext      = array_shift($ext);\n                $filename = $rcmail->gettext('messagepart') . ' ' . $pid;\n                if ($ext) {\n                    $filename .= '.' . $ext;\n                }\n            }\n\n            $disp_name   = $this->_convert_filename($filename);\n            $tmpfn       = tempnam($temp_dir, 'zipattach');\n            $tmpfp       = fopen($tmpfn, 'w');\n            $tempfiles[] = $tmpfn;\n\n            $message->get_part_body($part->mime_id, false, 0, $tmpfp);\n            $zip->addFile($tmpfn, $disp_name);\n            fclose($tmpfp);\n        }\n\n        $zip->close();\n\n        $filename = ($message->subject ? $message->subject : 'roundcube') . '.zip';\n        $this->_deliver_zipfile($tmpfname, $filename);\n\n        // delete temporary files from disk\n        foreach ($tempfiles as $tmpfn) {\n            unlink($tmpfn);\n        }\n\n        exit;\n    }\n\n    /**\n     * Handler for message download action\n     */\n    public function download_messages()\n    {\n        $rcmail = rcmail::get_instance();\n\n        if ($rcmail->config->get('zipdownload_selection') && !empty($_POST['_uid'])) {\n            $messageset = rcmail::get_uids();\n            if (sizeof($messageset)) {\n                $this->_download_messages($messageset);\n            }\n        }\n    }\n\n    /**\n     * Helper method to packs all the given messages into a zip archive\n     *\n     * @param array List of message UIDs to download\n     */\n    private function _download_messages($messageset)\n    {\n        $rcmail    = rcmail::get_instance();\n        $imap      = $rcmail->get_storage();\n        $mode      = rcube_utils::get_input_value('_mode', rcube_utils::INPUT_POST);\n        $temp_dir  = $rcmail->config->get('temp_dir');\n        $tmpfname  = tempnam($temp_dir, 'zipdownload');\n        $tempfiles = array($tmpfname);\n        $folders   = count($messageset) > 1;\n\n        // @TODO: file size limit\n\n        // open zip file\n        $zip = new ZipArchive();\n        $zip->open($tmpfname, ZIPARCHIVE::OVERWRITE);\n\n        if ($mode == 'mbox') {\n            $tmpfp = fopen($tmpfname . '.mbox', 'w');\n        }\n\n        foreach ($messageset as $mbox => $uids) {\n            $imap->set_folder($mbox);\n            $path = $folders ? str_replace($imap->get_hierarchy_delimiter(), '/', $mbox) . '/' : '';\n\n            if ($uids === '*') {\n                $index = $imap->index($mbox, null, null, true);\n                $uids  = $index->get();\n            }\n\n            foreach ($uids as $uid) {\n                $headers = $imap->get_message_headers($uid);\n\n                if ($mode == 'mbox') {\n                    $from = rcube_mime::decode_address_list($headers->from, null, true, $headers->charset, true);\n                    $from = array_shift($from);\n\n                    // Mbox format header\n                    // @FIXME: \\r\\n or \\n\n                    // @FIXME: date format\n                    $header = sprintf(\"From %s %s\\r\\n\",\n                        // replace spaces with hyphens\n                        $from ? preg_replace('/\\s/', '-', $from) : 'MAILER-DAEMON',\n                        // internaldate\n                        $headers->internaldate\n                    );\n\n                    fwrite($tmpfp, $header);\n\n                    // Use stream filter to quote \"From \" in the message body\n                    stream_filter_register('mbox_filter', 'zipdownload_mbox_filter');\n                    $filter = stream_filter_append($tmpfp, 'mbox_filter');\n                    $imap->get_raw_body($uid, $tmpfp);\n                    stream_filter_remove($filter);\n                    fwrite($tmpfp, \"\\r\\n\");\n                }\n                else { // maildir\n                    $subject = rcube_mime::decode_mime_string((string)$headers->subject);\n                    $subject = $this->_convert_filename($subject);\n                    $subject = substr($subject, 0, 16);\n\n                    $disp_name = ($subject ? $subject : 'message_rfc822') . \".eml\";\n                    $disp_name = $path . $uid . \"_\" . $disp_name;\n\n                    $tmpfn = tempnam($temp_dir, 'zipmessage');\n                    $tmpfp = fopen($tmpfn, 'w');\n                    $imap->get_raw_body($uid, $tmpfp);\n                    $tempfiles[] = $tmpfn;\n                    fclose($tmpfp);\n                    $zip->addFile($tmpfn, $disp_name);\n                }\n            }\n        }\n\n        $filename = $folders ? 'messages' : $imap->get_folder();\n\n        if ($mode == 'mbox') {\n            $tempfiles[] = $tmpfname . '.mbox';\n            fclose($tmpfp);\n            $zip->addFile($tmpfname . '.mbox', $filename . '.mbox');\n        }\n\n        $zip->close();\n\n        $this->_deliver_zipfile($tmpfname, $filename . '.zip');\n\n        // delete temporary files from disk\n        foreach ($tempfiles as $tmpfn) {\n            unlink($tmpfn);\n        }\n\n        exit;\n    }\n\n    /**\n     * Helper method to send the zip archive to the browser\n     */\n    private function _deliver_zipfile($tmpfname, $filename)\n    {\n        $browser = new rcube_browser;\n        $rcmail  = rcmail::get_instance();\n\n        $rcmail->output->nocacheing_headers();\n\n        if ($browser->ie)\n            $filename = rawurlencode($filename);\n        else\n            $filename = addcslashes($filename, '\"');\n\n        // send download headers\n        header(\"Content-Type: application/octet-stream\");\n        if ($browser->ie) {\n            header(\"Content-Type: application/force-download\");\n        }\n\n        // don't kill the connection if download takes more than 30 sec.\n        @set_time_limit(0);\n        header(\"Content-Disposition: attachment; filename=\\\"\". $filename .\"\\\"\");\n        header(\"Content-length: \" . filesize($tmpfname));\n        readfile($tmpfname);\n    }\n\n    /**\n     * Helper function to convert filenames to the configured charset\n     */\n    private function _convert_filename($str)\n    {\n        $str = rcube_charset::convert($str, RCUBE_CHARSET, $this->charset);\n\n        return strtr($str, array(':' => '', '/' => '-'));\n    }\n}\n\nclass zipdownload_mbox_filter extends php_user_filter\n{\n    function filter($in, $out, &$consumed, $closing)\n    {\n        while ($bucket = stream_bucket_make_writeable($in)) {\n            // messages are read line by line\n            if (preg_match('/^>*From /', $bucket->data)) {\n                $bucket->data     = '>' . $bucket->data;\n                $bucket->datalen += 1;\n            }\n\n            $consumed += $bucket->datalen;\n            stream_bucket_append($out, $bucket);\n        }\n\n        return PSFS_PASS_ON;\n    }\n}\n", "code_before": "<?php\n\n/**\n * ZipDownload\n *\n * Plugin to allow the download of all message attachments in one zip file\n * and also download of many messages in one go.\n *\n * @requires php_zip extension (including ZipArchive class)\n *\n * @author Philip Weir\n * @author Thomas Bruderli\n * @author Aleksander Machniak\n */\nclass zipdownload extends rcube_plugin\n{\n    public $task = 'mail';\n\n    private $charset = 'ASCII';\n    private $names = [];\n    private $default_limit = '50MB';\n\n    // RFC4155: mbox date format\n    public const MBOX_DATE_FORMAT = 'D M d H:i:s Y';\n\n    /**\n     * Plugin initialization\n     */\n    #[Override]\n    public function init()\n    {\n        // check requirements first\n        if (!class_exists('ZipArchive', false)) {\n            rcmail::raise_error([\n                'code' => 520,\n                'message' => 'php-zip extension is required for the zipdownload plugin',\n            ], true, false);\n            return;\n        }\n\n        $rcmail = rcmail::get_instance();\n\n        $this->load_config();\n        $this->charset = $rcmail->config->get('zipdownload_charset', RCUBE_CHARSET);\n\n        if ($rcmail->config->get('zipdownload_attachments', 1) > -1 && ($rcmail->action == 'show' || $rcmail->action == 'preview')) {\n            $this->add_texts('localization');\n            $this->add_hook('template_object_messageattachments', [$this, 'attachment_ziplink']);\n        }\n\n        $this->register_action('plugin.zipdownload.attachments', [$this, 'download_attachments']);\n        $this->register_action('plugin.zipdownload.messages', [$this, 'download_messages']);\n\n        if (!$rcmail->action && $rcmail->config->get('zipdownload_selection', $this->default_limit)) {\n            $this->add_texts('localization');\n            $this->download_menu();\n        }\n    }\n\n    /**\n     * Place a link/button after attachments listing to trigger download\n     */\n    public function attachment_ziplink($p)\n    {\n        $rcmail = rcmail::get_instance();\n\n        // only show the link if there is more than the configured number of attachments\n        if (substr_count($p['content'], '<li') > $rcmail->config->get('zipdownload_attachments', 1)) {\n            $href = $rcmail->url([\n                    '_action' => 'plugin.zipdownload.attachments',\n                    '_mbox' => $rcmail->output->get_env('mailbox'),\n                    '_uid' => $rcmail->output->get_env('uid'),\n                ],\n                false, false, true\n            );\n\n            // append the link to the attachments list\n            $p['content'] .= html::a(\n                ['href' => $href, 'class' => 'button zipdownload'],\n                rcube::Q($this->gettext('downloadall'))\n            );\n\n            $this->include_stylesheet($this->local_skin_path() . '/zipdownload.css');\n        }\n\n        return $p;\n    }\n\n    /**\n     * Adds download options menu to the page\n     */\n    public function download_menu()\n    {\n        $this->include_script('zipdownload.js');\n        $this->add_label('export');\n\n        $rcmail = rcmail::get_instance();\n        $menu = [];\n        $ul_attr = [\n            'role' => 'menu',\n            'aria-labelledby' => 'aria-label-zipdownloadmenu',\n            'class' => 'toolbarmenu menu',\n        ];\n\n        foreach (['eml', 'mbox', 'maildir'] as $type) {\n            $menu[] = html::tag('li', null, $rcmail->output->button([\n                    'command' => \"download-{$type}\",\n                    'label' => \"zipdownload.download{$type}\",\n                    'class' => \"download {$type} disabled\",\n                    'classact' => \"download {$type} active\",\n                    'type' => 'link',\n                ])\n            );\n        }\n\n        $rcmail->output->add_footer(\n            html::div(['id' => 'zipdownload-menu', 'class' => 'popupmenu', 'aria-hidden' => 'true'],\n                html::tag('h2', ['class' => 'voice', 'id' => 'aria-label-zipdownloadmenu'], rcube::Q($this->gettext('exportmenu')))\n                . html::tag('ul', $ul_attr, implode('', $menu))\n            )\n        );\n    }\n\n    /**\n     * Handler for attachment download action\n     */\n    public function download_attachments()\n    {\n        $rcmail = rcmail::get_instance();\n\n        // require CSRF protected request\n        $rcmail->request_security_check(rcube_utils::INPUT_GET);\n\n        $tmpfname = rcube_utils::temp_filename('zipdownload');\n        $tempfiles = [$tmpfname];\n        $message = new rcube_message(rcube_utils::get_input_string('_uid', rcube_utils::INPUT_GET));\n\n        // open zip file\n        $zip = new ZipArchive();\n        $zip->open($tmpfname, ZipArchive::OVERWRITE);\n\n        foreach ($message->attachments as $part) {\n            $disp_name = $this->_create_displayname($part);\n\n            $tmpfn = rcube_utils::temp_filename('zipattach');\n            $tmpfp = fopen($tmpfn, 'w');\n            $tempfiles[] = $tmpfn;\n\n            $message->get_part_body($part->mime_id, false, 0, $tmpfp);\n            $zip->addFile($tmpfn, $disp_name);\n            fclose($tmpfp);\n        }\n\n        $zip->close();\n\n        $filename = ($this->_filename_from_subject($message->subject) ?: 'attachments') . '.zip';\n\n        $this->_deliver_zipfile($tmpfname, $filename);\n\n        // delete temporary files from disk\n        foreach ($tempfiles as $tmpfn) {\n            unlink($tmpfn);\n        }\n\n        exit;\n    }\n\n    /**\n     * Handler for message download action\n     */\n    public function download_messages()\n    {\n        $rcmail = rcmail::get_instance();\n\n        if ($rcmail->config->get('zipdownload_selection', $this->default_limit)) {\n            $messageset = rcmail_action::get_uids(null, null, $multi, rcube_utils::INPUT_POST);\n            if (count($messageset)) {\n                $this->_download_messages($messageset);\n            }\n        }\n    }\n\n    /**\n     * Create and get display name of attachment part to add on zip file\n     *\n     * @param rcube_message_part $part Part of attachment on message\n     *\n     * @return string Display name of attachment part\n     */\n    private function _create_displayname($part)\n    {\n        $rcmail = rcmail::get_instance();\n        $filename = $part->filename;\n\n        if ($filename === null || $filename === '') {\n            $ext = array_first((array) rcube_mime::get_mime_extensions($part->mimetype));\n            $filename = $rcmail->gettext('messagepart') . ' ' . $part->mime_id;\n            if ($ext) {\n                $filename .= '.' . $ext;\n            }\n        }\n\n        $displayname = $this->_convert_filename($filename);\n\n        /*\n         * Adding a number before dot of extension on a name of file with same name on zip\n         * Ext: attach(1).txt on attach filename that has a attach.txt filename on same zip\n         */\n        if (isset($this->names[$displayname])) {\n            [$filename, $ext] = preg_split('/\\.(?=[^\\.]*$)/', $displayname);\n            $displayname = $filename . '(' . ($this->names[$displayname]++) . ').' . $ext;\n            $this->names[$displayname] = 1;\n        } else {\n            $this->names[$displayname] = 1;\n        }\n\n        return $displayname;\n    }\n\n    /**\n     * Helper method to packs all the given messages into a zip archive\n     *\n     * @param array $messageset List of message UIDs to download\n     */\n    private function _download_messages($messageset)\n    {\n        $this->add_texts('localization');\n\n        $rcmail = rcmail::get_instance();\n        $imap = $rcmail->get_storage();\n        $mode = rcube_utils::get_input_string('_mode', rcube_utils::INPUT_POST);\n        $limit = $rcmail->config->get('zipdownload_selection', $this->default_limit);\n        $limit = $limit !== true ? parse_bytes($limit) : -1;\n        $delimiter = $imap->get_hierarchy_delimiter();\n        $tmpfname = rcube_utils::temp_filename('zipdownload');\n        $tempfiles = [$tmpfname];\n        $folders = count($messageset) > 1;\n        $timezone = new DateTimeZone('UTC');\n        $messages = [];\n        $size = 0;\n\n        // collect messages metadata (and check size limit)\n        foreach ($messageset as $mbox => $uids) {\n            $imap->set_folder($mbox);\n\n            if ($uids === '*') {\n                $index = $imap->index($mbox, null, null, true);\n                $uids = $index->get();\n            }\n\n            foreach ($uids as $uid) {\n                $headers = $imap->get_message_headers($uid);\n\n                if ($mode == 'mbox') {\n                    // Sender address\n                    $from = rcube_mime::decode_address_list($headers->from, null, true, $headers->charset, true);\n                    $from = array_shift($from);\n                    $from = preg_replace('/\\s/', '-', $from);\n\n                    // Received (internal) date\n                    $date = rcube_utils::anytodatetime($headers->internaldate, $timezone);\n                    if ($date) {\n                        $date = $date->format(self::MBOX_DATE_FORMAT);\n                    }\n\n                    // Mbox format header (RFC4155)\n                    $header = sprintf(\"From %s %s\\r\\n\",\n                        $from ?: 'MAILER-DAEMON',\n                        $date ?: ''\n                    );\n\n                    $messages[$uid . ':' . $mbox] = $header;\n                } else { // maildir\n                    $subject = rcube_mime::decode_header($headers->subject, $headers->charset);\n                    $subject = $this->_filename_from_subject(mb_substr($subject, 0, 16));\n                    $subject = $this->_convert_filename($subject);\n\n                    $path = $folders ? str_replace($delimiter, '/', $mbox) . '/' : '';\n                    $disp_name = $path . $uid . ($subject ? \" {$subject}\" : '') . '.eml';\n\n                    $messages[$uid . ':' . $mbox] = $disp_name;\n                }\n\n                $size += $headers->size;\n\n                if ($limit > 0 && $size > $limit) {\n                    unlink($tmpfname);\n\n                    $msg = $this->gettext([\n                        'name' => 'sizelimiterror',\n                        'vars' => ['$size' => rcmail_action::show_bytes($limit)],\n                    ]);\n\n                    $rcmail->output->show_message($msg, 'error');\n                    $rcmail->output->send('iframe');\n                    exit;\n                }\n            }\n        }\n\n        if ($mode == 'mbox') {\n            $tmpfp = fopen($tmpfname . '.mbox', 'w');\n            if (!$tmpfp) {\n                exit;\n            }\n        }\n\n        // open zip file\n        $zip = new ZipArchive();\n        $zip->open($tmpfname, ZipArchive::OVERWRITE);\n\n        $last_key = array_key_last($messages);\n        foreach ($messages as $key => $value) {\n            [$uid, $mbox] = explode(':', $key, 2);\n            $imap->set_folder($mbox);\n\n            if (!empty($tmpfp)) {\n                fwrite($tmpfp, $value);\n\n                // Use stream filter to quote \"From \" in the message body\n                stream_filter_register('mbox_filter', 'zipdownload_mbox_filter');\n                $filter = stream_filter_append($tmpfp, 'mbox_filter');\n                $imap->get_raw_body($uid, $tmpfp);\n                stream_filter_remove($filter);\n\n                // Make sure the delimiter is a double \\r\\n\n                $fstat = fstat($tmpfp);\n                if (stream_get_contents($tmpfp, 2, $fstat['size'] - 2) != \"\\r\\n\") {\n                    fwrite($tmpfp, \"\\r\\n\");\n                }\n                if ($key != $last_key) {\n                    fwrite($tmpfp, \"\\r\\n\");\n                }\n            } else { // maildir\n                $tmpfn = rcube_utils::temp_filename('zipmessage');\n                $fp = fopen($tmpfn, 'w');\n                $imap->get_raw_body($uid, $fp);\n                $tempfiles[] = $tmpfn;\n                fclose($fp);\n                $zip->addFile($tmpfn, $value);\n            }\n        }\n\n        $filename = $folders ? 'messages' : $imap->get_folder();\n\n        if (!empty($tmpfp)) {\n            $tempfiles[] = $tmpfname . '.mbox';\n            fclose($tmpfp);\n            $zip->addFile($tmpfname . '.mbox', $filename . '.mbox');\n        }\n\n        $zip->close();\n\n        $this->_deliver_zipfile($tmpfname, $filename . '.zip');\n\n        // delete temporary files from disk\n        foreach ($tempfiles as $tmpfn) {\n            unlink($tmpfn);\n        }\n\n        exit;\n    }\n\n    /**\n     * Helper method to send the zip archive to the browser\n     */\n    private function _deliver_zipfile($tmpfname, $filename)\n    {\n        $rcmail = rcmail::get_instance();\n\n        $rcmail->output->download_headers($filename, ['length' => filesize($tmpfname)]);\n\n        readfile($tmpfname);\n    }\n\n    /**\n     * Helper function to convert filenames to the configured charset\n     */\n    private function _convert_filename($str)\n    {\n        $str = strtr($str, [':' => '', '/' => '-']);\n\n        return rcube_charset::convert($str, RCUBE_CHARSET, $this->charset);\n    }\n\n    /**\n     * Helper function to convert message subject into filename\n     */\n    private function _filename_from_subject($str)\n    {\n        $str = preg_replace('/[\\t\\n\\r\\0\\x0B]+\\s*/', ' ', $str);\n\n        return trim($str, ' ./_');\n    }\n}\n\nclass zipdownload_mbox_filter extends php_user_filter\n{\n    #[Override]\n    #[ReturnTypeWillChange]\n    public function filter($in, $out, &$consumed, $closing)\n    {\n        while ($bucket = stream_bucket_make_writeable($in)) {\n            // messages are read line by line\n            if (preg_match('/^>*From /', $bucket->data)) {\n                $bucket->data = '>' . $bucket->data;\n                $bucket->datalen++;\n            }\n\n            $consumed += (int) $bucket->datalen;\n            stream_bucket_append($out, $bucket);\n        }\n\n        return \\PSFS_PASS_ON;\n    }\n}\n", "patch": "@@ -63,7 +63,7 @@ public function attachment_ziplink($p)\n                 '_action' => 'plugin.zipdownload.attachments',\n                 '_mbox'   => $rcmail->output->env['mailbox'],\n                 '_uid'    => $rcmail->output->env['uid'],\n-            ));\n+            ), false, false, true);\n \n             $link = html::a(array('href' => $href, 'class' => 'button zipdownload'),\n                 rcube::Q($this->gettext('downloadall'))\n@@ -120,6 +120,10 @@ public function download_menu()\n     public function download_attachments()\n     {\n         $rcmail    = rcmail::get_instance();\n+\n+        // require CSRF protected request\n+        $rcmail->request_security_check(rcube_utils::INPUT_GET);\n+\n         $imap      = $rcmail->get_storage();\n         $temp_dir  = $rcmail->config->get('temp_dir');\n         $tmpfname  = tempnam($temp_dir, 'zipdownload');", "file_path": "files/2016_8\\21", "file_language": "php", "file_name": "plugins/zipdownload/zipdownload.php", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/699af1e5206ed9114322adaa3c25c1c969640a53/program/include/rcmail.php", "code": "<?php\n\n/*\n +-----------------------------------------------------------------------+\n | program/include/rcmail.php                                            |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2008-2014, The Roundcube Dev Team                       |\n | Copyright (C) 2011-2014, Kolab Systems AG                             |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Application class providing core functions and holding              |\n |   instances of all 'global' objects like db- and imap-connections     |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <alec@alec.pl>                            |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Application class of Roundcube Webmail\n * implemented as singleton\n *\n * @package Webmail\n */\nclass rcmail extends rcube\n{\n    /**\n     * Main tasks.\n     *\n     * @var array\n     */\n    static public $main_tasks = array('mail','settings','addressbook','login','logout','utils','dummy');\n\n    /**\n     * Current task.\n     *\n     * @var string\n     */\n    public $task;\n\n    /**\n     * Current action.\n     *\n     * @var string\n     */\n    public $action    = '';\n    public $comm_path = './';\n    public $filename  = '';\n\n    private $address_books = array();\n    private $action_map    = array();\n\n\n    const ERROR_STORAGE          = -2;\n    const ERROR_INVALID_REQUEST  = 1;\n    const ERROR_INVALID_HOST     = 2;\n    const ERROR_COOKIES_DISABLED = 3;\n\n\n    /**\n     * This implements the 'singleton' design pattern\n     *\n     * @param string Environment name to run (e.g. live, dev, test)\n     *\n     * @return rcmail The one and only instance\n     */\n    static function get_instance($env = '')\n    {\n        if (!self::$instance || !is_a(self::$instance, 'rcmail')) {\n            self::$instance = new rcmail($env);\n            // init AFTER object was linked with self::$instance\n            self::$instance->startup();\n        }\n\n        return self::$instance;\n    }\n\n    /**\n     * Initial startup function\n     * to register session, create database and imap connections\n     */\n    protected function startup()\n    {\n        $this->init(self::INIT_WITH_DB | self::INIT_WITH_PLUGINS);\n\n        // set filename if not index.php\n        if (($basename = basename($_SERVER['SCRIPT_FILENAME'])) && $basename != 'index.php') {\n            $this->filename = $basename;\n        }\n\n        // start session\n        $this->session_init();\n\n        // create user object\n        $this->set_user(new rcube_user($_SESSION['user_id']));\n\n        // set task and action properties\n        $this->set_task(rcube_utils::get_input_value('_task', rcube_utils::INPUT_GPC));\n        $this->action = asciiwords(rcube_utils::get_input_value('_action', rcube_utils::INPUT_GPC));\n\n        // reset some session parameters when changing task\n        if ($this->task != 'utils') {\n            // we reset list page when switching to another task\n            // but only to the main task interface - empty action (#1489076, #1490116)\n            // this will prevent from unintentional page reset on cross-task requests\n            if ($this->session && $_SESSION['task'] != $this->task && empty($this->action)) {\n                $this->session->remove('page');\n\n                // set current task to session\n                $_SESSION['task'] = $this->task;\n            }\n        }\n\n        // init output class (not in CLI mode)\n        if (!empty($_REQUEST['_remote'])) {\n            $GLOBALS['OUTPUT'] = $this->json_init();\n        }\n        else if ($_SERVER['REMOTE_ADDR']) {\n            $GLOBALS['OUTPUT'] = $this->load_gui(!empty($_REQUEST['_framed']));\n        }\n\n        // load plugins\n        $this->plugins->init($this, $this->task);\n        $this->plugins->load_plugins((array)$this->config->get('plugins', array()),\n            array('filesystem_attachments', 'jqueryui'));\n    }\n\n    /**\n     * Setter for application task\n     *\n     * @param string Task to set\n     */\n    public function set_task($task)\n    {\n        $task = asciiwords($task, true);\n\n        if ($this->user && $this->user->ID)\n            $task = !$task ? 'mail' : $task;\n        else if (php_sapi_name() == 'cli')\n            $task = 'cli';\n        else\n            $task = 'login';\n\n        $this->task      = $task;\n        $this->comm_path = $this->url(array('task' => $this->task));\n\n        if (!empty($_REQUEST['_framed'])) {\n            $this->comm_path .= '&_framed=1';\n        }\n\n        if ($this->output) {\n            $this->output->set_env('task', $this->task);\n            $this->output->set_env('comm_path', $this->comm_path);\n        }\n    }\n\n    /**\n     * Setter for system user object\n     *\n     * @param rcube_user Current user instance\n     */\n    public function set_user($user)\n    {\n        parent::set_user($user);\n\n        $lang = $this->language_prop($this->config->get('language', $_SESSION['language']));\n        $_SESSION['language'] = $this->user->language = $lang;\n\n        // set localization\n        setlocale(LC_ALL, $lang . '.utf8', $lang . '.UTF-8', 'en_US.utf8', 'en_US.UTF-8');\n\n        // Workaround for http://bugs.php.net/bug.php?id=18556\n        // Also strtoupper/strtolower and other methods are locale-aware\n        // for these locales it is problematic (#1490519)\n        if (in_array($lang, array('tr_TR', 'ku', 'az_AZ'))) {\n            setlocale(LC_CTYPE, 'en_US.utf8', 'en_US.UTF-8', 'C');\n        }\n    }\n\n    /**\n     * Return instance of the internal address book class\n     *\n     * @param string  Address book identifier (-1 for default addressbook)\n     * @param boolean True if the address book needs to be writeable\n     *\n     * @return rcube_contacts Address book object\n     */\n    public function get_address_book($id, $writeable = false)\n    {\n        $contacts    = null;\n        $ldap_config = (array)$this->config->get('ldap_public');\n\n        // 'sql' is the alias for '0' used by autocomplete\n        if ($id == 'sql')\n            $id = '0';\n        else if ($id == -1) {\n            $id = $this->config->get('default_addressbook');\n            $default = true;\n        }\n\n        // use existing instance\n        if (isset($this->address_books[$id]) && ($this->address_books[$id] instanceof rcube_addressbook)) {\n            $contacts = $this->address_books[$id];\n        }\n        else if ($id && $ldap_config[$id]) {\n            $domain   = $this->config->mail_domain($_SESSION['storage_host']);\n            $contacts = new rcube_ldap($ldap_config[$id], $this->config->get('ldap_debug'), $domain);\n        }\n        else if ($id === '0') {\n            $contacts = new rcube_contacts($this->db, $this->get_user_id());\n        }\n        else {\n            $plugin = $this->plugins->exec_hook('addressbook_get', array('id' => $id, 'writeable' => $writeable));\n\n            // plugin returned instance of a rcube_addressbook\n            if ($plugin['instance'] instanceof rcube_addressbook) {\n                $contacts = $plugin['instance'];\n            }\n        }\n\n        // when user requested default writeable addressbook\n        // we need to check if default is writeable, if not we\n        // will return first writeable book (if any exist)\n        if ($contacts && $default && $contacts->readonly && $writeable) {\n            $contacts = null;\n        }\n\n        // Get first addressbook from the list if configured default doesn't exist\n        // This can happen when user deleted the addressbook (e.g. Kolab folder)\n        if (!$contacts && (!$id || $default)) {\n            $source = reset($this->get_address_sources($writeable, !$default));\n            if (!empty($source)) {\n                $contacts = $this->get_address_book($source['id']);\n                if ($contacts) {\n                    $id = $source['id'];\n                }\n            }\n        }\n\n        if (!$contacts) {\n            // there's no default, just return\n            if ($default) {\n                return null;\n            }\n\n            self::raise_error(array(\n                    'code'    => 700,\n                    'file'    => __FILE__,\n                    'line'    => __LINE__,\n                    'message' => \"Addressbook source ($id) not found!\"\n                ),\n                true, true);\n        }\n\n        // add to the 'books' array for shutdown function\n        $this->address_books[$id] = $contacts;\n\n        if ($writeable && $contacts->readonly) {\n            return null;\n        }\n\n        // set configured sort order\n        if ($sort_col = $this->config->get('addressbook_sort_col')) {\n            $contacts->set_sort_order($sort_col);\n        }\n\n        return $contacts;\n    }\n\n    /**\n     * Return identifier of the address book object\n     *\n     * @param rcube_addressbook Addressbook source object\n     *\n     * @return string Source identifier\n     */\n    public function get_address_book_id($object)\n    {\n        foreach ($this->address_books as $index => $book) {\n            if ($book === $object) {\n                return $index;\n            }\n        }\n    }\n\n    /**\n     * Return address books list\n     *\n     * @param boolean True if the address book needs to be writeable\n     * @param boolean True if the address book needs to be not hidden\n     *\n     * @return array  Address books array\n     */\n    public function get_address_sources($writeable = false, $skip_hidden = false)\n    {\n        $abook_type   = (string) $this->config->get('address_book_type');\n        $ldap_config  = (array) $this->config->get('ldap_public');\n        $autocomplete = (array) $this->config->get('autocomplete_addressbooks');\n        $list         = array();\n\n        // We are using the DB address book or a plugin address book\n        if (!empty($abook_type) && strtolower($abook_type) != 'ldap') {\n            if (!isset($this->address_books['0'])) {\n                $this->address_books['0'] = new rcube_contacts($this->db, $this->get_user_id());\n            }\n\n            $list['0'] = array(\n                'id'       => '0',\n                'name'     => $this->gettext('personaladrbook'),\n                'groups'   => $this->address_books['0']->groups,\n                'readonly' => $this->address_books['0']->readonly,\n                'undelete' => $this->address_books['0']->undelete && $this->config->get('undo_timeout'),\n                'autocomplete' => in_array('sql', $autocomplete),\n            );\n        }\n\n        if (!empty($ldap_config)) {\n            foreach ($ldap_config as $id => $prop) {\n                // handle misconfiguration\n                if (empty($prop) || !is_array($prop)) {\n                    continue;\n                }\n\n                $list[$id] = array(\n                    'id'       => $id,\n                    'name'     => html::quote($prop['name']),\n                    'groups'   => !empty($prop['groups']) || !empty($prop['group_filters']),\n                    'readonly' => !$prop['writable'],\n                    'hidden'   => $prop['hidden'],\n                    'autocomplete' => in_array($id, $autocomplete)\n                );\n            }\n        }\n\n        $plugin = $this->plugins->exec_hook('addressbooks_list', array('sources' => $list));\n        $list   = $plugin['sources'];\n\n        foreach ($list as $idx => $item) {\n            // register source for shutdown function\n            if (!is_object($this->address_books[$item['id']])) {\n                $this->address_books[$item['id']] = $item;\n            }\n            // remove from list if not writeable as requested\n            if ($writeable && $item['readonly']) {\n                unset($list[$idx]);\n            }\n            // remove from list if hidden as requested\n            else if ($skip_hidden && $item['hidden']) {\n                unset($list[$idx]);\n            }\n        }\n\n        return $list;\n    }\n\n    /**\n     * Getter for compose responses.\n     * These are stored in local config and user preferences.\n     *\n     * @param boolean True to sort the list alphabetically\n     * @param boolean True if only this user's responses shall be listed\n     *\n     * @return array List of the current user's stored responses\n     */\n    public function get_compose_responses($sorted = false, $user_only = false)\n    {\n        $responses = array();\n\n        if (!$user_only) {\n            foreach ($this->config->get('compose_responses_static', array()) as $response) {\n                if (empty($response['key'])) {\n                    $response['key']    = substr(md5($response['name']), 0, 16);\n                }\n\n                $response['static'] = true;\n                $response['class']  = 'readonly';\n\n                $k = $sorted ? '0000-' . strtolower($response['name']) : $response['key'];\n                $responses[$k] = $response;\n            }\n        }\n\n        foreach ($this->config->get('compose_responses', array()) as $response) {\n            if (empty($response['key'])) {\n                $response['key'] = substr(md5($response['name']), 0, 16);\n            }\n\n            $k = $sorted ? strtolower($response['name']) : $response['key'];\n            $responses[$k] = $response;\n        }\n\n        // sort list by name\n        if ($sorted) {\n            ksort($responses, SORT_LOCALE_STRING);\n        }\n\n        return array_values($responses);\n    }\n\n    /**\n     * Init output object for GUI and add common scripts.\n     * This will instantiate a rcmail_output_html object and set\n     * environment vars according to the current session and configuration\n     *\n     * @param boolean True if this request is loaded in a (i)frame\n     *\n     * @return rcube_output Reference to HTML output object\n     */\n    public function load_gui($framed = false)\n    {\n        // init output page\n        if (!($this->output instanceof rcmail_output_html)) {\n            $this->output = new rcmail_output_html($this->task, $framed);\n        }\n\n        // set refresh interval\n        $this->output->set_env('refresh_interval', $this->config->get('refresh_interval', 0));\n        $this->output->set_env('session_lifetime', $this->config->get('session_lifetime', 0) * 60);\n\n        if ($framed) {\n            $this->comm_path .= '&_framed=1';\n            $this->output->set_env('framed', true);\n        }\n\n        $this->output->set_env('task', $this->task);\n        $this->output->set_env('action', $this->action);\n        $this->output->set_env('comm_path', $this->comm_path);\n        $this->output->set_charset(RCUBE_CHARSET);\n\n        if ($this->user && $this->user->ID) {\n            $this->output->set_env('user_id', $this->user->get_hash());\n        }\n\n        // set compose mode for all tasks (message compose step can be triggered from everywhere)\n        $this->output->set_env('compose_extwin', $this->config->get('compose_extwin',false));\n\n        // add some basic labels to client\n        $this->output->add_label('loading', 'servererror', 'connerror', 'requesttimedout',\n            'refreshing', 'windowopenerror', 'uploadingmany');\n\n        return $this->output;\n    }\n\n    /**\n     * Create an output object for JSON responses\n     *\n     * @return rcube_output Reference to JSON output object\n     */\n    public function json_init()\n    {\n        if (!($this->output instanceof rcmail_output_json)) {\n            $this->output = new rcmail_output_json($this->task);\n        }\n\n        return $this->output;\n    }\n\n    /**\n     * Create session object and start the session.\n     */\n    public function session_init()\n    {\n        parent::session_init();\n\n        // set initial session vars\n        if (!$_SESSION['user_id']) {\n            $_SESSION['temp'] = true;\n        }\n\n        // restore skin selection after logout\n        if ($_SESSION['temp'] && !empty($_SESSION['skin'])) {\n            $this->config->set('skin', $_SESSION['skin']);\n        }\n    }\n\n    /**\n     * Perfom login to the mail server and to the webmail service.\n     * This will also create a new user entry if auto_create_user is configured.\n     *\n     * @param string Mail storage (IMAP) user name\n     * @param string Mail storage (IMAP) password\n     * @param string Mail storage (IMAP) host\n     * @param bool   Enables cookie check\n     *\n     * @return boolean True on success, False on failure\n     */\n    function login($username, $pass, $host = null, $cookiecheck = false)\n    {\n        $this->login_error = null;\n\n        if (empty($username)) {\n            return false;\n        }\n\n        if ($cookiecheck && empty($_COOKIE)) {\n            $this->login_error = self::ERROR_COOKIES_DISABLED;\n            return false;\n        }\n\n        $default_host    = $this->config->get('default_host');\n        $default_port    = $this->config->get('default_port');\n        $username_domain = $this->config->get('username_domain');\n        $login_lc        = $this->config->get('login_lc', 2);\n\n        // host is validated in rcmail::autoselect_host(), so here\n        // we'll only handle unset host (if possible)\n        if (!$host && !empty($default_host)) {\n            if (is_array($default_host)) {\n                list($key, $val) = each($default_host);\n                $host = is_numeric($key) ? $val : $key;\n            }\n            else {\n                $host = $default_host;\n            }\n\n            $host = rcube_utils::parse_host($host);\n        }\n\n        if (!$host) {\n            $this->login_error = self::ERROR_INVALID_HOST;\n            return false;\n        }\n\n        // parse $host URL\n        $a_host = parse_url($host);\n        if ($a_host['host']) {\n            $host = $a_host['host'];\n            $ssl  = (isset($a_host['scheme']) && in_array($a_host['scheme'], array('ssl','imaps','tls'))) ? $a_host['scheme'] : null;\n\n            if (!empty($a_host['port']))\n                $port = $a_host['port'];\n            else if ($ssl && $ssl != 'tls' && (!$default_port || $default_port == 143))\n                $port = 993;\n        }\n\n        if (!$port) {\n            $port = $default_port;\n        }\n\n        // Check if we need to add/force domain to username\n        if (!empty($username_domain)) {\n            $domain = is_array($username_domain) ? $username_domain[$host] : $username_domain;\n\n            if ($domain = rcube_utils::parse_host((string)$domain, $host)) {\n                $pos = strpos($username, '@');\n\n                // force configured domains\n                if ($pos !== false && $this->config->get('username_domain_forced')) {\n                    $username = substr($username, 0, $pos) . '@' . $domain;\n                }\n                // just add domain if not specified\n                else if ($pos === false) {\n                    $username .= '@' . $domain;\n                }\n            }\n        }\n\n        // Convert username to lowercase. If storage backend\n        // is case-insensitive we need to store always the same username (#1487113)\n        if ($login_lc) {\n            if ($login_lc == 2 || $login_lc === true) {\n                $username = mb_strtolower($username);\n            }\n            else if (strpos($username, '@')) {\n                // lowercase domain name\n                list($local, $domain) = explode('@', $username);\n                $username = $local . '@' . mb_strtolower($domain);\n            }\n        }\n\n        // try to resolve email address from virtuser table\n        if (strpos($username, '@') && ($virtuser = rcube_user::email2user($username))) {\n            $username = $virtuser;\n        }\n\n        // Here we need IDNA ASCII\n        // Only rcube_contacts class is using domain names in Unicode\n        $host     = rcube_utils::idn_to_ascii($host);\n        $username = rcube_utils::idn_to_ascii($username);\n\n        // user already registered -> overwrite username\n        if ($user = rcube_user::query($username, $host)) {\n            $username = $user->data['username'];\n        }\n\n        $storage = $this->get_storage();\n\n        // try to log in\n        if (!$storage->connect($host, $username, $pass, $port, $ssl)) {\n            // Wait a second to slow down brute-force attacks (#1490549)\n            sleep(1);\n            return false;\n        }\n\n        // user already registered -> update user's record\n        if (is_object($user)) {\n            // update last login timestamp\n            $user->touch();\n        }\n        // create new system user\n        else if ($this->config->get('auto_create_user')) {\n            if ($created = rcube_user::create($username, $host)) {\n                $user = $created;\n            }\n            else {\n                self::raise_error(array(\n                        'code'    => 620,\n                        'file'    => __FILE__,\n                        'line'    => __LINE__,\n                        'message' => \"Failed to create a user record. Maybe aborted by a plugin?\"\n                    ),\n                    true, false);\n            }\n        }\n        else {\n            self::raise_error(array(\n                    'code'    => 621,\n                    'file'    => __FILE__,\n                    'line'    => __LINE__,\n                    'message' => \"Access denied for new user $username. 'auto_create_user' is disabled\"\n                ),\n                true, false);\n        }\n\n        // login succeeded\n        if (is_object($user) && $user->ID) {\n            // Configure environment\n            $this->set_user($user);\n            $this->set_storage_prop();\n\n            // set session vars\n            $_SESSION['user_id']      = $user->ID;\n            $_SESSION['username']     = $user->data['username'];\n            $_SESSION['storage_host'] = $host;\n            $_SESSION['storage_port'] = $port;\n            $_SESSION['storage_ssl']  = $ssl;\n            $_SESSION['password']     = $this->encrypt($pass);\n            $_SESSION['login_time']   = time();\n\n            if (isset($_REQUEST['_timezone']) && $_REQUEST['_timezone'] != '_default_') {\n                $_SESSION['timezone'] = rcube_utils::get_input_value('_timezone', rcube_utils::INPUT_GPC);\n            }\n\n            // fix some old settings according to namespace prefix\n            $this->fix_namespace_settings($user);\n\n            // set/create special folders\n            $this->set_special_folders();\n\n            // clear all mailboxes related cache(s)\n            $storage->clear_cache('mailboxes', true);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns error code of last login operation\n     *\n     * @return int Error code\n     */\n    public function login_error()\n    {\n        if ($this->login_error) {\n            return $this->login_error;\n        }\n\n        if ($this->storage && $this->storage->get_error_code() < -1) {\n            return self::ERROR_STORAGE;\n        }\n    }\n\n    /**\n     * Auto-select IMAP host based on the posted login information\n     *\n     * @return string Selected IMAP host\n     */\n    public function autoselect_host()\n    {\n        $default_host = $this->config->get('default_host');\n        $host         = null;\n\n        if (is_array($default_host)) {\n            $post_host = rcube_utils::get_input_value('_host', rcube_utils::INPUT_POST);\n            $post_user = rcube_utils::get_input_value('_user', rcube_utils::INPUT_POST);\n\n            list(, $domain) = explode('@', $post_user);\n\n            // direct match in default_host array\n            if ($default_host[$post_host] || in_array($post_host, array_values($default_host))) {\n                $host = $post_host;\n            }\n            // try to select host by mail domain\n            else if (!empty($domain)) {\n                foreach ($default_host as $storage_host => $mail_domains) {\n                    if (is_array($mail_domains) && in_array_nocase($domain, $mail_domains)) {\n                        $host = $storage_host;\n                        break;\n                    }\n                    else if (stripos($storage_host, $domain) !== false || stripos(strval($mail_domains), $domain) !== false) {\n                        $host = is_numeric($storage_host) ? $mail_domains : $storage_host;\n                        break;\n                    }\n                }\n            }\n\n            // take the first entry if $host is still not set\n            if (empty($host)) {\n                list($key, $val) = each($default_host);\n                $host = is_numeric($key) ? $val : $key;\n            }\n        }\n        else if (empty($default_host)) {\n            $host = rcube_utils::get_input_value('_host', rcube_utils::INPUT_POST);\n        }\n        else {\n            $host = rcube_utils::parse_host($default_host);\n        }\n\n        return $host;\n    }\n\n    /**\n     * Destroy session data and remove cookie\n     */\n    public function kill_session()\n    {\n        $this->plugins->exec_hook('session_destroy');\n\n        $this->session->kill();\n        $_SESSION = array('language' => $this->user->language, 'temp' => true, 'skin' => $this->config->get('skin'));\n        $this->user->reset();\n    }\n\n    /**\n     * Do server side actions on logout\n     */\n    public function logout_actions()\n    {\n        $storage        = $this->get_storage();\n        $logout_expunge = $this->config->get('logout_expunge');\n        $logout_purge   = $this->config->get('logout_purge');\n        $trash_mbox     = $this->config->get('trash_mbox');\n\n        if ($logout_purge && !empty($trash_mbox)) {\n            $storage->clear_folder($trash_mbox);\n        }\n\n        if ($logout_expunge) {\n            $storage->expunge_folder('INBOX');\n        }\n\n        // Try to save unsaved user preferences\n        if (!empty($_SESSION['preferences'])) {\n            $this->user->save_prefs(unserialize($_SESSION['preferences']));\n        }\n    }\n\n    /**\n     * Build a valid URL to this instance of Roundcube\n     *\n     * @param mixed   Either a string with the action or url parameters as key-value pairs\n     * @param boolean Build an URL absolute to document root\n     * @param boolean Create fully qualified URL including http(s):// and hostname\n     * @param bool    Return absolute URL in secure location\n     *\n     * @return string Valid application URL\n     */\n    public function url($p, $absolute = false, $full = false, $secure = false)\n    {\n        if (!is_array($p)) {\n            if (strpos($p, 'http') === 0) {\n                return $p;\n            }\n\n            $p = array('_action' => @func_get_arg(0));\n        }\n\n        $pre = array();\n        $task = $p['_task'] ?: ($p['task'] ?: $this->task);\n        $pre['_task'] = $task;\n        unset($p['task'], $p['_task']);\n\n        $url  = $this->filename;\n        $delm = '?';\n\n        foreach (array_merge($pre, $p) as $key => $val) {\n            if ($val !== '' && $val !== null) {\n                $par  = $key[0] == '_' ? $key : '_'.$key;\n                $url .= $delm.urlencode($par).'='.urlencode($val);\n                $delm = '&';\n            }\n        }\n\n        $base_path = strval($_SERVER['REDIRECT_SCRIPT_URL'] ?: $_SERVER['SCRIPT_NAME']);\n        $base_path = preg_replace('![^/]+$!', '', $base_path);\n\n        if ($secure && ($token = $this->get_secure_url_token(true))) {\n            // add token to the url\n            $url = $token . '/' . $url;\n\n            // remove old token from the path\n            $base_path = rtrim($base_path, '/');\n            $base_path = preg_replace('/\\/[a-f0-9]{' . strlen($token) . '}$/', '', $base_path);\n\n            // this need to be full url to make redirects work\n            $absolute = true;\n        }\n        else if ($secure && ($token = $this->get_request_token()))\n            $url .= $delm . '_token=' . urlencode($token);\n\n        if ($absolute || $full) {\n            // add base path to this Roundcube installation\n            if ($base_path == '') $base_path = '/';\n            $prefix = $base_path;\n\n            // prepend protocol://hostname:port\n            if ($full) {\n                $prefix = rcube_utils::resolve_url($prefix);\n            }\n\n            $prefix = rtrim($prefix, '/') . '/';\n        }\n        else {\n            $prefix = './';\n        }\n\n        return $prefix . $url;\n    }\n\n    /**\n     * Function to be executed in script shutdown\n     */\n    public function shutdown()\n    {\n        parent::shutdown();\n\n        foreach ($this->address_books as $book) {\n            if (is_object($book) && is_a($book, 'rcube_addressbook'))\n                $book->close();\n        }\n\n        // write performance stats to logs/console\n        if ($this->config->get('devel_mode') || $this->config->get('performance_stats')) {\n            // make sure logged numbers use unified format\n            setlocale(LC_NUMERIC, 'en_US.utf8', 'en_US.UTF-8', 'en_US', 'C');\n\n            if (function_exists('memory_get_usage'))\n                $mem = $this->show_bytes(memory_get_usage());\n            if (function_exists('memory_get_peak_usage'))\n                $mem .= '/'.$this->show_bytes(memory_get_peak_usage());\n\n            $log = $this->task . ($this->action ? '/'.$this->action : '') . ($mem ? \" [$mem]\" : '');\n\n            if (defined('RCMAIL_START'))\n                self::print_timer(RCMAIL_START, $log);\n            else\n                self::console($log);\n        }\n    }\n\n    /**\n     * CSRF attack prevention code\n     *\n     * @param int Request mode\n     */\n    public function request_security_check($mode = rcube_utils::INPUT_POST)\n    {\n        // check request token\n        if (!$this->check_request($mode)) {\n            self::raise_error(array(\n                'code' => 403, 'type' => 'php',\n                'message' => \"Request security check failed\"), false, true);\n        }\n\n        // check referer if configured\n        if ($this->config->get('referer_check') && !rcube_utils::check_referer()) {\n            self::raise_error(array(\n                'code' => 403, 'type' => 'php',\n                'message' => \"Referer check failed\"), true, true);\n        }\n    }\n\n    /**\n     * Registers action aliases for current task\n     *\n     * @param array $map Alias-to-filename hash array\n     */\n    public function register_action_map($map)\n    {\n        if (is_array($map)) {\n            foreach ($map as $idx => $val) {\n                $this->action_map[$idx] = $val;\n            }\n        }\n    }\n\n    /**\n     * Returns current action filename\n     *\n     * @param array $map Alias-to-filename hash array\n     */\n    public function get_action_file()\n    {\n        if (!empty($this->action_map[$this->action])) {\n            return $this->action_map[$this->action];\n        }\n\n        return strtr($this->action, '-', '_') . '.inc';\n    }\n\n    /**\n     * Fixes some user preferences according to namespace handling change.\n     * Old Roundcube versions were using folder names with removed namespace prefix.\n     * Now we need to add the prefix on servers where personal namespace has prefix.\n     *\n     * @param rcube_user $user User object\n     */\n    private function fix_namespace_settings($user)\n    {\n        $prefix     = $this->storage->get_namespace('prefix');\n        $prefix_len = strlen($prefix);\n\n        if (!$prefix_len) {\n            return;\n        }\n\n        if ($this->config->get('namespace_fixed')) {\n            return;\n        }\n\n        $prefs = array();\n\n        // Build namespace prefix regexp\n        $ns     = $this->storage->get_namespace();\n        $regexp = array();\n\n        foreach ($ns as $entry) {\n            if (!empty($entry)) {\n                foreach ($entry as $item) {\n                    if (strlen($item[0])) {\n                        $regexp[] = preg_quote($item[0], '/');\n                    }\n                }\n            }\n        }\n        $regexp = '/^('. implode('|', $regexp).')/';\n\n        // Fix preferences\n        $opts = array('drafts_mbox', 'junk_mbox', 'sent_mbox', 'trash_mbox', 'archive_mbox');\n        foreach ($opts as $opt) {\n            if ($value = $this->config->get($opt)) {\n                if ($value != 'INBOX' && !preg_match($regexp, $value)) {\n                    $prefs[$opt] = $prefix.$value;\n                }\n            }\n        }\n\n        if (($search_mods = $this->config->get('search_mods')) && !empty($search_mods)) {\n            $folders = array();\n            foreach ($search_mods as $idx => $value) {\n                if ($idx != 'INBOX' && $idx != '*' && !preg_match($regexp, $idx)) {\n                    $idx = $prefix.$idx;\n                }\n                $folders[$idx] = $value;\n            }\n\n            $prefs['search_mods'] = $folders;\n        }\n\n        if (($threading = $this->config->get('message_threading')) && !empty($threading)) {\n            $folders = array();\n            foreach ($threading as $idx => $value) {\n                if ($idx != 'INBOX' && !preg_match($regexp, $idx)) {\n                    $idx = $prefix.$idx;\n                }\n                $folders[$prefix.$idx] = $value;\n            }\n\n            $prefs['message_threading'] = $folders;\n        }\n\n        if ($collapsed = $this->config->get('collapsed_folders')) {\n            $folders     = explode('&&', $collapsed);\n            $count       = count($folders);\n            $folders_str = '';\n\n            if ($count) {\n                $folders[0]        = substr($folders[0], 1);\n                $folders[$count-1] = substr($folders[$count-1], 0, -1);\n            }\n\n            foreach ($folders as $value) {\n                if ($value != 'INBOX' && !preg_match($regexp, $value)) {\n                    $value = $prefix.$value;\n                }\n                $folders_str .= '&'.$value.'&';\n            }\n\n            $prefs['collapsed_folders'] = $folders_str;\n        }\n\n        $prefs['namespace_fixed'] = true;\n\n        // save updated preferences and reset imap settings (default folders)\n        $user->save_prefs($prefs);\n        $this->set_storage_prop();\n    }\n\n    /**\n     * Overwrite action variable\n     *\n     * @param string New action value\n     */\n    public function overwrite_action($action)\n    {\n        $this->action = $action;\n        $this->output->set_env('action', $action);\n    }\n\n    /**\n     * Set environment variables for specified config options\n     */\n    public function set_env_config($options)\n    {\n        foreach ((array) $options as $option) {\n            if ($this->config->get($option)) {\n                $this->output->set_env($option, true);\n            }\n        }\n    }\n\n    /**\n     * Returns RFC2822 formatted current date in user's timezone\n     *\n     * @return string Date\n     */\n    public function user_date()\n    {\n        // get user's timezone\n        try {\n            $tz   = new DateTimeZone($this->config->get('timezone'));\n            $date = new DateTime('now', $tz);\n        }\n        catch (Exception $e) {\n            $date = new DateTime();\n        }\n\n        return $date->format('r');\n    }\n\n    /**\n     * Write login data (name, ID, IP address) to the 'userlogins' log file.\n     */\n    public function log_login($user = null, $failed_login = false, $error_code = 0)\n    {\n        if (!$this->config->get('log_logins')) {\n            return;\n        }\n\n        // failed login\n        if ($failed_login) {\n            $message = sprintf('Failed login for %s from %s in session %s (error: %d)',\n                $user, rcube_utils::remote_ip(), session_id(), $error_code);\n        }\n        // successful login\n        else {\n            $user_name = $this->get_user_name();\n            $user_id   = $this->get_user_id();\n\n            if (!$user_id) {\n                return;\n            }\n\n            $message = sprintf('Successful login for %s (ID: %d) from %s in session %s',\n                $user_name, $user_id, rcube_utils::remote_ip(), session_id());\n        }\n\n        // log login\n        self::write_log('userlogins', $message);\n    }\n\n    /**\n     * Create a HTML table based on the given data\n     *\n     * @param  array  Named table attributes\n     * @param  mixed  Table row data. Either a two-dimensional array or a valid SQL result set\n     * @param  array  List of cols to show\n     * @param  string Name of the identifier col\n     *\n     * @return string HTML table code\n     */\n    public function table_output($attrib, $table_data, $a_show_cols, $id_col)\n    {\n        $table = new html_table($attrib);\n\n        // add table header\n        if (!$attrib['noheader']) {\n            foreach ($a_show_cols as $col) {\n                $table->add_header($col, $this->Q($this->gettext($col)));\n            }\n        }\n\n        if (!is_array($table_data)) {\n            $db = $this->get_dbh();\n            while ($table_data && ($sql_arr = $db->fetch_assoc($table_data))) {\n                $table->add_row(array('id' => 'rcmrow' . rcube_utils::html_identifier($sql_arr[$id_col])));\n\n                // format each col\n                foreach ($a_show_cols as $col) {\n                    $table->add($col, $this->Q($sql_arr[$col]));\n                }\n            }\n        }\n        else {\n            foreach ($table_data as $row_data) {\n                $class = !empty($row_data['class']) ? $row_data['class'] : null;\n                if (!empty($attrib['rowclass']))\n                    $class = trim($class . ' ' . $attrib['rowclass']);\n                $rowid = 'rcmrow' . rcube_utils::html_identifier($row_data[$id_col]);\n\n                $table->add_row(array('id' => $rowid, 'class' => $class));\n\n                // format each col\n                foreach ($a_show_cols as $col) {\n                    $val = is_array($row_data[$col]) ? $row_data[$col][0] : $row_data[$col];\n                    $table->add($col, empty($attrib['ishtml']) ? $this->Q($val) : $val);\n                }\n            }\n        }\n\n        return $table->show($attrib);\n    }\n\n    /**\n     * Convert the given date to a human readable form\n     * This uses the date formatting properties from config\n     *\n     * @param mixed  Date representation (string, timestamp or DateTime object)\n     * @param string Date format to use\n     * @param bool   Enables date convertion according to user timezone\n     *\n     * @return string Formatted date string\n     */\n    public function format_date($date, $format = null, $convert = true)\n    {\n        if (is_object($date) && is_a($date, 'DateTime')) {\n            $timestamp = $date->format('U');\n        }\n        else {\n            if (!empty($date)) {\n                $timestamp = rcube_utils::strtotime($date);\n            }\n\n            if (empty($timestamp)) {\n                return '';\n            }\n\n            try {\n                $date = new DateTime(\"@\".$timestamp);\n            }\n            catch (Exception $e) {\n                return '';\n            }\n        }\n\n        if ($convert) {\n            try {\n                // convert to the right timezone\n                $stz = date_default_timezone_get();\n                $tz = new DateTimeZone($this->config->get('timezone'));\n                $date->setTimezone($tz);\n                date_default_timezone_set($tz->getName());\n\n                $timestamp = $date->format('U');\n            }\n            catch (Exception $e) {\n            }\n        }\n\n        // define date format depending on current time\n        if (!$format) {\n            $now         = time();\n            $now_date    = getdate($now);\n            $today_limit = mktime(0, 0, 0, $now_date['mon'], $now_date['mday'], $now_date['year']);\n            $week_limit  = mktime(0, 0, 0, $now_date['mon'], $now_date['mday']-6, $now_date['year']);\n            $pretty_date = $this->config->get('prettydate');\n\n            if ($pretty_date && $timestamp > $today_limit && $timestamp <= $now) {\n                $format = $this->config->get('date_today', $this->config->get('time_format', 'H:i'));\n                $today  = true;\n            }\n            else if ($pretty_date && $timestamp > $week_limit && $timestamp <= $now) {\n                $format = $this->config->get('date_short', 'D H:i');\n            }\n            else {\n                $format = $this->config->get('date_long', 'Y-m-d H:i');\n            }\n        }\n\n        // strftime() format\n        if (preg_match('/%[a-z]+/i', $format)) {\n            $format = strftime($format, $timestamp);\n            if ($stz) {\n                date_default_timezone_set($stz);\n            }\n            return $today ? ($this->gettext('today') . ' ' . $format) : $format;\n        }\n\n        // parse format string manually in order to provide localized weekday and month names\n        // an alternative would be to convert the date() format string to fit with strftime()\n        $out = '';\n        for ($i=0; $i<strlen($format); $i++) {\n            if ($format[$i] == \"\\\\\") {  // skip escape chars\n                continue;\n            }\n\n            // write char \"as-is\"\n            if ($format[$i] == ' ' || $format[$i-1] == \"\\\\\") {\n                $out .= $format[$i];\n            }\n            // weekday (short)\n            else if ($format[$i] == 'D') {\n                $out .= $this->gettext(strtolower(date('D', $timestamp)));\n            }\n            // weekday long\n            else if ($format[$i] == 'l') {\n                $out .= $this->gettext(strtolower(date('l', $timestamp)));\n            }\n            // month name (short)\n            else if ($format[$i] == 'M') {\n                $out .= $this->gettext(strtolower(date('M', $timestamp)));\n            }\n            // month name (long)\n            else if ($format[$i] == 'F') {\n                $out .= $this->gettext('long'.strtolower(date('M', $timestamp)));\n            }\n            else if ($format[$i] == 'x') {\n                $out .= strftime('%x %X', $timestamp);\n            }\n            else {\n                $out .= date($format[$i], $timestamp);\n            }\n        }\n\n        if ($today) {\n            $label = $this->gettext('today');\n            // replcae $ character with \"Today\" label (#1486120)\n            if (strpos($out, '$') !== false) {\n                $out = preg_replace('/\\$/', $label, $out, 1);\n            }\n            else {\n                $out = $label . ' ' . $out;\n            }\n        }\n\n        if ($stz) {\n            date_default_timezone_set($stz);\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return folders list in HTML\n     *\n     * @param array $attrib Named parameters\n     *\n     * @return string HTML code for the gui object\n     */\n    public function folder_list($attrib)\n    {\n        static $a_mailboxes;\n\n        $attrib += array('maxlength' => 100, 'realnames' => false, 'unreadwrap' => ' (%s)');\n\n        $rcmail  = rcmail::get_instance();\n        $storage = $rcmail->get_storage();\n\n        // add some labels to client\n        $rcmail->output->add_label('purgefolderconfirm', 'deletemessagesconfirm');\n\n        $type = $attrib['type'] ? $attrib['type'] : 'ul';\n        unset($attrib['type']);\n\n        if ($type == 'ul' && !$attrib['id']) {\n            $attrib['id'] = 'rcmboxlist';\n        }\n\n        if (empty($attrib['folder_name'])) {\n            $attrib['folder_name'] = '*';\n        }\n\n        // get current folder\n        $mbox_name = $storage->get_folder();\n\n        // build the folders tree\n        if (empty($a_mailboxes)) {\n            // get mailbox list\n            $a_folders = $storage->list_folders_subscribed(\n                '', $attrib['folder_name'], $attrib['folder_filter']);\n            $delimiter = $storage->get_hierarchy_delimiter();\n            $a_mailboxes = array();\n\n            foreach ($a_folders as $folder) {\n                $rcmail->build_folder_tree($a_mailboxes, $folder, $delimiter);\n            }\n        }\n\n        // allow plugins to alter the folder tree or to localize folder names\n        $hook = $rcmail->plugins->exec_hook('render_mailboxlist', array(\n            'list'      => $a_mailboxes,\n            'delimiter' => $delimiter,\n            'type'      => $type,\n            'attribs'   => $attrib,\n        ));\n\n        $a_mailboxes = $hook['list'];\n        $attrib      = $hook['attribs'];\n\n        if ($type == 'select') {\n            $attrib['is_escaped'] = true;\n            $select = new html_select($attrib);\n\n            // add no-selection option\n            if ($attrib['noselection']) {\n                $select->add(html::quote($rcmail->gettext($attrib['noselection'])), '');\n            }\n\n            $rcmail->render_folder_tree_select($a_mailboxes, $mbox_name, $attrib['maxlength'], $select, $attrib['realnames']);\n            $out = $select->show($attrib['default']);\n        }\n        else {\n            $js_mailboxlist = array();\n            $tree = $rcmail->render_folder_tree_html($a_mailboxes, $mbox_name, $js_mailboxlist, $attrib);\n\n            if ($type != 'js') {\n                $out = html::tag('ul', $attrib, $tree, html::$common_attrib);\n\n                $rcmail->output->include_script('treelist.js');\n                $rcmail->output->add_gui_object('mailboxlist', $attrib['id']);\n                $rcmail->output->set_env('unreadwrap', $attrib['unreadwrap']);\n                $rcmail->output->set_env('collapsed_folders', (string)$rcmail->config->get('collapsed_folders'));\n            }\n\n            $rcmail->output->set_env('mailboxes', $js_mailboxlist);\n\n            // we can't use object keys in javascript because they are unordered\n            // we need sorted folders list for folder-selector widget\n            $rcmail->output->set_env('mailboxes_list', array_keys($js_mailboxlist));\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return folders list as html_select object\n     *\n     * @param array $p  Named parameters\n     *\n     * @return html_select HTML drop-down object\n     */\n    public function folder_selector($p = array())\n    {\n        $realnames = $this->config->get('show_real_foldernames');\n        $p += array('maxlength' => 100, 'realnames' => $realnames, 'is_escaped' => true);\n        $a_mailboxes = array();\n        $storage = $this->get_storage();\n\n        if (empty($p['folder_name'])) {\n            $p['folder_name'] = '*';\n        }\n\n        if ($p['unsubscribed']) {\n            $list = $storage->list_folders('', $p['folder_name'], $p['folder_filter'], $p['folder_rights']);\n        }\n        else {\n            $list = $storage->list_folders_subscribed('', $p['folder_name'], $p['folder_filter'], $p['folder_rights']);\n        }\n\n        $delimiter = $storage->get_hierarchy_delimiter();\n\n        if (!empty($p['exceptions'])) {\n            $list = array_diff($list, (array) $p['exceptions']);\n        }\n\n        if (!empty($p['additional'])) {\n            foreach ($p['additional'] as $add_folder) {\n                $add_items = explode($delimiter, $add_folder);\n                $folder    = '';\n                while (count($add_items)) {\n                    $folder .= array_shift($add_items);\n\n                    // @TODO: sorting\n                    if (!in_array($folder, $list)) {\n                        $list[] = $folder;\n                    }\n\n                    $folder .= $delimiter;\n                }\n            }\n        }\n\n        foreach ($list as $folder) {\n            $this->build_folder_tree($a_mailboxes, $folder, $delimiter);\n        }\n\n        $select = new html_select($p);\n\n        if ($p['noselection']) {\n            $select->add(html::quote($p['noselection']), '');\n        }\n\n        $this->render_folder_tree_select($a_mailboxes, $mbox, $p['maxlength'], $select, $p['realnames'], 0, $p);\n\n        return $select;\n    }\n\n    /**\n     * Create a hierarchical array of the mailbox list\n     */\n    public function build_folder_tree(&$arrFolders, $folder, $delm = '/', $path = '')\n    {\n        // Handle namespace prefix\n        $prefix = '';\n        if (!$path) {\n            $n_folder = $folder;\n            $folder = $this->storage->mod_folder($folder);\n\n            if ($n_folder != $folder) {\n                $prefix = substr($n_folder, 0, -strlen($folder));\n            }\n        }\n\n        $pos = strpos($folder, $delm);\n\n        if ($pos !== false) {\n            $subFolders    = substr($folder, $pos+1);\n            $currentFolder = substr($folder, 0, $pos);\n\n            // sometimes folder has a delimiter as the last character\n            if (!strlen($subFolders)) {\n                $virtual = false;\n            }\n            else if (!isset($arrFolders[$currentFolder])) {\n                $virtual = true;\n            }\n            else {\n                $virtual = $arrFolders[$currentFolder]['virtual'];\n            }\n        }\n        else {\n            $subFolders    = false;\n            $currentFolder = $folder;\n            $virtual       = false;\n        }\n\n        $path .= $prefix . $currentFolder;\n\n        if (!isset($arrFolders[$currentFolder])) {\n            $arrFolders[$currentFolder] = array(\n                'id' => $path,\n                'name' => rcube_charset::convert($currentFolder, 'UTF7-IMAP'),\n                'virtual' => $virtual,\n                'folders' => array());\n        }\n        else {\n            $arrFolders[$currentFolder]['virtual'] = $virtual;\n        }\n\n        if (strlen($subFolders)) {\n            $this->build_folder_tree($arrFolders[$currentFolder]['folders'], $subFolders, $delm, $path.$delm);\n        }\n    }\n\n    /**\n     * Return html for a structured list &lt;ul&gt; for the mailbox tree\n     */\n    public function render_folder_tree_html(&$arrFolders, &$mbox_name, &$jslist, $attrib, $nestLevel = 0)\n    {\n        $maxlength = intval($attrib['maxlength']);\n        $realnames = (bool)$attrib['realnames'];\n        $msgcounts = $this->storage->get_cache('messagecount');\n        $collapsed = $this->config->get('collapsed_folders');\n        $realnames = $this->config->get('show_real_foldernames');\n\n        $out = '';\n        foreach ($arrFolders as $folder) {\n            $title        = null;\n            $folder_class = $this->folder_classname($folder['id']);\n            $is_collapsed = strpos($collapsed, '&'.rawurlencode($folder['id']).'&') !== false;\n            $unread       = $msgcounts ? intval($msgcounts[$folder['id']]['UNSEEN']) : 0;\n\n            if ($folder_class && !$realnames) {\n                $foldername = $this->gettext($folder_class);\n            }\n            else {\n                $foldername = $folder['name'];\n\n                // shorten the folder name to a given length\n                if ($maxlength && $maxlength > 1) {\n                    $fname = abbreviate_string($foldername, $maxlength);\n                    if ($fname != $foldername) {\n                        $title = $foldername;\n                    }\n                    $foldername = $fname;\n                }\n            }\n\n            // make folder name safe for ids and class names\n            $folder_id = rcube_utils::html_identifier($folder['id'], true);\n            $classes   = array('mailbox');\n\n            // set special class for Sent, Drafts, Trash and Junk\n            if ($folder_class) {\n                $classes[] = $folder_class;\n            }\n\n            if ($folder['id'] == $mbox_name) {\n                $classes[] = 'selected';\n            }\n\n            if ($folder['virtual']) {\n                $classes[] = 'virtual';\n            }\n            else if ($unread) {\n                $classes[] = 'unread';\n            }\n\n            $js_name = $this->JQ($folder['id']);\n            $html_name = $this->Q($foldername) . ($unread ? html::span('unreadcount', sprintf($attrib['unreadwrap'], $unread)) : '');\n            $link_attrib = $folder['virtual'] ? array() : array(\n                'href' => $this->url(array('_mbox' => $folder['id'])),\n                'onclick' => sprintf(\"return %s.command('list','%s',this,event)\", rcmail_output::JS_OBJECT_NAME, $js_name),\n                'rel' => $folder['id'],\n                'title' => $title,\n            );\n\n            $out .= html::tag('li', array(\n                'id' => \"rcmli\".$folder_id,\n                'class' => join(' ', $classes),\n                'noclose' => true),\n                html::a($link_attrib, $html_name));\n\n            if (!empty($folder['folders'])) {\n                $out .= html::div('treetoggle ' . ($is_collapsed ? 'collapsed' : 'expanded'), '&nbsp;');\n            }\n\n            $jslist[$folder['id']] = array(\n                'id'      => $folder['id'],\n                'name'    => $foldername,\n                'virtual' => $folder['virtual'],\n            );\n\n            if (!empty($folder_class)) {\n                $jslist[$folder['id']]['class'] = $folder_class;\n            }\n\n            if (!empty($folder['folders'])) {\n                $out .= html::tag('ul', array('style' => ($is_collapsed ? \"display:none;\" : null)),\n                    $this->render_folder_tree_html($folder['folders'], $mbox_name, $jslist, $attrib, $nestLevel+1));\n            }\n\n            $out .= \"</li>\\n\";\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return html for a flat list <select> for the mailbox tree\n     */\n    public function render_folder_tree_select(&$arrFolders, &$mbox_name, $maxlength, &$select, $realnames = false, $nestLevel = 0, $opts = array())\n    {\n        $out = '';\n\n        foreach ($arrFolders as $folder) {\n            // skip exceptions (and its subfolders)\n            if (!empty($opts['exceptions']) && in_array($folder['id'], $opts['exceptions'])) {\n                continue;\n            }\n\n            // skip folders in which it isn't possible to create subfolders\n            if (!empty($opts['skip_noinferiors'])) {\n                $attrs = $this->storage->folder_attributes($folder['id']);\n                if ($attrs && in_array_nocase('\\\\Noinferiors', $attrs)) {\n                    continue;\n                }\n            }\n\n            if (!$realnames && ($folder_class = $this->folder_classname($folder['id']))) {\n                $foldername = $this->gettext($folder_class);\n            }\n            else {\n                $foldername = $folder['name'];\n\n                // shorten the folder name to a given length\n                if ($maxlength && $maxlength > 1) {\n                    $foldername = abbreviate_string($foldername, $maxlength);\n                }\n            }\n\n            $select->add(str_repeat('&nbsp;', $nestLevel*4) . html::quote($foldername), $folder['id']);\n\n            if (!empty($folder['folders'])) {\n                $out .= $this->render_folder_tree_select($folder['folders'], $mbox_name, $maxlength,\n                    $select, $realnames, $nestLevel+1, $opts);\n            }\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return internal name for the given folder if it matches the configured special folders\n     */\n    public function folder_classname($folder_id)\n    {\n        if ($folder_id == 'INBOX') {\n            return 'inbox';\n        }\n\n        // for these mailboxes we have localized labels and css classes\n        foreach (array('sent', 'drafts', 'trash', 'junk') as $smbx)\n        {\n            if ($folder_id === $this->config->get($smbx.'_mbox')) {\n                return $smbx;\n            }\n        }\n    }\n\n    /**\n     * Try to localize the given IMAP folder name.\n     * UTF-7 decode it in case no localized text was found\n     *\n     * @param string $name      Folder name\n     * @param bool   $with_path Enable path localization\n     *\n     * @return string Localized folder name in UTF-8 encoding\n     */\n    public function localize_foldername($name, $with_path = false)\n    {\n        $realnames = $this->config->get('show_real_foldernames');\n\n        if (!$realnames && ($folder_class = $this->folder_classname($name))) {\n            return $this->gettext($folder_class);\n        }\n\n        // try to localize path of the folder\n        if ($with_path && !$realnames) {\n            $storage   = $this->get_storage();\n            $delimiter = $storage->get_hierarchy_delimiter();\n            $path      = explode($delimiter, $name);\n            $count     = count($path);\n\n            if ($count > 1) {\n                for ($i = 1; $i < $count; $i++) {\n                    $folder = implode($delimiter, array_slice($path, 0, -$i));\n                    if ($folder_class = $this->folder_classname($folder)) {\n                        $name = implode($delimiter, array_slice($path, $count - $i));\n                        return $this->gettext($folder_class) . $delimiter . rcube_charset::convert($name, 'UTF7-IMAP');\n                    }\n                }\n            }\n        }\n\n        return rcube_charset::convert($name, 'UTF7-IMAP');\n    }\n\n\n    public function localize_folderpath($path)\n    {\n        $protect_folders = $this->config->get('protect_default_folders');\n        $delimiter       = $this->storage->get_hierarchy_delimiter();\n        $path            = explode($delimiter, $path);\n        $result          = array();\n\n        foreach ($path as $idx => $dir) {\n            $directory = implode($delimiter, array_slice($path, 0, $idx+1));\n            if ($protect_folders && $this->storage->is_special_folder($directory)) {\n                unset($result);\n                $result[] = $this->localize_foldername($directory);\n            }\n            else {\n                $result[] = rcube_charset::convert($dir, 'UTF7-IMAP');\n            }\n        }\n\n        return implode($delimiter, $result);\n    }\n\n\n    public static function quota_display($attrib)\n    {\n        $rcmail = rcmail::get_instance();\n\n        if (!$attrib['id']) {\n            $attrib['id'] = 'rcmquotadisplay';\n        }\n\n        $_SESSION['quota_display'] = !empty($attrib['display']) ? $attrib['display'] : 'text';\n\n        $rcmail->output->add_gui_object('quotadisplay', $attrib['id']);\n\n        $quota = $rcmail->quota_content($attrib);\n\n        $rcmail->output->add_script('rcmail.set_quota('.rcube_output::json_serialize($quota).');', 'docready');\n\n        return html::span($attrib, '&nbsp;');\n    }\n\n\n    public function quota_content($attrib = null, $folder = null)\n    {\n        $quota = $this->storage->get_quota($folder);\n        $quota = $this->plugins->exec_hook('quota', $quota);\n\n        $quota_result = (array) $quota;\n        $quota_result['type']   = isset($_SESSION['quota_display']) ? $_SESSION['quota_display'] : '';\n        $quota_result['folder'] = $folder !== null && $folder !== '' ? $folder : 'INBOX';\n\n        if ($quota['total'] > 0) {\n            if (!isset($quota['percent'])) {\n                $quota_result['percent'] = min(100, round(($quota['used']/max(1,$quota['total']))*100));\n            }\n\n            $title = sprintf('%s / %s (%.0f%%)',\n                $this->show_bytes($quota['used'] * 1024), $this->show_bytes($quota['total'] * 1024),\n                $quota_result['percent']);\n\n            $quota_result['title'] = $title;\n\n            if ($attrib['width']) {\n                $quota_result['width'] = $attrib['width'];\n            }\n            if ($attrib['height']) {\n                $quota_result['height'] = $attrib['height'];\n            }\n\n            // build a table of quota types/roots info\n            if (($root_cnt = count($quota_result['all'])) > 1 || count($quota_result['all'][key($quota_result['all'])]) > 1) {\n                $table = new html_table(array('cols' => 3, 'class' => 'quota-info'));\n\n                $table->add_header(null, self::Q($this->gettext('quotatype')));\n                $table->add_header(null, self::Q($this->gettext('quotatotal')));\n                $table->add_header(null, self::Q($this->gettext('quotaused')));\n\n                foreach ($quota_result['all'] as $root => $data) {\n                    if ($root_cnt > 1 && $root) {\n                        $table->add(array('colspan' => 3, 'class' => 'root'), self::Q($root));\n                    }\n\n                    if ($storage = $data['storage']) {\n                        $percent = min(100, round(($storage['used']/max(1,$storage['total']))*100));\n\n                        $table->add('name', self::Q($this->gettext('quotastorage')));\n                        $table->add(null, $this->show_bytes($storage['total'] * 1024));\n                        $table->add(null, sprintf('%s (%.0f%%)', $this->show_bytes($storage['used'] * 1024), $percent));\n                    }\n                    if ($message = $data['message']) {\n                        $percent = min(100, round(($message['used']/max(1,$message['total']))*100));\n\n                        $table->add('name', self::Q($this->gettext('quotamessage')));\n                        $table->add(null, intval($message['total']));\n                        $table->add(null, sprintf('%d (%.0f%%)', $message['used'], $percent));\n                    }\n                }\n\n                $quota_result['table'] = $table->show();\n            }\n        }\n        else {\n            $unlimited               = $this->config->get('quota_zero_as_unlimited');\n            $quota_result['title']   = $this->gettext($unlimited ? 'unlimited' : 'unknown');\n            $quota_result['percent'] = 0;\n        }\n\n        // cleanup\n        unset($quota_result['abort']);\n        if (empty($quota_result['table'])) {\n            unset($quota_result['all']);\n        }\n\n        return $quota_result;\n    }\n\n    /**\n     * Outputs error message according to server error/response codes\n     *\n     * @param string $fallback       Fallback message label\n     * @param array  $fallback_args  Fallback message label arguments\n     * @param string $suffix         Message label suffix\n     * @param array  $params         Additional parameters (type, prefix)\n     */\n    public function display_server_error($fallback = null, $fallback_args = null, $suffix = '', $params = array())\n    {\n        $err_code = $this->storage->get_error_code();\n        $res_code = $this->storage->get_response_code();\n        $args     = array();\n\n        if ($res_code == rcube_storage::NOPERM) {\n            $error = 'errornoperm';\n        }\n        else if ($res_code == rcube_storage::READONLY) {\n            $error = 'errorreadonly';\n        }\n        else if ($res_code == rcube_storage::OVERQUOTA) {\n            $error = 'erroroverquota';\n        }\n        else if ($err_code && ($err_str = $this->storage->get_error_str())) {\n            // try to detect access rights problem and display appropriate message\n            if (stripos($err_str, 'Permission denied') !== false) {\n                $error = 'errornoperm';\n            }\n            // try to detect full mailbox problem and display appropriate message\n            // there can be e.g. \"Quota exceeded\" / \"quotum would exceed\" / \"Over quota\"\n            else if (stripos($err_str, 'quot') !== false && preg_match('/exceed|over/i', $err_str)) {\n                $error = 'erroroverquota';\n            }\n            else {\n                $error = 'servererrormsg';\n                $args  = array('msg' => rcube::Q($err_str));\n            }\n        }\n        else if ($err_code < 0) {\n            $error = 'storageerror';\n        }\n        else if ($fallback) {\n            $error = $fallback;\n            $args  = $fallback_args;\n            $params['prefix'] = false;\n        }\n\n        if ($error) {\n            if ($suffix && $this->text_exists($error . $suffix)) {\n                $error .= $suffix;\n            }\n\n            $msg = $this->gettext(array('name' => $error, 'vars' => $args));\n\n            if ($params['prefix'] && $fallback) {\n                $msg = $this->gettext(array('name' => $fallback, 'vars' => $fallback_args)) . ' ' . $msg;\n            }\n\n            $this->output->show_message($msg, $params['type'] ?: 'error');\n        }\n    }\n\n    /**\n     * Output HTML editor scripts\n     *\n     * @param string $mode  Editor mode\n     */\n    public function html_editor($mode = '')\n    {\n        $hook = $this->plugins->exec_hook('html_editor', array('mode' => $mode));\n\n        if ($hook['abort']) {\n            return;\n        }\n\n        $lang_codes = array($_SESSION['language']);\n\n        if ($pos = strpos($_SESSION['language'], '_')) {\n            $lang_codes[] = substr($_SESSION['language'], 0, $pos);\n        }\n\n        foreach ($lang_codes as $code) {\n            if (file_exists(INSTALL_PATH . 'program/js/tinymce/langs/'.$code.'.js')) {\n                $lang = $code;\n                break;\n            }\n        }\n\n        if (empty($lang)) {\n            $lang = 'en';\n        }\n\n        $config = array(\n            'mode'       => $mode,\n            'lang'       => $lang,\n            'skin_path'  => $this->output->get_skin_path(),\n            'spellcheck' => intval($this->config->get('enable_spellcheck')),\n            'spelldict'  => intval($this->config->get('spellcheck_dictionary'))\n        );\n\n        $this->output->add_label('selectimage', 'addimage', 'selectmedia', 'addmedia');\n        $this->output->set_env('editor_config', $config);\n        $this->output->include_css('program/js/tinymce/roundcube/browser.css');\n        $this->output->include_script('tinymce/tinymce.min.js');\n        $this->output->include_script('editor.js');\n    }\n\n    /**\n     * Replaces TinyMCE's emoticon images with plain-text representation\n     *\n     * @param string $html  HTML content\n     *\n     * @return string HTML content\n     */\n    public static function replace_emoticons($html)\n    {\n        $emoticons = array(\n            '8-)' => 'smiley-cool',\n            ':-#' => 'smiley-foot-in-mouth',\n            ':-*' => 'smiley-kiss',\n            ':-X' => 'smiley-sealed',\n            ':-P' => 'smiley-tongue-out',\n            ':-@' => 'smiley-yell',\n            \":'(\" => 'smiley-cry',\n            ':-(' => 'smiley-frown',\n            ':-D' => 'smiley-laughing',\n            ':-)' => 'smiley-smile',\n            ':-S' => 'smiley-undecided',\n            ':-$' => 'smiley-embarassed',\n            'O:-)' => 'smiley-innocent',\n            ':-|' => 'smiley-money-mouth',\n            ':-O' => 'smiley-surprised',\n            ';-)' => 'smiley-wink',\n        );\n\n        foreach ($emoticons as $idx => $file) {\n            // <img title=\"Cry\" src=\"http://.../program/js/tinymce/plugins/emoticons/img/smiley-cry.gif\" border=\"0\" alt=\"Cry\" />\n            $file      = preg_quote('program/js/tinymce/plugins/emoticons/img/' . $file . '.gif', '/');\n            $search[]  = '/<img (title=\"[a-z ]+\" )?src=\"[^\"]+' . $file . '\"[^>]+\\/>/i';\n            $replace[] = $idx;\n        }\n\n        return preg_replace($search, $replace, $html);\n    }\n\n    /**\n     * File upload progress handler.\n     */\n    public function upload_progress()\n    {\n        $params = array(\n            'action' => $this->action,\n            'name'   => rcube_utils::get_input_value('_progress', rcube_utils::INPUT_GET),\n        );\n\n        if (function_exists('uploadprogress_get_info')) {\n            $status = uploadprogress_get_info($params['name']);\n\n            if (!empty($status)) {\n                $params['current'] = $status['bytes_uploaded'];\n                $params['total']   = $status['bytes_total'];\n            }\n        }\n\n        if (!isset($status) && filter_var(ini_get('apc.rfc1867'), FILTER_VALIDATE_BOOLEAN)\n            && ini_get('apc.rfc1867_name')\n        ) {\n            $prefix = ini_get('apc.rfc1867_prefix');\n            $status = apc_fetch($prefix . $params['name']);\n\n            if (!empty($status)) {\n                $params['current'] = $status['current'];\n                $params['total']   = $status['total'];\n            }\n        }\n\n        if (!isset($status) && filter_var(ini_get('session.upload_progress.enabled'), FILTER_VALIDATE_BOOLEAN)\n            && ini_get('session.upload_progress.name')\n        ) {\n            $key = ini_get('session.upload_progress.prefix') . $params['name'];\n\n            $params['total']   = $_SESSION[$key]['content_length'];\n            $params['current'] = $_SESSION[$key]['bytes_processed'];\n        }\n\n        if (!empty($params['total'])) {\n            $total = $this->show_bytes($params['total'], $unit);\n            switch ($unit) {\n            case 'GB':\n                $gb      = $params['current']/1073741824;\n                $current = sprintf($gb >= 10 ? \"%d\" : \"%.1f\", $gb);\n                break;\n            case 'MB':\n                $mb      = $params['current']/1048576;\n                $current = sprintf($mb >= 10 ? \"%d\" : \"%.1f\", $mb);\n                break;\n            case 'KB':\n                $current = round($params['current']/1024);\n                break;\n            case 'B':\n            default:\n                $current = $params['current'];\n                break;\n            }\n\n            $params['percent'] = round($params['current']/$params['total']*100);\n            $params['text']    = $this->gettext(array(\n                'name' => 'uploadprogress',\n                'vars' => array(\n                    'percent' => $params['percent'] . '%',\n                    'current' => $current,\n                    'total'   => $total\n                )\n            ));\n        }\n\n        $this->output->command('upload_progress_update', $params);\n        $this->output->send();\n    }\n\n    /**\n     * Initializes file uploading interface.\n     *\n     * @param $int Optional maximum file size in bytes\n     */\n    public function upload_init($max_size = null)\n    {\n        // Enable upload progress bar\n        if ($seconds = $this->config->get('upload_progress')) {\n            if (function_exists('uploadprogress_get_info')) {\n                $field_name = 'UPLOAD_IDENTIFIER';\n            }\n            if (!$field_name && filter_var(ini_get('apc.rfc1867'), FILTER_VALIDATE_BOOLEAN)) {\n                $field_name = ini_get('apc.rfc1867_name');\n            }\n            if (!$field_name && filter_var(ini_get('session.upload_progress.enabled'), FILTER_VALIDATE_BOOLEAN)) {\n                $field_name = ini_get('session.upload_progress.name');\n            }\n\n            if ($field_name) {\n                $this->output->set_env('upload_progress_name', $field_name);\n                $this->output->set_env('upload_progress_time', (int) $seconds);\n            }\n        }\n\n        // find max filesize value\n        $max_filesize = parse_bytes(ini_get('upload_max_filesize'));\n        $max_postsize = parse_bytes(ini_get('post_max_size'));\n\n        if ($max_postsize && $max_postsize < $max_filesize) {\n            $max_filesize = $max_postsize;\n        }\n\n        if ($max_size && $max_size < $max_filesize) {\n            $max_filesize = $max_size;\n        }\n\n        $this->output->set_env('max_filesize', $max_filesize);\n        $max_filesize = $this->show_bytes($max_filesize);\n        $this->output->set_env('filesizeerror', $this->gettext(array(\n            'name' => 'filesizeerror', 'vars' => array('size' => $max_filesize))));\n\n        return $max_filesize;\n    }\n\n    /**\n     * Outputs uploaded file content (with image thumbnails support\n     *\n     * @param array $file Upload file data\n     */\n    public function display_uploaded_file($file)\n    {\n        if (empty($file)) {\n            return;\n        }\n\n        $file = $this->plugins->exec_hook('attachment_display', $file);\n\n        if ($file['status']) {\n            if (empty($file['size'])) {\n                $file['size'] = $file['data'] ? strlen($file['data']) : @filesize($file['path']);\n            }\n\n            // generate image thumbnail for file browser in HTML editor\n            if (!empty($_GET['_thumbnail'])) {\n                $temp_dir       = $this->config->get('temp_dir');\n                $thumbnail_size = 80;\n                $mimetype       = $file['mimetype'];\n                $file_ident     = $file['id'] . ':' . $file['mimetype'] . ':' . $file['size'];\n                $cache_basename = $temp_dir . '/' . md5($file_ident . ':' . $this->user->ID . ':' . $thumbnail_size);\n                $cache_file     = $cache_basename . '.thumb';\n\n                // render thumbnail image if not done yet\n                if (!is_file($cache_file)) {\n                    if (!$file['path']) {\n                        $orig_name = $filename = $cache_basename . '.tmp';\n                        file_put_contents($orig_name, $file['data']);\n                    }\n                    else {\n                        $filename = $file['path'];\n                    }\n\n                    $image = new rcube_image($filename);\n                    if ($imgtype = $image->resize($thumbnail_size, $cache_file, true)) {\n                        $mimetype = 'image/' . $imgtype;\n\n                        if ($orig_name) {\n                            unlink($orig_name);\n                        }\n                    }\n                }\n\n                if (is_file($cache_file)) {\n                    // cache for 1h\n                    $this->output->future_expire_header(3600);\n                    header('Content-Type: ' . $mimetype);\n                    header('Content-Length: ' . filesize($cache_file));\n\n                    readfile($cache_file);\n                    exit;\n                }\n            }\n\n            header('Content-Type: ' . $file['mimetype']);\n            header('Content-Length: ' . $file['size']);\n\n            if ($file['data']) {\n                echo $file['data'];\n            }\n            else if ($file['path']) {\n                readfile($file['path']);\n            }\n        }\n    }\n\n    /**\n     * Initializes client-side autocompletion.\n     */\n    public function autocomplete_init()\n    {\n        static $init;\n\n        if ($init) {\n            return;\n        }\n\n        $init = 1;\n\n        if (($threads = (int)$this->config->get('autocomplete_threads')) > 0) {\n            $book_types = (array) $this->config->get('autocomplete_addressbooks', 'sql');\n            if (count($book_types) > 1) {\n                $this->output->set_env('autocomplete_threads', $threads);\n                $this->output->set_env('autocomplete_sources', $book_types);\n            }\n        }\n\n        $this->output->set_env('autocomplete_max', (int)$this->config->get('autocomplete_max', 15));\n        $this->output->set_env('autocomplete_min_length', $this->config->get('autocomplete_min_length'));\n        $this->output->add_label('autocompletechars', 'autocompletemore');\n    }\n\n    /**\n     * Returns supported font-family specifications\n     *\n     * @param string $font  Font name\n     *\n     * @param string|array Font-family specification array or string (if $font is used)\n     */\n    public static function font_defs($font = null)\n    {\n        $fonts = array(\n            'Andale Mono'   => '\"Andale Mono\",Times,monospace',\n            'Arial'         => 'Arial,Helvetica,sans-serif',\n            'Arial Black'   => '\"Arial Black\",\"Avant Garde\",sans-serif',\n            'Book Antiqua'  => '\"Book Antiqua\",Palatino,serif',\n            'Courier New'   => '\"Courier New\",Courier,monospace',\n            'Georgia'       => 'Georgia,Palatino,serif',\n            'Helvetica'     => 'Helvetica,Arial,sans-serif',\n            'Impact'        => 'Impact,Chicago,sans-serif',\n            'Tahoma'        => 'Tahoma,Arial,Helvetica,sans-serif',\n            'Terminal'      => 'Terminal,Monaco,monospace',\n            'Times New Roman' => '\"Times New Roman\",Times,serif',\n            'Trebuchet MS'  => '\"Trebuchet MS\",Geneva,sans-serif',\n            'Verdana'       => 'Verdana,Geneva,sans-serif',\n        );\n\n        if ($font) {\n            return $fonts[$font];\n        }\n\n        return $fonts;\n    }\n\n    /**\n     * Create a human readable string for a number of bytes\n     *\n     * @param int    Number of bytes\n     * @param string Size unit\n     *\n     * @return string Byte string\n     */\n    public function show_bytes($bytes, &$unit = null)\n    {\n        if ($bytes >= 1073741824) {\n            $unit = 'GB';\n            $gb   = $bytes/1073741824;\n            $str  = sprintf($gb >= 10 ? \"%d \" : \"%.1f \", $gb) . $this->gettext($unit);\n        }\n        else if ($bytes >= 1048576) {\n            $unit = 'MB';\n            $mb   = $bytes/1048576;\n            $str  = sprintf($mb >= 10 ? \"%d \" : \"%.1f \", $mb) . $this->gettext($unit);\n        }\n        else if ($bytes >= 1024) {\n            $unit = 'KB';\n            $str  = sprintf(\"%d \",  round($bytes/1024)) . $this->gettext($unit);\n        }\n        else {\n            $unit = 'B';\n            $str  = sprintf('%d ', $bytes) . $this->gettext($unit);\n        }\n\n        return $str;\n    }\n\n    /**\n     * Returns real size (calculated) of the message part\n     *\n     * @param rcube_message_part  Message part\n     *\n     * @return string Part size (and unit)\n     */\n    public function message_part_size($part)\n    {\n        if (isset($part->d_parameters['size'])) {\n            $size = $this->show_bytes((int)$part->d_parameters['size']);\n        }\n        else {\n          $size = $part->size;\n          if ($part->encoding == 'base64') {\n            $size = $size / 1.33;\n          }\n\n          $size = '~' . $this->show_bytes($size);\n        }\n\n        return $size;\n    }\n\n    /**\n     * Returns message UID(s) and IMAP folder(s) from GET/POST data\n     *\n     * @param string UID value to decode\n     * @param string Default mailbox value (if not encoded in UIDs)\n     * @param bool   Will be set to True if multi-folder request\n     *\n     * @return array  List of message UIDs per folder\n     */\n    public static function get_uids($uids = null, $mbox = null, &$is_multifolder = false)\n    {\n        // message UID (or comma-separated list of IDs) is provided in\n        // the form of <ID>-<MBOX>[,<ID>-<MBOX>]*\n\n        $_uid  = $uids ?: rcube_utils::get_input_value('_uid', RCUBE_INPUT_GPC);\n        $_mbox = $mbox ?: (string)rcube_utils::get_input_value('_mbox', RCUBE_INPUT_GPC);\n\n        // already a hash array\n        if (is_array($_uid) && !isset($_uid[0])) {\n            return $_uid;\n        }\n\n        $result = array();\n\n        // special case: *\n        if ($_uid == '*' && is_object($_SESSION['search'][1]) && $_SESSION['search'][1]->multi) {\n            $is_multifolder = true;\n            // extract the full list of UIDs per folder from the search set\n            foreach ($_SESSION['search'][1]->sets as $subset) {\n                $mbox = $subset->get_parameters('MAILBOX');\n                $result[$mbox] = $subset->get();\n            }\n        }\n        else {\n            if (is_string($_uid))\n                $_uid = explode(',', $_uid);\n\n            // create a per-folder UIDs array\n            foreach ((array)$_uid as $uid) {\n                list($uid, $mbox) = explode('-', $uid, 2);\n                if (!strlen($mbox)) {\n                    $mbox = $_mbox;\n                }\n                else {\n                    $is_multifolder = true;\n                }\n\n                if ($uid == '*') {\n                    $result[$mbox] = $uid;\n                }\n                else {\n                    $result[$mbox][] = $uid;\n                }\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Get resource file content (with assets_dir support)\n     *\n     * @param string $name File name\n     */\n    public function get_resource_content($name)\n    {\n        if (!strpos($name, '/')) {\n            $name = \"program/resources/$name\";\n        }\n\n        $assets_dir = $this->config->get('assets_dir');\n\n        if ($assets_dir) {\n            $path = slashify($assets_dir) . $name;\n            if (@file_exists($path)) {\n                $name = $path;\n            }\n        }\n\n        return file_get_contents($name, false);\n    }\n\n\n    /************************************************************************\n     *********          Deprecated methods (to be removed)          *********\n     ***********************************************************************/\n\n    public static function setcookie($name, $value, $exp = 0)\n    {\n        rcube_utils::setcookie($name, $value, $exp);\n    }\n\n    public function imap_connect()\n    {\n        return $this->storage_connect();\n    }\n\n    public function imap_init()\n    {\n        return $this->storage_init();\n    }\n\n    /**\n     * Connect to the mail storage server with stored session data\n     *\n     * @return bool True on success, False on error\n     */\n    public function storage_connect()\n    {\n        $storage = $this->get_storage();\n\n        if ($_SESSION['storage_host'] && !$storage->is_connected()) {\n            $host = $_SESSION['storage_host'];\n            $user = $_SESSION['username'];\n            $port = $_SESSION['storage_port'];\n            $ssl  = $_SESSION['storage_ssl'];\n            $pass = $this->decrypt($_SESSION['password']);\n\n            if (!$storage->connect($host, $user, $pass, $port, $ssl)) {\n                if (is_object($this->output)) {\n                    $this->output->show_message('storageerror', 'error');\n                }\n            }\n            else {\n                $this->set_storage_prop();\n            }\n        }\n\n        return $storage->is_connected();\n    }\n}\n", "code_before": "<?php\n\n/*\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n | Copyright (C) Kolab Systems AG                                        |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Application class providing core functions and holding              |\n |   instances of all 'global' objects like db- and imap-connections     |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <alec@alec.pl>                            |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Application class of Roundcube Webmail\n * implemented as singleton\n */\nclass rcmail extends rcube\n{\n    use rcube_uploads;\n\n    /**\n     * Main tasks.\n     *\n     * @var array\n     */\n    public static $main_tasks = ['mail', 'settings', 'addressbook', 'login', 'logout', 'utils', 'dummy'];\n\n    /**\n     * Current task.\n     *\n     * @var string\n     */\n    public $task;\n\n    /**\n     * Current action.\n     *\n     * @var string\n     */\n    public $action = '';\n\n    public $comm_path = './';\n    public $filename = '';\n    public $default_skin;\n    public $login_error;\n    public $oauth;\n\n    /** @var rcmail_output_cli|rcmail_output_html|rcmail_output_json|null Output handler */\n    public $output; // @phpstan-ignore-line\n\n    private $address_books = [];\n    private $action_args = [];\n\n    public const ERROR_STORAGE = -2;\n    public const ERROR_INVALID_REQUEST = 1;\n    public const ERROR_INVALID_HOST = 2;\n    public const ERROR_COOKIES_DISABLED = 3;\n    public const ERROR_RATE_LIMIT = 4;\n\n    /**\n     * This implements the 'singleton' design pattern\n     *\n     * @param int     $mode Ignored rcube::get_instance() argument\n     * @param ?string $env  Environment name to run (e.g. live, dev, test)\n     *\n     * @return rcmail The one and only instance\n     */\n    #[\\Override]\n    public static function get_instance($mode = 0, $env = '')\n    {\n        if (!self::$instance || !is_a(self::$instance, 'rcmail')) {\n            // In cli-server mode env=test\n            if ($env === null && \\PHP_SAPI == 'cli-server') {\n                $env = 'test';\n            }\n\n            self::$instance = new self($env);\n            // init AFTER object was linked with self::$instance\n            self::$instance->startup();\n        }\n\n        return self::$instance;\n    }\n\n    /**\n     * Initial startup function\n     * to register session, create database and imap connections\n     */\n    protected function startup()\n    {\n        $this->init(self::INIT_WITH_DB | self::INIT_WITH_PLUGINS);\n\n        // set filename if not index.php\n        if (($basename = basename($_SERVER['SCRIPT_FILENAME'])) && $basename != 'index.php') {\n            $this->filename = $basename;\n        }\n\n        // load all configured plugins\n        $plugins = (array) $this->config->get('plugins', []);\n        $required_plugins = ['filesystem_attachments', 'jqueryui'];\n        $this->plugins->load_plugins($plugins, $required_plugins);\n\n        // start session\n        $this->session_init();\n\n        // Remember default skin, before it's replaced by user prefs\n        $this->default_skin = $this->config->get('skin');\n\n        // create user object\n        $this->set_user(new rcube_user($_SESSION['user_id'] ?? null));\n\n        // set task and action properties\n        $this->set_task(rcube_utils::get_input_string('_task', rcube_utils::INPUT_GPC));\n        $this->action = asciiwords(rcube_utils::get_input_string('_action', rcube_utils::INPUT_GPC));\n\n        // reset some session parameters when changing task\n        if ($this->task != 'utils') {\n            // we reset list page when switching to another task\n            // but only to the main task interface - empty action (#1489076, #1490116)\n            // this will prevent from unintentional page reset on cross-task requests\n            if ($this->session && empty($this->action)\n                && (empty($_SESSION['task']) || $_SESSION['task'] != $this->task)\n            ) {\n                $this->session->remove('page');\n\n                // set current task to session\n                $_SESSION['task'] = $this->task;\n            }\n        }\n\n        // init output class\n        if (\\PHP_SAPI == 'cli') {\n            $this->output = new rcmail_output_cli();\n        } elseif (!empty($_REQUEST['_remote'])) {\n            $this->json_init();\n        } elseif (!empty($_SERVER['REMOTE_ADDR'])) {\n            $this->load_gui(!empty($_REQUEST['_framed']));\n        }\n\n        // load oauth manager\n        if (\\PHP_SAPI != 'cli') {\n            $this->oauth = rcmail_oauth::get_instance();\n        }\n\n        // run init method on all the plugins\n        $this->plugins->init($this, $this->task);\n    }\n\n    /**\n     * Setter for application task\n     *\n     * @param string $task Task to set\n     */\n    public function set_task($task)\n    {\n        if (\\PHP_SAPI == 'cli') {\n            $task = 'cli';\n        } elseif (!$this->user || !$this->user->ID) {\n            $task = 'login';\n        } else {\n            $task = asciiwords($task, true) ?: 'mail';\n        }\n\n        // Re-initialize plugins if task is changing\n        if (!empty($this->task) && $this->task != $task) {\n            $this->plugins->init($this, $task);\n        }\n\n        $this->task = $task;\n        $this->comm_path = $this->url(['task' => $this->task]);\n\n        if (!empty($_REQUEST['_framed'])) {\n            $this->comm_path .= '&_framed=1';\n        }\n\n        if ($this->output) {\n            $this->output->set_env('task', $this->task);\n            $this->output->set_env('comm_path', $this->comm_path);\n        }\n    }\n\n    /**\n     * Setter for system user object\n     *\n     * @param rcube_user $user Current user instance\n     */\n    #[\\Override]\n    public function set_user($user)\n    {\n        parent::set_user($user);\n\n        $session_lang = $_SESSION['language'] ?? null;\n        $lang = $this->language_prop($this->config->get('language', $session_lang));\n        $_SESSION['language'] = $this->user->language = $lang;\n\n        // set localization\n        setlocale(\\LC_ALL, $lang . '.utf8', $lang . '.UTF-8', 'en_US.utf8', 'en_US.UTF-8');\n        ini_set('intl.default_locale', $lang);\n\n        // Workaround for https://bugs.php.net/bug.php?id=18556\n        // Also strtoupper/strtolower and other methods are locale-aware\n        // for these locales it is problematic (#1490519)\n        if (in_array($lang, ['tr_TR', 'ku', 'az_AZ'])) {\n            setlocale(\\LC_CTYPE, 'en_US.utf8', 'en_US.UTF-8', 'C');\n        }\n    }\n\n    /**\n     * Handle the request. All request pre-checks are NOT done here.\n     */\n    public function action_handler()\n    {\n        // we're ready, user is authenticated and the request is safe\n        $plugin = $this->plugins->exec_hook('ready', ['task' => $this->task, 'action' => $this->action]);\n\n        $this->set_task($plugin['task']);\n        $this->action = $plugin['action'];\n\n        // handle special actions\n        if ($this->action == 'keep-alive') {\n            $this->output->reset();\n            $this->plugins->exec_hook('keep_alive', []);\n            $this->output->send();\n        }\n\n        $task = $this->action == 'save-pref' ? 'utils' : $this->task;\n        $task = $task == 'addressbook' ? 'contacts' : $task;\n        $task_class = \"rcmail_action_{$task}_index\";\n\n        // execute the action index handler\n        if (class_exists($task_class)) {\n            $task_handler = new $task_class();\n            $task_handler->run();\n        }\n\n        // allow 5 \"redirects\" to another action\n        $redirects = 0;\n        while ($redirects < 5) {\n            // execute a plugin action\n            if (preg_match('/^plugin\\./', $this->action)) {\n                $this->plugins->exec_action($this->action);\n                break;\n            }\n\n            // execute action registered to a plugin task\n            if ($this->plugins->is_plugin_task($task)) {\n                if (!$this->action) {\n                    $this->action = 'index';\n                }\n                $this->plugins->exec_action(\"{$task}.{$this->action}\");\n                break;\n            }\n\n            $action = !empty($this->action) ? $this->action : 'index';\n\n            // handle deprecated action names\n            if (!empty($task_handler) && !empty($task_handler::$aliases[$action])) {\n                $action = $task_handler::$aliases[$action];\n            }\n\n            $action = str_replace('-', '_', $action);\n            $class = \"rcmail_action_{$task}_{$action}\";\n\n            // Run the action (except the index)\n            if ($class != $task_class && class_exists($class)) {\n                $handler = new $class();\n                if (!$handler->checks()) {\n                    break;\n                }\n                $handler->run($this->action_args);\n                $redirects++;\n            } else {\n                break;\n            }\n        }\n\n        if ($this->action == 'refresh') {\n            $last = intval(rcube_utils::get_input_value('_last', rcube_utils::INPUT_GPC));\n            $this->plugins->exec_hook('refresh', ['last' => $last]);\n        }\n\n        // parse main template (default)\n        $this->output->send($this->task);\n\n        // if we arrive here, something went wrong\n        $error = ['code' => 404, 'message' => 'Invalid request'];\n        self::raise_error($error, true, true);\n    }\n\n    /**\n     * Return instance of the internal address book class\n     *\n     * @param int|string $id        Address book identifier. It accepts also special values:\n     *                              - rcube_addressbook::TYPE_CONTACT (or 'sql') for the SQL addressbook\n     *                              - rcube_addressbook::TYPE_DEFAULT for the default addressbook\n     * @param bool       $writeable True if the address book needs to be writeable\n     * @param bool       $fallback  Fallback to the first existing source, if the configured default wasn't found\n     *\n     * @return rcube_addressbook|null Address book object\n     */\n    public function get_address_book(int|string $id, bool $writeable = false, bool $fallback = true): ?rcube_addressbook\n    {\n        $contacts = null;\n        $ldap_config = (array) $this->config->get('ldap_public');\n        $default = false;\n\n        $id = (string) $id;\n\n        // 'sql' is the alias for '0' used by autocomplete\n        if ($id == 'sql') {\n            $id = (string) rcube_addressbook::TYPE_CONTACT;\n        } elseif ($id === strval(rcube_addressbook::TYPE_DEFAULT) || $id === '-1') { // -1 for BC\n            $id = $this->config->get('default_addressbook');\n            $default = true;\n        }\n\n        // use existing instance\n        if ($id !== null && isset($this->address_books[$id]) && ($this->address_books[$id] instanceof rcube_addressbook)) {\n            $contacts = $this->address_books[$id];\n        } elseif ($id && !empty($ldap_config[$id])) {\n            $domain = $this->config->mail_domain($_SESSION['storage_host']);\n            $contacts = new rcube_ldap($ldap_config[$id], $this->config->get('ldap_debug'), $domain);\n        } elseif ($id === (string) rcube_addressbook::TYPE_CONTACT) {\n            $contacts = new rcube_contacts($this->db, $this->get_user_id());\n        } elseif ($id === (string) rcube_addressbook::TYPE_RECIPIENT || $id === (string) rcube_addressbook::TYPE_TRUSTED_SENDER) {\n            $contacts = new rcube_addresses($this->db, $this->get_user_id(), (int) $id);\n        } else {\n            $plugin = $this->plugins->exec_hook('addressbook_get', ['id' => $id, 'writeable' => $writeable]);\n\n            // plugin returned instance of a rcube_addressbook\n            if (!empty($plugin['instance']) && $plugin['instance'] instanceof rcube_addressbook) {\n                $contacts = $plugin['instance'];\n            }\n        }\n\n        // when user requested default writeable addressbook\n        // we need to check if default is writeable, if not we\n        // will return first writeable book (if any exist)\n        if ($contacts && $default && $contacts->readonly && $writeable) {\n            $contacts = null;\n        }\n\n        // Get first addressbook from the list if configured default doesn't exist\n        // This can happen when user deleted the addressbook (e.g. Kolab folder)\n        if ($fallback && !$contacts && (!$id || $default)) {\n            $source = $this->get_address_sources($writeable, !$default);\n            $source = reset($source);\n\n            if (!empty($source)) {\n                // Note: No fallback here to prevent from an infinite loop\n                $contacts = $this->get_address_book($source['id'], false, false);\n                if ($contacts) {\n                    $id = $source['id'];\n                }\n            }\n        }\n\n        if (!$contacts) {\n            // there's no default, just return\n            if ($default) {\n                return null;\n            }\n\n            self::raise_error([\n                'code' => 700,\n                'message' => \"Addressbook source ({$id}) not found!\",\n            ], true, true);\n        }\n\n        // add to the 'books' array for shutdown function\n        $this->address_books[$id] = $contacts;\n\n        if ($writeable && $contacts->readonly) {\n            return null;\n        }\n\n        // set configured sort order\n        if ($sort_col = $this->config->get('addressbook_sort_col')) {\n            $contacts->set_sort_order($sort_col);\n        }\n\n        return $contacts;\n    }\n\n    /**\n     * Return identifier of the address book object\n     *\n     * @param rcube_addressbook $object Addressbook source object\n     *\n     * @return string|null Source identifier\n     */\n    public function get_address_book_id($object)\n    {\n        foreach ($this->address_books as $index => $book) {\n            if ($book === $object) {\n                return $index;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Return address books list\n     *\n     * @param bool $writeable   True if the address book needs to be writeable\n     * @param bool $skip_hidden True if the address book needs to be not hidden\n     *\n     * @return array Address books array\n     */\n    public function get_address_sources($writeable = false, $skip_hidden = false)\n    {\n        $abook_type = strtolower((string) $this->config->get('address_book_type', 'sql'));\n        $ldap_config = (array) $this->config->get('ldap_public');\n        $list = [];\n\n        // SQL-based (built-in) address book\n        if ($abook_type === 'sql') {\n            $list[rcube_addressbook::TYPE_CONTACT] = [\n                'id' => (string) rcube_addressbook::TYPE_CONTACT,\n                'name' => $this->gettext('personaladrbook'),\n                'groups' => true,\n                'readonly' => false,\n                'undelete' => $this->config->get('undo_timeout') > 0,\n            ];\n        }\n\n        // LDAP address book(s)\n        if (!empty($ldap_config)) {\n            foreach ($ldap_config as $id => $prop) {\n                // handle misconfiguration\n                if (empty($prop) || !is_array($prop)) {\n                    continue;\n                }\n\n                $list[$id] = [\n                    'id' => $id,\n                    'name' => html::quote($prop['name']),\n                    'groups' => !empty($prop['groups']) || !empty($prop['group_filters']),\n                    'readonly' => empty($prop['writable']),\n                    'hidden' => !empty($prop['hidden']),\n                ];\n            }\n        }\n\n        $collected_recipients = $this->config->get('collected_recipients');\n        $collected_senders = $this->config->get('collected_senders');\n\n        if ($collected_recipients === (string) rcube_addressbook::TYPE_RECIPIENT) {\n            $list[rcube_addressbook::TYPE_RECIPIENT] = [\n                'id' => (string) rcube_addressbook::TYPE_RECIPIENT,\n                'name' => $this->gettext('collectedrecipients'),\n                'groups' => false,\n                'readonly' => true,\n                'undelete' => false,\n                'deletable' => true,\n            ];\n        }\n\n        if ($collected_senders === (string) rcube_addressbook::TYPE_TRUSTED_SENDER) {\n            $list[rcube_addressbook::TYPE_TRUSTED_SENDER] = [\n                'id' => (string) rcube_addressbook::TYPE_TRUSTED_SENDER,\n                'name' => $this->gettext('trustedsenders'),\n                'groups' => false,\n                'readonly' => true,\n                'undelete' => false,\n                'deletable' => true,\n            ];\n        }\n\n        // Plugins can also add address books, or re-order the list\n        $plugin = $this->plugins->exec_hook('addressbooks_list', ['sources' => $list]);\n        $list = $plugin['sources'];\n\n        foreach ($list as $idx => $item) {\n            // remove from list if not writeable as requested\n            if ($writeable && $item['readonly']) {\n                unset($list[$idx]);\n            }\n            // remove from list if hidden as requested\n            elseif ($skip_hidden && !empty($item['hidden'])) {\n                unset($list[$idx]);\n            }\n        }\n\n        return $list;\n    }\n\n    /**\n     * Getter for compose responses.\n     *\n     * @param bool $user_only True to exclude additional static responses\n     *\n     * @return array List of the current user's stored responses\n     */\n    public function get_compose_responses($user_only = false)\n    {\n        $responses = $this->user->list_responses();\n\n        if (!$user_only) {\n            $additional = [];\n            foreach ($this->config->get('compose_responses_static', []) as $response) {\n                $additional[$response['name']] = [\n                    'id' => 'static-' . substr(md5($response['name']), 0, 16),\n                    'name' => $response['name'],\n                    'static' => true,\n                ];\n            }\n\n            if (!empty($additional)) {\n                ksort($additional, \\SORT_LOCALE_STRING);\n                $responses = array_merge(array_values($additional), $responses);\n            }\n        }\n\n        $hook = $this->plugins->exec_hook('get_compose_responses', [\n            'list' => $responses,\n            'user_only' => $user_only,\n        ]);\n\n        return $hook['list'];\n    }\n\n    /**\n     * Getter for compose response data.\n     *\n     * @param int|string $id Response ID\n     *\n     * @return array|null Response data, Null if not found\n     */\n    public function get_compose_response($id)\n    {\n        $record = null;\n\n        // Static response\n        if (str_starts_with((string) $id, 'static-')) {\n            foreach ($this->config->get('compose_responses_static', []) as $response) {\n                $rid = 'static-' . substr(md5($response['name']), 0, 16);\n                if ($id === $rid) {\n                    $record = [\n                        'id' => $rid,\n                        'name' => $response['name'],\n                        'data' => !empty($response['html']) ? $response['html'] : $response['text'],\n                        'is_html' => !empty($response['html']),\n                        'static' => true,\n                    ];\n                    break;\n                }\n            }\n        }\n\n        // User owned response\n        if (empty($record) && is_numeric($id)) {\n            $record = $this->user->get_response($id);\n        }\n\n        // Plugin-provided response or other modifications\n        $hook = $this->plugins->exec_hook('get_compose_response', [\n            'id' => $id,\n            'record' => $record,\n        ]);\n\n        return $hook['record'];\n    }\n\n    /**\n     * Init output object for GUI and add common scripts.\n     * This will instantiate a rcmail_output_html object and set\n     * environment vars according to the current session and configuration\n     *\n     * @param bool $framed True if this request is loaded in a (i)frame\n     *\n     * @return rcube_output Reference to HTML output object\n     */\n    public function load_gui($framed = false)\n    {\n        // init output page\n        if (!$this->output instanceof rcmail_output_html) {\n            $this->output = new rcmail_output_html($this->task, $framed);\n        }\n\n        // set refresh interval\n        $this->output->set_env('refresh_interval', $this->config->get('refresh_interval', 0));\n        $this->output->set_env('session_lifetime', $this->config->get('session_lifetime', 0) * 60);\n\n        if ($framed) {\n            $this->comm_path .= '&_framed=1';\n            $this->output->set_env('framed', true);\n        }\n\n        $this->output->set_env('task', $this->task);\n        $this->output->set_env('action', $this->action);\n        $this->output->set_env('comm_path', $this->comm_path);\n        $this->output->set_charset(RCUBE_CHARSET);\n\n        if ($this->user && $this->user->ID) {\n            $this->output->set_env('user_id', $this->user->get_hash());\n        }\n\n        // set compose mode for all tasks (message compose step can be triggered from everywhere)\n        $this->output->set_env('compose_extwin', $this->config->get('compose_extwin', false));\n\n        // add some basic labels to client\n        $this->output->add_label('loading', 'servererror', 'connerror', 'requesttimedout',\n            'refreshing', 'windowopenerror', 'uploadingmany', 'uploading', 'close', 'save', 'cancel',\n            'alerttitle', 'confirmationtitle', 'delete', 'continue', 'ok');\n\n        return $this->output;\n    }\n\n    /**\n     * Create an output object for JSON responses\n     *\n     * @return rcube_output Reference to JSON output object\n     */\n    public function json_init()\n    {\n        if (!$this->output instanceof rcmail_output_json) {\n            $this->output = new rcmail_output_json();\n        }\n\n        return $this->output;\n    }\n\n    /**\n     * Create session object and start the session.\n     */\n    #[\\Override]\n    public function session_init()\n    {\n        parent::session_init();\n\n        // set initial session vars\n        if (empty($_SESSION['user_id'])) {\n            $_SESSION['temp'] = true;\n        }\n    }\n\n    /**\n     * Perform login to the mail server and to the webmail service.\n     * This will also create a new user entry if auto_create_user is configured.\n     *\n     * @param string $username    Mail storage (IMAP) user name\n     * @param string $password    Mail storage (IMAP) password\n     * @param string $host        Mail storage (IMAP) host\n     * @param bool   $cookiecheck Enables cookie check\n     *\n     * @return bool True on success, False on failure\n     */\n    public function login($username, $password, $host = null, $cookiecheck = false)\n    {\n        $this->login_error = null;\n\n        if (empty($username)) {\n            return false;\n        }\n\n        if ($cookiecheck && empty($_COOKIE)) {\n            $this->login_error = self::ERROR_COOKIES_DISABLED;\n            return false;\n        }\n\n        $imap_host = $this->config->get('imap_host', 'localhost:143');\n        $username_domain = $this->config->get('username_domain');\n        $login_lc = $this->config->get('login_lc', 2);\n\n        // check username input validity\n        if (!$this->login_input_checks($username, $password)) {\n            $this->login_error = self::ERROR_INVALID_REQUEST;\n            return false;\n        }\n\n        // host is validated in rcmail::autoselect_host(), so here\n        // we'll only handle unset host (if possible)\n        if (!$host && !empty($imap_host)) {\n            if (is_array($imap_host)) {\n                $key = key($imap_host);\n                $host = is_numeric($key) ? $imap_host[$key] : $key;\n            } else {\n                $host = $imap_host;\n            }\n        }\n\n        $host = rcube_utils::parse_host($host);\n\n        if (!$host) {\n            $this->login_error = self::ERROR_INVALID_HOST;\n            return false;\n        }\n\n        // parse $host URL\n        [$host, $scheme, $port] = rcube_utils::parse_host_uri($host, 143, 993);\n\n        $ssl = in_array($scheme, ['ssl', 'imaps', 'tls']) ? $scheme : false;\n\n        // Check if we need to add/force domain to username\n        if (!empty($username_domain)) {\n            $domain = '';\n            if (is_array($username_domain)) {\n                if (!empty($username_domain[$host])) {\n                    $domain = $username_domain[$host];\n                }\n            } else {\n                $domain = $username_domain;\n            }\n\n            if ($domain = rcube_utils::parse_host((string) $domain, $host)) {\n                $pos = strpos($username, '@');\n\n                // force configured domains\n                if ($pos !== false && $this->config->get('username_domain_forced')) {\n                    $username = substr($username, 0, $pos) . '@' . $domain;\n                }\n                // just add domain if not specified\n                elseif ($pos === false) {\n                    $username .= '@' . $domain;\n                }\n            }\n        }\n\n        // Convert username to lowercase. If storage backend\n        // is case-insensitive we need to store always the same username (#1487113)\n        if ($login_lc) {\n            if ($login_lc == 2 || $login_lc === true) {\n                $username = mb_strtolower($username);\n            } elseif (strpos($username, '@')) {\n                // lowercase domain name\n                [$local, $domain] = rcube_utils::explode('@', $username);\n                $username = $local . '@' . mb_strtolower($domain);\n            }\n        }\n\n        // try to resolve email address from virtuser table\n        if (strpos($username, '@') && ($virtuser = rcube_user::email2user($username))) {\n            $username = $virtuser;\n        }\n\n        // Here we need IDNA ASCII\n        // Only rcube_contacts class is using domain names in Unicode\n        $host = rcube_utils::idn_to_ascii($host);\n        if (strpos($username, '@')) {\n            $username = rcube_utils::idn_to_ascii($username);\n        }\n\n        // user already registered -> overwrite username\n        if ($user = rcube_user::query($username, $host)) {\n            $username = $user->data['username'];\n\n            // Brute-force prevention\n            if ($user->is_locked()) {\n                $this->login_error = self::ERROR_RATE_LIMIT;\n                return false;\n            }\n        }\n\n        $storage = $this->get_storage();\n\n        // try to log in\n        if (!$storage->connect($host, $username, $password, $port, $ssl)) {\n            if ($user) {\n                $user->failed_login();\n            }\n\n            // Wait a second to slow down brute-force attacks (#1490549)\n            sleep(1);\n            return false;\n        }\n\n        // user already registered -> update user's record\n        if (is_object($user)) {\n            // update last login timestamp\n            $user->touch();\n        }\n        // create new system user\n        elseif ($this->config->get('auto_create_user')) {\n            // Temporarily set user email and password, so plugins can use it\n            // this way until we set it in session later. This is required e.g.\n            // by the user-specific LDAP operations from new_user_identity plugin.\n            $domain = $this->config->mail_domain($host);\n            $this->user_email = strpos($username, '@') ? $username : sprintf('%s@%s', $username, $domain);\n            $this->password = $password;\n\n            $user = rcube_user::create($username, $host);\n\n            $this->user_email = null;\n            $this->password = null;\n\n            if (!$user) {\n                self::raise_error([\n                    'code' => 620,\n                    'message' => 'Failed to create a user record. Maybe aborted by a plugin?',\n                ], true, false);\n            }\n        } else {\n            self::raise_error([\n                'code' => 621,\n                'message' => \"Access denied for new user {$username}. 'auto_create_user' is disabled\",\n            ], true, false);\n        }\n\n        // login succeeded\n        if (is_object($user) && $user->ID) {\n            // Configure environment\n            $this->set_user($user);\n            $this->set_storage_prop();\n\n            // set session vars\n            $_SESSION['user_id'] = $user->ID;\n            $_SESSION['username'] = $user->data['username'];\n            $_SESSION['storage_host'] = $host;\n            $_SESSION['storage_port'] = $port;\n            $_SESSION['storage_ssl'] = $ssl;\n            $_SESSION['password'] = $this->encrypt($password);\n            $_SESSION['login_time'] = time();\n\n            $timezone = rcube_utils::get_input_string('_timezone', rcube_utils::INPUT_GPC);\n            if ($timezone && $timezone != '_default_' && preg_match('|^[a-z0-9/_+-]+$|i', $timezone)) {\n                $_SESSION['timezone'] = $timezone;\n            }\n\n            // fix some old settings according to namespace prefix\n            $this->fix_namespace_settings($user);\n\n            // set/create special folders\n            $this->set_special_folders();\n\n            // clear all mailboxes related cache(s)\n            $storage->clear_cache('mailboxes', true);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns error code of last login operation\n     *\n     * @return int|null Error code\n     */\n    public function login_error()\n    {\n        if ($this->login_error) {\n            return $this->login_error;\n        }\n\n        if ($this->storage && $this->storage->get_error_code() < -1) {\n            return self::ERROR_STORAGE;\n        }\n\n        return null;\n    }\n\n    /**\n     * Validate username input\n     *\n     * @param string $username User name\n     * @param string $password User password\n     *\n     * @return bool True if valid, False otherwise\n     */\n    private function login_input_checks($username, $password)\n    {\n        $username_filter = $this->config->get('login_username_filter');\n        $username_maxlen = $this->config->get('login_username_maxlen', 1024);\n        $password_maxlen = $this->config->get('login_password_maxlen', 1024);\n\n        if ($username_maxlen && strlen($username) > $username_maxlen) {\n            return false;\n        }\n\n        if ($password_maxlen && strlen($password) > $password_maxlen) {\n            return false;\n        }\n\n        if ($username_filter) {\n            $is_email = strtolower($username_filter) == 'email';\n\n            if ($is_email && !rcube_utils::check_email($username, false)) {\n                return false;\n            }\n\n            if (!$is_email && !preg_match($username_filter, $username)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Detects session errors\n     *\n     * @return string|null Error label\n     */\n    public function session_error()\n    {\n        // log session failures\n        $task = rcube_utils::get_input_string('_task', rcube_utils::INPUT_GPC);\n\n        if ($task && !in_array($task, ['login', 'logout']) && !empty($_COOKIE[ini_get('session.name')])) {\n            $sess_id = $_COOKIE[ini_get('session.name')];\n            $log = \"Aborted session {$sess_id}; no valid session data found\";\n            $error = 'sessionerror';\n\n            // In rare cases web browser might end up with multiple cookies of the same name\n            // but different params, e.g. domain (webmail.domain.tld and .webmail.domain.tld).\n            // In such case browser will send both cookies in the request header\n            // problem is that PHP session handler can use only one and if that one session\n            // does not exist we'll end up here\n            $cookie = rcube_utils::request_header('Cookie');\n            $cookie_sessid = $this->config->get('session_name') ?: 'roundcube_sessid';\n            $cookie_sessauth = $this->config->get('session_auth_name') ?: 'roundcube_sessauth';\n\n            if (substr_count($cookie, $cookie_sessid . '=') > 1 || substr_count($cookie, $cookie_sessauth . '=') > 1) {\n                $log .= '. Cookies mismatch';\n                $error = 'cookiesmismatch';\n            }\n\n            $this->session->log($log);\n\n            return $error;\n        }\n\n        return null;\n    }\n\n    /**\n     * Auto-select IMAP host based on the posted login information\n     *\n     * @return string Selected IMAP host\n     */\n    public function autoselect_host()\n    {\n        $default_host = $this->config->get('imap_host');\n        $host = null;\n\n        if (is_array($default_host)) {\n            $post_host = rcube_utils::get_input_string('_host', rcube_utils::INPUT_POST);\n            $post_user = rcube_utils::get_input_string('_user', rcube_utils::INPUT_POST);\n\n            [, $domain] = rcube_utils::explode('@', $post_user);\n\n            // direct match in default_host array\n            if (!empty($default_host[$post_host]) || in_array($post_host, array_values($default_host))) {\n                $host = $post_host;\n            }\n            // try to select host by mail domain\n            elseif (!empty($domain)) {\n                foreach ($default_host as $storage_host => $mail_domains) {\n                    if (is_array($mail_domains) && in_array_nocase($domain, $mail_domains)) {\n                        $host = $storage_host;\n                        break;\n                    } elseif (stripos($storage_host, $domain) !== false || stripos(strval($mail_domains), $domain) !== false) {\n                        $host = is_numeric($storage_host) ? $mail_domains : $storage_host;\n                        break;\n                    }\n                }\n            }\n\n            // take the first entry if $host is still not set\n            if (empty($host)) {\n                $key = key($default_host);\n                $host = is_numeric($key) ? $default_host[$key] : $key;\n            }\n        } elseif (empty($default_host)) {\n            $host = rcube_utils::get_input_string('_host', rcube_utils::INPUT_POST);\n        } else {\n            $host = rcube_utils::parse_host($default_host);\n        }\n\n        return $host;\n    }\n\n    /**\n     * Destroy session data and remove cookie\n     */\n    public function kill_session()\n    {\n        $this->plugins->exec_hook('session_destroy');\n\n        $this->session->kill();\n        $_SESSION = ['language' => $this->user->language, 'temp' => true];\n        $this->user->reset();\n\n        if ($this->config->get('skin') != $this->default_skin && method_exists($this->output, 'set_skin')) {\n            $this->output->set_skin($this->default_skin);\n        }\n    }\n\n    /**\n     * Do server side actions on logout\n     */\n    public function logout_actions()\n    {\n        $storage = $this->get_storage();\n        $logout_expunge = $this->config->get('logout_expunge');\n        $logout_purge = $this->config->get('logout_purge');\n        $trash_mbox = $this->config->get('trash_mbox');\n\n        if ($logout_purge && !empty($trash_mbox)) {\n            $getMessages = static function ($folder) use ($logout_purge, $storage) {\n                if (is_numeric($logout_purge)) {\n                    $now = new \\DateTime('now');\n                    $interval = new \\DateInterval('P' . intval($logout_purge) . 'D');\n\n                    return $storage->search_once($folder, 'BEFORE ' . $now->sub($interval)->format('j-M-Y'));\n                }\n\n                return '*';\n            };\n\n            $storage->delete_message($getMessages($trash_mbox), $trash_mbox);\n\n            // Trash subfolders\n            $delimiter = $storage->get_hierarchy_delimiter();\n            $subfolders = array_reverse($storage->list_folders($trash_mbox . $delimiter, '*'));\n            $last = '';\n\n            foreach ($subfolders as $folder) {\n                $messages = $getMessages($folder);\n\n                // Delete the folder if in all-messages mode, or all existing messages are to-be-removed,\n                // but not if there's a subfolder\n                if (\n                    ($messages === '*' || $messages->count() == $storage->count($folder, 'ALL', false, false))\n                    && !str_starts_with($last, $folder . $delimiter)\n                ) {\n                    $storage->delete_folder($folder);\n                } else {\n                    $storage->delete_message($messages, $folder);\n                    $last = $folder;\n                }\n            }\n        }\n\n        if ($logout_expunge) {\n            $storage->expunge_folder('INBOX');\n        }\n\n        // Try to save unsaved user preferences\n        if (!empty($_SESSION['preferences'])) {\n            $this->user->save_prefs(unserialize($_SESSION['preferences']));\n        }\n    }\n\n    /**\n     * Build a valid URL to this instance of Roundcube\n     *\n     * @param mixed $p        Either a string with the action or\n     *                        url parameters as key-value pairs\n     * @param bool  $absolute Build a URL absolute to document root\n     * @param bool  $full     Create fully qualified URL including http(s):// and hostname\n     * @param bool  $secure   Return absolute URL in secure location\n     *\n     * @return string Valid application URL\n     */\n    #[\\Override]\n    public function url($p, $absolute = false, $full = false, $secure = false)\n    {\n        if (!is_array($p)) {\n            if (preg_match('#^https?://#', $p)) {\n                return $p;\n            }\n\n            $p = ['_action' => $p];\n        }\n\n        $task = $this->task;\n\n        if (!empty($p['_task'])) {\n            $task = $p['_task'];\n        } elseif (!empty($p['task'])) {\n            $task = $p['task'];\n        }\n\n        unset($p['task'], $p['_task']);\n\n        $pre = ['_task' => $task];\n        $url = $this->filename;\n        $delm = '?';\n\n        foreach (array_merge($pre, $p) as $key => $val) {\n            if ($val !== '' && $val !== null) {\n                $par = $key[0] == '_' ? $key : ('_' . $key);\n                $url .= $delm . urlencode($par) . '=' . urlencode($val);\n                $delm = '&';\n            }\n        }\n\n        $base_path = $this->get_request_path();\n\n        if ($secure && ($token = $this->get_secure_url_token(true))) {\n            // add token to the url\n            $url = $token . '/' . $url;\n\n            // remove old token from the path\n            $base_path = rtrim($base_path, '/');\n            $base_path = preg_replace('/\\/[a-zA-Z0-9]{' . strlen($token) . '}$/', '', $base_path);\n\n            // this need to be full url to make redirects work\n            $absolute = true;\n        } elseif ($secure && ($token = $this->get_request_token())) {\n            $url .= $delm . '_token=' . urlencode($token);\n        }\n\n        if ($absolute || $full) {\n            // add base path to this Roundcube installation\n            $prefix = $base_path ?: '/';\n\n            // prepend protocol://hostname:port\n            if ($full) {\n                $prefix = rcube_utils::resolve_url($prefix);\n            }\n\n            $prefix = rtrim($prefix, '/') . '/';\n        } else {\n            $prefix = $base_path ?: './';\n        }\n\n        return $prefix . $url;\n    }\n\n    /**\n     * Get the the request path\n     */\n    protected function get_request_path()\n    {\n        $path = $this->config->get('request_path');\n\n        if ($path && isset($_SERVER[$path])) {\n            // HTTP headers need to come from a trusted proxy host\n            if (str_starts_with($path, 'HTTP_') && !rcube_utils::check_proxy_whitelist_ip()) {\n                return '/';\n            }\n\n            $path = $_SERVER[$path];\n        } elseif (empty($path)) {\n            foreach (['REQUEST_URI', 'REDIRECT_SCRIPT_URL', 'SCRIPT_NAME'] as $name) {\n                if (!empty($_SERVER[$name])) {\n                    $path = $_SERVER[$name];\n                    break;\n                }\n            }\n        } else {\n            return rtrim($path, '/') . '/';\n        }\n\n        $path = preg_replace('/index\\.php.*$/', '', (string) $path);\n        $path = preg_replace('/[?&].*$/', '', $path);\n        $path = preg_replace('![^/]+$!', '', $path);\n\n        return rtrim($path, '/') . '/';\n    }\n\n    /**\n     * Function to be executed in script shutdown\n     */\n    #[\\Override]\n    public function shutdown()\n    {\n        parent::shutdown();\n\n        foreach ($this->address_books as $book) {\n            if (is_a($book, 'rcube_addressbook')) {\n                $book->close();\n            }\n        }\n\n        $this->address_books = [];\n\n        // In CLI stop here, prevent from errors when the console.log might exist,\n        // but be not accessible\n        if (\\PHP_SAPI == 'cli') {\n            return;\n        }\n\n        // write performance stats to logs/console\n        if ($this->config->get('devel_mode') || $this->config->get('performance_stats')) {\n            // we have to disable per_user_logging to make sure stats end up in the main console log\n            $this->config->set('per_user_logging', false);\n\n            // make sure logged numbers use unified format\n            setlocale(\\LC_NUMERIC, 'en_US.utf8', 'en_US.UTF-8', 'en_US', 'C');\n\n            if (function_exists('memory_get_usage')) {\n                $mem = round(memory_get_usage() / 1024 / 1024, 1);\n\n                if (function_exists('memory_get_peak_usage')) {\n                    $mem .= '/' . round(memory_get_peak_usage() / 1024 / 1024, 1);\n                }\n            }\n\n            $log = $this->task . ($this->action ? '/' . $this->action : '') . (isset($mem) ? \" [{$mem}]\" : '');\n\n            if (defined('RCMAIL_START')) {\n                self::print_timer(RCMAIL_START, $log);\n            } else {\n                self::console($log);\n            }\n        }\n    }\n\n    /**\n     * CSRF attack prevention code. Raises error when check fails.\n     *\n     * @param int $mode Request mode\n     */\n    public function request_security_check($mode = rcube_utils::INPUT_POST)\n    {\n        // check request token\n        if (!$this->check_request($mode)) {\n            $error = ['code' => 403, 'message' => 'Request security check failed'];\n            self::raise_error($error, false, true);\n        }\n    }\n\n    /**\n     * Fixes some user preferences according to namespace handling change.\n     * Old Roundcube versions were using folder names with removed namespace prefix.\n     * Now we need to add the prefix on servers where personal namespace has prefix.\n     *\n     * @param rcube_user $user User object\n     */\n    private function fix_namespace_settings($user)\n    {\n        $prefix = (string) $this->storage->get_namespace('prefix');\n        $prefix_len = strlen($prefix);\n\n        if (!$prefix_len) {\n            return;\n        }\n\n        if ($this->config->get('namespace_fixed')) {\n            return;\n        }\n\n        $prefs = [];\n\n        // Build namespace prefix regexp\n        $ns = $this->storage->get_namespace();\n        $regexp = [];\n\n        foreach ($ns as $entry) {\n            if (!empty($entry)) {\n                foreach ($entry as $item) {\n                    if (isset($item[0]) && strlen($item[0])) {\n                        $regexp[] = preg_quote($item[0], '/');\n                    }\n                }\n            }\n        }\n        $regexp = '/^(' . implode('|', $regexp) . ')/';\n\n        // Fix preferences\n        $opts = ['drafts_mbox', 'junk_mbox', 'sent_mbox', 'trash_mbox', 'archive_mbox'];\n        foreach ($opts as $opt) {\n            if ($value = $this->config->get($opt)) {\n                if ($value != 'INBOX' && !preg_match($regexp, $value)) {\n                    $prefs[$opt] = $prefix . $value;\n                }\n            }\n        }\n\n        if (($search_mods = $this->config->get('search_mods')) && count($search_mods) > 0) {\n            $folders = [];\n            foreach ($search_mods as $idx => $value) {\n                if ($idx != 'INBOX' && $idx != '*' && !preg_match($regexp, $idx)) {\n                    $idx = $prefix . $idx;\n                }\n                $folders[$idx] = $value;\n            }\n\n            $prefs['search_mods'] = $folders;\n        }\n\n        if (($threading = $this->config->get('message_threading')) && count($threading) > 0) {\n            $folders = [];\n            foreach ($threading as $idx => $value) {\n                if ($idx != 'INBOX' && !preg_match($regexp, $idx)) {\n                    $idx = $prefix . $idx;\n                }\n                $folders[$idx] = $value;\n            }\n\n            $prefs['message_threading'] = $folders;\n        }\n\n        if ($collapsed = $this->config->get('collapsed_folders')) {\n            $folders = explode('&&', $collapsed);\n            $count = count($folders);\n            $folders_str = '';\n\n            $folders[0] = substr($folders[0], 1);\n            $folders[$count - 1] = substr($folders[$count - 1], 0, -1);\n\n            foreach ($folders as $value) {\n                if ($value != 'INBOX' && !preg_match($regexp, $value)) {\n                    $value = $prefix . $value;\n                }\n                $folders_str .= '&' . $value . '&';\n            }\n\n            $prefs['collapsed_folders'] = $folders_str;\n        }\n\n        $prefs['namespace_fixed'] = true;\n\n        // save updated preferences and reset imap settings (default folders)\n        $user->save_prefs($prefs);\n        $this->set_storage_prop();\n    }\n\n    /**\n     * Overwrite action variable\n     *\n     * @param string $action New action value\n     * @param array  $args   Arguments to be passed to the next action\n     */\n    public function overwrite_action($action, $args = [])\n    {\n        $this->action = $action;\n        $this->action_args = array_merge($this->action_args, $args);\n        $this->output->set_env('action', $action);\n    }\n\n    /**\n     * Set environment variables for specified config options\n     *\n     * @param array $options List of configuration option names\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::set_env_config()\n     */\n    public function set_env_config($options)\n    {\n        rcmail_action::set_env_config($options);\n    }\n\n    /**\n     * Insert a contact to specified addressbook.\n     *\n     * @param array             $contact Contact data\n     * @param rcube_addressbook $source  The addressbook object\n     * @param string            $error   Filled with an error message/label on error\n     *\n     * @return int|string|bool Contact ID on success, False otherwise\n     */\n    public function contact_create($contact, $source, &$error = null)\n    {\n        $contact['email'] = rcube_utils::idn_to_utf8($contact['email']);\n\n        $contact = $this->plugins->exec_hook('contact_displayname', $contact);\n\n        if (empty($contact['name'])) {\n            $contact['name'] = rcube_addressbook::compose_display_name($contact);\n        }\n\n        // validate the contact\n        if (!$source->validate($contact, true)) {\n            $err = $source->get_error();\n            if (!empty($err['message'])) {\n                $error = $err['message'];\n            }\n\n            return false;\n        }\n\n        $plugin = $this->plugins->exec_hook('contact_create', [\n            'record' => $contact,\n            'source' => $this->get_address_book_id($source),\n        ]);\n\n        $contact = $plugin['record'];\n\n        if (!empty($plugin['abort'])) {\n            if (!empty($plugin['message'])) {\n                $error = $plugin['message'];\n            }\n\n            return $plugin['result'];\n        }\n\n        return $source->insert($contact);\n    }\n\n    /**\n     * Find an email address in user addressbook(s)\n     *\n     * @param string $email Email address\n     * @param int    $type  Addressbook type (see rcube_addressbook::TYPE_* constants)\n     *\n     * @return bool True if the address exists in specified addressbook(s), False otherwise\n     */\n    public function contact_exists($email, $type)\n    {\n        // @phpstan-ignore-next-line\n        if (empty($email) || !is_string($email) || !strpos($email, '@')) {\n            return false;\n        }\n\n        $email = rcube_utils::idn_to_utf8($email);\n\n        // TODO: Support TYPE_READONLY filter\n        $sources = [];\n\n        if ($type & rcube_addressbook::TYPE_WRITEABLE) {\n            foreach ($this->get_address_sources(true, true) as $book) {\n                $sources[] = $book['id'];\n            }\n        }\n\n        if ($type & rcube_addressbook::TYPE_DEFAULT) {\n            if ($default = $this->get_address_book(rcube_addressbook::TYPE_DEFAULT, true)) {\n                $book_id = $this->get_address_book_id($default);\n                if (!in_array($book_id, $sources)) {\n                    $sources[] = $book_id;\n                }\n            }\n        }\n\n        if ($type & rcube_addressbook::TYPE_RECIPIENT) {\n            $collected_recipients = $this->config->get('collected_recipients');\n            if (strlen($collected_recipients) && !in_array($collected_recipients, $sources)) {\n                array_unshift($sources, $collected_recipients);\n            }\n        }\n\n        if ($type & rcube_addressbook::TYPE_TRUSTED_SENDER) {\n            $collected_senders = $this->config->get('collected_senders');\n            if (strlen($collected_senders) && !in_array($collected_senders, $sources)) {\n                array_unshift($sources, $collected_senders);\n            }\n        }\n\n        $plugin = $this->plugins->exec_hook('contact_exists', [\n            'email' => $email,\n            'type' => $type,\n            'sources' => $sources,\n        ]);\n\n        if (!empty($plugin['abort'])) {\n            return $plugin['result'];\n        }\n\n        foreach ($plugin['sources'] as $source) {\n            $contacts = $this->get_address_book($source);\n\n            if (!$contacts) {\n                continue;\n            }\n\n            $result = $contacts->search('email', $email, rcube_addressbook::SEARCH_STRICT, false);\n\n            if ($result->count) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns RFC2822 formatted current date in user's timezone\n     *\n     * @return string Date\n     */\n    public function user_date()\n    {\n        // get user's timezone\n        try {\n            $tz = new \\DateTimeZone($this->config->get('timezone'));\n            $date = new \\DateTime('now', $tz);\n        } catch (\\Exception $e) {\n            $date = new \\DateTime();\n        }\n\n        return $date->format('r');\n    }\n\n    /**\n     * Write login data (name, ID, IP address) to the 'userlogins' log file.\n     */\n    public function log_login($user = null, $failed_login = false, $error_code = 0)\n    {\n        if (!$this->config->get('log_logins')) {\n            return;\n        }\n\n        // don't log full session id for security reasons\n        $session_id = session_id();\n        $session_id = $session_id ? substr($session_id, 0, 16) : 'no-session';\n\n        // failed login\n        if ($failed_login) {\n            // don't fill the log with complete input, which could\n            // have been prepared by a hacker\n            if (strlen($user) > 256) {\n                $user = substr($user, 0, 256) . '...';\n            }\n\n            $message = sprintf('Failed login for %s from %s in session %s (error: %d)',\n                $user, rcube_utils::remote_ip(), $session_id, $error_code);\n        }\n        // successful login\n        else {\n            $user_name = $this->get_user_name();\n            $user_id = $this->get_user_id();\n\n            if (!$user_id) {\n                return;\n            }\n\n            $message = sprintf('Successful login for %s (ID: %d) from %s in session %s',\n                $user_name, $user_id, rcube_utils::remote_ip(), $session_id);\n        }\n\n        // log login\n        self::write_log('userlogins', $message);\n    }\n\n    /**\n     * Check if specified asset file exists\n     *\n     * @param string $path     Asset path\n     * @param bool   $minified Fallback to minified version of the file\n     *\n     * @return string|null Asset path if found (modified if minified file found)\n     */\n    public function find_asset($path, $minified = true)\n    {\n        if (empty($path)) {\n            return null;\n        }\n\n        $root_path = unslashify(INSTALL_PATH) . '/';\n        $full_path = $root_path . trim($path, '/');\n\n        if (file_exists($full_path)) {\n            return $path;\n        }\n\n        if ($minified && preg_match('/(?<!\\.min)\\.(js|css)$/', $path)) {\n            $path = preg_replace('/\\.(js|css)$/', '.min.\\1', $path);\n            $full_path = $root_path . trim($path, '/');\n\n            if (file_exists($full_path)) {\n                return $path;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Create a HTML table based on the given data\n     *\n     * @param array  $attrib     Named table attributes\n     * @param mixed  $table_data Table row data. Either a two-dimensional array\n     *                           or a valid SQL result set\n     * @param array  $show_cols  List of cols to show\n     * @param string $id_col     Name of the identifier col\n     *\n     * @return string HTML table code\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::table_output()\n     */\n    public function table_output($attrib, $table_data, $show_cols, $id_col)\n    {\n        return rcmail_action::table_output($attrib, $table_data, $show_cols, $id_col);\n    }\n\n    /**\n     * Convert the given date to a human readable form\n     * This uses the date formatting properties from config\n     *\n     * @param string|int|\\DateTime|\\DateTimeImmutable $date    Date representation\n     * @param string                                  $format  Date format to use\n     * @param bool                                    $convert Enables date conversion according to user timezone\n     *\n     * @return string Formatted date string\n     */\n    public function format_date($date, $format = null, $convert = true)\n    {\n        if (!$date instanceof \\DateTimeInterface) {\n            if (!empty($date)) {\n                $timestamp = rcube_utils::strtotime($date);\n            }\n\n            if (empty($timestamp)) {\n                return '';\n            }\n\n            try {\n                $date = new \\DateTime('@' . $timestamp);\n            } catch (\\Exception $e) {\n                return '';\n            }\n        }\n\n        if ($convert) {\n            try {\n                // convert to the right timezone\n                $stz = date_default_timezone_get();\n                $tz = new \\DateTimeZone($this->config->get('timezone'));\n                $date = clone $date; // don't modify the original object\n                $date->setTimezone($tz);\n            } catch (\\Exception $e) {\n                // ignore\n            }\n        }\n\n        // define date format depending on current time\n        if (!$format) {\n            $now = time();\n            $now_date = getdate($now);\n            $today_limit = mktime(0, 0, 0, $now_date['mon'], $now_date['mday'], $now_date['year']);\n            $week_limit = mktime(0, 0, 0, $now_date['mon'], $now_date['mday'] - 6, $now_date['year']);\n            $pretty_date = $this->config->get('prettydate');\n            $timestamp = $date->format('U');\n\n            if ($pretty_date && $timestamp > $today_limit && $timestamp <= $now) {\n                $format = $this->config->get('date_today', $this->config->get('time_format', 'H:i'));\n                $today = true;\n            } elseif ($pretty_date && $timestamp > $week_limit && $timestamp <= $now) {\n                $format = $this->config->get('date_short', 'D H:i');\n            } else {\n                $format = $this->config->get('date_long', 'Y-m-d H:i');\n            }\n        }\n\n        // parse format string manually in order to provide localized weekday and month names\n        $out = '';\n        for ($i = 0; $i < strlen($format); $i++) {\n            if ($format[$i] == '\\\\') {  // skip escape chars\n                continue;\n            }\n\n            // write char \"as-is\"\n            if ($format[$i] == ' ' || ($i > 0 && $format[$i - 1] == '\\\\')) {\n                $out .= $format[$i];\n            }\n            // weekday (short)\n            elseif ($format[$i] == 'D') {\n                $out .= $this->gettext(strtolower($date->format('D')));\n            }\n            // weekday long\n            elseif ($format[$i] == 'l') {\n                $out .= $this->gettext(strtolower($date->format('l')));\n            }\n            // month name (short)\n            elseif ($format[$i] == 'M') {\n                $out .= $this->gettext(strtolower($date->format('M')));\n            }\n            // month name (long)\n            elseif ($format[$i] == 'F') {\n                $out .= $this->gettext('long' . strtolower($date->format('M')));\n            } elseif ($format[$i] == 'x') {\n                $out .= \\IntlDateFormatter::formatObject($date, [\\IntlDateFormatter::SHORT, \\IntlDateFormatter::SHORT]);\n            } else {\n                $out .= $date->format($format[$i]);\n            }\n        }\n\n        if (!empty($today)) {\n            $label = $this->gettext('today');\n            // replace $ character with \"Today\" label (#1486120)\n            if (str_contains($out, '$')) {\n                $out = preg_replace('/\\$/', $label, $out, 1);\n            } else {\n                $out = $label . ' ' . $out;\n            }\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return folders list in HTML\n     *\n     * @param array $attrib Named parameters\n     *\n     * @return string HTML code for the gui object\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::folder_list()\n     */\n    public function folder_list($attrib)\n    {\n        return rcmail_action::folder_list($attrib);\n    }\n\n    /**\n     * Return folders list as html_select object\n     *\n     * @param array $p Named parameters\n     *\n     * @return html_select HTML drop-down object\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::folder_selector()\n     */\n    public function folder_selector($p = [])\n    {\n        return rcmail_action::folder_selector($p);\n    }\n\n    /**\n     * Returns class name for the given folder if it is a special folder\n     * (including shared/other users namespace roots).\n     *\n     * @param string $folder_id IMAP Folder name\n     *\n     * @return string|null CSS class name\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::folder_classname()\n     */\n    public function folder_classname($folder_id)\n    {\n        return rcmail_action::folder_classname($folder_id);\n    }\n\n    /**\n     * Try to localize the given IMAP folder name.\n     * UTF-7 decode it in case no localized text was found\n     *\n     * @param string $name        Folder name\n     * @param bool   $with_path   Enable path localization\n     * @param bool   $path_remove Remove the path\n     *\n     * @return string Localized folder name in UTF-8 encoding\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::localize_foldername()\n     */\n    public function localize_foldername($name, $with_path = false, $path_remove = false)\n    {\n        return rcmail_action::localize_foldername($name, $with_path, $path_remove);\n    }\n\n    /**\n     * Localize folder path\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::localize_folderpath()\n     */\n    public function localize_folderpath($path)\n    {\n        return rcmail_action::localize_folderpath($path);\n    }\n\n    /**\n     * Return HTML for quota indicator object\n     *\n     * @param array $attrib Named parameters\n     *\n     * @return string HTML code for the quota indicator object\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::quota_display()\n     */\n    public static function quota_display($attrib)\n    {\n        return rcmail_action::quota_display($attrib);\n    }\n\n    /**\n     * Return (parsed) quota information\n     *\n     * @param array $attrib Named parameters\n     * @param array $folder Current folder\n     *\n     * @return array Quota information\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::quota_content()\n     */\n    public function quota_content($attrib = null, $folder = null)\n    {\n        return rcmail_action::quota_content($attrib, $folder);\n    }\n\n    /**\n     * Outputs error message according to server error/response codes\n     *\n     * @param string $fallback      Fallback message label\n     * @param array  $fallback_args Fallback message label arguments\n     * @param string $suffix        Message label suffix\n     * @param array  $params        Additional parameters (type, prefix)\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::display_server_error()\n     */\n    public function display_server_error($fallback = null, $fallback_args = null, $suffix = '', $params = [])\n    {\n        rcmail_action::display_server_error($fallback, $fallback_args, $suffix, $params);\n    }\n\n    /**\n     * Displays an error message on storage fatal errors\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::storage_fatal_error()\n     */\n    public function storage_fatal_error()\n    {\n        rcmail_action::storage_fatal_error();\n    }\n\n    /**\n     * Output HTML editor scripts\n     *\n     * @param string $mode Editor mode\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::html_editor()\n     */\n    public function html_editor($mode = '')\n    {\n        rcmail_action::html_editor($mode);\n    }\n\n    /**\n     * File upload progress handler.\n     *\n     * @deprecated We're using HTML5 upload progress\n     */\n    public function upload_progress()\n    {\n        // NOOP\n        $this->output->send();\n    }\n\n    /**\n     * Initializes file uploading interface.\n     *\n     * @param int $max_size Optional maximum file size in bytes\n     *\n     * @return string Human-readable file size limit\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::upload_init()\n     */\n    public function upload_init($max_size = null)\n    {\n        return rcmail_action::upload_init($max_size);\n    }\n\n    /**\n     * Upload form object\n     *\n     * @param array  $attrib     Object attributes\n     * @param string $name       Form object name\n     * @param string $action     Form action name\n     * @param array  $input_attr File input attributes\n     * @param int    $max_size   Maximum upload size\n     *\n     * @return string HTML output\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::upload_form()\n     */\n    public function upload_form($attrib, $name, $action, $input_attr = [], $max_size = null)\n    {\n        return rcmail_action::upload_form($attrib, $name, $action, $input_attr, $max_size);\n    }\n\n    /**\n     * Initializes client-side autocompletion.\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::autocomplete_init()\n     */\n    public function autocomplete_init()\n    {\n        rcmail_action::autocomplete_init();\n    }\n\n    /**\n     * Returns supported font-family specifications\n     *\n     * @param string $font Font name\n     *\n     * @return string|array Font-family specification array or string (if $font is used)\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::autocomplete_init()\n     */\n    public static function font_defs($font = null)\n    {\n        return rcmail_action::font_defs($font);\n    }\n\n    /**\n     * Create a human readable string for a number of bytes\n     *\n     * @param int    $bytes Number of bytes\n     * @param string &$unit Size unit\n     *\n     * @return string Byte string\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::show_bytes()\n     */\n    public function show_bytes($bytes, &$unit = null)\n    {\n        return rcmail_action::show_bytes($bytes, $unit);\n    }\n\n    /**\n     * Returns real size (calculated) of the message part\n     *\n     * @param rcube_message_part $part Message part\n     *\n     * @return string Part size (and unit)\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::message_part_size()\n     */\n    public function message_part_size($part)\n    {\n        return rcmail_action::message_part_size($part);\n    }\n\n    /**\n     * Returns message UID(s) and IMAP folder(s) from GET/POST data\n     *\n     * @param string $uids           UID value to decode\n     * @param string $mbox           Default mailbox value (if not encoded in UIDs)\n     * @param bool   $is_multifolder Will be set to True if multi-folder request\n     * @param int    $mode           Request mode. Default: rcube_utils::INPUT_GPC.\n     *\n     * @return array List of message UIDs per folder\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::get_uids()\n     */\n    public static function get_uids($uids = null, $mbox = null, &$is_multifolder = false, $mode = null)\n    {\n        return rcmail_action::get_uids($uids, $mbox, $is_multifolder, $mode);\n    }\n\n    /**\n     * Get resource file content\n     *\n     * @param string $name File name\n     *\n     * @return string File content\n     *\n     * @deprecated since 1.5-beta, use rcmail_action::get_resource_content()\n     */\n    public function get_resource_content($name)\n    {\n        return rcmail_action::get_resource_content($name);\n    }\n\n    /**\n     * Converts HTML content into plain text\n     *\n     * @param string $html    HTML content\n     * @param array  $options Conversion parameters (width, links, charset)\n     *\n     * @return string Plain text\n     */\n    public function html2text($html, $options = [])\n    {\n        $default_options = [\n            'links' => $this->config->get('html2text_links', rcube_html2text::LINKS_DEFAULT),\n            'width' => $this->config->get('html2text_width') ?: 75,\n            'body' => $html,\n            'charset' => RCUBE_CHARSET,\n        ];\n\n        $options = array_merge($default_options, (array) $options);\n\n        // Plugins may want to modify HTML in another/additional way\n        $options = $this->plugins->exec_hook('html2text', $options);\n\n        // Convert to text\n        if (empty($options['abort'])) {\n            $converter = new rcube_html2text($options['body'],\n                false, $options['links'], $options['width'], $options['charset']);\n\n            $options['body'] = rtrim($converter->get_text());\n        }\n\n        return $options['body'];\n    }\n\n    /**\n     * Connect to the mail storage server with stored session data\n     *\n     * @return bool True on success, False on error\n     */\n    public function storage_connect()\n    {\n        $storage = $this->get_storage();\n\n        if (!empty($_SESSION['storage_host']) && !$storage->is_connected()) {\n            $host = $_SESSION['storage_host'];\n            $user = $_SESSION['username'];\n            $port = $_SESSION['storage_port'];\n            $ssl = $_SESSION['storage_ssl'];\n            $pass = $this->decrypt($_SESSION['password']);\n\n            if (!$storage->connect($host, $user, $pass, $port, $ssl)) {\n                if (!empty($this->output)) {\n                    $this->output->show_message('storageerror', 'error');\n                }\n            } else {\n                $this->set_storage_prop();\n            }\n        }\n\n        return $storage->is_connected();\n    }\n}\n", "patch": "@@ -813,6 +813,8 @@ public function url($p, $absolute = false, $full = false, $secure = false)\n             // this need to be full url to make redirects work\n             $absolute = true;\n         }\n+        else if ($secure && ($token = $this->get_request_token()))\n+            $url .= $delm . '_token=' . urlencode($token);\n \n         if ($absolute || $full) {\n             // add base path to this Roundcube installation", "file_path": "files/2016_8\\22", "file_language": "php", "file_name": "program/include/rcmail.php", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/699af1e5206ed9114322adaa3c25c1c969640a53/program/include/rcmail_output_html.php", "code": "<?php\n\n/*\n +-----------------------------------------------------------------------+\n | program/include/rcmail_output_html.php                                |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2006-2014, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Class to handle HTML page output using a skin template.             |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n\n/**\n * Class to create HTML page output using a skin template\n *\n * @package Webmail\n * @subpackage View\n */\nclass rcmail_output_html extends rcmail_output\n{\n    public $type = 'html';\n\n    protected $message;\n    protected $template_name;\n    protected $js_env       = array();\n    protected $js_labels    = array();\n    protected $js_commands  = array();\n    protected $skin_paths   = array();\n    protected $scripts_path = '';\n    protected $script_files = array();\n    protected $css_files    = array();\n    protected $scripts      = array();\n    protected $default_template = \"<html>\\n<head><title></title></head>\\n<body></body>\\n</html>\";\n    protected $header = '';\n    protected $footer = '';\n    protected $body = '';\n    protected $base_path = '';\n    protected $assets_path;\n    protected $assets_dir = RCUBE_INSTALL_PATH;\n    protected $devel_mode = false;\n\n    // deprecated names of templates used before 0.5\n    protected $deprecated_templates = array(\n        'contact'      => 'showcontact',\n        'contactadd'   => 'addcontact',\n        'contactedit'  => 'editcontact',\n        'identityedit' => 'editidentity',\n        'messageprint' => 'printmessage',\n    );\n\n    /**\n     * Constructor\n     */\n    public function __construct($task = null, $framed = false)\n    {\n        parent::__construct();\n\n        $this->devel_mode = $this->config->get('devel_mode');\n\n        $this->set_env('task', $task);\n        $this->set_env('x_frame_options', $this->config->get('x_frame_options', 'sameorigin'));\n        $this->set_env('standard_windows', (bool) $this->config->get('standard_windows'));\n        $this->set_env('locale', $_SESSION['language']);\n\n        // add cookie info\n        $this->set_env('cookie_domain', ini_get('session.cookie_domain'));\n        $this->set_env('cookie_path', ini_get('session.cookie_path'));\n        $this->set_env('cookie_secure', filter_var(ini_get('session.cookie_secure'), FILTER_VALIDATE_BOOLEAN));\n\n        // load the correct skin (in case user-defined)\n        $skin = $this->config->get('skin');\n        $this->set_skin($skin);\n        $this->set_env('skin', $skin);\n\n        $this->set_assets_path($this->config->get('assets_path'), $this->config->get('assets_dir'));\n\n        if (!empty($_REQUEST['_extwin']))\n            $this->set_env('extwin', 1);\n        if ($this->framed || $framed)\n            $this->set_env('framed', 1);\n\n        $lic = <<<EOF\n/*\n        @licstart  The following is the entire license notice for the \n        JavaScript code in this page.\n\n        Copyright (C) 2005-2014 The Roundcube Dev Team\n\n        The JavaScript code in this page is free software: you can redistribute\n        it and/or modify it under the terms of the GNU General Public License\n        as published by the Free Software Foundation, either version 3 of\n        the License, or (at your option) any later version.\n\n        The code is distributed WITHOUT ANY WARRANTY; without even the implied\n        warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n        See the GNU GPL for more details.\n\n        @licend  The above is the entire license notice\n        for the JavaScript code in this page.\n*/\nEOF;\n        // add common javascripts\n        $this->add_script($lic, 'head_top');\n        $this->add_script('var '.self::JS_OBJECT_NAME.' = new rcube_webmail();', 'head_top');\n\n        // don't wait for page onload. Call init at the bottom of the page (delayed)\n        $this->add_script(self::JS_OBJECT_NAME.'.init();', 'docready');\n\n        $this->scripts_path = 'program/js/';\n        $this->include_script('jquery.min.js');\n        $this->include_script('common.js');\n        $this->include_script('app.js');\n\n        // register common UI objects\n        $this->add_handlers(array(\n            'loginform'       => array($this, 'login_form'),\n            'preloader'       => array($this, 'preloader'),\n            'username'        => array($this, 'current_username'),\n            'message'         => array($this, 'message_container'),\n            'charsetselector' => array($this, 'charset_selector'),\n            'aboutcontent'    => array($this, 'about_content'),\n        ));\n    }\n\n    /**\n     * Set environment variable\n     *\n     * @param string Property name\n     * @param mixed Property value\n     * @param boolean True if this property should be added to client environment\n     */\n    public function set_env($name, $value, $addtojs = true)\n    {\n        $this->env[$name] = $value;\n\n        if ($addtojs || isset($this->js_env[$name])) {\n            $this->js_env[$name] = $value;\n        }\n    }\n\n    /**\n     * Parse and set assets path\n     *\n     * @param string Assets path (relative or absolute URL)\n     */\n    public function set_assets_path($path, $fs_dir = null)\n    {\n        if (empty($path)) {\n            return;\n        }\n\n        $path = rtrim($path, '/') . '/';\n\n        // handle relative assets path\n        if (!preg_match('|^https?://|', $path) && $path[0] != '/') {\n            // save the path to search for asset files later\n            $this->assets_dir = $path;\n\n            $base = preg_replace('/[?#&].*$/', '', $_SERVER['REQUEST_URI']);\n            $base = rtrim($base, '/');\n\n            // remove url token if exists\n            if ($len = intval($this->config->get('use_secure_urls'))) {\n                $_base  = explode('/', $base);\n                $last   = count($_base) - 1;\n                $length = $len > 1 ? $len : 16; // as in rcube::get_secure_url_token()\n\n                // we can't use real token here because it\n                // does not exists in unauthenticated state,\n                // hope this will not produce false-positive matches\n                if ($last > -1 && preg_match('/^[a-f0-9]{' . $length . '}$/', $_base[$last])) {\n                    $path = '../' . $path;\n                }\n            }\n        }\n\n        // set filesystem path for assets\n        if ($fs_dir) {\n            if ($fs_dir[0] != '/') {\n                $fs_dir = realpath(RCUBE_INSTALL_PATH . $fs_dir);\n            }\n            // ensure the path ends with a slash\n            $this->assets_dir = rtrim($fs_dir, '/') . '/';\n        }\n\n        $this->assets_path = $path;\n        $this->set_env('assets_path', $path);\n    }\n\n    /**\n     * Getter for the current page title\n     *\n     * @return string The page title\n     */\n    protected function get_pagetitle()\n    {\n        if (!empty($this->pagetitle)) {\n            $title = $this->pagetitle;\n        }\n        else if ($this->env['task'] == 'login') {\n            $title = $this->app->gettext(array(\n                'name' => 'welcome',\n                'vars' => array('product' => $this->config->get('product_name')\n            )));\n        }\n        else {\n            $title = ucfirst($this->env['task']);\n        }\n\n        return $title;\n    }\n\n    /**\n     * Set skin\n     */\n    public function set_skin($skin)\n    {\n        // Sanity check to prevent from path traversal vulnerability (#1490620)\n        if (strpos($skin, '/') !== false || strpos($skin, \"\\\\\") !== false) {\n            rcube::raise_error(array(\n                    'file'    => __FILE__,\n                    'line'    => __LINE__,\n                    'message' => 'Invalid skin name'\n                ), true, false);\n\n            return false;\n        }\n\n        $valid = false;\n        $path  = RCUBE_INSTALL_PATH . 'skins/';\n\n        if (!empty($skin) && is_dir($path . $skin) && is_readable($path . $skin)) {\n            $skin_path = 'skins/' . $skin;\n            $valid     = true;\n        }\n        else {\n            $skin_path = $this->config->get('skin_path');\n            if (!$skin_path) {\n                $skin_path = 'skins/' . rcube_config::DEFAULT_SKIN;\n            }\n            $valid = !$skin;\n        }\n\n        $skin_path = rtrim($skin_path, '/');\n\n        $this->config->set('skin_path', $skin_path);\n        $this->base_path = $skin_path;\n\n        // register skin path(s)\n        $this->skin_paths = array();\n        $this->load_skin($skin_path);\n\n        return $valid;\n    }\n\n    /**\n     * Helper method to recursively read skin meta files and register search paths\n     */\n    private function load_skin($skin_path)\n    {\n        $this->skin_paths[] = $skin_path;\n\n        // read meta file and check for dependecies\n        $meta = @file_get_contents(RCUBE_INSTALL_PATH . $skin_path . '/meta.json');\n        $meta = @json_decode($meta, true);\n\n        $meta['path'] = $skin_path;\n        $skin_id = end(explode('/', $skin_path));\n        if (!$meta['name']) {\n            $meta['name'] = $skin_id;\n        }\n        $this->skins[$skin_id] = $meta;\n\n        if ($meta['extends']) {\n            $path = RCUBE_INSTALL_PATH . 'skins/';\n            if (is_dir($path . $meta['extends']) && is_readable($path . $meta['extends'])) {\n                $this->load_skin('skins/' . $meta['extends']);\n            }\n        }\n    }\n\n    /**\n     * Check if a specific template exists\n     *\n     * @param string Template name\n     * @return boolean True if template exists\n     */\n    public function template_exists($name)\n    {\n        foreach ($this->skin_paths as $skin_path) {\n            $filename = RCUBE_INSTALL_PATH . $skin_path . '/templates/' . $name . '.html';\n            if ((is_file($filename) && is_readable($filename))\n                || ($this->deprecated_templates[$name] && $this->template_exists($this->deprecated_templates[$name]))\n            ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Find the given file in the current skin path stack\n     *\n     * @param string File name/path to resolve (starting with /)\n     * @param string Reference to the base path of the matching skin\n     * @param string Additional path to search in\n     *\n     * @return mixed Relative path to the requested file or False if not found\n     */\n    public function get_skin_file($file, &$skin_path = null, $add_path = null)\n    {\n        $skin_paths = $this->skin_paths;\n        if ($add_path) {\n            array_unshift($skin_paths, $add_path);\n        }\n\n        foreach ($skin_paths as $skin_path) {\n            $path = realpath(RCUBE_INSTALL_PATH . $skin_path . $file);\n\n            if ($path && is_file($path)) {\n                return $skin_path . $file;\n            }\n\n            if ($this->assets_dir != RCUBE_INSTALL_PATH) {\n                $path = realpath($this->assets_dir . $skin_path . $file);\n\n                if ($path && is_file($path)) {\n                    return $skin_path . $file;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Register a GUI object to the client script\n     *\n     * @param  string Object name\n     * @param  string Object ID\n     * @return void\n     */\n    public function add_gui_object($obj, $id)\n    {\n        $this->add_script(self::JS_OBJECT_NAME.\".gui_object('$obj', '$id');\");\n    }\n\n    /**\n     * Call a client method\n     *\n     * @param string Method to call\n     * @param ... Additional arguments\n     */\n    public function command()\n    {\n        $cmd = func_get_args();\n        if (strpos($cmd[0], 'plugin.') !== false)\n            $this->js_commands[] = array('triggerEvent', $cmd[0], $cmd[1]);\n        else\n            $this->js_commands[] = $cmd;\n    }\n\n    /**\n     * Add a localized label to the client environment\n     */\n    public function add_label()\n    {\n        $args = func_get_args();\n        if (count($args) == 1 && is_array($args[0]))\n            $args = $args[0];\n\n        foreach ($args as $name) {\n            $this->js_labels[$name] = $this->app->gettext($name);\n        }\n    }\n\n    /**\n     * Invoke display_message command\n     *\n     * @param string  $message  Message to display\n     * @param string  $type     Message type [notice|confirm|error]\n     * @param array   $vars     Key-value pairs to be replaced in localized text\n     * @param boolean $override Override last set message\n     * @param int     $timeout  Message display time in seconds\n     * @uses self::command()\n     */\n    public function show_message($message, $type='notice', $vars=null, $override=true, $timeout=0)\n    {\n        if ($override || !$this->message) {\n            if ($this->app->text_exists($message)) {\n                if (!empty($vars))\n                    $vars = array_map('Q', $vars);\n                $msgtext = $this->app->gettext(array('name' => $message, 'vars' => $vars));\n            }\n            else\n                $msgtext = $message;\n\n            $this->message = $message;\n            $this->command('display_message', $msgtext, $type, $timeout * 1000);\n        }\n    }\n\n    /**\n     * Delete all stored env variables and commands\n     *\n     * @param bool $all Reset all env variables (including internal)\n     */\n    public function reset($all = false)\n    {\n        $framed = $this->framed;\n        $env    = $all ? null : array_intersect_key($this->env, array('extwin'=>1, 'framed'=>1));\n\n        parent::reset();\n\n        // let some env variables survive\n        $this->env          = $this->js_env = $env;\n        $this->framed       = $framed || $this->env['framed'];\n        $this->js_labels    = array();\n        $this->js_commands  = array();\n        $this->script_files = array();\n        $this->scripts      = array();\n        $this->header       = '';\n        $this->footer       = '';\n        $this->body         = '';\n\n        // load defaults\n        if (!$all) {\n            $this->__construct();\n        }\n    }\n\n    /**\n     * Redirect to a certain url\n     *\n     * @param mixed $p      Either a string with the action or url parameters as key-value pairs\n     * @param int   $delay  Delay in seconds\n     * @param bool  $secure Redirect to secure location (see rcmail::url())\n     */\n    public function redirect($p = array(), $delay = 1, $secure = false)\n    {\n        if ($this->env['extwin'])\n            $p['extwin'] = 1;\n        $location = $this->app->url($p, false, false, $secure);\n        header('Location: ' . $location);\n        exit;\n    }\n\n    /**\n     * Send the request output to the client.\n     * This will either parse a skin tempalte or send an AJAX response\n     *\n     * @param string  Template name\n     * @param boolean True if script should terminate (default)\n     */\n    public function send($templ = null, $exit = true)\n    {\n        if ($templ != 'iframe') {\n            // prevent from endless loops\n            if ($exit != 'recur' && $this->app->plugins->is_processing('render_page')) {\n                rcube::raise_error(array('code' => 505, 'type' => 'php',\n                  'file' => __FILE__, 'line' => __LINE__,\n                  'message' => 'Recursion alert: ignoring output->send()'), true, false);\n                return;\n            }\n            $this->parse($templ, false);\n        }\n        else {\n            $this->framed = true;\n            $this->write();\n        }\n\n        // set output asap\n        ob_flush();\n        flush();\n\n        if ($exit) {\n            exit;\n        }\n    }\n\n    /**\n     * Process template and write to stdOut\n     *\n     * @param string $template HTML template content\n     */\n    public function write($template = '')\n    {\n        if (!empty($this->script_files)) {\n            $this->set_env('request_token', $this->app->get_request_token());\n        }\n\n        $commands = $this->get_js_commands($framed);\n\n        // if all js commands go to parent window we can ignore all\n        // script files and skip rcube_webmail initialization (#1489792)\n        if ($framed) {\n            $this->scripts      = array();\n            $this->script_files = array();\n            $this->header       = '';\n            $this->footer       = '';\n        }\n\n        // write all javascript commands\n        $this->add_script($commands, 'head_top');\n\n        // allow (legal) iframe content to be loaded\n        $iframe = $this->framed || $this->env['framed'];\n        if (!headers_sent() && $iframe && $this->app->config->get('x_frame_options', 'sameorigin') === 'deny') {\n            header('X-Frame-Options: sameorigin', true);\n        }\n\n        // call super method\n        $this->_write($template, $this->config->get('skin_path'));\n    }\n\n    /**\n     * Parse a specific skin template and deliver to stdout (or return)\n     *\n     * @param  string  Template name\n     * @param  boolean Exit script\n     * @param  boolean Don't write to stdout, return parsed content instead\n     *\n     * @link   http://php.net/manual/en/function.exit.php\n     */\n    function parse($name = 'main', $exit = true, $write = true)\n    {\n        $plugin   = false;\n        $realname = $name;\n        $plugin_skin_paths = array();\n\n        $this->template_name = $realname;\n\n        $temp = explode('.', $name, 2);\n        if (count($temp) > 1) {\n            $plugin   = $temp[0];\n            $name     = $temp[1];\n            $skin_dir = $plugin . '/skins/' . $this->config->get('skin');\n\n            // apply skin search escalation list to plugin directory\n            foreach ($this->skin_paths as $skin_path) {\n                $plugin_skin_paths[] = $this->app->plugins->url . $plugin . '/' . $skin_path;\n            }\n\n            // add fallback to default skin\n            if (is_dir($this->app->plugins->dir . $plugin . '/skins/default')) {\n                $skin_dir = $plugin . '/skins/default';\n                $plugin_skin_paths[] = $this->app->plugins->url . $skin_dir;\n            }\n\n            // prepend plugin skin paths to search list\n            $this->skin_paths = array_merge($plugin_skin_paths, $this->skin_paths);\n        }\n\n        // find skin template\n        $path = false;\n        foreach ($this->skin_paths as $skin_path) {\n            $path = RCUBE_INSTALL_PATH . \"$skin_path/templates/$name.html\";\n\n            // fallback to deprecated template names\n            if (!is_readable($path) && $this->deprecated_templates[$realname]) {\n                $path = RCUBE_INSTALL_PATH . \"$skin_path/templates/\" . $this->deprecated_templates[$realname] . \".html\";\n\n                if (is_readable($path)) {\n                    rcube::raise_error(array(\n                        'code' => 502, 'type' => 'php',\n                        'file' => __FILE__, 'line' => __LINE__,\n                        'message' => \"Using deprecated template '\" . $this->deprecated_templates[$realname]\n                            . \"' in $skin_path/templates. Please rename to '$realname'\"),\n                        true, false);\n                }\n            }\n\n            if (is_readable($path)) {\n                $this->config->set('skin_path', $skin_path);\n                $this->base_path = preg_replace('!plugins/\\w+/!', '', $skin_path);  // set base_path to core skin directory (not plugin's skin)\n                $skin_dir = preg_replace('!^plugins/!', '', $skin_path);\n                break;\n            }\n            else {\n                $path = false;\n            }\n        }\n\n        // read template file\n        if (!$path || ($templ = @file_get_contents($path)) === false) {\n            rcube::raise_error(array(\n                'code' => 404,\n                'type' => 'php',\n                'line' => __LINE__,\n                'file' => __FILE__,\n                'message' => 'Error loading template for '.$realname\n                ), true, $write);\n\n            $this->skin_paths = array_slice($this->skin_paths, count($plugin_skin_paths));\n            return false;\n        }\n\n        // replace all path references to plugins/... with the configured plugins dir\n        // and /this/ to the current plugin skin directory\n        if ($plugin) {\n            $templ = preg_replace(array('/\\bplugins\\//', '/([\"\\']?)\\/this\\//'), array($this->app->plugins->url, '\\\\1'.$this->app->plugins->url.$skin_dir.'/'), $templ);\n        }\n\n        // parse for specialtags\n        $output = $this->parse_conditions($templ);\n        $output = $this->parse_xml($output);\n\n        // trigger generic hook where plugins can put additional content to the page\n        $hook = $this->app->plugins->exec_hook(\"render_page\", array('template' => $realname, 'content' => $output));\n\n        // save some memory\n        $output = $hook['content'];\n        unset($hook['content']);\n\n        // make sure all <form> tags have a valid request token\n        $output = preg_replace_callback('/<form\\s+([^>]+)>/Ui', array($this, 'alter_form_tag'), $output);\n        $this->footer = preg_replace_callback('/<form\\s+([^>]+)>/Ui', array($this, 'alter_form_tag'), $this->footer);\n\n        // remove plugin skin paths from current context\n        $this->skin_paths = array_slice($this->skin_paths, count($plugin_skin_paths));\n\n        if (!$write) {\n            return $output;\n        }\n\n        $this->write(trim($output));\n\n        if ($exit) {\n            exit;\n        }\n    }\n\n    /**\n     * Return executable javascript code for all registered commands\n     *\n     * @return string $out\n     */\n    protected function get_js_commands(&$framed = null)\n    {\n        $out             = '';\n        $parent_commands = 0;\n        $top_commands    = array();\n\n        // these should be always on top,\n        // e.g. hide_message() below depends on env.framed\n        if (!$this->framed && !empty($this->js_env)) {\n            $top_commands[] = array('set_env', $this->js_env);\n        }\n        if (!empty($this->js_labels)) {\n            $top_commands[] = array('add_label', $this->js_labels);\n        }\n\n        // unlock interface after iframe load\n        $unlock = preg_replace('/[^a-z0-9]/i', '', $_REQUEST['_unlock']);\n        if ($this->framed) {\n            $top_commands[] = array('iframe_loaded', $unlock);\n        }\n        else if ($unlock) {\n            $top_commands[] = array('hide_message', $unlock);\n        }\n\n        $commands = array_merge($top_commands, $this->js_commands);\n\n        foreach ($commands as $i => $args) {\n            $method = array_shift($args);\n            $parent = $this->framed || preg_match('/^parent\\./', $method);\n\n            foreach ($args as $i => $arg) {\n                $args[$i] = self::json_serialize($arg);\n            }\n\n            if ($parent) {\n                $parent_commands++;\n                $method        = preg_replace('/^parent\\./', '', $method);\n                $parent_prefix = 'if (window.parent && parent.' . self::JS_OBJECT_NAME . ') parent.';\n                $method        = $parent_prefix . self::JS_OBJECT_NAME . '.' . $method;\n            }\n            else {\n                $method = self::JS_OBJECT_NAME . '.' . $method;\n            }\n\n            $out .= sprintf(\"%s(%s);\\n\", $method, implode(',', $args));\n        }\n\n        $framed = $parent_prefix && $parent_commands == count($commands);\n\n        // make the output more compact if all commands go to parent window\n        if ($framed) {\n            $out = \"if (window.parent && parent.\" . self::JS_OBJECT_NAME . \") {\\n\"\n                . str_replace($parent_prefix, \"\\tparent.\", $out)\n                . \"}\\n\";\n        }\n\n        return $out;\n    }\n\n    /**\n     * Make URLs starting with a slash point to skin directory\n     *\n     * @param  string Input string\n     * @param  boolean True if URL should be resolved using the current skin path stack\n     * @return string\n     */\n    public function abs_url($str, $search_path = false)\n    {\n        if ($str[0] == '/') {\n            if ($search_path && ($file_url = $this->get_skin_file($str, $skin_path))) {\n                return $file_url;\n            }\n\n            return $this->base_path . $str;\n        }\n\n        return $str;\n    }\n\n    /**\n     * Show error page and terminate script execution\n     *\n     * @param int    $code     Error code\n     * @param string $message  Error message\n     */\n    public function raise_error($code, $message)\n    {\n        global $__page_content, $ERROR_CODE, $ERROR_MESSAGE;\n\n        $ERROR_CODE    = $code;\n        $ERROR_MESSAGE = $message;\n\n        include RCUBE_INSTALL_PATH . 'program/steps/utils/error.inc';\n        exit;\n    }\n\n    /**\n     * Modify path by adding URL prefix if configured\n     */\n    public function asset_url($path)\n    {\n        // iframe content can't be in a different domain\n        // @TODO: check if assests are on a different domain\n\n        if (!$this->assets_path || in_array($path[0], array('?', '/', '.')) || strpos($path, '://')) {\n            return $path;\n        }\n\n        return $this->assets_path . $path;\n    }\n\n\n    /*****  Template parsing methods  *****/\n\n    /**\n     * Replace all strings ($varname)\n     * with the content of the according global variable.\n     */\n    protected function parse_with_globals($input)\n    {\n        $GLOBALS['__version']   = html::quote(RCMAIL_VERSION);\n        $GLOBALS['__comm_path'] = html::quote($this->app->comm_path);\n        $GLOBALS['__skin_path'] = html::quote($this->base_path);\n\n        return preg_replace_callback('/\\$(__[a-z0-9_\\-]+)/',\n            array($this, 'globals_callback'), $input);\n    }\n\n    /**\n     * Callback funtion for preg_replace_callback() in parse_with_globals()\n     */\n    protected function globals_callback($matches)\n    {\n        return $GLOBALS[$matches[1]];\n    }\n\n    /**\n     * Correct absolute paths in images and other tags\n     * add timestamp to .js and .css filename\n     */\n    protected function fix_paths($output)\n    {\n        return preg_replace_callback(\n            '!(src|href|background)=([\"\\']?)([a-z0-9/_.-]+)([\"\\'\\s>])!i',\n            array($this, 'file_callback'), $output);\n    }\n\n    /**\n     * Callback function for preg_replace_callback in fix_paths()\n     *\n     * @return string Parsed string\n     */\n    protected function file_callback($matches)\n    {\n        $file = $matches[3];\n        $file = preg_replace('!^/this/!', '/', $file);\n\n        // correct absolute paths\n        if ($file[0] == '/') {\n            $file = $this->base_path . $file;\n        }\n\n        // add file modification timestamp\n        if (preg_match('/\\.(js|css)$/', $file, $m)) {\n            $file = $this->file_mod($file);\n        }\n\n        return $matches[1] . '=' . $matches[2] . $file . $matches[4];\n    }\n\n    /**\n     * Correct paths of asset files according to assets_path\n     */\n    protected function fix_assets_paths($output)\n    {\n        return preg_replace_callback(\n            '!(src|href|background)=([\"\\']?)([a-z0-9/_.?=-]+)([\"\\'\\s>])!i',\n            array($this, 'assets_callback'), $output);\n    }\n\n    /**\n     * Callback function for preg_replace_callback in fix_assets_paths()\n     *\n     * @return string Parsed string\n     */\n    protected function assets_callback($matches)\n    {\n        $file = $this->asset_url($matches[3]);\n\n        return $matches[1] . '=' . $matches[2] . $file . $matches[4];\n    }\n\n    /**\n     * Modify file by adding mtime indicator\n     */\n    protected function file_mod($file)\n    {\n        $fs  = false;\n        $ext = substr($file, strrpos($file, '.') + 1);\n\n        // use minified file if exists (not in development mode)\n        if (!$this->devel_mode && !preg_match('/\\.min\\.' . $ext . '$/', $file)) {\n            $minified_file = substr($file, 0, strlen($ext) * -1) . 'min.' . $ext;\n            if ($fs = @filemtime($this->assets_dir . $minified_file)) {\n                return $minified_file . '?s=' . $fs;\n            }\n        }\n\n        if ($fs = @filemtime($this->assets_dir . $file)) {\n            $file .= '?s=' . $fs;\n        }\n\n        return $file;\n    }\n\n    /**\n     * Public wrapper to dipp into template parsing.\n     *\n     * @param  string $input\n     * @return string\n     * @uses   rcmail_output_html::parse_xml()\n     * @since  0.1-rc1\n     */\n    public function just_parse($input)\n    {\n        $input = $this->parse_conditions($input);\n        $input = $this->parse_xml($input);\n\n        return $input;\n    }\n\n    /**\n     * Parse for conditional tags\n     *\n     * @param  string $input\n     * @return string\n     */\n    protected function parse_conditions($input)\n    {\n        $matches = preg_split('/<roundcube:(if|elseif|else|endif)\\s+([^>]+)>\\n?/is', $input, 2, PREG_SPLIT_DELIM_CAPTURE);\n        if ($matches && count($matches) == 4) {\n            if (preg_match('/^(else|endif)$/i', $matches[1])) {\n                return $matches[0] . $this->parse_conditions($matches[3]);\n            }\n            $attrib = html::parse_attrib_string($matches[2]);\n            if (isset($attrib['condition'])) {\n                $condmet = $this->check_condition($attrib['condition']);\n                $submatches = preg_split('/<roundcube:(elseif|else|endif)\\s+([^>]+)>\\n?/is', $matches[3], 2, PREG_SPLIT_DELIM_CAPTURE);\n                if ($condmet) {\n                    $result = $submatches[0];\n                    $result.= ($submatches[1] != 'endif' ? preg_replace('/.*<roundcube:endif\\s+[^>]+>\\n?/Uis', '', $submatches[3], 1) : $submatches[3]);\n                }\n                else {\n                    $result = \"<roundcube:$submatches[1] $submatches[2]>\" . $submatches[3];\n                }\n                return $matches[0] . $this->parse_conditions($result);\n            }\n            rcube::raise_error(array(\n                'code' => 500,\n                'type' => 'php',\n                'line' => __LINE__,\n                'file' => __FILE__,\n                'message' => \"Unable to parse conditional tag \" . $matches[2]\n            ), true, false);\n        }\n        return $input;\n    }\n\n    /**\n     * Determines if a given condition is met\n     *\n     * @todo   Extend this to allow real conditions, not just \"set\"\n     * @param  string Condition statement\n     * @return boolean True if condition is met, False if not\n     */\n    protected function check_condition($condition)\n    {\n        return $this->eval_expression($condition);\n    }\n\n    /**\n     * Inserts hidden field with CSRF-prevention-token into POST forms\n     */\n    protected function alter_form_tag($matches)\n    {\n        $out    = $matches[0];\n        $attrib = html::parse_attrib_string($matches[1]);\n\n        if (strtolower($attrib['method']) == 'post') {\n            $hidden = new html_hiddenfield(array('name' => '_token', 'value' => $this->app->get_request_token()));\n            $out .= \"\\n\" . $hidden->show();\n        }\n\n        return $out;\n    }\n\n    /**\n     * Parse & evaluate a given expression and return its result.\n     *\n     * @param string Expression statement\n     *\n     * @return mixed Expression result\n     */\n    protected function eval_expression ($expression)\n    {\n        $expression = preg_replace(\n            array(\n                '/session:([a-z0-9_]+)/i',\n                '/config:([a-z0-9_]+)(:([a-z0-9_]+))?/i',\n                '/env:([a-z0-9_]+)/i',\n                '/request:([a-z0-9_]+)/i',\n                '/cookie:([a-z0-9_]+)/i',\n                '/browser:([a-z0-9_]+)/i',\n                '/template:name/i',\n            ),\n            array(\n                \"\\$_SESSION['\\\\1']\",\n                \"\\$app->config->get('\\\\1',rcube_utils::get_boolean('\\\\3'))\",\n                \"\\$env['\\\\1']\",\n                \"rcube_utils::get_input_value('\\\\1', rcube_utils::INPUT_GPC)\",\n                \"\\$_COOKIE['\\\\1']\",\n                \"\\$browser->{'\\\\1'}\",\n                $this->template_name,\n            ),\n            $expression\n        );\n\n        $fn = create_function('$app,$browser,$env', \"return ($expression);\");\n        if (!$fn) {\n            rcube::raise_error(array(\n                'code' => 505,\n                'type' => 'php',\n                'file' => __FILE__,\n                'line' => __LINE__,\n                'message' => \"Expression parse error on: ($expression)\"), true, false);\n\n            return null;\n        }\n\n        return $fn($this->app, $this->browser, $this->env);\n    }\n\n    /**\n     * Search for special tags in input and replace them\n     * with the appropriate content\n     *\n     * @param  string Input string to parse\n     * @return string Altered input string\n     * @todo   Use DOM-parser to traverse template HTML\n     * @todo   Maybe a cache.\n     */\n    protected function parse_xml($input)\n    {\n        return preg_replace_callback('/<roundcube:([-_a-z]+)\\s+((?:[^>]|\\\\\\\\>)+)(?<!\\\\\\\\)>/Ui', array($this, 'xml_command'), $input);\n    }\n\n    /**\n     * Callback function for parsing an xml command tag\n     * and turn it into real html content\n     *\n     * @param  array Matches array of preg_replace_callback\n     * @return string Tag/Object content\n     */\n    protected function xml_command($matches)\n    {\n        $command = strtolower($matches[1]);\n        $attrib  = html::parse_attrib_string($matches[2]);\n\n        // empty output if required condition is not met\n        if (!empty($attrib['condition']) && !$this->check_condition($attrib['condition'])) {\n            return '';\n        }\n\n        // localize title and summary attributes\n        if ($command != 'button' && !empty($attrib['title']) && $this->app->text_exists($attrib['title'])) {\n            $attrib['title'] = $this->app->gettext($attrib['title']);\n        }\n        if ($command != 'button' && !empty($attrib['summary']) && $this->app->text_exists($attrib['summary'])) {\n            $attrib['summary'] = $this->app->gettext($attrib['summary']);\n        }\n\n        // execute command\n        switch ($command) {\n            // return a button\n            case 'button':\n                if ($attrib['name'] || $attrib['command']) {\n                    return $this->button($attrib);\n                }\n                break;\n\n            // frame\n            case 'frame':\n                return $this->frame($attrib);\n                break;\n\n            // show a label\n            case 'label':\n                if ($attrib['expression'])\n                    $attrib['name'] = $this->eval_expression($attrib['expression']);\n\n                if ($attrib['name'] || $attrib['command']) {\n                    $vars = $attrib + array('product' => $this->config->get('product_name'));\n                    unset($vars['name'], $vars['command']);\n\n                    $label   = $this->app->gettext($attrib + array('vars' => $vars));\n                    $quoting = !empty($attrib['quoting']) ? strtolower($attrib['quoting']) : (rcube_utils::get_boolean((string)$attrib['html']) ? 'no' : '');\n\n                    // 'noshow' can be used in skins to define new labels\n                    if ($attrib['noshow']) {\n                        return '';\n                    }\n\n                    switch ($quoting) {\n                        case 'no':\n                        case 'raw':\n                            break;\n                        case 'javascript':\n                        case 'js':\n                            $label = rcube::JQ($label);\n                            break;\n                        default:\n                            $label = html::quote($label);\n                            break;\n                    }\n\n                    return $label;\n                }\n                break;\n\n            // include a file\n            case 'include':\n                $old_base_path = $this->base_path;\n                if (!empty($attrib['skin_path'])) $attrib['skinpath'] = $attrib['skin_path'];\n                if ($path = $this->get_skin_file($attrib['file'], $skin_path, $attrib['skinpath'])) {\n                    $this->base_path = preg_replace('!plugins/\\w+/!', '', $skin_path);  // set base_path to core skin directory (not plugin's skin)\n                    $path = realpath(RCUBE_INSTALL_PATH . $path);\n                }\n\n                if (is_readable($path)) {\n                    if ($this->config->get('skin_include_php')) {\n                        $incl = $this->include_php($path);\n                    }\n                    else {\n                      $incl = file_get_contents($path);\n                    }\n                    $incl = $this->parse_conditions($incl);\n                    $incl = $this->parse_xml($incl);\n                    $incl = $this->fix_paths($incl);\n                    $this->base_path = $old_base_path;\n                    return $incl;\n                }\n                break;\n\n            case 'plugin.include':\n                $hook = $this->app->plugins->exec_hook(\"template_plugin_include\", $attrib);\n                return $hook['content'];\n\n            // define a container block\n            case 'container':\n                if ($attrib['name'] && $attrib['id']) {\n                    $this->command('gui_container', $attrib['name'], $attrib['id']);\n                    // let plugins insert some content here\n                    $hook = $this->app->plugins->exec_hook(\"template_container\", $attrib);\n                    return $hook['content'];\n                }\n                break;\n\n            // return code for a specific application object\n            case 'object':\n                $object = strtolower($attrib['name']);\n                $content = '';\n\n                // we are calling a class/method\n                if (($handler = $this->object_handlers[$object]) && is_array($handler)) {\n                    if ((is_object($handler[0]) && method_exists($handler[0], $handler[1])) ||\n                    (is_string($handler[0]) && class_exists($handler[0])))\n                    $content = call_user_func($handler, $attrib);\n                }\n                // execute object handler function\n                else if (function_exists($handler)) {\n                    $content = call_user_func($handler, $attrib);\n                }\n                else if ($object == 'doctype') {\n                    $content = html::doctype($attrib['value']);\n                }\n                else if ($object == 'logo') {\n                    $attrib += array('alt' => $this->xml_command(array('', 'object', 'name=\"productname\"')));\n\n                    if ($logo = $this->config->get('skin_logo')) {\n                        if (is_array($logo)) {\n                            if ($template_logo = $logo[$this->template_name]) {\n                                $attrib['src'] = $template_logo;\n                            }\n                            elseif ($template_logo = $logo['*']) {\n                                $attrib['src'] = $template_logo;\n                            }\n                        }\n                        else {\n                            $attrib['src'] = $logo;\n                        }\n                    }\n\n                    $content = html::img($attrib);\n                }\n                else if ($object == 'productname') {\n                    $name = $this->config->get('product_name', 'Roundcube Webmail');\n                    $content = html::quote($name);\n                }\n                else if ($object == 'version') {\n                    $ver = (string)RCMAIL_VERSION;\n                    if (is_file(RCUBE_INSTALL_PATH . '.svn/entries')) {\n                        if (preg_match('/Revision:\\s(\\d+)/', @shell_exec('svn info'), $regs))\n                          $ver .= ' [SVN r'.$regs[1].']';\n                    }\n                    else if (is_file(RCUBE_INSTALL_PATH . '.git/index')) {\n                        if (preg_match('/Date:\\s+([^\\n]+)/', @shell_exec('git log -1'), $regs)) {\n                            if ($date = date('Ymd.Hi', strtotime($regs[1]))) {\n                                $ver .= ' [GIT '.$date.']';\n                            }\n                        }\n                    }\n                    $content = html::quote($ver);\n                }\n                else if ($object == 'steptitle') {\n                  $content = html::quote($this->get_pagetitle());\n                }\n                else if ($object == 'pagetitle') {\n                    if ($this->devel_mode && !empty($_SESSION['username']))\n                        $title = $_SESSION['username'].' :: ';\n                    else if ($prod_name = $this->config->get('product_name'))\n                        $title = $prod_name . ' :: ';\n                    else\n                        $title = '';\n                    $title .= $this->get_pagetitle();\n                    $content = html::quote($title);\n                }\n\n                // exec plugin hooks for this template object\n                $hook = $this->app->plugins->exec_hook(\"template_object_$object\", $attrib + array('content' => $content));\n                return $hook['content'];\n\n            // return code for a specified eval expression\n            case 'exp':\n                return html::quote($this->eval_expression($attrib['expression']));\n\n            // return variable\n            case 'var':\n                $var = explode(':', $attrib['name']);\n                $name = $var[1];\n                $value = '';\n\n                switch ($var[0]) {\n                    case 'env':\n                        $value = $this->env[$name];\n                        break;\n                    case 'config':\n                        $value = $this->config->get($name);\n                        if (is_array($value) && $value[$_SESSION['storage_host']]) {\n                            $value = $value[$_SESSION['storage_host']];\n                        }\n                        break;\n                    case 'request':\n                        $value = rcube_utils::get_input_value($name, rcube_utils::INPUT_GPC);\n                        break;\n                    case 'session':\n                        $value = $_SESSION[$name];\n                        break;\n                    case 'cookie':\n                        $value = htmlspecialchars($_COOKIE[$name]);\n                        break;\n                    case 'browser':\n                        $value = $this->browser->{$name};\n                        break;\n                }\n\n                if (is_array($value)) {\n                    $value = implode(', ', $value);\n                }\n\n                return html::quote($value);\n\n            case 'form':\n                return $this->form_tag($attrib);\n        }\n        return '';\n    }\n\n    /**\n     * Include a specific file and return it's contents\n     *\n     * @param string File path\n     * @return string Contents of the processed file\n     */\n    protected function include_php($file)\n    {\n        ob_start();\n        include $file;\n        $out = ob_get_contents();\n        ob_end_clean();\n\n        return $out;\n    }\n\n    /**\n     * Create and register a button\n     *\n     * @param  array Named button attributes\n     * @return string HTML button\n     * @todo   Remove all inline JS calls and use jQuery instead.\n     * @todo   Remove all sprintf()'s - they are pretty, but also slow.\n     */\n    public function button($attrib)\n    {\n        static $s_button_count   = 100;\n        static $disabled_actions = null;\n\n        // these commands can be called directly via url\n        $a_static_commands = array('compose', 'list', 'preferences', 'folders', 'identities');\n\n        if (!($attrib['command'] || $attrib['name'] || $attrib['href'])) {\n            return '';\n        }\n\n\n        // try to find out the button type\n        if ($attrib['type']) {\n            $attrib['type'] = strtolower($attrib['type']);\n            if ($pos = strpos($attrib['type'], '-menuitem')) {\n                $attrib['type'] = substr($attrib['type'], 0, -9);\n                $menuitem = true;\n            }\n        }\n        else {\n            $attrib['type'] = ($attrib['image'] || $attrib['imagepas'] || $attrib['imageact']) ? 'image' : 'link';\n        }\n\n        $command = $attrib['command'];\n\n        if ($attrib['task']) {\n            $element = $command = $attrib['task'] . '.' . $command;\n        }\n        else {\n            $element = ($this->env['task'] ? $this->env['task'] . '.' : '') . $command;\n        }\n\n        if ($disabled_actions === null) {\n            $disabled_actions = (array) $this->config->get('disabled_actions');\n        }\n\n        // remove buttons for disabled actions\n        if (in_array($element, $disabled_actions)) {\n            return '';\n        }\n\n        if (!$attrib['image']) {\n            $attrib['image'] = $attrib['imagepas'] ? $attrib['imagepas'] : $attrib['imageact'];\n        }\n\n        if (!$attrib['id']) {\n            $attrib['id'] =  sprintf('rcmbtn%d', $s_button_count++);\n        }\n        // get localized text for labels and titles\n        if ($attrib['title']) {\n            $attrib['title'] = html::quote($this->app->gettext($attrib['title'], $attrib['domain']));\n        }\n        if ($attrib['label']) {\n            $attrib['label'] = html::quote($this->app->gettext($attrib['label'], $attrib['domain']));\n        }\n        if ($attrib['alt']) {\n            $attrib['alt'] = html::quote($this->app->gettext($attrib['alt'], $attrib['domain']));\n        }\n\n        // set accessibility attributes\n        if (!$attrib['role']) {\n            $attrib['role'] = 'button';\n        }\n        if (!empty($attrib['class']) && !empty($attrib['classact']) || !empty($attrib['imagepas']) && !empty($attrib['imageact'])) {\n            if (array_key_exists('tabindex', $attrib))\n                $attrib['data-tabindex'] = $attrib['tabindex'];\n            $attrib['tabindex'] = '-1';  // disable button by default\n            $attrib['aria-disabled'] = 'true';\n        }\n\n        // set title to alt attribute for IE browsers\n        if ($this->browser->ie && !$attrib['title'] && $attrib['alt']) {\n            $attrib['title'] = $attrib['alt'];\n        }\n\n        // add empty alt attribute for XHTML compatibility\n        if (!isset($attrib['alt'])) {\n            $attrib['alt'] = '';\n        }\n\n        // register button in the system\n        if ($attrib['command']) {\n            $this->add_script(sprintf(\n                \"%s.register_button('%s', '%s', '%s', '%s', '%s', '%s');\",\n                self::JS_OBJECT_NAME,\n                $command,\n                $attrib['id'],\n                $attrib['type'],\n                $attrib['imageact'] ? $this->abs_url($attrib['imageact']) : $attrib['classact'],\n                $attrib['imagesel'] ? $this->abs_url($attrib['imagesel']) : $attrib['classsel'],\n                $attrib['imageover'] ? $this->abs_url($attrib['imageover']) : ''\n            ));\n\n            // make valid href to specific buttons\n            if (in_array($attrib['command'], rcmail::$main_tasks)) {\n                $attrib['href']    = $this->app->url(array('task' => $attrib['command']));\n                $attrib['onclick'] = sprintf(\"return %s.command('switch-task','%s',this,event)\", self::JS_OBJECT_NAME, $attrib['command']);\n            }\n            else if ($attrib['task'] && in_array($attrib['task'], rcmail::$main_tasks)) {\n                $attrib['href'] = $this->app->url(array('action' => $attrib['command'], 'task' => $attrib['task']));\n            }\n            else if (in_array($attrib['command'], $a_static_commands)) {\n                $attrib['href'] = $this->app->url(array('action' => $attrib['command']));\n            }\n            else if (($attrib['command'] == 'permaurl' || $attrib['command'] == 'extwin') && !empty($this->env['permaurl'])) {\n              $attrib['href'] = $this->env['permaurl'];\n            }\n        }\n\n        // overwrite attributes\n        if (!$attrib['href']) {\n            $attrib['href'] = '#';\n        }\n        if ($attrib['task']) {\n            if ($attrib['classact'])\n                $attrib['class'] = $attrib['classact'];\n        }\n        else if ($command && !$attrib['onclick']) {\n            $attrib['onclick'] = sprintf(\n                \"return %s.command('%s','%s',this,event)\",\n                self::JS_OBJECT_NAME,\n                $command,\n                $attrib['prop']\n            );\n        }\n\n        $out = '';\n\n        // generate image tag\n        if ($attrib['type'] == 'image') {\n            $attrib_str = html::attrib_string(\n                $attrib,\n                array(\n                    'style', 'class', 'id', 'width', 'height', 'border', 'hspace',\n                    'vspace', 'align', 'alt', 'tabindex', 'title'\n                )\n            );\n            $btn_content = sprintf('<img src=\"%s\"%s />', $this->abs_url($attrib['image']), $attrib_str);\n            if ($attrib['label']) {\n                $btn_content .= ' '.$attrib['label'];\n            }\n            $link_attrib = array('href', 'onclick', 'onmouseover', 'onmouseout', 'onmousedown', 'onmouseup', 'target');\n        }\n        else if ($attrib['type'] == 'link') {\n            $btn_content = isset($attrib['content']) ? $attrib['content'] : ($attrib['label'] ? $attrib['label'] : $attrib['command']);\n            $link_attrib = array_merge(html::$common_attrib, array('href', 'onclick', 'tabindex', 'target'));\n            if ($attrib['innerclass'])\n                $btn_content = html::span($attrib['innerclass'], $btn_content);\n        }\n        else if ($attrib['type'] == 'input') {\n            $attrib['type'] = 'button';\n\n            if ($attrib['label']) {\n                $attrib['value'] = $attrib['label'];\n            }\n            if ($attrib['command']) {\n              $attrib['disabled'] = 'disabled';\n            }\n\n            $out = html::tag('input', $attrib, null, array('type', 'value', 'onclick', 'id', 'class', 'style', 'tabindex', 'disabled'));\n        }\n\n        // generate html code for button\n        if ($btn_content) {\n            $attrib_str = html::attrib_string($attrib, $link_attrib);\n            $out = sprintf('<a%s>%s</a>', $attrib_str, $btn_content);\n        }\n\n        if ($attrib['wrapper']) {\n            $out = html::tag($attrib['wrapper'], null, $out);\n        }\n\n        if ($menuitem) {\n            $class = $attrib['menuitem-class'] ? ' class=\"' . $attrib['menuitem-class'] . '\"' : '';\n            $out   = '<li role=\"menuitem\"' . $class . '>' . $out . '</li>';\n        }\n\n        return $out;\n    }\n\n    /**\n     * Link an external script file\n     *\n     * @param string File URL\n     * @param string Target position [head|foot]\n     */\n    public function include_script($file, $position='head')\n    {\n        if (!preg_match('|^https?://|i', $file) && $file[0] != '/') {\n            $file = $this->file_mod($this->scripts_path . $file);\n        }\n\n        if (!is_array($this->script_files[$position])) {\n            $this->script_files[$position] = array();\n        }\n\n        if (!in_array($file, $this->script_files[$position])) {\n            $this->script_files[$position][] = $file;\n        }\n    }\n\n    /**\n     * Add inline javascript code\n     *\n     * @param string JS code snippet\n     * @param string Target position [head|head_top|foot]\n     */\n    public function add_script($script, $position='head')\n    {\n        if (!isset($this->scripts[$position])) {\n            $this->scripts[$position] = \"\\n\" . rtrim($script);\n        }\n        else {\n            $this->scripts[$position] .= \"\\n\" . rtrim($script);\n        }\n    }\n\n    /**\n     * Link an external css file\n     *\n     * @param string File URL\n     */\n    public function include_css($file)\n    {\n        $this->css_files[] = $file;\n    }\n\n    /**\n     * Add HTML code to the page header\n     *\n     * @param string $str HTML code\n     */\n    public function add_header($str)\n    {\n        $this->header .= \"\\n\" . $str;\n    }\n\n    /**\n     * Add HTML code to the page footer\n     * To be added right befor </body>\n     *\n     * @param string $str HTML code\n     */\n    public function add_footer($str)\n    {\n        $this->footer .= \"\\n\" . $str;\n    }\n\n    /**\n     * Process template and write to stdOut\n     *\n     * @param string HTML template\n     * @param string Base for absolute paths\n     */\n    public function _write($templ = '', $base_path = '')\n    {\n        $output = trim($templ);\n\n        if (empty($output)) {\n            $output   = html::doctype('html5') . \"\\n\" . $this->default_template;\n            $is_empty = true;\n        }\n\n        // set default page title\n        if (empty($this->pagetitle)) {\n            $this->pagetitle = 'Roundcube Mail';\n        }\n\n        // declare page language\n        if (!empty($_SESSION['language'])) {\n            $lang = substr($_SESSION['language'], 0, 2);\n            $output = preg_replace('/<html/', '<html lang=\"' . html::quote($lang) . '\"', $output, 1);\n            if (!headers_sent()) {\n                header('Content-Language: ' . $lang);\n            }\n        }\n\n        // replace specialchars in content\n        $page_title  = html::quote($this->pagetitle);\n        $page_header = '';\n        $page_footer = '';\n\n        // include meta tag with charset\n        if (!empty($this->charset)) {\n            if (!headers_sent()) {\n                header('Content-Type: text/html; charset=' . $this->charset);\n            }\n            $page_header = '<meta http-equiv=\"content-type\"';\n            $page_header.= ' content=\"text/html; charset=';\n            $page_header.= $this->charset . '\" />'.\"\\n\";\n        }\n\n        // definition of the code to be placed in the document header and footer\n        if (is_array($this->script_files['head'])) {\n            foreach ($this->script_files['head'] as $file) {\n                $page_header .= html::script($file);\n            }\n        }\n\n        $head_script = $this->scripts['head_top'] . $this->scripts['head'];\n        if (!empty($head_script)) {\n            $page_header .= html::script(array(), $head_script);\n        }\n\n        if (!empty($this->header)) {\n            $page_header .= $this->header;\n        }\n\n        // put docready commands into page footer\n        if (!empty($this->scripts['docready'])) {\n            $this->add_script('$(document).ready(function(){ ' . $this->scripts['docready'] . \"\\n});\", 'foot');\n        }\n\n        if (is_array($this->script_files['foot'])) {\n            foreach ($this->script_files['foot'] as $file) {\n                $page_footer .= html::script($file);\n            }\n        }\n\n        if (!empty($this->footer)) {\n            $page_footer .= $this->footer . \"\\n\";\n        }\n\n        if (!empty($this->scripts['foot'])) {\n            $page_footer .= html::script(array(), $this->scripts['foot']);\n        }\n\n        // find page header\n        if ($hpos = stripos($output, '</head>')) {\n            $page_header .= \"\\n\";\n        }\n        else {\n            if (!is_numeric($hpos)) {\n                $hpos = stripos($output, '<body');\n            }\n            if (!is_numeric($hpos) && ($hpos = stripos($output, '<html'))) {\n                while ($output[$hpos] != '>') {\n                    $hpos++;\n                }\n                $hpos++;\n            }\n            $page_header = \"<head>\\n<title>$page_title</title>\\n$page_header\\n</head>\\n\";\n        }\n\n        // add page hader\n        if ($hpos) {\n            $output = substr_replace($output, $page_header, $hpos, 0);\n        }\n        else {\n            $output = $page_header . $output;\n        }\n\n        // add page footer\n        if (($fpos = strripos($output, '</body>')) || ($fpos = strripos($output, '</html>'))) {\n            $output = substr_replace($output, $page_footer.\"\\n\", $fpos, 0);\n        }\n        else {\n            $output .= \"\\n\".$page_footer;\n        }\n\n        // add css files in head, before scripts, for speed up with parallel downloads\n        if (!empty($this->css_files) && !$is_empty\n            && (($pos = stripos($output, '<script ')) || ($pos = stripos($output, '</head>')))\n        ) {\n            $css = '';\n            foreach ($this->css_files as $file) {\n                $css .= html::tag('link', array('rel' => 'stylesheet',\n                    'type' => 'text/css', 'href' => $file, 'nl' => true));\n            }\n            $output = substr_replace($output, $css, $pos, 0);\n        }\n\n        $output = $this->parse_with_globals($this->fix_paths($output));\n\n        if ($this->assets_path) {\n            $output = $this->fix_assets_paths($output);\n        }\n\n        // trigger hook with final HTML content to be sent\n        $hook = $this->app->plugins->exec_hook(\"send_page\", array('content' => $output));\n        if (!$hook['abort']) {\n            if ($this->charset != RCUBE_CHARSET) {\n                echo rcube_charset::convert($hook['content'], RCUBE_CHARSET, $this->charset);\n            }\n            else {\n                echo $hook['content'];\n            }\n        }\n    }\n\n    /**\n     * Returns iframe object, registers some related env variables\n     *\n     * @param array $attrib HTML attributes\n     * @param boolean $is_contentframe Register this iframe as the 'contentframe' gui object\n     * @return string IFRAME element\n     */\n    public function frame($attrib, $is_contentframe = false)\n    {\n        static $idcount = 0;\n\n        if (!$attrib['id']) {\n            $attrib['id'] = 'rcmframe' . ++$idcount;\n        }\n\n        $attrib['name'] = $attrib['id'];\n        $attrib['src']  = $attrib['src'] ? $this->abs_url($attrib['src'], true) : 'program/resources/blank.gif';\n\n        // register as 'contentframe' object\n        if ($is_contentframe || $attrib['contentframe']) {\n            $this->set_env('contentframe', $attrib['contentframe'] ? $attrib['contentframe'] : $attrib['name']);\n            $this->set_env('blankpage', $this->asset_url($attrib['src']));\n        }\n\n        return html::iframe($attrib);\n    }\n\n\n    /*  ************* common functions delivering gui objects **************  */\n\n    /**\n     * Create a form tag with the necessary hidden fields\n     *\n     * @param array Named tag parameters\n     * @return string HTML code for the form\n     */\n    public function form_tag($attrib, $content = null)\n    {\n      if ($this->framed || $this->env['framed']) {\n        $hiddenfield = new html_hiddenfield(array('name' => '_framed', 'value' => '1'));\n        $hidden = $hiddenfield->show();\n      }\n      if ($this->env['extwin']) {\n        $hiddenfield = new html_hiddenfield(array('name' => '_extwin', 'value' => '1'));\n        $hidden = $hiddenfield->show();\n      }\n\n      if (!$content)\n        $attrib['noclose'] = true;\n\n      return html::tag('form',\n        $attrib + array('action' => $this->app->comm_path, 'method' => \"get\"),\n        $hidden . $content,\n        array('id','class','style','name','method','action','enctype','onsubmit'));\n    }\n\n    /**\n     * Build a form tag with a unique request token\n     *\n     * @param array Named tag parameters including 'action' and 'task' values which will be put into hidden fields\n     * @param string Form content\n     * @return string HTML code for the form\n     */\n    public function request_form($attrib, $content = '')\n    {\n        $hidden = new html_hiddenfield();\n        if ($attrib['task']) {\n            $hidden->add(array('name' => '_task', 'value' => $attrib['task']));\n        }\n        if ($attrib['action']) {\n            $hidden->add(array('name' => '_action', 'value' => $attrib['action']));\n        }\n\n        unset($attrib['task'], $attrib['request']);\n        $attrib['action'] = './';\n\n        // we already have a <form> tag\n        if ($attrib['form']) {\n            if ($this->framed || $this->env['framed'])\n                $hidden->add(array('name' => '_framed', 'value' => '1'));\n            return $hidden->show() . $content;\n        }\n        else\n            return $this->form_tag($attrib, $hidden->show() . $content);\n    }\n\n    /**\n     * GUI object 'username'\n     * Showing IMAP username of the current session\n     *\n     * @param array Named tag parameters (currently not used)\n     * @return string HTML code for the gui object\n     */\n    public function current_username($attrib)\n    {\n        static $username;\n\n        // alread fetched\n        if (!empty($username)) {\n            return $username;\n        }\n\n        // Current username is an e-mail address\n        if (strpos($_SESSION['username'], '@')) {\n            $username = $_SESSION['username'];\n        }\n        // get e-mail address from default identity\n        else if ($sql_arr = $this->app->user->get_identity()) {\n            $username = $sql_arr['email'];\n        }\n        else {\n            $username = $this->app->user->get_username();\n        }\n\n        return rcube_utils::idn_to_utf8($username);\n    }\n\n    /**\n     * GUI object 'loginform'\n     * Returns code for the webmail login form\n     *\n     * @param array Named parameters\n     * @return string HTML code for the gui object\n     */\n    protected function login_form($attrib)\n    {\n        $default_host = $this->config->get('default_host');\n        $autocomplete = (int) $this->config->get('login_autocomplete');\n\n        $_SESSION['temp'] = true;\n\n        // save original url\n        $url = rcube_utils::get_input_value('_url', rcube_utils::INPUT_POST);\n        if (empty($url) && !preg_match('/_(task|action)=logout/', $_SERVER['QUERY_STRING']))\n            $url = $_SERVER['QUERY_STRING'];\n\n        // Disable autocapitalization on iPad/iPhone (#1488609)\n        $attrib['autocapitalize'] = 'off';\n\n        // set atocomplete attribute\n        $user_attrib = $autocomplete > 0 ? array() : array('autocomplete' => 'off');\n        $host_attrib = $autocomplete > 0 ? array() : array('autocomplete' => 'off');\n        $pass_attrib = $autocomplete > 1 ? array() : array('autocomplete' => 'off');\n\n        $input_task   = new html_hiddenfield(array('name' => '_task', 'value' => 'login'));\n        $input_action = new html_hiddenfield(array('name' => '_action', 'value' => 'login'));\n        $input_tzone  = new html_hiddenfield(array('name' => '_timezone', 'id' => 'rcmlogintz', 'value' => '_default_'));\n        $input_url    = new html_hiddenfield(array('name' => '_url', 'id' => 'rcmloginurl', 'value' => $url));\n        $input_user   = new html_inputfield(array('name' => '_user', 'id' => 'rcmloginuser', 'required' => 'required')\n            + $attrib + $user_attrib);\n        $input_pass   = new html_passwordfield(array('name' => '_pass', 'id' => 'rcmloginpwd', 'required' => 'required')\n            + $attrib + $pass_attrib);\n        $input_host   = null;\n\n        if (is_array($default_host) && count($default_host) > 1) {\n            $input_host = new html_select(array('name' => '_host', 'id' => 'rcmloginhost'));\n\n            foreach ($default_host as $key => $value) {\n                if (!is_array($value)) {\n                    $input_host->add($value, (is_numeric($key) ? $value : $key));\n                }\n                else {\n                    $input_host = null;\n                    break;\n                }\n            }\n        }\n        else if (is_array($default_host) && ($host = key($default_host)) !== null) {\n            $hide_host = true;\n            $input_host = new html_hiddenfield(array(\n                'name' => '_host', 'id' => 'rcmloginhost', 'value' => is_numeric($host) ? $default_host[$host] : $host) + $attrib);\n        }\n        else if (empty($default_host)) {\n            $input_host = new html_inputfield(array('name' => '_host', 'id' => 'rcmloginhost')\n                + $attrib + $host_attrib);\n        }\n\n        $form_name  = !empty($attrib['form']) ? $attrib['form'] : 'form';\n        $this->add_gui_object('loginform', $form_name);\n\n        // create HTML table with two cols\n        $table = new html_table(array('cols' => 2));\n\n        $table->add('title', html::label('rcmloginuser', html::quote($this->app->gettext('username'))));\n        $table->add('input', $input_user->show(rcube_utils::get_input_value('_user', rcube_utils::INPUT_GPC)));\n\n        $table->add('title', html::label('rcmloginpwd', html::quote($this->app->gettext('password'))));\n        $table->add('input', $input_pass->show());\n\n        // add host selection row\n        if (is_object($input_host) && !$hide_host) {\n            $table->add('title', html::label('rcmloginhost', html::quote($this->app->gettext('server'))));\n            $table->add('input', $input_host->show(rcube_utils::get_input_value('_host', rcube_utils::INPUT_GPC)));\n        }\n\n        $out  = $input_task->show();\n        $out .= $input_action->show();\n        $out .= $input_tzone->show();\n        $out .= $input_url->show();\n        $out .= $table->show();\n\n        if ($hide_host) {\n            $out .= $input_host->show();\n        }\n\n        if (rcube_utils::get_boolean($attrib['submit'])) {\n            $submit = new html_inputfield(array('type' => 'submit', 'id' => 'rcmloginsubmit',\n                'class' => 'button mainaction', 'value' => $this->app->gettext('login')));\n            $out .= html::p('formbuttons', $submit->show());\n        }\n\n        // surround html output with a form tag\n        if (empty($attrib['form'])) {\n            $out = $this->form_tag(array('name' => $form_name, 'method' => 'post'), $out);\n        }\n\n        // include script for timezone detection\n        $this->include_script('jstz.min.js');\n\n        return $out;\n    }\n\n    /**\n     * GUI object 'preloader'\n     * Loads javascript code for images preloading\n     *\n     * @param array Named parameters\n     * @return void\n     */\n    protected function preloader($attrib)\n    {\n        $images = preg_split('/[\\s\\t\\n,]+/', $attrib['images'], -1, PREG_SPLIT_NO_EMPTY);\n        $images = array_map(array($this, 'abs_url'), $images);\n        $images = array_map(array($this, 'asset_url'), $images);\n\n        if (empty($images) || $_REQUEST['_task'] == 'logout') {\n            return;\n        }\n\n        $this->add_script('var images = ' . self::json_serialize($images) .';\n            for (var i=0; i<images.length; i++) {\n                img = new Image();\n                img.src = images[i];\n            }', 'docready');\n    }\n\n    /**\n     * GUI object 'searchform'\n     * Returns code for search function\n     *\n     * @param array Named parameters\n     * @return string HTML code for the gui object\n     */\n    protected function search_form($attrib)\n    {\n        // add some labels to client\n        $this->add_label('searching');\n\n        $attrib['name'] = '_q';\n\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmqsearchbox';\n        }\n        if ($attrib['type'] == 'search' && !$this->browser->khtml) {\n            unset($attrib['type'], $attrib['results']);\n        }\n\n        $input_q = new html_inputfield($attrib);\n        $out = $input_q->show();\n\n        $this->add_gui_object('qsearchbox', $attrib['id']);\n\n        // add form tag around text field\n        if (empty($attrib['form'])) {\n            $out = $this->form_tag(array(\n                'name'     => \"rcmqsearchform\",\n                'onsubmit' => self::JS_OBJECT_NAME . \".command('search'); return false\",\n                'style'    => \"display:inline\"),\n                $out);\n        }\n\n        return $out;\n    }\n\n    /**\n     * Builder for GUI object 'message'\n     *\n     * @param array Named tag parameters\n     * @return string HTML code for the gui object\n     */\n    protected function message_container($attrib)\n    {\n        if (isset($attrib['id']) === false) {\n            $attrib['id'] = 'rcmMessageContainer';\n        }\n\n        $this->add_gui_object('message', $attrib['id']);\n\n        return html::div($attrib, '');\n    }\n\n    /**\n     * GUI object 'charsetselector'\n     *\n     * @param array Named parameters for the select tag\n     * @return string HTML code for the gui object\n     */\n    public function charset_selector($attrib)\n    {\n        // pass the following attributes to the form class\n        $field_attrib = array('name' => '_charset');\n        foreach ($attrib as $attr => $value) {\n            if (in_array($attr, array('id', 'name', 'class', 'style', 'size', 'tabindex'))) {\n                $field_attrib[$attr] = $value;\n            }\n        }\n\n        $charsets = array(\n            'UTF-8'        => 'UTF-8 ('.$this->app->gettext('unicode').')',\n            'US-ASCII'     => 'ASCII ('.$this->app->gettext('english').')',\n            'ISO-8859-1'   => 'ISO-8859-1 ('.$this->app->gettext('westerneuropean').')',\n            'ISO-8859-2'   => 'ISO-8859-2 ('.$this->app->gettext('easterneuropean').')',\n            'ISO-8859-4'   => 'ISO-8859-4 ('.$this->app->gettext('baltic').')',\n            'ISO-8859-5'   => 'ISO-8859-5 ('.$this->app->gettext('cyrillic').')',\n            'ISO-8859-6'   => 'ISO-8859-6 ('.$this->app->gettext('arabic').')',\n            'ISO-8859-7'   => 'ISO-8859-7 ('.$this->app->gettext('greek').')',\n            'ISO-8859-8'   => 'ISO-8859-8 ('.$this->app->gettext('hebrew').')',\n            'ISO-8859-9'   => 'ISO-8859-9 ('.$this->app->gettext('turkish').')',\n            'ISO-8859-10'   => 'ISO-8859-10 ('.$this->app->gettext('nordic').')',\n            'ISO-8859-11'   => 'ISO-8859-11 ('.$this->app->gettext('thai').')',\n            'ISO-8859-13'   => 'ISO-8859-13 ('.$this->app->gettext('baltic').')',\n            'ISO-8859-14'   => 'ISO-8859-14 ('.$this->app->gettext('celtic').')',\n            'ISO-8859-15'   => 'ISO-8859-15 ('.$this->app->gettext('westerneuropean').')',\n            'ISO-8859-16'   => 'ISO-8859-16 ('.$this->app->gettext('southeasterneuropean').')',\n            'WINDOWS-1250' => 'Windows-1250 ('.$this->app->gettext('easterneuropean').')',\n            'WINDOWS-1251' => 'Windows-1251 ('.$this->app->gettext('cyrillic').')',\n            'WINDOWS-1252' => 'Windows-1252 ('.$this->app->gettext('westerneuropean').')',\n            'WINDOWS-1253' => 'Windows-1253 ('.$this->app->gettext('greek').')',\n            'WINDOWS-1254' => 'Windows-1254 ('.$this->app->gettext('turkish').')',\n            'WINDOWS-1255' => 'Windows-1255 ('.$this->app->gettext('hebrew').')',\n            'WINDOWS-1256' => 'Windows-1256 ('.$this->app->gettext('arabic').')',\n            'WINDOWS-1257' => 'Windows-1257 ('.$this->app->gettext('baltic').')',\n            'WINDOWS-1258' => 'Windows-1258 ('.$this->app->gettext('vietnamese').')',\n            'ISO-2022-JP'  => 'ISO-2022-JP ('.$this->app->gettext('japanese').')',\n            'ISO-2022-KR'  => 'ISO-2022-KR ('.$this->app->gettext('korean').')',\n            'ISO-2022-CN'  => 'ISO-2022-CN ('.$this->app->gettext('chinese').')',\n            'EUC-JP'       => 'EUC-JP ('.$this->app->gettext('japanese').')',\n            'EUC-KR'       => 'EUC-KR ('.$this->app->gettext('korean').')',\n            'EUC-CN'       => 'EUC-CN ('.$this->app->gettext('chinese').')',\n            'BIG5'         => 'BIG5 ('.$this->app->gettext('chinese').')',\n            'GB2312'       => 'GB2312 ('.$this->app->gettext('chinese').')',\n        );\n\n        if (!empty($_POST['_charset'])) {\n            $set = $_POST['_charset'];\n        }\n        else if (!empty($attrib['selected'])) {\n            $set = $attrib['selected'];\n        }\n        else {\n            $set = $this->get_charset();\n        }\n\n        $set = strtoupper($set);\n        if (!isset($charsets[$set])) {\n            $charsets[$set] = $set;\n        }\n\n        $select = new html_select($field_attrib);\n        $select->add(array_values($charsets), array_keys($charsets));\n\n        return $select->show($set);\n    }\n\n    /**\n     * Include content from config/about.<LANG>.html if available\n     */\n    protected function about_content($attrib)\n    {\n        $content = '';\n        $filenames = array(\n            'about.' . $_SESSION['language'] . '.html',\n            'about.' . substr($_SESSION['language'], 0, 2) . '.html',\n            'about.html',\n        );\n        foreach ($filenames as $file) {\n            $fn = RCUBE_CONFIG_DIR . $file;\n            if (is_readable($fn)) {\n                $content = file_get_contents($fn);\n                $content = $this->parse_conditions($content);\n                $content = $this->parse_xml($content);\n                break;\n            }\n        }\n\n        return $content;\n    }\n\n}\n", "code_before": "<?php\n\n/*\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Class to handle HTML page output using a skin template.             |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Class to create HTML page output using a skin template\n */\nclass rcmail_output_html extends rcmail_output\n{\n    public $type = 'html';\n\n    protected $message;\n    protected $template_name;\n    protected $objects = [];\n    protected $js_env = [];\n    protected $js_labels = [];\n    protected $js_commands = [];\n    protected $skin_paths = [];\n    protected $skin_extends = [];\n    protected $skin_name = '';\n    protected $scripts_path = '';\n    protected $script_files = [];\n    protected $css_files = [];\n    protected $scripts = [];\n    protected $task;\n    protected $meta_tags = [];\n    protected $link_tags = ['shortcut icon' => ''];\n    protected $header = '';\n    protected $footer = '';\n    protected $body = '';\n    protected $base_path = '';\n    protected $assets_path;\n    protected $assets_dir = RCUBE_INSTALL_PATH;\n    protected $devel_mode = false;\n    protected $default_template = \"<html>\\n<head><meta name='generator' content='Roundcube'></head>\\n<body></body>\\n</html>\";\n\n    // deprecated names of templates used before 0.5\n    protected $deprecated_templates = [\n        'contact' => 'showcontact',\n        'contactadd' => 'addcontact',\n        'contactedit' => 'editcontact',\n        'identityedit' => 'editidentity',\n        'messageprint' => 'printmessage',\n    ];\n\n    // deprecated names of template objects used before 1.4\n    protected $deprecated_template_objects = [\n        'addressframe' => 'contentframe',\n        'messagecontentframe' => 'contentframe',\n        'prefsframe' => 'contentframe',\n        'folderframe' => 'contentframe',\n        'identityframe' => 'contentframe',\n        'responseframe' => 'contentframe',\n        'keyframe' => 'contentframe',\n        'filterframe' => 'contentframe',\n    ];\n\n    /**\n     * Constructor\n     */\n    public function __construct($task = null, $framed = false)\n    {\n        parent::__construct();\n\n        $this->task = $task;\n        $this->init($framed);\n    }\n\n    /**\n     * Initialization\n     */\n    protected function init($framed = false)\n    {\n        $this->set_env('task', $this->task);\n        $this->set_env('standard_windows', (bool) $this->config->get('standard_windows'));\n        $this->set_env('locale', !empty($_SESSION['language']) ? $_SESSION['language'] : 'en_US');\n        $this->set_env('devel_mode', $this->devel_mode);\n\n        // Version number e.g. 1.4.2 will be 10402\n        $version = explode('.', preg_replace('/[^0-9.].*/', '', RCMAIL_VERSION));\n        $this->set_env('rcversion', intval($version[0]) * 10000 + intval($version[1]) * 100 + ($version[2] ?? 0));\n\n        // add cookie info\n        $this->set_env('cookie_domain', ini_get('session.cookie_domain'));\n        $this->set_env('cookie_path', ini_get('session.cookie_path'));\n        $this->set_env('cookie_secure', filter_var(ini_get('session.cookie_secure'), \\FILTER_VALIDATE_BOOLEAN));\n\n        // Easy way to change skin via GET argument, for developers\n        if ($this->devel_mode && !empty($_GET['skin']) && preg_match('/^[a-z0-9-_]+$/i', $_GET['skin'])) {\n            if ($this->check_skin($_GET['skin'])) {\n                $this->set_skin($_GET['skin']);\n                $this->app->user->save_prefs(['skin' => $_GET['skin']]);\n            }\n        }\n\n        // load and setup the skin\n        $this->set_skin($this->config->get('skin'));\n        $this->set_assets_path($this->config->get('assets_path'));\n\n        if (!empty($_REQUEST['_extwin'])) {\n            $this->set_env('extwin', 1);\n        }\n\n        if ($this->framed || $framed) {\n            $this->set_env('framed', 1);\n        }\n\n        $lic = <<<'EOF'\n            /*\n                    @licstart  The following is the entire license notice for the\n                    JavaScript code in this page.\n\n                    Copyright (C) The Roundcube Dev Team\n\n                    The JavaScript code in this page is free software: you can redistribute\n                    it and/or modify it under the terms of the GNU General Public License\n                    as published by the Free Software Foundation, either version 3 of\n                    the License, or (at your option) any later version.\n\n                    The code is distributed WITHOUT ANY WARRANTY; without even the implied\n                    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n                    See the GNU GPL for more details.\n\n                    @licend  The above is the entire license notice\n                    for the JavaScript code in this page.\n            */\n            EOF;\n        // add common javascripts\n        $this->add_script($lic, 'head_top');\n        $this->add_script('var ' . self::JS_OBJECT_NAME . ' = new rcube_webmail();', 'head_top');\n\n        // don't wait for page onload. Call init at the bottom of the page (delayed)\n        $this->add_script(self::JS_OBJECT_NAME . '.init();', 'docready');\n\n        $this->scripts_path = 'program/js/';\n        $this->include_script('jquery.min.js');\n        $this->include_script('common.js');\n        $this->include_script('app.js');\n\n        // register common UI objects\n        $this->add_handlers([\n            'loginform' => [$this, 'login_form'],\n            'preloader' => [$this, 'preloader'],\n            'username' => [$this, 'current_username'],\n            'message' => [$this, 'message_container'],\n            'charsetselector' => [$this, 'charset_selector'],\n            'aboutcontent' => [$this, 'about_content'],\n        ]);\n\n        // set blankpage (watermark) url\n        $blankpage = $this->config->get('blankpage_url', '/watermark.html');\n        $this->set_env('blankpage', $blankpage);\n    }\n\n    /**\n     * Set environment variable\n     *\n     * @param string $name    Property name\n     * @param mixed  $value   Property value\n     * @param bool   $addtojs True if this property should be added\n     *                        to client environment\n     */\n    #[\\Override]\n    public function set_env($name, $value, $addtojs = true)\n    {\n        $this->env[$name] = $value;\n\n        if ($addtojs || isset($this->js_env[$name])) {\n            $this->js_env[$name] = $value;\n        }\n    }\n\n    /**\n     * Parse and set assets path\n     *\n     * @param string $path Assets path URL (relative or absolute)\n     */\n    public function set_assets_path($path)\n    {\n        // set absolute path for assets if /index.php/foo/bar url is used\n        if (empty($path) && !empty($_SERVER['PATH_INFO'])) {\n            $path = preg_replace('/\\?_task=[a-z]+/', '', $this->app->url([], true));\n        }\n\n        if (empty($path)) {\n            return;\n        }\n\n        $path = rtrim($path, '/') . '/';\n\n        // handle relative assets path\n        if (!preg_match('|^https?://|', $path) && $path[0] != '/') {\n            // save the path to search for asset files later\n            $this->assets_dir = $path;\n\n            $base = preg_replace('/[?#&].*$/', '', $_SERVER['REQUEST_URI']);\n            $base = rtrim($base, '/');\n\n            // remove url token if exists\n            if ($len = intval($this->config->get('use_secure_urls'))) {\n                $_base = explode('/', $base);\n                $last = count($_base) - 1;\n                $length = $len > 1 ? $len : 16; // as in rcube::get_secure_url_token()\n\n                // we can't use real token here because it\n                // does not exists in unauthenticated state,\n                // hope this will not produce false-positive matches\n                if (preg_match('/^[a-f0-9]{' . $length . '}$/', $_base[$last])) {\n                    $path = '../' . $path;\n                }\n            }\n        }\n\n        $this->assets_path = $path;\n        $this->set_env('assets_path', $path);\n    }\n\n    /**\n     * Getter for the current page title\n     *\n     * @param bool $full Prepend title with product/user name\n     *\n     * @return string The page title\n     */\n    protected function get_pagetitle($full = true)\n    {\n        if (!empty($this->pagetitle)) {\n            $title = $this->pagetitle;\n        } elseif (isset($this->env['task'])) {\n            if ($this->env['task'] == 'login') {\n                $title = $this->app->gettext([\n                    'name' => 'welcome',\n                    'vars' => ['product' => $this->config->get('product_name')],\n                ]);\n            } else {\n                $title = ucfirst($this->env['task']);\n            }\n        } else {\n            $title = '';\n        }\n\n        if ($full && $title) {\n            if ($this->devel_mode && !empty($_SESSION['username'])) {\n                $title = $_SESSION['username'] . ' :: ' . $title;\n            } elseif ($prod_name = $this->config->get('product_name')) {\n                $title = $prod_name . ' :: ' . $title;\n            }\n        }\n\n        return $title;\n    }\n\n    /**\n     * Getter for the current skin path property\n     */\n    #[\\Override]\n    public function get_skin_path()\n    {\n        return $this->skin_paths[0];\n    }\n\n    /**\n     * Set skin\n     *\n     * @param string $skin Skin name\n     */\n    public function set_skin($skin)\n    {\n        if (!$this->check_skin($skin)) {\n            // If the skin does not exist (could be removed or invalid),\n            // fallback to the skin set in the system configuration (#7271)\n            $skin = $this->config->system_skin;\n        }\n\n        $skin_path = 'skins/' . $skin;\n\n        $this->config->set('skin_path', $skin_path);\n        $this->base_path = $skin_path;\n\n        // register skin path(s)\n        $this->skin_paths = [];\n        $this->skins = [];\n        $this->load_skin($skin);\n\n        $this->skin_name = $skin;\n        $this->set_env('skin', $skin);\n    }\n\n    /**\n     * Check skin validity/existence\n     *\n     * @param string $skin Skin name\n     *\n     * @return bool True if the skin exist and is readable, False otherwise\n     */\n    public function check_skin($skin)\n    {\n        // Sanity check to prevent from path traversal vulnerability (#1490620)\n        // @phpstan-ignore-next-line\n        if (!is_string($skin) || str_contains($skin, '/') || str_contains($skin, '\\\\')) {\n            rcube::raise_error('Invalid skin name', true);\n            return false;\n        }\n\n        $skins_allowed = $this->config->get('skins_allowed');\n\n        if (!empty($skins_allowed) && !in_array($skin, (array) $skins_allowed)) {\n            return false;\n        }\n\n        $path = RCUBE_INSTALL_PATH . 'skins/';\n\n        return !empty($skin) && is_dir($path . $skin) && is_readable($path . $skin);\n    }\n\n    /**\n     * Helper method to recursively read skin meta files and register search paths\n     */\n    private function load_skin($skin_name)\n    {\n        $skin_path = 'skins/' . $skin_name;\n        $this->skin_paths[] = $skin_path;\n\n        // read meta file and check for dependencies\n        $meta = $this->get_skin_info($skin_name);\n\n        $meta['path'] = $skin_path;\n        $skin_id = array_last(explode('/', $skin_path));\n\n        if (empty($meta['name'])) {\n            $meta['name'] = $skin_id;\n        }\n\n        $this->skins[$skin_id] = $meta;\n\n        // Keep skin config for ajax requests (#6613)\n        $_SESSION['skin_config'] = [];\n\n        if (!empty($meta['extends'])) {\n            $path = RCUBE_INSTALL_PATH . 'skins/';\n            if (is_dir($path . $meta['extends']) && is_readable($path . $meta['extends'])) {\n                $_SESSION['skin_config'] = $this->load_skin($meta['extends']);\n                $this->skin_extends[] = $meta['extends'];\n            }\n        }\n\n        if (!empty($meta['config'])) {\n            foreach ($meta['config'] as $key => $value) {\n                $this->config->set($key, $value, true);\n                $_SESSION['skin_config'][$key] = $value;\n            }\n\n            $value = array_merge((array) $this->config->get('dont_override'), array_keys($meta['config']));\n            $this->config->set('dont_override', $value, true);\n        }\n\n        if (!empty($meta['localization'])) {\n            $locdir = $meta['localization'] === true ? 'localization' : $meta['localization'];\n            if ($texts = $this->app->read_localization(RCUBE_INSTALL_PATH . $skin_path . '/' . $locdir)) {\n                $this->app->load_language($_SESSION['language'], $texts);\n            }\n        }\n\n        // Use array_merge() here to allow for global default and extended skins\n        if (!empty($meta['meta'])) {\n            $this->meta_tags = array_merge($this->meta_tags, (array) $meta['meta']);\n        }\n        if (!empty($meta['links'])) {\n            $this->link_tags = array_merge($this->link_tags, (array) $meta['links']);\n        }\n\n        if (!empty($this->skin_extends)) {\n            $this->set_env('skin_extends', $this->skin_extends);\n        }\n\n        $this->set_env('dark_mode_support', (bool) $this->config->get('dark_mode_support'));\n\n        return $_SESSION['skin_config'];\n    }\n\n    /**\n     * Check if a specific template exists\n     *\n     * @param string $name Template name\n     *\n     * @return bool True if template exists, False otherwise\n     */\n    public function template_exists($name)\n    {\n        foreach ($this->skin_paths as $skin_path) {\n            $filename = RCUBE_INSTALL_PATH . $skin_path . '/templates/' . $name . '.html';\n            if (\n                (is_file($filename) && is_readable($filename))\n                || (!empty($this->deprecated_templates[$name]) && $this->template_exists($this->deprecated_templates[$name]))\n            ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Find the given file in the current skin path stack\n     *\n     * @param string $file       File name/path to resolve (starting with /)\n     * @param string &$skin_path Reference to the base path of the matching skin\n     * @param string $add_path   Additional path to search in\n     * @param bool   $minified   Fallback to a minified version of the file\n     *\n     * @return string|false Relative path to the requested file or False if not found\n     */\n    public function get_skin_file($file, &$skin_path = null, $add_path = null, $minified = false)\n    {\n        $skin_paths = $this->skin_paths;\n\n        if ($add_path) {\n            array_unshift($skin_paths, $add_path);\n            $skin_paths = array_unique($skin_paths);\n        }\n\n        if ($file[0] != '/') {\n            $file = '/' . $file;\n        }\n\n        if ($skin_path = $this->find_file_path($file, $skin_paths)) {\n            return $skin_path . $file;\n        }\n\n        if ($minified && preg_match('/(?<!\\.min)\\.(js|css)$/', $file)) {\n            $file = preg_replace('/\\.(js|css)$/', '.min.\\1', $file);\n\n            if ($skin_path = $this->find_file_path($file, $skin_paths)) {\n                return $skin_path . $file;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Find path of the asset file\n     */\n    protected function find_file_path($file, $skin_paths)\n    {\n        foreach ($skin_paths as $skin_path) {\n            if ($this->assets_dir != RCUBE_INSTALL_PATH) {\n                if (realpath($this->assets_dir . $skin_path . $file)) {\n                    return $skin_path;\n                }\n            }\n\n            if (realpath(RCUBE_INSTALL_PATH . $skin_path . $file)) {\n                return $skin_path;\n            }\n        }\n    }\n\n    /**\n     * Register a GUI object to the client script\n     *\n     * @param string $obj Object name\n     * @param string $id  Object ID\n     */\n    public function add_gui_object($obj, $id)\n    {\n        $this->add_script(self::JS_OBJECT_NAME . \".gui_object('{$obj}', '{$id}');\");\n    }\n\n    /**\n     * Call a client method\n     *\n     * @param string $cmd     Method to call\n     * @param mixed  ...$args Method arguments\n     */\n    #[\\Override]\n    public function command($cmd, ...$args)\n    {\n        if (str_contains($cmd, 'plugin.')) {\n            $this->js_commands[] = ['triggerEvent', $cmd, $args[0]];\n        } else {\n            array_unshift($args, $cmd);\n\n            $this->js_commands[] = $args;\n        }\n    }\n\n    /**\n     * Add a localized label to the client environment\n     *\n     * @param mixed ...$args Labels (an array of strings, or many string arguments)\n     */\n    #[\\Override]\n    public function add_label(...$args)\n    {\n        if (count($args) == 1 && is_array($args[0])) {\n            $args = $args[0];\n        }\n\n        foreach ($args as $name) {\n            $this->js_labels[$name] = $this->app->gettext($name);\n        }\n    }\n\n    /**\n     * Invoke display_message command\n     *\n     * @param string $message  Message to display\n     * @param string $type     Message type [notice|confirm|error]\n     * @param array  $vars     Key-value pairs to be replaced in localized text\n     * @param bool   $override Override last set message\n     * @param int    $timeout  Message display time in seconds\n     *\n     * @uses self::command()\n     */\n    #[\\Override]\n    public function show_message($message, $type = 'notice', $vars = null, $override = true, $timeout = 0)\n    {\n        if ($override || !$this->message) {\n            if ($this->app->text_exists($message)) {\n                if (!empty($vars)) {\n                    $vars = array_map(['rcube', 'Q'], $vars);\n                }\n\n                $msgtext = $this->app->gettext(['name' => $message, 'vars' => $vars]);\n            } else {\n                $msgtext = $message;\n            }\n\n            $this->message = $message;\n            $this->command('display_message', $msgtext, $type, $timeout * 1000);\n        }\n    }\n\n    /**\n     * Delete all stored env variables and commands\n     *\n     * @param bool $all Reset all env variables (including internal)\n     */\n    #[\\Override]\n    public function reset($all = false)\n    {\n        $framed = $this->framed;\n        $task = $this->env['task'] ?? '';\n        $env = $all ? null : array_intersect_key($this->env, ['extwin' => 1, 'framed' => 1]);\n\n        // keep jQuery-UI files\n        $css_files = $script_files = [];\n\n        foreach ($this->css_files as $file) {\n            if (str_starts_with($file, 'plugins/jqueryui')) {\n                $css_files[] = $file;\n            }\n        }\n\n        foreach ($this->script_files as $position => $files) {\n            foreach ($files as $file) {\n                if (str_starts_with($file, 'plugins/jqueryui')) {\n                    $script_files[$position][] = $file;\n                }\n            }\n        }\n\n        parent::reset();\n\n        // let some env variables survive\n        $this->env = $this->js_env = $env;\n        $this->framed = $framed || !empty($this->env['framed']);\n        $this->js_labels = [];\n        $this->js_commands = [];\n        $this->scripts = [];\n        $this->header = '';\n        $this->footer = '';\n        $this->body = '';\n        $this->css_files = [];\n        $this->script_files = [];\n\n        // load defaults\n        if (!$all) {\n            $this->init();\n        }\n\n        // Note: we merge jQuery-UI scripts after jQuery...\n        $this->css_files = array_merge($this->css_files, $css_files);\n        $this->script_files = array_merge_recursive($this->script_files, $script_files);\n\n        $this->set_env('orig_task', $task);\n    }\n\n    /**\n     * Redirect to a certain url\n     *\n     * @param mixed $p      Either a string with the action or url parameters as key-value pairs\n     * @param int   $delay  Delay in seconds\n     * @param bool  $secure Redirect to secure location (see rcmail::url())\n     */\n    #[\\Override]\n    public function redirect($p = [], $delay = 1, $secure = false)\n    {\n        if (!empty($this->env['extwin']) && !(is_string($p) && preg_match('#^https?://#', $p))) {\n            if (!is_array($p)) {\n                $p = ['_action' => $p];\n            }\n\n            $p['_extwin'] = 1;\n        }\n\n        $location = $this->app->url($p, false, false, $secure);\n        $this->header('Location: ' . $location);\n        exit;\n    }\n\n    /**\n     * Send the request output to the client.\n     * This will either parse a skin template.\n     *\n     * @param string $templ Template name\n     * @param bool   $exit  True if script should terminate (default)\n     */\n    #[\\Override]\n    public function send($templ = null, $exit = true)\n    {\n        if ($templ != 'iframe') {\n            // prevent from endless loops\n            if ($exit != 'recur' && $this->app->plugins->is_processing('render_page')) {\n                rcube::raise_error([\n                    'code' => 505,\n                    'message' => 'Recursion alert: ignoring output->send()',\n                ], true, false);\n\n                return;\n            }\n\n            $this->parse($templ, false);\n        } else {\n            $this->framed = true;\n            $this->write();\n        }\n\n        // set output asap\n        ob_flush();\n        flush();\n\n        if ($exit) {\n            exit;\n        }\n    }\n\n    /**\n     * Process template and write to stdOut\n     *\n     * @param string $template HTML template content\n     */\n    public function write($template = '')\n    {\n        if (!empty($this->script_files)) {\n            $this->set_env('request_token', $this->app->get_request_token());\n        }\n\n        // Fix assets path on blankpage\n        if (!empty($this->js_env['blankpage'])) {\n            $this->js_env['blankpage'] = $this->asset_url($this->js_env['blankpage'], true);\n        }\n\n        $commands = $this->get_js_commands($framed);\n\n        // if all js commands go to parent window we can ignore all\n        // script files and skip rcube_webmail initialization (#1489792)\n        // but not on error pages where skins may need jQuery, etc.\n        if ($framed && empty($this->js_env['server_error'])) {\n            $this->scripts = [];\n            $this->script_files = [];\n            $this->header = '';\n            $this->footer = '';\n        }\n\n        // write all javascript commands\n        if (!empty($commands)) {\n            $this->add_script($commands, 'head_top');\n        }\n\n        $this->page_headers();\n\n        // call super method\n        $this->_write($template);\n    }\n\n    /**\n     * Send common page headers\n     * For now it only (re)sets X-Frame-Options when needed\n     */\n    public function page_headers()\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        // allow (legal) iframe content to be loaded\n        $framed = $this->framed || !empty($this->env['framed']);\n        if ($framed && ($xopt = $this->app->config->get('x_frame_options', 'sameorigin'))) {\n            if (strtolower($xopt) === 'deny') {\n                $this->header('X-Frame-Options: sameorigin', true);\n            }\n        }\n    }\n\n    /**\n     * Parse a specific skin template and deliver to stdout (or return)\n     *\n     * @param string $name  Template name\n     * @param bool   $exit  Exit script\n     * @param bool   $write Don't write to stdout, return parsed content instead\n     *\n     * @see https://php.net/manual/en/function.exit.php\n     */\n    public function parse($name = 'main', $exit = true, $write = true)\n    {\n        $plugin = false;\n        $realname = $name;\n        $skin_dir = '';\n        $plugin_skin_paths = [];\n\n        $this->template_name = $realname;\n\n        $temp = explode('.', $name, 2);\n        if (count($temp) > 1) {\n            $plugin = $temp[0];\n            $name = $temp[1];\n            $skin_dir = $plugin . '/skins/' . $this->config->get('skin');\n\n            // apply skin search escalation list to plugin directory\n            foreach ($this->skin_paths as $skin_path) {\n                // skin folder in plugin dir\n                $plugin_skin_paths[] = $this->app->plugins->url . $plugin . '/' . $skin_path;\n                // plugin folder in skin dir\n                $plugin_skin_paths[] = $skin_path . '/plugins/' . $plugin;\n            }\n\n            // prepend plugin skin paths to search list\n            $this->skin_paths = array_merge($plugin_skin_paths, $this->skin_paths);\n        }\n\n        // find skin template\n        $path = false;\n        foreach ($this->skin_paths as $skin_path) {\n            // when requesting a plugin template ignore global skin path(s)\n            if ($plugin && !str_contains($skin_path, $this->app->plugins->url)) {\n                continue;\n            }\n\n            $path = RCUBE_INSTALL_PATH . \"{$skin_path}/templates/{$name}.html\";\n\n            // fallback to deprecated template names\n            if (!is_readable($path) && !empty($this->deprecated_templates[$realname])) {\n                $dname = $this->deprecated_templates[$realname];\n                $path = RCUBE_INSTALL_PATH . \"{$skin_path}/templates/{$dname}.html\";\n\n                if (is_readable($path)) {\n                    rcube::raise_error([\n                        'code' => 502,\n                        'message' => \"Using deprecated template '{$dname}' in {$skin_path}/templates. Please rename to '{$realname}'\",\n                    ], true, false);\n                }\n            }\n\n            if (is_readable($path)) {\n                $this->config->set('skin_path', $skin_path);\n                // set base_path to core skin directory (not plugin's skin)\n                $this->base_path = preg_replace('!plugins/\\w+/!', '', $skin_path);\n                $skin_dir = preg_replace('!^plugins/!', '', $skin_path);\n                break;\n            }\n\n            $path = false;\n        }\n\n        // read template file\n        if (!$path || ($templ = @file_get_contents($path)) === false) {\n            rcube::raise_error([\n                'code' => 404,\n                'message' => 'Error loading template for ' . $realname,\n            ], true, $write);\n\n            $this->skin_paths = array_slice($this->skin_paths, count($plugin_skin_paths));\n            return false;\n        }\n\n        // replace all path references to plugins/... with the configured plugins dir\n        // and /this/ to the current plugin skin directory\n        if ($plugin) {\n            $templ = preg_replace(\n                ['/\\bplugins\\//', '/([\"\\']?)\\/this\\//'],\n                [$this->app->plugins->url, '\\1' . $this->app->plugins->url . $skin_dir . '/'],\n                $templ\n            );\n        }\n\n        // parse for special tags\n        $output = $this->parse_conditions($templ);\n        $output = $this->parse_xml($output);\n\n        // trigger generic hook where plugins can put additional content to the page\n        $hook = $this->app->plugins->exec_hook('render_page', [\n            'template' => $realname,\n            'content' => $output,\n            'write' => $write,\n        ]);\n\n        // save some memory\n        $output = $hook['content'];\n        unset($hook['content']);\n\n        // remove plugin skin paths from current context\n        $this->skin_paths = array_slice($this->skin_paths, count($plugin_skin_paths));\n\n        if (!$write) {\n            return $this->postrender($output);\n        }\n\n        $this->write(trim($output));\n\n        if ($exit) {\n            exit;\n        }\n    }\n\n    /**\n     * Return executable javascript code for all registered commands\n     */\n    protected function get_js_commands(&$framed = null)\n    {\n        $out = '';\n        $parent_commands = 0;\n        $parent_prefix = '';\n        $top_commands = [];\n\n        // these should be always on top,\n        // e.g. hide_message() below depends on env.framed\n        if (!$this->framed && !empty($this->js_env)) {\n            $top_commands[] = ['set_env', $this->js_env];\n        }\n        if (!empty($this->js_labels)) {\n            $top_commands[] = ['add_label', $this->js_labels];\n        }\n\n        // unlock interface after iframe load\n        $unlock = isset($_REQUEST['_unlock']) ? preg_replace('/[^a-z0-9]/i', '', $_REQUEST['_unlock']) : 0;\n        if ($this->framed) {\n            $top_commands[] = ['iframe_loaded', $unlock];\n        } elseif ($unlock) {\n            $top_commands[] = ['hide_message', $unlock];\n        }\n\n        $commands = array_merge($top_commands, $this->js_commands);\n\n        foreach ($commands as $args) {\n            $method = array_shift($args);\n            $parent = $this->framed || preg_match('/^parent\\./', $method);\n\n            foreach ($args as $i => $arg) {\n                $args[$i] = self::json_serialize($arg, $this->devel_mode);\n            }\n\n            if ($parent) {\n                $parent_commands++;\n                $method = preg_replace('/^parent\\./', '', $method);\n                $parent_prefix = 'if (window.parent && parent.' . self::JS_OBJECT_NAME . ') parent.';\n                $method = $parent_prefix . self::JS_OBJECT_NAME . '.' . $method;\n            } else {\n                $method = self::JS_OBJECT_NAME . '.' . $method;\n            }\n\n            $out .= sprintf(\"%s(%s);\\n\", $method, implode(',', $args));\n        }\n\n        $framed = $parent_prefix && $parent_commands == count($commands);\n\n        // make the output more compact if all commands go to parent window\n        if ($framed) {\n            $out = 'if (window.parent && parent.' . self::JS_OBJECT_NAME . \") {\\n\"\n                . str_replace($parent_prefix, \"\\tparent.\", $out)\n                . \"}\\n\";\n        }\n\n        return $out;\n    }\n\n    /**\n     * Make URLs starting with a slash point to skin directory\n     *\n     * @param string $str         Input string\n     * @param bool   $search_path True if URL should be resolved using the current skin path stack\n     *\n     * @return string URL\n     */\n    public function abs_url($str, $search_path = false)\n    {\n        if (isset($str[0]) && $str[0] == '/') {\n            if ($search_path && ($file_url = $this->get_skin_file($str))) {\n                return $file_url;\n            }\n\n            return $this->base_path . $str;\n        }\n\n        return $str;\n    }\n\n    /**\n     * Show error page and terminate script execution\n     *\n     * @param int    $code    Error code\n     * @param string $message Error message\n     */\n    #[\\Override]\n    public function raise_error($code, $message)\n    {\n        $args = [\n            'code' => $code,\n            'message' => $message,\n        ];\n\n        $page = new rcmail_action_utils_error();\n        $page->run($args);\n    }\n\n    /**\n     * Modify path by adding URL prefix if configured\n     *\n     * @param string $path    Asset path\n     * @param bool   $abs_url Pass to self::abs_url() first\n     *\n     * @return string Asset path\n     */\n    public function asset_url($path, $abs_url = false)\n    {\n        // iframe content can't be in a different domain\n        // @TODO: check if assets are on a different domain\n\n        if ($abs_url) {\n            $path = $this->abs_url($path, true);\n        }\n\n        if (!$this->assets_path || in_array($path[0], ['?', '/', '.']) || strpos($path, '://')) {\n            return $this->resource_location($path);\n        }\n\n        return $this->assets_path . $path;\n    }\n\n    // Template parsing methods\n\n    /**\n     * Replace all strings ($varname)\n     * with the content of the according global variable.\n     */\n    protected function parse_with_globals($input)\n    {\n        $GLOBALS['__version'] = html::quote(RCMAIL_VERSION);\n        $GLOBALS['__comm_path'] = html::quote($this->app->comm_path);\n        $GLOBALS['__skin_path'] = html::quote($this->base_path);\n\n        return preg_replace_callback('/\\$(__[a-z0-9_\\-]+)/', [$this, 'globals_callback'], $input);\n    }\n\n    /**\n     * Callback function for preg_replace_callback() in parse_with_globals()\n     */\n    protected function globals_callback($matches)\n    {\n        return $GLOBALS[$matches[1]];\n    }\n\n    /**\n     * Correct absolute paths in images and other tags (add cache busters)\n     */\n    protected function fix_paths($output)\n    {\n        $regexp = [\n            '%(?P<name>src|background|data-src-[a-z]+)=(?P<opener>[\"\\']?)(?P<file>[a-z0-9/_.?=-]+)(?P<closer>[\"\\'\\s>])%i',\n            // fix href attributes in <link>'s only (#9941)\n            '%(?P<prefix><link[^>]*)(?P<name>href)=(?P<opener>[\"\\']?)(?P<file>[a-z0-9/_.?=-]+)(?P<closer>[\"\\'\\s>])%i',\n        ];\n\n        return preg_replace_callback($regexp, [$this, 'file_callback'], $output);\n    }\n\n    /**\n     * Callback function for preg_replace_callback in fix_paths()\n     *\n     * @return string Parsed string\n     */\n    protected function file_callback($matches)\n    {\n        $file = $matches['file'];\n        $file = preg_replace('!^/this/!', '/', $file);\n\n        // correct absolute paths\n        if ($file[0] == '/') {\n            $this->get_skin_file($file, $skin_path, $this->base_path);\n            $file = ($skin_path ?: $this->base_path) . $file;\n        }\n\n        // add file modification timestamp\n        if (preg_match('/\\.(js|css|less|ico|png|svg|jpeg)$/', $file)) {\n            $file = $this->file_mod($file);\n        }\n\n        $file = $this->resource_location($file);\n\n        return ($matches['prefix'] ?? '') . $matches['name'] . '=' . $matches['opener'] . $file . $matches['closer'];\n    }\n\n    /**\n     * Correct paths of asset files according to assets_path\n     */\n    protected function fix_assets_paths($output)\n    {\n        $regexp = '!(src|href|background)=([\"\\']?)([a-z0-9/_.?=-]+)([\"\\'\\s>])!i';\n\n        return preg_replace_callback($regexp, [$this, 'assets_callback'], $output);\n    }\n\n    /**\n     * Callback function for preg_replace_callback in fix_assets_paths()\n     *\n     * @return string Parsed string\n     */\n    protected function assets_callback($matches)\n    {\n        $file = $this->asset_url($matches[3]);\n        $file = $this->resource_location($file);\n\n        return $matches[1] . '=' . $matches[2] . $file . $matches[4];\n    }\n\n    /**\n     * Modify file by adding mtime indicator\n     */\n    protected function file_mod($file)\n    {\n        $fs = false;\n        $ext = substr($file, strrpos($file, '.') + 1);\n\n        // use minified file if exists (not in development mode)\n        if (!$this->devel_mode && !preg_match('/\\.min\\.' . $ext . '$/', $file)) {\n            $minified_file = substr($file, 0, strlen($ext) * -1) . 'min.' . $ext;\n            if ($fs = @filemtime($this->assets_dir . $minified_file)) {\n                return $minified_file . '?s=' . $fs;\n            }\n        }\n\n        if ($fs = @filemtime($this->assets_dir . $file)) {\n            $file .= '?s=' . $fs;\n        }\n\n        return $file;\n    }\n\n    /**\n     * Modify resource file location to be passed via the static.php end-point.\n     */\n    protected function resource_location($location)\n    {\n        if (!str_contains($location, '://')) {\n            $location = ltrim($location, '/');\n            $prefix = '';\n\n            // FIXME: Would REQUEST_URI be a better option than PATH_INFO?\n            if (!empty($_SERVER['PATH_INFO'])) {\n                $path = explode('/', trim($_SERVER['PATH_INFO'], '/'));\n                $prefix = str_repeat('../', count($path) + 1);\n            }\n\n            if (!str_starts_with($location, $prefix . 'static.php')\n                && !str_starts_with($location, 'data:')\n                && !str_ends_with($location, '.php')\n            ) {\n                $location = $prefix . 'static.php/' . $location;\n            }\n        }\n\n        return $location;\n    }\n\n    /**\n     * Public wrapper to dip into template parsing.\n     *\n     * @param string $input Template content\n     *\n     * @return string\n     */\n    public function just_parse($input)\n    {\n        $input = $this->parse_conditions($input);\n        $input = $this->parse_xml($input);\n        $input = $this->postrender($input);\n\n        return $input;\n    }\n\n    /**\n     * Parse for conditional tags\n     */\n    protected function parse_conditions($input)\n    {\n        $regexp1 = '/<roundcube:if\\s+([^>]+)>/is';\n        $regexp2 = '/<roundcube:(if|elseif|else|endif)\\s*([^>]*)>/is';\n\n        $pos = 0;\n\n        // Find IF tags and process them\n        while ($pos < strlen($input) && preg_match($regexp1, $input, $conditions, \\PREG_OFFSET_CAPTURE, $pos)) {\n            $pos = $start = $conditions[0][1];\n\n            // Process the 'condition' attribute\n            $attrib = html::parse_attrib_string($conditions[1][0]);\n            $condmet = isset($attrib['condition']) && $this->check_condition($attrib['condition']);\n\n            // Define start/end position of the content to pass into the output\n            $content_start = $condmet ? $pos + strlen($conditions[0][0]) : null;\n            $content_end = null;\n\n            $level = 0;\n            $endif = null;\n            $n = $pos + 1;\n\n            // Process the code until the closing tag (for the processed IF tag)\n            while (preg_match($regexp2, $input, $matches, \\PREG_OFFSET_CAPTURE, $n)) {\n                $tag_start = $matches[0][1];\n                $tag_end = $tag_start + strlen($matches[0][0]);\n                $tag_name = strtolower($matches[1][0]);\n\n                switch ($tag_name) {\n                    case 'if':\n                        $level++;\n                        break;\n                    case 'endif':\n                        if (!$level--) {\n                            $endif = $tag_end;\n                            if ($content_end === null) {\n                                $content_end = $tag_start;\n                            }\n\n                            break 2;\n                        }\n\n                        break;\n                    case 'elseif':\n                        if (!$level) {\n                            if ($condmet) {\n                                if ($content_end === null) {\n                                    $content_end = $tag_start;\n                                }\n                            } else {\n                                // Process the 'condition' attribute\n                                $attrib = html::parse_attrib_string($matches[2][0]);\n                                $condmet = isset($attrib['condition']) && $this->check_condition($attrib['condition']);\n\n                                if ($condmet) {\n                                    $content_start = $tag_end;\n                                }\n                            }\n                        }\n\n                        break;\n                    case 'else':\n                        if (!$level) {\n                            if ($condmet) {\n                                if ($content_end === null) {\n                                    $content_end = $tag_start;\n                                }\n                            } else {\n                                $content_start = $tag_end;\n                            }\n                        }\n\n                        break;\n                }\n\n                $n = $tag_end;\n            }\n\n            // No ending tag found\n            if ($endif === null) {\n                $pos = strlen($input);\n                if ($content_end === null) {\n                    $content_end = $pos;\n                }\n            }\n\n            if ($content_start === null) {\n                $content = '';\n            } else {\n                $content = substr($input, $content_start, $content_end - $content_start);\n            }\n\n            // Replace the whole IF statement with the output content\n            $input = substr_replace($input, $content, $start, max($endif, $content_end, $pos) - $start);\n            $pos = $start;\n        }\n\n        return $input;\n    }\n\n    /**\n     * Determines if a given condition is met\n     *\n     * @param string $condition Condition statement\n     *\n     * @return bool True if condition is met, False if not\n     *\n     * @todo Extend this to allow real conditions, not just \"set\"\n     */\n    protected function check_condition($condition)\n    {\n        return $this->eval_expression($condition);\n    }\n\n    /**\n     * Inserts hidden field with CSRF-prevention-token into POST forms\n     */\n    protected function alter_form_tag($matches)\n    {\n        $out = $matches[0];\n        $attrib = html::parse_attrib_string($matches[1]);\n\n        if (!empty($attrib['method']) && strtolower($attrib['method']) == 'post') {\n            $hidden = new html_hiddenfield(['name' => '_token', 'value' => $this->app->get_request_token()]);\n            $out .= \"\\n\" . $hidden->show();\n        }\n\n        return $out;\n    }\n\n    /**\n     * Parse & evaluate a given expression and return its result.\n     *\n     * @param string $expression Expression statement\n     *\n     * @return mixed Expression result\n     */\n    protected function eval_expression($expression)\n    {\n        $expression = preg_replace(\n            [\n                '/session:([a-z0-9_]+)/i',\n                '/config:([a-z0-9_]+)(:([a-z0-9_]+))?/i',\n                '/env:([a-z0-9_]+)/i',\n                '/request:([a-z0-9_]+)/i',\n                '/cookie:([a-z0-9_]+)/i',\n                '/browser:([a-z0-9_]+)/i',\n                '/template:name/i',\n            ],\n            [\n                \"(\\$_SESSION['\\\\1'] ?? null)\",\n                \"\\$this->app->config->get('\\\\1',rcube_utils::get_boolean('\\\\3'))\",\n                \"(\\$this->env['\\\\1'] ?? null)\",\n                \"rcube_utils::get_input_value('\\\\1', rcube_utils::INPUT_GPC)\",\n                \"(\\$_COOKIE['\\\\1'] ?? null)\",\n                \"(\\$this->browser->{'\\\\1'} ?? null)\",\n                \"'{$this->template_name}'\",\n            ],\n            $expression\n        );\n\n        // Note: We used create_function() before but it's deprecated in PHP 7.2\n        //       and really it was just a wrapper on eval().\n        return eval(\"return ({$expression});\");\n    }\n\n    /**\n     * Parse variable strings\n     *\n     * @param string $type Variable type (env, config etc)\n     * @param string $name Variable name\n     *\n     * @return mixed Variable value\n     */\n    protected function parse_variable($type, $name)\n    {\n        $value = '';\n\n        switch ($type) {\n            case 'env':\n                $value = $this->env[$name] ?? null;\n                break;\n            case 'config':\n                $value = $this->config->get($name);\n                if (is_array($value) && !empty($value[$_SESSION['storage_host']])) {\n                    $value = $value[$_SESSION['storage_host']];\n                }\n\n                break;\n            case 'request':\n                $value = rcube_utils::get_input_value($name, rcube_utils::INPUT_GPC);\n                break;\n            case 'session':\n                $value = $_SESSION[$name] ?? '';\n                break;\n            case 'cookie':\n                $value = htmlspecialchars($_COOKIE[$name], \\ENT_COMPAT | \\ENT_HTML401, RCUBE_CHARSET);\n                break;\n            case 'browser':\n                $value = $this->browser->{$name} ?? '';\n                break;\n        }\n\n        return $value;\n    }\n\n    /**\n     * Search for special tags in input and replace them\n     * with the appropriate content\n     *\n     * @param string $input Input string to parse\n     *\n     * @return string Altered input string\n     *\n     * @todo   Use DOM-parser to traverse template HTML\n     * @todo   Maybe a cache.\n     */\n    protected function parse_xml($input)\n    {\n        $regexp = '/<roundcube:([-_a-z]+)\\s+((?:[^>]|\\\\\\>)+)(?<!\\\\\\)>/Ui';\n\n        return preg_replace_callback($regexp, [$this, 'xml_command'], $input);\n    }\n\n    /**\n     * Callback function for parsing an xml command tag\n     * and turn it into real html content\n     *\n     * @param array $matches Matches array of preg_replace_callback\n     *\n     * @return string Tag/Object content\n     */\n    protected function xml_command($matches)\n    {\n        $command = strtolower($matches[1]);\n        $attrib = html::parse_attrib_string($matches[2]);\n\n        // empty output if required condition is not met\n        if (!empty($attrib['condition']) && !$this->check_condition($attrib['condition'])) {\n            return '';\n        }\n\n        // localize title and summary attributes\n        if ($command != 'button' && !empty($attrib['title']) && $this->app->text_exists($attrib['title'])) {\n            $attrib['title'] = $this->app->gettext($attrib['title']);\n        }\n        if ($command != 'button' && !empty($attrib['summary']) && $this->app->text_exists($attrib['summary'])) {\n            $attrib['summary'] = $this->app->gettext($attrib['summary']);\n        }\n\n        // execute command\n        switch ($command) {\n            // return a button\n            case 'button':\n                if (!empty($attrib['name']) || !empty($attrib['command'])) {\n                    return $this->button($attrib);\n                }\n\n                break;\n                // frame (<< reindent once https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/7179 is fixed)\n            case 'frame':\n                return $this->frame($attrib);\n                // show a label (<< reindent once https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/7179 is fixed)\n            case 'label':\n                if (!empty($attrib['expression'])) {\n                    $attrib['name'] = $this->eval_expression($attrib['expression']);\n                }\n\n                if (!empty($attrib['name']) || !empty($attrib['command'])) {\n                    $vars = $attrib + ['product' => $this->config->get('product_name')];\n                    unset($vars['name'], $vars['command']);\n\n                    $label = $this->app->gettext($attrib + ['vars' => $vars]);\n                    $quoting = null;\n\n                    if (!empty($attrib['quoting'])) {\n                        $quoting = strtolower($attrib['quoting']);\n                    } elseif (isset($attrib['html'])) {\n                        $quoting = rcube_utils::get_boolean((string) $attrib['html']) ? 'no' : '';\n                    }\n\n                    // 'noshow' can be used in skins to define new labels\n                    if (!empty($attrib['noshow'])) {\n                        return '';\n                    }\n\n                    switch ($quoting) {\n                        case 'no':\n                        case 'raw':\n                            break;\n                        case 'javascript':\n                        case 'js':\n                            $label = rcube::JQ($label);\n                            break;\n                        default:\n                            $label = html::quote($label);\n                            break;\n                    }\n\n                    return $label;\n                }\n\n                break;\n            case 'add_label':\n                $this->add_label($attrib['name']);\n                break;\n                // include a file (<< reindent once https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/7179 is fixed)\n            case 'include':\n                if (!empty($attrib['condition']) && !$this->check_condition($attrib['condition'])) {\n                    break;\n                }\n\n                if ($attrib['file'][0] != '/') {\n                    $attrib['file'] = '/templates/' . $attrib['file'];\n                }\n\n                $old_base_path = $this->base_path;\n                $include = '';\n                $attr_skin_path = !empty($attrib['skinpath']) ? $attrib['skinpath'] : null;\n\n                if (!empty($attrib['skin_path'])) {\n                    $attr_skin_path = $attrib['skin_path'];\n                }\n\n                if ($path = $this->get_skin_file($attrib['file'], $skin_path, $attr_skin_path)) {\n                    // set base_path to core skin directory (not plugin's skin)\n                    $this->base_path = preg_replace('!plugins/\\w+/!', '', $skin_path);\n                    $path = realpath(RCUBE_INSTALL_PATH . $path);\n                }\n\n                if (is_readable($path)) {\n                    $allow_php = $this->config->get('skin_include_php');\n                    $include = $allow_php ? $this->include_php($path) : file_get_contents($path);\n                    $include = $this->parse_conditions($include);\n                    $include = $this->parse_xml($include);\n                    $include = $this->fix_paths($include);\n                }\n\n                $this->base_path = $old_base_path;\n\n                return $include;\n            case 'plugin.include':\n                $hook = $this->app->plugins->exec_hook('template_plugin_include', $attrib + ['content' => '']);\n                return $hook['content'];\n                // define a container block (<< reindent once https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/7179 is fixed)\n            case 'container':\n                if (!empty($attrib['name']) && !empty($attrib['id'])) {\n                    $this->command('gui_container', $attrib['name'], $attrib['id']);\n                    // let plugins insert some content here\n                    $hook = $this->app->plugins->exec_hook('template_container', $attrib + ['content' => '']);\n                    return $hook['content'];\n                }\n\n                break;\n                // return code for a specific application object (<< reindent once https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/7179 is fixed)\n            case 'object':\n                $object = strtolower($attrib['name']);\n                $content = '';\n                $handler = null;\n\n                // correct deprecated object names\n                if (!empty($this->deprecated_template_objects[$object])) {\n                    $object = $this->deprecated_template_objects[$object];\n                }\n\n                if (!empty($this->object_handlers[$object])) {\n                    $handler = $this->object_handlers[$object];\n                }\n\n                // execute object handler function\n                if (is_callable($handler)) {\n                    $this->prepare_object_attribs($attrib);\n\n                    // We assume that objects with src attribute are internal (in most\n                    // cases this is a watermark frame). We need this to make sure assets_path\n                    // is added to the internal assets paths\n                    $external = empty($attrib['src']);\n                    $content = call_user_func($handler, $attrib);\n                } elseif ($object == 'doctype') {\n                    $content = html::doctype($attrib['value']);\n                } elseif ($object == 'logo') {\n                    $attrib += ['alt' => $this->xml_command(['', 'object', 'name=\"productname\"'])];\n\n                    // 'type' attribute added in 1.4 was renamed 'logo-type' in 1.5\n                    // check both for backwards compatibility\n                    $logo_type = !empty($attrib['logo-type']) ? $attrib['logo-type'] : null;\n                    $logo_match = !empty($attrib['logo-match']) ? $attrib['logo-match'] : null;\n                    if (!empty($attrib['type']) && empty($logo_type)) {\n                        $logo_type = $attrib['type'];\n                    }\n\n                    if (($template_logo = $this->get_template_logo($logo_type, $logo_match)) !== null) {\n                        $attrib['src'] = $template_logo;\n                    }\n\n                    if (($link = $this->get_template_logo('link')) !== null) {\n                        $attrib['onclick'] = \"location.href='{$link}';\";\n                        $attrib['style'] = 'cursor:pointer;';\n                    }\n\n                    $additional_logos = [];\n                    $logo_types = (array) $this->config->get('additional_logo_types');\n\n                    foreach ($logo_types as $type) {\n                        if (($template_logo = $this->get_template_logo($type)) !== null) {\n                            $additional_logos[$type] = $this->asset_url($template_logo, true);\n                        } elseif (!empty($attrib['data-src-' . $type])) {\n                            $additional_logos[$type] = $this->asset_url($attrib['data-src-' . $type], true);\n                        }\n                    }\n\n                    if (!empty($additional_logos)) {\n                        $this->set_env('additional_logos', $additional_logos);\n                    }\n\n                    if (!empty($attrib['src'])) {\n                        $content = html::img($attrib);\n                    }\n                } elseif ($object == 'productname') {\n                    $name = $this->config->get('product_name', 'Roundcube Webmail');\n                    $content = html::quote($name);\n                } elseif ($object == 'version') {\n                    $ver = (string) RCMAIL_VERSION;\n                    if (is_file(RCUBE_INSTALL_PATH . '.svn/entries')) {\n                        if (function_exists('shell_exec')) {\n                            if (preg_match('/Revision:\\s(\\d+)/', (string) @shell_exec('svn info'), $regs)) {\n                                $ver .= ' [SVN r' . $regs[1] . ']';\n                            }\n                        } else {\n                            $ver .= ' [SVN]';\n                        }\n                    } elseif (is_file(RCUBE_INSTALL_PATH . '.git/index')) {\n                        if (function_exists('shell_exec')) {\n                            if (preg_match('/Date:\\s+([^\\n]+)/', (string) @shell_exec('git log -1'), $regs)) {\n                                if ($date = date('Ymd.Hi', strtotime($regs[1]))) {\n                                    $ver .= ' [GIT ' . $date . ']';\n                                }\n                            }\n                        } else {\n                            $ver .= ' [GIT]';\n                        }\n                    }\n                    $content = html::quote($ver);\n                } elseif ($object == 'steptitle') {\n                    $content = html::quote($this->get_pagetitle(false));\n                } elseif ($object == 'pagetitle') {\n                    // Deprecated, <title> will be added automatically\n                    $content = html::quote($this->get_pagetitle());\n                } elseif ($object == 'contentframe') {\n                    if (empty($attrib['id'])) {\n                        $attrib['id'] = 'rcm' . $this->env['task'] . 'frame';\n                    }\n\n                    // parse variables\n                    if (preg_match('/^(config|env):([a-z0-9_]+)$/i', $attrib['src'], $matches)) {\n                        $attrib['src'] = $this->parse_variable($matches[1], $matches[2]);\n                    }\n\n                    $content = $this->frame($attrib, true);\n                } elseif ($object == 'meta' || $object == 'links') {\n                    if ($object == 'meta') {\n                        $source = 'meta_tags';\n                        $tag = 'meta';\n                        $key = 'name';\n                        $param = 'content';\n                    } else {\n                        $source = 'link_tags';\n                        $tag = 'link';\n                        $key = 'rel';\n                        $param = 'href';\n                    }\n\n                    foreach ($this->{$source} as $name => $vars) {\n                        // $vars can be in many forms:\n                        // - string\n                        // - ['key' => 'val']\n                        // - [string, string]\n                        // - [[], string]\n                        // - [['key' => 'val'], ['key' => 'val']]\n                        // normalise this for processing by checking for string array keys\n                        $vars = is_array($vars) ? (count(array_filter(array_keys($vars), 'is_string')) > 0 ? [$vars] : $vars) : [$vars];\n\n                        foreach ($vars as $args) {\n                            // skip unset headers e.g. when extending a skin and removing a header defined in the parent\n                            if ($args === false) {\n                                continue;\n                            }\n\n                            $args = is_array($args) ? $args : [$param => $args];\n\n                            // special handling for favicon\n                            if ($object == 'links' && $name == 'shortcut icon' && empty($args[$param])) {\n                                if ($href = $this->get_template_logo('favicon')) {\n                                    $args[$param] = $href;\n                                } elseif ($href = $this->config->get('favicon', '/images/favicon.ico')) {\n                                    $args[$param] = $href;\n                                }\n                            }\n\n                            $content .= html::tag($tag, [$key => $name, 'nl' => true] + $args);\n                        }\n                    }\n                }\n\n                // exec plugin hooks for this template object\n                $hook = $this->app->plugins->exec_hook(\"template_object_{$object}\", $attrib + ['content' => (string) $content]);\n\n                if (strlen($hook['content']) && !empty($external)) {\n                    $object_id = uniqid('TEMPLOBJECT:', true);\n                    $this->objects[$object_id] = $hook['content'];\n                    $hook['content'] = $object_id;\n                }\n\n                return $hook['content'];\n                // return <link> element (<< reindent once https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/7179 is fixed)\n            case 'link':\n                if ($attrib['condition'] && !$this->check_condition($attrib['condition'])) {\n                    break;\n                }\n\n                unset($attrib['condition']);\n\n                return html::tag('link', $attrib);\n                // return code for a specified eval expression (<< reindent once https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/7179 is fixed)\n            case 'exp':\n                return html::quote($this->eval_expression($attrib['expression']));\n                // return variable (<< reindent once https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/7179 is fixed)\n            case 'var':\n                $var = explode(':', $attrib['name']);\n                $value = $this->parse_variable($var[0], $var[1]);\n\n                if (is_array($value)) {\n                    $value = implode(', ', $value);\n                }\n\n                return html::quote((string) $value);\n            case 'form':\n                return $this->form_tag($attrib);\n        }\n\n        return '';\n    }\n\n    /**\n     * Prepares template object attributes\n     *\n     * @param array &$attribs Attributes\n     */\n    protected function prepare_object_attribs(&$attribs)\n    {\n        foreach ($attribs as $key => &$value) {\n            if (str_starts_with($key, 'data-label-')) {\n                // Localize data-label-* attributes\n                $value = $this->app->gettext($value);\n            } elseif ($key[0] == ':') {\n                // Evaluate attributes with expressions and remove special character from attribute name\n                $attribs[substr($key, 1)] = $this->eval_expression($value);\n                unset($attribs[$key]);\n            }\n        }\n    }\n\n    /**\n     * Include a specific file and return it's contents\n     *\n     * @param string $file File path\n     *\n     * @return string Contents of the processed file\n     */\n    protected function include_php($file)\n    {\n        ob_start();\n        include $file;\n        $out = ob_get_contents();\n        ob_end_clean();\n\n        return $out;\n    }\n\n    /**\n     * Put objects' content back into template output\n     */\n    protected function postrender($output)\n    {\n        // insert objects' contents\n        foreach ($this->objects as $key => $val) {\n            $output = str_replace($key, (string) $val, $output, $count);\n            if ($count) {\n                $this->objects[$key] = null;\n            }\n        }\n\n        // make sure all <form> tags have a valid request token\n        $output = preg_replace_callback('/<form\\s+([^>]+)>/Ui', [$this, 'alter_form_tag'], $output);\n\n        return $output;\n    }\n\n    /**\n     * Create and register a button\n     *\n     * @param array $attrib Named button attributes\n     *\n     * @return string HTML button\n     *\n     * @todo   Remove all inline JS calls and use jQuery instead.\n     * @todo   Remove all sprintf()'s - they are pretty, but also slow.\n     */\n    public function button($attrib)\n    {\n        static $s_button_count = 100;\n\n        // these commands can be called directly via url\n        $a_static_commands = ['compose', 'list', 'preferences', 'folders', 'identities'];\n\n        if (empty($attrib['command']) && empty($attrib['name']) && empty($attrib['href'])) {\n            return '';\n        }\n\n        $command = !empty($attrib['command']) ? $attrib['command'] : null;\n        $action = $command ?: (!empty($attrib['name']) ? $attrib['name'] : null);\n\n        if (!empty($attrib['task'])) {\n            $command = $attrib['task'] . '.' . $command;\n            $element = $attrib['task'] . '.' . $action;\n        } else {\n            $element = (!empty($this->env['task']) ? $this->env['task'] . '.' : '') . $action;\n        }\n\n        $disabled_actions = (array) $this->config->get('disabled_actions');\n\n        // remove buttons for disabled actions\n        if (in_array($element, $disabled_actions) || in_array($action, $disabled_actions)) {\n            return '';\n        }\n\n        // try to find out the button type\n        if (!empty($attrib['type'])) {\n            $attrib['type'] = strtolower($attrib['type']);\n            if (strpos($attrib['type'], '-menuitem')) {\n                $attrib['type'] = substr($attrib['type'], 0, -9);\n                $menuitem = true;\n            }\n        } elseif (!empty($attrib['image']) || !empty($attrib['imagepas']) || !empty($attrib['imageact'])) {\n            $attrib['type'] = 'image';\n        } else {\n            $attrib['type'] = 'button';\n        }\n\n        if (empty($attrib['image'])) {\n            if (!empty($attrib['imagepas'])) {\n                $attrib['image'] = $attrib['imagepas'];\n            } elseif (!empty($attrib['imageact'])) {\n                $attrib['image'] = $attrib['imageact'];\n            }\n        }\n\n        if (empty($attrib['id'])) {\n            // ensure auto generated IDs are unique between main window and content frame\n            // Elastic skin duplicates buttons between the two on smaller screens (#7618)\n            $prefix = ($this->framed || !empty($this->env['framed'])) ? 'frm' : '';\n            $attrib['id'] = sprintf('rcmbtn%s%d', $prefix, $s_button_count++);\n        }\n\n        // get localized text for labels and titles\n        $domain = !empty($attrib['domain']) ? $attrib['domain'] : null;\n        if (!empty($attrib['title'])) {\n            $attrib['title'] = html::quote($this->app->gettext($attrib['title'], $domain));\n        }\n        if (!empty($attrib['label'])) {\n            $attrib['label'] = html::quote($this->app->gettext($attrib['label'], $domain));\n        }\n        if (!empty($attrib['alt'])) {\n            $attrib['alt'] = html::quote($this->app->gettext($attrib['alt'], $domain));\n        }\n\n        // set accessibility attributes\n        if (empty($attrib['role'])) {\n            $attrib['role'] = 'button';\n        }\n\n        if (!empty($attrib['class']) && !empty($attrib['classact']) || !empty($attrib['imagepas']) && !empty($attrib['imageact'])) {\n            if (array_key_exists('tabindex', $attrib)) {\n                $attrib['data-tabindex'] = $attrib['tabindex'];\n            }\n            $attrib['tabindex'] = '-1';  // disable button by default\n            $attrib['aria-disabled'] = 'true';\n        }\n\n        // set title to alt attribute for IE browsers\n        if ($this->browser->ie && empty($attrib['title']) && !empty($attrib['alt'])) {\n            $attrib['title'] = $attrib['alt'];\n        }\n\n        // add empty alt attribute for XHTML compatibility\n        if (!isset($attrib['alt'])) {\n            $attrib['alt'] = '';\n        }\n\n        // register button in the system\n        if (!empty($attrib['command'])) {\n            $this->add_script(sprintf(\n                \"%s.register_button('%s', '%s', '%s', '%s', '%s', '%s');\",\n                self::JS_OBJECT_NAME,\n                $command,\n                $attrib['id'],\n                $attrib['type'],\n                !empty($attrib['imageact']) ? $this->abs_url($attrib['imageact']) : (!empty($attrib['classact']) ? $attrib['classact'] : ''),\n                !empty($attrib['imagesel']) ? $this->abs_url($attrib['imagesel']) : (!empty($attrib['classsel']) ? $attrib['classsel'] : ''),\n                !empty($attrib['imageover']) ? $this->abs_url($attrib['imageover']) : ''\n            ));\n\n            // make valid href to specific buttons\n            if (in_array($attrib['command'], rcmail::$main_tasks)) {\n                $attrib['href'] = $this->app->url(['task' => $attrib['command']]);\n                $attrib['onclick'] = sprintf(\"return %s.command('switch-task','%s',this,event)\", self::JS_OBJECT_NAME, $attrib['command']);\n            } elseif (!empty($attrib['task']) && in_array($attrib['task'], rcmail::$main_tasks)) {\n                $attrib['href'] = $this->app->url(['action' => $attrib['command'], 'task' => $attrib['task']]);\n            } elseif (in_array($attrib['command'], $a_static_commands)) {\n                $attrib['href'] = $this->app->url(['action' => $attrib['command']]);\n            } elseif (($attrib['command'] == 'permaurl' || $attrib['command'] == 'extwin') && !empty($this->env['permaurl'])) {\n                $attrib['href'] = $this->env['permaurl'];\n            }\n        }\n\n        // overwrite attributes\n        if (empty($attrib['href'])) {\n            $attrib['href'] = '#';\n        }\n\n        if (!empty($attrib['task'])) {\n            if (!empty($attrib['classact'])) {\n                $attrib['class'] = $attrib['classact'];\n            }\n        } elseif ($command && empty($attrib['onclick'])) {\n            $attrib['onclick'] = sprintf(\n                \"return %s.command('%s','%s',this,event)\",\n                self::JS_OBJECT_NAME,\n                $command,\n                !empty($attrib['prop']) ? $attrib['prop'] : ''\n            );\n        }\n\n        $out = '';\n        $btn_content = null;\n        $link_attrib = [];\n\n        // generate image tag\n        if ($attrib['type'] == 'image') {\n            $attrib_str = html::attrib_string(\n                $attrib,\n                [\n                    'style', 'class', 'id', 'width', 'height', 'border', 'hspace',\n                    'vspace', 'align', 'alt', 'tabindex', 'title',\n                ]\n            );\n            $btn_content = sprintf('<img src=\"%s\"%s />', $this->abs_url($attrib['image']), $attrib_str);\n            if (!empty($attrib['label'])) {\n                $btn_content .= ' ' . $attrib['label'];\n            }\n            $link_attrib = ['href', 'onclick', 'onmouseover', 'onmouseout', 'onmousedown', 'onmouseup', 'target'];\n        } elseif ($attrib['type'] == 'link') {\n            $btn_content = $attrib['content'] ?? (!empty($attrib['label']) ? $attrib['label'] : $attrib['command']);\n            $link_attrib = array_merge(html::$common_attrib, ['href', 'onclick', 'tabindex', 'target', 'rel']);\n            if (!empty($attrib['innerclass'])) {\n                $btn_content = html::span($attrib['innerclass'], $btn_content);\n            }\n        } elseif ($attrib['type'] == 'input') {\n            $attrib['type'] = 'button';\n\n            if (!empty($attrib['label'])) {\n                $attrib['value'] = $attrib['label'];\n            }\n            if (!empty($attrib['command'])) {\n                $attrib['disabled'] = 'disabled';\n            }\n\n            $out = html::tag('input', $attrib, null, ['type', 'value', 'onclick', 'id', 'class', 'style', 'tabindex', 'disabled']);\n        } else {\n            if (!empty($attrib['label'])) {\n                $attrib['value'] = $attrib['label'];\n            }\n            if (!empty($attrib['command'])) {\n                $attrib['disabled'] = 'disabled';\n            }\n\n            $content = $attrib['content'] ?? $attrib['label'];\n            $out = html::tag('button', $attrib, $content, ['type', 'value', 'onclick', 'id', 'class', 'style', 'tabindex', 'disabled']);\n        }\n\n        // generate html code for button\n        if ($btn_content) {\n            $attrib_str = html::attrib_string($attrib, $link_attrib);\n            $out = sprintf('<a%s>%s</a>', $attrib_str, $btn_content);\n        }\n\n        if (!empty($attrib['wrapper'])) {\n            $out = html::tag($attrib['wrapper'], null, $out);\n        }\n\n        if (!empty($menuitem)) {\n            $class = !empty($attrib['menuitem-class']) ? ' class=\"' . $attrib['menuitem-class'] . '\"' : '';\n            $out = '<li role=\"menuitem\"' . $class . '>' . $out . '</li>';\n        }\n\n        return $out;\n    }\n\n    /**\n     * Link an external script file\n     *\n     * @param string $file     File URL\n     * @param string $position Target position [head|head_bottom|foot]\n     */\n    public function include_script($file, $position = 'head', $add_path = true)\n    {\n        if ($add_path && !preg_match('|^https?://|i', $file) && $file[0] != '/') {\n            $file = $this->file_mod($this->scripts_path . $file);\n        }\n\n        if (!isset($this->script_files[$position]) || !is_array($this->script_files[$position])) {\n            $this->script_files[$position] = [];\n        }\n\n        if (!in_array($file, $this->script_files[$position])) {\n            $this->script_files[$position][] = $file;\n        }\n    }\n\n    /**\n     * Add inline javascript code\n     *\n     * @param string $script   JS code snippet\n     * @param string $position Target position [head|head_top|foot|docready]\n     */\n    public function add_script($script, $position = 'head')\n    {\n        if (!isset($this->scripts[$position])) {\n            $this->scripts[$position] = rtrim($script);\n        } else {\n            $this->scripts[$position] .= \"\\n\" . rtrim($script);\n        }\n    }\n\n    /**\n     * Link an external css file\n     *\n     * @param string $file File URL\n     */\n    public function include_css($file)\n    {\n        $this->css_files[] = $file;\n    }\n\n    /**\n     * Add HTML code to the page header\n     *\n     * @param string $str HTML code\n     */\n    public function add_header($str)\n    {\n        $this->header .= \"\\n\" . $str;\n    }\n\n    /**\n     * Add HTML code to the page footer\n     * To be added right before </body>\n     *\n     * @param string $str HTML code\n     */\n    public function add_footer($str)\n    {\n        $this->footer .= \"\\n\" . $str;\n    }\n\n    /**\n     * Process template and write to stdOut\n     *\n     * @param string $output HTML output\n     */\n    protected function _write($output = '')\n    {\n        $output = trim($output);\n\n        if (empty($output)) {\n            $output = html::doctype('html5') . \"\\n\" . $this->default_template;\n            $is_empty = true;\n        }\n\n        $merge_script_files = static function ($output, $script) {\n            return $output . html::script($script);\n        };\n\n        $merge_scripts = static function ($output, $script) {\n            return $output . html::script([], $script);\n        };\n\n        // put docready commands into page footer\n        if (!empty($this->scripts['docready'])) {\n            $this->add_script(\"\\$(function() {\\n\" . $this->scripts['docready'] . \"\\n});\", 'foot');\n        }\n\n        $page_header = '';\n        $page_footer = '';\n        $meta = '';\n\n        // declare page language\n        if (!empty($_SESSION['language'])) {\n            $lang = substr($_SESSION['language'], 0, 2);\n            $output = preg_replace('/<html/', '<html lang=\"' . html::quote($lang) . '\"', $output, 1);\n\n            if (!headers_sent()) {\n                $this->header('Content-Language: ' . $lang);\n            }\n        }\n\n        // include meta tag with charset\n        if (!empty($this->charset)) {\n            if (!headers_sent()) {\n                $this->header('Content-Type: text/html; charset=' . $this->charset);\n            }\n\n            $meta .= html::tag('meta', [\n                'http-equiv' => 'content-type',\n                'content' => \"text/html; charset={$this->charset}\",\n                'nl' => true,\n            ]);\n        }\n\n        // include page title (after charset specification)\n        $meta .= '<title>' . html::quote($this->get_pagetitle()) . \"</title>\\n\";\n\n        $output = (string) preg_replace('/(<head[^>]*>)\\n*/i', \"\\\\1\\n{$meta}\", $output, 1, $count);\n        if (!$count) {\n            $page_header .= $meta;\n        }\n\n        // include scripts into header/footer\n        if (!empty($this->script_files['head'])) {\n            $page_header .= array_reduce((array) $this->script_files['head'], $merge_script_files);\n        }\n\n        $head = $this->scripts['head_top'] ?? '';\n        $head .= $this->scripts['head'] ?? '';\n\n        $page_header .= array_reduce((array) $head, $merge_scripts);\n        $page_header .= $this->header . \"\\n\";\n\n        if (!empty($this->script_files['head_bottom'])) {\n            $page_header .= array_reduce((array) $this->script_files['head_bottom'], $merge_script_files);\n        }\n\n        if (!empty($this->script_files['foot'])) {\n            $page_footer .= array_reduce((array) $this->script_files['foot'], $merge_script_files);\n        }\n\n        $page_footer .= $this->footer . \"\\n\";\n\n        if (!empty($this->scripts['foot'])) {\n            $page_footer .= array_reduce((array) $this->scripts['foot'], $merge_scripts);\n        }\n\n        // find page header\n        if ($hpos = stripos($output, '</head>')) {\n            $page_header .= \"\\n\";\n        } else {\n            if (!is_numeric($hpos)) {\n                $hpos = stripos($output, '<body');\n            }\n            if (!is_numeric($hpos) && ($hpos = stripos($output, '<html'))) {\n                // @phpstan-ignore-next-line\n                while ($output[$hpos] != '>') {\n                    $hpos++;\n                }\n                $hpos++;\n            }\n            $page_header = \"<head>\\n{$page_header}\\n</head>\\n\";\n        }\n\n        // add page header\n        if ($hpos) {\n            $output = substr_replace($output, $page_header, $hpos, 0);\n        } else {\n            $output = $page_header . $output;\n        }\n\n        // add page footer\n        if (($fpos = strripos($output, '</body>')) || ($fpos = strripos($output, '</html>'))) {\n            // for Elastic: put footer content before \"footer scripts\"\n            while (($npos = strripos($output, \"\\n\", -strlen($output) + $fpos - 1))\n                && $npos != $fpos\n                && ($chunk = substr($output, $npos, $fpos - $npos)) !== ''\n                && (trim($chunk) === '' || preg_match('/\\s*<script[^>]+><\\/script>\\s*/', $chunk))\n            ) {\n                $fpos = $npos;\n            }\n\n            $output = substr_replace($output, $page_footer . \"\\n\", $fpos, 0);\n        } else {\n            $output .= \"\\n\" . $page_footer;\n        }\n\n        // add css files in head, before scripts, for speed up with parallel downloads\n        if (!empty($this->css_files) && empty($is_empty)\n            && (($pos = stripos($output, '<script ')) || ($pos = stripos($output, '</head>')))\n        ) {\n            $css = '';\n            foreach ($this->css_files as $file) {\n                $is_less = substr_compare($file, '.less', -5, 5, true) === 0;\n                $css .= html::tag('link', [\n                    'rel' => $is_less ? 'stylesheet/less' : 'stylesheet',\n                    'type' => 'text/css',\n                    'href' => $file,\n                    'nl' => true,\n                ]);\n            }\n            $output = substr_replace($output, $css, $pos, 0);\n        }\n\n        $output = $this->parse_with_globals($this->fix_paths($output));\n\n        if ($this->assets_path) {\n            $output = $this->fix_assets_paths($output);\n        }\n\n        $output = $this->postrender($output);\n\n        // trigger hook with final HTML content to be sent\n        $hook = $this->app->plugins->exec_hook('send_page', ['content' => $output]);\n        if (!$hook['abort']) {\n            if ($this->charset != RCUBE_CHARSET) {\n                echo rcube_charset::convert($hook['content'], RCUBE_CHARSET, $this->charset);\n            } else {\n                echo $hook['content'];\n            }\n        }\n    }\n\n    /**\n     * Returns iframe object, registers some related env variables\n     *\n     * @param array $attrib          HTML attributes\n     * @param bool  $is_contentframe Register this iframe as the 'contentframe' gui object\n     *\n     * @return string IFRAME element\n     */\n    public function frame($attrib, $is_contentframe = false)\n    {\n        static $idcount = 0;\n\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmframe' . ++$idcount;\n        }\n\n        $attrib['name'] = $attrib['id'];\n        $attrib['src'] = !empty($attrib['src']) ? $this->abs_url($attrib['src'], true) : 'javascript:false;';\n\n        // register as 'contentframe' object\n        if ($is_contentframe || !empty($attrib['contentframe'])) {\n            $this->set_env('contentframe', !empty($attrib['contentframe']) ? $attrib['contentframe'] : $attrib['name']);\n        }\n\n        return html::iframe($attrib);\n    }\n\n    // common functions delivering gui objects\n\n    /**\n     * Create a form tag with the necessary hidden fields\n     *\n     * @param array  $attrib  Named tag parameters\n     * @param string $content HTML content of the form\n     *\n     * @return string HTML code for the form\n     */\n    public function form_tag($attrib, $content = null)\n    {\n        $hidden = '';\n\n        if (!empty($this->env['extwin'])) {\n            $hiddenfield = new html_hiddenfield(['name' => '_extwin', 'value' => '1']);\n            $hidden = $hiddenfield->show();\n        } elseif ($this->framed || !empty($this->env['framed'])) {\n            $hiddenfield = new html_hiddenfield(['name' => '_framed', 'value' => '1']);\n            $hidden = $hiddenfield->show();\n        }\n\n        if (!$content) {\n            $attrib['noclose'] = true;\n        }\n\n        return html::tag('form',\n            $attrib + ['action' => $this->app->comm_path, 'method' => 'get'],\n            $hidden . $content,\n            ['id', 'class', 'style', 'name', 'method', 'action', 'enctype', 'onsubmit']\n        );\n    }\n\n    /**\n     * Build a form tag with a unique request token\n     *\n     * @param array  $attrib  Named tag parameters including 'action' and 'task' values\n     *                        which will be put into hidden fields\n     * @param string $content Form content\n     *\n     * @return string HTML code for the form\n     */\n    public function request_form($attrib, $content = '')\n    {\n        $hidden = new html_hiddenfield();\n\n        if (!empty($attrib['task'])) {\n            $hidden->add(['name' => '_task', 'value' => $attrib['task']]);\n        }\n\n        if (!empty($attrib['action'])) {\n            $hidden->add(['name' => '_action', 'value' => $attrib['action']]);\n        }\n\n        // we already have a <form> tag\n        if (!empty($attrib['form'])) {\n            if ($this->framed || !empty($this->env['framed'])) {\n                $hidden->add(['name' => '_framed', 'value' => '1']);\n            }\n\n            return $hidden->show() . $content;\n        }\n\n        unset($attrib['task'], $attrib['request']);\n        $attrib['action'] = './';\n\n        return $this->form_tag($attrib, $hidden->show() . $content);\n    }\n\n    /**\n     * GUI object 'username'\n     * Showing IMAP username of the current session\n     *\n     * @param array $attrib Named tag parameters (currently not used)\n     *\n     * @return string HTML code for the gui object\n     */\n    public function current_username($attrib)\n    {\n        static $username;\n\n        // already fetched\n        if (!empty($username)) {\n            return $username;\n        }\n\n        // Current username is an e-mail address\n        if (isset($_SESSION['username']) && strpos($_SESSION['username'], '@')) {\n            $username = $_SESSION['username'];\n        }\n        // get e-mail address from default identity\n        elseif ($sql_arr = $this->app->user->get_identity()) {\n            $username = $sql_arr['email'];\n        } else {\n            $username = $this->app->user->get_username();\n        }\n\n        $username = rcube_utils::idn_to_utf8($username);\n\n        return html::quote($username);\n    }\n\n    /**\n     * GUI object 'loginform'\n     * Returns code for the webmail login form\n     *\n     * @param array $attrib Named parameters\n     *\n     * @return string HTML code for the gui object\n     */\n    protected function login_form($attrib)\n    {\n        $default_host = $this->config->get('imap_host');\n        $autocomplete = (int) $this->config->get('login_autocomplete');\n        $username_filter = $this->config->get('login_username_filter');\n        $_SESSION['temp'] = true;\n\n        // save original url\n        $url = rcube_utils::get_input_string('_url', rcube_utils::INPUT_POST);\n        if (\n            empty($url)\n            && !empty($_SERVER['QUERY_STRING'])\n            && !preg_match('/_(task|action)=logout/', $_SERVER['QUERY_STRING'])\n        ) {\n            $url = $_SERVER['QUERY_STRING'];\n        }\n\n        // Disable autocapitalization on iPad/iPhone (#1488609)\n        $attrib['autocapitalize'] = 'off';\n\n        $form_name = !empty($attrib['form']) ? $attrib['form'] : 'form';\n\n        // set autocomplete attribute\n        $user_attrib = $autocomplete > 0 ? [] : ['autocomplete' => 'off'];\n        $host_attrib = $autocomplete > 0 ? [] : ['autocomplete' => 'off'];\n        $pass_attrib = $autocomplete > 1 ? [] : ['autocomplete' => 'off'];\n\n        if ($username_filter && strtolower($username_filter) == 'email') {\n            $user_attrib['type'] = 'email';\n        }\n\n        $input_task = new html_hiddenfield(['name' => '_task', 'value' => 'login']);\n        $input_action = new html_hiddenfield(['name' => '_action', 'value' => 'login']);\n        $input_tzone = new html_hiddenfield(['name' => '_timezone', 'id' => 'rcmlogintz', 'value' => '_default_']);\n        $input_url = new html_hiddenfield(['name' => '_url', 'id' => 'rcmloginurl', 'value' => $url]);\n        $input_user = new html_inputfield(['name' => '_user', 'id' => 'rcmloginuser', 'required' => 'required']\n            + $attrib + $user_attrib);\n        $input_pass = new html_passwordfield(['name' => '_pass', 'id' => 'rcmloginpwd', 'required' => 'required']\n            + $attrib + $pass_attrib);\n        $input_host = null;\n\n        $form_content = [\n            'hidden' => [\n                'task' => $input_task->show(),\n                'action' => $input_action->show(),\n                'tzone' => $input_tzone->show(),\n                'url' => $input_url->show(),\n            ],\n            'inputs' => [\n                'user' => [\n                    'title' => html::label('rcmloginuser', html::quote($this->app->gettext('username'))),\n                    'content' => $input_user->show(rcube_utils::get_input_string('_user', rcube_utils::INPUT_GPC)),\n                ],\n                'password' => [\n                    'title' => html::label('rcmloginpwd', html::quote($this->app->gettext('password'))),\n                    'content' => $input_pass->show(),\n                ],\n            ],\n            'buttons' => [],\n        ];\n\n        if (is_array($default_host) && count($default_host) > 1) {\n            $input_host = new html_select(['name' => '_host', 'id' => 'rcmloginhost', 'class' => 'custom-select']);\n\n            foreach ($default_host as $key => $value) {\n                if (!is_array($value)) {\n                    $input_host->add($value, is_numeric($key) ? $value : $key);\n                } else {\n                    $input_host = null;\n                    break;\n                }\n            }\n        } elseif (is_array($default_host) && ($host = key($default_host)) !== null) {\n            $val = is_numeric($host) ? $default_host[$host] : $host;\n            $input_host = new html_hiddenfield(['name' => '_host', 'id' => 'rcmloginhost', 'value' => $val] + $attrib);\n\n            $form_content['hidden']['host'] = $input_host->show();\n            $input_host = null;\n        } elseif (empty($default_host)) {\n            $input_host = new html_inputfield(['name' => '_host', 'id' => 'rcmloginhost', 'class' => 'form-control']\n                + $attrib + $host_attrib);\n        }\n\n        // add host selection row\n        if (is_object($input_host)) {\n            $form_content['inputs']['host'] = [\n                'title' => html::label('rcmloginhost', html::quote($this->app->gettext('server'))),\n                'content' => $input_host->show(rcube_utils::get_input_string('_host', rcube_utils::INPUT_GPC)),\n            ];\n        }\n\n        if (rcube_utils::get_boolean($attrib['submit'])) {\n            $button_attr = ['type' => 'submit', 'id' => 'rcmloginsubmit', 'class' => 'button mainaction submit'];\n            $button = html::tag('button', $button_attr, $this->app->gettext('login'));\n\n            $form_content['buttons']['submit'] = ['outterclass' => 'formbuttons', 'content' => $button];\n        }\n\n        $data = $this->app->plugins->exec_hook('loginform_content', $form_content);\n\n        $this->add_gui_object('loginform', $form_name);\n\n        // output login form contents\n        $out = implode('', $data['hidden']);\n\n        if (count($data['inputs']) > 0) {\n            // create HTML table with two cols\n            $table = new html_table(['cols' => 2]);\n\n            foreach ($data['inputs'] as $input) {\n                if (isset($input['title'])) {\n                    $table->add('title', $input['title']);\n                    $table->add('input', $input['content']);\n                } else {\n                    $table->add(['colspan' => 2, 'class' => 'input'], $input['content']);\n                }\n            }\n\n            $out .= $table->show();\n        }\n\n        foreach ($data['buttons'] as $button) {\n            $out .= html::p($button['outterclass'], $button['content']);\n        }\n\n        // surround html output with a form tag\n        if (empty($attrib['form'])) {\n            $out = $this->form_tag(['name' => $form_name, 'method' => 'post'], $out);\n        }\n\n        return $out;\n    }\n\n    /**\n     * GUI object 'preloader'\n     * Loads javascript code for images preloading\n     *\n     * @param array $attrib Named parameters\n     */\n    protected function preloader($attrib): void\n    {\n        $images = preg_split('/[\\s\\t\\n,]+/', $attrib['images'], -1, \\PREG_SPLIT_NO_EMPTY);\n        $images = array_map([$this, 'abs_url'], $images);\n        $images = array_map([$this, 'asset_url'], $images);\n\n        if (empty($images) || (isset($_REQUEST['_task']) && $_REQUEST['_task'] == 'logout')) {\n            return;\n        }\n\n        $this->add_script('var images = ' . self::json_serialize($images, $this->devel_mode) . ';\n            for (var i=0; i<images.length; i++) {\n                img = new Image();\n                img.src = images[i];\n            }', 'docready');\n    }\n\n    /**\n     * GUI object 'searchform'\n     * Returns code for search function\n     *\n     * @param array $attrib Named parameters\n     *\n     * @return string HTML code for the gui object\n     */\n    public function search_form($attrib)\n    {\n        // add some labels to client\n        $this->add_label('searching');\n\n        $attrib['name'] = '_q';\n        $attrib['class'] = trim((!empty($attrib['class']) ? $attrib['class'] : '') . ' no-bs');\n\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmqsearchbox';\n        }\n        if (isset($attrib['type']) && $attrib['type'] == 'search' && !$this->browser->khtml) {\n            unset($attrib['type'], $attrib['results']);\n        }\n        if (empty($attrib['placeholder'])) {\n            $attrib['placeholder'] = $this->app->gettext('searchplaceholder');\n        }\n\n        $label = html::label(['for' => $attrib['id'], 'class' => 'voice'], rcube::Q($this->app->gettext('arialabelsearchterms')));\n        $input_q = new html_inputfield($attrib);\n        $out = $label . $input_q->show();\n        $name = 'qsearchbox';\n\n        // Support for multiple searchforms on the same page\n        if (isset($attrib['gui-object']) && $attrib['gui-object'] !== false && $attrib['gui-object'] !== 'false') {\n            $name = $attrib['gui-object'];\n        }\n\n        $this->add_gui_object($name, $attrib['id']);\n\n        // add form tag around text field\n        if (empty($attrib['form']) && empty($attrib['no-form'])) {\n            $out = $this->form_tag([\n                'name' => !empty($attrib['form-name']) ? $attrib['form-name'] : 'rcmqsearchform',\n                'onsubmit' => sprintf(\n                    \"%s.command('%s'); return false\",\n                    self::JS_OBJECT_NAME,\n                    !empty($attrib['command']) ? $attrib['command'] : 'search'\n                ),\n                // 'style'    => \"display:inline\"\n            ], $out);\n        }\n\n        if (!empty($attrib['wrapper'])) {\n            $options_button = '';\n\n            $ariatag = !empty($attrib['ariatag']) ? $attrib['ariatag'] : 'h2';\n            $domain = !empty($attrib['label-domain']) ? $attrib['label-domain'] : null;\n            $options = !empty($attrib['options']) ? $attrib['options'] : null;\n\n            $header_label = $this->app->gettext('arialabel' . $attrib['label'], $domain);\n            $header_attrs = [\n                'id' => 'aria-label-' . $attrib['label'],\n                'class' => 'voice',\n            ];\n\n            $header = html::tag($ariatag, $header_attrs, rcube::Q($header_label));\n\n            if (!empty($attrib['options'])) {\n                $options_button = $this->button([\n                    'type' => 'link',\n                    'href' => '#search-filter',\n                    'class' => 'button options',\n                    'label' => 'options',\n                    'title' => 'options',\n                    'tabindex' => '0',\n                    'innerclass' => 'inner',\n                    'data-target' => $options,\n                ]);\n            }\n\n            $search_button = $this->button([\n                'type' => 'link',\n                'href' => '#search',\n                'class' => 'button search',\n                'label' => $attrib['buttontitle'],\n                'title' => $attrib['buttontitle'],\n                'tabindex' => '0',\n                'innerclass' => 'inner',\n            ]);\n\n            $reset_button = $this->button([\n                'type' => 'link',\n                'command' => !empty($attrib['reset-command']) ? $attrib['reset-command'] : 'reset-search',\n                'class' => 'button reset',\n                'label' => 'resetsearch',\n                'title' => 'resetsearch',\n                'tabindex' => '0',\n                'innerclass' => 'inner',\n            ]);\n\n            $out = html::div([\n                    'role' => 'search',\n                    'aria-labelledby' => !empty($attrib['label']) ? 'aria-label-' . $attrib['label'] : null,\n                    'class' => $attrib['wrapper'],\n                ],\n                \"{$header}{$out}\\n{$reset_button}\\n{$options_button}\\n{$search_button}\"\n            );\n        }\n\n        return $out;\n    }\n\n    /**\n     * Builder for GUI object 'message'\n     *\n     * @param array $attrib Named tag parameters\n     *\n     * @return string HTML code for the gui object\n     */\n    protected function message_container($attrib)\n    {\n        if (isset($attrib['id']) === false) {\n            $attrib['id'] = 'rcmMessageContainer';\n        }\n\n        $this->add_gui_object('message', $attrib['id']);\n\n        return html::div($attrib, '');\n    }\n\n    /**\n     * GUI object 'charsetselector'\n     *\n     * @param array $attrib Named parameters for the select tag\n     *\n     * @return string HTML code for the gui object\n     */\n    public function charset_selector($attrib)\n    {\n        // pass the following attributes to the form class\n        $field_attrib = ['name' => '_charset'];\n        foreach ($attrib as $attr => $value) {\n            if (in_array($attr, ['id', 'name', 'class', 'style', 'size', 'tabindex'])) {\n                $field_attrib[$attr] = $value;\n            }\n        }\n\n        $charsets = [\n            'UTF-8' => 'UTF-8 (' . $this->app->gettext('unicode') . ')',\n            'US-ASCII' => 'ASCII (' . $this->app->gettext('english') . ')',\n            'ISO-8859-1' => 'ISO-8859-1 (' . $this->app->gettext('westerneuropean') . ')',\n            'ISO-8859-2' => 'ISO-8859-2 (' . $this->app->gettext('easterneuropean') . ')',\n            'ISO-8859-4' => 'ISO-8859-4 (' . $this->app->gettext('baltic') . ')',\n            'ISO-8859-5' => 'ISO-8859-5 (' . $this->app->gettext('cyrillic') . ')',\n            'ISO-8859-6' => 'ISO-8859-6 (' . $this->app->gettext('arabic') . ')',\n            'ISO-8859-7' => 'ISO-8859-7 (' . $this->app->gettext('greek') . ')',\n            'ISO-8859-8' => 'ISO-8859-8 (' . $this->app->gettext('hebrew') . ')',\n            'ISO-8859-9' => 'ISO-8859-9 (' . $this->app->gettext('turkish') . ')',\n            'ISO-8859-10' => 'ISO-8859-10 (' . $this->app->gettext('nordic') . ')',\n            'ISO-8859-11' => 'ISO-8859-11 (' . $this->app->gettext('thai') . ')',\n            'ISO-8859-13' => 'ISO-8859-13 (' . $this->app->gettext('baltic') . ')',\n            'ISO-8859-14' => 'ISO-8859-14 (' . $this->app->gettext('celtic') . ')',\n            'ISO-8859-15' => 'ISO-8859-15 (' . $this->app->gettext('westerneuropean') . ')',\n            'ISO-8859-16' => 'ISO-8859-16 (' . $this->app->gettext('southeasterneuropean') . ')',\n            'WINDOWS-1250' => 'Windows-1250 (' . $this->app->gettext('easterneuropean') . ')',\n            'WINDOWS-1251' => 'Windows-1251 (' . $this->app->gettext('cyrillic') . ')',\n            'WINDOWS-1252' => 'Windows-1252 (' . $this->app->gettext('westerneuropean') . ')',\n            'WINDOWS-1253' => 'Windows-1253 (' . $this->app->gettext('greek') . ')',\n            'WINDOWS-1254' => 'Windows-1254 (' . $this->app->gettext('turkish') . ')',\n            'WINDOWS-1255' => 'Windows-1255 (' . $this->app->gettext('hebrew') . ')',\n            'WINDOWS-1256' => 'Windows-1256 (' . $this->app->gettext('arabic') . ')',\n            'WINDOWS-1257' => 'Windows-1257 (' . $this->app->gettext('baltic') . ')',\n            'WINDOWS-1258' => 'Windows-1258 (' . $this->app->gettext('vietnamese') . ')',\n            'ISO-2022-JP' => 'ISO-2022-JP (' . $this->app->gettext('japanese') . ')',\n            'ISO-2022-KR' => 'ISO-2022-KR (' . $this->app->gettext('korean') . ')',\n            'ISO-2022-CN' => 'ISO-2022-CN (' . $this->app->gettext('chinese') . ')',\n            'EUC-JP' => 'EUC-JP (' . $this->app->gettext('japanese') . ')',\n            'EUC-KR' => 'EUC-KR (' . $this->app->gettext('korean') . ')',\n            'EUC-CN' => 'EUC-CN (' . $this->app->gettext('chinese') . ')',\n            'BIG5' => 'BIG5 (' . $this->app->gettext('chinese') . ')',\n            'GB2312' => 'GB2312 (' . $this->app->gettext('chinese') . ')',\n            'KOI8-R' => 'KOI8-R (' . $this->app->gettext('cyrillic') . ')',\n        ];\n\n        if ($post = rcube_utils::get_input_string('_charset', rcube_utils::INPUT_POST)) {\n            $set = $post;\n        } elseif (!empty($attrib['selected'])) {\n            $set = $attrib['selected'];\n        } else {\n            $set = $this->get_charset();\n        }\n\n        $set = strtoupper($set);\n        if (!isset($charsets[$set]) && preg_match('/^[A-Z0-9-]+$/', $set)) {\n            $charsets[$set] = $set;\n        }\n\n        $select = new html_select($field_attrib);\n        $select->add(array_values($charsets), array_keys($charsets));\n\n        return $select->show($set);\n    }\n\n    /**\n     * Include content from config/about.<LANG>.html if available\n     */\n    protected function about_content($attrib)\n    {\n        $content = '';\n        $filenames = [\n            'about.' . $_SESSION['language'] . '.html',\n            'about.' . substr($_SESSION['language'], 0, 2) . '.html',\n            'about.html',\n        ];\n\n        foreach ($filenames as $file) {\n            $fn = RCUBE_CONFIG_DIR . $file;\n            if (is_readable($fn)) {\n                $content = file_get_contents($fn);\n                $content = $this->parse_conditions($content);\n                $content = $this->parse_xml($content);\n                break;\n            }\n        }\n\n        return $content;\n    }\n\n    /**\n     * Get logo URL for current template based on skin_logo config option\n     *\n     * @param string $type  Type of the logo to check for (e.g. 'print' or 'small')\n     *                      default is null (no special type)\n     * @param string $match (optional) 'all' = type, template or wildcard, 'template' = type or template\n     *                      Note: when type is specified matches are limited to type only unless $match is defined\n     *\n     * @return string|null image URL\n     */\n    protected function get_template_logo($type = null, $match = null)\n    {\n        $template_logo = null;\n\n        if ($logo = $this->config->get('skin_logo')) {\n            if (is_array($logo)) {\n                $template_names = [\n                    $this->skin_name . ':' . $this->template_name . '[' . $type . ']',\n                    $this->skin_name . ':' . $this->template_name,\n                    $this->skin_name . ':*[' . $type . ']',\n                    $this->skin_name . ':[' . $type . ']',\n                    $this->skin_name . ':*',\n                    '*:' . $this->template_name . '[' . $type . ']',\n                    '*:' . $this->template_name,\n                    '*:*[' . $type . ']',\n                    '*:[' . $type . ']',\n                    $this->template_name . '[' . $type . ']',\n                    $this->template_name,\n                    '*[' . $type . ']',\n                    '[' . $type . ']',\n                    '*',\n                ];\n\n                if (empty($type)) {\n                    // If no type provided then remove those options from the list\n                    $template_names = preg_grep('/\\]$/', $template_names, \\PREG_GREP_INVERT);\n                } elseif ($match === null) {\n                    // Type specified with no special matching requirements so remove all none type specific options from the list\n                    $template_names = preg_grep('/\\]$/', $template_names);\n                }\n\n                if ($match == 'template') {\n                    // Match only specific type or template name\n                    $template_names = preg_grep('/\\*$/', $template_names, \\PREG_GREP_INVERT);\n                }\n\n                foreach ($template_names as $key) {\n                    if (isset($logo[$key])) {\n                        $template_logo = $logo[$key];\n                        break;\n                    }\n                }\n            } elseif ($type != 'link') {\n                $template_logo = $logo;\n            }\n        }\n\n        return $template_logo;\n    }\n}\n", "patch": "@@ -514,10 +514,10 @@ public function write($template = '')\n         // write all javascript commands\n         $this->add_script($commands, 'head_top');\n \n-        // send clickjacking protection headers\n+        // allow (legal) iframe content to be loaded\n         $iframe = $this->framed || $this->env['framed'];\n-        if (!headers_sent() && ($xframe = $this->app->config->get('x_frame_options', 'sameorigin'))) {\n-            header('X-Frame-Options: ' . ($iframe && $xframe == 'deny' ? 'sameorigin' : $xframe));\n+        if (!headers_sent() && $iframe && $this->app->config->get('x_frame_options', 'sameorigin') === 'deny') {\n+            header('X-Frame-Options: sameorigin', true);\n         }\n \n         // call super method", "file_path": "files/2016_8\\23", "file_language": "php", "file_name": "program/include/rcmail_output_html.php", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/699af1e5206ed9114322adaa3c25c1c969640a53/program/js/app.js", "code": "/**\n * Roundcube Webmail Client Script\n *\n * This file is part of the Roundcube Webmail client\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (C) 2005-2014, The Roundcube Dev Team\n * Copyright (C) 2011-2014, Kolab Systems AG\n *\n * The JavaScript code in this page is free software: you can\n * redistribute it and/or modify it under the terms of the GNU\n * General Public License (GNU GPL) as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option)\n * any later version.  The code is distributed WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.\n *\n * As additional permission under GNU GPL version 3 section 7, you\n * may distribute non-source (e.g., minimized or compacted) forms of\n * that code without the copy of the GNU GPL normally required by\n * section 4, provided you include this license notice and a URL\n * through which recipients can access the Corresponding Source.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n *\n * @author Thomas Bruederli <roundcube@gmail.com>\n * @author Aleksander 'A.L.E.C' Machniak <alec@alec.pl>\n * @author Charles McNulty <charles@charlesmcnulty.com>\n *\n * @requires jquery.js, common.js, list.js\n */\n\nfunction rcube_webmail()\n{\n  this.labels = {};\n  this.buttons = {};\n  this.buttons_sel = {};\n  this.gui_objects = {};\n  this.gui_containers = {};\n  this.commands = {};\n  this.command_handlers = {};\n  this.onloads = [];\n  this.messages = {};\n  this.group2expand = {};\n  this.http_request_jobs = {};\n  this.menu_stack = [];\n\n  // webmail client settings\n  this.dblclick_time = 500;\n  this.message_time = 5000;\n  this.identifier_expr = /[^0-9a-z_-]/gi;\n\n  // environment defaults\n  this.env = {\n    request_timeout: 180,  // seconds\n    draft_autosave: 0,     // seconds\n    comm_path: './',\n    recipients_separator: ',',\n    recipients_delimiter: ', ',\n    popup_width: 1150,\n    popup_width_small: 900\n  };\n\n  // create protected reference to myself\n  this.ref = 'rcmail';\n  var ref = this;\n\n  // set jQuery ajax options\n  $.ajaxSetup({\n    cache: false,\n    timeout: this.env.request_timeout * 1000,\n    error: function(request, status, err){ ref.http_error(request, status, err); },\n    beforeSend: function(xmlhttp){ xmlhttp.setRequestHeader('X-Roundcube-Request', ref.env.request_token); }\n  });\n\n  // unload fix\n  $(window).bind('beforeunload', function() { ref.unload = true; });\n\n  // set environment variable(s)\n  this.set_env = function(p, value)\n  {\n    if (p != null && typeof p === 'object' && !value)\n      for (var n in p)\n        this.env[n] = p[n];\n    else\n      this.env[p] = value;\n  };\n\n  // add a localized label to the client environment\n  this.add_label = function(p, value)\n  {\n    if (typeof p == 'string')\n      this.labels[p] = value;\n    else if (typeof p == 'object')\n      $.extend(this.labels, p);\n  };\n\n  // add a button to the button list\n  this.register_button = function(command, id, type, act, sel, over)\n  {\n    var button_prop = {id:id, type:type};\n\n    if (act) button_prop.act = act;\n    if (sel) button_prop.sel = sel;\n    if (over) button_prop.over = over;\n\n    if (!this.buttons[command])\n      this.buttons[command] = [];\n\n    this.buttons[command].push(button_prop);\n\n    if (this.loaded)\n      init_button(command, button_prop);\n  };\n\n  // register a specific gui object\n  this.gui_object = function(name, id)\n  {\n    this.gui_objects[name] = this.loaded ? rcube_find_object(id) : id;\n  };\n\n  // register a container object\n  this.gui_container = function(name, id)\n  {\n    this.gui_containers[name] = id;\n  };\n\n  // add a GUI element (html node) to a specified container\n  this.add_element = function(elm, container)\n  {\n    if (this.gui_containers[container] && this.gui_containers[container].jquery)\n      this.gui_containers[container].append(elm);\n  };\n\n  // register an external handler for a certain command\n  this.register_command = function(command, callback, enable)\n  {\n    this.command_handlers[command] = callback;\n\n    if (enable)\n      this.enable_command(command, true);\n  };\n\n  // execute the given script on load\n  this.add_onload = function(f)\n  {\n    this.onloads.push(f);\n  };\n\n  // initialize webmail client\n  this.init = function()\n  {\n    var n;\n    this.task = this.env.task;\n\n    // check browser capabilities (never use version checks here)\n    if (this.env.server_error != 409 && (!bw.dom || !bw.xmlhttp_test())) {\n      this.goto_url('error', '_code=0x199');\n      return;\n    }\n\n    if (!this.env.blankpage)\n      this.env.blankpage = this.assets_path('program/resources/blank.gif');\n\n    // find all registered gui containers\n    for (n in this.gui_containers)\n      this.gui_containers[n] = $('#'+this.gui_containers[n]);\n\n    // find all registered gui objects\n    for (n in this.gui_objects)\n      this.gui_objects[n] = rcube_find_object(this.gui_objects[n]);\n\n    // clickjacking protection\n    if (this.env.x_frame_options) {\n      try {\n        // bust frame if not allowed\n        if (this.env.x_frame_options == 'deny' && top.location.href != self.location.href)\n          top.location.href = self.location.href;\n        else if (top.location.hostname != self.location.hostname)\n          throw 1;\n      } catch (e) {\n        // possible clickjacking attack: disable all form elements\n        $('form').each(function(){ ref.lock_form(this, true); });\n        this.display_message(\"Blocked: possible clickjacking attack!\", 'error');\n        return;\n      }\n    }\n\n    // init registered buttons\n    this.init_buttons();\n\n    // tell parent window that this frame is loaded\n    if (this.is_framed()) {\n      parent.rcmail.set_busy(false, null, parent.rcmail.env.frame_lock);\n      parent.rcmail.env.frame_lock = null;\n    }\n\n    // enable general commands\n    this.enable_command('close', 'logout', 'mail', 'addressbook', 'settings', 'save-pref',\n      'compose', 'undo', 'about', 'switch-task', 'menu-open', 'menu-close', 'menu-save', true);\n\n    // set active task button\n    this.set_button(this.task, 'sel');\n\n    if (this.env.permaurl)\n      this.enable_command('permaurl', 'extwin', true);\n\n    switch (this.task) {\n\n      case 'mail':\n        // enable mail commands\n        this.enable_command('list', 'checkmail', 'add-contact', 'search', 'reset-search', 'collapse-folder', 'import-messages', true);\n\n        if (this.gui_objects.messagelist) {\n          this.message_list = new rcube_list_widget(this.gui_objects.messagelist, {\n            multiselect:true, multiexpand:true, draggable:true, keyboard:true,\n            column_movable:this.env.col_movable, dblclick_time:this.dblclick_time\n            });\n          this.message_list\n            .addEventListener('initrow', function(o) { ref.init_message_row(o); })\n            .addEventListener('dblclick', function(o) { ref.msglist_dbl_click(o); })\n            .addEventListener('click', function(o) { ref.msglist_click(o); })\n            .addEventListener('keypress', function(o) { ref.msglist_keypress(o); })\n            .addEventListener('select', function(o) { ref.msglist_select(o); })\n            .addEventListener('dragstart', function(o) { ref.drag_start(o); })\n            .addEventListener('dragmove', function(e) { ref.drag_move(e); })\n            .addEventListener('dragend', function(e) { ref.drag_end(e); })\n            .addEventListener('expandcollapse', function(o) { ref.msglist_expand(o); })\n            .addEventListener('column_replace', function(o) { ref.msglist_set_coltypes(o); })\n            .addEventListener('listupdate', function(o) { ref.triggerEvent('listupdate', o); })\n            .init();\n\n          // TODO: this should go into the list-widget code\n          $(this.message_list.thead).on('click', 'a.sortcol', function(e){\n            return ref.command('sort', $(this).attr('rel'), this);\n          });\n\n          this.enable_command('toggle_status', 'toggle_flag', 'sort', true);\n          this.enable_command('set-listmode', this.env.threads && !this.is_multifolder_listing());\n\n          // load messages\n          this.command('list');\n\n          $(this.gui_objects.qsearchbox).val(this.env.search_text).focusin(function() { ref.message_list.blur(); });\n        }\n\n        this.set_button_titles();\n\n        this.env.message_commands = ['show', 'reply', 'reply-all', 'reply-list',\n          'move', 'copy', 'delete', 'open', 'mark', 'edit', 'viewsource',\n          'print', 'load-attachment', 'download-attachment', 'show-headers', 'hide-headers', 'download',\n          'forward', 'forward-inline', 'forward-attachment', 'change-format'];\n\n        if (this.env.action == 'show' || this.env.action == 'preview') {\n          this.enable_command(this.env.message_commands, this.env.uid);\n          this.enable_command('reply-list', this.env.list_post);\n\n          if (this.env.action == 'show') {\n            this.http_request('pagenav', {_uid: this.env.uid, _mbox: this.env.mailbox, _search: this.env.search_request},\n              this.display_message('', 'loading'));\n          }\n\n          if (this.env.blockedobjects) {\n            if (this.gui_objects.remoteobjectsmsg)\n              this.gui_objects.remoteobjectsmsg.style.display = 'block';\n            this.enable_command('load-images', 'always-load', true);\n          }\n\n          // make preview/message frame visible\n          if (this.env.action == 'preview' && this.is_framed()) {\n            this.enable_command('compose', 'add-contact', false);\n            parent.rcmail.show_contentframe(true);\n          }\n        }\n        else if (this.env.action == 'compose') {\n          this.env.address_group_stack = [];\n          this.env.compose_commands = ['send-attachment', 'remove-attachment', 'send', 'cancel',\n            'toggle-editor', 'list-adresses', 'pushgroup', 'search', 'reset-search', 'extwin',\n            'insert-response', 'save-response', 'menu-open', 'menu-close'];\n\n          if (this.env.drafts_mailbox)\n            this.env.compose_commands.push('savedraft')\n\n          this.enable_command(this.env.compose_commands, 'identities', 'responses', true);\n\n          // add more commands (not enabled)\n          $.merge(this.env.compose_commands, ['add-recipient', 'firstpage', 'previouspage', 'nextpage', 'lastpage']);\n\n          if (window.googie) {\n            this.env.editor_config.spellchecker = googie;\n            this.env.editor_config.spellcheck_observer = function(s) { ref.spellcheck_state(); };\n\n            this.env.compose_commands.push('spellcheck')\n            this.enable_command('spellcheck', true);\n          }\n\n          // initialize HTML editor\n          this.editor_init(this.env.editor_config, this.env.composebody);\n\n          // init canned response functions\n          if (this.gui_objects.responseslist) {\n            $('a.insertresponse', this.gui_objects.responseslist)\n              .attr('unselectable', 'on')\n              .mousedown(function(e){ return rcube_event.cancel(e); })\n              .bind('mouseup keypress', function(e){\n                if (e.type == 'mouseup' || rcube_event.get_keycode(e) == 13) {\n                  ref.command('insert-response', $(this).attr('rel'));\n                  $(document.body).trigger('mouseup');  // hides the menu\n                  return rcube_event.cancel(e);\n                }\n              });\n\n            // avoid textarea loosing focus when hitting the save-response button/link\n            $.each(this.buttons['save-response'] || [], function (i, v) {\n              $('#' + v.id).mousedown(function(e){ return rcube_event.cancel(e); })\n            });\n          }\n\n          // init message compose form\n          this.init_messageform();\n        }\n        else if (this.env.action == 'get')\n          this.enable_command('download', 'print', true);\n        // show printing dialog\n        else if (this.env.action == 'print' && this.env.uid) {\n          this.print_dialog();\n        }\n\n        // get unread count for each mailbox\n        if (this.gui_objects.mailboxlist) {\n          this.env.unread_counts = {};\n          this.gui_objects.folderlist = this.gui_objects.mailboxlist;\n          this.http_request('getunread');\n        }\n\n        // init address book widget\n        if (this.gui_objects.contactslist) {\n          this.contact_list = new rcube_list_widget(this.gui_objects.contactslist,\n            { multiselect:true, draggable:false, keyboard:true });\n          this.contact_list\n            .addEventListener('initrow', function(o) { ref.triggerEvent('insertrow', { cid:o.uid, row:o }); })\n            .addEventListener('select', function(o) { ref.compose_recipient_select(o); })\n            .addEventListener('dblclick', function(o) { ref.compose_add_recipient(); })\n            .addEventListener('keypress', function(o) {\n              if (o.key_pressed == o.ENTER_KEY) {\n                if (!ref.compose_add_recipient()) {\n                  // execute link action on <enter> if not a recipient entry\n                  if (o.last_selected && String(o.last_selected).charAt(0) == 'G') {\n                    $(o.rows[o.last_selected].obj).find('a').first().click();\n                  }\n                }\n              }\n            })\n            .init();\n\n          // remember last focused address field\n          $('#_to,#_cc,#_bcc').focus(function() { ref.env.focused_field = this; });\n        }\n\n        if (this.gui_objects.addressbookslist) {\n          this.gui_objects.folderlist = this.gui_objects.addressbookslist;\n          this.enable_command('list-adresses', true);\n        }\n\n        // ask user to send MDN\n        if (this.env.mdn_request && this.env.uid) {\n          var postact = 'sendmdn',\n            postdata = {_uid: this.env.uid, _mbox: this.env.mailbox};\n          if (!confirm(this.get_label('mdnrequest'))) {\n            postdata._flag = 'mdnsent';\n            postact = 'mark';\n          }\n          this.http_post(postact, postdata);\n        }\n\n        // detect browser capabilities\n        if (!this.is_framed() && !this.env.extwin)\n          this.browser_capabilities_check();\n\n        break;\n\n      case 'addressbook':\n        this.env.address_group_stack = [];\n\n        if (this.gui_objects.folderlist)\n          this.env.contactfolders = $.extend($.extend({}, this.env.address_sources), this.env.contactgroups);\n\n        this.enable_command('add', 'import', this.env.writable_source);\n        this.enable_command('list', 'listgroup', 'pushgroup', 'popgroup', 'listsearch', 'search', 'reset-search', 'advanced-search', true);\n\n        if (this.gui_objects.contactslist) {\n          this.contact_list = new rcube_list_widget(this.gui_objects.contactslist,\n            {multiselect:true, draggable:this.gui_objects.folderlist?true:false, keyboard:true});\n          this.contact_list\n            .addEventListener('initrow', function(o) { ref.triggerEvent('insertrow', { cid:o.uid, row:o }); })\n            .addEventListener('keypress', function(o) { ref.contactlist_keypress(o); })\n            .addEventListener('select', function(o) { ref.contactlist_select(o); })\n            .addEventListener('dragstart', function(o) { ref.drag_start(o); })\n            .addEventListener('dragmove', function(e) { ref.drag_move(e); })\n            .addEventListener('dragend', function(e) { ref.drag_end(e); })\n            .init();\n\n          $(this.gui_objects.qsearchbox).focusin(function() { ref.contact_list.blur(); });\n\n          this.update_group_commands();\n          this.command('list');\n        }\n\n        if (this.gui_objects.savedsearchlist) {\n          this.savedsearchlist = new rcube_treelist_widget(this.gui_objects.savedsearchlist, {\n            id_prefix: 'rcmli',\n            id_encode: this.html_identifier_encode,\n            id_decode: this.html_identifier_decode\n          });\n\n          this.savedsearchlist.addEventListener('select', function(node) {\n            ref.triggerEvent('selectfolder', { folder:node.id, prefix:'rcmli' }); });\n        }\n\n        this.set_page_buttons();\n\n        if (this.env.cid) {\n          this.enable_command('show', 'edit', true);\n          // register handlers for group assignment via checkboxes\n          if (this.gui_objects.editform) {\n            $('input.groupmember').change(function() {\n              ref.group_member_change(this.checked ? 'add' : 'del', ref.env.cid, ref.env.source, this.value);\n            });\n          }\n        }\n\n        if (this.gui_objects.editform) {\n          this.enable_command('save', true);\n          if (this.env.action == 'add' || this.env.action == 'edit' || this.env.action == 'search')\n              this.init_contact_form();\n        }\n        else if (this.env.action == 'print') {\n          this.print_dialog();\n        }\n\n        break;\n\n      case 'settings':\n        this.enable_command('preferences', 'identities', 'responses', 'save', 'folders', true);\n\n        if (this.env.action == 'identities') {\n          this.enable_command('add', this.env.identities_level < 2);\n        }\n        else if (this.env.action == 'edit-identity' || this.env.action == 'add-identity') {\n          this.enable_command('save', 'edit', 'toggle-editor', true);\n          this.enable_command('delete', this.env.identities_level < 2);\n\n          // initialize HTML editor\n          this.editor_init(this.env.editor_config, 'rcmfd_signature');\n        }\n        else if (this.env.action == 'folders') {\n          this.enable_command('subscribe', 'unsubscribe', 'create-folder', 'rename-folder', true);\n        }\n        else if (this.env.action == 'edit-folder' && this.gui_objects.editform) {\n          this.enable_command('save', 'folder-size', true);\n          parent.rcmail.env.exists = this.env.messagecount;\n          parent.rcmail.enable_command('purge', this.env.messagecount);\n        }\n        else if (this.env.action == 'responses') {\n          this.enable_command('add', true);\n        }\n\n        if (this.gui_objects.identitieslist) {\n          this.identity_list = new rcube_list_widget(this.gui_objects.identitieslist,\n            {multiselect:false, draggable:false, keyboard:true});\n          this.identity_list\n            .addEventListener('select', function(o) { ref.identity_select(o); })\n            .addEventListener('keypress', function(o) {\n              if (o.key_pressed == o.ENTER_KEY) {\n                ref.identity_select(o);\n              }\n            })\n            .init()\n            .focus();\n        }\n        else if (this.gui_objects.sectionslist) {\n          this.sections_list = new rcube_list_widget(this.gui_objects.sectionslist, {multiselect:false, draggable:false, keyboard:true});\n          this.sections_list\n            .addEventListener('select', function(o) { ref.section_select(o); })\n            .addEventListener('keypress', function(o) { if (o.key_pressed == o.ENTER_KEY) ref.section_select(o); })\n            .init()\n            .focus();\n        }\n        else if (this.gui_objects.subscriptionlist) {\n          this.init_subscription_list();\n        }\n        else if (this.gui_objects.responseslist) {\n          this.responses_list = new rcube_list_widget(this.gui_objects.responseslist, {multiselect:false, draggable:false, keyboard:true});\n          this.responses_list\n            .addEventListener('select', function(list) {\n              var win, id = list.get_single_selection();\n              ref.enable_command('delete', !!id && $.inArray(id, ref.env.readonly_responses) < 0);\n              if (id && (win = ref.get_frame_window(ref.env.contentframe))) {\n                ref.set_busy(true);\n                ref.location_href({ _action:'edit-response', _key:id, _framed:1 }, win);\n              }\n            })\n            .init()\n            .focus();\n        }\n\n        break;\n\n      case 'login':\n        var input_user = $('#rcmloginuser');\n        input_user.bind('keyup', function(e){ return ref.login_user_keyup(e); });\n\n        if (input_user.val() == '')\n          input_user.focus();\n        else\n          $('#rcmloginpwd').focus();\n\n        // detect client timezone\n        if (window.jstz) {\n          var timezone = jstz.determine();\n          if (timezone.name())\n            $('#rcmlogintz').val(timezone.name());\n        }\n        else {\n          $('#rcmlogintz').val(new Date().getStdTimezoneOffset() / -60);\n        }\n\n        // display 'loading' message on form submit, lock submit button\n        $('form').submit(function () {\n          $('input[type=submit]', this).prop('disabled', true);\n          ref.clear_messages();\n          ref.display_message('', 'loading');\n        });\n\n        this.enable_command('login', true);\n        break;\n    }\n\n    // select first input field in an edit form\n    if (this.gui_objects.editform)\n      $(\"input,select,textarea\", this.gui_objects.editform)\n        .not(':hidden').not(':disabled').first().select().focus();\n\n    // unset contentframe variable if preview_pane is enabled\n    if (this.env.contentframe && !$('#' + this.env.contentframe).is(':visible'))\n      this.env.contentframe = null;\n\n    // prevent from form submit with Enter key in file input fields\n    if (bw.ie)\n      $('input[type=file]').keydown(function(e) { if (e.keyCode == '13') e.preventDefault(); });\n\n    // flag object as complete\n    this.loaded = true;\n    this.env.lastrefresh = new Date();\n\n    // show message\n    if (this.pending_message)\n      this.display_message.apply(this, this.pending_message);\n\n    // init treelist widget\n    if (this.gui_objects.folderlist && window.rcube_treelist_widget) {\n      this.treelist = new rcube_treelist_widget(this.gui_objects.folderlist, {\n          selectable: true,\n          id_prefix: 'rcmli',\n          parent_focus: true,\n          id_encode: this.html_identifier_encode,\n          id_decode: this.html_identifier_decode,\n          check_droptarget: function(node) { return !node.virtual && ref.check_droptarget(node.id) }\n      });\n\n      this.treelist\n        .addEventListener('collapse', function(node) { ref.folder_collapsed(node) })\n        .addEventListener('expand', function(node) { ref.folder_collapsed(node) })\n        .addEventListener('beforeselect', function(node) { return !ref.busy; })\n        .addEventListener('select', function(node) { ref.triggerEvent('selectfolder', { folder:node.id, prefix:'rcmli' }) });\n    }\n\n    // activate html5 file drop feature (if browser supports it and if configured)\n    if (this.gui_objects.filedrop && this.env.filedrop && ((window.XMLHttpRequest && XMLHttpRequest.prototype && XMLHttpRequest.prototype.sendAsBinary) || window.FormData)) {\n      $(document.body).bind('dragover dragleave drop', function(e){ return ref.document_drag_hover(e, e.type == 'dragover'); });\n      $(this.gui_objects.filedrop).addClass('droptarget')\n        .bind('dragover dragleave', function(e){ return ref.file_drag_hover(e, e.type == 'dragover'); })\n        .get(0).addEventListener('drop', function(e){ return ref.file_dropped(e); }, false);\n    }\n\n    // catch document (and iframe) mouse clicks\n    var body_mouseup = function(e){ return ref.doc_mouse_up(e); };\n    $(document.body)\n      .bind('mouseup', body_mouseup)\n      .bind('keydown', function(e){ return ref.doc_keypress(e); });\n\n    $('iframe').load(function(e) {\n        try { $(this.contentDocument || this.contentWindow).on('mouseup', body_mouseup);  }\n        catch (e) {/* catch possible \"Permission denied\" error in IE */ }\n      })\n      .contents().on('mouseup', body_mouseup);\n\n    // trigger init event hook\n    this.triggerEvent('init', { task:this.task, action:this.env.action });\n\n    // execute all foreign onload scripts\n    // @deprecated\n    for (n in this.onloads) {\n      if (typeof this.onloads[n] === 'string')\n        eval(this.onloads[n]);\n      else if (typeof this.onloads[n] === 'function')\n        this.onloads[n]();\n    }\n\n    // start keep-alive and refresh intervals\n    this.start_refresh();\n    this.start_keepalive();\n  };\n\n  this.log = function(msg)\n  {\n    if (window.console && console.log)\n      console.log(msg);\n  };\n\n  /*********************************************************/\n  /*********       client command interface        *********/\n  /*********************************************************/\n\n  // execute a specific command on the web client\n  this.command = function(command, props, obj, event)\n  {\n    var ret, uid, cid, url, flag, aborted = false;\n\n    if (obj && obj.blur && !(event && rcube_event.is_keyboard(event)))\n      obj.blur();\n\n    // do nothing if interface is locked by another command\n    // with exception for searching reset and menu\n    if (this.busy && !(command == 'reset-search' && this.last_command == 'search') && !command.match(/^menu-/))\n      return false;\n\n    // let the browser handle this click (shift/ctrl usually opens the link in a new window/tab)\n    if ((obj && obj.href && String(obj.href).indexOf('#') < 0) && rcube_event.get_modifier(event)) {\n      return true;\n    }\n\n    // command not supported or allowed\n    if (!this.commands[command]) {\n      // pass command to parent window\n      if (this.is_framed())\n        parent.rcmail.command(command, props);\n\n      return false;\n    }\n\n    // check input before leaving compose step\n    if (this.task == 'mail' && this.env.action == 'compose' && !this.env.server_error && command != 'save-pref'\n      && $.inArray(command, this.env.compose_commands) < 0\n    ) {\n      if (!this.env.is_sent && this.cmp_hash != this.compose_field_hash() && !confirm(this.get_label('notsentwarning')))\n        return false;\n\n      // remove copy from local storage if compose screen is left intentionally\n      this.remove_compose_data(this.env.compose_id);\n      this.compose_skip_unsavedcheck = true;\n    }\n\n    this.last_command = command;\n\n    // process external commands\n    if (typeof this.command_handlers[command] === 'function') {\n      ret = this.command_handlers[command](props, obj, event);\n      return ret !== undefined ? ret : (obj ? false : true);\n    }\n    else if (typeof this.command_handlers[command] === 'string') {\n      ret = window[this.command_handlers[command]](props, obj, event);\n      return ret !== undefined ? ret : (obj ? false : true);\n    }\n\n    // trigger plugin hooks\n    this.triggerEvent('actionbefore', {props:props, action:command, originalEvent:event});\n    ret = this.triggerEvent('before'+command, props || event);\n    if (ret !== undefined) {\n      // abort if one of the handlers returned false\n      if (ret === false)\n        return false;\n      else\n        props = ret;\n    }\n\n    ret = undefined;\n\n    // process internal command\n    switch (command) {\n\n      case 'login':\n        if (this.gui_objects.loginform)\n          this.gui_objects.loginform.submit();\n        break;\n\n      // commands to switch task\n      case 'logout':\n      case 'mail':\n      case 'addressbook':\n      case 'settings':\n        this.switch_task(command);\n        break;\n\n      case 'about':\n        this.redirect('?_task=settings&_action=about', false);\n        break;\n\n      case 'permaurl':\n        if (obj && obj.href && obj.target)\n          return true;\n        else if (this.env.permaurl)\n          parent.location.href = this.env.permaurl;\n        break;\n\n      case 'extwin':\n        if (this.env.action == 'compose') {\n          var form = this.gui_objects.messageform,\n            win = this.open_window('');\n\n          if (win) {\n            this.save_compose_form_local();\n            this.compose_skip_unsavedcheck = true;\n            $(\"input[name='_action']\", form).val('compose');\n            form.action = this.url('mail/compose', { _id: this.env.compose_id, _extwin: 1 });\n            form.target = win.name;\n            form.submit();\n          }\n        }\n        else {\n          this.open_window(this.env.permaurl, true);\n        }\n        break;\n\n      case 'change-format':\n        url = this.env.permaurl + '&_format=' + props;\n\n        if (this.env.action == 'preview')\n          url = url.replace(/_action=show/, '_action=preview') + '&_framed=1';\n        if (this.env.extwin)\n          url += '&_extwin=1';\n\n        location.href = url;\n        break;\n\n      case 'menu-open':\n        if (props && props.menu == 'attachmentmenu') {\n          var mimetype = this.env.attachments[props.id];\n          this.enable_command('open-attachment', mimetype && this.env.mimetypes && $.inArray(mimetype, this.env.mimetypes) >= 0);\n        }\n        this.show_menu(props, props.show || undefined, event);\n        break;\n\n      case 'menu-close':\n        this.hide_menu(props, event);\n        break;\n\n      case 'menu-save':\n        this.triggerEvent(command, {props:props, originalEvent:event});\n        return false;\n\n      case 'open':\n        if (uid = this.get_single_uid()) {\n          obj.href = this.url('show', this.params_from_uid(uid));\n          return true;\n        }\n        break;\n\n      case 'close':\n        if (this.env.extwin)\n          window.close();\n        break;\n\n      case 'list':\n        if (props && props != '') {\n          this.reset_qsearch(true);\n        }\n        if (this.env.action == 'compose' && this.env.extwin) {\n          window.close();\n        }\n        else if (this.task == 'mail') {\n          this.list_mailbox(props);\n          this.set_button_titles();\n        }\n        else if (this.task == 'addressbook')\n          this.list_contacts(props);\n        break;\n\n      case 'set-listmode':\n        this.set_list_options(null, undefined, undefined, props == 'threads' ? 1 : 0);\n        break;\n\n      case 'sort':\n        var sort_order = this.env.sort_order,\n          sort_col = !this.env.disabled_sort_col ? props : this.env.sort_col;\n\n        if (!this.env.disabled_sort_order)\n          sort_order = this.env.sort_col == sort_col && sort_order == 'ASC' ? 'DESC' : 'ASC';\n\n        // set table header and update env\n        this.set_list_sorting(sort_col, sort_order);\n\n        // reload message list\n        this.list_mailbox('', '', sort_col+'_'+sort_order);\n        break;\n\n      case 'nextpage':\n        this.list_page('next');\n        break;\n\n      case 'lastpage':\n        this.list_page('last');\n        break;\n\n      case 'previouspage':\n        this.list_page('prev');\n        break;\n\n      case 'firstpage':\n        this.list_page('first');\n        break;\n\n      case 'expunge':\n        if (this.env.exists)\n          this.expunge_mailbox(this.env.mailbox);\n        break;\n\n      case 'purge':\n      case 'empty-mailbox':\n        if (this.env.exists)\n          this.purge_mailbox(this.env.mailbox);\n        break;\n\n      // common commands used in multiple tasks\n      case 'show':\n        if (this.task == 'mail') {\n          uid = this.get_single_uid();\n          if (uid && (!this.env.uid || uid != this.env.uid)) {\n            if (this.env.mailbox == this.env.drafts_mailbox)\n              this.open_compose_step({ _draft_uid: uid, _mbox: this.env.mailbox });\n            else\n              this.show_message(uid);\n          }\n        }\n        else if (this.task == 'addressbook') {\n          cid = props ? props : this.get_single_cid();\n          if (cid && !(this.env.action == 'show' && cid == this.env.cid))\n            this.load_contact(cid, 'show');\n        }\n        break;\n\n      case 'add':\n        if (this.task == 'addressbook')\n          this.load_contact(0, 'add');\n        else if (this.task == 'settings' && this.env.action == 'responses') {\n          var frame;\n          if ((frame = this.get_frame_window(this.env.contentframe))) {\n            this.set_busy(true);\n            this.location_href({ _action:'add-response', _framed:1 }, frame);\n          }\n        }\n        else if (this.task == 'settings') {\n          this.identity_list.clear_selection();\n          this.load_identity(0, 'add-identity');\n        }\n        break;\n\n      case 'edit':\n        if (this.task == 'addressbook' && (cid = this.get_single_cid()))\n          this.load_contact(cid, 'edit');\n        else if (this.task == 'settings' && props)\n          this.load_identity(props, 'edit-identity');\n        else if (this.task == 'mail' && (uid = this.get_single_uid())) {\n          url = { _mbox: this.get_message_mailbox(uid) };\n          url[this.env.mailbox == this.env.drafts_mailbox && props != 'new' ? '_draft_uid' : '_uid'] = uid;\n          this.open_compose_step(url);\n        }\n        break;\n\n      case 'save':\n        var input, form = this.gui_objects.editform;\n        if (form) {\n          // adv. search\n          if (this.env.action == 'search') {\n          }\n          // user prefs\n          else if ((input = $(\"input[name='_pagesize']\", form)) && input.length && isNaN(parseInt(input.val()))) {\n            alert(this.get_label('nopagesizewarning'));\n            input.focus();\n            break;\n          }\n          // contacts/identities\n          else {\n            // reload form\n            if (props == 'reload') {\n              form.action += '&_reload=1';\n            }\n            else if (this.task == 'settings' && (this.env.identities_level % 2) == 0  &&\n              (input = $(\"input[name='_email']\", form)) && input.length && !rcube_check_email(input.val())\n            ) {\n              alert(this.get_label('noemailwarning'));\n              input.focus();\n              break;\n            }\n\n            // clear empty input fields\n            $('input.placeholder').each(function(){ if (this.value == this._placeholder) this.value = ''; });\n          }\n\n          // add selected source (on the list)\n          if (parent.rcmail && parent.rcmail.env.source)\n            form.action = this.add_url(form.action, '_orig_source', parent.rcmail.env.source);\n\n          form.submit();\n        }\n        break;\n\n      case 'delete':\n        // mail task\n        if (this.task == 'mail')\n          this.delete_messages(event);\n        // addressbook task\n        else if (this.task == 'addressbook')\n          this.delete_contacts();\n        // settings: canned response\n        else if (this.task == 'settings' && this.env.action == 'responses')\n          this.delete_response();\n        // settings: user identities\n        else if (this.task == 'settings')\n          this.delete_identity();\n        break;\n\n      // mail task commands\n      case 'move':\n      case 'moveto': // deprecated\n        if (this.task == 'mail')\n          this.move_messages(props, event);\n        else if (this.task == 'addressbook')\n          this.move_contacts(props);\n        break;\n\n      case 'copy':\n        if (this.task == 'mail')\n          this.copy_messages(props, event);\n        else if (this.task == 'addressbook')\n          this.copy_contacts(props);\n        break;\n\n      case 'mark':\n        if (props)\n          this.mark_message(props);\n        break;\n\n      case 'toggle_status':\n      case 'toggle_flag':\n        flag = command == 'toggle_flag' ? 'flagged' : 'read';\n\n        if (uid = props) {\n          // toggle flagged/unflagged\n          if (flag == 'flagged') {\n            if (this.message_list.rows[uid].flagged)\n              flag = 'unflagged';\n          }\n          // toggle read/unread\n          else if (this.message_list.rows[uid].deleted)\n            flag = 'undelete';\n          else if (!this.message_list.rows[uid].unread)\n            flag = 'unread';\n\n          this.mark_message(flag, uid);\n        }\n\n        break;\n\n      case 'always-load':\n        if (this.env.uid && this.env.sender) {\n          this.add_contact(this.env.sender);\n          setTimeout(function(){ ref.command('load-images'); }, 300);\n          break;\n        }\n\n      case 'load-images':\n        if (this.env.uid)\n          this.show_message(this.env.uid, true, this.env.action=='preview');\n        break;\n\n      case 'load-attachment':\n      case 'open-attachment':\n      case 'download-attachment':\n        var qstring = '_mbox='+urlencode(this.env.mailbox)+'&_uid='+this.env.uid+'&_part='+props,\n          mimetype = this.env.attachments[props];\n\n        // open attachment in frame if it's of a supported mimetype\n        if (command != 'download-attachment' && mimetype && this.env.mimetypes && $.inArray(mimetype, this.env.mimetypes) >= 0) {\n          if (this.open_window(this.env.comm_path+'&_action=get&'+qstring+'&_frame=1'))\n            break;\n        }\n\n        this.goto_url('get', qstring+'&_download=1', false, true);\n        break;\n\n      case 'select-all':\n        this.select_all_mode = props ? false : true;\n        this.dummy_select = true; // prevent msg opening if there's only one msg on the list\n        if (props == 'invert')\n          this.message_list.invert_selection();\n        else\n          this.message_list.select_all(props == 'page' ? '' : props);\n        this.dummy_select = null;\n        break;\n\n      case 'select-none':\n        this.select_all_mode = false;\n        this.message_list.clear_selection();\n        break;\n\n      case 'expand-all':\n        this.env.autoexpand_threads = 1;\n        this.message_list.expand_all();\n        break;\n\n      case 'expand-unread':\n        this.env.autoexpand_threads = 2;\n        this.message_list.collapse_all();\n        this.expand_unread();\n        break;\n\n      case 'collapse-all':\n        this.env.autoexpand_threads = 0;\n        this.message_list.collapse_all();\n        break;\n\n      case 'nextmessage':\n        if (this.env.next_uid)\n          this.show_message(this.env.next_uid, false, this.env.action == 'preview');\n        break;\n\n      case 'lastmessage':\n        if (this.env.last_uid)\n          this.show_message(this.env.last_uid);\n        break;\n\n      case 'previousmessage':\n        if (this.env.prev_uid)\n          this.show_message(this.env.prev_uid, false, this.env.action == 'preview');\n        break;\n\n      case 'firstmessage':\n        if (this.env.first_uid)\n          this.show_message(this.env.first_uid);\n        break;\n\n      case 'compose':\n        url = {};\n\n        if (this.task == 'mail') {\n          url = {_mbox: this.env.mailbox, _search: this.env.search_request};\n          if (props)\n            url._to = props;\n        }\n        // modify url if we're in addressbook\n        else if (this.task == 'addressbook') {\n          // switch to mail compose step directly\n          if (props && props.indexOf('@') > 0) {\n            url._to = props;\n          }\n          else {\n            var a_cids = [];\n            // use contact id passed as command parameter\n            if (props)\n              a_cids.push(props);\n            // get selected contacts\n            else if (this.contact_list)\n              a_cids = this.contact_list.get_selection();\n\n            if (a_cids.length)\n              this.http_post('mailto', { _cid: a_cids.join(','), _source: this.env.source }, true);\n            else if (this.env.group)\n              this.http_post('mailto', { _gid: this.env.group, _source: this.env.source }, true);\n\n            break;\n          }\n        }\n        else if (props && typeof props == 'string') {\n          url._to = props;\n        }\n        else if (props && typeof props == 'object') {\n          $.extend(url, props);\n        }\n\n        this.open_compose_step(url);\n        break;\n\n      case 'spellcheck':\n        if (this.spellcheck_state()) {\n          this.editor.spellcheck_stop();\n        }\n        else {\n          this.editor.spellcheck_start();\n        }\n        break;\n\n      case 'savedraft':\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        // compose form did not change (and draft wasn't saved already)\n        if (this.env.draft_id && this.cmp_hash == this.compose_field_hash()) {\n          this.auto_save_start();\n          break;\n        }\n\n        this.submit_messageform(true);\n        break;\n\n      case 'send':\n        if (!props.nocheck && !this.env.is_sent && !this.check_compose_input(command))\n          break;\n\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        this.submit_messageform();\n        break;\n\n      case 'send-attachment':\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        if (!(flag = this.upload_file(props || this.gui_objects.uploadform, 'upload'))) {\n          if (flag !== false)\n            alert(this.get_label('selectimportfile'));\n          aborted = true;\n        }\n        break;\n\n      case 'insert-sig':\n        this.change_identity($(\"[name='_from']\")[0], true);\n        break;\n\n      case 'list-adresses':\n        this.list_contacts(props);\n        this.enable_command('add-recipient', false);\n        break;\n\n      case 'add-recipient':\n        this.compose_add_recipient(props);\n        break;\n\n      case 'reply-all':\n      case 'reply-list':\n      case 'reply':\n        if (uid = this.get_single_uid()) {\n          url = {_reply_uid: uid, _mbox: this.get_message_mailbox(uid), _search: this.env.search_request};\n          if (command == 'reply-all')\n            // do reply-list, when list is detected and popup menu wasn't used\n            url._all = (!props && this.env.reply_all_mode == 1 && this.commands['reply-list'] ? 'list' : 'all');\n          else if (command == 'reply-list')\n            url._all = 'list';\n\n          this.open_compose_step(url);\n        }\n        break;\n\n      case 'forward-attachment':\n      case 'forward-inline':\n      case 'forward':\n        var uids = this.env.uid ? [this.env.uid] : (this.message_list ? this.message_list.get_selection() : []);\n        if (uids.length) {\n          url = { _forward_uid: this.uids_to_list(uids), _mbox: this.env.mailbox, _search: this.env.search_request };\n          if (command == 'forward-attachment' || (!props && this.env.forward_attachment) || uids.length > 1)\n            url._attachment = 1;\n          this.open_compose_step(url);\n        }\n        break;\n\n      case 'print':\n        if (this.task == 'addressbook') {\n          if (uid = this.contact_list.get_single_selection()) {\n            url = '&_action=print&_cid=' + uid;\n            if (this.env.source)\n              url += '&_source=' + urlencode(this.env.source);\n            this.open_window(this.env.comm_path + url, true, true);\n          }\n        }\n        else if (this.env.action == 'get') {\n          this.gui_objects.messagepartframe.contentWindow.print();\n        }\n        else if (uid = this.get_single_uid()) {\n          url = this.url('print', this.params_from_uid(uid, {_safe: this.env.safemode ? 1 : 0}));\n          if (this.open_window(url, true, true)) {\n            if (this.env.action != 'show')\n              this.mark_message('read', uid);\n          }\n        }\n        break;\n\n      case 'viewsource':\n        if (uid = this.get_single_uid())\n          this.open_window(this.url('viewsource', this.params_from_uid(uid)), true, true);\n        break;\n\n      case 'download':\n        if (this.env.action == 'get') {\n          location.href = this.secure_url(location.href.replace(/_frame=/, '_download='));\n        }\n        else if (uid = this.get_single_uid()) {\n          this.goto_url('viewsource', this.params_from_uid(uid, {_save: 1}), false, true);\n        }\n        break;\n\n      // quicksearch\n      case 'search':\n        if (!props && this.gui_objects.qsearchbox)\n          props = this.gui_objects.qsearchbox.value;\n        if (props) {\n          this.qsearch(props);\n          break;\n        }\n\n      // reset quicksearch\n      case 'reset-search':\n        var n, s = this.env.search_request || this.env.qsearch;\n\n        this.reset_qsearch(true);\n        this.select_all_mode = false;\n\n        if (s && this.env.action == 'compose') {\n          if (this.contact_list)\n            this.list_contacts_clear();\n        }\n        else if (s && this.env.mailbox) {\n          this.list_mailbox(this.env.mailbox, 1);\n        }\n        else if (s && this.task == 'addressbook') {\n          if (this.env.source == '') {\n            for (n in this.env.address_sources) break;\n            this.env.source = n;\n            this.env.group = '';\n          }\n          this.list_contacts(this.env.source, this.env.group, 1);\n        }\n        break;\n\n      case 'pushgroup':\n        // add group ID to stack\n        this.env.address_group_stack.push(props.id);\n        if (obj && event)\n          rcube_event.cancel(event);\n\n      case 'listgroup':\n        this.reset_qsearch();\n        this.list_contacts(props.source, props.id);\n        break;\n\n      case 'popgroup':\n        if (this.env.address_group_stack.length > 1) {\n          this.env.address_group_stack.pop();\n          this.reset_qsearch();\n          this.list_contacts(props.source, this.env.address_group_stack[this.env.address_group_stack.length-1]);\n        }\n        break;\n\n      case 'import-messages':\n        var form = props || this.gui_objects.importform,\n          importlock = this.set_busy(true, 'importwait');\n\n        $('input[name=\"_unlock\"]', form).val(importlock);\n\n        if (!(flag = this.upload_file(form, 'import', importlock))) {\n          this.set_busy(false, null, importlock);\n          if (flag !== false)\n            alert(this.get_label('selectimportfile'));\n          aborted = true;\n        }\n        break;\n\n      case 'import':\n        if (this.env.action == 'import' && this.gui_objects.importform) {\n          var file = document.getElementById('rcmimportfile');\n          if (file && !file.value) {\n            alert(this.get_label('selectimportfile'));\n            aborted = true;\n            break;\n          }\n          this.gui_objects.importform.submit();\n          this.set_busy(true, 'importwait');\n          this.lock_form(this.gui_objects.importform, true);\n        }\n        else\n          this.goto_url('import', (this.env.source ? '_target='+urlencode(this.env.source)+'&' : ''));\n        break;\n\n      case 'export':\n        if (this.contact_list.rowcount > 0) {\n          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _search: this.env.search_request }, false, true);\n        }\n        break;\n\n      case 'export-selected':\n        if (this.contact_list.rowcount > 0) {\n          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _cid: this.contact_list.get_selection().join(',') }, false, true);\n        }\n        break;\n\n      case 'upload-photo':\n        this.upload_contact_photo(props || this.gui_objects.uploadform);\n        break;\n\n      case 'delete-photo':\n        this.replace_contact_photo('-del-');\n        break;\n\n      // user settings commands\n      case 'preferences':\n      case 'identities':\n      case 'responses':\n      case 'folders':\n        this.goto_url('settings/' + command);\n        break;\n\n      case 'undo':\n        this.http_request('undo', '', this.display_message('', 'loading'));\n        break;\n\n      // unified command call (command name == function name)\n      default:\n        var func = command.replace(/-/g, '_');\n        if (this[func] && typeof this[func] === 'function') {\n          ret = this[func](props, obj, event);\n        }\n        break;\n    }\n\n    if (!aborted && this.triggerEvent('after'+command, props) === false)\n      ret = false;\n    this.triggerEvent('actionafter', { props:props, action:command, aborted:aborted });\n\n    return ret === false ? false : obj ? false : true;\n  };\n\n  // set command(s) enabled or disabled\n  this.enable_command = function()\n  {\n    var i, n, args = Array.prototype.slice.call(arguments),\n      enable = args.pop(), cmd;\n\n    for (n=0; n<args.length; n++) {\n      cmd = args[n];\n      // argument of type array\n      if (typeof cmd === 'string') {\n        this.commands[cmd] = enable;\n        this.set_button(cmd, (enable ? 'act' : 'pas'));\n        this.triggerEvent('enable-command', {command: cmd, status: enable});\n      }\n      // push array elements into commands array\n      else {\n        for (i in cmd)\n          args.push(cmd[i]);\n      }\n    }\n  };\n\n  this.command_enabled = function(cmd)\n  {\n    return this.commands[cmd];\n  };\n\n  // lock/unlock interface\n  this.set_busy = function(a, message, id)\n  {\n    if (a && message) {\n      var msg = this.get_label(message);\n      if (msg == message)\n        msg = 'Loading...';\n\n      id = this.display_message(msg, 'loading');\n    }\n    else if (!a && id) {\n      this.hide_message(id);\n    }\n\n    this.busy = a;\n    //document.body.style.cursor = a ? 'wait' : 'default';\n\n    if (this.gui_objects.editform)\n      this.lock_form(this.gui_objects.editform, a);\n\n    return id;\n  };\n\n  // return a localized string\n  this.get_label = function(name, domain)\n  {\n    if (domain && this.labels[domain+'.'+name])\n      return this.labels[domain+'.'+name];\n    else if (this.labels[name])\n      return this.labels[name];\n    else\n      return name;\n  };\n\n  // alias for convenience reasons\n  this.gettext = this.get_label;\n\n  // switch to another application task\n  this.switch_task = function(task)\n  {\n    if (this.task === task && task != 'mail')\n      return;\n\n    var url = this.get_task_url(task);\n\n    if (task == 'mail')\n      url += '&_mbox=INBOX';\n    else if (task == 'logout' && !this.env.server_error) {\n      url = this.secure_url(url);\n      this.clear_compose_data();\n    }\n\n    this.redirect(url);\n  };\n\n  this.get_task_url = function(task, url)\n  {\n    if (!url)\n      url = this.env.comm_path;\n\n    if (url.match(/[?&]_task=[a-zA-Z0-9_-]+/))\n        return url.replace(/_task=[a-zA-Z0-9_-]+/, '_task=' + task);\n    else\n        return url.replace(/\\?.*$/, '') + '?_task=' + task;\n  };\n\n  this.reload = function(delay)\n  {\n    if (this.is_framed())\n      parent.rcmail.reload(delay);\n    else if (delay)\n      setTimeout(function() { ref.reload(); }, delay);\n    else if (window.location)\n      location.href = this.url('', {_extwin: this.env.extwin});\n  };\n\n  // Add variable to GET string, replace old value if exists\n  this.add_url = function(url, name, value)\n  {\n    value = urlencode(value);\n\n    if (/(\\?.*)$/.test(url)) {\n      var urldata = RegExp.$1,\n        datax = RegExp('((\\\\?|&)'+RegExp.escape(name)+'=[^&]*)');\n\n      if (datax.test(urldata)) {\n        urldata = urldata.replace(datax, RegExp.$2 + name + '=' + value);\n      }\n      else\n        urldata += '&' + name + '=' + value\n\n      return url.replace(/(\\?.*)$/, urldata);\n    }\n\n    return url + '?' + name + '=' + value;\n  };\n\n  // append CSRF protection token to the given url\n  this.secure_url = function(url)\n  {\n    return this.add_url(url, '_token', this.env.request_token);\n  },\n\n  this.is_framed = function()\n  {\n    return this.env.framed && parent.rcmail && parent.rcmail != this && typeof parent.rcmail.command == 'function';\n  };\n\n  this.save_pref = function(prop)\n  {\n    var request = {_name: prop.name, _value: prop.value};\n\n    if (prop.session)\n      request._session = prop.session;\n    if (prop.env)\n      this.env[prop.env] = prop.value;\n\n    this.http_post('save-pref', request);\n  };\n\n  this.html_identifier = function(str, encode)\n  {\n    return encode ? this.html_identifier_encode(str) : String(str).replace(this.identifier_expr, '_');\n  };\n\n  this.html_identifier_encode = function(str)\n  {\n    return Base64.encode(String(str)).replace(/=+$/, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  };\n\n  this.html_identifier_decode = function(str)\n  {\n    str = String(str).replace(/-/g, '+').replace(/_/g, '/');\n\n    while (str.length % 4) str += '=';\n\n    return Base64.decode(str);\n  };\n\n\n  /*********************************************************/\n  /*********        event handling methods         *********/\n  /*********************************************************/\n\n  this.drag_menu = function(e, target)\n  {\n    var modkey = rcube_event.get_modifier(e),\n      menu = this.gui_objects.dragmenu;\n\n    if (menu && modkey == SHIFT_KEY && this.commands['copy']) {\n      var pos = rcube_event.get_mouse_pos(e);\n      this.env.drag_target = target;\n      this.show_menu(this.gui_objects.dragmenu.id, true, e);\n      $(menu).css({top: (pos.y-10)+'px', left: (pos.x-10)+'px'});\n      return true;\n    }\n\n    return false;\n  };\n\n  this.drag_menu_action = function(action)\n  {\n    var menu = this.gui_objects.dragmenu;\n    if (menu) {\n      $(menu).hide();\n    }\n    this.command(action, this.env.drag_target);\n    this.env.drag_target = null;\n  };\n\n  this.drag_start = function(list)\n  {\n    this.drag_active = true;\n\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    // prepare treelist widget for dragging interactions\n    if (this.treelist)\n      this.treelist.drag_start();\n  };\n\n  this.drag_end = function(e)\n  {\n    var list, model;\n\n    if (this.treelist)\n      this.treelist.drag_end();\n\n    // execute drag & drop action when mouse was released\n    if (list = this.message_list)\n      model = this.env.mailboxes;\n    else if (list = this.contact_list)\n      model = this.env.contactfolders;\n\n    if (this.drag_active && model && this.env.last_folder_target) {\n      var target = model[this.env.last_folder_target];\n      list.draglayer.hide();\n\n      if (this.contact_list) {\n        if (!this.contacts_drag_menu(e, target))\n          this.command('move', target);\n      }\n      else if (!this.drag_menu(e, target))\n        this.command('move', target);\n    }\n\n    this.drag_active = false;\n    this.env.last_folder_target = null;\n  };\n\n  this.drag_move = function(e)\n  {\n    if (this.gui_objects.folderlist) {\n      var drag_target, oldclass,\n        layerclass = 'draglayernormal',\n        mouse = rcube_event.get_mouse_pos(e);\n\n      if (this.contact_list && this.contact_list.draglayer)\n        oldclass = this.contact_list.draglayer.attr('class');\n\n      // mouse intersects a valid drop target on the treelist\n      if (this.treelist && (drag_target = this.treelist.intersects(mouse, true))) {\n        this.env.last_folder_target = drag_target;\n        layerclass = 'draglayer' + (this.check_droptarget(drag_target) > 1 ? 'copy' : 'normal');\n      }\n      else {\n        // Clear target, otherwise drag end will trigger move into last valid droptarget\n        this.env.last_folder_target = null;\n      }\n\n      if (layerclass != oldclass && this.contact_list && this.contact_list.draglayer)\n        this.contact_list.draglayer.attr('class', layerclass);\n    }\n  };\n\n  this.collapse_folder = function(name)\n  {\n    if (this.treelist)\n      this.treelist.toggle(name);\n  };\n\n  this.folder_collapsed = function(node)\n  {\n    var prefname = this.env.task == 'addressbook' ? 'collapsed_abooks' : 'collapsed_folders',\n      old = this.env[prefname];\n\n    if (node.collapsed) {\n      this.env[prefname] = this.env[prefname] + '&'+urlencode(node.id)+'&';\n\n      // select the folder if one of its childs is currently selected\n      // don't select if it's virtual (#1488346)\n      if (!node.virtual && this.env.mailbox && this.env.mailbox.startsWith(node.id + this.env.delimiter))\n        this.command('list', node.id);\n    }\n    else {\n      var reg = new RegExp('&'+urlencode(node.id)+'&');\n      this.env[prefname] = this.env[prefname].replace(reg, '');\n    }\n\n    if (!this.drag_active) {\n      if (old !== this.env[prefname])\n        this.command('save-pref', { name: prefname, value: this.env[prefname] });\n\n      if (this.env.unread_counts)\n        this.set_unread_count_display(node.id, false);\n    }\n  };\n\n  // global mouse-click handler to cleanup some UI elements\n  this.doc_mouse_up = function(e)\n  {\n    var list, id, target = rcube_event.get_target(e);\n\n    // ignore event if jquery UI dialog is open\n    if ($(target).closest('.ui-dialog, .ui-widget-overlay').length)\n      return;\n\n    // remove focus from list widgets\n    if (window.rcube_list_widget && rcube_list_widget._instances.length) {\n      $.each(rcube_list_widget._instances, function(i,list){\n        if (list && !rcube_mouse_is_over(e, list.list.parentNode))\n          list.blur();\n      });\n    }\n\n    // reset 'pressed' buttons\n    if (this.buttons_sel) {\n      for (id in this.buttons_sel)\n        if (typeof id !== 'function')\n          this.button_out(this.buttons_sel[id], id);\n      this.buttons_sel = {};\n    }\n\n    // reset popup menus; delayed to have updated menu_stack data\n    setTimeout(function(e){\n      var obj, skip, config, id, i, parents = $(target).parents();\n      for (i = ref.menu_stack.length - 1; i >= 0; i--) {\n        id = ref.menu_stack[i];\n        obj = $('#' + id);\n\n        if (obj.is(':visible')\n          && target != obj.data('opener')\n          && target != obj.get(0)  // check if scroll bar was clicked (#1489832)\n          && !parents.is(obj.data('opener'))\n          && id != skip\n          && (obj.attr('data-editable') != 'true' || !$(target).parents('#' + id).length)\n          && (obj.attr('data-sticky') != 'true' || !rcube_mouse_is_over(e, obj.get(0)))\n        ) {\n          ref.hide_menu(id, e);\n        }\n        skip = obj.data('parent');\n      }\n    }, 10, e);\n  };\n\n  // global keypress event handler\n  this.doc_keypress = function(e)\n  {\n    // Helper method to move focus to the next/prev active menu item\n    var focus_menu_item = function(dir) {\n      var obj, item, mod = dir < 0 ? 'prevAll' : 'nextAll', limit = dir < 0 ? 'last' : 'first';\n      if (ref.focused_menu && (obj = $('#'+ref.focused_menu))) {\n        item = obj.find(':focus').closest('li')[mod](':has(:not([aria-disabled=true]))').find('a,input')[limit]();\n        if (!item.length)\n          item = obj.find(':focus').closest('ul')[mod](':has(:not([aria-disabled=true]))').find('a,input')[limit]();\n        return item.focus().length;\n      }\n\n      return 0;\n    };\n\n    var target = e.target || {},\n      keyCode = rcube_event.get_keycode(e);\n\n    // save global reference for keyboard detection on click events in IE\n    rcube_event._last_keyboard_event = e;\n\n    if (e.keyCode != 27 && (!this.menu_keyboard_active || target.nodeName == 'TEXTAREA' || target.nodeName == 'SELECT')) {\n      return true;\n    }\n\n    switch (keyCode) {\n      case 38:\n      case 40:\n      case 63232: // \"up\", in safari keypress\n      case 63233: // \"down\", in safari keypress\n        focus_menu_item(keyCode == 38 || keyCode == 63232 ? -1 : 1);\n        return rcube_event.cancel(e);\n\n      case 9:   // tab\n        if (this.focused_menu) {\n          var mod = rcube_event.get_modifier(e);\n          if (!focus_menu_item(mod == SHIFT_KEY ? -1 : 1)) {\n            this.hide_menu(this.focused_menu, e);\n          }\n        }\n        return rcube_event.cancel(e);\n\n      case 27:  // esc\n        if (this.menu_stack.length)\n          this.hide_menu(this.menu_stack[this.menu_stack.length-1], e);\n        break;\n    }\n\n    return true;\n  }\n\n  this.msglist_select = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    var selected = list.get_single_selection();\n\n    this.enable_command(this.env.message_commands, selected != null);\n    if (selected) {\n      // Hide certain command buttons when Drafts folder is selected\n      if (this.env.mailbox == this.env.drafts_mailbox)\n        this.enable_command('reply', 'reply-all', 'reply-list', 'forward', 'forward-attachment', 'forward-inline', false);\n      // Disable reply-list when List-Post header is not set\n      else {\n        var msg = this.env.messages[selected];\n        if (!msg.ml)\n          this.enable_command('reply-list', false);\n      }\n    }\n    // Multi-message commands\n    this.enable_command('delete', 'move', 'copy', 'mark', 'forward', 'forward-attachment', list.selection.length > 0);\n\n    // reset all-pages-selection\n    if (selected || (list.selection.length && list.selection.length != list.rowcount))\n      this.select_all_mode = false;\n\n    // start timer for message preview (wait for double click)\n    if (selected && this.env.contentframe && !list.multi_selecting && !this.dummy_select)\n      this.preview_timer = setTimeout(function() { ref.msglist_get_preview(); }, this.dblclick_time);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n  };\n\n  // This allow as to re-select selected message and display it in preview frame\n  this.msglist_click = function(list)\n  {\n    if (list.multi_selecting || !this.env.contentframe)\n      return;\n\n    if (list.get_single_selection())\n      return;\n\n    var win = this.get_frame_window(this.env.contentframe);\n\n    if (win && win.location.href.indexOf(this.env.blankpage) >= 0) {\n      if (this.preview_timer)\n        clearTimeout(this.preview_timer);\n      if (this.preview_read_timer)\n        clearTimeout(this.preview_read_timer);\n\n      this.preview_timer = setTimeout(function() { ref.msglist_get_preview(); }, this.dblclick_time);\n    }\n  };\n\n  this.msglist_dbl_click = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    var uid = list.get_single_selection();\n\n    if (uid && (this.env.messages[uid].mbox || this.env.mailbox) == this.env.drafts_mailbox)\n      this.open_compose_step({ _draft_uid: uid, _mbox: this.env.mailbox });\n    else if (uid)\n      this.show_message(uid, false, false);\n  };\n\n  this.msglist_keypress = function(list)\n  {\n    if (list.modkey == CONTROL_KEY)\n      return;\n\n    if (list.key_pressed == list.ENTER_KEY)\n      this.command('show');\n    else if (list.key_pressed == list.DELETE_KEY || list.key_pressed == list.BACKSPACE_KEY)\n      this.command('delete');\n    else if (list.key_pressed == 33)\n      this.command('previouspage');\n    else if (list.key_pressed == 34)\n      this.command('nextpage');\n  };\n\n  this.msglist_get_preview = function()\n  {\n    var uid = this.get_single_uid();\n    if (uid && this.env.contentframe && !this.drag_active)\n      this.show_message(uid, false, true);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n  };\n\n  this.msglist_expand = function(row)\n  {\n    if (this.env.messages[row.uid])\n      this.env.messages[row.uid].expanded = row.expanded;\n    $(row.obj)[row.expanded?'addClass':'removeClass']('expanded');\n  };\n\n  this.msglist_set_coltypes = function(list)\n  {\n    var i, found, name, cols = list.thead.rows[0].cells;\n\n    this.env.listcols = [];\n\n    for (i=0; i<cols.length; i++)\n      if (cols[i].id && cols[i].id.startsWith('rcm')) {\n        name = cols[i].id.slice(3);\n        this.env.listcols.push(name);\n      }\n\n    if ((found = $.inArray('flag', this.env.listcols)) >= 0)\n      this.env.flagged_col = found;\n\n    if ((found = $.inArray('subject', this.env.listcols)) >= 0)\n      this.env.subject_col = found;\n\n    this.command('save-pref', { name: 'list_cols', value: this.env.listcols, session: 'list_attrib/columns' });\n  };\n\n  this.check_droptarget = function(id)\n  {\n    switch (this.task) {\n      case 'mail':\n        return (this.env.mailboxes[id]\n            && !this.env.mailboxes[id].virtual\n            && (this.env.mailboxes[id].id != this.env.mailbox || this.is_multifolder_listing())) ? 1 : 0;\n\n      case 'addressbook':\n        var target;\n        if (id != this.env.source && (target = this.env.contactfolders[id])) {\n          // droptarget is a group\n          if (target.type == 'group') {\n            if (target.id != this.env.group && !this.env.contactfolders[target.source].readonly) {\n              var is_other = this.env.selection_sources.length > 1 || $.inArray(target.source, this.env.selection_sources) == -1;\n              return !is_other || this.commands.move ? 1 : 2;\n            }\n          }\n          // droptarget is a (writable) addressbook and it's not the source\n          else if (!target.readonly && (this.env.selection_sources.length > 1 || $.inArray(id, this.env.selection_sources) == -1)) {\n            return this.commands.move ? 1 : 2;\n          }\n        }\n    }\n\n    return 0;\n  };\n\n  // open popup window\n  this.open_window = function(url, small, toolbar)\n  {\n    var wname = 'rcmextwin' + new Date().getTime();\n\n    url += (url.match(/\\?/) ? '&' : '?') + '_extwin=1';\n\n    if (this.env.standard_windows)\n      var extwin = window.open(url, wname);\n    else {\n      var win = this.is_framed() ? parent.window : window,\n        page = $(win),\n        page_width = page.width(),\n        page_height = bw.mz ? $('body', win).height() : page.height(),\n        w = Math.min(small ? this.env.popup_width_small : this.env.popup_width, page_width),\n        h = page_height, // always use same height\n        l = (win.screenLeft || win.screenX) + 20,\n        t = (win.screenTop || win.screenY) + 20,\n        extwin = window.open(url, wname,\n          'width='+w+',height='+h+',top='+t+',left='+l+',resizable=yes,location=no,scrollbars=yes'\n          +(toolbar ? ',toolbar=yes,menubar=yes,status=yes' : ',toolbar=no,menubar=no,status=no'));\n    }\n\n    // detect popup blocker (#1489618)\n    // don't care this might not work with all browsers\n    if (!extwin || extwin.closed) {\n      this.display_message(this.get_label('windowopenerror'), 'warning');\n      return;\n    }\n\n    // write loading... message to empty windows\n    if (!url && extwin.document) {\n      extwin.document.write('<html><body>' + this.get_label('loading') + '</body></html>');\n    }\n\n    // allow plugins to grab the window reference (#1489413)\n    this.triggerEvent('openwindow', { url:url, handle:extwin });\n\n    // focus window, delayed to bring to front\n    setTimeout(function() { extwin && extwin.focus(); }, 10);\n\n    return extwin;\n  };\n\n\n  /*********************************************************/\n  /*********     (message) list functionality      *********/\n  /*********************************************************/\n\n  this.init_message_row = function(row)\n  {\n    var i, fn = {}, uid = row.uid,\n      status_icon = (this.env.status_col != null ? 'status' : 'msg') + 'icn' + row.id;\n\n    if (uid && this.env.messages[uid])\n      $.extend(row, this.env.messages[uid]);\n\n    // set eventhandler to status icon\n    if (row.icon = document.getElementById(status_icon)) {\n      fn.icon = function(e) { ref.command('toggle_status', uid); };\n    }\n\n    // save message icon position too\n    if (this.env.status_col != null)\n      row.msgicon = document.getElementById('msgicn'+row.id);\n    else\n      row.msgicon = row.icon;\n\n    // set eventhandler to flag icon\n    if (this.env.flagged_col != null && (row.flagicon = document.getElementById('flagicn'+row.id))) {\n      fn.flagicon = function(e) { ref.command('toggle_flag', uid); };\n    }\n\n    // set event handler to thread expand/collapse icon\n    if (!row.depth && row.has_children && (row.expando = document.getElementById('rcmexpando'+row.id))) {\n      fn.expando = function(e) { ref.expand_message_row(e, uid); };\n    }\n\n    // attach events\n    $.each(fn, function(i, f) {\n      row[i].onclick = function(e) { f(e); return rcube_event.cancel(e); };\n      if (bw.touch && row[i].addEventListener) {\n        row[i].addEventListener('touchend', function(e) {\n          if (e.changedTouches.length == 1) {\n            f(e);\n            return rcube_event.cancel(e);\n          }\n        }, false);\n      }\n    });\n\n    this.triggerEvent('insertrow', { uid:uid, row:row });\n  };\n\n  // create a table row in the message list\n  this.add_message_row = function(uid, cols, flags, attop)\n  {\n    if (!this.gui_objects.messagelist || !this.message_list)\n      return false;\n\n    // Prevent from adding messages from different folder (#1487752)\n    if (flags.mbox != this.env.mailbox && !flags.skip_mbox_check)\n      return false;\n\n    if (!this.env.messages[uid])\n      this.env.messages[uid] = {};\n\n    // merge flags over local message object\n    $.extend(this.env.messages[uid], {\n      deleted: flags.deleted?1:0,\n      replied: flags.answered?1:0,\n      unread: !flags.seen?1:0,\n      forwarded: flags.forwarded?1:0,\n      flagged: flags.flagged?1:0,\n      has_children: flags.has_children?1:0,\n      depth: flags.depth?flags.depth:0,\n      unread_children: flags.unread_children?flags.unread_children:0,\n      parent_uid: flags.parent_uid?flags.parent_uid:0,\n      selected: this.select_all_mode || this.message_list.in_selection(uid),\n      ml: flags.ml?1:0,\n      ctype: flags.ctype,\n      mbox: flags.mbox,\n      // flags from plugins\n      flags: flags.extra_flags\n    });\n\n    var c, n, col, html, css_class, label, status_class = '', status_label = '',\n      tree = '', expando = '',\n      list = this.message_list,\n      rows = list.rows,\n      message = this.env.messages[uid],\n      msg_id = this.html_identifier(uid,true),\n      row_class = 'message'\n        + (!flags.seen ? ' unread' : '')\n        + (flags.deleted ? ' deleted' : '')\n        + (flags.flagged ? ' flagged' : '')\n        + (message.selected ? ' selected' : ''),\n      row = { cols:[], style:{}, id:'rcmrow'+msg_id, uid:uid };\n\n    // message status icons\n    css_class = 'msgicon';\n    if (this.env.status_col === null) {\n      css_class += ' status';\n      if (flags.deleted) {\n        status_class += ' deleted';\n        status_label += this.get_label('deleted') + ' ';\n      }\n      else if (!flags.seen) {\n        status_class += ' unread';\n        status_label += this.get_label('unread') + ' ';\n      }\n      else if (flags.unread_children > 0) {\n        status_class += ' unreadchildren';\n      }\n    }\n    if (flags.answered) {\n      status_class += ' replied';\n      status_label += this.get_label('replied') + ' ';\n    }\n    if (flags.forwarded) {\n      status_class += ' forwarded';\n      status_label += this.get_label('forwarded') + ' ';\n    }\n\n    // update selection\n    if (message.selected && !list.in_selection(uid))\n      list.selection.push(uid);\n\n    // threads\n    if (this.env.threading) {\n      if (message.depth) {\n        // This assumes that div width is hardcoded to 15px,\n        tree += '<span id=\"rcmtab' + msg_id + '\" class=\"branch\" style=\"width:' + (message.depth * 15) + 'px;\">&nbsp;&nbsp;</span>';\n\n        if ((rows[message.parent_uid] && rows[message.parent_uid].expanded === false)\n          || ((this.env.autoexpand_threads == 0 || this.env.autoexpand_threads == 2) &&\n            (!rows[message.parent_uid] || !rows[message.parent_uid].expanded))\n        ) {\n          row.style.display = 'none';\n          message.expanded = false;\n        }\n        else\n          message.expanded = true;\n\n        row_class += ' thread expanded';\n      }\n      else if (message.has_children) {\n        if (message.expanded === undefined && (this.env.autoexpand_threads == 1 || (this.env.autoexpand_threads == 2 && message.unread_children))) {\n          message.expanded = true;\n        }\n\n        expando = '<div id=\"rcmexpando' + row.id + '\" class=\"' + (message.expanded ? 'expanded' : 'collapsed') + '\">&nbsp;&nbsp;</div>';\n        row_class += ' thread' + (message.expanded? ' expanded' : '');\n      }\n\n      if (flags.unread_children && flags.seen && !message.expanded)\n        row_class += ' unroot';\n    }\n\n    tree += '<span id=\"msgicn'+row.id+'\" class=\"'+css_class+status_class+'\" title=\"'+status_label+'\"></span>';\n    row.className = row_class;\n\n    // build subject link\n    if (cols.subject) {\n      var action  = flags.mbox == this.env.drafts_mailbox ? 'compose' : 'show',\n        uid_param = flags.mbox == this.env.drafts_mailbox ? '_draft_uid' : '_uid',\n        query = { _mbox: flags.mbox };\n      query[uid_param] = uid;\n      cols.subject = '<a href=\"' + this.url(action, query) + '\" onclick=\"return rcube_event.keyboard_only(event)\"' +\n        ' onmouseover=\"rcube_webmail.long_subject_title(this,'+(message.depth+1)+')\" tabindex=\"-1\"><span>'+cols.subject+'</span></a>';\n    }\n\n    // add each submitted col\n    for (n in this.env.listcols) {\n      c = this.env.listcols[n];\n      col = {className: String(c).toLowerCase(), events:{}};\n\n      if (this.env.coltypes[c] && this.env.coltypes[c].hidden) {\n        col.className += ' hidden';\n      }\n\n      if (c == 'flag') {\n        css_class = (flags.flagged ? 'flagged' : 'unflagged');\n        label = this.get_label(css_class);\n        html = '<span id=\"flagicn'+row.id+'\" class=\"'+css_class+'\" title=\"'+label+'\"></span>';\n      }\n      else if (c == 'attachment') {\n        label = this.get_label('withattachment');\n        if (flags.attachmentClass)\n          html = '<span class=\"'+flags.attachmentClass+'\" title=\"'+label+'\"></span>';\n        else if (/application\\/|multipart\\/(m|signed)/.test(flags.ctype))\n          html = '<span class=\"attachment\" title=\"'+label+'\"></span>';\n        else if (/multipart\\/report/.test(flags.ctype))\n          html = '<span class=\"report\"></span>';\n          else\n          html = '&nbsp;';\n      }\n      else if (c == 'status') {\n        label = '';\n        if (flags.deleted) {\n          css_class = 'deleted';\n          label = this.get_label('deleted');\n        }\n        else if (!flags.seen) {\n          css_class = 'unread';\n          label = this.get_label('unread');\n        }\n        else if (flags.unread_children > 0) {\n          css_class = 'unreadchildren';\n        }\n        else\n          css_class = 'msgicon';\n        html = '<span id=\"statusicn'+row.id+'\" class=\"'+css_class+status_class+'\" title=\"'+label+'\"></span>';\n      }\n      else if (c == 'threads')\n        html = expando;\n      else if (c == 'subject') {\n        if (bw.ie)\n          col.events.mouseover = function() { rcube_webmail.long_subject_title_ex(this); };\n        html = tree + cols[c];\n      }\n      else if (c == 'priority') {\n        if (flags.prio > 0 && flags.prio < 6) {\n          label = this.get_label('priority') + ' ' + flags.prio;\n          html = '<span class=\"prio'+flags.prio+'\" title=\"'+label+'\"></span>';\n        }\n        else\n          html = '&nbsp;';\n      }\n      else if (c == 'folder') {\n        html = '<span onmouseover=\"rcube_webmail.long_subject_title(this)\">' + cols[c] + '<span>';\n      }\n      else\n        html = cols[c];\n\n      col.innerHTML = html;\n      row.cols.push(col);\n    }\n\n    list.insert_row(row, attop);\n\n    // remove 'old' row\n    if (attop && this.env.pagesize && list.rowcount > this.env.pagesize) {\n      var uid = list.get_last_row();\n      list.remove_row(uid);\n      list.clear_selection(uid);\n    }\n  };\n\n  this.set_list_sorting = function(sort_col, sort_order)\n  {\n    // set table header class\n    $('#rcm'+this.env.sort_col).removeClass('sorted'+(this.env.sort_order.toUpperCase()));\n    if (sort_col)\n      $('#rcm'+sort_col).addClass('sorted'+sort_order);\n\n    this.env.sort_col = sort_col;\n    this.env.sort_order = sort_order;\n  };\n\n  this.set_list_options = function(cols, sort_col, sort_order, threads)\n  {\n    var update, post_data = {};\n\n    if (sort_col === undefined)\n      sort_col = this.env.sort_col;\n    if (!sort_order)\n      sort_order = this.env.sort_order;\n\n    if (this.env.sort_col != sort_col || this.env.sort_order != sort_order) {\n      update = 1;\n      this.set_list_sorting(sort_col, sort_order);\n    }\n\n    if (this.env.threading != threads) {\n      update = 1;\n      post_data._threads = threads;\n    }\n\n    if (cols && cols.length) {\n      // make sure new columns are added at the end of the list\n      var i, idx, name, newcols = [], oldcols = this.env.listcols;\n      for (i=0; i<oldcols.length; i++) {\n        name = oldcols[i];\n        idx = $.inArray(name, cols);\n        if (idx != -1) {\n          newcols.push(name);\n          delete cols[idx];\n        }\n      }\n      for (i=0; i<cols.length; i++)\n        if (cols[i])\n          newcols.push(cols[i]);\n\n      if (newcols.join() != oldcols.join()) {\n        update = 1;\n        post_data._cols = newcols.join(',');\n      }\n    }\n\n    if (update)\n      this.list_mailbox('', '', sort_col+'_'+sort_order, post_data);\n  };\n\n  // when user double-clicks on a row\n  this.show_message = function(id, safe, preview)\n  {\n    if (!id)\n      return;\n\n    var win, target = window,\n      url = this.params_from_uid(id, {_caps: this.browser_capabilities()});\n\n    if (preview && (win = this.get_frame_window(this.env.contentframe))) {\n      target = win;\n      url._framed = 1;\n    }\n\n    if (safe)\n      url._safe = 1;\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    if (this.env.extwin)\n      url._extwin = 1;\n\n    url = this.url(preview ? 'preview': 'show', url);\n\n    if (preview && String(target.location.href).indexOf(url) >= 0) {\n      this.show_contentframe(true);\n    }\n    else {\n      if (!preview && this.env.message_extwin && !this.env.extwin)\n        this.open_window(url, true);\n      else\n        this.location_href(url, target, true);\n\n      // mark as read and change mbox unread counter\n      if (preview && this.message_list && this.message_list.rows[id] && this.message_list.rows[id].unread && this.env.preview_pane_mark_read > 0) {\n        this.preview_read_timer = setTimeout(function() {\n          ref.set_unread_message(id, ref.env.mailbox);\n          ref.http_post('mark', {_uid: id, _flag: 'read', _mbox: ref.env.mailbox, _quiet: 1});\n        }, this.env.preview_pane_mark_read * 1000);\n      }\n    }\n  };\n\n  // update message status and unread counter after marking a message as read\n  this.set_unread_message = function(id, folder)\n  {\n    var self = this;\n\n    // find window with messages list\n    if (!self.message_list)\n      self = self.opener();\n\n    if (!self && window.parent)\n      self = parent.rcmail;\n\n    if (!self || !self.message_list)\n      return;\n\n    // this may fail in multifolder mode\n    if (self.set_message(id, 'unread', false) === false)\n      self.set_message(id + '-' + folder, 'unread', false);\n\n    if (self.env.unread_counts[folder] > 0) {\n      self.env.unread_counts[folder] -= 1;\n      self.set_unread_count(folder, self.env.unread_counts[folder], folder == 'INBOX' && !self.is_multifolder_listing());\n    }\n  };\n\n  this.show_contentframe = function(show)\n  {\n    var frame, win, name = this.env.contentframe;\n\n    if (name && (frame = this.get_frame_element(name))) {\n      if (!show && (win = this.get_frame_window(name))) {\n        if (win.location.href.indexOf(this.env.blankpage) < 0) {\n          if (win.stop)\n            win.stop();\n          else // IE\n            win.document.execCommand('Stop');\n\n          win.location.href = this.env.blankpage;\n        }\n      }\n      else if (!bw.safari && !bw.konq)\n        $(frame)[show ? 'show' : 'hide']();\n    }\n\n    if (!show && this.env.frame_lock)\n      this.set_busy(false, null, this.env.frame_lock);\n  };\n\n  this.get_frame_element = function(id)\n  {\n    var frame;\n\n    if (id && (frame = document.getElementById(id)))\n      return frame;\n  };\n\n  this.get_frame_window = function(id)\n  {\n    var frame = this.get_frame_element(id);\n\n    if (frame && frame.name && window.frames)\n      return window.frames[frame.name];\n  };\n\n  this.lock_frame = function()\n  {\n    if (!this.env.frame_lock)\n      (this.is_framed() ? parent.rcmail : this).env.frame_lock = this.set_busy(true, 'loading');\n  };\n\n  // list a specific page\n  this.list_page = function(page)\n  {\n    if (page == 'next')\n      page = this.env.current_page+1;\n    else if (page == 'last')\n      page = this.env.pagecount;\n    else if (page == 'prev' && this.env.current_page > 1)\n      page = this.env.current_page-1;\n    else if (page == 'first' && this.env.current_page > 1)\n      page = 1;\n\n    if (page > 0 && page <= this.env.pagecount) {\n      this.env.current_page = page;\n\n      if (this.task == 'addressbook' || this.contact_list)\n        this.list_contacts(this.env.source, this.env.group, page);\n      else if (this.task == 'mail')\n        this.list_mailbox(this.env.mailbox, page);\n    }\n  };\n\n  // sends request to check for recent messages\n  this.checkmail = function()\n  {\n    var lock = this.set_busy(true, 'checkingmail'),\n      params = this.check_recent_params();\n\n    this.http_post('check-recent', params, lock);\n  };\n\n  // list messages of a specific mailbox using filter\n  this.filter_mailbox = function(filter)\n  {\n    if (this.filter_disabled)\n      return;\n\n    var lock = this.set_busy(true, 'searching');\n\n    this.clear_message_list();\n\n    // reset vars\n    this.env.current_page = 1;\n    this.env.search_filter = filter;\n    this.http_request('search', this.search_params(false, filter), lock);\n  };\n\n  // reload the current message listing\n  this.refresh_list = function()\n  {\n    this.list_mailbox(this.env.mailbox, this.env.current_page || 1, null, { _clear:1 }, true);\n    if (this.message_list)\n      this.message_list.clear_selection();\n  };\n\n  // list messages of a specific mailbox\n  this.list_mailbox = function(mbox, page, sort, url, update_only)\n  {\n    var win, target = window;\n\n    if (typeof url != 'object')\n      url = {};\n\n    if (!mbox)\n      mbox = this.env.mailbox ? this.env.mailbox : 'INBOX';\n\n    // add sort to url if set\n    if (sort)\n      url._sort = sort;\n\n    // folder change, reset page, search scope, etc.\n    if (this.env.mailbox != mbox) {\n      page = 1;\n      this.env.current_page = page;\n      this.env.search_scope = 'base';\n      this.select_all_mode = false;\n      this.reset_search_filter();\n    }\n    // also send search request to get the right messages\n    else if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    if (!update_only) {\n      // unselect selected messages and clear the list and message data\n      this.clear_message_list();\n\n      if (mbox != this.env.mailbox || (mbox == this.env.mailbox && !page && !sort))\n        url._refresh = 1;\n\n      this.select_folder(mbox, '', true);\n      this.unmark_folder(mbox, 'recent', '', true);\n      this.env.mailbox = mbox;\n    }\n\n    // load message list remotely\n    if (this.gui_objects.messagelist) {\n      this.list_mailbox_remote(mbox, page, url);\n      return;\n    }\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      target = win;\n      url._framed = 1;\n    }\n\n    if (this.env.uid)\n      url._uid = this.env.uid;\n\n    // load message list to target frame/window\n    if (mbox) {\n      this.set_busy(true, 'loading');\n      url._mbox = mbox;\n      if (page)\n        url._page = page;\n      this.location_href(url, target);\n    }\n  };\n\n  this.clear_message_list = function()\n  {\n    this.env.messages = {};\n\n    this.show_contentframe(false);\n    if (this.message_list)\n      this.message_list.clear(true);\n  };\n\n  // send remote request to load message list\n  this.list_mailbox_remote = function(mbox, page, url)\n  {\n    var lock = this.set_busy(true, 'loading');\n\n    if (typeof url != 'object')\n      url = {};\n    url._mbox = mbox;\n    if (page)\n      url._page = page;\n\n    this.http_request('list', url, lock);\n    this.update_state({ _mbox: mbox, _page: (page && page > 1 ? page : null) });\n  };\n\n  // removes messages that doesn't exists from list selection array\n  this.update_selection = function()\n  {\n    var list = this.message_list,\n      selected = list.selection,\n      rows = list.rows,\n      i, selection = [];\n\n    for (i in selected)\n      if (rows[selected[i]])\n        selection.push(selected[i]);\n\n    list.selection = selection;\n\n    // reset preview frame, if currently previewed message is not selected (has been removed)\n    try {\n      var win = this.get_frame_window(this.env.contentframe),\n        id = win.rcmail.env.uid;\n\n      if (id && !list.in_selection(id))\n        this.show_contentframe(false);\n    }\n    catch (e) {};\n  };\n\n  // expand all threads with unread children\n  this.expand_unread = function()\n  {\n    var r, tbody = this.message_list.tbody,\n      new_row = tbody.firstChild;\n\n    while (new_row) {\n      if (new_row.nodeType == 1 && (r = this.message_list.rows[new_row.uid]) && r.unread_children) {\n        this.message_list.expand_all(r);\n        this.set_unread_children(r.uid);\n      }\n\n      new_row = new_row.nextSibling;\n    }\n\n    return false;\n  };\n\n  // thread expanding/collapsing handler\n  this.expand_message_row = function(e, uid)\n  {\n    var row = this.message_list.rows[uid];\n\n    // handle unread_children mark\n    row.expanded = !row.expanded;\n    this.set_unread_children(uid);\n    row.expanded = !row.expanded;\n\n    this.message_list.expand_row(e, uid);\n  };\n\n  // message list expanding\n  this.expand_threads = function()\n  {\n    if (!this.env.threading || !this.env.autoexpand_threads || !this.message_list)\n      return;\n\n    switch (this.env.autoexpand_threads) {\n      case 2: this.expand_unread(); break;\n      case 1: this.message_list.expand_all(); break;\n    }\n  };\n\n  // Initializes threads indicators/expanders after list update\n  this.init_threads = function(roots, mbox)\n  {\n    // #1487752\n    if (mbox && mbox != this.env.mailbox)\n      return false;\n\n    for (var n=0, len=roots.length; n<len; n++)\n      this.add_tree_icons(roots[n]);\n    this.expand_threads();\n  };\n\n  // adds threads tree icons to the list (or specified thread)\n  this.add_tree_icons = function(root)\n  {\n    var i, l, r, n, len, pos, tmp = [], uid = [],\n      row, rows = this.message_list.rows;\n\n    if (root)\n      row = rows[root] ? rows[root].obj : null;\n    else\n      row = this.message_list.tbody.firstChild;\n\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (r.depth) {\n          for (i=tmp.length-1; i>=0; i--) {\n            len = tmp[i].length;\n            if (len > r.depth) {\n              pos = len - r.depth;\n              if (!(tmp[i][pos] & 2))\n                tmp[i][pos] = tmp[i][pos] ? tmp[i][pos]+2 : 2;\n            }\n            else if (len == r.depth) {\n              if (!(tmp[i][0] & 2))\n                tmp[i][0] += 2;\n            }\n            if (r.depth > len)\n              break;\n          }\n\n          tmp.push(new Array(r.depth));\n          tmp[tmp.length-1][0] = 1;\n          uid.push(r.uid);\n        }\n        else {\n          if (tmp.length) {\n            for (i in tmp) {\n              this.set_tree_icons(uid[i], tmp[i]);\n            }\n            tmp = [];\n            uid = [];\n          }\n          if (root && row != rows[root].obj)\n            break;\n        }\n      }\n      row = row.nextSibling;\n    }\n\n    if (tmp.length) {\n      for (i in tmp) {\n        this.set_tree_icons(uid[i], tmp[i]);\n      }\n    }\n  };\n\n  // adds tree icons to specified message row\n  this.set_tree_icons = function(uid, tree)\n  {\n    var i, divs = [], html = '', len = tree.length;\n\n    for (i=0; i<len; i++) {\n      if (tree[i] > 2)\n        divs.push({'class': 'l3', width: 15});\n      else if (tree[i] > 1)\n        divs.push({'class': 'l2', width: 15});\n      else if (tree[i] > 0)\n        divs.push({'class': 'l1', width: 15});\n      // separator div\n      else if (divs.length && !divs[divs.length-1]['class'])\n        divs[divs.length-1].width += 15;\n      else\n        divs.push({'class': null, width: 15});\n    }\n\n    for (i=divs.length-1; i>=0; i--) {\n      if (divs[i]['class'])\n        html += '<div class=\"tree '+divs[i]['class']+'\" />';\n      else\n        html += '<div style=\"width:'+divs[i].width+'px\" />';\n    }\n\n    if (html)\n      $('#rcmtab'+this.html_identifier(uid, true)).html(html);\n  };\n\n  // update parent in a thread\n  this.update_thread_root = function(uid, flag)\n  {\n    if (!this.env.threading)\n      return;\n\n    var root = this.message_list.find_root(uid);\n\n    if (uid == root)\n      return;\n\n    var p = this.message_list.rows[root];\n\n    if (flag == 'read' && p.unread_children) {\n      p.unread_children--;\n    }\n    else if (flag == 'unread' && p.has_children) {\n      // unread_children may be undefined\n      p.unread_children = p.unread_children ? p.unread_children + 1 : 1;\n    }\n    else {\n      return;\n    }\n\n    this.set_message_icon(root);\n    this.set_unread_children(root);\n  };\n\n  // update thread indicators for all messages in a thread below the specified message\n  // return number of removed/added root level messages\n  this.update_thread = function (uid)\n  {\n    if (!this.env.threading)\n      return 0;\n\n    var r, parent, count = 0,\n      rows = this.message_list.rows,\n      row = rows[uid],\n      depth = rows[uid].depth,\n      roots = [];\n\n    if (!row.depth) // root message: decrease roots count\n      count--;\n    else if (row.unread) {\n      // update unread_children for thread root\n      parent = this.message_list.find_root(uid);\n      rows[parent].unread_children--;\n      this.set_unread_children(parent);\n    }\n\n    parent = row.parent_uid;\n\n    // childrens\n    row = row.obj.nextSibling;\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (!r.depth || r.depth <= depth)\n          break;\n\n        r.depth--; // move left\n        // reset width and clear the content of a tab, icons will be added later\n        $('#rcmtab'+r.id).width(r.depth * 15).html('');\n        if (!r.depth) { // a new root\n          count++; // increase roots count\n          r.parent_uid = 0;\n          if (r.has_children) {\n            // replace 'leaf' with 'collapsed'\n            $('#'+r.id+' .leaf:first')\n              .attr('id', 'rcmexpando' + r.id)\n              .attr('class', (r.obj.style.display != 'none' ? 'expanded' : 'collapsed'))\n              .bind('mousedown', {uid: r.uid},\n                function(e) { return ref.expand_message_row(e, e.data.uid); });\n\n            r.unread_children = 0;\n            roots.push(r);\n          }\n          // show if it was hidden\n          if (r.obj.style.display == 'none')\n            $(r.obj).show();\n        }\n        else {\n          if (r.depth == depth)\n            r.parent_uid = parent;\n          if (r.unread && roots.length)\n            roots[roots.length-1].unread_children++;\n        }\n      }\n      row = row.nextSibling;\n    }\n\n    // update unread_children for roots\n    for (r=0; r<roots.length; r++)\n      this.set_unread_children(roots[r].uid);\n\n    return count;\n  };\n\n  this.delete_excessive_thread_rows = function()\n  {\n    var rows = this.message_list.rows,\n      tbody = this.message_list.tbody,\n      row = tbody.firstChild,\n      cnt = this.env.pagesize + 1;\n\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (!r.depth && cnt)\n          cnt--;\n\n        if (!cnt)\n          this.message_list.remove_row(row.uid);\n      }\n      row = row.nextSibling;\n    }\n  };\n\n  // set message icon\n  this.set_message_icon = function(uid)\n  {\n    var css_class, label = '',\n      row = this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (row.icon) {\n      css_class = 'msgicon';\n      if (row.deleted) {\n        css_class += ' deleted';\n        label += this.get_label('deleted') + ' ';\n      }\n      else if (row.unread) {\n        css_class += ' unread';\n        label += this.get_label('unread') + ' ';\n      }\n      else if (row.unread_children)\n        css_class += ' unreadchildren';\n      if (row.msgicon == row.icon) {\n        if (row.replied) {\n          css_class += ' replied';\n          label += this.get_label('replied') + ' ';\n        }\n        if (row.forwarded) {\n          css_class += ' forwarded';\n          label += this.get_label('forwarded') + ' ';\n        }\n        css_class += ' status';\n      }\n\n      $(row.icon).attr('class', css_class).attr('title', label);\n    }\n\n    if (row.msgicon && row.msgicon != row.icon) {\n      label = '';\n      css_class = 'msgicon';\n      if (!row.unread && row.unread_children) {\n        css_class += ' unreadchildren';\n      }\n      if (row.replied) {\n        css_class += ' replied';\n        label += this.get_label('replied') + ' ';\n      }\n      if (row.forwarded) {\n        css_class += ' forwarded';\n        label += this.get_label('forwarded') + ' ';\n      }\n\n      $(row.msgicon).attr('class', css_class).attr('title', label);\n    }\n\n    if (row.flagicon) {\n      css_class = (row.flagged ? 'flagged' : 'unflagged');\n      label = this.get_label(css_class);\n      $(row.flagicon).attr('class', css_class)\n        .attr('aria-label', label)\n        .attr('title', label);\n    }\n  };\n\n  // set message status\n  this.set_message_status = function(uid, flag, status)\n  {\n    var row = this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (flag == 'unread') {\n      if (row.unread != status)\n        this.update_thread_root(uid, status ? 'unread' : 'read');\n    }\n\n    if ($.inArray(flag, ['unread', 'deleted', 'replied', 'forwarded', 'flagged']) > -1)\n      row[flag] = status;\n  };\n\n  // set message row status, class and icon\n  this.set_message = function(uid, flag, status)\n  {\n    var row = this.message_list && this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (flag)\n      this.set_message_status(uid, flag, status);\n\n    if ($.inArray(flag, ['unread', 'deleted', 'flagged']) > -1)\n      $(row.obj)[row[flag] ? 'addClass' : 'removeClass'](flag);\n\n    this.set_unread_children(uid);\n    this.set_message_icon(uid);\n  };\n\n  // sets unroot (unread_children) class of parent row\n  this.set_unread_children = function(uid)\n  {\n    var row = this.message_list.rows[uid];\n\n    if (row.parent_uid)\n      return;\n\n    if (!row.unread && row.unread_children && !row.expanded)\n      $(row.obj).addClass('unroot');\n    else\n      $(row.obj).removeClass('unroot');\n  };\n\n  // copy selected messages to the specified mailbox\n  this.copy_messages = function(mbox, event)\n  {\n    if (mbox && typeof mbox === 'object')\n      mbox = mbox.id;\n    else if (!mbox)\n      return this.folder_selector(event, function(folder) { ref.command('copy', folder); });\n\n    // exit if current or no mailbox specified\n    if (!mbox || mbox == this.env.mailbox)\n      return;\n\n    var post_data = this.selection_post_data({_target_mbox: mbox});\n\n    // exit if selection is empty\n    if (!post_data._uid)\n      return;\n\n    // send request to server\n    this.http_post('copy', post_data, this.display_message(this.get_label('copyingmessage'), 'loading'));\n  };\n\n  // move selected messages to the specified mailbox\n  this.move_messages = function(mbox, event)\n  {\n    if (mbox && typeof mbox === 'object')\n      mbox = mbox.id;\n    else if (!mbox)\n      return this.folder_selector(event, function(folder) { ref.command('move', folder); });\n\n    // exit if current or no mailbox specified\n    if (!mbox || (mbox == this.env.mailbox && !this.is_multifolder_listing()))\n      return;\n\n    var lock = false, post_data = this.selection_post_data({_target_mbox: mbox});\n\n    // exit if selection is empty\n    if (!post_data._uid)\n      return;\n\n    // show wait message\n    if (this.env.action == 'show')\n      lock = this.set_busy(true, 'movingmessage');\n    else\n      this.show_contentframe(false);\n\n    // Hide message command buttons until a message is selected\n    this.enable_command(this.env.message_commands, false);\n\n    this._with_selected_messages('move', post_data, lock);\n  };\n\n  // delete selected messages from the current mailbox\n  this.delete_messages = function(event)\n  {\n    var list = this.message_list, trash = this.env.trash_mailbox;\n\n    // if config is set to flag for deletion\n    if (this.env.flag_for_deletion) {\n      this.mark_message('delete');\n      return false;\n    }\n    // if there isn't a defined trash mailbox or we are in it\n    else if (!trash || this.env.mailbox == trash)\n      this.permanently_remove_messages();\n    // we're in Junk folder and delete_junk is enabled\n    else if (this.env.delete_junk && this.env.junk_mailbox && this.env.mailbox == this.env.junk_mailbox)\n      this.permanently_remove_messages();\n    // if there is a trash mailbox defined and we're not currently in it\n    else {\n      // if shift was pressed delete it immediately\n      if ((list && list.modkey == SHIFT_KEY) || (event && rcube_event.get_modifier(event) == SHIFT_KEY)) {\n        if (confirm(this.get_label('deletemessagesconfirm')))\n          this.permanently_remove_messages();\n      }\n      else\n        this.move_messages(trash);\n    }\n\n    return true;\n  };\n\n  // delete the selected messages permanently\n  this.permanently_remove_messages = function()\n  {\n    var post_data = this.selection_post_data();\n\n    // exit if selection is empty\n    if (!post_data._uid)\n      return;\n\n    this.show_contentframe(false);\n    this._with_selected_messages('delete', post_data);\n  };\n\n  // Send a specific move/delete request with UIDs of all selected messages\n  // @private\n  this._with_selected_messages = function(action, post_data, lock)\n  {\n    var count = 0, msg,\n      remove = (action == 'delete' || !this.is_multifolder_listing());\n\n    // update the list (remove rows, clear selection)\n    if (this.message_list) {\n      var n, id, root, roots = [],\n        selection = this.message_list.get_selection();\n\n      for (n=0, len=selection.length; n<len; n++) {\n        id = selection[n];\n\n        if (this.env.threading) {\n          count += this.update_thread(id);\n          root = this.message_list.find_root(id);\n          if (root != id && $.inArray(root, roots) < 0) {\n            roots.push(root);\n          }\n        }\n        if (remove)\n          this.message_list.remove_row(id, (this.env.display_next && n == selection.length-1));\n      }\n      // make sure there are no selected rows\n      if (!this.env.display_next && remove)\n        this.message_list.clear_selection();\n      // update thread tree icons\n      for (n=0, len=roots.length; n<len; n++) {\n        this.add_tree_icons(roots[n]);\n      }\n    }\n\n    if (count < 0)\n      post_data._count = (count*-1);\n    // remove threads from the end of the list\n    else if (count > 0 && remove)\n      this.delete_excessive_thread_rows();\n\n    if (!remove)\n      post_data._refresh = 1;\n\n    if (!lock) {\n      msg = action == 'move' ? 'movingmessage' : 'deletingmessage';\n      lock = this.display_message(this.get_label(msg), 'loading');\n    }\n\n    // send request to server\n    this.http_post(action, post_data, lock);\n  };\n\n  // build post data for message delete/move/copy/flag requests\n  this.selection_post_data = function(data)\n  {\n    if (typeof(data) != 'object')\n      data = {};\n\n    data._mbox = this.env.mailbox;\n\n    if (!data._uid) {\n      var uids = this.env.uid ? [this.env.uid] : this.message_list.get_selection();\n      data._uid = this.uids_to_list(uids);\n    }\n\n    if (this.env.action)\n      data._from = this.env.action;\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      data._search = this.env.search_request;\n\n    if (this.env.display_next && this.env.next_uid)\n      data._next_uid = this.env.next_uid;\n\n    return data;\n  };\n\n  // set a specific flag to one or more messages\n  this.mark_message = function(flag, uid)\n  {\n    var a_uids = [], r_uids = [], len, n, id,\n      list = this.message_list;\n\n    if (uid)\n      a_uids[0] = uid;\n    else if (this.env.uid)\n      a_uids[0] = this.env.uid;\n    else if (list)\n      a_uids = list.get_selection();\n\n    if (!list)\n      r_uids = a_uids;\n    else {\n      list.focus();\n      for (n=0, len=a_uids.length; n<len; n++) {\n        id = a_uids[n];\n        if ((flag == 'read' && list.rows[id].unread)\n            || (flag == 'unread' && !list.rows[id].unread)\n            || (flag == 'delete' && !list.rows[id].deleted)\n            || (flag == 'undelete' && list.rows[id].deleted)\n            || (flag == 'flagged' && !list.rows[id].flagged)\n            || (flag == 'unflagged' && list.rows[id].flagged))\n        {\n          r_uids.push(id);\n        }\n      }\n    }\n\n    // nothing to do\n    if (!r_uids.length && !this.select_all_mode)\n      return;\n\n    switch (flag) {\n        case 'read':\n        case 'unread':\n          this.toggle_read_status(flag, r_uids);\n          break;\n        case 'delete':\n        case 'undelete':\n          this.toggle_delete_status(r_uids);\n          break;\n        case 'flagged':\n        case 'unflagged':\n          this.toggle_flagged_status(flag, a_uids);\n          break;\n    }\n  };\n\n  // set class to read/unread\n  this.toggle_read_status = function(flag, a_uids)\n  {\n    var i, len = a_uids.length,\n      post_data = this.selection_post_data({_uid: this.uids_to_list(a_uids), _flag: flag}),\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    // mark all message rows as read/unread\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'unread', (flag == 'unread' ? true : false));\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  // set image to flagged or unflagged\n  this.toggle_flagged_status = function(flag, a_uids)\n  {\n    var i, len = a_uids.length,\n      post_data = this.selection_post_data({_uid: this.uids_to_list(a_uids), _flag: flag}),\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    // mark all message rows as flagged/unflagged\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'flagged', (flag == 'flagged' ? true : false));\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  // mark all message rows as deleted/undeleted\n  this.toggle_delete_status = function(a_uids)\n  {\n    var len = a_uids.length,\n      i, uid, all_deleted = true,\n      rows = this.message_list ? this.message_list.rows : {};\n\n    if (len == 1) {\n      if (!this.message_list || (rows[a_uids[0]] && !rows[a_uids[0]].deleted))\n        this.flag_as_deleted(a_uids);\n      else\n        this.flag_as_undeleted(a_uids);\n\n      return true;\n    }\n\n    for (i=0; i<len; i++) {\n      uid = a_uids[i];\n      if (rows[uid] && !rows[uid].deleted) {\n        all_deleted = false;\n        break;\n      }\n    }\n\n    if (all_deleted)\n      this.flag_as_undeleted(a_uids);\n    else\n      this.flag_as_deleted(a_uids);\n\n    return true;\n  };\n\n  this.flag_as_undeleted = function(a_uids)\n  {\n    var i, len = a_uids.length,\n      post_data = this.selection_post_data({_uid: this.uids_to_list(a_uids), _flag: 'undelete'}),\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'deleted', false);\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  this.flag_as_deleted = function(a_uids)\n  {\n    var r_uids = [],\n      post_data = this.selection_post_data({_uid: this.uids_to_list(a_uids), _flag: 'delete'}),\n      lock = this.display_message(this.get_label('markingmessage'), 'loading'),\n      rows = this.message_list ? this.message_list.rows : {},\n      count = 0;\n\n    for (var i=0, len=a_uids.length; i<len; i++) {\n      uid = a_uids[i];\n      if (rows[uid]) {\n        if (rows[uid].unread)\n          r_uids[r_uids.length] = uid;\n\n        if (this.env.skip_deleted) {\n          count += this.update_thread(uid);\n          this.message_list.remove_row(uid, (this.env.display_next && i == this.message_list.selection.length-1));\n        }\n        else\n          this.set_message(uid, 'deleted', true);\n      }\n    }\n\n    // make sure there are no selected rows\n    if (this.env.skip_deleted && this.message_list) {\n      if (!this.env.display_next)\n        this.message_list.clear_selection();\n      if (count < 0)\n        post_data._count = (count*-1);\n      else if (count > 0)\n        // remove threads from the end of the list\n        this.delete_excessive_thread_rows();\n    }\n\n    // set of messages to mark as seen\n    if (r_uids.length)\n      post_data._ruid = this.uids_to_list(r_uids);\n\n    if (this.env.skip_deleted && this.env.display_next && this.env.next_uid)\n      post_data._next_uid = this.env.next_uid;\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  // flag as read without mark request (called from backend)\n  // argument should be a coma-separated list of uids\n  this.flag_deleted_as_read = function(uids)\n  {\n    var uid, i, len,\n      rows = this.message_list ? this.message_list.rows : {};\n\n    if (typeof uids == 'string')\n      uids = uids.split(',');\n\n    for (i=0, len=uids.length; i<len; i++) {\n      uid = uids[i];\n      if (rows[uid])\n        this.set_message(uid, 'unread', false);\n    }\n  };\n\n  // Converts array of message UIDs to comma-separated list for use in URL\n  // with select_all mode checking\n  this.uids_to_list = function(uids)\n  {\n    return this.select_all_mode ? '*' : (uids.length <= 1 ? uids.join(',') : uids);\n  };\n\n  // Sets title of the delete button\n  this.set_button_titles = function()\n  {\n    var label = 'deletemessage';\n\n    if (!this.env.flag_for_deletion\n      && this.env.trash_mailbox && this.env.mailbox != this.env.trash_mailbox\n      && (!this.env.delete_junk || !this.env.junk_mailbox || this.env.mailbox != this.env.junk_mailbox)\n    )\n      label = 'movemessagetotrash';\n\n    this.set_alttext('delete', label);\n  };\n\n  /*********************************************************/\n  /*********       mailbox folders methods         *********/\n  /*********************************************************/\n\n  this.expunge_mailbox = function(mbox)\n  {\n    var lock, post_data = {_mbox: mbox};\n\n    // lock interface if it's the active mailbox\n    if (mbox == this.env.mailbox) {\n      lock = this.set_busy(true, 'loading');\n      post_data._reload = 1;\n      if (this.env.search_request)\n        post_data._search = this.env.search_request;\n    }\n\n    // send request to server\n    this.http_post('expunge', post_data, lock);\n  };\n\n  this.purge_mailbox = function(mbox)\n  {\n    var lock, post_data = {_mbox: mbox};\n\n    if (!confirm(this.get_label('purgefolderconfirm')))\n      return false;\n\n    // lock interface if it's the active mailbox\n    if (mbox == this.env.mailbox) {\n       lock = this.set_busy(true, 'loading');\n       post_data._reload = 1;\n     }\n\n    // send request to server\n    this.http_post('purge', post_data, lock);\n  };\n\n  // test if purge command is allowed\n  this.purge_mailbox_test = function()\n  {\n    return (this.env.exists && (\n      this.env.mailbox == this.env.trash_mailbox\n      || this.env.mailbox == this.env.junk_mailbox\n      || this.env.mailbox.startsWith(this.env.trash_mailbox + this.env.delimiter)\n      || this.env.mailbox.startsWith(this.env.junk_mailbox + this.env.delimiter)\n    ));\n  };\n\n\n  /*********************************************************/\n  /*********           login form methods          *********/\n  /*********************************************************/\n\n  // handler for keyboard events on the _user field\n  this.login_user_keyup = function(e)\n  {\n    var key = rcube_event.get_keycode(e),\n      passwd = $('#rcmloginpwd');\n\n    // enter\n    if (key == 13 && passwd.length && !passwd.val()) {\n      passwd.focus();\n      return rcube_event.cancel(e);\n    }\n\n    return true;\n  };\n\n\n  /*********************************************************/\n  /*********        message compose methods        *********/\n  /*********************************************************/\n\n  this.open_compose_step = function(p)\n  {\n    var url = this.url('mail/compose', p);\n\n    // open new compose window\n    if (this.env.compose_extwin && !this.env.extwin) {\n      this.open_window(url);\n    }\n    else {\n      this.redirect(url);\n      if (this.env.extwin)\n        window.resizeTo(Math.max(this.env.popup_width, $(window).width()), $(window).height() + 24);\n    }\n  };\n\n  // init message compose form: set focus and eventhandlers\n  this.init_messageform = function()\n  {\n    if (!this.gui_objects.messageform)\n      return false;\n\n    var i, elem, pos, input_from = $(\"[name='_from']\"),\n      input_to = $(\"[name='_to']\"),\n      input_subject = $(\"input[name='_subject']\"),\n      input_message = $(\"[name='_message']\").get(0),\n      html_mode = $(\"input[name='_is_html']\").val() == '1',\n      ac_fields = ['cc', 'bcc', 'replyto', 'followupto'],\n      ac_props, opener_rc = this.opener();\n\n    // close compose step in opener\n    if (opener_rc && opener_rc.env.action == 'compose') {\n      setTimeout(function(){\n        if (opener.history.length > 1)\n          opener.history.back();\n        else\n          opener_rc.redirect(opener_rc.get_task_url('mail'));\n      }, 100);\n      this.env.opened_extwin = true;\n    }\n\n    // configure parallel autocompletion\n    if (this.env.autocomplete_threads > 0) {\n      ac_props = {\n        threads: this.env.autocomplete_threads,\n        sources: this.env.autocomplete_sources\n      };\n    }\n\n    // init live search events\n    this.init_address_input_events(input_to, ac_props);\n    for (i in ac_fields) {\n      this.init_address_input_events($(\"[name='_\"+ac_fields[i]+\"']\"), ac_props);\n    }\n\n    if (!html_mode) {\n      pos = this.env.top_posting ? 0 : input_message.value.length;\n\n      // add signature according to selected identity\n      // if we have HTML editor, signature is added in a callback\n      if (input_from.prop('type') == 'select-one') {\n        this.change_identity(input_from[0]);\n      }\n\n      // set initial cursor position\n      this.set_caret_pos(input_message, pos);\n\n      // scroll to the bottom of the textarea (#1490114)\n      if (pos) {\n        $(input_message).scrollTop(input_message.scrollHeight);\n      }\n    }\n\n    // check for locally stored compose data\n    if (this.env.save_localstorage)\n      this.compose_restore_dialog(0, html_mode)\n\n    if (input_to.val() == '')\n      elem = input_to;\n    else if (input_subject.val() == '')\n      elem = input_subject;\n    else if (input_message)\n      elem = input_message;\n\n    // focus first empty element (need to be visible on IE8)\n    $(elem).filter(':visible').focus();\n\n    this.env.compose_focus_elem = document.activeElement;\n\n    // get summary of all field values\n    this.compose_field_hash(true);\n\n    // start the auto-save timer\n    this.auto_save_start();\n  };\n\n  this.compose_restore_dialog = function(j, html_mode)\n  {\n    var i, key, formdata, index = this.local_storage_get_item('compose.index', []);\n\n    var show_next = function(i) {\n      if (++i < index.length)\n        ref.compose_restore_dialog(i, html_mode)\n    }\n\n    for (i = j || 0; i < index.length; i++) {\n      key = index[i];\n      formdata = this.local_storage_get_item('compose.' + key, null, true);\n      if (!formdata) {\n        continue;\n      }\n      // restore saved copy of current compose_id\n      if (formdata.changed && key == this.env.compose_id) {\n        this.restore_compose_form(key, html_mode);\n        break;\n      }\n      // skip records from 'other' drafts\n      if (this.env.draft_id && formdata.draft_id && formdata.draft_id != this.env.draft_id) {\n        continue;\n      }\n      // skip records on reply\n      if (this.env.reply_msgid && formdata.reply_msgid != this.env.reply_msgid) {\n        continue;\n      }\n      // show dialog asking to restore the message\n      if (formdata.changed && formdata.session != this.env.session_id) {\n        this.show_popup_dialog(\n          this.get_label('restoresavedcomposedata')\n            .replace('$date', new Date(formdata.changed).toLocaleString())\n            .replace('$subject', formdata._subject)\n            .replace(/\\n/g, '<br/>'),\n          this.get_label('restoremessage'),\n          [{\n            text: this.get_label('restore'),\n            'class': 'mainaction',\n            click: function(){\n              ref.restore_compose_form(key, html_mode);\n              ref.remove_compose_data(key);  // remove old copy\n              ref.save_compose_form_local();  // save under current compose_id\n              $(this).dialog('close');\n            }\n          },\n          {\n            text: this.get_label('delete'),\n            'class': 'delete',\n            click: function(){\n              ref.remove_compose_data(key);\n              $(this).dialog('close');\n              show_next(i);\n            }\n          },\n          {\n            text: this.get_label('ignore'),\n            click: function(){\n              $(this).dialog('close');\n              show_next(i);\n            }\n          }]\n        );\n        break;\n      }\n    }\n  }\n\n  this.init_address_input_events = function(obj, props)\n  {\n    this.env.recipients_delimiter = this.env.recipients_separator + ' ';\n\n    obj.keydown(function(e) { return ref.ksearch_keydown(e, this, props); })\n      .attr({ 'autocomplete': 'off', 'aria-autocomplete': 'list', 'aria-expanded': 'false', 'role': 'combobox' });\n  };\n\n  this.submit_messageform = function(draft, saveonly)\n  {\n    var form = this.gui_objects.messageform;\n\n    if (!form)\n      return;\n\n    // the message has been sent but not saved, ask the user what to do\n    if (!saveonly && this.env.is_sent) {\n      return this.show_popup_dialog(this.get_label('messageissent'), '',\n        [{\n          text: this.get_label('save'),\n          'class': 'mainaction',\n          click: function() {\n            ref.submit_messageform(false, true);\n            $(this).dialog('close');\n          }\n        },\n        {\n          text: this.get_label('cancel'),\n          click: function() {\n            $(this).dialog('close');\n          }\n        }]\n      );\n    }\n\n    // all checks passed, send message\n    var msgid = this.set_busy(true, draft || saveonly ? 'savingmessage' : 'sendingmessage'),\n      lang = this.spellcheck_lang(),\n      files = [];\n\n    // send files list\n    $('li', this.gui_objects.attachmentlist).each(function() { files.push(this.id.replace(/^rcmfile/, '')); });\n    $('input[name=\"_attachments\"]', form).val(files.join());\n\n    form.target = 'savetarget';\n    form._draft.value = draft ? '1' : '';\n    form.action = this.add_url(form.action, '_unlock', msgid);\n    form.action = this.add_url(form.action, '_lang', lang);\n    form.action = this.add_url(form.action, '_framed', 1);\n\n    if (saveonly) {\n      form.action = this.add_url(form.action, '_saveonly', 1);\n    }\n\n    // register timer to notify about connection timeout\n    this.submit_timer = setTimeout(function(){\n      ref.set_busy(false, null, msgid);\n      ref.display_message(ref.get_label('requesttimedout'), 'error');\n    }, this.env.request_timeout * 1000);\n\n    form.submit();\n  };\n\n  this.compose_recipient_select = function(list)\n  {\n    var id, n, recipients = 0;\n    for (n=0; n < list.selection.length; n++) {\n      id = list.selection[n];\n      if (this.env.contactdata[id])\n        recipients++;\n    }\n    this.enable_command('add-recipient', recipients);\n  };\n\n  this.compose_add_recipient = function(field)\n  {\n    // find last focused field name\n    if (!field) {\n      field = $(this.env.focused_field).filter(':visible');\n      field = field.length ? field.attr('id').replace('_', '') : 'to';\n    }\n\n    var recipients = [], input = $('#_'+field), delim = this.env.recipients_delimiter;\n\n    if (this.contact_list && this.contact_list.selection.length) {\n      for (var id, n=0; n < this.contact_list.selection.length; n++) {\n        id = this.contact_list.selection[n];\n        if (id && this.env.contactdata[id]) {\n          recipients.push(this.env.contactdata[id]);\n\n          // group is added, expand it\n          if (id.charAt(0) == 'E' && this.env.contactdata[id].indexOf('@') < 0 && input.length) {\n            var gid = id.substr(1);\n            this.group2expand[gid] = { name:this.env.contactdata[id], input:input.get(0) };\n            this.http_request('group-expand', {_source: this.env.source, _gid: gid}, false);\n          }\n        }\n      }\n    }\n\n    if (recipients.length && input.length) {\n      var oldval = input.val(), rx = new RegExp(RegExp.escape(delim) + '\\\\s*$');\n      if (oldval && !rx.test(oldval))\n        oldval += delim + ' ';\n      input.val(oldval + recipients.join(delim + ' ') + delim + ' ').change();\n      this.triggerEvent('add-recipient', { field:field, recipients:recipients });\n    }\n\n    return recipients.length;\n  };\n\n  // checks the input fields before sending a message\n  this.check_compose_input = function(cmd)\n  {\n    // check input fields\n    var input_to = $(\"[name='_to']\"),\n      input_cc = $(\"[name='_cc']\"),\n      input_bcc = $(\"[name='_bcc']\"),\n      input_from = $(\"[name='_from']\"),\n      input_subject = $(\"[name='_subject']\");\n\n    // check sender (if have no identities)\n    if (input_from.prop('type') == 'text' && !rcube_check_email(input_from.val(), true)) {\n      alert(this.get_label('nosenderwarning'));\n      input_from.focus();\n      return false;\n    }\n\n    // check for empty recipient\n    var recipients = input_to.val() ? input_to.val() : (input_cc.val() ? input_cc.val() : input_bcc.val());\n    if (!rcube_check_email(recipients.replace(/^\\s+/, '').replace(/[\\s,;]+$/, ''), true)) {\n      alert(this.get_label('norecipientwarning'));\n      input_to.focus();\n      return false;\n    }\n\n    // check if all files has been uploaded\n    for (var key in this.env.attachments) {\n      if (typeof this.env.attachments[key] === 'object' && !this.env.attachments[key].complete) {\n        alert(this.get_label('notuploadedwarning'));\n        return false;\n      }\n    }\n\n    // display localized warning for missing subject\n    if (input_subject.val() == '') {\n      var buttons = {},\n        myprompt = $('<div class=\"prompt\">').html('<div class=\"message\">' + this.get_label('nosubjectwarning') + '</div>')\n          .appendTo(document.body),\n        prompt_value = $('<input>').attr({type: 'text', size: 30}).val(this.get_label('nosubject'))\n          .appendTo(myprompt),\n        save_func = function() {\n          input_subject.val(prompt_value.val());\n          myprompt.dialog('close');\n          ref.command(cmd, { nocheck:true });  // repeat command which triggered this\n        };\n\n      buttons[this.get_label('sendmessage')] = function() {\n        save_func($(this));\n      };\n      buttons[this.get_label('cancel')] = function() {\n        input_subject.focus();\n        $(this).dialog('close');\n      };\n\n      myprompt.dialog({\n        modal: true,\n        resizable: false,\n        buttons: buttons,\n        close: function(event, ui) { $(this).remove(); }\n      });\n\n      prompt_value.select().keydown(function(e) {\n        if (e.which == 13) save_func();\n      });\n\n      return false;\n    }\n\n    // check for empty body\n    if (!this.editor.get_content() && !confirm(this.get_label('nobodywarning'))) {\n      this.editor.focus();\n      return false;\n    }\n\n    // move body from html editor to textarea (just to be sure, #1485860)\n    this.editor.save();\n\n    return true;\n  };\n\n  this.toggle_editor = function(props, obj, e)\n  {\n    // @todo: this should work also with many editors on page\n    var result = this.editor.toggle(props.html, props.noconvert || false);\n\n    // satisfy the expectations of aftertoggle-editor event subscribers\n    props.mode = props.html ? 'html' : 'plain';\n\n    if (!result && e) {\n      // fix selector value if operation failed\n      props.mode = props.html ? 'plain' : 'html';\n      $(e.target).filter('select').val(props.mode);\n    }\n\n    if (result) {\n      // update internal format flag\n      $(\"input[name='_is_html']\").val(props.html ? 1 : 0);\n    }\n\n    return result;\n  };\n\n  this.insert_response = function(key)\n  {\n    var insert = this.env.textresponses[key] ? this.env.textresponses[key].text : null;\n\n    if (!insert)\n      return false;\n\n    this.editor.replace(insert);\n  };\n\n  /**\n   * Open the dialog to save a new canned response\n   */\n  this.save_response = function()\n  {\n    // show dialog to enter a name and to modify the text to be saved\n    var buttons = {}, text = this.editor.get_content({selection: true, format: 'text', nosig: true}),\n      html = '<form class=\"propform\">' +\n      '<div class=\"prop block\"><label>' + this.get_label('responsename') + '</label>' +\n      '<input type=\"text\" name=\"name\" id=\"ffresponsename\" size=\"40\" /></div>' +\n      '<div class=\"prop block\"><label>' + this.get_label('responsetext') + '</label>' +\n      '<textarea name=\"text\" id=\"ffresponsetext\" cols=\"40\" rows=\"8\"></textarea></div>' +\n      '</form>';\n\n    buttons[this.gettext('save')] = function(e) {\n      var name = $('#ffresponsename').val(),\n        text = $('#ffresponsetext').val();\n\n      if (!text) {\n        $('#ffresponsetext').select();\n        return false;\n      }\n      if (!name)\n        name = text.substring(0,40);\n\n      var lock = ref.display_message(ref.get_label('savingresponse'), 'loading');\n      ref.http_post('settings/responses', { _insert:1, _name:name, _text:text }, lock);\n      $(this).dialog('close');\n    };\n\n    buttons[this.gettext('cancel')] = function() {\n      $(this).dialog('close');\n    };\n\n    this.show_popup_dialog(html, this.gettext('newresponse'), buttons, {button_classes: ['mainaction']});\n\n    $('#ffresponsetext').val(text);\n    $('#ffresponsename').select();\n  };\n\n  this.add_response_item = function(response)\n  {\n    var key = response.key;\n    this.env.textresponses[key] = response;\n\n    // append to responses list\n    if (this.gui_objects.responseslist) {\n      var li = $('<li>').appendTo(this.gui_objects.responseslist);\n      $('<a>').addClass('insertresponse active')\n        .attr('href', '#')\n        .attr('rel', key)\n        .attr('tabindex', '0')\n        .html(this.quote_html(response.name))\n        .appendTo(li)\n        .mousedown(function(e){\n          return rcube_event.cancel(e);\n        })\n        .bind('mouseup keypress', function(e){\n          if (e.type == 'mouseup' || rcube_event.get_keycode(e) == 13) {\n            ref.command('insert-response', $(this).attr('rel'));\n            $(document.body).trigger('mouseup');  // hides the menu\n            return rcube_event.cancel(e);\n          }\n        });\n    }\n  };\n\n  this.edit_responses = function()\n  {\n    // TODO: implement inline editing of responses\n  };\n\n  this.delete_response = function(key)\n  {\n    if (!key && this.responses_list) {\n      var selection = this.responses_list.get_selection();\n      key = selection[0];\n    }\n\n    // submit delete request\n    if (key && confirm(this.get_label('deleteresponseconfirm'))) {\n      this.http_post('settings/delete-response', { _key: key }, false);\n    }\n  };\n\n  // updates spellchecker buttons on state change\n  this.spellcheck_state = function()\n  {\n    var active = this.editor.spellcheck_state();\n\n    $.each(this.buttons.spellcheck || [], function(i, v) {\n      $('#' + v.id)[active ? 'addClass' : 'removeClass']('selected');\n    });\n\n    return active;\n  };\n\n  // get selected language\n  this.spellcheck_lang = function()\n  {\n    return this.editor.get_language();\n  };\n\n  this.spellcheck_lang_set = function(lang)\n  {\n    this.editor.set_language(lang);\n  };\n\n  // resume spellchecking, highlight provided mispellings without new ajax request\n  this.spellcheck_resume = function(data)\n  {\n    this.editor.spellcheck_resume(data);\n  };\n\n  this.set_draft_id = function(id)\n  {\n    if (id && id != this.env.draft_id) {\n      var filter = {task: 'mail', action: ''},\n        rc = this.opener(false, filter) || this.opener(true, filter);\n\n      // refresh the drafts folder in the opener window\n      if (rc && rc.env.mailbox == this.env.drafts_mailbox)\n        rc.command('checkmail');\n\n      this.env.draft_id = id;\n      $(\"input[name='_draft_saveid']\").val(id);\n\n      // reset history of hidden iframe used for saving draft (#1489643)\n      // but don't do this on timer-triggered draft-autosaving (#1489789)\n      if (window.frames['savetarget'] && window.frames['savetarget'].history && !this.draft_autosave_submit) {\n        window.frames['savetarget'].history.back();\n      }\n\n      this.draft_autosave_submit = false;\n    }\n\n    // always remove local copy upon saving as draft\n    this.remove_compose_data(this.env.compose_id);\n    this.compose_skip_unsavedcheck = false;\n  };\n\n  this.auto_save_start = function()\n  {\n    if (this.env.draft_autosave) {\n      this.draft_autosave_submit = false;\n      this.save_timer = setTimeout(function(){\n          ref.draft_autosave_submit = true;  // set auto-saved flag (#1489789)\n          ref.command(\"savedraft\");\n      }, this.env.draft_autosave * 1000);\n    }\n\n    // save compose form content to local storage every 5 seconds\n    if (!this.local_save_timer && window.localStorage && this.env.save_localstorage) {\n      // track typing activity and only save on changes\n      this.compose_type_activity = this.compose_type_activity_last = 0;\n      $(document).bind('keypress', function(e){ ref.compose_type_activity++; });\n\n      this.local_save_timer = setInterval(function(){\n        if (ref.compose_type_activity > ref.compose_type_activity_last) {\n          ref.save_compose_form_local();\n          ref.compose_type_activity_last = ref.compose_type_activity;\n        }\n      }, 5000);\n\n      $(window).unload(function() {\n        // remove copy from local storage if compose screen is left after warning\n        if (!ref.env.server_error)\n          ref.remove_compose_data(ref.env.compose_id);\n      });\n    }\n\n    // check for unsaved changes before leaving the compose page\n    if (!window.onbeforeunload) {\n      window.onbeforeunload = function() {\n        if (!ref.compose_skip_unsavedcheck && ref.cmp_hash != ref.compose_field_hash()) {\n          return ref.get_label('notsentwarning');\n        }\n      };\n    }\n\n    // Unlock interface now that saving is complete\n    this.busy = false;\n  };\n\n  this.compose_field_hash = function(save)\n  {\n    // check input fields\n    var i, id, val, str = '', hash_fields = ['to', 'cc', 'bcc', 'subject'];\n\n    for (i=0; i<hash_fields.length; i++)\n      if (val = $('[name=\"_' + hash_fields[i] + '\"]').val())\n        str += val + ':';\n\n    str += this.editor.get_content({refresh: false});\n\n    if (this.env.attachments)\n      for (id in this.env.attachments)\n        str += id;\n\n    if (save)\n      this.cmp_hash = str;\n\n    return str;\n  };\n\n  // store the contents of the compose form to localstorage\n  this.save_compose_form_local = function()\n  {\n    // feature is disabled\n    if (!this.env.save_localstorage)\n      return;\n\n    var formdata = { session:this.env.session_id, changed:new Date().getTime() },\n      ed, empty = true;\n\n    // get fresh content from editor\n    this.editor.save();\n\n    if (this.env.draft_id) {\n      formdata.draft_id = this.env.draft_id;\n    }\n    if (this.env.reply_msgid) {\n      formdata.reply_msgid = this.env.reply_msgid;\n    }\n\n    $('input, select, textarea', this.gui_objects.messageform).each(function(i, elem) {\n      switch (elem.tagName.toLowerCase()) {\n        case 'input':\n          if (elem.type == 'button' || elem.type == 'submit' || (elem.type == 'hidden' && elem.name != '_is_html')) {\n            break;\n          }\n          formdata[elem.name] = elem.type != 'checkbox' || elem.checked ? $(elem).val() : '';\n\n          if (formdata[elem.name] != '' && elem.type != 'hidden')\n            empty = false;\n          break;\n\n        case 'select':\n          formdata[elem.name] = $('option:checked', elem).val();\n          break;\n\n        default:\n          formdata[elem.name] = $(elem).val();\n          if (formdata[elem.name] != '')\n            empty = false;\n      }\n    });\n\n    if (!empty) {\n      var index = this.local_storage_get_item('compose.index', []),\n        key = this.env.compose_id;\n\n      if ($.inArray(key, index) < 0) {\n        index.push(key);\n      }\n\n      this.local_storage_set_item('compose.' + key, formdata, true);\n      this.local_storage_set_item('compose.index', index);\n    }\n  };\n\n  // write stored compose data back to form\n  this.restore_compose_form = function(key, html_mode)\n  {\n    var ed, formdata = this.local_storage_get_item('compose.' + key, true);\n\n    if (formdata && typeof formdata == 'object') {\n      $.each(formdata, function(k, value) {\n        if (k[0] == '_') {\n          var elem = $(\"*[name='\"+k+\"']\");\n          if (elem[0] && elem[0].type == 'checkbox') {\n            elem.prop('checked', value != '');\n          }\n          else {\n            elem.val(value);\n          }\n        }\n      });\n\n      // initialize HTML editor\n      if ((formdata._is_html == '1' && !html_mode) || (formdata._is_html != '1' && html_mode)) {\n        this.command('toggle-editor', {id: this.env.composebody, html: !html_mode, noconvert: true});\n      }\n    }\n  };\n\n  // remove stored compose data from localStorage\n  this.remove_compose_data = function(key)\n  {\n    var index = this.local_storage_get_item('compose.index', []);\n\n    if ($.inArray(key, index) >= 0) {\n      this.local_storage_remove_item('compose.' + key);\n      this.local_storage_set_item('compose.index', $.grep(index, function(val,i) { return val != key; }));\n    }\n  };\n\n  // clear all stored compose data of this user\n  this.clear_compose_data = function()\n  {\n    var i, index = this.local_storage_get_item('compose.index', []);\n\n    for (i=0; i < index.length; i++) {\n      this.local_storage_remove_item('compose.' + index[i]);\n    }\n\n    this.local_storage_remove_item('compose.index');\n  };\n\n  this.change_identity = function(obj, show_sig)\n  {\n    if (!obj || !obj.options)\n      return false;\n\n    if (!show_sig)\n      show_sig = this.env.show_sig;\n\n    var id = obj.options[obj.selectedIndex].value,\n      sig = this.env.identity,\n      delim = this.env.recipients_separator,\n      rx_delim = RegExp.escape(delim);\n\n    // enable manual signature insert\n    if (this.env.signatures && this.env.signatures[id]) {\n      this.enable_command('insert-sig', true);\n      this.env.compose_commands.push('insert-sig');\n    }\n    else\n      this.enable_command('insert-sig', false);\n\n    // first function execution\n    if (!this.env.identities_initialized) {\n      this.env.identities_initialized = true;\n      if (this.env.show_sig_later)\n        this.env.show_sig = true;\n      if (this.env.opened_extwin)\n        return;\n    }\n\n    // update reply-to/bcc fields with addresses defined in identities\n    $.each(['replyto', 'bcc'], function() {\n      var rx, key = this,\n        old_val = sig && ref.env.identities[sig] ? ref.env.identities[sig][key] : '',\n        new_val = id && ref.env.identities[id] ? ref.env.identities[id][key] : '',\n        input = $('[name=\"_'+key+'\"]'), input_val = input.val();\n\n      // remove old address(es)\n      if (old_val && input_val) {\n        rx = new RegExp('\\\\s*' + RegExp.escape(old_val) + '\\\\s*');\n        input_val = input_val.replace(rx, '');\n      }\n\n      // cleanup\n      rx = new RegExp(rx_delim + '\\\\s*' + rx_delim, 'g');\n      input_val = String(input_val).replace(rx, delim);\n      rx = new RegExp('^[\\\\s' + rx_delim + ']+');\n      input_val = input_val.replace(rx, '');\n\n      // add new address(es)\n      if (new_val && input_val.indexOf(new_val) == -1 && input_val.indexOf(new_val.replace(/\"/g, '')) == -1) {\n        if (input_val) {\n          rx = new RegExp('[' + rx_delim + '\\\\s]+$')\n          input_val = input_val.replace(rx, '') + delim + ' ';\n        }\n\n        input_val += new_val + delim + ' ';\n      }\n\n      if (old_val || new_val)\n        input.val(input_val).change();\n    });\n\n    this.editor.change_signature(id, show_sig);\n    this.env.identity = id;\n    this.triggerEvent('change_identity');\n    return true;\n  };\n\n  // upload (attachment) file\n  this.upload_file = function(form, action, lock)\n  {\n    if (!form)\n      return;\n\n    // count files and size on capable browser\n    var size = 0, numfiles = 0;\n\n    $('input[type=file]', form).each(function(i, field) {\n      var files = field.files ? field.files.length : (field.value ? 1 : 0);\n\n      // check file size\n      if (field.files) {\n        for (var i=0; i < files; i++)\n          size += field.files[i].size;\n      }\n\n      numfiles += files;\n    });\n\n    // create hidden iframe and post upload form\n    if (numfiles) {\n      if (this.env.max_filesize && this.env.filesizeerror && size > this.env.max_filesize) {\n        this.display_message(this.env.filesizeerror, 'error');\n        return false;\n      }\n\n      var frame_name = this.async_upload_form(form, action || 'upload', function(e) {\n        var d, content = '';\n        try {\n          if (this.contentDocument) {\n            d = this.contentDocument;\n          } else if (this.contentWindow) {\n            d = this.contentWindow.document;\n          }\n          content = d.childNodes[1].innerHTML;\n        } catch (err) {}\n\n        if (!content.match(/add2attachment/) && (!bw.opera || (ref.env.uploadframe && ref.env.uploadframe == e.data.ts))) {\n          if (!content.match(/display_message/))\n            ref.display_message(ref.get_label('fileuploaderror'), 'error');\n          ref.remove_from_attachment_list(e.data.ts);\n\n          if (lock)\n            ref.set_busy(false, null, lock);\n        }\n        // Opera hack: handle double onload\n        if (bw.opera)\n          ref.env.uploadframe = e.data.ts;\n      });\n\n      // display upload indicator and cancel button\n      var content = '<span>' + this.get_label('uploading' + (numfiles > 1 ? 'many' : '')) + '</span>',\n        ts = frame_name.replace(/^rcmupload/, '');\n\n      this.add2attachment_list(ts, { name:'', html:content, classname:'uploading', frame:frame_name, complete:false });\n\n      // upload progress support\n      if (this.env.upload_progress_time) {\n        this.upload_progress_start('upload', ts);\n      }\n\n      // set reference to the form object\n      this.gui_objects.attachmentform = form;\n      return true;\n    }\n  };\n\n  // add file name to attachment list\n  // called from upload page\n  this.add2attachment_list = function(name, att, upload_id)\n  {\n    if (upload_id)\n      this.triggerEvent('fileuploaded', {name: name, attachment: att, id: upload_id});\n\n    if (!this.env.attachments)\n      this.env.attachments = {};\n\n    if (upload_id && this.env.attachments[upload_id])\n      delete this.env.attachments[upload_id];\n\n    this.env.attachments[name] = att;\n\n    if (!this.gui_objects.attachmentlist)\n      return false;\n\n    if (!att.complete && this.env.loadingicon)\n      att.html = '<img src=\"'+this.env.loadingicon+'\" alt=\"\" class=\"uploading\" />' + att.html;\n\n    if (!att.complete && att.frame)\n      att.html = '<a title=\"'+this.get_label('cancel')+'\" onclick=\"return rcmail.cancel_attachment_upload(\\''+name+'\\', \\''+att.frame+'\\');\" href=\"#cancelupload\" class=\"cancelupload\">'\n        + (this.env.cancelicon ? '<img src=\"'+this.env.cancelicon+'\" alt=\"'+this.get_label('cancel')+'\" />' : this.get_label('cancel')) + '</a>' + att.html;\n\n    var indicator, li = $('<li>');\n\n    li.attr('id', name)\n      .addClass(att.classname)\n      .html(att.html)\n      .on('mouseover', function() { rcube_webmail.long_subject_title_ex(this); });\n\n    // replace indicator's li\n    if (upload_id && (indicator = document.getElementById(upload_id))) {\n      li.replaceAll(indicator);\n    }\n    else { // add new li\n      li.appendTo(this.gui_objects.attachmentlist);\n    }\n\n    // set tabindex attribute\n    var tabindex = $(this.gui_objects.attachmentlist).attr('data-tabindex') || '0';\n    li.find('a').attr('tabindex', tabindex);\n\n    return true;\n  };\n\n  this.remove_from_attachment_list = function(name)\n  {\n    if (this.env.attachments) {\n      delete this.env.attachments[name];\n      $('#'+name).remove();\n    }\n  };\n\n  this.remove_attachment = function(name)\n  {\n    if (name && this.env.attachments[name])\n      this.http_post('remove-attachment', { _id:this.env.compose_id, _file:name });\n\n    return true;\n  };\n\n  this.cancel_attachment_upload = function(name, frame_name)\n  {\n    if (!name || !frame_name)\n      return false;\n\n    this.remove_from_attachment_list(name);\n    $(\"iframe[name='\"+frame_name+\"']\").remove();\n    return false;\n  };\n\n  this.upload_progress_start = function(action, name)\n  {\n    setTimeout(function() { ref.http_request(action, {_progress: name}); },\n      this.env.upload_progress_time * 1000);\n  };\n\n  this.upload_progress_update = function(param)\n  {\n    var elem = $('#'+param.name + ' > span');\n\n    if (!elem.length || !param.text)\n      return;\n\n    elem.text(param.text);\n\n    if (!param.done)\n      this.upload_progress_start(param.action, param.name);\n  };\n\n  // send remote request to add a new contact\n  this.add_contact = function(value)\n  {\n    if (value)\n      this.http_post('addcontact', {_address: value});\n\n    return true;\n  };\n\n  // send remote request to search mail or contacts\n  this.qsearch = function(value)\n  {\n    if (value != '') {\n      var r, lock = this.set_busy(true, 'searching'),\n        url = this.search_params(value),\n        action = this.env.action == 'compose' && this.contact_list ? 'search-contacts' : 'search';\n\n      if (this.message_list)\n        this.clear_message_list();\n      else if (this.contact_list)\n        this.list_contacts_clear();\n\n      if (this.env.source)\n        url._source = this.env.source;\n      if (this.env.group)\n        url._gid = this.env.group;\n\n      // reset vars\n      this.env.current_page = 1;\n\n      r = this.http_request(action, url, lock);\n\n      this.env.qsearch = {lock: lock, request: r};\n      this.enable_command('set-listmode', this.env.threads && (this.env.search_scope || 'base') == 'base');\n\n      return true;\n    }\n\n    return false;\n  };\n\n  this.continue_search = function(request_id)\n  {\n    var lock = this.set_busy(true, 'stillsearching');\n\n    setTimeout(function() {\n      var url = ref.search_params();\n      url._continue = request_id;\n      ref.env.qsearch = { lock: lock, request: ref.http_request('search', url, lock) };\n    }, 100);\n  };\n\n  // build URL params for search\n  this.search_params = function(search, filter)\n  {\n    var n, url = {}, mods_arr = [],\n      mods = this.env.search_mods,\n      scope = this.env.search_scope || 'base',\n      mbox = scope == 'all' ? '*' : this.env.mailbox;\n\n    if (!filter && this.gui_objects.search_filter)\n      filter = this.gui_objects.search_filter.value;\n\n    if (!search && this.gui_objects.qsearchbox)\n      search = this.gui_objects.qsearchbox.value;\n\n    if (filter)\n      url._filter = filter;\n\n    if (search) {\n      url._q = search;\n\n      if (mods && this.message_list)\n        mods = mods[mbox] || mods['*'];\n\n      if (mods) {\n        for (n in mods)\n          mods_arr.push(n);\n        url._headers = mods_arr.join(',');\n      }\n    }\n\n    if (scope)\n      url._scope = scope;\n    if (mbox && scope != 'all')\n      url._mbox = mbox;\n\n    return url;\n  };\n\n  // reset search filter\n  this.reset_search_filter = function()\n  {\n    this.filter_disabled = true;\n    if (this.gui_objects.search_filter)\n      $(this.gui_objects.search_filter).val('ALL').change();\n    this.filter_disabled = false;\n  };\n\n  // reset quick-search form\n  this.reset_qsearch = function(all)\n  {\n    if (this.gui_objects.qsearchbox)\n      this.gui_objects.qsearchbox.value = '';\n\n    if (this.env.qsearch)\n      this.abort_request(this.env.qsearch);\n\n    if (all) {\n      this.env.search_scope = 'base';\n      this.reset_search_filter();\n    }\n\n    this.env.qsearch = null;\n    this.env.search_request = null;\n    this.env.search_id = null;\n\n    this.enable_command('set-listmode', this.env.threads);\n  };\n\n  this.set_searchscope = function(scope)\n  {\n    var old = this.env.search_scope;\n    this.env.search_scope = scope;\n\n    // re-send search query with new scope\n    if (scope != old && this.env.search_request) {\n      if (!this.qsearch(this.gui_objects.qsearchbox.value) && this.env.search_filter && this.env.search_filter != 'ALL')\n        this.filter_mailbox(this.env.search_filter);\n      if (scope != 'all')\n        this.select_folder(this.env.mailbox, '', true);\n    }\n  };\n\n  this.set_searchmods = function(mods)\n  {\n    var mbox = this.env.mailbox,\n      scope = this.env.search_scope || 'base';\n\n    if (scope == 'all')\n      mbox = '*';\n\n    if (!this.env.search_mods)\n      this.env.search_mods = {};\n\n    if (mbox)\n      this.env.search_mods[mbox] = mods;\n  };\n\n  this.is_multifolder_listing = function()\n  {\n    return this.env.multifolder_listing !== undefined ? this.env.multifolder_listing :\n      (this.env.search_request && (this.env.search_scope || 'base') != 'base');\n  };\n\n  // action executed after mail is sent\n  this.sent_successfully = function(type, msg, folders, save_error)\n  {\n    this.display_message(msg, type);\n    this.compose_skip_unsavedcheck = true;\n\n    if (this.env.extwin) {\n      if (!save_error)\n        this.lock_form(this.gui_objects.messageform);\n\n      var filter = {task: 'mail', action: ''},\n        rc = this.opener(false, filter) || this.opener(true, filter);\n\n      if (rc) {\n        rc.display_message(msg, type);\n        // refresh the folder where sent message was saved or replied message comes from\n        if (folders && $.inArray(rc.env.mailbox, folders) >= 0) {\n          rc.command('checkmail');\n        }\n      }\n\n      if (!save_error)\n        setTimeout(function() { window.close(); }, 1000);\n    }\n    else if (!save_error) {\n      // before redirect we need to wait some time for Chrome (#1486177)\n      setTimeout(function() { ref.list_mailbox(); }, 500);\n    }\n\n    if (save_error)\n      this.env.is_sent = true;\n  };\n\n\n  /*********************************************************/\n  /*********     keyboard live-search methods      *********/\n  /*********************************************************/\n\n  // handler for keyboard events on address-fields\n  this.ksearch_keydown = function(e, obj, props)\n  {\n    if (this.ksearch_timer)\n      clearTimeout(this.ksearch_timer);\n\n    var key = rcube_event.get_keycode(e),\n      mod = rcube_event.get_modifier(e);\n\n    switch (key) {\n      case 38:  // arrow up\n      case 40:  // arrow down\n        if (!this.ksearch_visible())\n          return;\n\n        var dir = key == 38 ? 1 : 0,\n          highlight = document.getElementById('rcmkSearchItem' + this.ksearch_selected);\n\n        if (!highlight)\n          highlight = this.ksearch_pane.__ul.firstChild;\n\n        if (highlight)\n          this.ksearch_select(dir ? highlight.previousSibling : highlight.nextSibling);\n\n        return rcube_event.cancel(e);\n\n      case 9:   // tab\n        if (mod == SHIFT_KEY || !this.ksearch_visible()) {\n          this.ksearch_hide();\n          return;\n        }\n\n      case 13:  // enter\n        if (!this.ksearch_visible())\n          return false;\n\n        // insert selected address and hide ksearch pane\n        this.insert_recipient(this.ksearch_selected);\n        this.ksearch_hide();\n\n        return rcube_event.cancel(e);\n\n      case 27:  // escape\n        this.ksearch_hide();\n        return;\n\n      case 37:  // left\n      case 39:  // right\n        return;\n    }\n\n    // start timer\n    this.ksearch_timer = setTimeout(function(){ ref.ksearch_get_results(props); }, 200);\n    this.ksearch_input = obj;\n\n    return true;\n  };\n\n  this.ksearch_visible = function()\n  {\n    return this.ksearch_selected !== null && this.ksearch_selected !== undefined && this.ksearch_value;\n  };\n\n  this.ksearch_select = function(node)\n  {\n    if (this.ksearch_pane && node) {\n      this.ksearch_pane.find('li.selected').removeClass('selected').removeAttr('aria-selected');\n    }\n\n    if (node) {\n      $(node).addClass('selected').attr('aria-selected', 'true');\n      this.ksearch_selected = node._rcm_id;\n      $(this.ksearch_input).attr('aria-activedescendant', 'rcmkSearchItem' + this.ksearch_selected);\n    }\n  };\n\n  this.insert_recipient = function(id)\n  {\n    if (id === null || !this.env.contacts[id] || !this.ksearch_input)\n      return;\n\n    // get cursor pos\n    var inp_value = this.ksearch_input.value,\n      cpos = this.get_caret_pos(this.ksearch_input),\n      p = inp_value.lastIndexOf(this.ksearch_value, cpos),\n      trigger = false,\n      insert = '',\n      // replace search string with full address\n      pre = inp_value.substring(0, p),\n      end = inp_value.substring(p+this.ksearch_value.length, inp_value.length);\n\n    this.ksearch_destroy();\n\n    // insert all members of a group\n    if (typeof this.env.contacts[id] === 'object' && this.env.contacts[id].type == 'group' && !this.env.contacts[id].email) {\n      insert += this.env.contacts[id].name + this.env.recipients_delimiter;\n      this.group2expand[this.env.contacts[id].id] = $.extend({ input: this.ksearch_input }, this.env.contacts[id]);\n      this.http_request('mail/group-expand', {_source: this.env.contacts[id].source, _gid: this.env.contacts[id].id}, false);\n    }\n    else if (typeof this.env.contacts[id] === 'object' && this.env.contacts[id].name) {\n      insert = this.env.contacts[id].name + this.env.recipients_delimiter;\n      trigger = true;\n    }\n    else if (typeof this.env.contacts[id] === 'string') {\n      insert = this.env.contacts[id] + this.env.recipients_delimiter;\n      trigger = true;\n    }\n\n    this.ksearch_input.value = pre + insert + end;\n\n    // set caret to insert pos\n    this.set_caret_pos(this.ksearch_input, p + insert.length);\n\n    if (trigger) {\n      this.triggerEvent('autocomplete_insert', { field:this.ksearch_input, insert:insert, data:this.env.contacts[id] });\n      this.compose_type_activity++;\n    }\n  };\n\n  this.replace_group_recipients = function(id, recipients)\n  {\n    if (this.group2expand[id]) {\n      this.group2expand[id].input.value = this.group2expand[id].input.value.replace(this.group2expand[id].name, recipients);\n      this.triggerEvent('autocomplete_insert', { field:this.group2expand[id].input, insert:recipients });\n      this.group2expand[id] = null;\n      this.compose_type_activity++;\n    }\n  };\n\n  // address search processor\n  this.ksearch_get_results = function(props)\n  {\n    var inp_value = this.ksearch_input ? this.ksearch_input.value : null;\n\n    if (inp_value === null)\n      return;\n\n    if (this.ksearch_pane && this.ksearch_pane.is(\":visible\"))\n      this.ksearch_pane.hide();\n\n    // get string from current cursor pos to last comma\n    var cpos = this.get_caret_pos(this.ksearch_input),\n      p = inp_value.lastIndexOf(this.env.recipients_separator, cpos-1),\n      q = inp_value.substring(p+1, cpos),\n      min = this.env.autocomplete_min_length,\n      data = this.ksearch_data;\n\n    // trim query string\n    q = $.trim(q);\n\n    // Don't (re-)search if the last results are still active\n    if (q == this.ksearch_value)\n      return;\n\n    this.ksearch_destroy();\n\n    if (q.length && q.length < min) {\n      if (!this.ksearch_info) {\n        this.ksearch_info = this.display_message(\n          this.get_label('autocompletechars').replace('$min', min));\n      }\n      return;\n    }\n\n    var old_value = this.ksearch_value;\n    this.ksearch_value = q;\n\n    // ...string is empty\n    if (!q.length)\n      return;\n\n    // ...new search value contains old one and previous search was not finished or its result was empty\n    if (old_value && old_value.length && q.startsWith(old_value) && (!data || data.num <= 0) && this.env.contacts && !this.env.contacts.length)\n      return;\n\n    var sources = props && props.sources ? props.sources : [''];\n    var reqid = this.multi_thread_http_request({\n      items: sources,\n      threads: props && props.threads ? props.threads : 1,\n      action:  props && props.action ? props.action : 'mail/autocomplete',\n      postdata: { _search:q, _source:'%s' },\n      lock: this.display_message(this.get_label('searching'), 'loading')\n    });\n\n    this.ksearch_data = { id:reqid, sources:sources.slice(), num:sources.length };\n  };\n\n  this.ksearch_query_results = function(results, search, reqid)\n  {\n    // trigger multi-thread http response callback\n    this.multi_thread_http_response(results, reqid);\n\n    // search stopped in meantime?\n    if (!this.ksearch_value)\n      return;\n\n    // ignore this outdated search response\n    if (this.ksearch_input && search != this.ksearch_value)\n      return;\n\n    // display search results\n    var i, id, len, ul, text, type, init,\n      value = this.ksearch_value,\n      maxlen = this.env.autocomplete_max ? this.env.autocomplete_max : 15;\n\n    // create results pane if not present\n    if (!this.ksearch_pane) {\n      ul = $('<ul>');\n      this.ksearch_pane = $('<div>').attr('id', 'rcmKSearchpane').attr('role', 'listbox')\n        .css({ position:'absolute', 'z-index':30000 }).append(ul).appendTo(document.body);\n      this.ksearch_pane.__ul = ul[0];\n    }\n\n    ul = this.ksearch_pane.__ul;\n\n    // remove all search results or add to existing list if parallel search\n    if (reqid && this.ksearch_pane.data('reqid') == reqid) {\n      maxlen -= ul.childNodes.length;\n    }\n    else {\n      this.ksearch_pane.data('reqid', reqid);\n      init = 1;\n      // reset content\n      ul.innerHTML = '';\n      this.env.contacts = [];\n      // move the results pane right under the input box\n      var pos = $(this.ksearch_input).offset();\n      this.ksearch_pane.css({ left:pos.left+'px', top:(pos.top + this.ksearch_input.offsetHeight)+'px', display: 'none'});\n    }\n\n    // add each result line to list\n    if (results && (len = results.length)) {\n      for (i=0; i < len && maxlen > 0; i++) {\n        text = typeof results[i] === 'object' ? (results[i].display || results[i].name) : results[i];\n        type = typeof results[i] === 'object' ? results[i].type : '';\n        id = i + this.env.contacts.length;\n        $('<li>').attr('id', 'rcmkSearchItem' + id)\n          .attr('role', 'option')\n          .html('<i class=\"icon\"></i>' + this.quote_html(text.replace(new RegExp('('+RegExp.escape(value)+')', 'ig'), '##$1%%')).replace(/##([^%]+)%%/g, '<b>$1</b>'))\n          .addClass(type || '')\n          .appendTo(ul)\n          .mouseover(function() { ref.ksearch_select(this); })\n          .mouseup(function() { ref.ksearch_click(this); })\n          .get(0)._rcm_id = id;\n        maxlen -= 1;\n      }\n    }\n\n    if (ul.childNodes.length) {\n      // set the right aria-* attributes to the input field\n      $(this.ksearch_input)\n        .attr('aria-haspopup', 'true')\n        .attr('aria-expanded', 'true')\n        .attr('aria-owns', 'rcmKSearchpane');\n\n      this.ksearch_pane.show();\n\n      // select the first\n      if (!this.env.contacts.length) {\n        this.ksearch_select($('li:first', ul).get(0));\n      }\n    }\n\n    if (len)\n      this.env.contacts = this.env.contacts.concat(results);\n\n    if (this.ksearch_data.id == reqid)\n      this.ksearch_data.num--;\n  };\n\n  this.ksearch_click = function(node)\n  {\n    if (this.ksearch_input)\n      this.ksearch_input.focus();\n\n    this.insert_recipient(node._rcm_id);\n    this.ksearch_hide();\n  };\n\n  this.ksearch_blur = function()\n  {\n    if (this.ksearch_timer)\n      clearTimeout(this.ksearch_timer);\n\n    this.ksearch_input = null;\n    this.ksearch_hide();\n  };\n\n  this.ksearch_hide = function()\n  {\n    this.ksearch_selected = null;\n    this.ksearch_value = '';\n\n    if (this.ksearch_pane)\n      this.ksearch_pane.hide();\n\n    $(this.ksearch_input)\n      .attr('aria-haspopup', 'false')\n      .attr('aria-expanded', 'false')\n      .removeAttr('aria-activedescendant')\n      .removeAttr('aria-owns');\n\n    this.ksearch_destroy();\n  };\n\n  // Clears autocomplete data/requests\n  this.ksearch_destroy = function()\n  {\n    if (this.ksearch_data)\n      this.multi_thread_request_abort(this.ksearch_data.id);\n\n    if (this.ksearch_info)\n      this.hide_message(this.ksearch_info);\n\n    if (this.ksearch_msg)\n      this.hide_message(this.ksearch_msg);\n\n    this.ksearch_data = null;\n    this.ksearch_info = null;\n    this.ksearch_msg = null;\n  };\n\n\n  /*********************************************************/\n  /*********         address book methods          *********/\n  /*********************************************************/\n\n  this.contactlist_keypress = function(list)\n  {\n    if (list.key_pressed == list.DELETE_KEY)\n      this.command('delete');\n  };\n\n  this.contactlist_select = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n\n    var n, id, sid, contact, writable = false,\n      selected = list.selection.length,\n      source = this.env.source ? this.env.address_sources[this.env.source] : null;\n\n    // we don't have dblclick handler here, so use 200 instead of this.dblclick_time\n    if (this.env.contentframe && (id = list.get_single_selection()))\n      this.preview_timer = setTimeout(function(){ ref.load_contact(id, 'show'); }, 200);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n\n    if (selected) {\n      list.draggable = false;\n\n      // no source = search result, we'll need to detect if any of\n      // selected contacts are in writable addressbook to enable edit/delete\n      // we'll also need to know sources used in selection for copy\n      // and group-addmember operations (drag&drop)\n      this.env.selection_sources = [];\n\n      if (source) {\n        this.env.selection_sources.push(this.env.source);\n      }\n\n      for (n in list.selection) {\n        contact = list.data[list.selection[n]];\n        if (!source) {\n          sid = String(list.selection[n]).replace(/^[^-]+-/, '');\n          if (sid && this.env.address_sources[sid]) {\n            writable = writable || (!this.env.address_sources[sid].readonly && !contact.readonly);\n            this.env.selection_sources.push(sid);\n          }\n        }\n        else {\n          writable = writable || (!source.readonly && !contact.readonly);\n        }\n\n        if (contact._type != 'group')\n          list.draggable = true;\n      }\n\n      this.env.selection_sources = $.unique(this.env.selection_sources);\n    }\n\n    // if a group is currently selected, and there is at least one contact selected\n    // thend we can enable the group-remove-selected command\n    this.enable_command('group-remove-selected', this.env.group && selected && writable);\n    this.enable_command('compose', this.env.group || selected);\n    this.enable_command('print', selected == 1);\n    this.enable_command('export-selected', 'copy', selected > 0);\n    this.enable_command('edit', id && writable);\n    this.enable_command('delete', 'move', selected && writable);\n\n    return false;\n  };\n\n  this.list_contacts = function(src, group, page)\n  {\n    var win, folder, url = {},\n      refresh = src === undefined && group === undefined && page === undefined,\n      target = window;\n\n    if (!src)\n      src = this.env.source;\n\n    if (refresh)\n      group = this.env.group;\n\n    if (page && this.current_page == page && src == this.env.source && group == this.env.group)\n      return false;\n\n    if (src != this.env.source) {\n      page = this.env.current_page = 1;\n      this.reset_qsearch();\n    }\n    else if (!refresh && group != this.env.group)\n      page = this.env.current_page = 1;\n\n    if (this.env.search_id)\n      folder = 'S'+this.env.search_id;\n    else if (!this.env.search_request)\n      folder = group ? 'G'+src+group : src;\n\n    this.env.source = src;\n    this.env.group = group;\n\n    // truncate groups listing stack\n    var index = $.inArray(this.env.group, this.env.address_group_stack);\n    if (index < 0)\n      this.env.address_group_stack = [];\n    else\n      this.env.address_group_stack = this.env.address_group_stack.slice(0,index);\n\n    // make sure the current group is on top of the stack\n    if (this.env.group) {\n      this.env.address_group_stack.push(this.env.group);\n\n      // mark the first group on the stack as selected in the directory list\n      folder = 'G'+src+this.env.address_group_stack[0];\n    }\n    else if (this.gui_objects.addresslist_title) {\n        $(this.gui_objects.addresslist_title).html(this.get_label('contacts'));\n    }\n\n    if (!this.env.search_id)\n      this.select_folder(folder, '', true);\n\n    // load contacts remotely\n    if (this.gui_objects.contactslist) {\n      this.list_contacts_remote(src, group, page);\n      return;\n    }\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      target = win;\n      url._framed = 1;\n    }\n\n    if (group)\n      url._gid = group;\n    if (page)\n      url._page = page;\n    if (src)\n      url._source = src;\n\n    // also send search request to get the correct listing\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    this.set_busy(true, 'loading');\n    this.location_href(url, target);\n  };\n\n  // send remote request to load contacts list\n  this.list_contacts_remote = function(src, group, page)\n  {\n    // clear message list first\n    this.list_contacts_clear();\n\n    // send request to server\n    var url = {}, lock = this.set_busy(true, 'loading');\n\n    if (src)\n      url._source = src;\n    if (page)\n      url._page = page;\n    if (group)\n      url._gid = group;\n\n    this.env.source = src;\n    this.env.group = group;\n\n    // also send search request to get the right records\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    this.http_request(this.env.task == 'mail' ? 'list-contacts' : 'list', url, lock);\n  };\n\n  this.list_contacts_clear = function()\n  {\n    this.contact_list.data = {};\n    this.contact_list.clear(true);\n    this.show_contentframe(false);\n    this.enable_command('delete', 'move', 'copy', 'print', false);\n    this.enable_command('compose', this.env.group);\n  };\n\n  this.set_group_prop = function(prop)\n  {\n    if (this.gui_objects.addresslist_title) {\n      var boxtitle = $(this.gui_objects.addresslist_title).html('');  // clear contents\n\n      // add link to pop back to parent group\n      if (this.env.address_group_stack.length > 1) {\n        $('<a href=\"#list\">...</a>')\n          .attr('title', this.gettext('uponelevel'))\n          .addClass('poplink')\n          .appendTo(boxtitle)\n          .click(function(e){ return ref.command('popgroup','',this); });\n        boxtitle.append('&nbsp;&raquo;&nbsp;');\n      }\n\n      boxtitle.append($('<span>').text(prop.name));\n    }\n\n    this.triggerEvent('groupupdate', prop);\n  };\n\n  // load contact record\n  this.load_contact = function(cid, action, framed)\n  {\n    var win, url = {}, target = window,\n      rec = this.contact_list ? this.contact_list.data[cid] : null;\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      url._framed = 1;\n      target = win;\n      this.show_contentframe(true);\n\n      // load dummy content, unselect selected row(s)\n      if (!cid)\n        this.contact_list.clear_selection();\n\n      this.enable_command('compose', rec && rec.email);\n      this.enable_command('export-selected', 'print', rec && rec._type != 'group');\n    }\n    else if (framed)\n      return false;\n\n    if (action && (cid || action == 'add') && !this.drag_active) {\n      if (this.env.group)\n        url._gid = this.env.group;\n\n      if (this.env.search_request)\n        url._search = this.env.search_request;\n\n      url._action = action;\n      url._source = this.env.source;\n      url._cid = cid;\n\n      this.location_href(url, target, true);\n    }\n\n    return true;\n  };\n\n  // add/delete member to/from the group\n  this.group_member_change = function(what, cid, source, gid)\n  {\n    if (what != 'add')\n      what = 'del';\n\n    var label = this.get_label(what == 'add' ? 'addingmember' : 'removingmember'),\n      lock = this.display_message(label, 'loading'),\n      post_data = {_cid: cid, _source: source, _gid: gid};\n\n    this.http_post('group-'+what+'members', post_data, lock);\n  };\n\n  this.contacts_drag_menu = function(e, to)\n  {\n    var dest = to.type == 'group' ? to.source : to.id,\n      source = this.env.source;\n\n    if (!this.env.address_sources[dest] || this.env.address_sources[dest].readonly)\n      return true;\n\n    // search result may contain contacts from many sources, but if there is only one...\n    if (source == '' && this.env.selection_sources.length == 1)\n      source = this.env.selection_sources[0];\n\n    if (to.type == 'group' && dest == source) {\n      var cid = this.contact_list.get_selection().join(',');\n      this.group_member_change('add', cid, dest, to.id);\n      return true;\n    }\n    // move action is not possible, \"redirect\" to copy if menu wasn't requested\n    else if (!this.commands.move && rcube_event.get_modifier(e) != SHIFT_KEY) {\n      this.copy_contacts(to);\n      return true;\n    }\n\n    return this.drag_menu(e, to);\n  };\n\n  // copy contact(s) to the specified target (group or directory)\n  this.copy_contacts = function(to)\n  {\n    var dest = to.type == 'group' ? to.source : to.id,\n      source = this.env.source,\n      group = this.env.group ? this.env.group : '',\n      cid = this.contact_list.get_selection().join(',');\n\n    if (!cid || !this.env.address_sources[dest] || this.env.address_sources[dest].readonly)\n      return;\n\n    // search result may contain contacts from many sources, but if there is only one...\n    if (source == '' && this.env.selection_sources.length == 1)\n      source = this.env.selection_sources[0];\n\n    // tagret is a group\n    if (to.type == 'group') {\n      if (dest == source)\n        return;\n\n      var lock = this.display_message(this.get_label('copyingcontact'), 'loading'),\n        post_data = {_cid: cid, _source: this.env.source, _to: dest, _togid: to.id, _gid: group};\n\n      this.http_post('copy', post_data, lock);\n    }\n    // target is an addressbook\n    else if (to.id != source) {\n      var lock = this.display_message(this.get_label('copyingcontact'), 'loading'),\n        post_data = {_cid: cid, _source: this.env.source, _to: to.id, _gid: group};\n\n      this.http_post('copy', post_data, lock);\n    }\n  };\n\n  // move contact(s) to the specified target (group or directory)\n  this.move_contacts = function(to)\n  {\n    var dest = to.type == 'group' ? to.source : to.id,\n      source = this.env.source,\n      group = this.env.group ? this.env.group : '';\n\n    if (!this.env.address_sources[dest] || this.env.address_sources[dest].readonly)\n      return;\n\n    // search result may contain contacts from many sources, but if there is only one...\n    if (source == '' && this.env.selection_sources.length == 1)\n      source = this.env.selection_sources[0];\n\n    if (to.type == 'group') {\n      if (dest == source)\n        return;\n\n      this._with_selected_contacts('move', {_to: dest, _togid: to.id});\n    }\n    // target is an addressbook\n    else if (to.id != source)\n      this._with_selected_contacts('move', {_to: to.id});\n  };\n\n  // delete contact(s)\n  this.delete_contacts = function()\n  {\n    var undelete = this.env.source && this.env.address_sources[this.env.source].undelete;\n\n    if (!undelete && !confirm(this.get_label('deletecontactconfirm')))\n      return;\n\n    return this._with_selected_contacts('delete');\n  };\n\n  this._with_selected_contacts = function(action, post_data)\n  {\n    var selection = this.contact_list ? this.contact_list.get_selection() : [];\n\n    // exit if no contact specified or if selection is empty\n    if (!selection.length && !this.env.cid)\n      return;\n\n    var n, a_cids = [],\n      label = action == 'delete' ? 'contactdeleting' : 'movingcontact',\n      lock = this.display_message(this.get_label(label), 'loading');\n\n    if (this.env.cid)\n      a_cids.push(this.env.cid);\n    else {\n      for (n=0; n<selection.length; n++) {\n        id = selection[n];\n        a_cids.push(id);\n        this.contact_list.remove_row(id, (n == selection.length-1));\n      }\n\n      // hide content frame if we delete the currently displayed contact\n      if (selection.length == 1)\n        this.show_contentframe(false);\n    }\n\n    if (!post_data)\n      post_data = {};\n\n    post_data._source = this.env.source;\n    post_data._from = this.env.action;\n    post_data._cid = a_cids.join(',');\n\n    if (this.env.group)\n      post_data._gid = this.env.group;\n\n    // also send search request to get the right records from the next page\n    if (this.env.search_request)\n      post_data._search = this.env.search_request;\n\n    // send request to server\n    this.http_post(action, post_data, lock)\n\n    return true;\n  };\n\n  // update a contact record in the list\n  this.update_contact_row = function(cid, cols_arr, newcid, source, data)\n  {\n    var list = this.contact_list;\n\n    cid = this.html_identifier(cid);\n\n    // when in searching mode, concat cid with the source name\n    if (!list.rows[cid]) {\n      cid = cid + '-' + source;\n      if (newcid)\n        newcid = newcid + '-' + source;\n    }\n\n    list.update_row(cid, cols_arr, newcid, true);\n    list.data[cid] = data;\n  };\n\n  // add row to contacts list\n  this.add_contact_row = function(cid, cols, classes, data)\n  {\n    if (!this.gui_objects.contactslist)\n      return false;\n\n    var c, col, list = this.contact_list,\n      row = { cols:[] };\n\n    row.id = 'rcmrow' + this.html_identifier(cid);\n    row.className = 'contact ' + (classes || '');\n\n    if (list.in_selection(cid))\n      row.className += ' selected';\n\n    // add each submitted col\n    for (c in cols) {\n      col = {};\n      col.className = String(c).toLowerCase();\n      col.innerHTML = cols[c];\n      row.cols.push(col);\n    }\n\n    // store data in list member\n    list.data[cid] = data;\n    list.insert_row(row);\n\n    this.enable_command('export', list.rowcount > 0);\n  };\n\n  this.init_contact_form = function()\n  {\n    var col;\n\n    if (this.env.coltypes) {\n      this.set_photo_actions($('#ff_photo').val());\n      for (col in this.env.coltypes)\n        this.init_edit_field(col, null);\n    }\n\n    $('.contactfieldgroup .row a.deletebutton').click(function() {\n      ref.delete_edit_field(this);\n      return false;\n    });\n\n    $('select.addfieldmenu').change(function() {\n      ref.insert_edit_field($(this).val(), $(this).attr('rel'), this);\n      this.selectedIndex = 0;\n    });\n\n    // enable date pickers on date fields\n    if ($.datepicker && this.env.date_format) {\n      $.datepicker.setDefaults({\n        dateFormat: this.env.date_format,\n        changeMonth: true,\n        changeYear: true,\n        yearRange: '-120:+10',\n        showOtherMonths: true,\n        selectOtherMonths: true\n//        onSelect: function(dateText) { $(this).focus().val(dateText); }\n      });\n      $('input.datepicker').datepicker();\n    }\n\n    // Submit search form on Enter\n    if (this.env.action == 'search')\n      $(this.gui_objects.editform).append($('<input type=\"submit\">').hide())\n        .submit(function() { $('input.mainaction').click(); return false; });\n  };\n\n  // group creation dialog\n  this.group_create = function()\n  {\n    var input = $('<input>').attr('type', 'text'),\n      content = $('<label>').text(this.get_label('namex')).append(input);\n\n    this.show_popup_dialog(content, this.get_label('newgroup'),\n      [{\n        text: this.get_label('save'),\n        'class': 'mainaction',\n        click: function() {\n          var name;\n\n          if (name = input.val()) {\n            ref.http_post('group-create', {_source: ref.env.source, _name: name},\n              ref.set_busy(true, 'loading'));\n          }\n\n          $(this).dialog('close');\n        }\n      }]\n    );\n  };\n\n  // group rename dialog\n  this.group_rename = function()\n  {\n    if (!this.env.group)\n      return;\n\n    var group_name = this.env.contactgroups['G' + this.env.source + this.env.group].name,\n      input = $('<input>').attr('type', 'text').val(group_name),\n      content = $('<label>').text(this.get_label('namex')).append(input);\n\n    this.show_popup_dialog(content, this.get_label('grouprename'),\n      [{\n        text: this.get_label('save'),\n        'class': 'mainaction',\n        click: function() {\n          var name;\n\n          if ((name = input.val()) && name != group_name) {\n            ref.http_post('group-rename', {_source: ref.env.source, _gid: ref.env.group, _name: name},\n              ref.set_busy(true, 'loading'));\n          }\n\n          $(this).dialog('close');\n        }\n      }],\n      {open: function() { input.select(); }}\n    );\n  };\n\n  this.group_delete = function()\n  {\n    if (this.env.group && confirm(this.get_label('deletegroupconfirm'))) {\n      var lock = this.set_busy(true, 'groupdeleting');\n      this.http_post('group-delete', {_source: this.env.source, _gid: this.env.group}, lock);\n    }\n  };\n\n  // callback from server upon group-delete command\n  this.remove_group_item = function(prop)\n  {\n    var key = 'G'+prop.source+prop.id;\n\n    if (this.treelist.remove(key)) {\n      this.triggerEvent('group_delete', { source:prop.source, id:prop.id });\n      delete this.env.contactfolders[key];\n      delete this.env.contactgroups[key];\n    }\n\n    this.list_contacts(prop.source, 0);\n  };\n\n  //remove selected contacts from current active group\n  this.group_remove_selected = function()\n  {\n    this.http_post('group-delmembers', {_cid: this.contact_list.selection,\n      _source: this.env.source, _gid: this.env.group});\n  };\n\n  //callback after deleting contact(s) from current group\n  this.remove_group_contacts = function(props)\n  {\n    if (this.env.group !== undefined && (this.env.group === props.gid)) {\n      var n, selection = this.contact_list.get_selection();\n      for (n=0; n<selection.length; n++) {\n        id = selection[n];\n        this.contact_list.remove_row(id, (n == selection.length-1));\n      }\n    }\n  };\n\n  // callback for creating a new contact group\n  this.insert_contact_group = function(prop)\n  {\n    prop.type = 'group';\n\n    var key = 'G'+prop.source+prop.id,\n      link = $('<a>').attr('href', '#')\n        .attr('rel', prop.source+':'+prop.id)\n        .click(function() { return ref.command('listgroup', prop, this); })\n        .html(prop.name);\n\n    this.env.contactfolders[key] = this.env.contactgroups[key] = prop;\n    this.treelist.insert({ id:key, html:link, classes:['contactgroup'] }, prop.source, 'contactgroup');\n\n    this.triggerEvent('group_insert', { id:prop.id, source:prop.source, name:prop.name, li:this.treelist.get_item(key) });\n  };\n\n  // callback for renaming a contact group\n  this.update_contact_group = function(prop)\n  {\n    var key = 'G'+prop.source+prop.id,\n      newnode = {};\n\n    // group ID has changed, replace link node and identifiers\n    if (prop.newid) {\n      var newkey = 'G'+prop.source+prop.newid,\n        newprop = $.extend({}, prop);\n\n      this.env.contactfolders[newkey] = this.env.contactfolders[key];\n      this.env.contactfolders[newkey].id = prop.newid;\n      this.env.group = prop.newid;\n\n      delete this.env.contactfolders[key];\n      delete this.env.contactgroups[key];\n\n      newprop.id = prop.newid;\n      newprop.type = 'group';\n\n      newnode.id = newkey;\n      newnode.html = $('<a>').attr('href', '#')\n        .attr('rel', prop.source+':'+prop.newid)\n        .click(function() { return ref.command('listgroup', newprop, this); })\n        .html(prop.name);\n    }\n    // update displayed group name\n    else {\n      $(this.treelist.get_item(key)).children().first().html(prop.name);\n      this.env.contactfolders[key].name = this.env.contactgroups[key].name = prop.name;\n    }\n\n    // update list node and re-sort it\n    this.treelist.update(key, newnode, true);\n\n    this.triggerEvent('group_update', { id:prop.id, source:prop.source, name:prop.name, li:this.treelist.get_item(key), newid:prop.newid });\n  };\n\n  this.update_group_commands = function()\n  {\n    var source = this.env.source != '' ? this.env.address_sources[this.env.source] : null,\n      supported = source && source.groups && !source.readonly;\n\n    this.enable_command('group-create', supported);\n    this.enable_command('group-rename', 'group-delete', supported && this.env.group);\n  };\n\n  this.init_edit_field = function(col, elem)\n  {\n    var label = this.env.coltypes[col].label;\n\n    if (!elem)\n      elem = $('.ff_' + col);\n\n    if (label)\n      elem.placeholder(label);\n  };\n\n  this.insert_edit_field = function(col, section, menu)\n  {\n    // just make pre-defined input field visible\n    var elem = $('#ff_'+col);\n    if (elem.length) {\n      elem.show().focus();\n      $(menu).children('option[value=\"'+col+'\"]').prop('disabled', true);\n    }\n    else {\n      var lastelem = $('.ff_'+col),\n        appendcontainer = $('#contactsection'+section+' .contactcontroller'+col);\n\n      if (!appendcontainer.length) {\n        var sect = $('#contactsection'+section),\n          lastgroup = $('.contactfieldgroup', sect).last();\n        appendcontainer = $('<fieldset>').addClass('contactfieldgroup contactcontroller'+col);\n        if (lastgroup.length)\n          appendcontainer.insertAfter(lastgroup);\n        else\n          sect.prepend(appendcontainer);\n      }\n\n      if (appendcontainer.length && appendcontainer.get(0).nodeName == 'FIELDSET') {\n        var input, colprop = this.env.coltypes[col],\n          input_id = 'ff_' + col + (colprop.count || 0),\n          row = $('<div>').addClass('row'),\n          cell = $('<div>').addClass('contactfieldcontent data'),\n          label = $('<div>').addClass('contactfieldlabel label');\n\n        if (colprop.subtypes_select)\n          label.html(colprop.subtypes_select);\n        else\n          label.html('<label for=\"' + input_id + '\">' + colprop.label + '</label>');\n\n        var name_suffix = colprop.limit != 1 ? '[]' : '';\n\n        if (colprop.type == 'text' || colprop.type == 'date') {\n          input = $('<input>')\n            .addClass('ff_'+col)\n            .attr({type: 'text', name: '_'+col+name_suffix, size: colprop.size, id: input_id})\n            .appendTo(cell);\n\n          this.init_edit_field(col, input);\n\n          if (colprop.type == 'date' && $.datepicker)\n            input.datepicker();\n        }\n        else if (colprop.type == 'textarea') {\n          input = $('<textarea>')\n            .addClass('ff_'+col)\n            .attr({ name: '_'+col+name_suffix, cols:colprop.size, rows:colprop.rows, id: input_id })\n            .appendTo(cell);\n\n          this.init_edit_field(col, input);\n        }\n        else if (colprop.type == 'composite') {\n          var i, childcol, cp, first, templ, cols = [], suffices = [];\n\n          // read template for composite field order\n          if ((templ = this.env[col+'_template'])) {\n            for (i=0; i < templ.length; i++) {\n              cols.push(templ[i][1]);\n              suffices.push(templ[i][2]);\n            }\n          }\n          else {  // list fields according to appearance in colprop\n            for (childcol in colprop.childs)\n              cols.push(childcol);\n          }\n\n          for (i=0; i < cols.length; i++) {\n            childcol = cols[i];\n            cp = colprop.childs[childcol];\n            input = $('<input>')\n              .addClass('ff_'+childcol)\n              .attr({ type: 'text', name: '_'+childcol+name_suffix, size: cp.size })\n              .appendTo(cell);\n            cell.append(suffices[i] || \" \");\n            this.init_edit_field(childcol, input);\n            if (!first) first = input;\n          }\n          input = first;  // set focus to the first of this composite fields\n        }\n        else if (colprop.type == 'select') {\n          input = $('<select>')\n            .addClass('ff_'+col)\n            .attr({ 'name': '_'+col+name_suffix, id: input_id })\n            .appendTo(cell);\n\n          var options = input.attr('options');\n          options[options.length] = new Option('---', '');\n          if (colprop.options)\n            $.each(colprop.options, function(i, val){ options[options.length] = new Option(val, i); });\n        }\n\n        if (input) {\n          var delbutton = $('<a href=\"#del\"></a>')\n            .addClass('contactfieldbutton deletebutton')\n            .attr({title: this.get_label('delete'), rel: col})\n            .html(this.env.delbutton)\n            .click(function(){ ref.delete_edit_field(this); return false })\n            .appendTo(cell);\n\n          row.append(label).append(cell).appendTo(appendcontainer.show());\n          input.first().focus();\n\n          // disable option if limit reached\n          if (!colprop.count) colprop.count = 0;\n          if (++colprop.count == colprop.limit && colprop.limit)\n            $(menu).children('option[value=\"'+col+'\"]').prop('disabled', true);\n        }\n      }\n    }\n  };\n\n  this.delete_edit_field = function(elem)\n  {\n    var col = $(elem).attr('rel'),\n      colprop = this.env.coltypes[col],\n      fieldset = $(elem).parents('fieldset.contactfieldgroup'),\n      addmenu = fieldset.parent().find('select.addfieldmenu');\n\n    // just clear input but don't hide the last field\n    if (--colprop.count <= 0 && colprop.visible)\n      $(elem).parent().children('input').val('').blur();\n    else {\n      $(elem).parents('div.row').remove();\n      // hide entire fieldset if no more rows\n      if (!fieldset.children('div.row').length)\n        fieldset.hide();\n    }\n\n    // enable option in add-field selector or insert it if necessary\n    if (addmenu.length) {\n      var option = addmenu.children('option[value=\"'+col+'\"]');\n      if (option.length)\n        option.prop('disabled', false);\n      else\n        option = $('<option>').attr('value', col).html(colprop.label).appendTo(addmenu);\n      addmenu.show();\n    }\n  };\n\n  this.upload_contact_photo = function(form)\n  {\n    if (form && form.elements._photo.value) {\n      this.async_upload_form(form, 'upload-photo', function(e) {\n        ref.set_busy(false, null, ref.file_upload_id);\n      });\n\n      // display upload indicator\n      this.file_upload_id = this.set_busy(true, 'uploading');\n    }\n  };\n\n  this.replace_contact_photo = function(id)\n  {\n    var img_src = id == '-del-' ? this.env.photo_placeholder :\n      this.env.comm_path + '&_action=photo&_source=' + this.env.source + '&_cid=' + (this.env.cid || 0) + '&_photo=' + id;\n\n    this.set_photo_actions(id);\n    $(this.gui_objects.contactphoto).children('img').attr('src', img_src);\n  };\n\n  this.photo_upload_end = function()\n  {\n    this.set_busy(false, null, this.file_upload_id);\n    delete this.file_upload_id;\n  };\n\n  this.set_photo_actions = function(id)\n  {\n    var n, buttons = this.buttons['upload-photo'];\n    for (n=0; buttons && n < buttons.length; n++)\n      $('a#'+buttons[n].id).html(this.get_label(id == '-del-' ? 'addphoto' : 'replacephoto'));\n\n    $('#ff_photo').val(id);\n    this.enable_command('upload-photo', this.env.coltypes.photo ? true : false);\n    this.enable_command('delete-photo', this.env.coltypes.photo && id != '-del-');\n  };\n\n  // load advanced search page\n  this.advanced_search = function()\n  {\n    var win, url = {_form: 1, _action: 'search'}, target = window;\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      url._framed = 1;\n      target = win;\n      this.contact_list.clear_selection();\n    }\n\n    this.location_href(url, target, true);\n\n    return true;\n  };\n\n  // unselect directory/group\n  this.unselect_directory = function()\n  {\n    this.select_folder('');\n    this.enable_command('search-delete', false);\n  };\n\n  // callback for creating a new saved search record\n  this.insert_saved_search = function(name, id)\n  {\n    var key = 'S'+id,\n      link = $('<a>').attr('href', '#')\n        .attr('rel', id)\n        .click(function() { return ref.command('listsearch', id, this); })\n        .html(name),\n      prop = { name:name, id:id };\n\n    this.savedsearchlist.insert({ id:key, html:link, classes:['contactsearch'] }, null, 'contactsearch');\n    this.select_folder(key,'',true);\n    this.enable_command('search-delete', true);\n    this.env.search_id = id;\n\n    this.triggerEvent('abook_search_insert', prop);\n  };\n\n  // creates a dialog for saved search\n  this.search_create = function()\n  {\n    var input = $('<input>').attr('type', 'text'),\n      content = $('<label>').text(this.get_label('namex')).append(input);\n\n    this.show_popup_dialog(content, this.get_label('searchsave'),\n      [{\n        text: this.get_label('save'),\n        'class': 'mainaction',\n        click: function() {\n          var name;\n\n          if (name = input.val()) {\n            ref.http_post('search-create', {_search: ref.env.search_request, _name: name},\n              ref.set_busy(true, 'loading'));\n          }\n\n          $(this).dialog('close');\n        }\n      }]\n    );\n  };\n\n  this.search_delete = function()\n  {\n    if (this.env.search_request) {\n      var lock = this.set_busy(true, 'savedsearchdeleting');\n      this.http_post('search-delete', {_sid: this.env.search_id}, lock);\n    }\n  };\n\n  // callback from server upon search-delete command\n  this.remove_search_item = function(id)\n  {\n    var li, key = 'S'+id;\n    if (this.savedsearchlist.remove(key)) {\n      this.triggerEvent('search_delete', { id:id, li:li });\n    }\n\n    this.env.search_id = null;\n    this.env.search_request = null;\n    this.list_contacts_clear();\n    this.reset_qsearch();\n    this.enable_command('search-delete', 'search-create', false);\n  };\n\n  this.listsearch = function(id)\n  {\n    var lock = this.set_busy(true, 'searching');\n\n    if (this.contact_list) {\n      this.list_contacts_clear();\n    }\n\n    this.reset_qsearch();\n\n    if (this.savedsearchlist) {\n      this.treelist.select('');\n      this.savedsearchlist.select('S'+id);\n    }\n    else\n      this.select_folder('S'+id, '', true);\n\n    // reset vars\n    this.env.current_page = 1;\n    this.http_request('search', {_sid: id}, lock);\n  };\n\n\n  /*********************************************************/\n  /*********        user settings methods          *********/\n  /*********************************************************/\n\n  // preferences section select and load options frame\n  this.section_select = function(list)\n  {\n    var win, id = list.get_single_selection(), target = window,\n      url = {_action: 'edit-prefs', _section: id};\n\n    if (id) {\n      if (win = this.get_frame_window(this.env.contentframe)) {\n        url._framed = 1;\n        target = win;\n      }\n      this.location_href(url, target, true);\n    }\n\n    return true;\n  };\n\n  this.identity_select = function(list)\n  {\n    var id;\n    if (id = list.get_single_selection()) {\n      this.enable_command('delete', list.rowcount > 1 && this.env.identities_level < 2);\n      this.load_identity(id, 'edit-identity');\n    }\n  };\n\n  // load identity record\n  this.load_identity = function(id, action)\n  {\n    if (action == 'edit-identity' && (!id || id == this.env.iid))\n      return false;\n\n    var win, target = window,\n      url = {_action: action, _iid: id};\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      url._framed = 1;\n      target = win;\n    }\n\n    if (id || action == 'add-identity') {\n      this.location_href(url, target, true);\n    }\n\n    return true;\n  };\n\n  this.delete_identity = function(id)\n  {\n    // exit if no identity is specified or if selection is empty\n    var selection = this.identity_list.get_selection();\n    if (!(selection.length || this.env.iid))\n      return;\n\n    if (!id)\n      id = this.env.iid ? this.env.iid : selection[0];\n\n    // submit request with appended token\n    if (id && confirm(this.get_label('deleteidentityconfirm')))\n      this.http_post('settings/delete-identity', { _iid: id }, true);\n  };\n\n  this.update_identity_row = function(id, name, add)\n  {\n    var list = this.identity_list,\n      rid = this.html_identifier(id);\n\n    if (add) {\n      list.insert_row({ id:'rcmrow'+rid, cols:[ { className:'mail', innerHTML:name } ] });\n      list.select(rid);\n    }\n    else {\n      list.update_row(rid, [ name ]);\n    }\n  };\n\n  this.update_response_row = function(response, oldkey)\n  {\n    var list = this.responses_list;\n\n    if (list && oldkey) {\n      list.update_row(oldkey, [ response.name ], response.key, true);\n    }\n    else if (list) {\n      list.insert_row({ id:'rcmrow'+response.key, cols:[ { className:'name', innerHTML:response.name } ] });\n      list.select(response.key);\n    }\n  };\n\n  this.remove_response = function(key)\n  {\n    var frame;\n\n    if (this.env.textresponses) {\n      delete this.env.textresponses[key];\n    }\n\n    if (this.responses_list) {\n      this.responses_list.remove_row(key);\n      if (this.env.contentframe && (frame = this.get_frame_window(this.env.contentframe))) {\n        frame.location.href = this.env.blankpage;\n      }\n    }\n\n    this.enable_command('delete', false);\n  };\n\n  this.remove_identity = function(id)\n  {\n    var frame, list = this.identity_list,\n      rid = this.html_identifier(id);\n\n    if (list && id) {\n      list.remove_row(rid);\n      if (this.env.contentframe && (frame = this.get_frame_window(this.env.contentframe))) {\n        frame.location.href = this.env.blankpage;\n      }\n    }\n\n    this.enable_command('delete', false);\n  };\n\n\n  /*********************************************************/\n  /*********        folder manager methods         *********/\n  /*********************************************************/\n\n  this.init_subscription_list = function()\n  {\n    var delim = RegExp.escape(this.env.delimiter);\n\n    this.last_sub_rx = RegExp('['+delim+']?[^'+delim+']+$');\n\n    this.subscription_list = new rcube_treelist_widget(this.gui_objects.subscriptionlist, {\n        selectable: true,\n        tabexit: false,\n        parent_focus: true,\n        id_prefix: 'rcmli',\n        id_encode: this.html_identifier_encode,\n        id_decode: this.html_identifier_decode,\n        searchbox: '#foldersearch'\n    });\n\n    this.subscription_list\n      .addEventListener('select', function(node) { ref.subscription_select(node.id); })\n      .addEventListener('collapse', function(node) { ref.folder_collapsed(node) })\n      .addEventListener('expand', function(node) { ref.folder_collapsed(node) })\n      .addEventListener('search', function(p) { if (p.query) ref.subscription_select(); })\n      .draggable({cancel: 'li.mailbox.root'})\n      .droppable({\n        // @todo: find better way, accept callback is executed for every folder\n        // on the list when dragging starts (and stops), this is slow, but\n        // I didn't find a method to check droptarget on over event\n        accept: function(node) {\n          if (!$(node).is('.mailbox'))\n            return false;\n\n          var source_folder = ref.folder_id2name($(node).attr('id')),\n            dest_folder = ref.folder_id2name(this.id),\n            source = ref.env.subscriptionrows[source_folder],\n            dest = ref.env.subscriptionrows[dest_folder];\n\n          return source && !source[2]\n            && dest_folder != source_folder.replace(ref.last_sub_rx, '')\n            && !dest_folder.startsWith(source_folder + ref.env.delimiter);\n        },\n        drop: function(e, ui) {\n          var source = ref.folder_id2name(ui.draggable.attr('id')),\n            dest = ref.folder_id2name(this.id);\n\n          ref.subscription_move_folder(source, dest);\n        }\n      });\n  };\n\n  this.folder_id2name = function(id)\n  {\n    return id ? ref.html_identifier_decode(id.replace(/^rcmli/, '')) : null;\n  };\n\n  this.subscription_select = function(id)\n  {\n    var folder;\n\n    if (id && id != '*' && (folder = this.env.subscriptionrows[id])) {\n      this.env.mailbox = id;\n      this.show_folder(id);\n      this.enable_command('delete-folder', !folder[2]);\n    }\n    else {\n      this.env.mailbox = null;\n      this.show_contentframe(false);\n      this.enable_command('delete-folder', 'purge', false);\n    }\n  };\n\n  this.subscription_move_folder = function(from, to)\n  {\n    if (from && to !== null && from != to && to != from.replace(this.last_sub_rx, '')) {\n      var path = from.split(this.env.delimiter),\n        basename = path.pop(),\n        newname = to === '' || to === '*' ? basename : to + this.env.delimiter + basename;\n\n      if (newname != from) {\n        this.http_post('rename-folder', {_folder_oldname: from, _folder_newname: newname},\n          this.set_busy(true, 'foldermoving'));\n      }\n    }\n  };\n\n  // tell server to create and subscribe a new mailbox\n  this.create_folder = function()\n  {\n    this.show_folder('', this.env.mailbox);\n  };\n\n  // delete a specific mailbox with all its messages\n  this.delete_folder = function(name)\n  {\n    if (!name)\n      name = this.env.mailbox;\n\n    if (name && confirm(this.get_label('deletefolderconfirm'))) {\n      this.http_post('delete-folder', {_mbox: name}, this.set_busy(true, 'folderdeleting'));\n    }\n  };\n\n  // Add folder row to the table and initialize it\n  this.add_folder_row = function (id, name, display_name, is_protected, subscribed, class_name, refrow, subfolders)\n  {\n    if (!this.gui_objects.subscriptionlist)\n      return false;\n\n    // reset searching\n    if (this.subscription_list.is_search()) {\n      this.subscription_select();\n      this.subscription_list.reset_search();\n    }\n\n    // disable drag-n-drop temporarily\n    this.subscription_list.draggable('destroy').droppable('destroy');\n\n    var row, n, tmp, tmp_name, rowid, collator, pos, p, parent = '',\n      folders = [], list = [], slist = [],\n      list_element = $(this.gui_objects.subscriptionlist);\n      row = refrow ? refrow : $($('li', list_element).get(1)).clone(true);\n\n    if (!row.length) {\n      // Refresh page if we don't have a table row to clone\n      this.goto_url('folders');\n      return false;\n    }\n\n    // set ID, reset css class\n    row.attr({id: 'rcmli' + this.html_identifier_encode(id), 'class': class_name});\n\n    if (!refrow || !refrow.length) {\n      // remove old data, subfolders and toggle\n      $('ul,div.treetoggle', row).remove();\n      row.removeData('filtered');\n    }\n\n    // set folder name\n    $('a:first', row).text(display_name);\n\n    // update subscription checkbox\n    $('input[name=\"_subscribed[]\"]:first', row).val(id)\n      .prop({checked: subscribed ? true : false, disabled: is_protected ? true : false});\n\n    // add to folder/row-ID map\n    this.env.subscriptionrows[id] = [name, display_name, false];\n\n    // copy folders data to an array for sorting\n    $.each(this.env.subscriptionrows, function(k, v) { v[3] = k; folders.push(v); });\n\n    try {\n      // use collator if supported (FF29, IE11, Opera15, Chrome24)\n      collator = new Intl.Collator(this.env.locale.replace('_', '-'));\n    }\n    catch (e) {};\n\n    // sort folders\n    folders.sort(function(a, b) {\n      var i, f1, f2,\n        path1 = a[0].split(ref.env.delimiter),\n        path2 = b[0].split(ref.env.delimiter),\n        len = path1.length;\n\n      for (i=0; i<len; i++) {\n        f1 = path1[i];\n        f2 = path2[i];\n\n        if (f1 !== f2) {\n          if (f2 === undefined)\n            return 1;\n          if (collator)\n            return collator.compare(f1, f2);\n          else\n            return f1 < f2 ? -1 : 1;\n        }\n        else if (i == len-1) {\n          return -1\n        }\n      }\n    });\n\n    for (n in folders) {\n      p = folders[n][3];\n      // protected folder\n      if (folders[n][2]) {\n        tmp_name = p + this.env.delimiter;\n        // prefix namespace cannot have subfolders (#1488349)\n        if (tmp_name == this.env.prefix_ns)\n          continue;\n        slist.push(p);\n        tmp = tmp_name;\n      }\n      // protected folder's child\n      else if (tmp && p.startsWith(tmp))\n        slist.push(p);\n      // other\n      else {\n        list.push(p);\n        tmp = null;\n      }\n    }\n\n    // check if subfolder of a protected folder\n    for (n=0; n<slist.length; n++) {\n      if (id.startsWith(slist[n] + this.env.delimiter))\n        rowid = slist[n];\n    }\n\n    // find folder position after sorting\n    for (n=0; !rowid && n<list.length; n++) {\n      if (n && list[n] == id)\n        rowid = list[n-1];\n    }\n\n    // add row to the table\n    if (rowid && (n = this.subscription_list.get_item(rowid, true))) {\n      // find parent folder\n      if (pos = id.lastIndexOf(this.env.delimiter)) {\n        parent = id.substring(0, pos);\n        parent = this.subscription_list.get_item(parent, true);\n\n        // add required tree elements to the parent if not already there\n        if (!$('div.treetoggle', parent).length) {\n          $('<div>&nbsp;</div>').addClass('treetoggle collapsed').appendTo(parent);\n        }\n        if (!$('ul', parent).length) {\n          $('<ul>').css('display', 'none').appendTo(parent);\n        }\n      }\n\n      if (parent && n == parent) {\n        $('ul:first', parent).append(row);\n      }\n      else {\n        while (p = $(n).parent().parent().get(0)) {\n          if (parent && p == parent)\n            break;\n          if (!$(p).is('li.mailbox'))\n            break;\n          n = p;\n        }\n\n        $(n).after(row);\n      }\n    }\n    else {\n      list_element.append(row);\n    }\n\n    // add subfolders\n    $.extend(this.env.subscriptionrows, subfolders || {});\n\n    // update list widget\n    this.subscription_list.reset(true);\n    this.subscription_select();\n\n    // expand parent\n    if (parent) {\n      this.subscription_list.expand(this.folder_id2name(parent.id));\n    }\n\n    row = row.show().get(0);\n    if (row.scrollIntoView)\n      row.scrollIntoView();\n\n    return row;\n  };\n\n  // replace an existing table row with a new folder line (with subfolders)\n  this.replace_folder_row = function(oldid, id, name, display_name, is_protected, class_name)\n  {\n    if (!this.gui_objects.subscriptionlist) {\n      if (this.is_framed()) {\n        // @FIXME: for some reason this 'parent' variable need to be prefixed with 'window.'\n        return window.parent.rcmail.replace_folder_row(oldid, id, name, display_name, is_protected, class_name);\n      }\n\n      return false;\n    }\n\n    // reset searching\n    if (this.subscription_list.is_search()) {\n      this.subscription_select();\n      this.subscription_list.reset_search();\n    }\n\n    var subfolders = {},\n      row = this.subscription_list.get_item(oldid, true),\n      parent = $(row).parent(),\n      old_folder = this.env.subscriptionrows[oldid],\n      prefix_len_id = oldid.length,\n      prefix_len_name = old_folder[0].length,\n      subscribed = $('input[name=\"_subscribed[]\"]:first', row).prop('checked');\n\n    // no renaming, only update class_name\n    if (oldid == id) {\n      $(row).attr('class', class_name || '');\n      return;\n    }\n\n    // update subfolders\n    $('li', row).each(function() {\n      var fname = ref.folder_id2name(this.id),\n        folder = ref.env.subscriptionrows[fname],\n        newid = id + fname.slice(prefix_len_id);\n\n      this.id = 'rcmli' + ref.html_identifier_encode(newid);\n      $('input[name=\"_subscribed[]\"]:first', this).val(newid);\n      folder[0] = name + folder[0].slice(prefix_len_name);\n\n      subfolders[newid] = folder;\n      delete ref.env.subscriptionrows[fname];\n    });\n\n    // get row off the list\n    row = $(row).detach();\n\n    delete this.env.subscriptionrows[oldid];\n\n    // remove parent list/toggle elements if not needed\n    if (parent.get(0) != this.gui_objects.subscriptionlist && !$('li', parent).length) {\n      $('ul,div.treetoggle', parent.parent()).remove();\n    }\n\n    // move the existing table row\n    this.add_folder_row(id, name, display_name, is_protected, subscribed, class_name, row, subfolders);\n  };\n\n  // remove the table row of a specific mailbox from the table\n  this.remove_folder_row = function(folder)\n  {\n    // reset searching\n    if (this.subscription_list.is_search()) {\n      this.subscription_select();\n      this.subscription_list.reset_search();\n    }\n\n    var list = [], row = this.subscription_list.get_item(folder, true);\n\n    // get subfolders if any\n    $('li', row).each(function() { list.push(ref.folder_id2name(this.id)); });\n\n    // remove folder row (and subfolders)\n    this.subscription_list.remove(folder);\n\n    // update local list variable\n    list.push(folder);\n    $.each(list, function(i, v) { delete ref.env.subscriptionrows[v]; });\n  };\n\n  this.subscribe = function(folder)\n  {\n    if (folder) {\n      var lock = this.display_message(this.get_label('foldersubscribing'), 'loading');\n      this.http_post('subscribe', {_mbox: folder}, lock);\n    }\n  };\n\n  this.unsubscribe = function(folder)\n  {\n    if (folder) {\n      var lock = this.display_message(this.get_label('folderunsubscribing'), 'loading');\n      this.http_post('unsubscribe', {_mbox: folder}, lock);\n    }\n  };\n\n  // when user select a folder in manager\n  this.show_folder = function(folder, path, force)\n  {\n    var win, target = window,\n      url = '&_action=edit-folder&_mbox='+urlencode(folder);\n\n    if (path)\n      url += '&_path='+urlencode(path);\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      target = win;\n      url += '&_framed=1';\n    }\n\n    if (String(target.location.href).indexOf(url) >= 0 && !force)\n      this.show_contentframe(true);\n    else\n      this.location_href(this.env.comm_path+url, target, true);\n  };\n\n  // disables subscription checkbox (for protected folder)\n  this.disable_subscription = function(folder)\n  {\n    var row = this.subscription_list.get_item(folder, true);\n    if (row)\n      $('input[name=\"_subscribed[]\"]:first', row).prop('disabled', true);\n  };\n\n  this.folder_size = function(folder)\n  {\n    var lock = this.set_busy(true, 'loading');\n    this.http_post('folder-size', {_mbox: folder}, lock);\n  };\n\n  this.folder_size_update = function(size)\n  {\n    $('#folder-size').replaceWith(size);\n  };\n\n  // filter folders by namespace\n  this.folder_filter = function(prefix)\n  {\n    this.subscription_list.reset_search();\n\n    this.subscription_list.container.children('li').each(function() {\n      var i, folder = ref.folder_id2name(this.id);\n      // show all folders\n      if (prefix == '---') {\n      }\n      // got namespace prefix\n      else if (prefix) {\n        if (folder !== prefix) {\n          $(this).data('filtered', true).hide();\n          return\n        }\n      }\n      // no namespace prefix, filter out all other namespaces\n      else {\n        // first get all namespace roots\n        for (i in ref.env.ns_roots) {\n          if (folder === ref.env.ns_roots[i]) {\n            $(this).data('filtered', true).hide();\n            return;\n          }\n        }\n      }\n\n      $(this).removeData('filtered').show();\n    });\n  };\n\n  /*********************************************************/\n  /*********           GUI functionality           *********/\n  /*********************************************************/\n\n  var init_button = function(cmd, prop)\n  {\n    var elm = document.getElementById(prop.id);\n    if (!elm)\n      return;\n\n    var preload = false;\n    if (prop.type == 'image') {\n      elm = elm.parentNode;\n      preload = true;\n    }\n\n    elm._command = cmd;\n    elm._id = prop.id;\n    if (prop.sel) {\n      elm.onmousedown = function(e) { return ref.button_sel(this._command, this._id); };\n      elm.onmouseup = function(e) { return ref.button_out(this._command, this._id); };\n      if (preload)\n        new Image().src = prop.sel;\n    }\n    if (prop.over) {\n      elm.onmouseover = function(e) { return ref.button_over(this._command, this._id); };\n      elm.onmouseout = function(e) { return ref.button_out(this._command, this._id); };\n      if (preload)\n        new Image().src = prop.over;\n    }\n  };\n\n  // set event handlers on registered buttons\n  this.init_buttons = function()\n  {\n    for (var cmd in this.buttons) {\n      if (typeof cmd !== 'string')\n        continue;\n\n      for (var i=0; i<this.buttons[cmd].length; i++) {\n        init_button(cmd, this.buttons[cmd][i]);\n      }\n    }\n  };\n\n  // set button to a specific state\n  this.set_button = function(command, state)\n  {\n    var n, button, obj, $obj, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      obj = document.getElementById(button.id);\n\n      if (!obj || button.status === state)\n        continue;\n\n      // get default/passive setting of the button\n      if (button.type == 'image' && !button.status) {\n        button.pas = obj._original_src ? obj._original_src : obj.src;\n        // respect PNG fix on IE browsers\n        if (obj.runtimeStyle && obj.runtimeStyle.filter && obj.runtimeStyle.filter.match(/src=['\"]([^'\"]+)['\"]/))\n          button.pas = RegExp.$1;\n      }\n      else if (!button.status)\n        button.pas = String(obj.className);\n\n      button.status = state;\n\n      // set image according to button state\n      if (button.type == 'image' && button[state]) {\n        obj.src = button[state];\n      }\n      // set class name according to button state\n      else if (button[state] !== undefined) {\n        obj.className = button[state];\n      }\n      // disable/enable input buttons\n      if (button.type == 'input') {\n        obj.disabled = state == 'pas';\n      }\n      else if (button.type == 'uibutton') {\n        button.status = state;\n        $(obj).button('option', 'disabled', state == 'pas');\n      }\n      else {\n        $obj = $(obj);\n        $obj\n          .attr('tabindex', state == 'pas' || state == 'sel' ? '-1' : ($obj.attr('data-tabindex') || '0'))\n          .attr('aria-disabled', state == 'pas' || state == 'sel' ? 'true' : 'false');\n      }\n    }\n  };\n\n  // display a specific alttext\n  this.set_alttext = function(command, label)\n  {\n    var n, button, obj, link, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      obj = document.getElementById(button.id);\n\n      if (button.type == 'image' && obj) {\n        obj.setAttribute('alt', this.get_label(label));\n        if ((link = obj.parentNode) && link.tagName.toLowerCase() == 'a')\n          link.setAttribute('title', this.get_label(label));\n      }\n      else if (obj)\n        obj.setAttribute('title', this.get_label(label));\n    }\n  };\n\n  // mouse over button\n  this.button_over = function(command, id)\n  {\n    this.button_event(command, id, 'over');\n  };\n\n  // mouse down on button\n  this.button_sel = function(command, id)\n  {\n    this.button_event(command, id, 'sel');\n  };\n\n  // mouse out of button\n  this.button_out = function(command, id)\n  {\n    this.button_event(command, id, 'act');\n  };\n\n  // event of button\n  this.button_event = function(command, id, event)\n  {\n    var n, button, obj, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      if (button.id == id && button.status == 'act') {\n        if (button[event] && (obj = document.getElementById(button.id))) {\n          obj[button.type == 'image' ? 'src' : 'className'] = button[event];\n        }\n\n        if (event == 'sel') {\n          this.buttons_sel[id] = command;\n        }\n      }\n    }\n  };\n\n  // write to the document/window title\n  this.set_pagetitle = function(title)\n  {\n    if (title && document.title)\n      document.title = title;\n  };\n\n  // display a system message, list of types in common.css (below #message definition)\n  this.display_message = function(msg, type, timeout, key)\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.display_message(msg, type, timeout);\n\n    if (!this.gui_objects.message) {\n      // save message in order to display after page loaded\n      if (type != 'loading')\n        this.pending_message = [msg, type, timeout, key];\n      return 1;\n    }\n\n    if (!type)\n      type = 'notice';\n\n    if (!key)\n      key = this.html_identifier(msg);\n\n    var date = new Date(),\n      id = type + date.getTime();\n\n    if (!timeout) {\n      switch (type) {\n        case 'error':\n        case 'warning':\n          timeout = this.message_time * 2;\n          break;\n\n        case 'uploading':\n          timeout = 0;\n          break;\n\n        default:\n          timeout = this.message_time;\n      }\n    }\n\n    if (type == 'loading') {\n      key = 'loading';\n      timeout = this.env.request_timeout * 1000;\n      if (!msg)\n        msg = this.get_label('loading');\n    }\n\n    // The same message is already displayed\n    if (this.messages[key]) {\n      // replace label\n      if (this.messages[key].obj)\n        this.messages[key].obj.html(msg);\n      // store label in stack\n      if (type == 'loading') {\n        this.messages[key].labels.push({'id': id, 'msg': msg});\n      }\n      // add element and set timeout\n      this.messages[key].elements.push(id);\n      setTimeout(function() { ref.hide_message(id, type == 'loading'); }, timeout);\n      return id;\n    }\n\n    // create DOM object and display it\n    var obj = $('<div>').addClass(type).html(msg).data('key', key),\n      cont = $(this.gui_objects.message).append(obj).show();\n\n    this.messages[key] = {'obj': obj, 'elements': [id]};\n\n    if (type == 'loading') {\n      this.messages[key].labels = [{'id': id, 'msg': msg}];\n    }\n    else if (type != 'uploading') {\n      obj.click(function() { return ref.hide_message(obj); })\n        .attr('role', 'alert');\n    }\n\n    this.triggerEvent('message', { message:msg, type:type, timeout:timeout, object:obj });\n\n    if (timeout > 0)\n      setTimeout(function() { ref.hide_message(id, type != 'loading'); }, timeout);\n\n    return id;\n  };\n\n  // make a message to disapear\n  this.hide_message = function(obj, fade)\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.hide_message(obj, fade);\n\n    if (!this.gui_objects.message)\n      return;\n\n    var k, n, i, o, m = this.messages;\n\n    // Hide message by object, don't use for 'loading'!\n    if (typeof obj === 'object') {\n      o = $(obj);\n      k = o.data('key');\n      this.hide_message_object(o, fade);\n      if (m[k])\n        delete m[k];\n    }\n    // Hide message by id\n    else {\n      for (k in m) {\n        for (n in m[k].elements) {\n          if (m[k] && m[k].elements[n] == obj) {\n            m[k].elements.splice(n, 1);\n            // hide DOM element if last instance is removed\n            if (!m[k].elements.length) {\n              this.hide_message_object(m[k].obj, fade);\n              delete m[k];\n            }\n            // set pending action label for 'loading' message\n            else if (k == 'loading') {\n              for (i in m[k].labels) {\n                if (m[k].labels[i].id == obj) {\n                  delete m[k].labels[i];\n                }\n                else {\n                  o = m[k].labels[i].msg;\n                  m[k].obj.html(o);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  // hide message object and remove from the DOM\n  this.hide_message_object = function(o, fade)\n  {\n    if (fade)\n      o.fadeOut(600, function() {$(this).remove(); });\n    else\n      o.hide().remove();\n  };\n\n  // remove all messages immediately\n  this.clear_messages = function()\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.clear_messages();\n\n    var k, n, m = this.messages;\n\n    for (k in m)\n      for (n in m[k].elements)\n        if (m[k].obj)\n          this.hide_message_object(m[k].obj);\n\n    this.messages = {};\n  };\n\n  // display uploading message with progress indicator\n  // data should contain: name, total, current, percent, text\n  this.display_progress = function(data)\n  {\n    if (!data || !data.name)\n      return;\n\n    var msg = this.messages['progress' + data.name];\n\n    if (!data.label)\n      data.label = this.get_label('uploadingmany');\n\n    if (!msg) {\n      if (!data.percent || data.percent < 100)\n        this.display_message(data.label, 'uploading', 0, 'progress' + data.name);\n      return;\n    }\n\n    if (!data.total || data.percent >= 100) {\n      this.hide_message(msg.obj);\n      return;\n    }\n\n    if (data.text)\n      data.label += ' ' + data.text;\n\n    msg.obj.text(data.label);\n  };\n\n  // open a jquery UI dialog with the given content\n  this.show_popup_dialog = function(content, title, buttons, options)\n  {\n    // forward call to parent window\n    if (this.is_framed()) {\n      return parent.rcmail.show_popup_dialog(content, title, buttons, options);\n    }\n\n    var popup = $('<div class=\"popup\">');\n\n    if (typeof content == 'object')\n      popup.append(content);\n    else\n      popup.html(content);\n\n    options = $.extend({\n        title: title,\n        buttons: buttons,\n        modal: true,\n        resizable: true,\n        width: 500,\n        close: function(event, ui) { $(this).remove(); }\n      }, options || {});\n\n    popup.dialog(options);\n\n    // resize and center popup\n    var win = $(window), w = win.width(), h = win.height(),\n      width = popup.width(), height = popup.height();\n\n    popup.dialog('option', {\n      height: Math.min(h - 40, height + 75 + (buttons ? 50 : 0)),\n      width: Math.min(w - 20, width + 36)\n    });\n\n    // assign special classes to dialog buttons\n    $.each(options.button_classes || [], function(i, v) {\n      if (v) $($('.ui-dialog-buttonpane button.ui-button', popup.parent()).get(i)).addClass(v);\n    });\n\n    return popup;\n  };\n\n  // enable/disable buttons for page shifting\n  this.set_page_buttons = function()\n  {\n    this.enable_command('nextpage', 'lastpage', this.env.pagecount > this.env.current_page);\n    this.enable_command('previouspage', 'firstpage', this.env.current_page > 1);\n  };\n\n  // mark a mailbox as selected and set environment variable\n  this.select_folder = function(name, prefix, encode)\n  {\n    if (this.savedsearchlist) {\n      this.savedsearchlist.select('');\n    }\n\n    if (this.treelist) {\n      this.treelist.select(name);\n    }\n    else if (this.gui_objects.folderlist) {\n      $('li.selected', this.gui_objects.folderlist).removeClass('selected');\n      $(this.get_folder_li(name, prefix, encode)).addClass('selected');\n\n      // trigger event hook\n      this.triggerEvent('selectfolder', { folder:name, prefix:prefix });\n    }\n  };\n\n  // adds a class to selected folder\n  this.mark_folder = function(name, class_name, prefix, encode)\n  {\n    $(this.get_folder_li(name, prefix, encode)).addClass(class_name);\n    this.triggerEvent('markfolder', {folder: name, mark: class_name, status: true});\n  };\n\n  // adds a class to selected folder\n  this.unmark_folder = function(name, class_name, prefix, encode)\n  {\n    $(this.get_folder_li(name, prefix, encode)).removeClass(class_name);\n    this.triggerEvent('markfolder', {folder: name, mark: class_name, status: false});\n  };\n\n  // helper method to find a folder list item\n  this.get_folder_li = function(name, prefix, encode)\n  {\n    if (!prefix)\n      prefix = 'rcmli';\n\n    if (this.gui_objects.folderlist) {\n      name = this.html_identifier(name, encode);\n      return document.getElementById(prefix+name);\n    }\n  };\n\n  // for reordering column array (Konqueror workaround)\n  // and for setting some message list global variables\n  this.set_message_coltypes = function(listcols, repl, smart_col)\n  {\n    var list = this.message_list,\n      thead = list ? list.thead : null,\n      repl, cell, col, n, len, tr;\n\n    this.env.listcols = listcols;\n\n    if (!this.env.coltypes)\n      this.env.coltypes = {};\n\n    // replace old column headers\n    if (thead) {\n      if (repl) {\n        thead.innerHTML = '';\n        tr = document.createElement('tr');\n\n        for (c=0, len=repl.length; c < len; c++) {\n          cell = document.createElement('th');\n          cell.innerHTML = repl[c].html || '';\n          if (repl[c].id) cell.id = repl[c].id;\n          if (repl[c].className) cell.className = repl[c].className;\n          tr.appendChild(cell);\n        }\n        thead.appendChild(tr);\n      }\n\n      for (n=0, len=this.env.listcols.length; n<len; n++) {\n        col = this.env.listcols[n];\n        if ((cell = thead.rows[0].cells[n]) && (col == 'from' || col == 'to' || col == 'fromto')) {\n          $(cell).attr('rel', col).find('span,a').text(this.get_label(col == 'fromto' ? smart_col : col));\n        }\n      }\n    }\n\n    this.env.subject_col = null;\n    this.env.flagged_col = null;\n    this.env.status_col = null;\n\n    if (this.env.coltypes.folder)\n      this.env.coltypes.folder.hidden = !(this.env.search_request || this.env.search_id) || this.env.search_scope == 'base';\n\n    if ((n = $.inArray('subject', this.env.listcols)) >= 0) {\n      this.env.subject_col = n;\n      if (list)\n        list.subject_col = n;\n    }\n    if ((n = $.inArray('flag', this.env.listcols)) >= 0)\n      this.env.flagged_col = n;\n    if ((n = $.inArray('status', this.env.listcols)) >= 0)\n      this.env.status_col = n;\n\n    if (list) {\n      list.hide_column('folder', (this.env.coltypes.folder && this.env.coltypes.folder.hidden) || $.inArray('folder', this.env.listcols) < 0);\n      list.init_header();\n    }\n  };\n\n  // replace content of row count display\n  this.set_rowcount = function(text, mbox)\n  {\n    // #1487752\n    if (mbox && mbox != this.env.mailbox)\n      return false;\n\n    $(this.gui_objects.countdisplay).html(text);\n\n    // update page navigation buttons\n    this.set_page_buttons();\n  };\n\n  // replace content of mailboxname display\n  this.set_mailboxname = function(content)\n  {\n    if (this.gui_objects.mailboxname && content)\n      this.gui_objects.mailboxname.innerHTML = content;\n  };\n\n  // replace content of quota display\n  this.set_quota = function(content)\n  {\n    if (this.gui_objects.quotadisplay && content && content.type == 'text')\n      $(this.gui_objects.quotadisplay).text((content.percent||0) + '%').attr('title', content.title);\n\n    this.triggerEvent('setquota', content);\n    this.env.quota_content = content;\n  };\n\n  // update trash folder state\n  this.set_trash_count = function(count)\n  {\n    this[(count ? 'un' : '') + 'mark_folder'](this.env.trash_mailbox, 'empty', '', true);\n  };\n\n  // update the mailboxlist\n  this.set_unread_count = function(mbox, count, set_title, mark)\n  {\n    if (!this.gui_objects.mailboxlist)\n      return false;\n\n    this.env.unread_counts[mbox] = count;\n    this.set_unread_count_display(mbox, set_title);\n\n    if (mark)\n      this.mark_folder(mbox, mark, '', true);\n    else if (!count)\n      this.unmark_folder(mbox, 'recent', '', true);\n  };\n\n  // update the mailbox count display\n  this.set_unread_count_display = function(mbox, set_title)\n  {\n    var reg, link, text_obj, item, mycount, childcount, div;\n\n    if (item = this.get_folder_li(mbox, '', true)) {\n      mycount = this.env.unread_counts[mbox] ? this.env.unread_counts[mbox] : 0;\n      link = $(item).children('a').eq(0);\n      text_obj = link.children('span.unreadcount');\n      if (!text_obj.length && mycount)\n        text_obj = $('<span>').addClass('unreadcount').appendTo(link);\n      reg = /\\s+\\([0-9]+\\)$/i;\n\n      childcount = 0;\n      if ((div = item.getElementsByTagName('div')[0]) &&\n          div.className.match(/collapsed/)) {\n        // add children's counters\n        for (var k in this.env.unread_counts)\n          if (k.startsWith(mbox + this.env.delimiter))\n            childcount += this.env.unread_counts[k];\n      }\n\n      if (mycount && text_obj.length)\n        text_obj.html(this.env.unreadwrap.replace(/%[sd]/, mycount));\n      else if (text_obj.length)\n        text_obj.remove();\n\n      // set parent's display\n      reg = new RegExp(RegExp.escape(this.env.delimiter) + '[^' + RegExp.escape(this.env.delimiter) + ']+$');\n      if (mbox.match(reg))\n        this.set_unread_count_display(mbox.replace(reg, ''), false);\n\n      // set the right classes\n      if ((mycount+childcount)>0)\n        $(item).addClass('unread');\n      else\n        $(item).removeClass('unread');\n    }\n\n    // set unread count to window title\n    reg = /^\\([0-9]+\\)\\s+/i;\n    if (set_title && document.title) {\n      var new_title = '',\n        doc_title = String(document.title);\n\n      if (mycount && doc_title.match(reg))\n        new_title = doc_title.replace(reg, '('+mycount+') ');\n      else if (mycount)\n        new_title = '('+mycount+') '+doc_title;\n      else\n        new_title = doc_title.replace(reg, '');\n\n      this.set_pagetitle(new_title);\n    }\n  };\n\n  // display fetched raw headers\n  this.set_headers = function(content)\n  {\n    if (this.gui_objects.all_headers_row && this.gui_objects.all_headers_box && content)\n      $(this.gui_objects.all_headers_box).html(content).show();\n  };\n\n  // display all-headers row and fetch raw message headers\n  this.show_headers = function(props, elem)\n  {\n    if (!this.gui_objects.all_headers_row || !this.gui_objects.all_headers_box || !this.env.uid)\n      return;\n\n    $(elem).removeClass('show-headers').addClass('hide-headers');\n    $(this.gui_objects.all_headers_row).show();\n    elem.onclick = function() { ref.command('hide-headers', '', elem); };\n\n    // fetch headers only once\n    if (!this.gui_objects.all_headers_box.innerHTML) {\n      this.http_post('headers', {_uid: this.env.uid, _mbox: this.env.mailbox},\n        this.display_message(this.get_label('loading'), 'loading')\n      );\n    }\n  };\n\n  // hide all-headers row\n  this.hide_headers = function(props, elem)\n  {\n    if (!this.gui_objects.all_headers_row || !this.gui_objects.all_headers_box)\n      return;\n\n    $(elem).removeClass('hide-headers').addClass('show-headers');\n    $(this.gui_objects.all_headers_row).hide();\n    elem.onclick = function() { ref.command('show-headers', '', elem); };\n  };\n\n  // create folder selector popup, position and display it\n  this.folder_selector = function(event, callback)\n  {\n    var container = this.folder_selector_element;\n\n    if (!container) {\n      var rows = [],\n        delim = this.env.delimiter,\n        ul = $('<ul class=\"toolbarmenu\">'),\n        link = document.createElement('a');\n\n      container = $('<div id=\"folder-selector\" class=\"popupmenu\"></div>');\n      link.href = '#';\n      link.className = 'icon';\n\n      // loop over sorted folders list\n      $.each(this.env.mailboxes_list, function() {\n        var n = 0, s = 0,\n          folder = ref.env.mailboxes[this],\n          id = folder.id,\n          a = $(link.cloneNode(false)),\n          row = $('<li>');\n\n        if (folder.virtual)\n          a.addClass('virtual').attr('aria-disabled', 'true').attr('tabindex', '-1');\n        else\n          a.addClass('active').data('id', folder.id);\n\n        if (folder['class'])\n          a.addClass(folder['class']);\n\n        // calculate/set indentation level\n        while ((s = id.indexOf(delim, s)) >= 0) {\n          n++; s++;\n        }\n        a.css('padding-left', n ? (n * 16) + 'px' : 0);\n\n        // add folder name element\n        a.append($('<span>').text(folder.name));\n\n        row.append(a);\n        rows.push(row);\n      });\n\n      ul.append(rows).appendTo(container);\n\n      // temporarily show element to calculate its size\n      container.css({left: '-1000px', top: '-1000px'})\n        .appendTo($('body')).show();\n\n      // set max-height if the list is long\n      if (rows.length > 10)\n        container.css('max-height', $('li', container)[0].offsetHeight * 10 + 9);\n\n      // register delegate event handler for folder item clicks\n      container.on('click', 'a.active', function(e){\n        container.data('callback')($(this).data('id'));\n        return false;\n      });\n\n      this.folder_selector_element = container;\n    }\n\n    container.data('callback', callback);\n\n    // position menu on the screen\n    this.show_menu('folder-selector', true, event);\n  };\n\n\n  /***********************************************/\n  /*********    popup menu functions     *********/\n  /***********************************************/\n\n  // Show/hide a specific popup menu\n  this.show_menu = function(prop, show, event)\n  {\n    var name = typeof prop == 'object' ? prop.menu : prop,\n      obj = $('#'+name),\n      ref = event && event.target ? $(event.target) : $(obj.attr('rel') || '#'+name+'link'),\n      keyboard = rcube_event.is_keyboard(event),\n      align = obj.attr('data-align') || '',\n      stack = false;\n\n    // find \"real\" button element\n    if (ref.get(0).tagName != 'A' && ref.closest('a').length)\n      ref = ref.closest('a');\n\n    if (typeof prop == 'string')\n      prop = { menu:name };\n\n    // let plugins or skins provide the menu element\n    if (!obj.length) {\n      obj = this.triggerEvent('menu-get', { name:name, props:prop, originalEvent:event });\n    }\n\n    if (!obj || !obj.length) {\n      // just delegate the action to subscribers\n      return this.triggerEvent(show === false ? 'menu-close' : 'menu-open', { name:name, props:prop, originalEvent:event });\n    }\n\n    // move element to top for proper absolute positioning\n    obj.appendTo(document.body);\n\n    if (typeof show == 'undefined')\n      show = obj.is(':visible') ? false : true;\n\n    if (show && ref.length) {\n      var win = $(window),\n        pos = ref.offset(),\n        above = align.indexOf('bottom') >= 0;\n\n      stack = ref.attr('role') == 'menuitem' || ref.closest('[role=menuitem]').length > 0;\n\n      ref.offsetWidth = ref.outerWidth();\n      ref.offsetHeight = ref.outerHeight();\n      if (!above && pos.top + ref.offsetHeight + obj.height() > win.height()) {\n        above = true;\n      }\n      if (align.indexOf('right') >= 0) {\n        pos.left = pos.left + ref.outerWidth() - obj.width();\n      }\n      else if (stack) {\n        pos.left = pos.left + ref.offsetWidth - 5;\n        pos.top -= ref.offsetHeight;\n      }\n      if (pos.left + obj.width() > win.width()) {\n        pos.left = win.width() - obj.width() - 12;\n      }\n      pos.top = Math.max(0, pos.top + (above ? -obj.height() : ref.offsetHeight));\n      obj.css({ left:pos.left+'px', top:pos.top+'px' });\n    }\n\n    // add menu to stack\n    if (show) {\n      // truncate stack down to the one containing the ref link\n      for (var i = this.menu_stack.length - 1; stack && i >= 0; i--) {\n        if (!$(ref).parents('#'+this.menu_stack[i]).length && $(event.target).parent().attr('role') != 'menuitem')\n          this.hide_menu(this.menu_stack[i], event);\n      }\n      if (stack && this.menu_stack.length) {\n        obj.data('parent', $.last(this.menu_stack));\n        obj.css('z-index', ($('#'+$.last(this.menu_stack)).css('z-index') || 0) + 1);\n      }\n      else if (!stack && this.menu_stack.length) {\n        this.hide_menu(this.menu_stack[0], event);\n      }\n\n      obj.show().attr('aria-hidden', 'false').data('opener', ref.attr('aria-expanded', 'true').get(0));\n      this.triggerEvent('menu-open', { name:name, obj:obj, props:prop, originalEvent:event });\n      this.menu_stack.push(name);\n\n      this.menu_keyboard_active = show && keyboard;\n      if (this.menu_keyboard_active) {\n        this.focused_menu = name;\n        obj.find('a,input:not(:disabled)').not('[aria-disabled=true]').first().focus();\n      }\n    }\n    else {  // close menu\n      this.hide_menu(name, event);\n    }\n\n    return show;\n  };\n\n  // hide the given popup menu (and it's childs)\n  this.hide_menu = function(name, event)\n  {\n    if (!this.menu_stack.length) {\n      // delegate to subscribers\n      this.triggerEvent('menu-close', { name:name, props:{ menu:name }, originalEvent:event });\n      return;\n    }\n\n    var obj, keyboard = rcube_event.is_keyboard(event);\n    for (var j=this.menu_stack.length-1; j >= 0; j--) {\n      obj = $('#' + this.menu_stack[j]).hide().attr('aria-hidden', 'true').data('parent', false);\n      this.triggerEvent('menu-close', { name:this.menu_stack[j], obj:obj, props:{ menu:this.menu_stack[j] }, originalEvent:event });\n      if (this.menu_stack[j] == name) {\n        j = -1;  // stop loop\n        if (obj.data('opener')) {\n          $(obj.data('opener')).attr('aria-expanded', 'false');\n          if (keyboard)\n            obj.data('opener').focus();\n        }\n      }\n      this.menu_stack.pop();\n    }\n\n    // focus previous menu in stack\n    if (this.menu_stack.length && keyboard) {\n      this.menu_keyboard_active = true;\n      this.focused_menu = $.last(this.menu_stack);\n      if (!obj || !obj.data('opener'))\n        $('#'+this.focused_menu).find('a,input:not(:disabled)').not('[aria-disabled=true]').first().focus();\n    }\n    else {\n      this.focused_menu = null;\n      this.menu_keyboard_active = false;\n    }\n  }\n\n\n  // position a menu element on the screen in relation to other object\n  this.element_position = function(element, obj)\n  {\n    var obj = $(obj), win = $(window),\n      width = obj.outerWidth(),\n      height = obj.outerHeight(),\n      menu_pos = obj.data('menu-pos'),\n      win_height = win.height(),\n      elem_height = $(element).height(),\n      elem_width = $(element).width(),\n      pos = obj.offset(),\n      top = pos.top,\n      left = pos.left + width;\n\n    if (menu_pos == 'bottom') {\n      top += height;\n      left -= width;\n    }\n    else\n      left -= 5;\n\n    if (top + elem_height > win_height) {\n      top -= elem_height - height;\n      if (top < 0)\n        top = Math.max(0, (win_height - elem_height) / 2);\n    }\n\n    if (left + elem_width > win.width())\n      left -= elem_width + width;\n\n    element.css({left: left + 'px', top: top + 'px'});\n  };\n\n  // initialize HTML editor\n  this.editor_init = function(config, id)\n  {\n    this.editor = new rcube_text_editor(config, id);\n  };\n\n\n  /********************************************************/\n  /*********  html to text conversion functions   *********/\n  /********************************************************/\n\n  this.html2plain = function(html, func)\n  {\n    return this.format_converter(html, 'html', func);\n  };\n\n  this.plain2html = function(plain, func)\n  {\n    return this.format_converter(plain, 'plain', func);\n  };\n\n  this.format_converter = function(text, format, func)\n  {\n    // warn the user (if converted content is not empty)\n    if (!text\n      || (format == 'html' && !(text.replace(/<[^>]+>|&nbsp;|\\xC2\\xA0|\\s/g, '')).length)\n      || (format != 'html' && !(text.replace(/\\xC2\\xA0|\\s/g, '')).length)\n    ) {\n      // without setTimeout() here, textarea is filled with initial (onload) content\n      if (func)\n        setTimeout(function() { func(''); }, 50);\n      return true;\n    }\n\n    var confirmed = this.env.editor_warned || confirm(this.get_label('editorwarning'));\n\n    this.env.editor_warned = true;\n\n    if (!confirmed)\n      return false;\n\n    var url = '?_task=utils&_action=' + (format == 'html' ? 'html2text' : 'text2html'),\n      lock = this.set_busy(true, 'converting');\n\n    this.log('HTTP POST: ' + url);\n\n    $.ajax({ type: 'POST', url: url, data: text, contentType: 'application/octet-stream',\n      error: function(o, status, err) { ref.http_error(o, status, err, lock); },\n      success: function(data) {\n        ref.set_busy(false, null, lock);\n        if (func) func(data);\n      }\n    });\n\n    return true;\n  };\n\n\n  /********************************************************/\n  /*********        remote request methods        *********/\n  /********************************************************/\n\n  // compose a valid url with the given parameters\n  this.url = function(action, query)\n  {\n    var querystring = typeof query === 'string' ? query : '';\n\n    if (typeof action !== 'string')\n      query = action;\n    else if (!query || typeof query !== 'object')\n      query = {};\n\n    if (action)\n      query._action = action;\n    else if (this.env.action)\n      query._action = this.env.action;\n\n    var url = this.env.comm_path, k, param = {};\n\n    // overwrite task name\n    if (action && action.match(/([a-z0-9_-]+)\\/([a-z0-9-_.]+)/)) {\n      query._action = RegExp.$2;\n      url = url.replace(/\\_task=[a-z0-9_-]+/, '_task=' + RegExp.$1);\n    }\n\n    // remove undefined values\n    for (k in query) {\n      if (query[k] !== undefined && query[k] !== null)\n        param[k] = query[k];\n    }\n\n    if (param = $.param(param))\n      url += (url.indexOf('?') > -1 ? '&' : '?') + param;\n\n    if (querystring)\n      url += (url.indexOf('?') > -1 ? '&' : '?') + querystring;\n\n    return url;\n  };\n\n  this.redirect = function(url, lock)\n  {\n    if (lock || lock === null)\n      this.set_busy(true);\n\n    if (this.is_framed()) {\n      parent.rcmail.redirect(url, lock);\n    }\n    else {\n      if (this.env.extwin) {\n        if (typeof url == 'string')\n          url += (url.indexOf('?') < 0 ? '?' : '&') + '_extwin=1';\n        else\n          url._extwin = 1;\n      }\n      this.location_href(url, window);\n    }\n  };\n\n  this.goto_url = function(action, query, lock, secure)\n  {\n    var url = this.url(action, query)\n    if (secure) url = this.secure_url(url);\n    this.redirect(url, lock);\n  };\n\n  this.location_href = function(url, target, frame)\n  {\n    if (frame)\n      this.lock_frame();\n\n    if (typeof url == 'object')\n      url = this.env.comm_path + '&' + $.param(url);\n\n    // simulate real link click to force IE to send referer header\n    if (bw.ie && target == window)\n      $('<a>').attr('href', url).appendTo(document.body).get(0).click();\n    else\n      target.location.href = url;\n\n    // reset keep-alive interval\n    this.start_keepalive();\n  };\n\n  // update browser location to remember current view\n  this.update_state = function(query)\n  {\n    if (window.history.replaceState)\n      window.history.replaceState({}, document.title, rcmail.url('', query));\n  };\n\n  // send a http request to the server\n  this.http_request = function(action, data, lock)\n  {\n    if (typeof data !== 'object')\n      data = rcube_parse_query(data);\n\n    data._remote = 1;\n    data._unlock = lock ? lock : 0;\n\n    // trigger plugin hook\n    var result = this.triggerEvent('request' + action, data);\n\n    // abort if one of the handlers returned false\n    if (result === false) {\n      if (data._unlock)\n        this.set_busy(false, null, data._unlock);\n      return false;\n    }\n    else if (result !== undefined) {\n      data = result;\n      if (data._action) {\n        action = data._action;\n        delete data._action;\n      }\n    }\n\n    var url = this.url(action, data);\n\n    // send request\n    this.log('HTTP GET: ' + url);\n\n    // reset keep-alive interval\n    this.start_keepalive();\n\n    return $.ajax({\n      type: 'GET', url: url, dataType: 'json',\n      success: function(data) { ref.http_response(data); },\n      error: function(o, status, err) { ref.http_error(o, status, err, lock, action); }\n    });\n  };\n\n  // send a http POST request to the server\n  this.http_post = function(action, data, lock)\n  {\n    if (typeof data !== 'object')\n      data = rcube_parse_query(data);\n\n    data._remote = 1;\n    data._unlock = lock ? lock : 0;\n\n    // trigger plugin hook\n    var result = this.triggerEvent('request'+action, data);\n\n    // abort if one of the handlers returned false\n    if (result === false) {\n      if (data._unlock)\n        this.set_busy(false, null, data._unlock);\n      return false;\n    }\n    else if (result !== undefined) {\n      data = result;\n      if (data._action) {\n        action = data._action;\n        delete data._action;\n      }\n    }\n\n    var url = this.url(action);\n\n    // send request\n    this.log('HTTP POST: ' + url);\n\n    // reset keep-alive interval\n    this.start_keepalive();\n\n    return $.ajax({\n      type: 'POST', url: url, data: data, dataType: 'json',\n      success: function(data){ ref.http_response(data); },\n      error: function(o, status, err) { ref.http_error(o, status, err, lock, action); }\n    });\n  };\n\n  // aborts ajax request\n  this.abort_request = function(r)\n  {\n    if (r.request)\n      r.request.abort();\n    if (r.lock)\n      this.set_busy(false, null, r.lock);\n  };\n\n  // handle HTTP response\n  this.http_response = function(response)\n  {\n    if (!response)\n      return;\n\n    if (response.unlock)\n      this.set_busy(false);\n\n    this.triggerEvent('responsebefore', {response: response});\n    this.triggerEvent('responsebefore'+response.action, {response: response});\n\n    // set env vars\n    if (response.env)\n      this.set_env(response.env);\n\n    // we have labels to add\n    if (typeof response.texts === 'object') {\n      for (var name in response.texts)\n        if (typeof response.texts[name] === 'string')\n          this.add_label(name, response.texts[name]);\n    }\n\n    // if we get javascript code from server -> execute it\n    if (response.exec) {\n      this.log(response.exec);\n      eval(response.exec);\n    }\n\n    // execute callback functions of plugins\n    if (response.callbacks && response.callbacks.length) {\n      for (var i=0; i < response.callbacks.length; i++)\n        this.triggerEvent(response.callbacks[i][0], response.callbacks[i][1]);\n    }\n\n    // process the response data according to the sent action\n    switch (response.action) {\n      case 'delete':\n        if (this.task == 'addressbook') {\n          var sid, uid = this.contact_list.get_selection(), writable = false;\n\n          if (uid && this.contact_list.rows[uid]) {\n            // search results, get source ID from record ID\n            if (this.env.source == '') {\n              sid = String(uid).replace(/^[^-]+-/, '');\n              writable = sid && this.env.address_sources[sid] && !this.env.address_sources[sid].readonly;\n            }\n            else {\n              writable = !this.env.address_sources[this.env.source].readonly;\n            }\n          }\n          this.enable_command('compose', (uid && this.contact_list.rows[uid]));\n          this.enable_command('delete', 'edit', writable);\n          this.enable_command('export', (this.contact_list && this.contact_list.rowcount > 0));\n          this.enable_command('export-selected', 'print', false);\n        }\n\n      case 'move':\n        if (this.env.action == 'show') {\n          // re-enable commands on move/delete error\n          this.enable_command(this.env.message_commands, true);\n          if (!this.env.list_post)\n            this.enable_command('reply-list', false);\n        }\n        else if (this.task == 'addressbook') {\n          this.triggerEvent('listupdate', { folder:this.env.source, rowcount:this.contact_list.rowcount });\n        }\n\n      case 'purge':\n      case 'expunge':\n        if (this.task == 'mail') {\n          if (!this.env.exists) {\n            // clear preview pane content\n            if (this.env.contentframe)\n              this.show_contentframe(false);\n            // disable commands useless when mailbox is empty\n            this.enable_command(this.env.message_commands, 'purge', 'expunge',\n              'select-all', 'select-none', 'expand-all', 'expand-unread', 'collapse-all', false);\n          }\n          if (this.message_list)\n            this.triggerEvent('listupdate', { folder:this.env.mailbox, rowcount:this.message_list.rowcount });\n        }\n        break;\n\n      case 'refresh':\n      case 'check-recent':\n        // update message flags\n        $.each(this.env.recent_flags || {}, function(uid, flags) {\n          ref.set_message(uid, 'deleted', flags.deleted);\n          ref.set_message(uid, 'replied', flags.answered);\n          ref.set_message(uid, 'unread', !flags.seen);\n          ref.set_message(uid, 'forwarded', flags.forwarded);\n          ref.set_message(uid, 'flagged', flags.flagged);\n        });\n        delete this.env.recent_flags;\n\n      case 'getunread':\n      case 'search':\n        this.env.qsearch = null;\n      case 'list':\n        if (this.task == 'mail') {\n          var is_multifolder = this.is_multifolder_listing(),\n            list = this.message_list,\n            uid = this.env.list_uid;\n\n          this.enable_command('show', 'select-all', 'select-none', this.env.messagecount > 0);\n          this.enable_command('expunge', this.env.exists && !is_multifolder);\n          this.enable_command('purge', this.purge_mailbox_test() && !is_multifolder);\n          this.enable_command('import-messages', !is_multifolder);\n          this.enable_command('expand-all', 'expand-unread', 'collapse-all', this.env.threading && this.env.messagecount && !is_multifolder);\n\n          if (list) {\n            if (response.action == 'list' || response.action == 'search') {\n              // highlight message row when we're back from message page\n              if (uid) {\n                if (!list.rows[uid])\n                  uid += '-' + this.env.mailbox;\n                if (list.rows[uid]) {\n                  list.select(uid);\n                }\n                delete this.env.list_uid;\n              }\n\n              this.enable_command('set-listmode', this.env.threads && !is_multifolder);\n              if (list.rowcount > 0 && !$(document.activeElement).is('input,textarea'))\n                list.focus();\n\n              // trigger 'select' so all dependent actions update its state\n              // e.g. plugins use this event to activate buttons (#1490647)\n              list.triggerEvent('select');\n            }\n\n            if (response.action != 'getunread')\n              this.triggerEvent('listupdate', { folder:this.env.mailbox, rowcount:list.rowcount });\n          }\n        }\n        else if (this.task == 'addressbook') {\n          this.enable_command('export', (this.contact_list && this.contact_list.rowcount > 0));\n\n          if (response.action == 'list' || response.action == 'search') {\n            this.enable_command('search-create', this.env.source == '');\n            this.enable_command('search-delete', this.env.search_id);\n            this.update_group_commands();\n            if (this.contact_list.rowcount > 0 && !$(document.activeElement).is('input,textarea'))\n              this.contact_list.focus();\n            this.triggerEvent('listupdate', { folder:this.env.source, rowcount:this.contact_list.rowcount });\n          }\n        }\n        break;\n\n      case 'list-contacts':\n      case 'search-contacts':\n        if (this.contact_list && this.contact_list.rowcount > 0)\n          this.contact_list.focus();\n        break;\n    }\n\n    if (response.unlock)\n      this.hide_message(response.unlock);\n\n    this.triggerEvent('responseafter', {response: response});\n    this.triggerEvent('responseafter'+response.action, {response: response});\n\n    // reset keep-alive interval\n    this.start_keepalive();\n  };\n\n  // handle HTTP request errors\n  this.http_error = function(request, status, err, lock, action)\n  {\n    var errmsg = request.statusText;\n\n    this.set_busy(false, null, lock);\n    request.abort();\n\n    // don't display error message on page unload (#1488547)\n    if (this.unload)\n      return;\n\n    if (request.status && errmsg)\n      this.display_message(this.get_label('servererror') + ' (' + errmsg + ')', 'error');\n    else if (status == 'timeout')\n      this.display_message(this.get_label('requesttimedout'), 'error');\n    else if (request.status == 0 && status != 'abort')\n      this.display_message(this.get_label('connerror'), 'error');\n\n    // redirect to url specified in location header if not empty\n    var location_url = request.getResponseHeader(\"Location\");\n    if (location_url && this.env.action != 'compose')  // don't redirect on compose screen, contents might get lost (#1488926)\n      this.redirect(location_url);\n\n    // 403 Forbidden response (CSRF prevention) - reload the page.\n    // In case there's a new valid session it will be used, otherwise\n    // login form will be presented (#1488960).\n    if (request.status == 403) {\n      (this.is_framed() ? parent : window).location.reload();\n      return;\n    }\n\n    // re-send keep-alive requests after 30 seconds\n    if (action == 'keep-alive')\n      setTimeout(function(){ ref.keep_alive(); ref.start_keepalive(); }, 30000);\n  };\n\n  // handler for session errors detected on the server\n  this.session_error = function(redirect_url)\n  {\n    this.env.server_error = 401;\n\n    // save message in local storage and do not redirect\n    if (this.env.action == 'compose') {\n      this.save_compose_form_local();\n      this.compose_skip_unsavedcheck = true;\n    }\n    else if (redirect_url) {\n      setTimeout(function(){ ref.redirect(redirect_url, true); }, 2000);\n    }\n  };\n\n  // callback when an iframe finished loading\n  this.iframe_loaded = function(unlock)\n  {\n    this.set_busy(false, null, unlock);\n\n    if (this.submit_timer)\n      clearTimeout(this.submit_timer);\n  };\n\n  /**\n   Send multi-threaded parallel HTTP requests to the server for a list if items.\n   The string '%' in either a GET query or POST parameters will be replaced with the respective item value.\n   This is the argument object expected: {\n       items: ['foo','bar','gna'],      // list of items to send requests for\n       action: 'task/some-action',      // Roudncube action to call\n       query: { q:'%s' },               // GET query parameters\n       postdata: { source:'%s' },       // POST data (sends a POST request if present)\n       threads: 3,                      // max. number of concurrent requests\n       onresponse: function(data){ },   // Callback function called for every response received from server\n       whendone: function(alldata){ }   // Callback function called when all requests have been sent\n   }\n  */\n  this.multi_thread_http_request = function(prop)\n  {\n    var i, item, reqid = new Date().getTime(),\n      threads = prop.threads || 1;\n\n    prop.reqid = reqid;\n    prop.running = 0;\n    prop.requests = [];\n    prop.result = [];\n    prop._items = $.extend([], prop.items);  // copy items\n\n    if (!prop.lock)\n      prop.lock = this.display_message(this.get_label('loading'), 'loading');\n\n    // add the request arguments to the jobs pool\n    this.http_request_jobs[reqid] = prop;\n\n    // start n threads\n    for (i=0; i < threads; i++) {\n      item = prop._items.shift();\n      if (item === undefined)\n        break;\n\n      prop.running++;\n      prop.requests.push(this.multi_thread_send_request(prop, item));\n    }\n\n    return reqid;\n  };\n\n  // helper method to send an HTTP request with the given iterator value\n  this.multi_thread_send_request = function(prop, item)\n  {\n    var k, postdata, query;\n\n    // replace %s in post data\n    if (prop.postdata) {\n      postdata = {};\n      for (k in prop.postdata) {\n        postdata[k] = String(prop.postdata[k]).replace('%s', item);\n      }\n      postdata._reqid = prop.reqid;\n    }\n    // replace %s in query\n    else if (typeof prop.query == 'string') {\n      query = prop.query.replace('%s', item);\n      query += '&_reqid=' + prop.reqid;\n    }\n    else if (typeof prop.query == 'object' && prop.query) {\n      query = {};\n      for (k in prop.query) {\n        query[k] = String(prop.query[k]).replace('%s', item);\n      }\n      query._reqid = prop.reqid;\n    }\n\n    // send HTTP GET or POST request\n    return postdata ? this.http_post(prop.action, postdata) : this.http_request(prop.action, query);\n  };\n\n  // callback function for multi-threaded http responses\n  this.multi_thread_http_response = function(data, reqid)\n  {\n    var prop = this.http_request_jobs[reqid];\n    if (!prop || prop.running <= 0 || prop.cancelled)\n      return;\n\n    prop.running--;\n\n    // trigger response callback\n    if (prop.onresponse && typeof prop.onresponse == 'function') {\n      prop.onresponse(data);\n    }\n\n    prop.result = $.extend(prop.result, data);\n\n    // send next request if prop.items is not yet empty\n    var item = prop._items.shift();\n    if (item !== undefined) {\n      prop.running++;\n      prop.requests.push(this.multi_thread_send_request(prop, item));\n    }\n    // trigger whendone callback and mark this request as done\n    else if (prop.running == 0) {\n      if (prop.whendone && typeof prop.whendone == 'function') {\n        prop.whendone(prop.result);\n      }\n\n      this.set_busy(false, '', prop.lock);\n\n      // remove from this.http_request_jobs pool\n      delete this.http_request_jobs[reqid];\n    }\n  };\n\n  // abort a running multi-thread request with the given identifier\n  this.multi_thread_request_abort = function(reqid)\n  {\n    var prop = this.http_request_jobs[reqid];\n    if (prop) {\n      for (var i=0; prop.running > 0 && i < prop.requests.length; i++) {\n        if (prop.requests[i].abort)\n          prop.requests[i].abort();\n      }\n\n      prop.running = 0;\n      prop.cancelled = true;\n      this.set_busy(false, '', prop.lock);\n    }\n  };\n\n  // post the given form to a hidden iframe\n  this.async_upload_form = function(form, action, onload)\n  {\n    // create hidden iframe\n    var ts = new Date().getTime(),\n      frame_name = 'rcmupload' + ts,\n      frame = this.async_upload_form_frame(frame_name);\n\n    // upload progress support\n    if (this.env.upload_progress_name) {\n      var fname = this.env.upload_progress_name,\n        field = $('input[name='+fname+']', form);\n\n      if (!field.length) {\n        field = $('<input>').attr({type: 'hidden', name: fname});\n        field.prependTo(form);\n      }\n\n      field.val(ts);\n    }\n\n    // handle upload errors by parsing iframe content in onload\n    frame.bind('load', {ts:ts}, onload);\n\n    $(form).attr({\n        target: frame_name,\n        action: this.url(action, {_id: this.env.compose_id || '', _uploadid: ts, _from: this.env.action}),\n        method: 'POST'})\n      .attr(form.encoding ? 'encoding' : 'enctype', 'multipart/form-data')\n      .submit();\n\n    return frame_name;\n  };\n\n  // create iframe element for files upload\n  this.async_upload_form_frame = function(name)\n  {\n    return $('<iframe>').attr({name: name, style: 'border: none; width: 0; height: 0; visibility: hidden'})\n      .appendTo(document.body);\n  };\n\n  // html5 file-drop API\n  this.document_drag_hover = function(e, over)\n  {\n    // don't e.preventDefault() here to not block text dragging on the page (#1490619)\n    $(this.gui_objects.filedrop)[(over?'addClass':'removeClass')]('active');\n  };\n\n  this.file_drag_hover = function(e, over)\n  {\n    e.preventDefault();\n    e.stopPropagation();\n    $(this.gui_objects.filedrop)[(over?'addClass':'removeClass')]('hover');\n  };\n\n  // handler when files are dropped to a designated area.\n  // compose a multipart form data and submit it to the server\n  this.file_dropped = function(e)\n  {\n    // abort event and reset UI\n    this.file_drag_hover(e, false);\n\n    // prepare multipart form data composition\n    var files = e.target.files || e.dataTransfer.files,\n      formdata = window.FormData ? new FormData() : null,\n      fieldname = (this.env.filedrop.fieldname || '_file') + (this.env.filedrop.single ? '' : '[]'),\n      boundary = '------multipartformboundary' + (new Date).getTime(),\n      dashdash = '--', crlf = '\\r\\n',\n      multipart = dashdash + boundary + crlf;\n\n    if (!files || !files.length)\n      return;\n\n    // inline function to submit the files to the server\n    var submit_data = function() {\n      var multiple = files.length > 1,\n        ts = new Date().getTime(),\n        // jQuery way to escape filename (#1490530)\n        content = $('<span>').text(multiple ? ref.get_label('uploadingmany') : files[0].name).html();\n\n      // add to attachments list\n      if (!ref.add2attachment_list(ts, { name:'', html:content, classname:'uploading', complete:false }))\n        ref.file_upload_id = ref.set_busy(true, 'uploading');\n\n      // complete multipart content and post request\n      multipart += dashdash + boundary + dashdash + crlf;\n\n      $.ajax({\n        type: 'POST',\n        dataType: 'json',\n        url: ref.url(ref.env.filedrop.action || 'upload', {_id: ref.env.compose_id||ref.env.cid||'', _uploadid: ts, _remote: 1, _from: ref.env.action}),\n        contentType: formdata ? false : 'multipart/form-data; boundary=' + boundary,\n        processData: false,\n        timeout: 0, // disable default timeout set in ajaxSetup()\n        data: formdata || multipart,\n        headers: {'X-Roundcube-Request': ref.env.request_token},\n        xhr: function() { var xhr = jQuery.ajaxSettings.xhr(); if (!formdata && xhr.sendAsBinary) xhr.send = xhr.sendAsBinary; return xhr; },\n        success: function(data){ ref.http_response(data); },\n        error: function(o, status, err) { ref.http_error(o, status, err, null, 'attachment'); }\n      });\n    };\n\n    // get contents of all dropped files\n    var last = this.env.filedrop.single ? 0 : files.length - 1;\n    for (var j=0, i=0, f; j <= last && (f = files[i]); i++) {\n      if (!f.name) f.name = f.fileName;\n      if (!f.size) f.size = f.fileSize;\n      if (!f.type) f.type = 'application/octet-stream';\n\n      // file name contains non-ASCII characters, do UTF8-binary string conversion.\n      if (!formdata && /[^\\x20-\\x7E]/.test(f.name))\n        f.name_bin = unescape(encodeURIComponent(f.name));\n\n      // filter by file type if requested\n      if (this.env.filedrop.filter && !f.type.match(new RegExp(this.env.filedrop.filter))) {\n        // TODO: show message to user\n        continue;\n      }\n\n      // do it the easy way with FormData (FF 4+, Chrome 5+, Safari 5+)\n      if (formdata) {\n        formdata.append(fieldname, f);\n        if (j == last)\n          return submit_data();\n      }\n      // use FileReader supporetd by Firefox 3.6\n      else if (window.FileReader) {\n        var reader = new FileReader();\n\n        // closure to pass file properties to async callback function\n        reader.onload = (function(file, j) {\n          return function(e) {\n            multipart += 'Content-Disposition: form-data; name=\"' + fieldname + '\"';\n            multipart += '; filename=\"' + (f.name_bin || file.name) + '\"' + crlf;\n            multipart += 'Content-Length: ' + file.size + crlf;\n            multipart += 'Content-Type: ' + file.type + crlf + crlf;\n            multipart += reader.result + crlf;\n            multipart += dashdash + boundary + crlf;\n\n            if (j == last)  // we're done, submit the data\n              return submit_data();\n          }\n        })(f,j);\n        reader.readAsBinaryString(f);\n      }\n      // Firefox 3\n      else if (f.getAsBinary) {\n        multipart += 'Content-Disposition: form-data; name=\"' + fieldname + '\"';\n        multipart += '; filename=\"' + (f.name_bin || f.name) + '\"' + crlf;\n        multipart += 'Content-Length: ' + f.size + crlf;\n        multipart += 'Content-Type: ' + f.type + crlf + crlf;\n        multipart += f.getAsBinary() + crlf;\n        multipart += dashdash + boundary +crlf;\n\n        if (j == last)\n          return submit_data();\n      }\n\n      j++;\n    }\n  };\n\n  // starts interval for keep-alive signal\n  this.start_keepalive = function()\n  {\n    if (!this.env.session_lifetime || this.env.framed || this.env.extwin || this.task == 'login' || this.env.action == 'print')\n      return;\n\n    if (this._keepalive)\n      clearInterval(this._keepalive);\n\n    this._keepalive = setInterval(function(){ ref.keep_alive(); }, this.env.session_lifetime * 0.5 * 1000);\n  };\n\n  // starts interval for refresh signal\n  this.start_refresh = function()\n  {\n    if (!this.env.refresh_interval || this.env.framed || this.env.extwin || this.task == 'login' || this.env.action == 'print')\n      return;\n\n    if (this._refresh)\n      clearInterval(this._refresh);\n\n    this._refresh = setInterval(function(){ ref.refresh(); }, this.env.refresh_interval * 1000);\n  };\n\n  // sends keep-alive signal\n  this.keep_alive = function()\n  {\n    if (!this.busy)\n      this.http_request('keep-alive');\n  };\n\n  // sends refresh signal\n  this.refresh = function()\n  {\n    if (this.busy) {\n      // try again after 10 seconds\n      setTimeout(function(){ ref.refresh(); ref.start_refresh(); }, 10000);\n      return;\n    }\n\n    var params = {}, lock = this.set_busy(true, 'refreshing');\n\n    if (this.task == 'mail' && this.gui_objects.mailboxlist)\n      params = this.check_recent_params();\n\n    params._last = Math.floor(this.env.lastrefresh.getTime() / 1000);\n    this.env.lastrefresh = new Date();\n\n    // plugins should bind to 'requestrefresh' event to add own params\n    this.http_post('refresh', params, lock);\n  };\n\n  // returns check-recent request parameters\n  this.check_recent_params = function()\n  {\n    var params = {_mbox: this.env.mailbox};\n\n    if (this.gui_objects.mailboxlist)\n      params._folderlist = 1;\n    if (this.gui_objects.quotadisplay)\n      params._quota = 1;\n    if (this.env.search_request)\n      params._search = this.env.search_request;\n\n    if (this.gui_objects.messagelist) {\n      params._list = 1;\n\n      // message uids for flag updates check\n      params._uids = $.map(this.message_list.rows, function(row, uid) { return uid; }).join(',');\n    }\n\n    return params;\n  };\n\n\n  /********************************************************/\n  /*********            helper methods            *********/\n  /********************************************************/\n\n  /**\n   * Quote html entities\n   */\n  this.quote_html = function(str)\n  {\n    return String(str).replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n  };\n\n  // get window.opener.rcmail if available\n  this.opener = function(deep, filter)\n  {\n    var i, win = window.opener;\n\n    // catch Error: Permission denied to access property rcmail\n    try {\n      if (win && !win.closed) {\n        // try parent of the opener window, e.g. preview frame\n        if (deep && (!win.rcmail || win.rcmail.env.framed) && win.parent && win.parent.rcmail)\n          win = win.parent;\n\n        if (win.rcmail && filter)\n          for (i in filter)\n            if (win.rcmail.env[i] != filter[i])\n              return;\n\n        return win.rcmail;\n      }\n    }\n    catch (e) {}\n  };\n\n  // check if we're in show mode or if we have a unique selection\n  // and return the message uid\n  this.get_single_uid = function()\n  {\n    var uid = this.env.uid || (this.message_list ? this.message_list.get_single_selection() : null);\n    var result = ref.triggerEvent('get_single_uid', { uid: uid });\n    return result || uid;\n  };\n\n  // same as above but for contacts\n  this.get_single_cid = function()\n  {\n    var cid = this.env.cid || (this.contact_list ? this.contact_list.get_single_selection() : null);\n    var result = ref.triggerEvent('get_single_cid', { cid: cid });\n    return result || cid;\n  };\n\n  // get the IMP mailbox of the message with the given UID\n  this.get_message_mailbox = function(uid)\n  {\n    var msg = (this.env.messages && uid ? this.env.messages[uid] : null) || {};\n    return msg.mbox || this.env.mailbox;\n  };\n\n  // build request parameters from single message id (maybe with mailbox name)\n  this.params_from_uid = function(uid, params)\n  {\n    if (!params)\n      params = {};\n\n    params._uid = String(uid).split('-')[0];\n    params._mbox = this.get_message_mailbox(uid);\n\n    return params;\n  };\n\n  // gets cursor position\n  this.get_caret_pos = function(obj)\n  {\n    if (obj.selectionEnd !== undefined)\n      return obj.selectionEnd;\n\n    return obj.value.length;\n  };\n\n  // moves cursor to specified position\n  this.set_caret_pos = function(obj, pos)\n  {\n    try {\n      if (obj.setSelectionRange)\n        obj.setSelectionRange(pos, pos);\n    }\n    catch(e) {} // catch Firefox exception if obj is hidden\n  };\n\n  // get selected text from an input field\n  this.get_input_selection = function(obj)\n  {\n    var start = 0, end = 0, normalizedValue = '';\n\n    if (typeof obj.selectionStart == \"number\" && typeof obj.selectionEnd == \"number\") {\n      normalizedValue = obj.value;\n      start = obj.selectionStart;\n      end = obj.selectionEnd;\n    }\n\n    return {start: start, end: end, text: normalizedValue.substr(start, end-start)};\n  };\n\n  // disable/enable all fields of a form\n  this.lock_form = function(form, lock)\n  {\n    if (!form || !form.elements)\n      return;\n\n    var n, len, elm;\n\n    if (lock)\n      this.disabled_form_elements = [];\n\n    for (n=0, len=form.elements.length; n<len; n++) {\n      elm = form.elements[n];\n\n      if (elm.type == 'hidden')\n        continue;\n      // remember which elem was disabled before lock\n      if (lock && elm.disabled)\n        this.disabled_form_elements.push(elm);\n      else if (lock || $.inArray(elm, this.disabled_form_elements) < 0)\n        elm.disabled = lock;\n    }\n  };\n\n  this.mailto_handler_uri = function()\n  {\n    return location.href.split('?')[0] + '?_task=mail&_action=compose&_to=%s';\n  };\n\n  this.register_protocol_handler = function(name)\n  {\n    try {\n      window.navigator.registerProtocolHandler('mailto', this.mailto_handler_uri(), name);\n    }\n    catch(e) {\n      this.display_message(String(e), 'error');\n    }\n  };\n\n  this.check_protocol_handler = function(name, elem)\n  {\n    var nav = window.navigator;\n\n    if (!nav || (typeof nav.registerProtocolHandler != 'function')) {\n      $(elem).addClass('disabled').click(function(){ return false; });\n    }\n    else if (typeof nav.isProtocolHandlerRegistered == 'function') {\n      var status = nav.isProtocolHandlerRegistered('mailto', this.mailto_handler_uri());\n      if (status)\n        $(elem).parent().find('.mailtoprotohandler-status').html(status);\n    }\n    else {\n      $(elem).click(function() { ref.register_protocol_handler(name); return false; });\n    }\n  };\n\n  // Checks browser capabilities eg. PDF support, TIF support\n  this.browser_capabilities_check = function()\n  {\n    if (!this.env.browser_capabilities)\n      this.env.browser_capabilities = {};\n\n    $.each(['pdf', 'flash', 'tif'], function() {\n      if (ref.env.browser_capabilities[this] === undefined)\n        ref.env.browser_capabilities[this] = ref[this + '_support_check']();\n    });\n  };\n\n  // Returns browser capabilities string\n  this.browser_capabilities = function()\n  {\n    if (!this.env.browser_capabilities)\n      return '';\n\n    var n, ret = [];\n\n    for (n in this.env.browser_capabilities)\n      ret.push(n + '=' + this.env.browser_capabilities[n]);\n\n    return ret.join();\n  };\n\n  this.tif_support_check = function()\n  {\n    window.setTimeout(function() {\n      var img = new Image();\n      img.onload = function() { ref.env.browser_capabilities.tif = 1; };\n      img.onerror = function() { ref.env.browser_capabilities.tif = 0; };\n      img.src = ref.assets_path('program/resources/blank.tif');\n    }, 10);\n\n    return 0;\n  };\n\n  this.pdf_support_check = function()\n  {\n    var plugin = navigator.mimeTypes ? navigator.mimeTypes[\"application/pdf\"] : {},\n      plugins = navigator.plugins,\n      len = plugins.length,\n      regex = /Adobe Reader|PDF|Acrobat/i;\n\n    if (plugin && plugin.enabledPlugin)\n        return 1;\n\n    if ('ActiveXObject' in window) {\n      try {\n        if (plugin = new ActiveXObject(\"AcroPDF.PDF\"))\n          return 1;\n      }\n      catch (e) {}\n      try {\n        if (plugin = new ActiveXObject(\"PDF.PdfCtrl\"))\n          return 1;\n      }\n      catch (e) {}\n    }\n\n    for (i=0; i<len; i++) {\n      plugin = plugins[i];\n      if (typeof plugin === 'String') {\n        if (regex.test(plugin))\n          return 1;\n      }\n      else if (plugin.name && regex.test(plugin.name))\n        return 1;\n    }\n\n    window.setTimeout(function() {\n      $('<object>').css({position: 'absolute', left: '-10000px'})\n        .attr({data: ref.assets_path('program/resources/dummy.pdf'), width: 1, height: 1, type: 'application/pdf'})\n        .load(function() { ref.env.browser_capabilities.pdf = 1; })\n        .error(function() { ref.env.browser_capabilities.pdf = 0; })\n        .appendTo($('body'));\n      }, 10);\n\n    return 0;\n  };\n\n  this.flash_support_check = function()\n  {\n    var plugin = navigator.mimeTypes ? navigator.mimeTypes[\"application/x-shockwave-flash\"] : {};\n\n    if (plugin && plugin.enabledPlugin)\n        return 1;\n\n    if ('ActiveXObject' in window) {\n      try {\n        if (plugin = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\"))\n          return 1;\n      }\n      catch (e) {}\n    }\n\n    return 0;\n  };\n\n  this.assets_path = function(path)\n  {\n    if (this.env.assets_path && !path.startsWith(this.env.assets_path)) {\n      path = this.env.assets_path + path;\n    }\n\n    return path;\n  };\n\n  // Cookie setter\n  this.set_cookie = function(name, value, expires)\n  {\n    setCookie(name, value, expires, this.env.cookie_path, this.env.cookie_domain, this.env.cookie_secure);\n  };\n\n  this.get_local_storage_prefix = function()\n  {\n    if (!this.local_storage_prefix)\n      this.local_storage_prefix = 'roundcube.' + (this.env.user_id || 'anonymous') + '.';\n\n    return this.local_storage_prefix;\n  };\n\n  // wrapper for localStorage.getItem(key)\n  this.local_storage_get_item = function(key, deflt, encrypted)\n  {\n    var item, result;\n\n    // TODO: add encryption\n    try {\n      item = localStorage.getItem(this.get_local_storage_prefix() + key);\n      result = JSON.parse(item);\n    }\n    catch (e) { }\n\n    return result || deflt || null;\n  };\n\n  // wrapper for localStorage.setItem(key, data)\n  this.local_storage_set_item = function(key, data, encrypted)\n  {\n    // try/catch to handle no localStorage support, but also error\n    // in Safari-in-private-browsing-mode where localStorage exists\n    // but can't be used (#1489996)\n    try {\n      // TODO: add encryption\n      localStorage.setItem(this.get_local_storage_prefix() + key, JSON.stringify(data));\n      return true;\n    }\n    catch (e) {\n      return false;\n    }\n  };\n\n  // wrapper for localStorage.removeItem(key)\n  this.local_storage_remove_item = function(key)\n  {\n    try {\n      localStorage.removeItem(this.get_local_storage_prefix() + key);\n      return true;\n    }\n    catch (e) {\n      return false;\n    }\n  };\n\n  this.print_dialog = function()\n  {\n    if (bw.safari)\n      setTimeout('window.print()', 10);\n    else\n      window.print();\n  };\n}  // end object rcube_webmail\n\n\n// some static methods\nrcube_webmail.long_subject_title = function(elem, indent)\n{\n  if (!elem.title) {\n    var $elem = $(elem);\n    if ($elem.width() + (indent || 0) * 15 > $elem.parent().width())\n      elem.title = rcube_webmail.subject_text(elem);\n  }\n};\n\nrcube_webmail.long_subject_title_ex = function(elem)\n{\n  if (!elem.title) {\n    var $elem = $(elem),\n      txt = $.trim($elem.text()),\n      tmp = $('<span>').text(txt)\n        .css({'position': 'absolute', 'float': 'left', 'visibility': 'hidden',\n          'font-size': $elem.css('font-size'), 'font-weight': $elem.css('font-weight')})\n        .appendTo($('body')),\n      w = tmp.width();\n\n    tmp.remove();\n    if (w + $('span.branch', $elem).width() * 15 > $elem.width())\n      elem.title = rcube_webmail.subject_text(elem);\n  }\n};\n\nrcube_webmail.subject_text = function(elem)\n{\n  var t = $(elem).clone();\n  t.find('.skip-on-drag').remove();\n  return t.text();\n};\n\nrcube_webmail.prototype.get_cookie = getCookie;\n\n// copy event engine prototype\nrcube_webmail.prototype.addEventListener = rcube_event_engine.prototype.addEventListener;\nrcube_webmail.prototype.removeEventListener = rcube_event_engine.prototype.removeEventListener;\nrcube_webmail.prototype.triggerEvent = rcube_event_engine.prototype.triggerEvent;\n", "code_before": "/**\n * Roundcube Webmail Client Script\n *\n * This file is part of the Roundcube Webmail client\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (C) The Roundcube Dev Team\n * Copyright (C) Kolab Systems AG\n *\n * The JavaScript code in this page is free software: you can\n * redistribute it and/or modify it under the terms of the GNU\n * General Public License (GNU GPL) as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option)\n * any later version.  The code is distributed WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.\n *\n * As additional permission under GNU GPL version 3 section 7, you\n * may distribute non-source (e.g., minimized or compacted) forms of\n * that code without the copy of the GNU GPL normally required by\n * section 4, provided you include this license notice and a URL\n * through which recipients can access the Corresponding Source.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n *\n * @author Thomas Bruederli <roundcube@gmail.com>\n * @author Aleksander 'A.L.E.C' Machniak <alec@alec.pl>\n * @author Charles McNulty <charles@charlesmcnulty.com>\n *\n * @requires jquery.js, common.js, list.js\n */\n\nfunction rcube_webmail() {\n    this.labels = {};\n    this.buttons = {};\n    this.buttons_sel = {};\n    this.gui_objects = {};\n    this.gui_containers = {};\n    this.commands = {};\n    this.command_handlers = {};\n    this.onloads = [];\n    this.messages = {};\n    this.group2expand = {};\n    this.http_request_jobs = {};\n    this.menu_stack = [];\n    this.menu_buttons = {};\n    this.entity_selectors = [];\n    this.image_style = {};\n    this.uploads = {};\n\n    // webmail client settings\n    this.dblclick_time = 500;\n    this.message_time = 5000;\n    this.preview_delay_select = 400;\n    this.preview_delay_click = 60;\n    this.identifier_expr = /[^0-9a-z_-]/gi;\n    this.uploadTimeout = 0; // 0 = no timeout | ajax call timeout for loading attachment\n\n\n    // environment defaults\n    this.env = {\n        attachments: {},\n        request_timeout: 180, // seconds\n        draft_autosave: 0, // seconds\n        comm_path: './',\n        recipients_separator: ',', // @deprecated\n        recipients_delimiter: ', ', // @deprecated\n        popup_width: 1150,\n        popup_width_small: 900,\n        thread_padding: '15px',\n        browser_capabilities: {},\n    };\n\n    // create protected reference to myself\n    this.ref = 'rcmail';\n    var ref = this;\n\n    // set jQuery ajax options\n    $.ajaxSetup({\n        cache: false,\n        timeout: this.env.request_timeout * 1000,\n        error: function (request, status, err) {\n            ref.http_error(request, status, err);\n        },\n        beforeSend: function (xmlhttp) {\n            xmlhttp.setRequestHeader('X-Roundcube-Request', ref.env.request_token);\n        },\n    });\n\n    // unload fix\n    $(window).on('beforeunload', function () {\n        ref.unload = true;\n    });\n\n    // set environment variable(s)\n    this.set_env = function (p, value) {\n        if (p != null && typeof p === 'object' && !value) {\n            for (var n in p) {\n                this.env[n] = p[n];\n            }\n        } else {\n            this.env[p] = value;\n        }\n    };\n\n    // add a localized label to the client environment\n    this.add_label = function (p, value) {\n        if (typeof p === 'string') {\n            this.labels[p] = value;\n        } else if (typeof p === 'object') {\n            $.extend(this.labels, p);\n        }\n    };\n\n    // add a button to the button list\n    this.register_button = function (command, id, type, act, sel, over) {\n        var button_prop = { id: id, type: type };\n\n        if (act) {\n            button_prop.act = act;\n        }\n        if (sel) {\n            button_prop.sel = sel;\n        }\n        if (over) {\n            button_prop.over = over;\n        }\n\n        if (!this.buttons[command]) {\n            this.buttons[command] = [];\n        }\n\n        this.buttons[command].push(button_prop);\n\n        if (this.loaded) {\n            this.init_button(command, button_prop);\n            this.set_button(command, (this.commands[command] ? 'act' : 'pas'));\n        }\n    };\n\n    // register a button with popup menu, to set its state according to the state of all commands in the menu\n    this.register_menu_button = function (button, menu_id) {\n        if (this.menu_buttons[menu_id]) {\n            this.menu_buttons[menu_id][0].push(button);\n        } else {\n            var commands = [];\n            $('#' + menu_id).find('a').each(function () {\n                var command, link = $(this), onclick = link.attr('onclick');\n\n                if (onclick && String(onclick).match(/rcmail\\.command\\(\\'([^']+)/)) {\n                    command = RegExp.$1;\n                } else {\n                    command = function () {\n                        return link.is('.active');\n                    };\n                }\n\n                commands.push(command);\n            });\n\n            if (commands.length) {\n                this.menu_buttons[menu_id] = [[button], commands];\n            }\n        }\n\n        this.set_menu_buttons();\n    };\n\n    // set state of a menu button according to state of all menu actions\n    this.set_menu_buttons = function () {\n        // Use timeouts to not block and set menu button states only once\n        clearTimeout(this.menu_buttons_timeout);\n        this.menu_buttons_timeout = setTimeout(function () {\n            $.each(ref.menu_buttons, function () {\n                var disabled = true;\n                $.each(this[1], function () {\n                    var is_func = typeof (this) === 'function';\n                    if ((is_func && this()) || (!is_func && ref.commands[this])) {\n                        disabled = false;\n                        return disabled;\n                    }\n                });\n\n                $(this[0]).add($(this[0]).parent('.dropbutton'))\n                    .addClass(disabled ? 'disabled' : 'active')\n                    .removeClass(disabled ? 'active' : 'disabled');\n            });\n        }, 50);\n    };\n\n    // register a specific gui object\n    this.gui_object = function (name, id) {\n        this.gui_objects[name] = this.loaded ? rcube_find_object(id) : id;\n    };\n\n    // register a container object\n    this.gui_container = function (name, id) {\n        this.gui_containers[name] = id;\n    };\n\n    // add a GUI element (html node) to a specified container\n    this.add_element = function (elm, container) {\n        if (this.gui_containers[container] && this.gui_containers[container].jquery) {\n            this.gui_containers[container].append(elm);\n        }\n    };\n\n    // register an external handler for a certain command\n    this.register_command = function (command, callback, enable) {\n        this.command_handlers[command] = callback;\n\n        if (enable) {\n            this.enable_command(command, true);\n        }\n    };\n\n    // execute the given script on load\n    this.add_onload = function (f) {\n        this.onloads.push(f);\n    };\n\n    // initialize webmail client\n    this.init = function () {\n        var n;\n        this.task = this.env.task;\n\n        if (!this.env.blankpage) {\n            this.env.blankpage = 'javascript:false;';\n        }\n\n        // find all registered gui containers\n        for (n in this.gui_containers) {\n            this.gui_containers[n] = $('#' + this.gui_containers[n]);\n        }\n\n        // find all registered gui objects\n        for (n in this.gui_objects) {\n            this.gui_objects[n] = rcube_find_object(this.gui_objects[n]);\n        }\n\n        // init registered buttons\n        this.init_buttons();\n\n        // tell parent window that this frame is loaded\n        if (this.is_framed()) {\n            parent.rcmail.unlock_frame();\n        }\n\n        // enable general commands\n        this.enable_command('close', 'logout', 'mail', 'addressbook', 'settings', 'save-pref',\n            'compose', 'undo', 'about', 'switch-task', 'menu-open', 'menu-close', 'menu-save', true);\n\n        // set active task button\n        this.set_button(this.task, 'sel');\n\n        if (this.env.permaurl) {\n            this.enable_command('permaurl', 'extwin', true);\n        }\n\n        switch (this.task) {\n            case 'mail':\n                // enable mail commands\n                this.enable_command('list', 'checkmail', 'add-contact', 'search', 'reset-search', 'collapse-folder', 'import-messages', true);\n\n                if (this.gui_objects.messagelist) {\n                    // setup message list cols\n                    this.msglist_setup(this.env.layout);\n\n                    this.env.widescreen_list_template = [\n                        { className: 'threads', cells: ['threads'] },\n                        { className: 'subject', cells: ['fromto', 'date', 'size', 'status', 'subject'] },\n                        { className: 'flags', cells: ['flag', 'attachment'] },\n                    ];\n\n                    this.message_list = new rcube_list_widget(this.gui_objects.messagelist, {\n                        multiselect: true,\n                        multiexpand: true,\n                        draggable: true,\n                        keyboard: true,\n                        column_movable: this.env.col_movable,\n                        dblclick_time: this.dblclick_time,\n                    });\n                    this.message_list\n                        .addEventListener('initrow', function (o) {\n                            ref.init_message_row(o);\n                        })\n                        .addEventListener('dblclick', function (o) {\n                            ref.msglist_dbl_click(o);\n                        })\n                        .addEventListener('keypress', function (o) {\n                            ref.msglist_keypress(o);\n                        })\n                        .addEventListener('select', function (o) {\n                            ref.msglist_select(o);\n                        })\n                        .addEventListener('dragstart', function (o) {\n                            ref.drag_start(o);\n                        })\n                        .addEventListener('dragmove', function (e) {\n                            ref.drag_move(e);\n                        })\n                        .addEventListener('dragend', function (e) {\n                            ref.drag_end(e);\n                        })\n                        .addEventListener('expandcollapse', function (o) {\n                            ref.msglist_expand(o);\n                        })\n                        .addEventListener('column_replace', function (o) {\n                            ref.msglist_set_coltypes(o);\n                        })\n                        .init();\n\n                    // TODO: this should go into the list-widget code\n                    $(this.message_list.thead).on('click', 'a.sortcol', function (e) {\n                        return ref.command('sort', $(this).attr('rel'), this);\n                    });\n\n                    this.enable_command('toggle_status', 'toggle_flag', 'sort', true);\n                    this.enable_command('set-listmode', this.env.threads && !this.is_multifolder_listing());\n\n                    // load messages\n                    var searchfilter = $(this.gui_objects.search_filter).val();\n                    if (searchfilter && searchfilter != 'ALL') {\n                        this.filter_mailbox(searchfilter);\n                    } else {\n                        this.command('list');\n                    }\n\n                    $(this.gui_objects.qsearchbox).val(this.env.search_text).focusin(function () {\n                        ref.message_list.blur();\n                    });\n                }\n\n                this.set_button_titles();\n\n                this.env.message_commands = ['show', 'reply', 'reply-all', 'reply-list',\n                    'move', 'copy', 'delete', 'open', 'mark', 'edit', 'viewsource', 'bounce',\n                    'print', 'load-attachment', 'download-attachment', 'show-headers', 'hide-headers', 'download',\n                    'forward', 'forward-inline', 'forward-attachment', 'change-format'];\n\n                // Initialize Mailvelope early so e.g. fresh users have a keyring for\n                // this session directly after login.\n                // This does not hurt the following code execution because the\n                // Mailvelope-related code runs non-blocking (using Promises).\n                this.check_mailvelope(this.env.action);\n\n                if (this.env.action == 'show' || this.env.action == 'preview') {\n                    this.enable_command(this.env.message_commands, this.env.uid);\n                    this.enable_command('reply-list', this.env.list_post);\n\n                    if (this.env.action == 'show') {\n                        this.http_request('pagenav', { _uid: this.env.uid, _mbox: this.env.mailbox, _search: this.env.search_request },\n                            this.display_message('', 'loading'));\n                    }\n\n                    if (this.env.mail_read_time > 0) {\n                        setTimeout(function () {\n                            ref.http_post('mark', {\n                                _uid: ref.env.uid, _flag: 'read', _mbox: ref.env.mailbox, _quiet: 1,\n                            });\n                        }, this.env.mail_read_time * 1000);\n                    }\n\n                    if (this.env.blockedobjects) {\n                        $(this.gui_objects.remoteobjectsmsg).show();\n                        this.enable_command('load-remote', true);\n                    }\n\n                    // make preview/message frame visible\n                    if (this.env.action == 'preview' && this.is_framed()) {\n                        this.enable_command('compose', 'add-contact', false);\n                        parent.rcmail.show_contentframe(true);\n                    }\n\n                    if ($.inArray('flagged', this.env.message_flags) >= 0) {\n                        $(document.body).addClass('status-flagged');\n                    }\n\n                    // initialize drag-n-drop on attachments, so they can e.g.\n                    // be dropped into mail compose attachments in another window\n                    if (this.gui_objects.attachments) {\n                        $('li > a', this.gui_objects.attachments).not('.drop').on('dragstart', function (e) {\n                            var n, href = this.href, dt = e.originalEvent.dataTransfer;\n                            if (dt) {\n                                // inject username to the uri\n                                href = href.replace(/^https?:\\/\\//, function (m) {\n                                    return m + urlencode(ref.env.username) + '@';\n                                });\n\n                                // cleanup the node to get filename without the size test\n                                n = $(this).clone();\n                                n.children().remove();\n\n                                dt.setData('roundcube-uri', href);\n                                dt.setData('roundcube-name', n.text().trim());\n                            }\n                        });\n                    }\n                } else if (this.env.action == 'compose') {\n                    this.env.address_group_stack = [];\n                    this.env.compose_commands = ['send-attachment', 'remove-attachment', 'send', 'cancel',\n                        'toggle-editor', 'list-addresses', 'pushgroup', 'search', 'reset-search', 'extwin',\n                        'insert-response', 'menu-open', 'menu-close', 'load-attachment',\n                        'download-attachment', 'open-attachment', 'rename-attachment'];\n\n                    if (this.env.drafts_mailbox) {\n                        this.env.compose_commands.push('savedraft');\n                    }\n\n                    this.enable_command(this.env.compose_commands, true);\n\n                    // add more commands (not enabled)\n                    $.merge(this.env.compose_commands, ['add-recipient', 'firstpage', 'previouspage', 'nextpage', 'lastpage']);\n\n                    if (window.googie) {\n                        this.env.editor_config.spellchecker = googie;\n                        this.env.editor_config.spellcheck_observer = function (s) {\n                            ref.spellcheck_state();\n                        };\n\n                        this.env.compose_commands.push('spellcheck');\n                        this.enable_command('spellcheck', true);\n                    }\n\n                    // initialize HTML editor\n                    this.editor_init(null, this.env.composebody);\n\n                    // init message compose form\n                    this.init_messageform();\n                } else if (this.env.action == 'bounce') {\n                    this.init_messageform_inputs();\n                    this.env.compose_commands = [];\n                } else if (this.env.action == 'get') {\n                    this.enable_command('download', true);\n                    this.enable_command('image-scale', 'image-rotate', !!/^image\\//.test(this.env.mimetype));\n\n                    // Mozilla's PDF.js viewer does not allow printing from host page (#5125)\n                    // to minimize user confusion we disable the Print button on Firefox < 75\n                    this.enable_command('print', this.env.mimetype != 'application/pdf' || !bw.mz || bw.vendver >= 75);\n\n                    if (this.env.is_message) {\n                        this.enable_command('reply', 'reply-all', 'edit', 'viewsource',\n                            'forward', 'forward-inline', 'forward-attachment', 'bounce', true);\n                        if (this.env.list_post) {\n                            this.enable_command('reply-list', true);\n                        }\n                    }\n\n                    // center and scale the image in preview frame\n                    // TODO: Find a better way. Onload is late, also we could use embed.css\n                    if (this.env.mimetype.startsWith('image/')) {\n                        $(this.gui_objects.messagepartframe).on('load', function () {\n                            var contents = $(this).contents();\n\n                            // do not apply styles to an error page (with no image)\n                            if (contents.find('img').length) {\n                                contents.find('img').css({\n                                    maxWidth: '100%',\n                                    maxHeight: '100%',\n                                    objectFit: 'contain',\n                                });\n                                contents.find('body').css({\n                                    height: '100%',\n                                    margin: 0,\n                                    display: 'grid',\n                                    placeItems: 'center',\n                                });\n                                contents.find('html').css({ height: '100%' });\n                            }\n                        });\n                    }\n                }\n                // show printing dialog unless decryption must be done first\n                else if (this.env.action == 'print' && this.env.uid) {\n                    if (!this.env.is_pgp_content && !this.env.pgp_mime_part) {\n                        this.print_dialog();\n                    }\n                }\n\n                // get unread count for each mailbox\n                if (this.gui_objects.mailboxlist) {\n                    this.env.unread_counts = {};\n                    this.gui_objects.folderlist = this.gui_objects.mailboxlist;\n                    this.http_request('getunread', { _page: this.env.current_page });\n                }\n\n                // init address book widget\n                if (this.gui_objects.contactslist) {\n                    this.contact_list = new rcube_list_widget(this.gui_objects.contactslist,\n                        { multiselect: true, draggable: false, keyboard: true });\n                    this.contact_list\n                        .addEventListener('initrow', function (o) {\n                            ref.triggerEvent('insertrow', { cid: o.uid, row: o });\n                        })\n                        .addEventListener('select', function (o) {\n                            ref.compose_recipient_select(o);\n                        })\n                        .addEventListener('dblclick', function (o) {\n                            ref.compose_add_recipient();\n                        })\n                        .addEventListener('keypress', function (o) {\n                            if (o.key_pressed == o.ENTER_KEY) {\n                                if (!ref.compose_add_recipient()) {\n                                    // execute link action on <enter> if not a recipient entry\n                                    if (o.last_selected && String(o.last_selected).charAt(0) == 'G') {\n                                        $(o.rows[o.last_selected].obj).find('a').first().click();\n                                    }\n                                }\n                            }\n                        })\n                        .init();\n\n                    // remember last focused address field\n                    $('#_to,#_cc,#_bcc').focus(function () {\n                        ref.env.focused_field = this;\n                    });\n                }\n\n                if (this.gui_objects.addressbookslist) {\n                    this.gui_objects.folderlist = this.gui_objects.addressbookslist;\n                    this.enable_command('list-addresses', true);\n                }\n\n                // ask user to send MDN\n                if (this.env.mdn_request && this.env.uid) {\n                    this.mdn_request_dialog(this.env.uid, this.env.mailbox);\n                }\n\n                // detect browser capabilities\n                if (!this.is_framed() && !this.env.extwin) {\n                    this.browser_capabilities_check();\n                }\n\n                break;\n            case 'addressbook':\n                this.env.address_group_stack = [];\n\n                if (this.gui_objects.folderlist) {\n                    this.env.contactfolders = $.extend($.extend({}, this.env.address_sources), this.env.contactgroups);\n                }\n\n                this.enable_command('add', 'import', this.env.writable_source);\n                this.enable_command('list', 'listgroup', 'pushgroup', 'popgroup', 'listsearch', 'search', 'reset-search', 'advanced-search', true);\n\n                if (this.gui_objects.contactslist) {\n                    this.contact_list = new rcube_list_widget(this.gui_objects.contactslist,\n                        { multiselect: true, draggable: this.gui_objects.folderlist ? true : false, keyboard: true });\n                    this.contact_list\n                        .addEventListener('initrow', function (o) {\n                            ref.triggerEvent('insertrow', { cid: o.uid, row: o });\n                        })\n                        .addEventListener('keypress', function (o) {\n                            ref.list_keypress(o);\n                        })\n                        .addEventListener('select', function (o) {\n                            ref.contactlist_select(o);\n                        })\n                        .addEventListener('dragstart', function (o) {\n                            ref.drag_start(o);\n                        })\n                        .addEventListener('dragmove', function (e) {\n                            ref.drag_move(e);\n                        })\n                        .addEventListener('dragend', function (e) {\n                            ref.drag_end(e);\n                        })\n                        .init();\n\n                    $(this.gui_objects.qsearchbox).focusin(function () {\n                        ref.contact_list.blur();\n                    });\n\n                    this.update_group_commands();\n                    this.command('list');\n                }\n\n                if (this.gui_objects.savedsearchlist) {\n                    this.savedsearchlist = new rcube_treelist_widget(this.gui_objects.savedsearchlist, {\n                        id_prefix: 'rcmli',\n                        id_encode: this.html_identifier_encode,\n                        id_decode: this.html_identifier_decode,\n                    });\n\n                    this.savedsearchlist.addEventListener('select', function (node) {\n                        ref.triggerEvent('selectfolder', { folder: node.id, prefix: 'rcmli' });\n                    });\n                }\n\n                this.set_page_buttons();\n\n                if (this.env.cid) {\n                    this.enable_command('show', 'edit', 'qrcode', true);\n                    // register handlers for group assignment via checkboxes\n                    if (this.gui_objects.editform) {\n                        $('input.groupmember').change(function () {\n                            ref.group_member_change(this.checked ? 'add' : 'del', ref.env.cid, ref.env.source, this.value);\n                        });\n                    }\n                }\n\n                if (this.gui_objects.editform) {\n                    this.enable_command('save', true);\n                    if (this.env.action == 'add' || this.env.action == 'edit' || this.env.action == 'search') {\n                        this.init_contact_form();\n                    }\n                } else if (this.env.action == 'print') {\n                    this.print_dialog();\n                }\n\n                break;\n            case 'settings':\n                this.enable_command('show', 'save', true);\n\n                if (this.env.action == 'identities') {\n                    this.enable_command('add', this.env.identities_level < 2);\n                } else if (this.env.action == 'edit-identity' || this.env.action == 'add-identity') {\n                    this.enable_command('save', 'edit', true);\n                    this.enable_command('delete', this.env.identities_level < 2);\n\n                    if (this.env.action == 'edit-identity') {\n                        this.check_mailvelope(this.env.action);\n                    }\n                } else if (this.env.action == 'folders') {\n                    this.enable_command('subscribe', 'unsubscribe', 'create-folder', 'rename-folder', true);\n                } else if (this.env.action == 'edit-folder' && this.gui_objects.editform) {\n                    this.enable_command('save', 'folder-size', true);\n                    parent.rcmail.env.exists = this.env.messagecount;\n                    parent.rcmail.enable_command('purge', this.env.messagecount);\n                } else if (this.env.action == 'responses') {\n                    this.enable_command('add', true);\n                }\n\n                if (this.gui_objects.identitieslist) {\n                    this.identity_list = new rcube_list_widget(this.gui_objects.identitieslist,\n                        { multiselect: false, draggable: false, keyboard: true });\n                    this.identity_list\n                        .addEventListener('select', function (o) {\n                            ref.identity_select(o);\n                        })\n                        .addEventListener('keypress', function (o) {\n                            ref.list_keypress(o);\n                        })\n                        .init()\n                        .focus();\n                } else if (this.gui_objects.sectionslist) {\n                    this.sections_list = new rcube_list_widget(this.gui_objects.sectionslist, { multiselect: false, draggable: false, keyboard: true });\n                    this.sections_list\n                        .addEventListener('select', function (o) {\n                            ref.section_select(o);\n                        })\n                        .init()\n                        .focus();\n                } else if (this.gui_objects.subscriptionlist) {\n                    this.init_subscription_list();\n                } else if (this.gui_objects.responseslist) {\n                    this.responses_list = new rcube_list_widget(this.gui_objects.responseslist, { multiselect: false, draggable: false, keyboard: true });\n                    this.responses_list\n                        .addEventListener('select', function (o) {\n                            ref.response_select(o);\n                        })\n                        .addEventListener('keypress', function (o) {\n                            ref.list_keypress(o);\n                        })\n                        .init()\n                        .focus();\n                }\n\n                break;\n            case 'login':\n                var tz, input_user = $('#rcmloginuser');\n                input_tz = $('#rcmlogintz');\n\n                if (input_user.val() == '') {\n                    input_user.focus();\n                } else {\n                    $('#rcmloginpwd').focus();\n                }\n\n                // detect client timezone\n                try {\n                    tz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n                } catch (e) {}\n\n                input_tz.val(tz ? tz : (new Date().getStdTimezoneOffset() / -60));\n\n                // display 'loading' message on form submit, lock submit button\n                $('form').submit(function () {\n                    $('[type=submit]', this).prop('disabled', true);\n                    ref.clear_messages();\n                    ref.display_message('', 'loading');\n                });\n\n                break;\n        }\n\n        // select first input field in an edit form\n        if (this.gui_objects.editform) {\n            $('input,select,textarea', this.gui_objects.editform)\n                .not(':hidden').not(':disabled').first().select().focus();\n        }\n\n        // prevent from form submit with Enter key in file input fields\n        if (bw.ie) {\n            $('input[type=file]').keydown(function (e) {\n                if (e.keyCode == '13') {\n                    e.preventDefault();\n                }\n            });\n        }\n\n        // flag object as complete\n        this.loaded = true;\n        this.env.lastrefresh = new Date();\n\n        // show message\n        if (this.pending_message) {\n            this.display_message.apply(this, this.pending_message);\n        }\n\n        // init treelist widget\n        if (this.gui_objects.folderlist && window.rcube_treelist_widget\n            // some plugins may load rcube_treelist_widget and there's one case\n            // when this will cause problems - addressbook widget in compose,\n            // which already has been initialized using rcube_list_widget\n            && this.gui_objects.folderlist != this.gui_objects.addressbookslist\n        ) {\n            this.treelist = new rcube_treelist_widget(this.gui_objects.folderlist, {\n                selectable: true,\n                id_prefix: 'rcmli',\n                parent_focus: true,\n                id_encode: this.html_identifier_encode,\n                id_decode: this.html_identifier_decode,\n                check_droptarget: function (node) {\n                    return !node.virtual && ref.check_droptarget(node.id);\n                },\n            });\n\n            this.treelist\n                .addEventListener('collapse', function (node) {\n                    ref.folder_collapsed(node);\n                })\n                .addEventListener('expand', function (node) {\n                    ref.folder_collapsed(node);\n                })\n                .addEventListener('beforeselect', function (node) {\n                    return !ref.busy;\n                })\n                .addEventListener('select', function (node) {\n                    ref.triggerEvent('selectfolder', { folder: node.id, prefix: 'rcmli' });\n                    ref.mark_all_read_state();\n                });\n        }\n\n        // activate html5 file drop feature (if browser supports it and if configured)\n        if (this.gui_objects.filedrop && this.env.filedrop && window.FormData) {\n            $(document.body).on('dragover dragleave drop', function (e) {\n                return ref.document_drag_hover(e, e.type == 'dragover');\n            });\n\n            $(this.gui_objects.filedrop).addClass('droptarget')\n                .on('dragover dragleave', function (e) {\n                    return ref.file_drag_hover(e, e.type == 'dragover');\n                })\n                .get(0).addEventListener('drop', function (e) {\n                    return ref.file_dropped(e);\n                }, false);\n        }\n\n        // catch document (and iframe) mouse clicks\n        var body_mouseup = function (e) {\n            return ref.doc_mouse_up(e);\n        };\n        $(document.body)\n            .mouseup(body_mouseup)\n            .keydown(function (e) {\n                return ref.doc_keypress(e);\n            });\n\n        rcube_webmail.set_iframe_events({ mouseup: body_mouseup });\n\n        // trigger init event hook\n        this.triggerEvent('init', { task: this.task, action: this.env.action });\n\n        // execute all foreign onload scripts\n        // @deprecated\n        for (n in this.onloads) {\n            if (typeof this.onloads[n] === 'string') {\n                eval(this.onloads[n]);\n            } else if (typeof this.onloads[n] === 'function') {\n                this.onloads[n]();\n            }\n        }\n\n        // register menu buttons\n        $('[data-popup]').each(function () {\n            ref.register_menu_button(this, $(this).data('popup'));\n        });\n\n        // start keep-alive and refresh intervals\n        this.start_refresh();\n        this.start_keepalive();\n    };\n\n    this.log = function (msg) {\n        if (this.env.devel_mode && window.console && console.log) {\n            console.log(msg);\n        }\n    };\n\n    /*********************************************************/\n    /*               client command interface                */\n    /*********************************************************/\n\n    // execute a specific command on the web client\n    this.command = function (command, props, obj, event, allow_disabled) {\n        var ret;\n\n        if (obj && obj.blur && !(event && rcube_event.is_keyboard(event))) {\n            obj.blur();\n        }\n\n        // do nothing if interface is locked by another command\n        // with exception for searching reset and menu\n        if (this.busy && !(command == 'reset-search' && this.last_command == 'search') && !command.match(/^menu-/)) {\n            return false;\n        }\n\n        // let the browser handle this click (shift/ctrl usually opens the link in a new window/tab)\n        if ((obj && obj.href && String(obj.href).indexOf('#') < 0) && rcube_event.get_modifier(event)) {\n            return true;\n        }\n\n        // command not supported or allowed\n        if (!allow_disabled && !this.commands[command]) {\n            // pass command to parent window\n            if (this.is_framed()) {\n                parent.rcmail.command(command, props);\n            }\n\n            return false;\n        }\n\n        // check input before leaving compose step\n        if (this.task == 'mail' && this.env.action == 'compose' && !this.env.server_error && command != 'save-pref'\n            && ($.inArray(command, this.env.compose_commands) < 0 || command.startsWith('compose-encrypted') && ref.mailvelope_editor)\n            && !this.compose_skip_unsavedcheck\n        ) {\n            if (!this.env.is_sent && this.cmp_hash != this.compose_field_hash()) {\n                this.confirm_dialog(this.get_label('notsentwarning'), 'discard', function () {\n                    // remove copy from local storage if compose screen is left intentionally\n                    ref.remove_compose_data(ref.env.compose_id);\n                    ref.compose_skip_unsavedcheck = true;\n                    ref.command(command, props, obj, event);\n                });\n\n                return false;\n            }\n        }\n\n        this.last_command = command;\n        this.command_aborted = false;\n\n        // trigger plugin hooks\n        this.triggerEvent('actionbefore', { props: props, action: command, originalEvent: event });\n\n        if ((ret = this.triggerEvent('before' + command, props || event)) !== undefined) {\n            // abort if one of the handlers returned false\n            if (ret === false) {\n                return false;\n            }\n\n            props = ret;\n        }\n\n        // process external commands\n        if (typeof this.command_handlers[command] === 'function') {\n            ret = this.command_handlers[command](props, obj, event);\n        } else if (typeof this.command_handlers[command] === 'string') {\n            ret = window[this.command_handlers[command]](props, obj, event);\n        }\n        // process internal commands\n        else {\n            ret = this.command_handler(command, props, obj, event);\n        }\n\n        if (!this.command_aborted && this.triggerEvent('after' + command, props) === false) {\n            ret = false;\n        }\n\n        this.triggerEvent('actionafter', {\n            props: props, action: command, aborted: this.command_aborted, ret: ret, originalEvent: event,\n        });\n\n        if (ret === false) {\n            return false;\n        }\n\n        if ((obj && ret !== true) || this.command_aborted === true) {\n            return false;\n        }\n\n        return true;\n    };\n\n    // execute a specific known command\n    this.command_handler = function (command, props, obj, event) {\n        var uid, cid, url, flag;\n\n        // process internal command\n        switch (command) {\n            // commands to switch task\n            case 'logout':\n            case 'mail':\n            case 'addressbook':\n            case 'settings':\n                this.switch_task(command);\n\n                break;\n            case 'about':\n                this.redirect('?_task=settings&_action=about', false);\n\n                break;\n            case 'permaurl':\n                if (obj && obj.href && obj.target) {\n                    return true;\n                }\n                if (this.env.permaurl) {\n                    parent.location.href = this.env.permaurl;\n                }\n\n                break;\n            case 'extwin':\n                if (this.env.action == 'compose') {\n                    var form = this.gui_objects.messageform,\n                        win = this.open_window('');\n\n                    if (win) {\n                        this.save_compose_form_local();\n                        this.compose_skip_unsavedcheck = true;\n                        $(\"[name='_action']\", form).val('compose');\n                        form.action = this.url('mail/compose', { _id: this.env.compose_id, _extwin: 1 });\n                        form.target = win.name;\n                        form.submit();\n                    }\n                } else {\n                    this.open_window(this.env.permaurl, true);\n                }\n\n                break;\n            case 'change-format':\n                url = this.env.permaurl + '&_format=' + props;\n\n                if (this.env.action == 'preview') {\n                    url = url.replace(/_action=show/, '_action=preview') + '&_framed=1';\n                }\n                if (this.env.extwin) {\n                    url += '&_extwin=1';\n                }\n\n                location.href = url;\n\n                break;\n            case 'menu-open':\n                if (props && props.menu == 'attachmentmenu') {\n                    var mimetype = this.env.attachments[props.id];\n\n                    // in compose format is different\n                    if (mimetype && mimetype.mimetype) {\n                        mimetype = mimetype.mimetype;\n                    }\n\n                    this.enable_command('open-attachment', mimetype && this.env.mimetypes && $.inArray(mimetype, this.env.mimetypes) >= 0);\n                }\n                this.show_menu(props, props.show || undefined, event);\n\n                break;\n            case 'menu-close':\n                this.hide_menu(props, event);\n\n                break;\n            case 'menu-save':\n                this.triggerEvent(command, { props: props, originalEvent: event });\n\n                return false;\n            case 'open':\n                if (uid = this.get_single_uid()) {\n                    obj.href = this.url('show', this.params_from_uid(uid, { _extwin: 1 }));\n                    return true;\n                }\n\n                break;\n            case 'close':\n                if (this.env.extwin) {\n                    window.close();\n                }\n\n                break;\n            case 'list':\n                if (props && props != '') {\n                    this.reset_qsearch(true);\n                }\n                if (this.env.action == 'compose' && this.env.extwin) {\n                    window.close();\n                } else if (this.task == 'mail') {\n                    this.list_mailbox(props, props ? 1 : '');\n                    this.set_button_titles();\n                } else if (this.task == 'addressbook') {\n                    this.list_contacts(props);\n                }\n\n                break;\n            case 'set-listmode':\n                this.set_list_options(null, undefined, undefined, props == 'threads' ? 1 : 0);\n\n                break;\n            case 'sort':\n                var sort_order = this.env.sort_order,\n                    sort_col = !this.env.disabled_sort_col ? props : this.env.sort_col;\n\n                if (!this.env.disabled_sort_order) {\n                    sort_order = this.env.sort_col == sort_col && sort_order == 'ASC' ? 'DESC' : 'ASC';\n                }\n\n                // set table header and update env\n                this.set_list_sorting(sort_col, sort_order);\n\n                // reload message list\n                this.list_mailbox('', '', sort_col + '_' + sort_order);\n\n                break;\n            case 'nextpage':\n                this.list_page('next');\n\n                break;\n            case 'lastpage':\n                this.list_page('last');\n\n                break;\n            case 'previouspage':\n                this.list_page('prev');\n\n                break;\n            case 'firstpage':\n                this.list_page('first');\n\n                break;\n            case 'expunge':\n                if (this.env.exists) {\n                    this.expunge_mailbox(this.env.mailbox);\n                }\n\n                break;\n            case 'purge':\n            case 'empty-mailbox':\n                if (this.env.exists) {\n                    this.purge_mailbox(this.env.mailbox);\n                }\n\n                break;\n            // common commands used in multiple tasks\n            case 'show':\n                if (this.task == 'mail') {\n                    uid = this.get_single_uid();\n                    if (uid && (!this.env.uid || uid != this.env.uid)) {\n                        var mbox = this.get_message_mailbox(uid);\n                        if (mbox == this.env.drafts_mailbox) {\n                            this.open_compose_step({ _draft_uid: uid, _mbox: mbox });\n                        } else {\n                            this.show_message(uid);\n                        }\n                    }\n                } else if (this.task == 'addressbook') {\n                    cid = props ? props : this.get_single_cid();\n                    if (cid && !(this.env.action == 'show' && cid == this.env.cid)) {\n                        this.load_contact(cid, 'show');\n                    }\n                } else if (this.task == 'settings') {\n                    this.goto_url('settings/' + props, { _framed: 0 });\n                }\n\n                break;\n            case 'add':\n                if (this.task == 'addressbook') {\n                    this.load_contact(0, 'add');\n                } else if (this.task == 'settings' && this.env.action == 'responses') {\n                    this.load_response(0, 'add-response');\n                } else if (this.task == 'settings') {\n                    this.load_identity(0, 'add-identity');\n                }\n\n                break;\n            case 'edit':\n                if (this.task == 'addressbook' && (cid = this.get_single_cid())) {\n                    this.load_contact(cid, 'edit');\n                } else if (this.task == 'mail' && (uid = this.get_single_uid())) {\n                    url = { _mbox: this.get_message_mailbox(uid) };\n                    url[url._mbox == this.env.drafts_mailbox && props != 'new' ? '_draft_uid' : '_uid'] = uid;\n                    this.open_compose_step(url);\n                }\n\n                break;\n            case 'save':\n                var input, form = this.gui_objects.editform;\n                if (form) {\n                    // user prefs\n                    if ((input = $(\"[name='_pagesize']\", form)) && input.length && isNaN(parseInt(input.val(), 10))) {\n                        this.alert_dialog(this.get_label('nopagesizewarning'), function () {\n                            input.focus();\n                        });\n\n                        break;\n                    }\n                    // contacts/identities\n                    else {\n                        // reload form\n                        if (props == 'reload') {\n                            form.action += '&_reload=1';\n                        } else if (this.task == 'settings' && (this.env.identities_level % 2) == 0\n                            && (input = $(\"[name='_email']\", form)) && input.length && !rcube_check_email(input.val())\n                        ) {\n                            this.alert_dialog(this.get_label('noemailwarning'), function () {\n                                input.focus();\n                            });\n\n                            break;\n                        }\n                    }\n\n                    // add selected source (on the list)\n                    if (parent.rcmail && parent.rcmail.env.source) {\n                        form.action = this.add_url(form.action, '_orig_source', parent.rcmail.env.source);\n                    }\n\n                    form.submit();\n                }\n\n                break;\n            case 'delete':\n                // mail task\n                if (this.task == 'mail') {\n                    this.delete_messages(event);\n                }\n                // addressbook task\n                else if (this.task == 'addressbook') {\n                    this.delete_contacts();\n                }\n                // settings: canned response\n                else if (this.task == 'settings' && this.env.action == 'responses') {\n                    this.delete_response();\n                }\n                // settings: user identities\n                else if (this.task == 'settings') {\n                    this.delete_identity();\n                }\n\n                break;\n            // mail task commands\n            case 'move':\n            case 'moveto': // deprecated\n                if (this.task == 'mail') {\n                    this.move_messages(props, event);\n                } else if (this.task == 'addressbook') {\n                    this.move_contacts(props, event);\n                }\n\n                break;\n            case 'copy':\n                if (this.task == 'mail') {\n                    this.copy_messages(props, event);\n                } else if (this.task == 'addressbook') {\n                    this.copy_contacts(props, event);\n                }\n\n                break;\n            case 'mark':\n                if (props) {\n                    this.mark_message(props);\n                }\n\n                break;\n            case 'toggle_status':\n            case 'toggle_flag':\n                flag = command == 'toggle_flag' ? 'flagged' : 'read';\n\n                if (uid = props) {\n                    if (flag == 'flagged') {\n                        if (this.message_list.rows[uid].flagged) {\n                            flag = 'unflagged';\n                        }\n                    } else if (this.message_list.rows[uid].deleted) {\n                        flag = 'undelete';\n                    } else if (!this.message_list.rows[uid].unread) {\n                        flag = 'unread';\n                    }\n\n                    this.mark_message(flag, uid);\n                }\n\n                break;\n            case 'add-contact':\n                this.add_contact(props);\n\n                break;\n            case 'load-remote':\n                if (this.env.uid) {\n                    if (props && this.env.sender) {\n                        this.add_contact(this.env.sender, true, props);\n                        break;\n                    }\n\n                    this.show_message(this.env.uid, true, this.env.action == 'preview');\n                }\n\n                break;\n            case 'load-attachment':\n            case 'open-attachment':\n            case 'download-attachment':\n                var params, mimetype = this.env.attachments[props];\n\n                if (this.env.action == 'compose') {\n                    params = { _file: props, _id: this.env.compose_id };\n                    mimetype = mimetype ? mimetype.mimetype : '';\n                } else {\n                    params = { _mbox: this.env.mailbox, _uid: this.env.uid, _part: props };\n                }\n\n                // open attachment in frame if it's of a supported mimetype\n                if (command != 'download-attachment' && mimetype && this.env.mimetypes && $.inArray(mimetype, this.env.mimetypes) >= 0) {\n                    // Note: We disable _framed for proper X-Frame-Options:deny support (#6688)\n                    if (this.open_window(this.url('get', $.extend({ _frame: 1, _framed: 0 }, params)))) {\n                        return true;\n                    }\n                }\n\n                params._download = 1;\n\n                // prevent from page unload warning in compose\n                this.compose_skip_unsavedcheck = 1;\n                this.goto_url('get', params, false, true);\n                this.compose_skip_unsavedcheck = 0;\n\n                return true;\n            case 'select-all':\n                this.select_all_mode = props ? false : true;\n                this.dummy_select = true; // prevent msg opening if there's only one msg on the list\n                var list = this[this.task == 'addressbook' ? 'contact_list' : 'message_list'];\n                if (props == 'invert') {\n                    list.invert_selection();\n                } else {\n                    list.select_all(props == 'page' ? '' : props);\n                }\n                this.dummy_select = null;\n\n                break;\n            case 'select-none':\n                this.select_all_mode = false;\n                this[this.task == 'addressbook' ? 'contact_list' : 'message_list'].clear_selection();\n\n                break;\n            case 'expand-all':\n                this.env.autoexpand_threads = 1;\n                this.message_list.expand_all();\n\n                break;\n            case 'expand-unread':\n                this.env.autoexpand_threads = 2;\n                this.message_list.collapse_all();\n                this.expand_unread();\n\n                break;\n            case 'collapse-all':\n                this.env.autoexpand_threads = 0;\n                this.message_list.collapse_all();\n\n                break;\n            case 'nextmessage':\n                if (this.env.next_uid) {\n                    this.show_message(this.env.next_uid, false, this.env.action == 'preview');\n                }\n\n                break;\n            case 'lastmessage':\n                if (this.env.last_uid) {\n                    this.show_message(this.env.last_uid);\n                }\n\n                break;\n            case 'previousmessage':\n                if (this.env.prev_uid) {\n                    this.show_message(this.env.prev_uid, false, this.env.action == 'preview');\n                }\n\n                break;\n            case 'firstmessage':\n                if (this.env.first_uid) {\n                    this.show_message(this.env.first_uid);\n                }\n\n                break;\n            case 'compose':\n                url = {};\n\n                if (this.task == 'mail') {\n                    url = { _mbox: this.env.mailbox, _search: this.env.search_request };\n                    if (props) {\n                        url._to = props;\n                    }\n                }\n                // modify url if we're in addressbook\n                else if (this.task == 'addressbook') {\n                    // switch to mail compose step directly\n                    if (props && props.indexOf('@') > 0) {\n                        url._to = props;\n                    } else {\n                        var a_cids = [];\n                        // use contact id passed as command parameter\n                        if (props) {\n                            a_cids.push(props);\n                        }\n                        // get selected contacts\n                        else if (this.contact_list) {\n                            a_cids = this.contact_list.get_selection();\n                        }\n\n                        if (a_cids.length) {\n                            this.http_post('mailto', { _cid: a_cids.join(','), _source: this.env.source }, true);\n                            break;\n                        } else if (this.env.group && this.env.pagecount) {\n                            this.http_post('mailto', { _gid: this.env.group, _source: this.env.source }, true);\n                            break;\n                        }\n                    }\n                } else if (props && typeof props === 'string') {\n                    url._to = props;\n                } else if (props && typeof props === 'object') {\n                    $.extend(url, props);\n                }\n\n                this.open_compose_step(url);\n\n                break;\n            case 'spellcheck':\n                if (this.spellcheck_state()) {\n                    this.editor.spellcheck_stop();\n                } else {\n                    this.editor.spellcheck_start();\n                }\n\n                break;\n            case 'savedraft':\n                // Reset the auto-save timer\n                clearTimeout(this.save_timer);\n\n                // compose form did not change (and draft wasn't saved already)\n                if (this.env.draft_id && this.cmp_hash == this.compose_field_hash()) {\n                    this.auto_save_start();\n\n                    break;\n                }\n\n                this.submit_messageform(true);\n\n                break;\n            case 'send':\n                if (!props.nocheck && !this.env.is_sent && !this.check_compose_input(command)) {\n                    break;\n                }\n\n                // Reset the auto-save timer\n                clearTimeout(this.save_timer);\n\n                this.submit_messageform();\n\n                break;\n            case 'send-attachment':\n                // Reset the auto-save timer\n                clearTimeout(this.save_timer);\n\n                if (!(flag = this.upload_file(props || this.gui_objects.uploadform, 'upload'))) {\n                    if (flag !== false) {\n                        this.alert_dialog(this.get_label('selectimportfile'));\n                    }\n                    aborted = true;\n                }\n\n                break;\n            case 'insert-sig':\n                this.change_identity($(\"[name='_from']\")[0], true);\n\n                break;\n            case 'list-addresses':\n                this.list_contacts(props);\n                this.enable_command('add-recipient', false);\n\n                break;\n            case 'add-recipient':\n                this.compose_add_recipient(props);\n\n                break;\n            case 'reply-all':\n            case 'reply-list':\n            case 'reply':\n                if (uid = this.get_single_uid()) {\n                    url = { _reply_uid: uid, _mbox: this.get_message_mailbox(uid), _search: this.env.search_request };\n                    if (command == 'reply-all') {\n                        // do reply-list, when list is detected and popup menu wasn't used\n                        url._all = (!props && this.env.reply_all_mode == 1 && this.commands['reply-list'] ? 'list' : 'all');\n                    } else if (command == 'reply-list') {\n                        url._all = 'list';\n                    }\n\n                    this.open_compose_step(url);\n                }\n\n                break;\n            case 'forward-attachment':\n            case 'forward-inline':\n            case 'forward':\n                var uids = this.env.uid ? [this.env.uid] : (this.message_list ? this.message_list.get_selection() : []);\n                if (uids.length) {\n                    url = { _forward_uid: this.uids_to_list(uids), _mbox: this.env.mailbox, _search: this.env.search_request };\n                    if (command == 'forward-attachment' || (!props && this.env.forward_attachment) || uids.length > 1) {\n                        url._attachment = 1;\n                    }\n                    this.open_compose_step(url);\n                }\n\n                break;\n            case 'print':\n                if (this.task == 'addressbook') {\n                    if (uid = this.get_single_cid()) {\n                        url = '&_action=print&_cid=' + uid;\n                        if (this.env.source) {\n                            url += '&_source=' + urlencode(this.env.source);\n                        }\n                        this.open_window(this.env.comm_path + url, true, true);\n                    }\n                } else if (this.env.action == 'get' && !this.env.is_message) {\n                    this.gui_objects.messagepartframe.contentWindow.print();\n                } else if (uid = this.get_single_uid()) {\n                    url = this.url('print', this.params_from_uid(uid, { _safe: this.env.safemode ? 1 : 0 }));\n                    if (this.open_window(url, true, true)) {\n                        if (this.env.action != 'show' && this.env.action != 'get') {\n                            this.mark_message('read', uid);\n                        }\n                    }\n                }\n\n                break;\n            case 'viewsource':\n                if (uid = this.get_single_uid()) {\n                    this.open_window(this.url('viewsource', this.params_from_uid(uid)), true, true);\n                }\n\n                break;\n            case 'download':\n                if (this.env.action == 'get') {\n                    location.href = this.secure_url(location.href.replace(/_frame=/, '_download='));\n                } else if (uid = this.get_single_uid()) {\n                    this.goto_url('viewsource', this.params_from_uid(uid, { _save: 1 }), false, true);\n                }\n\n                break;\n            // quicksearch\n            case 'search':\n                return this.qsearch(props);\n            // reset quicksearch\n            case 'reset-search':\n                var n, s = this.env.search_request || this.env.qsearch;\n\n                this.reset_qsearch(true);\n\n                if (s && this.env.action == 'compose') {\n                    if (this.contact_list) {\n                        this.list_contacts_clear();\n                    }\n                } else if (s && this.env.mailbox) {\n                    this.list_mailbox(this.env.mailbox, 1);\n                } else if (s && this.task == 'addressbook') {\n                    this.env.source = this.env.last_source || '';\n                    this.env.group = this.env.last_group || '';\n                    this.list_contacts(this.env.source, this.env.group, 1);\n                }\n\n                break;\n            case 'pushgroup':\n                // add group ID and current search to stack\n                var group = {\n                    id: props.id,\n                    search_request: this.env.search_request,\n                    page: this.env.current_page,\n                    search: this.env.search_request && this.gui_objects.qsearchbox ? this.gui_objects.qsearchbox.value : null,\n                };\n\n                this.env.address_group_stack.push(group);\n                if (obj && event) {\n                    rcube_event.cancel(event);\n                }\n\n                // FIXME: no break?\n\n            case 'listgroup':\n                this.reset_qsearch();\n                this.list_contacts(props.source, props.id, 1, group);\n\n                break;\n            case 'popgroup':\n                if (this.env.address_group_stack.length) {\n                    var old = this.env.address_group_stack.pop();\n                    this.reset_qsearch();\n\n                    if (old.search_request) {\n                        // this code is executed when going back to the search result\n                        if (old.search && this.gui_objects.qsearchbox) {\n                            $(this.gui_objects.qsearchbox).val(old.search);\n                        }\n                        this.env.search_request = old.search_request;\n                        this.list_contacts_remote(null, null, this.env.current_page = old.page);\n                    } else {\n                        this.list_contacts(props.source, this.env.address_group_stack[this.env.address_group_stack.length - 1].id);\n                    }\n                }\n\n                break;\n            case 'import-messages':\n                var form = props || this.gui_objects.importform,\n                    importlock = this.set_busy(true, 'importwait');\n\n                if (!(flag = this.upload_file(form, 'import', importlock))) {\n                    this.set_busy(false, null, importlock);\n                    if (flag !== false) {\n                        this.alert_dialog(this.get_label('selectimportfile'));\n                    }\n                    this.command_aborted = true;\n                }\n\n                break;\n            case 'import':\n                var dialog = $('<iframe>').attr('src', this.url('import', { _framed: 1, _target: this.env.source })),\n                    import_func = function (e) {\n                        var win = dialog[0].contentWindow,\n                            form = win.rcmail.gui_objects.importformmap || win.rcmail.gui_objects.importform;\n\n                        if (form) {\n                            var lock, file = win.$('#rcmimportfile')[0];\n                            if (file && !file.value) {\n                                win.rcmail.alert_dialog(win.rcmail.get_label('selectimportfile'));\n                                return;\n                            }\n\n                            lock = win.rcmail.set_busy(true, 'importwait');\n                            $('[name=\"_unlock\"]', form).val(lock);\n                            form.submit();\n                            win.rcmail.lock_form(form, true);\n\n                            // disable Import button\n                            $(e.target).attr('disabled', true).next().focus();\n                        }\n                    },\n                    close_func = function (event, ui) {\n                        $(this).remove();\n                        if (ref.import_state == 'reload') {\n                            ref.command('list');\n                        }\n                    };\n\n                this.import_state = null;\n                this.import_dialog = this.simple_dialog(dialog, 'importcontacts', import_func, {\n                    close: close_func,\n                    button: 'import',\n                    width: 500,\n                    height: 300,\n                });\n\n                break;\n            case 'export':\n                if (this.contact_list.rowcount > 0) {\n                    this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _search: this.env.search_request }, false, true);\n                }\n\n                break;\n            case 'export-selected':\n                if (this.contact_list.rowcount > 0) {\n                    this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _cid: this.contact_list.get_selection().join(',') }, false, true);\n                }\n\n                break;\n            case 'upload-photo':\n                this.upload_contact_photo(props || this.gui_objects.uploadform);\n\n                break;\n            case 'delete-photo':\n                this.replace_contact_photo('-del-');\n\n                break;\n            case 'undo':\n                this.http_request('undo', '', this.display_message('', 'loading'));\n\n                break;\n            // unified command call (command name == function name)\n            default:\n                var func = command.replace(/-/g, '_');\n                if (this[func] && typeof this[func] === 'function') {\n                    return this[func](props, obj, event);\n                }\n        }\n    };\n\n    // set command(s) enabled or disabled\n    this.enable_command = function () {\n        var i, n, cmd, args = Array.prototype.slice.call(arguments),\n            enable = args.pop();\n\n        for (n = 0; n < args.length; n++) {\n            cmd = args[n];\n            // argument of type array\n            if (typeof cmd === 'string') {\n                this.commands[cmd] = enable;\n                this.set_button(cmd, (enable ? 'act' : 'pas'));\n                this.triggerEvent('enable-command', { command: cmd, status: enable });\n            } else {\n                // push array elements into commands array\n                for (i in cmd) {\n                    args.push(cmd[i]);\n                }\n            }\n        }\n\n        this.set_menu_buttons();\n    };\n\n    this.command_enabled = function (cmd) {\n        return this.commands[cmd];\n    };\n\n    // lock/unlock interface\n    this.set_busy = function (a, message, id) {\n        if (a && message) {\n            var msg = this.get_label(message);\n            if (msg == message) {\n                msg = 'Loading...';\n            }\n\n            id = this.display_message(msg, 'loading');\n        } else if (!a && id) {\n            this.hide_message(id);\n        }\n\n        this.busy = a;\n\n        if (this.gui_objects.editform) {\n            this.lock_form(this.gui_objects.editform, a);\n        }\n\n        return id;\n    };\n\n    // return a localized string\n    this.get_label = function (label, domain, variables = null) {\n        if (domain && this.labels[domain + '.' + label]) {\n            label = this.labels[domain + '.' + label];\n        }\n        else if (this.labels[label]) {\n            label = this.labels[label];\n        }\n\n        // set variable value in localized string\n        if (variables && Object.keys(variables).length) {\n            for (const [key, value] of Object.entries(variables)) {\n                label = label.replaceAll(`$${key}`, value);\n            }\n        }\n\n        return label;\n    };\n\n    // alias for convenience reasons\n    this.gettext = this.get_label;\n\n    // switch to another application task\n    this.switch_task = function (task) {\n        var action, path;\n\n        if ((path = task.split('/')).length == 2) {\n            task = path[0];\n            action = path[1];\n        }\n\n        if (this.task === task && task != 'mail') {\n            return;\n        }\n\n        var url = this.get_task_url(task);\n\n        if (action) {\n            url += '&_action=' + action;\n        }\n\n        if (task == 'mail') {\n            url += '&_mbox=INBOX';\n        } else if (task == 'logout') {\n            url = this.secure_url(url);\n            this.clear_compose_data();\n        }\n\n        this.redirect(url);\n    };\n\n    this.get_task_url = function (task, url) {\n        if (!url) {\n            url = this.env.comm_path;\n        }\n\n        if (url.match(/[?&]_task=[a-zA-Z0-9_-]+/)) {\n            return url.replace(/_task=[a-zA-Z0-9_-]+/, '_task=' + task);\n        }\n\n        return url.replace(/\\?.*$/, '') + '?_task=' + task;\n    };\n\n    this.reload = function (delay) {\n        if (this.is_framed()) {\n            parent.rcmail.reload(delay);\n        } else if (delay) {\n            setTimeout(function () {\n                ref.reload();\n            }, delay);\n        } else if (window.location) {\n            location.href = this.url('', { _extwin: this.env.extwin });\n        }\n    };\n\n    // Add variable to GET string, replace old value if exists\n    this.add_url = function (url, name, value) {\n        var urldata, datax, hash = '';\n\n        value = urlencode(value);\n\n        if (/(#[a-z0-9_-]*)$/.test(url)) {\n            hash = RegExp.$1;\n            url = url.substr(0, url.length - hash.length);\n        }\n\n        if (/(\\?.*)$/.test(url)) {\n            urldata = RegExp.$1;\n            datax = RegExp('((\\\\?|&)' + RegExp.escape(name) + '=[^&]*)');\n\n            if (datax.test(urldata)) {\n                urldata = urldata.replace(datax, RegExp.$2 + name + '=' + value);\n            } else {\n                urldata += '&' + name + '=' + value;\n            }\n\n            return url.replace(/(\\?.*)$/, urldata) + hash;\n        }\n\n        return url + '?' + name + '=' + value + hash;\n    };\n\n    // append CSRF protection token to the given url\n    this.secure_url = function (url) {\n        return this.add_url(url, '_token', this.env.request_token);\n    },\n\n    this.is_framed = function () {\n        return this.env.framed && parent.rcmail && parent.rcmail != this && typeof parent.rcmail.command === 'function';\n    };\n\n    this.save_pref = function (prop) {\n        var request = { _name: prop.name, _value: prop.value };\n\n        if (prop.session) {\n            request._session = prop.session;\n        }\n        if (prop.env) {\n            this.env[prop.env] = prop.value;\n        }\n\n        this.http_post('save-pref', request);\n    };\n\n    this.html_identifier = function (str, encode) {\n        return encode ? this.html_identifier_encode(str) : String(str).replace(this.identifier_expr, '_');\n    };\n\n    this.html_identifier_encode = function (str) {\n        return Base64.encode(String(str)).replace(/=+$/, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n    };\n\n    this.html_identifier_decode = function (str) {\n        str = String(str).replace(/-/g, '+').replace(/_/g, '/');\n\n        while (str.length % 4) {\n            str += '=';\n        }\n\n        return Base64.decode(str);\n    };\n\n\n    /*********************************************************/\n    /*                 event handling methods                 /\n    /*********************************************************/\n\n    this.drag_menu = function (e, target) {\n        var modkey = rcube_event.get_modifier(e),\n            menu = this.gui_objects.dragmenu;\n\n        if (menu && modkey == SHIFT_KEY && this.commands.copy) {\n            var pos = rcube_event.get_mouse_pos(e);\n            this.env.drag_target = target;\n            this.show_menu(this.gui_objects.dragmenu.id, true, e);\n            $(menu).css({ top: (pos.y - 10) + 'px', left: (pos.x - 10) + 'px' });\n            return true;\n        }\n\n        return false;\n    };\n\n    this.drag_menu_action = function (action) {\n        var menu = this.gui_objects.dragmenu;\n        if (menu) {\n            $(menu).hide();\n        }\n\n        this.command(action, this.env.drag_target);\n        this.env.drag_target = null;\n    };\n\n    this.drag_start = function (list) {\n        this.drag_active = true;\n\n        if (this.preview_timer) {\n            clearTimeout(this.preview_timer);\n        }\n\n        // prepare treelist widget for dragging interactions\n        if (this.treelist) {\n            this.treelist.drag_start();\n        }\n    };\n\n    this.drag_end = function (e) {\n        var list, model;\n\n        if (this.treelist) {\n            this.treelist.drag_end();\n        }\n\n        // execute drag & drop action when mouse was released\n        if (list = this.message_list) {\n            model = this.env.mailboxes;\n        } else if (list = this.contact_list) {\n            model = this.env.contactfolders;\n        }\n\n        // Note: we accept only mouse events to ignore dragging aborts with ESC key (#6623)\n        if (this.drag_active && model && this.env.last_folder_target && !rcube_event.is_keyboard(e)) {\n            var target = model[this.env.last_folder_target];\n            list.draglayer.hide();\n\n            if (this.contact_list) {\n                if (!this.contacts_drag_menu(e, target)) {\n                    this.command('move', target);\n                }\n            } else if (!this.drag_menu(e, target)) {\n                this.command('move', target);\n            }\n        }\n\n        this.drag_active = false;\n        this.env.last_folder_target = null;\n    };\n\n    this.drag_move = function (e) {\n        if (this.gui_objects.folderlist) {\n            var drag_target, oldclass,\n                layerclass = 'draglayernormal',\n                mouse = rcube_event.get_mouse_pos(e);\n\n            if (this.contact_list && this.contact_list.draglayer) {\n                oldclass = this.contact_list.draglayer.attr('class');\n            }\n\n            // mouse intersects a valid drop target on the treelist\n            if (this.treelist && (drag_target = this.treelist.intersects(mouse, true))) {\n                this.env.last_folder_target = drag_target;\n                layerclass = 'draglayer' + (this.check_droptarget(drag_target) > 1 ? 'copy' : 'normal');\n            } else {\n                // Clear target, otherwise drag end will trigger move into last valid droptarget\n                this.env.last_folder_target = null;\n            }\n\n            if (layerclass != oldclass && this.contact_list && this.contact_list.draglayer) {\n                this.contact_list.draglayer.attr('class', layerclass);\n            }\n        }\n    };\n\n    this.collapse_folder = function (name) {\n        if (this.treelist) {\n            this.treelist.toggle(name);\n        }\n    };\n\n    this.folder_collapsed = function (node) {\n        if (this.folder_collapsed_timer) {\n            clearTimeout(this.folder_collapsed_timer);\n        }\n\n        var prefname = this.env.task == 'addressbook' ? 'collapsed_abooks' : 'collapsed_folders',\n            old = this.env[prefname],\n            entry = '&' + urlencode(node.id) + '&';\n\n        this.env[prefname] = old.replace(entry, '');\n\n        if (node.collapsed) {\n            this.env[prefname] = this.env[prefname] + entry;\n\n            // select the folder if one of its children is currently selected\n            // don't select if it's virtual (#1488346)\n            if (!node.virtual && this.env.mailbox && this.env.mailbox.startsWith(node.id + this.env.delimiter)) {\n                this.command('list', node.id);\n            }\n        }\n\n        if (!this.drag_active) {\n            if (old !== this.env[prefname]) {\n                this.folder_collapsed_timer = setTimeout(function () {\n                    ref.command('save-pref', { name: prefname, value: ref.env[prefname] });\n                }, 10);\n            }\n\n            if (this.env.unread_counts) {\n                this.set_unread_count_display(node.id, false);\n            }\n        }\n    };\n\n    // global mouse-click handler to cleanup some UI elements\n    this.doc_mouse_up = function (e) {\n        var list, id, target = rcube_event.get_target(e);\n\n        // ignore event if jquery UI dialog is open\n        if ($(target).closest('.ui-dialog, .ui-widget-overlay').length) {\n            return;\n        }\n\n        // remove focus from list widgets\n        if (window.rcube_list_widget && rcube_list_widget._instances.length) {\n            $.each(rcube_list_widget._instances, function (i, list) {\n                if (list && !rcube_mouse_is_over(e, list.list.parentNode)) {\n                    list.blur();\n                }\n            });\n        }\n\n        // reset 'pressed' buttons\n        if (this.buttons_sel) {\n            for (id in this.buttons_sel) {\n                if (typeof id !== 'function') {\n                    this.button_out(this.buttons_sel[id], id);\n                }\n            }\n            this.buttons_sel = {};\n        }\n\n        // reset popup menus; delayed to have updated menu_stack data\n        setTimeout(function (e) {\n            var obj, skip, config, id, i, parents = $(target).parents();\n            for (i = ref.menu_stack.length - 1; i >= 0; i--) {\n                id = ref.menu_stack[i];\n                obj = $('#' + id);\n\n                if (obj.is(':visible')\n                    && target != obj.data('opener')\n                    && target != obj.get(0) // check if scroll bar was clicked (#1489832)\n                    && !parents.is(obj.data('opener'))\n                    && id != skip\n                    && (obj.attr('data-editable') != 'true' || !$(target).parents('#' + id).length)\n                    && (obj.attr('data-sticky') != 'true' || !rcube_mouse_is_over(e, obj.get(0)))\n                ) {\n                    ref.hide_menu(id, e);\n                }\n                skip = obj.data('parent');\n            }\n        }, 10, e);\n    };\n\n    // Global keypress event handler\n    this.doc_keypress = function (e) {\n        var target = e.target || {},\n            keyCode = rcube_event.get_keycode(e),\n            // Helper method to move focus to the next/prev active menu item\n            focus_menu_item = function (dir) {\n                var obj, item,\n                    mod = dir < 0 ? 'prevAll' : 'nextAll',\n                    limit = dir < 0 ? 'last' : 'first';\n\n                if (ref.focused_menu && (obj = $('#' + ref.focused_menu))) {\n                    item = obj.find(':focus').closest('li')[mod]().has(':not([aria-disabled=true])').find('a,input')[limit]();\n                    if (!item.length) {\n                        item = obj.find(':focus').closest('ul')[mod]().has(':not([aria-disabled=true])').find('a,input')[limit]();\n                    }\n                    return item.focus().length;\n                }\n\n                return 0;\n            };\n\n        if (e.keyCode != 27 && (!this.menu_keyboard_active || target.nodeName == 'TEXTAREA' || target.nodeName == 'SELECT')) {\n            return true;\n        }\n\n        switch (keyCode) {\n            case 38: // arrow-up\n            case 40: // arrow-down\n            case 63232: // arrow-up, in safari keypress\n            case 63233: // arrow-down, in safari keypress\n                focus_menu_item(keyCode == 38 || keyCode == 63232 ? -1 : 1);\n                return rcube_event.cancel(e);\n            case 9: // tab\n                if (this.focused_menu) {\n                    var mod = rcube_event.get_modifier(e);\n                    if (!focus_menu_item(mod == SHIFT_KEY ? -1 : 1)) {\n                        this.hide_menu(this.focused_menu, e);\n                    }\n                }\n\n                return rcube_event.cancel(e);\n            case 27: // esc\n                if (this.menu_stack.length) {\n                    this.hide_menu(this.menu_stack[this.menu_stack.length - 1], e);\n                }\n\n                break;\n        }\n\n        return true;\n    };\n\n    // Common handler for a keypress event on a list widget\n    this.list_keypress = function (list, conf) {\n        if (list.modkey == CONTROL_KEY) {\n            return;\n        }\n\n        if (list.key_pressed == list.DELETE_KEY || list.key_pressed == list.BACKSPACE_KEY) {\n            this.command(conf && conf.del ? conf.del : 'delete');\n        } else if (list.key_pressed == 33) {\n            this.command(conf && conf.prev ? conf.prev : 'previouspage');\n        } else if (list.key_pressed == 34) {\n            this.command(conf && conf.next ? conf.next : 'nextpage');\n        }\n    };\n\n    // Handler for a keypress event on a messages list widget\n    this.msglist_keypress = function (list) {\n        // On Enter open the message in list layout mode (no preview frame)\n        if (list.key_pressed == list.ENTER_KEY && !this.env.contentframe) {\n            this.command('show');\n        } else {\n            this.list_keypress(list);\n        }\n    };\n\n    this.msglist_select = function (list) {\n        if (this.preview_timer) {\n            clearTimeout(this.preview_timer);\n        }\n\n        var isDraft = false,\n            selected = list.get_single_selection(),\n            selection = list.get_selection(false),\n            selected_count = selection.length;\n\n        this.enable_command(this.env.message_commands, selected != null);\n\n        // Find out whether any of the selected messages comes from the Drafts folder\n        if (selected_count > 0) {\n            if (!this.env.multifolder_listing) {\n                isDraft = this.env.mailbox == this.env.drafts_mailbox;\n            } else {\n                $.each(selection, function (i, v) {\n                    if (ref.get_message_mailbox(v) == ref.env.drafts_mailbox) {\n                        isDraft = true;\n                        return false;\n                    }\n                });\n            }\n        }\n\n        // Disable some actions enabled above\n        if (selected) {\n            if (isDraft) {\n                this.enable_command('reply', 'reply-all', 'reply-list', 'forward', 'forward-inline',\n                    'forward-attachment', 'bounce', false);\n            } else {\n                var msg = this.env.messages[selected];\n                if (!msg.ml) {\n                    this.enable_command('reply-list', false);\n                }\n            }\n        }\n\n        // Multi-message commands\n        this.enable_command('delete', 'move', 'copy', 'mark', selected_count > 0);\n        this.enable_command('forward', 'forward-attachment', !isDraft && selected_count > 0);\n\n        // reset all-pages-selection\n        if (selected || (selected_count && selected_count != list.rowcount)) {\n            this.select_all_mode = false;\n        }\n\n        // start timer for message preview (wait for double click)\n        if (selected && this.env.contentframe && !list.multi_selecting && !this.dummy_select) {\n            // try to be responsive and try not to overload the server when user is pressing up/down key repeatedly\n            var now = new Date().getTime(),\n                time_diff = now - (this._last_msglist_select_time || 0),\n                preview_pane_delay = this.preview_delay_click;\n\n            // user is selecting messages repeatedly, wait until this ends (use larger delay)\n            if (time_diff < this.preview_delay_select) {\n                preview_pane_delay = this.preview_delay_select;\n                if (this.preview_timer) {\n                    clearTimeout(this.preview_timer);\n                }\n                if (this.env.contentframe) {\n                    this.show_contentframe(false);\n                }\n            }\n\n            this._last_msglist_select_time = now;\n            this.preview_timer = setTimeout(function () {\n                ref.msglist_get_preview();\n            }, preview_pane_delay);\n        } else if (this.env.contentframe) {\n            this.show_contentframe(false);\n        }\n    };\n\n    this.msglist_dbl_click = function (list) {\n        if (this.preview_timer) {\n            clearTimeout(this.preview_timer);\n        }\n\n        var mbox, uid = list.get_single_selection();\n\n        // TODO: Here we should just use this.command('show') but we can't\n        // because at this point this.busy=true (set by msglist_get_preview())\n\n        if (uid) {\n            mbox = this.get_message_mailbox(uid);\n            if (mbox == this.env.drafts_mailbox) {\n                this.open_compose_step({ _draft_uid: uid, _mbox: mbox });\n            } else {\n                this.show_message(uid);\n            }\n        }\n    };\n\n    this.msglist_get_preview = function () {\n        var uid = this.get_single_uid();\n\n        if (uid && this.env.contentframe && !this.drag_active) {\n            this.show_message(uid, false, true);\n        } else if (this.env.contentframe) {\n            this.show_contentframe(false);\n        }\n    };\n\n    this.msglist_expand = function (row) {\n        if (this.env.messages[row.uid]) {\n            this.env.messages[row.uid].expanded = row.expanded;\n        }\n\n        $(row.obj)[row.expanded ? 'addClass' : 'removeClass']('expanded');\n    };\n\n    this.msglist_set_coltypes = function (list) {\n        var i, found, name, cols = list.thead.rows[0].cells;\n\n        this.env.listcols = [];\n\n        for (i = 0; i < cols.length; i++) {\n            if (cols[i].id && cols[i].id.startsWith('rcm')) {\n                name = cols[i].id.slice(3);\n                this.env.listcols.push(name);\n            }\n        }\n\n        // update message list setup\n        this.msglist_setup(this.env.layout);\n\n        if ((found = $.inArray('flag', this.env.listcols)) >= 0) {\n            this.env.flagged_col = found;\n        }\n\n        if ((found = $.inArray('subject', this.env.listcols)) >= 0) {\n            this.env.subject_col = found;\n        }\n\n        this.command('save-pref', { name: 'list_cols', value: this.env.listcols, session: 'list_attrib/columns' });\n    };\n\n    this.msglist_setup = function (layout) {\n        var ret, listcols;\n\n        // allow plugins or skins to override default list layout\n        if (ret = this.triggerEvent('msglist_layout', layout)) {\n            layout = ret;\n        }\n\n        listcols = this.env[layout == 'widescreen' ? 'listcols_widescreen' : 'listcols'];\n\n        if (layout == 'widescreen' && !this.env.threading) {\n            listcols = $.grep(listcols, function (value) {\n                return value != 'threads';\n            });\n        }\n\n        // set env vars for message list\n        this.env.msglist_layout = layout;\n        this.env.msglist_cols = listcols;\n\n        // Set sort-* class on the list element\n        var list = this.gui_objects.messagelist,\n            classes = list.className.split(' ').filter(function (v) {\n                return !v.startsWith('sort-');\n            });\n\n        classes.push('sort-' + (this.env.sort_col || 'none'));\n        list.className = classes.join(' ');\n    };\n\n    this.check_droptarget = function (id) {\n        switch (this.task) {\n            case 'mail':\n                return (this.env.mailboxes[id]\n                    && !this.env.mailboxes[id].virtual\n                    && (this.env.mailboxes[id].id != this.env.mailbox || this.is_multifolder_listing())) ? 1 : 0;\n\n            case 'addressbook':\n                var target;\n                if (id != this.env.source && (target = this.env.contactfolders[id])) {\n                    // droptarget is a group\n                    if (target.type == 'group') {\n                        if (target.id != this.env.group && !this.env.contactfolders[target.source].readonly) {\n                            var is_other = this.env.selection_sources.length > 1 || $.inArray(target.source, this.env.selection_sources) == -1;\n                            return !is_other || this.commands.move ? 1 : 2;\n                        }\n                    }\n                    // droptarget is a (writable) addressbook and it's not the source\n                    else if (!target.readonly && (this.env.selection_sources.length > 1 || $.inArray(id, this.env.selection_sources) == -1)) {\n                        return this.commands.move ? 1 : 2;\n                    }\n                }\n        }\n\n        return 0;\n    };\n\n    // open popup window\n    this.open_window = function (url, small, toolbar) {\n        var extwin, features, wname = 'rcmextwin' + new Date().getTime();\n\n        url += (url.match(/\\?/) ? '&' : '?') + '_extwin=1';\n\n        if (!this.env.standard_windows) {\n            var win = this.is_framed() ? parent.window : window,\n                page = $(win),\n                page_width = page.width(),\n                page_height = bw.mz ? $('body', win).height() : page.height(),\n                w = Math.min(small ? this.env.popup_width_small : this.env.popup_width, page_width),\n                h = page_height, // always use same height\n                l = (win.screenLeft || win.screenX) + 20,\n                t = (win.screenTop || win.screenY) + 20;\n\n            features = 'width=' + w + ',height=' + h + ',top=' + t + ',left=' + l\n                + ',resizable=yes,location=no,scrollbars=yes'\n                + (toolbar ? ',toolbar=yes,menubar=yes,status=yes' : ',toolbar=no,menubar=no,status=no');\n        }\n\n        extwin = window.open(url, wname, features);\n\n        // detect popup blocker (#1489618)\n        // don't care this might not work with all browsers\n        if (!extwin || extwin.closed) {\n            this.display_message('windowopenerror', 'warning');\n            return;\n        }\n\n        // write loading... message to empty windows\n        if (!url && extwin.document) {\n            extwin.document.write('<html><body>' + this.get_label('loading') + '</body></html>');\n        }\n\n        // allow plugins to grab the window reference (#1489413)\n        this.triggerEvent('openwindow', { url: url, handle: extwin });\n\n        // focus window, delayed to bring to front\n        setTimeout(function () {\n            extwin && extwin.focus();\n        }, 10);\n\n        return extwin;\n    };\n\n\n    /*********************************************************/\n    /*             (message) list functionality              */\n    /*********************************************************/\n\n    this.init_message_row = function (row) {\n        var i, fn = {}, uid = row.uid,\n            status_icon = (this.env.status_col != null ? 'status' : 'msg') + 'icn' + row.id;\n\n        if (uid && this.env.messages[uid]) {\n            $.extend(row, this.env.messages[uid]);\n        }\n\n        // set eventhandler to status icon\n        if (row.icon = document.getElementById(status_icon)) {\n            fn.icon = function (e) {\n                ref.command('toggle_status', uid);\n            };\n        }\n\n        // save message icon position too\n        if (this.env.status_col != null) {\n            row.msgicon = document.getElementById('msgicn' + row.id);\n        } else {\n            row.msgicon = row.icon;\n        }\n\n        // set eventhandler to flag icon\n        if (this.env.flagged_col != null && (row.flagicon = document.getElementById('flagicn' + row.id))) {\n            fn.flagicon = function (e) {\n                ref.command('toggle_flag', uid);\n            };\n        }\n\n        // set event handler to thread expand/collapse icon\n        if (!row.depth && row.has_children && (row.expando = document.getElementById('rcmexpando' + row.id))) {\n            fn.expando = function (e) {\n                ref.expand_message_row(e, uid);\n            };\n        }\n\n        // attach events\n        $.each(fn, function (i, f) {\n            row[i].onclick = function (e) {\n                f(e); return rcube_event.cancel(e);\n            };\n            if (bw.touch && row[i].addEventListener) {\n                row[i].addEventListener('touchend', function (e) {\n                    if (e.changedTouches.length == 1) {\n                        f(e);\n                        return rcube_event.cancel(e);\n                    }\n                }, false);\n            }\n        });\n\n        this.triggerEvent('insertrow', { uid: uid, row: row });\n    };\n\n    // create a table row in the message list\n    this.add_message_row = function (uid, cols, flags, attop) {\n        if (!this.gui_objects.messagelist || !this.message_list) {\n            return false;\n        }\n\n        // Prevent from adding messages from different folder (#1487752)\n        if (flags.mbox != this.env.mailbox && !flags.skip_mbox_check) {\n            return false;\n        }\n\n        // When deleting messages fast it may happen that the same message\n        // from the next page could be added many times, we prevent this here\n        if (this.message_list.rows[uid]) {\n            return false;\n        }\n\n        if (!this.env.messages[uid]) {\n            this.env.messages[uid] = {};\n        }\n\n        // merge flags over local message object\n        $.extend(this.env.messages[uid], {\n            deleted: flags.deleted ? 1 : 0,\n            replied: flags.answered ? 1 : 0,\n            unread: !flags.seen ? 1 : 0,\n            forwarded: flags.forwarded ? 1 : 0,\n            flagged: flags.flagged ? 1 : 0,\n            has_children: flags.has_children ? 1 : 0,\n            depth: flags.depth ? flags.depth : 0,\n            unread_children: flags.unread_children || 0,\n            flagged_children: flags.flagged_children || 0,\n            parent_uid: flags.parent_uid || 0,\n            selected: this.select_all_mode || this.message_list.in_selection(uid),\n            prio: flags.prio || 0,\n            ml: flags.ml ? 1 : 0,\n            ctype: flags.ctype,\n            mbox: flags.mbox,\n            size: cols.size,\n            date: cols.date,\n            flags: flags.extra_flags, // flags from plugins\n            folder: cols.folder,\n        });\n\n        var c, n, col, html, css_class, label, status_class = '', status_label = '', tree = '', expando = '',\n            list = this.message_list,\n            rows = list.rows,\n            message = this.env.messages[uid],\n            msg_id = this.html_identifier(uid, true),\n            row_class = 'message'\n                + (!flags.seen ? ' unread' : '')\n                + (flags.deleted ? ' deleted' : '')\n                + (flags.flagged ? ' flagged' : '')\n                + (message.selected ? ' selected' : ''),\n            row = {\n                cols: [], style: {}, id: 'rcmrow' + msg_id, uid: uid,\n            },\n            layout = this.env.msglist_layout,\n            listcols = this.env.msglist_cols;\n\n        // widescreen layout does not have a separate status column\n        if (layout == 'widescreen') {\n            this.env.status_col = null;\n        } else if ((n = $.inArray('status', listcols)) >= 0) {\n            this.env.status_col = n;\n        }\n\n        // message status icons\n        css_class = 'msgicon';\n        if (this.env.status_col === null) {\n            css_class += ' status';\n            if (flags.deleted) {\n                status_class += ' deleted';\n                status_label += this.get_label('deleted') + ' ';\n            } else if (!flags.seen) {\n                status_class += ' unread';\n                status_label += this.get_label('unread') + ' ';\n            } else if (flags.unread_children > 0) {\n                status_class += ' unreadchildren';\n            }\n        }\n        if (flags.answered) {\n            status_class += ' replied';\n            status_label += this.get_label('replied') + ' ';\n        }\n        if (flags.forwarded) {\n            status_class += ' forwarded';\n            status_label += this.get_label('forwarded') + ' ';\n        }\n\n        // update selection\n        if (message.selected && !list.in_selection(uid)) {\n            list.selection.push(uid);\n        }\n\n        // threads\n        if (this.env.threading) {\n            if (message.depth) {\n                // This assumes that div width is hardcoded to 15px,\n                tree += '<span id=\"rcmtab' + msg_id + '\" class=\"branch\" style=\"width:' + (message.depth * 15) + 'px;\">&nbsp;&nbsp;</span>';\n\n                if ((rows[message.parent_uid] && rows[message.parent_uid].expanded === false)\n                    || ((this.env.autoexpand_threads == 0 || this.env.autoexpand_threads == 2)\n                        && (!rows[message.parent_uid] || !rows[message.parent_uid].expanded))\n                ) {\n                    row.style.display = 'none';\n                    message.expanded = false;\n                } else {\n                    message.expanded = true;\n                }\n\n                row_class += ' thread expanded';\n            } else if (message.has_children) {\n                if (message.expanded === undefined && (this.env.autoexpand_threads == 1 || (this.env.autoexpand_threads == 2 && message.unread_children))) {\n                    message.expanded = true;\n                }\n\n                expando = '<div id=\"rcmexpando' + row.id + '\" class=\"' + (message.expanded ? 'expanded' : 'collapsed') + '\">&nbsp;&nbsp;</div>';\n                row_class += ' thread' + (message.expanded ? ' expanded' : '');\n            }\n\n            if (flags.unread_children && flags.seen && !message.expanded) {\n                row_class += ' unroot';\n            }\n\n            if (flags.flagged_children && !message.expanded) {\n                row_class += ' flaggedroot';\n            }\n        }\n\n        tree += '<span id=\"msgicn' + row.id + '\" class=\"' + css_class + status_class + '\" title=\"' + status_label + '\"></span>';\n        row.className = row_class;\n\n        // build subject link\n        if (cols.subject) {\n            var action  = flags.mbox == this.env.drafts_mailbox ? 'compose' : 'show',\n                uid_param = flags.mbox == this.env.drafts_mailbox ? '_draft_uid' : '_uid',\n                query = { _mbox: flags.mbox };\n\n            query[uid_param] = uid;\n            cols.subject = '<a href=\"' + this.url(action, query) + '\" onclick=\"return rcube_event.keyboard_only(event)\"'\n                + ' onmouseover=\"rcube_webmail.long_subject_title(this)\" tabindex=\"-1\"><span>' + cols.subject + '</span></a>';\n        }\n\n        // add each submitted col\n        for (n in listcols) {\n            c = listcols[n];\n            col = { className: String(c).toLowerCase(), events: {} };\n\n            if (this.env.coltypes[c] && this.env.coltypes[c].hidden) {\n                col.className += ' hidden';\n            }\n\n            if (c == 'flag') {\n                css_class = (flags.flagged ? 'flagged' : 'unflagged');\n                label = this.get_label(css_class);\n                html = '<span id=\"flagicn' + row.id + '\" class=\"' + css_class + '\" title=\"' + label + '\"></span>';\n            } else if (c == 'attachment') {\n                label = this.get_label('withattachment');\n                if (flags.attachmentClass) {\n                    html = '<span class=\"' + flags.attachmentClass + '\" title=\"' + label + '\"></span>';\n                } else if (flags.ctype == 'multipart/report') {\n                    html = '<span class=\"report\"></span>';\n                } else if (flags.ctype == 'multipart/encrypted' || flags.ctype == 'application/pkcs7-mime' || flags.ctype == 'application/x-pkcs7-mime') {\n                    html = '<span class=\"encrypted\"></span>';\n                } else if (flags.hasattachment || (!flags.hasnoattachment && /application\\/|multipart\\/(m|signed)/.test(flags.ctype))) {\n                    html = '<span class=\"attachment\" title=\"' + label + '\"></span>';\n                } else {\n                    html = '&nbsp;';\n                }\n            } else if (c == 'status') {\n                label = '';\n                if (flags.deleted) {\n                    css_class = 'deleted';\n                    label = this.get_label('deleted');\n                } else if (!flags.seen) {\n                    css_class = 'unread';\n                    label = this.get_label('unread');\n                } else if (flags.unread_children > 0) {\n                    css_class = 'unreadchildren';\n                } else {\n                    css_class = 'msgicon';\n                }\n                html = '<span id=\"statusicn' + row.id + '\" class=\"' + css_class + status_class + '\" title=\"' + label + '\"></span>';\n            } else if (c == 'threads') {\n                html = expando;\n            } else if (c == 'subject') {\n                html = tree + cols[c];\n            } else if (c == 'priority') {\n                if (flags.prio > 0 && flags.prio < 6) {\n                    label = this.get_label('priority') + ' ' + flags.prio;\n                    html = '<span class=\"prio' + flags.prio + '\" title=\"' + label + '\"></span>';\n                } else {\n                    html = '&nbsp;';\n                }\n            } else if (c == 'folder') {\n                html = '<span onmouseover=\"rcube_webmail.long_subject_title(this)\">' + cols[c] + '<span>';\n            } else {\n                html = cols[c];\n            }\n\n            col.innerHTML = html;\n            row.cols.push(col);\n        }\n\n        if (layout == 'widescreen') {\n            row = this.widescreen_message_row(row, uid, message);\n        }\n\n        list.insert_row(row, attop);\n\n        // remove 'old' row\n        if (attop && this.env.pagesize && list.rowcount > this.env.pagesize) {\n            var uid = list.get_last_row();\n            list.remove_row(uid);\n            list.clear_selection(uid);\n        }\n    };\n\n    // Converts standard message list record into \"widescreen\" (3-column) layout\n    this.widescreen_message_row = function (row, uid, message) {\n        var domrow = document.createElement('tr');\n\n        domrow.id = row.id;\n        domrow.uid = row.uid;\n        domrow.className = row.className;\n        if (row.style) {\n            $.extend(domrow.style, row.style);\n        }\n\n        if (this.is_multifolder_listing()) {\n            domrow.title = rcmail.get_label('infolder').replace('$folder', message.folder);\n        }\n\n        $.each(this.env.widescreen_list_template, function () {\n            if (!ref.env.threading && this.className == 'threads') {\n                return;\n            }\n\n            var i, n, e, col, domcol,\n                domcell = document.createElement('td');\n\n            if (this.className) {\n                domcell.className = this.className;\n            }\n\n            for (i = 0; this.cells && i < this.cells.length; i++) {\n                for (n = 0; row.cols && n < row.cols.length; n++) {\n                    if (this.cells[i] == row.cols[n].className) {\n                        col = row.cols[n];\n                        domcol = document.createElement('span');\n                        domcol.className = this.cells[i];\n                        if (this.className == 'subject' && domcol.className != 'subject') {\n                            domcol.className += ' skip-on-drag';\n                        }\n                        if (col.innerHTML) {\n                            domcol.innerHTML = col.innerHTML;\n                        }\n                        domcell.appendChild(domcol);\n                        break;\n                    }\n                }\n            }\n\n            domrow.appendChild(domcell);\n        });\n\n        if (this.env.threading && message.depth) {\n            n = this.calculate_thread_padding(message.depth);\n            $('td.subject', domrow).attr('style', 'padding-left:' + n + ' !important');\n            $('span.branch', domrow).remove();\n        }\n\n        return domrow;\n    };\n\n    this.calculate_thread_padding = function (level) {\n        ref.env.thread_padding.match(/^([0-9.]+)(.+)/);\n        return (Math.min(6, level) * parseFloat(RegExp.$1)) + RegExp.$2;\n    };\n\n    this.set_list_sorting = function (sort_col, sort_order) {\n        var sort_old = this.env.sort_col == 'arrival' ? 'date' : this.env.sort_col,\n            sort_new = sort_col == 'arrival' ? 'date' : sort_col;\n\n        // set table header class\n        $('#rcm' + sort_old).removeClass('sorted' + this.env.sort_order.toUpperCase());\n        if (sort_new) {\n            $('#rcm' + sort_new).addClass('sorted' + sort_order);\n        }\n\n        // if sorting by 'arrival' is selected, click on date column should not switch to 'date'\n        $('#rcmdate > a').prop('rel', sort_col == 'arrival' ? 'arrival' : 'date');\n\n        this.env.sort_col = sort_col;\n        this.env.sort_order = sort_order;\n    };\n\n    this.set_list_options = function (cols, sort_col, sort_order, threads, layout) {\n        var update, post_data = {};\n\n        if (sort_col === undefined) {\n            sort_col = this.env.sort_col;\n        }\n        if (!sort_order) {\n            sort_order = this.env.sort_order;\n        }\n\n        if (this.env.sort_col != sort_col || this.env.sort_order != sort_order) {\n            update = 1;\n            this.set_list_sorting(sort_col, sort_order);\n        }\n\n        if (this.env.threading != threads) {\n            update = 1;\n            post_data._threads = threads;\n        }\n\n        if (layout && this.env.layout != layout) {\n            this.triggerEvent('layout-change', { old_layout: this.env.layout, new_layout: layout });\n            update = 1;\n            this.env.layout = post_data._layout = layout;\n\n            // update message list setup\n            this.msglist_setup(this.env.layout);\n        }\n\n        if (cols && cols.length) {\n            // make sure new columns are added at the end of the list\n            var i, idx, name, newcols = [], oldcols = this.env.listcols;\n\n            for (i = 0; i < oldcols.length; i++) {\n                name = oldcols[i];\n                idx = $.inArray(name, cols);\n                if (idx != -1) {\n                    newcols.push(name);\n                    delete cols[idx];\n                }\n            }\n\n            for (i = 0; i < cols.length; i++) {\n                if (cols[i]) {\n                    newcols.push(cols[i]);\n                }\n            }\n\n            if (newcols.join() != oldcols.join()) {\n                update = 1;\n                post_data._cols = newcols.join(',');\n            }\n        }\n\n        if (update) {\n            this.list_mailbox('', '', sort_col + '_' + sort_order, post_data);\n        }\n    };\n\n    // when user double-clicks on a row\n    this.show_message = function (id, safe, preview) {\n        if (!id) {\n            return;\n        }\n\n        var win, target = window,\n            url = this.params_from_uid(id, { _caps: this.browser_capabilities() });\n\n        if (preview && (win = this.get_frame_window(this.env.contentframe))) {\n            target = win;\n            url._framed = 1;\n        }\n\n        if (safe) {\n            url._safe = 1;\n        }\n\n        // also send search request to get the right messages\n        if (this.env.search_request) {\n            url._search = this.env.search_request;\n        }\n\n        if (this.env.extwin) {\n            url._extwin = 1;\n        }\n\n        url = this.url(preview ? 'preview' : 'show', url);\n\n        if (preview) {\n            this.preview_id = id;\n        }\n\n        if (preview && String(target.location.href).indexOf(url) >= 0) {\n            this.show_contentframe(true);\n        } else {\n            if (!preview && this.env.message_extwin && !this.env.extwin) {\n                this.open_window(url, true);\n            } else {\n                // \"Allow remote resources\" reloads the page, we remove this request from the history,\n                // so Back button works as expected, i.e. ignores the reload request (#6620)\n                if (safe && document.referrer && window.history.replaceState) {\n                    window.history.replaceState({}, '', document.referrer);\n                }\n\n                this.location_href(url, target, true);\n            }\n        }\n    };\n\n    // Update message status and unread counter after marking a message as read\n    this.set_unread_message = function (id, folder) {\n        var self = this;\n\n        // find window with messages list\n        if (!self.message_list) {\n            self = self.opener();\n        }\n\n        if (!self && window.parent) {\n            self = parent.rcmail;\n        }\n\n        if (!self || !self.message_list) {\n            return;\n        }\n\n        // this may fail in multifolder mode\n        if (self.set_message(id, 'unread', false) === false) {\n            self.set_message(id + '-' + folder, 'unread', false);\n        }\n\n        if (self.env.unread_counts[folder] > 0) {\n            self.env.unread_counts[folder] -= 1;\n            self.set_unread_count(folder, self.env.unread_counts[folder], folder == 'INBOX' && !self.is_multifolder_listing());\n        }\n    };\n\n    this.show_contentframe = function (show) {\n        var frame, win, name = this.env.contentframe;\n\n        if (frame = this.get_frame_element(name)) {\n            if (!show && (win = this.get_frame_window(name))) {\n                if (win.location.href.indexOf(this.env.blankpage) < 0) {\n                    win.stop();\n                    win.location.href = this.env.blankpage;\n                }\n            } else if (!bw.safari && !bw.konq) {\n                $(frame)[show ? 'show' : 'hide']();\n            }\n        }\n\n        if (!show) {\n            this.unlock_frame();\n            delete this.preview_id;\n        }\n    };\n\n    this.get_frame_element = function (id) {\n        var frame;\n\n        if (id && (frame = document.getElementById(id))) {\n            return frame;\n        }\n    };\n\n    this.get_frame_window = function (id) {\n        var frame = this.get_frame_element(id);\n\n        if (frame && frame.name && window.frames) {\n            return window.frames[frame.name];\n        }\n    };\n\n    this.lock_frame = function (target) {\n        var rc = this.is_framed() ? parent.rcmail : this;\n\n        if (!rc.env.frame_lock) {\n            rc.env.frame_lock = rc.set_busy(true, 'loading');\n        }\n\n        try {\n            if (target.frameElement) {\n                $(target.frameElement).on('load.lock', function (e) {\n                    rc.unlock_frame();\n                    $(this).off('load.lock');\n                });\n            }\n        } catch (e) {\n            // Ignore permission denied error\n        }\n    };\n\n    this.unlock_frame = function () {\n        if (this.env.frame_lock) {\n            this.set_busy(false, null, this.env.frame_lock);\n            this.env.frame_lock = null;\n        }\n    };\n\n    // List a specific page\n    this.list_page = function (page) {\n        if (page == 'next') {\n            page = this.env.current_page + 1;\n        } else if (page == 'last') {\n            page = this.env.pagecount;\n        } else if (page == 'prev' && this.env.current_page > 1) {\n            page = this.env.current_page - 1;\n        } else if (page == 'first' && this.env.current_page > 1) {\n            page = 1;\n        }\n\n        if (page > 0 && page <= this.env.pagecount) {\n            this.env.current_page = page;\n\n            if (this.task == 'addressbook' || this.contact_list) {\n                this.list_contacts(this.env.source, this.env.group, page);\n            } else if (this.task == 'mail') {\n                this.list_mailbox(this.env.mailbox, page);\n            }\n        }\n    };\n\n    // Sends request to check for recent messages\n    this.checkmail = function () {\n        var lock = this.set_busy(true, 'checkingmail'),\n            params = this.check_recent_params();\n\n        this.http_post('check-recent', params, lock);\n    };\n\n    // List messages of a specific mailbox using filter\n    this.filter_mailbox = function (filter) {\n        if (this.filter_disabled) {\n            return;\n        }\n\n        var params = this.search_params(false, filter),\n            lock = this.set_busy(true, 'searching');\n\n        this.clear_message_list();\n\n        // reset vars\n        this.env.current_page = 1;\n        this.env.search_filter = filter;\n        this.http_request('search', params, lock);\n        this.update_state({ _mbox: params._mbox, _filter: filter, _scope: params._scope });\n    };\n\n    // Reload the current message listing\n    this.refresh_list = function () {\n        this.list_mailbox(this.env.mailbox, this.env.current_page || 1, null, { _clear: 1 }, true);\n        if (this.message_list) {\n            this.message_list.clear_selection();\n        }\n    };\n\n    // List messages of a specific mailbox\n    this.list_mailbox = function (mbox, page, sort, url, update_only) {\n        var win, target = window;\n\n        if (typeof url !== 'object') {\n            url = {};\n        }\n\n        if (!mbox) {\n            mbox = this.env.mailbox ? this.env.mailbox : 'INBOX';\n        }\n\n        // add sort to url if set\n        if (sort) {\n            url._sort = sort;\n        }\n\n        // folder change, reset page, search scope, etc.\n        if (this.env.mailbox != mbox) {\n            page = 1;\n            this.env.current_page = page;\n            this.env.search_scope = this.env.search_scope || 'base';\n            this.select_all_mode = false;\n            this.reset_search_filter();\n        }\n        // also send search request to get the right messages\n        else if (this.env.search_request) {\n            url._search = this.env.search_request;\n        }\n\n        if (!update_only) {\n            // unselect selected messages and clear the list and message data\n            this.clear_message_list();\n\n            if (mbox != this.env.mailbox || (mbox == this.env.mailbox && !page && !sort)) {\n                url._refresh = 1;\n            }\n\n            this.select_folder(mbox, '', true);\n            this.unmark_folder(mbox, 'recent', '', true);\n            this.env.mailbox = mbox;\n        }\n\n        // load message list remotely\n        if (this.gui_objects.messagelist) {\n            this.list_mailbox_remote(mbox, page, url);\n            return;\n        }\n\n        if (win = this.get_frame_window(this.env.contentframe)) {\n            target = win;\n            url._framed = 1;\n        }\n\n        if (this.env.uid) {\n            url._uid = this.env.uid;\n        }\n\n        if (page) {\n            url._page = page;\n        }\n\n        // load message list to target frame/window\n        if (mbox) {\n            url._mbox = mbox;\n            this.set_busy(true, 'loading');\n            this.location_href(url, target);\n        }\n    };\n\n    this.clear_message_list = function () {\n        this.env.messages = {};\n        this.show_contentframe(false);\n\n        if (this.message_list) {\n            this.message_list.clear(true);\n        }\n    };\n\n    // send remote request to load message list\n    this.list_mailbox_remote = function (mbox, page, url) {\n        var lock = this.set_busy(true, 'loading');\n\n        if (typeof url !== 'object') {\n            url = {};\n        }\n\n        url._layout = this.env.layout;\n        url._mbox = mbox;\n        url._page = page;\n\n        this.http_request('list', url, lock);\n        this.update_state({ _mbox: mbox, _page: (page && page > 1 ? page : null) });\n    };\n\n    // Removes messages that don't exist from list selection array\n    this.update_selection = function () {\n        var list = this.message_list,\n            selected = list.selection,\n            rows = list.rows,\n            i, selection = [];\n\n        for (i in selected) {\n            if (rows[selected[i]]) {\n                selection.push(selected[i]);\n            }\n        }\n\n        list.selection = selection;\n\n        // reset preview frame, if currently previewed message is not selected (has been removed)\n        try {\n            var win = this.get_frame_window(this.env.contentframe),\n                id = win.rcmail.env.uid;\n\n            if (id && !list.in_selection(id)) {\n                this.show_contentframe(false);\n            }\n        } catch (e) {\n            // ignore\n        }\n    };\n\n    // Expand all threads with unread children\n    this.expand_unread = function () {\n        var r, tbody = this.message_list.tbody,\n            new_row = tbody.firstChild;\n\n        while (new_row) {\n            if (new_row.nodeType == 1 && (r = this.message_list.rows[new_row.uid]) && r.unread_children) {\n                this.message_list.expand_all(r);\n                this.set_unread_children(r.uid);\n            }\n\n            new_row = new_row.nextSibling;\n        }\n\n        return false;\n    };\n\n    // Thread expanding/collapsing handler\n    this.expand_message_row = function (e, uid) {\n        var row = this.message_list.rows[uid];\n\n        // handle unread_children/flagged_children mark\n        row.expanded = !row.expanded;\n        this.set_unread_children(uid);\n        this.set_flagged_children(uid);\n        row.expanded = !row.expanded;\n\n        this.message_list.expand_row(e, uid);\n    };\n\n    // Message list expanding\n    this.expand_threads = function () {\n        if (!this.env.threading || !this.env.autoexpand_threads || !this.message_list) {\n            return;\n        }\n\n        switch (this.env.autoexpand_threads) {\n            case 2:\n                this.expand_unread();\n                break;\n            case 1:\n                this.message_list.expand_all();\n                break;\n        }\n    };\n\n    // Initializes threads indicators/expanders after list update\n    this.init_threads = function (roots, mbox) {\n        // #1487752\n        if (mbox && mbox != this.env.mailbox) {\n            return false;\n        }\n\n        for (var n = 0, len = roots.length; n < len; n++) {\n            this.add_tree_icons(roots[n]);\n        }\n\n        this.expand_threads();\n    };\n\n    // adds threads tree icons to the list (or specified thread)\n    this.add_tree_icons = function (root) {\n        var i, l, r, n, len, pos, row, tmp = [], uid = [],\n            rows = this.message_list.rows;\n\n        if (root) {\n            row = rows[root] ? rows[root].obj : null;\n        } else {\n            row = this.message_list.tbody.firstChild;\n        }\n\n        while (row) {\n            if (row.nodeType == 1 && (r = rows[row.uid])) {\n                if (r.depth) {\n                    for (i = tmp.length - 1; i >= 0; i--) {\n                        len = tmp[i].length;\n                        if (len > r.depth) {\n                            pos = len - r.depth;\n                            if (!(tmp[i][pos] & 2)) {\n                                tmp[i][pos] = tmp[i][pos] ? tmp[i][pos] + 2 : 2;\n                            }\n                        } else if (len == r.depth) {\n                            if (!(tmp[i][0] & 2)) {\n                                tmp[i][0] += 2;\n                            }\n                        }\n                        if (r.depth > len) {\n                            break;\n                        }\n                    }\n\n                    tmp.push(new Array(r.depth));\n                    tmp[tmp.length - 1][0] = 1;\n                    uid.push(r.uid);\n                } else {\n                    if (tmp.length) {\n                        for (i in tmp) {\n                            this.set_tree_icons(uid[i], tmp[i]);\n                        }\n                        tmp = [];\n                        uid = [];\n                    }\n                    if (root && row != rows[root].obj) {\n                        break;\n                    }\n                }\n            }\n            row = row.nextSibling;\n        }\n\n        if (tmp.length) {\n            for (i in tmp) {\n                this.set_tree_icons(uid[i], tmp[i]);\n            }\n        }\n    };\n\n    // Adds tree icons to specified message row\n    this.set_tree_icons = function (uid, tree) {\n        var i, divs = [], html = '', len = tree.length;\n\n        for (i = 0; i < len; i++) {\n            if (tree[i] > 2) {\n                divs.push({ class: 'l3', width: 15 });\n            } else if (tree[i] > 1) {\n                divs.push({ class: 'l2', width: 15 });\n            } else if (tree[i] > 0) {\n                divs.push({ class: 'l1', width: 15 });\n            }\n            // separator div\n            else if (divs.length && !divs[divs.length - 1].class) {\n                divs[divs.length - 1].width += 15;\n            } else {\n                divs.push({ class: null, width: 15 });\n            }\n        }\n\n        for (i = divs.length - 1; i >= 0; i--) {\n            if (divs[i].class) {\n                html += '<div class=\"tree ' + divs[i].class + '\" />';\n            } else {\n                html += '<div style=\"width:' + divs[i].width + 'px\" />';\n            }\n        }\n\n        if (html) {\n            $('#rcmtab' + this.html_identifier(uid, true)).html(html);\n        }\n    };\n\n    // Update parent in a thread\n    this.update_thread_root = function (uid, flag) {\n        if (!this.env.threading) {\n            return;\n        }\n\n        var root = this.message_list.find_root(uid);\n\n        if (uid == root) {\n            return;\n        }\n\n        var p = this.message_list.rows[root];\n\n        if (flag == 'read' && p.unread_children) {\n            p.unread_children--;\n        } else if (flag == 'unread' && p.has_children) {\n            // unread_children may be undefined\n            p.unread_children = (p.unread_children || 0) + 1;\n        } else if (flag == 'unflagged' && p.flagged_children) {\n            p.flagged_children--;\n        } else if (flag == 'flagged' && p.has_children) {\n            p.flagged_children = (p.flagged_children || 0) + 1;\n        } else {\n            return;\n        }\n\n        this.set_message_icon(root);\n        this.set_unread_children(root);\n        this.set_flagged_children(root);\n    };\n\n    // Update thread indicators for all messages in a thread below the specified message\n    // return number of removed/added root level messages\n    this.update_thread = function (uid) {\n        if (!this.env.threading || !this.message_list.rows[uid]) {\n            return 0;\n        }\n\n        var r, parent, count = 0,\n            list = this.message_list,\n            rows = list.rows,\n            row = rows[uid],\n            depth = rows[uid].depth,\n            roots = [];\n\n        if (!row.depth) { // root message: decrease roots count\n            count--;\n        }\n\n        // update unread_children for thread root\n        if (row.depth && row.unread) {\n            parent = list.find_root(uid);\n            rows[parent].unread_children--;\n            this.set_unread_children(parent);\n        }\n\n        // update unread_children for thread root\n        if (row.depth && row.flagged) {\n            parent = list.find_root(uid);\n            rows[parent].flagged_children--;\n            this.set_flagged_children(parent);\n        }\n\n        parent = row.parent_uid;\n\n        // children\n        row = row.obj.nextSibling;\n        while (row) {\n            if (row.nodeType == 1 && (r = rows[row.uid])) {\n                if (!r.depth || r.depth <= depth) {\n                    break;\n                }\n\n                r.depth--; // move left\n                // reset width and clear the content of a tab, icons will be added later\n                $('#rcmtab' + r.id).width(r.depth * 15).html('');\n                if (!r.depth) { // a new root\n                    count++; // increase roots count\n                    r.parent_uid = 0;\n                    if (r.has_children) {\n                        // replace 'leaf' with 'collapsed'\n                        $('#' + r.id + ' .leaf').first()\n                            .attr('id', 'rcmexpando' + r.id)\n                            .attr('class', (r.obj.style.display != 'none' ? 'expanded' : 'collapsed'))\n                            .mousedown({ uid: r.uid }, function (e) {\n                                return ref.expand_message_row(e, e.data.uid);\n                            });\n\n                        r.unread_children = 0;\n                        roots.push(r);\n                    }\n                    // show if it was hidden\n                    if (r.obj.style.display == 'none') {\n                        $(r.obj).show();\n                    }\n                } else {\n                    if (r.depth == depth) {\n                        r.parent_uid = parent;\n                    }\n                    if (r.unread && roots.length) {\n                        roots[roots.length - 1].unread_children++;\n                    }\n                }\n            }\n            row = row.nextSibling;\n        }\n\n        // update unread_children/flagged_children for roots\n        for (r = 0; r < roots.length; r++) {\n            this.set_unread_children(roots[r].uid);\n            this.set_flagged_children(roots[r].uid);\n        }\n\n        return count;\n    };\n\n    this.delete_excessive_thread_rows = function () {\n        var rows = this.message_list.rows,\n            tbody = this.message_list.tbody,\n            row = tbody.firstChild,\n            cnt = this.env.pagesize + 1;\n\n        while (row) {\n            if (row.nodeType == 1 && (r = rows[row.uid])) {\n                if (!r.depth && cnt) {\n                    cnt--;\n                }\n\n                if (!cnt) {\n                    this.message_list.remove_row(row.uid);\n                }\n            }\n\n            row = row.nextSibling;\n        }\n    };\n\n    // Set message icon\n    this.set_message_icon = function (uid) {\n        var css_class, label = '',\n            row = this.message_list.rows[uid];\n\n        if (!row) {\n            return false;\n        }\n\n        if (row.icon) {\n            css_class = 'msgicon';\n            if (row.deleted) {\n                css_class += ' deleted';\n                label += this.get_label('deleted') + ' ';\n            } else if (row.unread) {\n                css_class += ' unread';\n                label += this.get_label('unread') + ' ';\n            } else if (row.unread_children) {\n                css_class += ' unreadchildren';\n            }\n\n            if (row.msgicon == row.icon) {\n                if (row.replied) {\n                    css_class += ' replied';\n                    label += this.get_label('replied') + ' ';\n                }\n                if (row.forwarded) {\n                    css_class += ' forwarded';\n                    label += this.get_label('forwarded') + ' ';\n                }\n                css_class += ' status';\n            }\n\n            $(row.icon).attr({ class: css_class, title: label });\n        }\n\n        if (row.msgicon && row.msgicon != row.icon) {\n            label = '';\n            css_class = 'msgicon';\n            if (!row.unread && row.unread_children) {\n                css_class += ' unreadchildren';\n            }\n            if (row.replied) {\n                css_class += ' replied';\n                label += this.get_label('replied') + ' ';\n            }\n            if (row.forwarded) {\n                css_class += ' forwarded';\n                label += this.get_label('forwarded') + ' ';\n            }\n\n            $(row.msgicon).attr({ class: css_class, title: label });\n        }\n\n        if (row.flagicon) {\n            css_class = (row.flagged ? 'flagged' : 'unflagged');\n            label = this.get_label(css_class);\n            $(row.flagicon).attr({ class: css_class, 'aria-label': label, title: label });\n        }\n    };\n\n    // Set message status\n    this.set_message_status = function (uid, flag, status) {\n        var row = this.message_list.rows[uid];\n\n        if (!row) {\n            return false;\n        }\n\n        if (flag == 'unread') {\n            if (row.unread != status) {\n                this.update_thread_root(uid, status ? 'unread' : 'read');\n            }\n        } else if (flag == 'flagged') {\n            this.update_thread_root(uid, status ? 'flagged' : 'unflagged');\n        }\n\n        if ($.inArray(flag, ['unread', 'deleted', 'replied', 'forwarded', 'flagged']) > -1) {\n            row[flag] = status;\n        }\n    };\n\n    // Set message row status, class and icon\n    this.set_message = function (uid, flag, status) {\n        var row = this.message_list && this.message_list.rows[uid];\n\n        if (!row) {\n            return false;\n        }\n\n        if (flag) {\n            this.set_message_status(uid, flag, status);\n        }\n\n        if ($.inArray(flag, ['unread', 'deleted', 'flagged']) > -1) {\n            $(row.obj)[row[flag] ? 'addClass' : 'removeClass'](flag);\n        }\n\n        this.set_unread_children(uid);\n        this.set_message_icon(uid);\n    };\n\n    // Sets unroot (unread_children) class of parent row\n    this.set_unread_children = function (uid) {\n        var row = this.message_list.rows[uid];\n\n        if (row.parent_uid) {\n            return;\n        }\n\n        var enable = !row.unread && row.unread_children && !row.expanded;\n        $(row.obj)[enable ? 'addClass' : 'removeClass']('unroot');\n    };\n\n    // Sets flaggedroot (flagged_children) class of parent row\n    this.set_flagged_children = function (uid) {\n        var row = this.message_list.rows[uid];\n\n        if (row.parent_uid) {\n            return;\n        }\n\n        var enable = row.flagged_children && !row.expanded;\n        $(row.obj)[enable ? 'addClass' : 'removeClass']('flaggedroot');\n    };\n\n    // Copy selected messages to the specified mailbox\n    this.copy_messages = function (mbox, event, uids) {\n        if (mbox && typeof mbox === 'object') {\n            if (mbox.uids) {\n                uids = mbox.uids;\n            }\n            mbox = mbox.id;\n        } else if (!mbox) {\n            uids = this.env.uid ? [this.env.uid] : this.message_list.get_selection();\n\n            return this.folder_selector(event, function (folder, obj) {\n                ref.command('copy', { id: folder, uids: uids }, obj, event, true);\n            });\n        }\n\n        // exit if current or no mailbox specified\n        if (!mbox || mbox == this.env.mailbox) {\n            return;\n        }\n\n        var post_data = this.selection_post_data({ _target_mbox: mbox, _uid: uids });\n\n        // exit if selection is empty\n        if (!post_data._uid) {\n            return;\n        }\n\n        // send request to server\n        this.http_post('copy', post_data, this.display_message('copyingmessage', 'loading'));\n    };\n\n    // Move selected messages to the specified mailbox\n    this.move_messages = function (mbox, event, uids) {\n        if (mbox && typeof mbox === 'object') {\n            if (mbox.uids) {\n                uids = mbox.uids;\n            }\n            mbox = mbox.id;\n        } else if (!mbox) {\n            uids = this.env.uid ? [this.env.uid] : this.message_list.get_selection();\n\n            return this.folder_selector(event, function (folder, obj) {\n                ref.command('move', { id: folder, uids: uids }, obj, event, true);\n            });\n        }\n\n        // exit if current or no mailbox specified\n        if (!mbox || (mbox == this.env.mailbox && !this.is_multifolder_listing())) {\n            return;\n        }\n\n        var lock = false, post_data = this.selection_post_data({ _target_mbox: mbox, _uid: uids });\n\n        // exit if selection is empty\n        if (!post_data._uid) {\n            return;\n        }\n\n        // show wait message\n        if (this.env.action == 'show') {\n            lock = this.set_busy(true, 'movingmessage');\n        }\n\n        // Hide message command buttons until a message is selected\n        this.enable_command(this.env.message_commands, false);\n\n        this.with_selected_messages('move', post_data, lock);\n\n        if (this.env.action != 'show') {\n            this.show_contentframe(false);\n        }\n    };\n\n    // Delete selected messages from the current mailbox\n    this.delete_messages = function (event, uid) {\n        var list = this.message_list, trash = this.env.trash_mailbox;\n\n        // if config is set to flag for deletion\n        if (this.env.flag_for_deletion) {\n            this.mark_message('delete', uid);\n            return false;\n        }\n\n        // if there isn't a defined trash mailbox or we are in it\n        if (!trash || this.env.mailbox == trash) {\n            this.permanently_remove_messages(uid);\n        }\n        // we're in Junk folder and delete_junk is enabled\n        else if (this.env.delete_junk && this.env.junk_mailbox && this.env.mailbox == this.env.junk_mailbox) {\n            this.permanently_remove_messages(uid);\n        }\n        // if there is a trash mailbox defined and we're not currently in it\n        else {\n            // if shift was pressed delete it immediately\n            if ((list && list.modkey == SHIFT_KEY) || (event && rcube_event.get_modifier(event) == SHIFT_KEY)) {\n                this.confirm_dialog(this.get_label('deletemessagesconfirm'), 'delete', function () {\n                    ref.permanently_remove_messages(uid);\n                });\n            } else {\n                this.move_messages(trash, event, uid ? [uid] : null);\n            }\n        }\n\n        return true;\n    };\n\n    // Delete the selected messages permanently\n    this.permanently_remove_messages = function (uid) {\n        var post_data = this.selection_post_data(uid ? { _uid: uid } : null);\n\n        // exit if selection is empty\n        if (!post_data._uid) {\n            return;\n        }\n\n        this.with_selected_messages('delete', post_data);\n        this.show_contentframe(false);\n    };\n\n    // Send a specific move/delete request with UIDs of all selected messages\n    this.with_selected_messages = function (action, post_data, lock, http_action) {\n        var msg, count = 0,\n            remove = (action == 'delete' || !this.is_multifolder_listing());\n\n        // update the list (remove rows, clear selection)\n        if (this.message_list) {\n            var n, len, id, root, roots = [],\n                selection = post_data._uid,\n                display_next = this.check_display_next();\n\n            if (selection === '*') {\n                selection = this.message_list.get_selection();\n            } else if (!Array.isArray(selection)) {\n                selection = String(selection).split(',');\n            }\n\n            for (n = 0, len = selection.length; n < len; n++) {\n                id = selection[n];\n\n                if (this.env.threading) {\n                    count += this.update_thread(id);\n                    root = this.message_list.find_root(id);\n                    if (root != id && $.inArray(root, roots) < 0) {\n                        roots.push(root);\n                    }\n                }\n\n                if (remove) {\n                    this.message_list.remove_row(id, display_next && n == selection.length - 1);\n                }\n            }\n\n            // make sure there are no selected rows\n            if (!display_next && remove) {\n                this.message_list.clear_selection();\n            }\n\n            // update thread tree icons\n            for (n = 0, len = roots.length; n < len; n++) {\n                this.add_tree_icons(roots[n]);\n            }\n        }\n\n        if (count < 0) {\n            post_data._count = (count * -1);\n        } else if (count > 0 && remove) {\n            // remove threads from the end of the list\n            this.delete_excessive_thread_rows();\n        }\n\n        if (!remove) {\n            post_data._refresh = 1;\n        }\n\n        if (!lock) {\n            msg = action == 'move' ? 'movingmessage' : 'deletingmessage';\n            lock = this.display_message(msg, 'loading');\n        }\n\n        // send request to server\n        this.http_post(http_action || action, post_data, lock);\n    };\n\n    // Build post data for message delete/move/copy/flag requests\n    this.selection_post_data = function (data) {\n        if (!data || typeof (data) !== 'object') {\n            data = {};\n        }\n\n        if (!data._uid) {\n            data._uid = this.env.uid ? [this.env.uid] : this.message_list.get_selection();\n        }\n\n        data._mbox = this.env.mailbox;\n        data._uid = this.uids_to_list(data._uid);\n\n        if (this.env.action) {\n            data._from = this.env.action;\n        }\n\n        // also send search request to get the right messages\n        if (this.env.search_request) {\n            data._search = this.env.search_request;\n        }\n\n        if (this.env.display_next && this.env.next_uid) {\n            data._next_uid = this.env.next_uid;\n        }\n\n        return data;\n    };\n\n    this.check_display_next = function () {\n        return this.env.display_next && (this.preview_id || !this.env.contentframe);\n    };\n\n    // Set a specific flag to one or more messages\n    this.mark_message = function (flag, uid) {\n        var a_uids = [], r_uids = [], len, n, id,\n            list = this.message_list;\n\n        if (uid) {\n            a_uids.push(uid);\n        } else if (this.env.uid) {\n            a_uids.push(this.env.uid);\n        } else if (list) {\n            a_uids = list.get_selection();\n        }\n\n        if (!list) {\n            r_uids = a_uids;\n        } else {\n            list.focus();\n            for (n = 0, len = a_uids.length; n < len; n++) {\n                id = a_uids[n];\n                if ((flag == 'read' && list.rows[id].unread)\n                    || (flag == 'unread' && !list.rows[id].unread)\n                    || (flag == 'delete' && !list.rows[id].deleted)\n                    || (flag == 'undelete' && list.rows[id].deleted)\n                    || (flag == 'flagged' && !list.rows[id].flagged)\n                    || (flag == 'unflagged' && list.rows[id].flagged)\n                ) {\n                    r_uids.push(id);\n                }\n            }\n        }\n\n        // nothing to do\n        if (!r_uids.length && !this.select_all_mode) {\n            return;\n        }\n\n        switch (flag) {\n            case 'read':\n            case 'unread':\n                this.toggle_read_status(flag, r_uids);\n                break;\n            case 'delete':\n            case 'undelete':\n                this.toggle_delete_status(r_uids);\n                break;\n            case 'flagged':\n            case 'unflagged':\n                this.toggle_flagged_status(flag, a_uids);\n                break;\n        }\n    };\n\n    // Set class to read/unread\n    this.toggle_read_status = function (flag, a_uids) {\n        var i, len = a_uids.length,\n            post_data = this.selection_post_data({ _uid: a_uids, _flag: flag }),\n            lock = this.display_message('markingmessage', 'loading');\n\n        // mark all message rows as read/unread\n        for (i = 0; i < len; i++) {\n            this.set_message(a_uids[i], 'unread', (flag == 'unread' ? true : false));\n        }\n\n        this.http_post('mark', post_data, lock);\n    };\n\n    // Set image to flagged or unflagged\n    this.toggle_flagged_status = function (flag, a_uids) {\n        var i, len = a_uids.length,\n            win = this.env.contentframe ? this.get_frame_window(this.env.contentframe) : window,\n            post_data = this.selection_post_data({ _uid: a_uids, _flag: flag }),\n            lock = this.display_message('markingmessage', 'loading');\n\n        // mark all message rows as flagged/unflagged\n        for (i = 0; i < len; i++) {\n            this.set_message(a_uids[i], 'flagged', (flag == 'flagged' ? true : false));\n        }\n\n        if (this.env.action == 'show' || $.inArray(this.preview_id, a_uids) >= 0) {\n            $(win.document.body)[flag == 'flagged' ? 'addClass' : 'removeClass']('status-flagged');\n        }\n\n        this.http_post('mark', post_data, lock);\n    };\n\n    // Mark all message rows as deleted/undeleted\n    this.toggle_delete_status = function (a_uids) {\n        var i, uid, all_deleted = true,\n            len = a_uids.length,\n            rows = this.message_list ? this.message_list.rows : {};\n\n        if (len == 1) {\n            if (!this.message_list || (rows[a_uids[0]] && !rows[a_uids[0]].deleted)) {\n                this.flag_as_deleted(a_uids);\n            } else {\n                this.flag_as_undeleted(a_uids);\n            }\n\n            return true;\n        }\n\n        for (i = 0; i < len; i++) {\n            uid = a_uids[i];\n            if (rows[uid] && !rows[uid].deleted) {\n                all_deleted = false;\n                break;\n            }\n        }\n\n        if (all_deleted) {\n            this.flag_as_undeleted(a_uids);\n        } else {\n            this.flag_as_deleted(a_uids);\n        }\n\n        return true;\n    };\n\n    this.flag_as_undeleted = function (a_uids) {\n        var i, len = a_uids.length,\n            post_data = this.selection_post_data({ _uid: a_uids, _flag: 'undelete' }),\n            lock = this.display_message('markingmessage', 'loading');\n\n        for (i = 0; i < len; i++) {\n            this.set_message(a_uids[i], 'deleted', false);\n        }\n\n        this.http_post('mark', post_data, lock);\n    };\n\n    this.flag_as_deleted = function (a_uids) {\n        var count = 0, r_uids = [],\n            post_data = this.selection_post_data({ _uid: a_uids, _flag: 'delete' }),\n            lock = this.display_message('markingmessage', 'loading'),\n            list = this.message_list,\n            rows = list ? list.rows : {},\n            display_next = this.check_display_next();\n\n        for (var i = 0, len = a_uids.length; i < len; i++) {\n            uid = a_uids[i];\n            if (rows[uid]) {\n                if (rows[uid].unread) {\n                    r_uids[r_uids.length] = uid;\n                }\n\n                if (this.env.skip_deleted) {\n                    count += this.update_thread(uid);\n                    list.remove_row(uid, display_next && i == list.get_selection(false).length - 1);\n                } else {\n                    this.set_message(uid, 'deleted', true);\n                }\n            }\n        }\n\n        // make sure there are no selected rows\n        if (this.env.skip_deleted && list) {\n            if (!display_next || !list.rowcount) {\n                list.clear_selection();\n            }\n            if (count < 0) {\n                post_data._count = (count * -1);\n            } else if (count > 0) {\n                // remove threads from the end of the list\n                this.delete_excessive_thread_rows();\n            }\n        }\n\n        // set of messages to mark as seen\n        if (r_uids.length) {\n            post_data._ruid = this.uids_to_list(r_uids);\n        }\n\n        if (this.env.skip_deleted && this.env.display_next && this.env.next_uid) {\n            post_data._next_uid = this.env.next_uid;\n        }\n\n        this.http_post('mark', post_data, lock);\n    };\n\n    // Flag as read without mark request (called from backend).\n    // The argument should be a coma-separated list of uids\n    this.flag_deleted_as_read = function (uids) {\n        var uid, i, len,\n            rows = this.message_list ? this.message_list.rows : {};\n\n        if (typeof uids === 'string') {\n            uids = uids.split(',');\n        }\n\n        for (i = 0, len = uids.length; i < len; i++) {\n            uid = uids[i];\n            if (rows[uid]) {\n                this.set_message(uid, 'unread', false);\n            }\n        }\n    };\n\n    // Converts array of message UIDs to comma-separated list for use in URL\n    // with select_all mode checking\n    this.uids_to_list = function (uids) {\n        if (this.select_all_mode) {\n            return '*';\n        }\n\n        // multi-folder list of uids cannot be passed as a string (#6845)\n        if (Array.isArray(uids) && (uids.length == 1 || String(uids[0]).indexOf('-') == -1)) {\n            uids = uids.join(',');\n        }\n\n        return uids;\n    };\n\n    // Sets title of the delete button\n    this.set_button_titles = function () {\n        var label = 'deletemessage';\n\n        if (!this.env.flag_for_deletion\n            && this.env.trash_mailbox && this.env.mailbox != this.env.trash_mailbox\n            && (!this.env.delete_junk || !this.env.junk_mailbox || this.env.mailbox != this.env.junk_mailbox)\n        ) {\n            label = 'movemessagetotrash';\n        }\n\n        this.set_alttext('delete', label);\n    };\n\n    // Initialize input element for list page jump\n    this.init_pagejumper = function (element) {\n        $(element).addClass('rcpagejumper')\n            .on('focus', function (e) {\n                // create and display popup with page selection\n                var i, html = '';\n\n                for (i = 1; i <= ref.env.pagecount; i++) {\n                    html += '<li>' + i + '</li>';\n                }\n\n                html = '<ul class=\"toolbarmenu menu\">' + html + '</ul>';\n\n                if (!ref.pagejump) {\n                    ref.pagejump = $('<div id=\"pagejump-selector\" class=\"popupmenu\"></div>')\n                        .appendTo(document.body)\n                        .on('click', 'li', function () {\n                            if (!ref.busy) {\n                                $(element).val($(this).text()).change();\n                            }\n                        });\n                }\n\n                if (ref.pagejump.data('count') != i) {\n                    ref.pagejump.html(html);\n                }\n\n                ref.pagejump.attr('rel', '#' + this.id).data('count', i);\n\n                // display page selector\n                ref.show_menu('pagejump-selector', true, e);\n            })\n            // keyboard navigation\n            .on('keydown keyup click', function (e) {\n                var current, selector = $('#pagejump-selector'),\n                    ul = $('ul', selector),\n                    list = $('li', ul),\n                    height = ul.height(),\n                    p = parseInt(this.value, 10);\n\n                if (e.which != 27 && e.which != 9 && e.which != 13 && !selector.is(':visible')) {\n                    return ref.show_menu('pagejump-selector', true, e);\n                }\n\n                if (e.type == 'keydown') {\n                    switch (e.which) {\n                        case 40: // arrow-down\n                            if (list.length > p) {\n                                this.value = (p += 1);\n                            }\n\n                            break;\n                        case 38: // arrow-up\n                            if (p > 1 && list.length > p - 1) {\n                                this.value = (p -= 1);\n                            }\n\n                            break;\n                        case 13: // enter\n                            return $(this).change();\n                        case 27: // esc\n                        case 9: // tab\n                            ref.hide_menu('pagejump-selector', e);\n                            return $(element).val(ref.env.current_page);\n                    }\n                }\n\n                $('li.selected', ul).removeClass('selected');\n\n                if ((current = $(list[p - 1])).length) {\n                    current.addClass('selected');\n                    $('#pagejump-selector').scrollTop(((ul.height() / list.length) * (p - 1)) - selector.height() / 2);\n                }\n            })\n            .on('change', function (e) {\n                // go to specified page\n                var p = parseInt(this.value, 10);\n                if (p && p != ref.env.current_page && !ref.busy) {\n                    ref.hide_menu('pagejump-selector', e);\n                    ref.list_page(p);\n                }\n            });\n    };\n\n    // Update page-jumper state on list updates\n    this.update_pagejumper = function () {\n        $('input.rcpagejumper').val(this.env.current_page).prop('disabled', this.env.pagecount < 2);\n    };\n\n    // Check for mailvelope API\n    this.check_mailvelope = function (action) {\n        if (window.mailvelope) {\n            this.mailvelope_load(action);\n        } else {\n            $(window).on('mailvelope', function () {\n                ref.mailvelope_load(action);\n            });\n        }\n    };\n\n    /**\n     * Triggger Mailvelope to add the current domain to the list of authorized\n     * domains (with API access).\n     */\n    this.mailvelope_enable = function () {\n        // Remove warning and enabling button if mailvelope was enabled.\n        window.addEventListener('mailvelope', function (ev) {\n            $('#mailvelope-warning').hide();\n        });\n        // Trigger Mailvelope.\n        $('body').append('<iframe style=\"display: none;\" src=\"https://api.mailvelope.com/authorize-domain/?api=true\" />');\n    };\n\n    // Load Mailvelope functionality (and initialize keyring if needed)\n    this.mailvelope_load = function (action) {\n        // Make the server code aware that this browser now knows about\n        // PGP/MIME (would otherwise only be recognized after the next login.\n        this.env.browser_capabilities.pgpmime = 1;\n        var keyring = this.env.mailvelope_main_keyring ? undefined : this.env.user_id,\n            fn = function (kr) {\n                ref.mailvelope_keyring = kr;\n                ref.mailvelope_init(action, kr);\n            };\n\n        mailvelope.getVersion().then(function (v) {\n            mailvelope.VERSION = v;\n            mailvelope.VERSION_MAJOR = Math.floor(parseFloat(v));\n            return mailvelope.getKeyring(keyring);\n        }).then(fn, function (err) {\n            if (keyring) {\n                // attempt to create a new keyring for this app/user\n                mailvelope.createKeyring(keyring).then(fn, function (err) {\n                    console.error(err);\n                });\n            } else {\n                console.error(err);\n            }\n        });\n    };\n\n    // Initializes Mailvelope editor or display container\n    this.mailvelope_init = function (action, keyring) {\n        if (!window.mailvelope) {\n            return;\n        }\n\n        if (action == 'show' || action == 'preview' || action == 'print') {\n            // decrypt text body\n            if (this.env.is_pgp_content) {\n                var data = $(this.env.is_pgp_content).text();\n                ref.mailvelope_display_container(this.env.is_pgp_content, data, keyring);\n            }\n            // load pgp/mime message and pass it to the mailvelope display container\n            else if (this.env.pgp_mime_part) {\n                var msgid = this.display_message('loadingdata', 'loading'),\n                    selector = this.env.pgp_mime_container;\n\n                $.ajax({\n                    type: 'GET',\n                    url: this.url('get', { _mbox: this.env.mailbox, _uid: this.env.uid, _part: this.env.pgp_mime_part }),\n                    error: function (o, status, err) {\n                        ref.http_error(o, status, err, msgid);\n                    },\n                    success: function (data) {\n                        ref.mailvelope_display_container(selector, data, keyring, msgid);\n                    },\n                });\n            }\n        } else if (action == 'compose') {\n            this.env.compose_commands.push('compose-encrypted');\n\n            var sign_supported = mailvelope.VERSION_MAJOR >= 2,\n                is_html = $('[name=\"_is_html\"]').val() > 0;\n\n            if (sign_supported) {\n                this.env.compose_commands.push('compose-encrypted-signed');\n            }\n\n            if (this.env.pgp_mime_message) {\n                // fetch PGP/Mime part and open load into Mailvelope editor\n                var lock = this.set_busy(true, this.get_label('loadingdata'));\n\n                $.ajax({\n                    type: 'GET',\n                    url: this.url('get', this.env.pgp_mime_message),\n                    error: function (o, status, err) {\n                        ref.http_error(o, status, err, lock);\n                        ref.enable_command('compose-encrypted', !is_html);\n                        if (sign_supported) {\n                            ref.enable_command('compose-encrypted-signed', !is_html);\n                        }\n                    },\n                    success: function (data) {\n                        ref.set_busy(false, null, lock);\n\n                        if (is_html) {\n                            ref.command('toggle-editor', { html: false, noconvert: true });\n                            $('#' + ref.env.composebody).val('');\n                        }\n\n                        ref.compose_encrypted({ quotedMail: data });\n                        ref.enable_command('compose-encrypted', true);\n                        ref.enable_command('compose-encrypted-signed', false);\n                    },\n                });\n            } else {\n                // enable encrypted compose toggle\n                this.enable_command('compose-encrypted', !is_html);\n                if (sign_supported) {\n                    this.enable_command('compose-encrypted-signed', !is_html);\n                }\n            }\n\n            // make sure to disable encryption button after toggling editor into HTML mode\n            this.addEventListener('actionafter', function (args) {\n                if (args.ret && args.action == 'toggle-editor') {\n                    ref.enable_command('compose-encrypted', !args.props.html);\n                    if (sign_supported) {\n                        ref.enable_command('compose-encrypted-signed', !args.props.html);\n                    }\n                }\n            });\n        } else if (action == 'edit-identity') {\n            ref.mailvelope_identity_keygen();\n        }\n    };\n\n    // Handler for the 'compose-encrypted-signed' command\n    this.compose_encrypted_signed = function (props) {\n        props = props || {};\n        props.signMsg = true;\n        this.compose_encrypted(props);\n    };\n\n    // Handler for the 'compose-encrypted' command\n    this.compose_encrypted = function (props) {\n        var options, container = $('#' + this.env.composebody).parent();\n\n        // remove Mailvelope editor if active\n        if (ref.mailvelope_editor) {\n            ref.mailvelope_editor = null;\n            ref.set_button('compose-encrypted', 'act');\n\n            container.removeClass('mailvelope').find('iframe:not([aria-hidden=true])').remove();\n            $('#' + ref.env.composebody).show();\n            $(\"[name='_pgpmime']\").remove();\n\n            // re-enable commands that operate on the compose body\n            ref.enable_command('toggle-editor', 'insert-response', true);\n            ref.enable_command('spellcheck', !!window.googie);\n            ref.enable_command('insert-sig', !!(ref.env.signatures && ref.env.identity && ref.env.signatures[ref.env.identity]));\n\n            ref.triggerEvent('compose-encrypted', { active: false });\n        }\n        // embed Mailvelope editor container\n        else {\n            if (this.spellcheck_state()) {\n                this.editor.spellcheck_stop();\n            }\n\n            if (props.quotedMail) {\n                options = { quotedMail: props.quotedMail, quotedMailIndent: false };\n            } else {\n                options = { predefinedText: $('#' + this.env.composebody).val() };\n            }\n\n            if (props.signMsg) {\n                options.signMsg = props.signMsg;\n            }\n\n            if (this.env.compose_mode == 'reply') {\n                options.quotedMailIndent = true;\n                options.quotedMailHeader = this.env.compose_reply_header;\n            }\n\n            mailvelope.createEditorContainer('#' + container.attr('id'), ref.mailvelope_keyring, options).then(function (editor) {\n                ref.mailvelope_editor = editor;\n                ref.set_button('compose-encrypted', 'sel');\n\n                container.addClass('mailvelope');\n                $('#' + ref.env.composebody).hide();\n\n                // disable commands that operate on the compose body\n                ref.enable_command('spellcheck', 'insert-sig', 'toggle-editor', 'insert-response', false);\n                ref.triggerEvent('compose-encrypted', { active: true });\n\n                if (!$.isEmptyObject(ref.env.attachments)) {\n                    // notify user if losing attachments\n                    if (ref.env.compose_mode != 'draft'\n                        || Object.keys(ref.env.attachments).length != 1\n                        || ref.env.attachments[Object.keys(ref.env.attachments)[0]].name != 'encrypted.asc'\n                    ) {\n                        ref.alert_dialog(ref.get_label('encryptnoattachments'));\n                    }\n\n                    $.each(ref.env.attachments, function (name, attach) {\n                        ref.remove_from_attachment_list(name);\n                    });\n                }\n            }, function (err) {\n                console.error(err);\n                console.log(options);\n            });\n        }\n    };\n\n    // Callback to replace the message body with the full armored\n    this.mailvelope_submit_messageform = function (draft, saveonly) {\n        var recipients = [];\n\n        // get recipients\n        $.each(['to', 'cc', 'bcc'], function (i, field) {\n            var pos, rcpt, val = $('[name=\"_' + field + '\"]').val().trim();\n            while (val.length && rcube_check_email(val, true)) {\n                rcpt = RegExp.$2.replace(/^<+/, '').replace(/>+$/, '');\n                recipients.push(rcpt);\n                val = val.substr(val.indexOf(rcpt) + rcpt.length + 1).replace(/^\\s*,\\s*/, '');\n            }\n        });\n\n        var isvalid = recipients.length > 0;\n\n        // check if we have keys for all recipients\n        ref.mailvelope_keyring.validKeyForAddress(recipients).then(function (status) {\n            var missing_keys = [];\n            $.each(status, function (k, v) {\n                if (v === false) {\n                    isvalid = false;\n                    missing_keys.push(k);\n                }\n            });\n\n            // list recipients with missing keys\n            if (!isvalid && missing_keys.length) {\n                // display dialog with missing keys\n                ref.simple_dialog(\n                    ref.get_label('nopubkeyfor').replace('$email', missing_keys.join(', '))\n                        + '<p>' + ref.get_label('searchpubkeyservers') + '</p>',\n                    'encryptedsendialog',\n                    function () {\n                        ref.mailvelope_search_pubkeys(missing_keys, function () {\n                            return true; // close dialog\n                        });\n                    },\n                    { button: 'search' }\n                );\n                return false;\n            }\n\n            if (!isvalid) {\n                if (!recipients.length) {\n                    ref.alert_dialog(ref.get_label('norecipientwarning'), function () {\n                        $(\"[name='_to']\").focus();\n                    });\n                }\n                return false;\n            }\n\n            // add sender identity to recipients to be able to decrypt our very own message\n            var senders = [], selected_sender = ref.env.identities[$(\"[name='_from'] option:selected\").val()];\n            $.each(ref.env.identities, function (k, sender) {\n                senders.push(sender.email);\n            });\n\n            ref.mailvelope_keyring.validKeyForAddress(senders).then(function (status) {\n                valid_sender = null;\n                $.each(status, function (k, v) {\n                    if (v !== false) {\n                        valid_sender = k;\n                        if (valid_sender == selected_sender) {\n                            return false; // break\n                        }\n                    }\n                });\n\n                if (!valid_sender) {\n                    if (!confirm(ref.get_label('nopubkeyforsender'))) {\n                        return false;\n                    }\n                }\n\n                recipients.push(valid_sender);\n\n                ref.mailvelope_editor.encrypt(recipients).then(function (armored) {\n                    // all checks passed, send message\n                    var form = ref.gui_objects.messageform,\n                        hidden = $(\"[name='_pgpmime']\", form),\n                        msgid = ref.set_busy(true, draft || saveonly ? 'savingmessage' : 'sendingmessage');\n\n                    form.target = ref.get_save_target(msgid);\n                    form._draft.value = draft ? '1' : '';\n                    form.action = ref.add_url(form.action, '_unlock', msgid);\n                    form.action = ref.add_url(form.action, '_framed', 1);\n\n                    if (saveonly) {\n                        form.action = ref.add_url(form.action, '_saveonly', 1);\n                    }\n\n                    // send pgp content via hidden field\n                    if (!hidden.length) {\n                        hidden = $('<input type=\"hidden\" name=\"_pgpmime\">').appendTo(form);\n                    }\n                    hidden.val(armored);\n\n                    form.submit();\n                }, function (err) {\n                    console.log(err);\n                }); // mailvelope_editor.encrypt()\n            }, function (err) {\n                console.error(err);\n            }); // mailvelope_keyring.validKeyForAddress(senders)\n        }, function (err) {\n            console.error(err);\n        }); // mailvelope_keyring.validKeyForAddress(recipients)\n\n        return false;\n    };\n\n    // Wrapper for the mailvelope.createDisplayContainer API call\n    this.mailvelope_display_container = function (selector, data, keyring, msgid) {\n        var error_handler = function (error) {\n            // remove mailvelope frame with the error message\n            $(selector + ' > iframe').remove();\n            ref.hide_message(msgid);\n            ref.display_message(error.message, 'error');\n        };\n\n        mailvelope.createDisplayContainer(selector, data, keyring, { senderAddress: this.env.sender }).then(function (status) {\n            if (status.error && status.error.message) {\n                return error_handler(status.error);\n            }\n\n            ref.hide_message(msgid);\n            $(selector).children().not('iframe').hide();\n            $(ref.gui_objects.messagebody).addClass('mailvelope');\n\n            // on success we can remove encrypted part from the attachments list\n            if (ref.env.pgp_mime_part) {\n                $('#attach' + ref.env.pgp_mime_part).remove();\n            }\n\n            setTimeout(function () {\n                $(window).resize();\n            }, 10);\n        }, error_handler);\n    };\n\n    // Subroutine to query keyservers for public keys\n    this.mailvelope_search_pubkeys = function (emails, resolve, import_handler) {\n        // query with publickey.js\n        var deferred = [],\n            pk = new PublicKey(this.env.keyservers),\n            lock = ref.display_message('', 'loading');\n\n        $.each(emails, function (i, email) {\n            var d = $.Deferred();\n            pk.search(email, function (results, errorCode) {\n                if (errorCode !== null) {\n                    // rejecting would make all fail\n                    // d.reject(email);\n                    d.resolve([email]);\n                } else {\n                    d.resolve([email].concat(results));\n                }\n            });\n            deferred.push(d);\n        });\n\n        $.when.apply($, deferred).then(function () {\n            var missing_keys = [],\n                key_selection = [];\n\n            // analyze results of all queries\n            $.each(arguments, function (i, result) {\n                var email = result.shift();\n                if (!result.length) {\n                    missing_keys.push(email);\n                } else {\n                    key_selection = key_selection.concat(result);\n                }\n            });\n\n            ref.hide_message(lock);\n            resolve(true);\n\n            // show key import dialog\n            if (key_selection.length) {\n                ref.mailvelope_key_import_dialog(key_selection, import_handler);\n            }\n            // some keys could not be found\n            if (missing_keys.length) {\n                ref.display_message(ref.get_label('nopubkeyfor').replace('$email', missing_keys.join(', ')), 'warning');\n            }\n        }).fail(function () {\n            console.error('Pubkey lookup failed with', arguments);\n            ref.hide_message(lock);\n            ref.display_message('pubkeysearcherror', 'error');\n            resolve(false);\n        });\n    };\n\n    // List the given public keys in a dialog with options to import\n    // them into the local Mailvelope keyring\n    this.mailvelope_key_import_dialog = function (candidates, import_handler) {\n        var ul = $('<div>').addClass('listing pgpkeyimport'),\n            get_classes = function (uid, init) {\n                var classes = [init];\n                if (uid.revoked) {\n                    classes.push('revoked');\n                }\n                if (uid.disabled) {\n                    classes.push('disabled');\n                }\n                if (uid.expired) {\n                    classes.push('expired');\n                }\n                return classes;\n            };\n\n        $.each(candidates, function (i, keyrec) {\n            var li = $('<div>').addClass(get_classes(keyrec, 'key'));\n\n            li.append($('<label>').addClass('keyid').text(ref.get_label('keyid')));\n            li.append($('<a>').text(keyrec.keyid.substr(-8).toUpperCase())\n                .attr({ href: keyrec.info, target: '_blank', tabindex: '-1' }));\n\n            li.append($('<label>').addClass('keylen').text(ref.get_label('keylength')));\n            li.append($('<span>').text(keyrec.keylen));\n\n            if (keyrec.expirationdate) {\n                li.append($('<label>').addClass('keyexpired').text(ref.get_label('keyexpired')));\n                li.append($('<span>').text(new Date(keyrec.expirationdate * 1000).toDateString()));\n            }\n\n            if (keyrec.revoked) {\n                li.append($('<span>').addClass('keyrevoked').text(ref.get_label('keyrevoked')));\n            }\n\n            var ul_ = $('<ul>').addClass('uids');\n            $.each(keyrec.uids, function (j, uid) {\n                ul_.append($('<li>').addClass(get_classes(uid, 'uid')).text(uid.uid));\n            });\n\n            li.append(ul_);\n            li.append($('<button>')\n                .attr('rel', keyrec.keyid)\n                .text(ref.get_label('import'))\n                .addClass('button import importkey')\n                .prop('disabled', keyrec.revoked || keyrec.disabled || keyrec.expired));\n\n            ul.append(li);\n        });\n\n        // display dialog with missing keys\n        ref.simple_dialog(\n            $('<div>').append($('<p>').html(ref.get_label('encryptpubkeysfound'))).append(ul),\n            'importpubkeys',\n            null,\n            { cancel_label: 'close', cancel_button: 'close' }\n        );\n\n        // delegate handler for import button clicks\n        ul.on('click', 'button.importkey', function () {\n            var btn = $(this),\n                keyid = btn.attr('rel'),\n                pk = new PublicKey(ref.env.keyservers),\n                lock = ref.display_message('', 'loading');\n\n            // fetch from keyserver and import to Mailvelope keyring\n            pk.get(keyid, function (armored, errorCode) {\n                ref.hide_message(lock);\n\n                if (errorCode) {\n                    ref.display_message('keyservererror', 'error');\n                    return;\n                }\n\n                if (import_handler) {\n                    import_handler(armored);\n                    return;\n                }\n\n                // import to keyring\n                ref.mailvelope_keyring.importPublicKey(armored).then(function (status) {\n                    if (status === 'REJECTED') {\n                        // ref.alert_dialog(ref.get_label('Key import was rejected'));\n                    } else {\n                        var $key = keyid.substr(-8).toUpperCase();\n                        btn.closest('.key').fadeOut();\n                        ref.display_message(ref.get_label('keyimportsuccess').replace('$key', $key), 'confirmation');\n                    }\n                }, function (err) {\n                    console.log(err);\n                });\n            });\n        });\n    };\n\n    // enable key management for identity\n    this.mailvelope_identity_keygen = function () {\n        var container = $(this.gui_objects.editform).find('.identity-encryption').first(),\n            identity_email = $(this.gui_objects.editform).find('.ff_email').val().trim();\n\n        if (!container.length || !identity_email || !this.mailvelope_keyring.createKeyGenContainer) {\n            return;\n        }\n\n        var key_fingerprint;\n        this.mailvelope_keyring.validKeyForAddress([identity_email])\n            .then(function (keys) {\n                var private_keys = [];\n\n                if (keys && keys[identity_email] && Array.isArray(keys[identity_email].keys)) {\n                    var checks = [];\n                    for (var j = 0; j < keys[identity_email].keys.length; j++) {\n                        checks.push((function (key) {\n                            return ref.mailvelope_keyring.hasPrivateKey(key.fingerprint)\n                                .then(function (found) {\n                                    if (found) {\n                                        private_keys.push(key);\n                                    }\n                                });\n                        })(keys[identity_email].keys[j]));\n                    }\n                    return Promise.all(checks)\n                        .then(function () {\n                            return private_keys;\n                        });\n                }\n\n                return private_keys;\n            })\n            .then(function (private_keys) {\n                var content = container.find('.identity-encryption-block').empty();\n                if (private_keys && private_keys.length) {\n                    // show private key information\n                    $('<p>').text(ref.get_label('encryptionprivkeysinmailvelope').replace('$nr', private_keys.length)).appendTo(content);\n                    var ul = $('<ul>').addClass('keylist').appendTo(content);\n                    $.each(private_keys, function (i, key) {\n                        $('<li>').appendTo(ul)\n                            .append($('<strong>').addClass('fingerprint').text(String(key.fingerprint).toUpperCase()))\n                            .append($('<span>').addClass('identity').text('<' + identity_email + '> '));\n                    });\n                } else {\n                    $('<p>').text(ref.get_label('encryptionnoprivkeysinmailvelope')).appendTo(content);\n                }\n\n                // show button to create a new key\n                $('<button>')\n                    .attr('type', 'button')\n                    .addClass('button create')\n                    .text(ref.get_label('encryptioncreatekey'))\n                    .appendTo(content)\n                    .on('click', function () {\n                        ref.mailvelope_show_keygen_container(content, identity_email);\n                    });\n                $('<span>').addClass('space').html('&nbsp;').appendTo(content);\n                $('<button>')\n                    .attr('type', 'button')\n                    .addClass('button settings')\n                    .text(ref.get_label('openmailvelopesettings'))\n                    .appendTo(content)\n                    .on('click', function () {\n                        ref.mailvelope_keyring.openSettings();\n                    });\n\n                container.show();\n                ref.triggerEvent('identity-encryption-show', { container: container });\n            })\n            .catch(function (err) {\n                console.error('Mailvelope keyring error', err);\n            });\n    };\n\n    // Start pgp key generation using Mailvelope\n    this.mailvelope_show_keygen_container = function (container, identity_email) {\n        var cid = new Date().getTime(),\n            user_id = { email: identity_email, fullName: $(ref.gui_objects.editform).find('.ff_name').val().trim() },\n            options = { userIds: [user_id], keySize: this.env.mailvelope_keysize };\n\n        $('<div>').attr('id', 'mailvelope-keygen-container-' + cid)\n            .css({ height: '245px', marginBottom: '10px' })\n            .appendTo(container.empty());\n\n        this.mailvelope_keyring.createKeyGenContainer('#mailvelope-keygen-container-' + cid, options)\n            .then(function (generator) {\n                if (generator instanceof Error) {\n                    throw generator;\n                }\n\n                // append button to start key generation\n                $('<button>')\n                    .attr('type', 'button')\n                    .addClass('button mainaction generate')\n                    .text(ref.get_label('generate'))\n                    .appendTo(container)\n                    .on('click', function () {\n                        var btn = $(this).prop('disabled', true);\n                        generator.generate()\n                            .then(function (result) {\n                                if (typeof result === 'string' && result.indexOf('BEGIN PGP') > 0) {\n                                    ref.display_message(ref.get_label('keypaircreatesuccess').replace('$identity', identity_email), 'confirmation');\n                                    // reset keygen view\n                                    ref.mailvelope_identity_keygen();\n                                }\n                            })\n                            .catch(function (err) {\n                                debugger;\n                                ref.display_message(err.message || 'errortitle', 'error');\n                                btn.prop('disabled', false);\n                            });\n                    });\n\n                $('<span>').addClass('space').html('&nbsp;').appendTo(container);\n\n                $('<button>')\n                    .attr('type', 'button')\n                    .addClass('button cancel')\n                    .text(ref.get_label('cancel'))\n                    .appendTo(container)\n                    .on('click', function () {\n                        ref.mailvelope_identity_keygen();\n                    });\n\n                ref.triggerEvent('identity-encryption-update', { container: container });\n            })\n            .catch(function (err) {\n                ref.display_message('errortitle', 'error');\n                // start over\n                ref.mailvelope_identity_keygen();\n            });\n    };\n\n    this.mdn_request_dialog = function (uid, mailbox) {\n        var props = {\n                action: 'mark',\n                data: { _uid: uid, _mbox: mailbox, _flag: 'mdnsent' },\n            },\n            buttons = [\n                {\n                    text: this.get_label('send'),\n                    class: 'mainaction send',\n                    click: function (e, ui, dialog) {\n                        props.action = 'sendmdn';\n                        (ref.is_framed() ? parent.$ : $)(dialog || this).dialog('close');\n                    },\n                },\n                {\n                    text: this.get_label('ignore'),\n                    class: 'cancel',\n                    click: function (e, ui, dialog) {\n                        (ref.is_framed() ? parent.$ : $)(dialog || this).dialog('close');\n                    },\n                },\n            ],\n            mdn_func = function (event, ui) {\n                ref.http_post(props.action, props.data);\n                // from default close function\n                $(this).remove();\n            };\n\n        if (this.env.mdn_request_save) {\n            buttons.unshift({\n                text: this.get_label('sendalwaysto').replace('$email', this.env.mdn_request_sender.mailto),\n                class: 'mainaction send',\n                click: function (e, ui, dialog) {\n                    props.data._save = ref.env.mdn_request_save;\n                    props.data._address = ref.env.mdn_request_sender.string;\n                    $(e.target).next().click();\n                },\n            });\n        }\n\n        this.show_popup_dialog(this.get_label('mdnrequest'), this.get_label('sendreceipt'), buttons, { close: mdn_func });\n    };\n\n\n    /*********************************************************/\n    /*                mailbox folders methods                */\n    /*********************************************************/\n\n    this.expunge_mailbox = function (mbox) {\n        var lock, post_data = { _mbox: mbox };\n\n        // lock interface if it's the active mailbox\n        if (mbox == this.env.mailbox) {\n            lock = this.set_busy(true, 'loading');\n            post_data._reload = 1;\n\n            if (this.env.search_request) {\n                post_data._search = this.env.search_request;\n            }\n        }\n\n        // send request to server\n        this.http_post('expunge', post_data, lock);\n    };\n\n    this.purge_mailbox = function (mbox) {\n        this.confirm_dialog(this.get_label('purgefolderconfirm'), 'delete', function () {\n            var lock, post_data = { _mbox: mbox };\n\n            // lock interface if it's the active mailbox\n            if (mbox == ref.env.mailbox) {\n                lock = ref.set_busy(true, 'loading');\n                post_data._reload = 1;\n            }\n\n            // send request to server\n            ref.http_post('purge', post_data, lock);\n        });\n\n        return false;\n    };\n\n    // Mark all messages as read in:\n    //   - selected folder (mode=cur)\n    //   - selected folder and its subfolders (mode=sub)\n    //   - all folders (mode=all)\n    this.mark_all_read = function (mbox, mode) {\n        var state, content, nodes = [],\n            list = this.message_list,\n            folder = mbox || this.env.mailbox,\n            post_data = {\n                _uid: '*', _flag: 'read', _mbox: folder, _folders: mode,\n            };\n\n        if (typeof mode !== 'string') {\n            state = this.mark_all_read_state(folder);\n            if (!state) {\n                return;\n            }\n\n            if (state > 1) {\n                // build content of the dialog\n                $.each({ cur: 1, sub: 2, all: 4 }, function (i, v) {\n                    var id = 'readallmode' + i,\n                        label = $('<label>').attr('for', id).text(ref.get_label('folders-' + i)),\n                        input = $('<input>').attr({\n                            type: 'radio', value: i, name: 'mode', id: id, disabled: !(state & v),\n                        });\n\n                    nodes.push($('<li>').append([input, label]));\n                });\n\n                content = $('<ul class=\"proplist\">').append(nodes);\n                $('input:not([disabled])', content).first().attr('checked', true);\n\n                this.simple_dialog(content, 'markallread',\n                    function () {\n                        ref.mark_all_read(folder, $('input:checked', content).val());\n                        return true;\n                    },\n                    { button: 'mark', button_class: 'save' }\n                );\n\n                return;\n            }\n\n            post_data._folders = 'cur'; // only current folder has unread messages\n        }\n\n        // mark messages on the list\n        $.each(list ? list.rows : [], function (uid, row) {\n            if (!row.unread) {\n                return;\n            }\n\n            var mbox = ref.env.messages[uid].mbox;\n            if (mode == 'all' || mbox == ref.env.mailbox\n                || (mode == 'sub' && mbox.startsWith(ref.env.mailbox + ref.env.delimiter))\n            ) {\n                ref.set_message(uid, 'unread', false);\n            }\n        });\n\n        // send the request\n        this.http_post('mark', post_data, this.display_message('markingmessage', 'loading'));\n    };\n\n    // Enable/disable mark-all-read action depending on folders state\n    this.mark_all_read_state = function (mbox) {\n        var state = 0,\n            li = this.treelist.get_item(mbox || this.env.mailbox),\n            folder_item = $(li).is('.unread') ? 1 : 0,\n            subfolder_items = $('li.unread', li).length,\n            all_items = $('li.unread', ref.gui_objects.folderlist).length;\n\n        state += folder_item;\n        state += subfolder_items ? 2 : 0;\n        state += all_items > folder_item + subfolder_items ? 4 : 0;\n\n        this.enable_command('mark-all-read', state > 0);\n\n        return state;\n    };\n\n    // Display \"bounce message\" dialog\n    this.bounce = function (props, obj, event) {\n        // get message uid and folder\n        var uid = this.get_single_uid(),\n            url = this.url('bounce', { _framed: 1, _uid: uid, _mbox: this.get_message_mailbox(uid) }),\n            dialog = $('<iframe>').attr('src', url),\n            get_form = function () {\n                var rc = $('iframe', dialog)[0].contentWindow.rcmail;\n                return { rc: rc, form: rc.gui_objects.messageform };\n            },\n            post_func = function () {\n                var post = {}, form = get_form();\n\n                $.each($(form.form).serializeArray(), function () {\n                    post[this.name] = this.value;\n                });\n\n                post._uid = form.rc.env.uid;\n                post._mbox = form.rc.env.mailbox;\n                delete post._action;\n                delete post._task;\n\n                if (post._to || post._cc || post._bcc) {\n                    ref.http_post('bounce', post, ref.set_busy(true, 'sendingmessage'));\n                    dialog.dialog('close');\n                }\n            },\n            submit_func = function () {\n                var form = get_form();\n\n                if (typeof form.form !== 'object') {\n                    return false;\n                }\n\n                if (!form.rc.check_compose_address_fields(post_func, form.form)) {\n                    return false;\n                }\n\n                return post_func();\n            };\n\n        this.hide_menu('forwardmenu', event);\n\n        dialog = this.simple_dialog(dialog, 'bouncemsg', submit_func, {\n            button: 'bounce',\n            width: 400,\n            height: 300,\n        });\n\n        return true;\n    };\n\n\n    /*********************************************************/\n    /*                 message compose methods               */\n    /*********************************************************/\n\n    this.open_compose_step = function (p) {\n        var url = this.url('mail/compose', p);\n\n        // open new compose window\n        if (this.env.compose_extwin && !this.env.extwin) {\n            this.open_window(url);\n        } else {\n            this.redirect(url);\n            if (this.env.extwin) {\n                window.resizeTo(Math.max(this.env.popup_width, $(window).width()), $(window).height() + 24);\n            }\n        }\n    };\n\n    // init message compose form: set focus and eventhandlers\n    this.init_messageform = function () {\n        if (!this.gui_objects.messageform) {\n            return false;\n        }\n\n        var elem, pos,\n            input_from = $(\"[name='_from']\"),\n            input_to = $(\"[name='_to']\"),\n            input_subject = $(\"[name='_subject']\"),\n            input_message = $(\"[name='_message']\").get(0),\n            html_mode = $(\"[name='_is_html']\").val() == '1',\n            opener_rc = this.opener();\n\n        // close compose step in opener\n        if (opener_rc && opener_rc.env.action == 'compose') {\n            setTimeout(function () {\n                if (opener.history.length > 1) {\n                    opener.history.back();\n                } else {\n                    opener_rc.redirect(opener_rc.get_task_url('mail'));\n                }\n            }, 100);\n\n            this.env.opened_extwin = true;\n        }\n\n        if (!html_mode) {\n            // On Back button Chrome will overwrite textarea with old content\n            // causing e.g. the same signature is added twice (#5809)\n            if (input_message.value && input_message.defaultValue !== undefined) {\n                input_message.value = input_message.defaultValue;\n            }\n\n            pos = this.env.top_posting && this.env.compose_mode ? 0 : input_message.value.length;\n\n            // add signature according to selected identity\n            // if we have HTML editor, signature is added in a callback\n            if (input_from.prop('type') == 'select-one') {\n                // for some reason the caret initially is not at pos=0 in Firefox 51 (#5628)\n                this.set_caret_pos(input_message, 0);\n                this.change_identity(input_from[0]);\n            }\n\n            // set initial cursor position\n            this.set_caret_pos(input_message, pos);\n\n            // scroll to the bottom of the textarea (#1490114)\n            if (pos) {\n                $(input_message).scrollTop(input_message.scrollHeight);\n            }\n        }\n\n        // check for locally stored compose data\n        if (this.env.save_localstorage) {\n            this.compose_restore_dialog(0, html_mode);\n        }\n\n        if (input_to.val() == '') {\n            elem = input_to;\n        } else if (input_subject.val() == '') {\n            elem = input_subject;\n        } else if (input_message) {\n            elem = input_message;\n        }\n\n        this.env.compose_focus_elem = this.init_messageform_inputs(elem);\n\n        // get summary of all field values\n        this.compose_field_hash(true);\n\n        // start the auto-save timer\n        this.auto_save_start();\n    };\n\n    // Init autocomplete events on compose form inputs\n    this.init_messageform_inputs = function (focused) {\n        var i,\n            input_to = $(\"[name='_to']\"),\n            ac_fields = ['cc', 'bcc', 'replyto', 'followupto'];\n\n        // init live search events\n        this.init_address_input_events(input_to);\n        for (i in ac_fields) {\n            this.init_address_input_events($(\"[name='_\" + ac_fields[i] + \"']\"));\n        }\n\n        if (!focused) {\n            focused = input_to;\n        }\n\n        // focus first empty element (and return it)\n        return $(focused).focus().get(0);\n    };\n\n    this.compose_restore_dialog = function (j, html_mode) {\n        var i, key, formdata, index = this.local_storage_get_item('compose.index', []);\n\n        var show_next = function (i) {\n            if (++i < index.length) {\n                ref.compose_restore_dialog(i, html_mode);\n            }\n        };\n\n        for (i = j || 0; i < index.length; i++) {\n            key = index[i];\n            formdata = this.local_storage_get_item('compose.' + key, null, true);\n            if (!formdata) {\n                continue;\n            }\n            // restore saved copy of current compose_id\n            if (formdata.changed && key == this.env.compose_id) {\n                this.restore_compose_form(key, html_mode);\n                break;\n            }\n            // skip records from 'other' drafts\n            if (this.env.draft_id && formdata.draft_id && formdata.draft_id != this.env.draft_id) {\n                continue;\n            }\n            // skip records on reply\n            if (this.env.reply_msgid && formdata.reply_msgid != this.env.reply_msgid) {\n                continue;\n            }\n            // show dialog asking to restore the message\n            if (formdata.changed && formdata.session != this.env.session_id) {\n                this.show_popup_dialog(\n                    this.get_label('restoresavedcomposedata')\n                        .replace('$date', new Date(formdata.changed).toLocaleString())\n                        .replace('$subject', formdata._subject)\n                        .replace(/\\n/g, '<br/>'),\n                    this.get_label('restoremessage'),\n                    [{\n                        text: this.get_label('restore'),\n                        class: 'mainaction restore',\n                        click: function () {\n                            ref.restore_compose_form(key, html_mode);\n                            ref.remove_compose_data(key); // remove old copy\n                            ref.save_compose_form_local(); // save under current compose_id\n                            $(this).dialog('close');\n                        },\n                    },\n                    {\n                        text: this.get_label('delete'),\n                        class: 'delete',\n                        click: function () {\n                            ref.remove_compose_data(key);\n                            $(this).dialog('close');\n                            show_next(i);\n                        },\n                    },\n                    {\n                        text: this.get_label('ignore'),\n                        class: 'cancel',\n                        click: function () {\n                            $(this).dialog('close');\n                            show_next(i);\n                        },\n                    }]\n                );\n                break;\n            }\n        }\n    };\n\n    this.init_address_input_events = function (obj, props) {\n        // configure parallel autocompletion\n        if (!props && this.env.autocomplete_threads > 0) {\n            props = {\n                threads: this.env.autocomplete_threads,\n                sources: this.env.autocomplete_sources,\n            };\n        }\n\n        obj.keydown(function (e) {\n            return ref.ksearch_keydown(e, this, props);\n        })\n            .attr({\n                autocomplete: 'off', 'aria-autocomplete': 'list', 'aria-expanded': 'false', role: 'combobox',\n            });\n\n        var callback = function (e) {\n            if (ref.ksearch_pane && e.target === ref.ksearch_pane.get(0)) {\n                return;\n            }\n            ref.ksearch_hide();\n        };\n\n        // hide the popup on any click\n        $(document).on('click', callback);\n        // and on scroll (that cannot be jQuery.on())\n        document.addEventListener('scroll', callback, true);\n    };\n\n    this.submit_messageform = function (draft, saveonly) {\n        var form = this.gui_objects.messageform;\n\n        if (!form) {\n            return;\n        }\n\n        // the message has been sent but not saved, ask the user what to do\n        if (!saveonly && this.env.is_sent) {\n            return this.simple_dialog(this.get_label('messageissent'), '', // TODO: dialog title\n                function () {\n                    ref.submit_messageform(false, true);\n                    return true;\n                }\n            );\n        }\n\n        // delegate sending to Mailvelope routine\n        if (this.mailvelope_editor) {\n            return this.mailvelope_submit_messageform(draft, saveonly);\n        }\n\n        // all checks passed, send message\n        var msgid = this.set_busy(true, draft || saveonly ? 'savingmessage' : 'sendingmessage'),\n            lang = this.spellcheck_lang(),\n            files = [];\n\n        // send files list\n        $('li', this.gui_objects.attachmentlist).each(function () {\n            files.push(this.id.replace(/^rcmfile/, ''));\n        });\n        $('[name=\"_attachments\"]', form).val(files.join());\n\n        form.target = this.get_save_target(msgid);\n        form._draft.value = draft ? '1' : '';\n        form.action = this.add_url(form.action, '_unlock', msgid);\n        form.action = this.add_url(form.action, '_framed', 1);\n\n        if (lang) {\n            form.action = this.add_url(form.action, '_lang', lang);\n        }\n        if (saveonly) {\n            form.action = this.add_url(form.action, '_saveonly', 1);\n        }\n\n        // register timer to notify about connection timeout\n        this.submit_timer = setTimeout(function () {\n            ref.set_busy(false, null, msgid);\n            ref.display_message('requesttimedout', 'error');\n        }, this.env.request_timeout * 1000);\n\n        form.submit();\n    };\n\n    this.compose_recipient_select = function (list) {\n        var id, n, recipients = 0, selection = list.get_selection();\n        for (n = 0; n < selection.length; n++) {\n            id = selection[n];\n            if (this.env.contactdata[id]) {\n                recipients++;\n            }\n        }\n        this.enable_command('add-recipient', recipients);\n    };\n\n    this.compose_add_recipient = function (field) {\n        // find last focused field name\n        if (!field) {\n            field = $(this.env.focused_field).filter(':visible');\n            field = field.length ? field.attr('id').replace('_', '') : 'to';\n        }\n\n        var recipients = [], input = $('#_' + field), selection = this.contact_list.get_selection();\n\n        if (this.contact_list && selection.length) {\n            var data, name, n, id;\n            for (n = 0; n < selection.length; n++) {\n                if ((id = selection[n]) && (data = this.env.contactdata[id])) {\n                    name = data.name || data;\n\n                    // group is added, expand it\n                    if (id.charAt(0) == 'E' && input.length) {\n                        // We wrap the group name with invisible markers to prevent from problems with group expanding (#7569)\n                        name = '\\u200B' + name + '\\u200B';\n                        var gid = id.substr(1);\n                        this.group2expand[gid] = { name: name, input: input.get(0) };\n                        this.http_request('group-expand', { _source: data.source || this.env.source, _gid: gid }, false);\n                    }\n\n                    recipients.push(name);\n                }\n            }\n        }\n\n        if (recipients.length && input.length) {\n            var oldval = input.val();\n            if (oldval && !/[,;]\\s*$/.test(oldval)) {\n                oldval += ', ';\n            }\n            input.val(oldval + recipients.join(', ') + ', ').change();\n            this.triggerEvent('add-recipient', { field: field, recipients: recipients });\n        }\n\n        return recipients.length;\n    };\n\n    // Checks the input fields before sending a message\n    this.check_compose_input = function (cmd) {\n        var key,\n            input_subject = $(\"[name='_subject']\");\n\n        // check if all files has been uploaded\n        for (key in this.env.attachments) {\n            if (typeof this.env.attachments[key] === 'object' && !this.env.attachments[key].complete) {\n                this.alert_dialog(this.get_label('notuploadedwarning'));\n                return false;\n            }\n        }\n\n        // display localized warning for missing subject\n        if (!this.env.nosubject_warned && input_subject.val() == '') {\n            var dialog,\n                prompt_value = $('<input>').attr({ type: 'text', size: 40, 'data-submit': 'true' }),\n                myprompt = $('<div class=\"prompt\">')\n                    .append($('<p class=\"message\">').text(this.get_label('nosubjectwarning')))\n                    .append(prompt_value),\n                save_func = function () {\n                    input_subject.val(prompt_value.val());\n                    dialog.dialog('close');\n                    if (ref.check_compose_input(cmd)) {\n                        ref.command(cmd, { nocheck: true });\n                    } // repeat command which triggered this\n                };\n\n            dialog = this.show_popup_dialog(\n                myprompt,\n                this.get_label('nosubjecttitle'),\n                [{\n                    text: this.get_label('sendmessage'),\n                    class: 'mainaction send',\n                    click: function () {\n                        save_func();\n                    },\n                }, {\n                    text: this.get_label('cancel'),\n                    class: 'cancel',\n                    click: function () {\n                        input_subject.focus();\n                        dialog.dialog('close');\n                    },\n                }],\n                { dialogClass: 'warning' }\n            );\n\n            this.env.nosubject_warned = true;\n            return false;\n        }\n\n        // check for empty body (only possible if not mailvelope encrypted)\n        if (!this.mailvelope_editor && !this.editor.get_content() && !confirm(this.get_label('nobodywarning'))) {\n            this.editor.focus();\n            return false;\n        }\n\n        if (!this.check_compose_address_fields(cmd)) {\n            return false;\n        }\n\n        // move body from html editor to textarea (just to be sure, #1485860)\n        this.editor.save();\n\n        return true;\n    };\n\n    this.check_compose_address_fields = function (cmd, form) {\n        if (!form) {\n            form = window.document;\n        }\n\n        // check input fields\n        var key, recipients, dialog,\n            limit = this.env.max_disclosed_recipients,\n            input_to = $(\"[name='_to']\", form),\n            input_cc = $(\"[name='_cc']\", form),\n            input_bcc = $(\"[name='_bcc']\", form),\n            input_from = $(\"[name='_from']\", form),\n            get_recipients = function (fields) {\n                fields = $.map(fields, function (v) {\n                    v = v.val().trim();\n                    return v.length ? v : null;\n                });\n                return fields.join(',').replace(/^[\\s,;]+/, '').replace(/[\\s,;]+$/, '');\n            };\n\n        // check sender (if have no identities)\n        if (input_from.prop('type') == 'text' && !rcube_check_email(input_from.val(), true)) {\n            this.alert_dialog(this.get_label('nosenderwarning'), function () {\n                input_from.focus();\n            });\n            return false;\n        }\n\n        // check for empty recipient\n        if (!rcube_check_email(get_recipients([input_to, input_cc, input_bcc]), true)) {\n            this.alert_dialog(this.get_label('norecipientwarning'), function () {\n                input_to.focus();\n            });\n            return false;\n        }\n\n        // check disclosed recipients limit\n        if (limit && !this.env.disclosed_recipients_warned\n            && rcube_check_email(recipients = get_recipients([input_to, input_cc]), true, true) > limit\n        ) {\n            var save_func = function (move_to_bcc) {\n                if (move_to_bcc) {\n                    var bcc = input_bcc.val();\n                    input_bcc.val((bcc ? (bcc + ', ') : '') + recipients).change();\n                    input_to.val('').change();\n                    input_cc.val('').change();\n                }\n\n                dialog.dialog('close');\n\n                if (typeof cmd === 'function') {\n                    cmd();\n                } else if (cmd) {\n                    ref.command(cmd, { nocheck: true });\n                } // repeat command which triggered this\n            };\n\n            dialog = this.show_popup_dialog(\n                this.get_label('disclosedrecipwarning'),\n                this.get_label('disclosedreciptitle'),\n                [\n                    {\n                        text: this.get_label('sendmessage'),\n                        click: function () {\n                            save_func(false);\n                        },\n                        class: 'mainaction',\n                    },\n                    {\n                        text: this.get_label('bccinstead'),\n                        click: function () {\n                            save_func(true);\n                        },\n                    },\n                    {\n                        text: this.get_label('cancel'),\n                        click: function () {\n                            dialog.dialog('close');\n                        },\n                        class: 'cancel',\n                    },\n                ],\n                { dialogClass: 'warning' }\n            );\n\n            this.env.disclosed_recipients_warned = true;\n            return false;\n        }\n\n        return true;\n    };\n\n    this.toggle_editor = function (props, obj, e) {\n        // @todo: this should work also with many editors on page\n        var mode, result = this.editor.toggle(props.html, props.noconvert || false),\n            control = $('#' + this.editor.id).data('control') || $(e ? e.target : []);\n\n        if (result) {\n            mode = props.html ? 'html' : 'plain';\n        } else {\n            mode = props.html ? 'plain' : 'html';\n        }\n\n        // update internal format flag\n        $(\"[name='_is_html']\").val(mode == 'html' ? 1 : 0);\n\n        if (control.is('[type=checkbox]')) {\n            control.prop('checked', mode == 'html');\n        } else {\n            control.val(mode);\n        }\n\n        return result;\n    };\n\n    // Inserts a predefined response to the compose editor\n    this.insert_response = function (response) {\n        if (typeof response === 'object') {\n            var replace = {};\n            replace[response.is_html ? 'html' : 'text'] = response.data;\n\n            this.editor.replace(replace);\n            this.display_message('responseinserted', 'confirmation');\n        } else {\n            var lock = this.display_message('', 'loading');\n            this.http_get('settings/response-get', { _id: response, _is_html: this.editor.is_html() ? 1 : 0 }, lock);\n        }\n    };\n\n    // Updates spellchecker buttons on state change\n    this.spellcheck_state = function () {\n        var active = this.editor.spellcheck_state();\n\n        $.each(this.buttons.spellcheck || [], function (i, v) {\n            $('#' + v.id)[active ? 'addClass' : 'removeClass']('selected');\n        });\n\n        return active;\n    };\n\n    // Get selected language\n    this.spellcheck_lang = function () {\n        return this.editor.get_language();\n    };\n\n    this.spellcheck_lang_set = function (lang) {\n        this.editor.set_language(lang);\n    };\n\n    // Resume spellchecking, highlight provided misspellings without new ajax request\n    this.spellcheck_resume = function (data) {\n        this.editor.spellcheck_resume(data);\n    };\n\n    this.set_draft_id = function (id) {\n        if (id && id != this.env.draft_id) {\n            var filter = { task: 'mail', action: '' },\n                rc = this.opener(false, filter) || this.opener(true, filter);\n\n            // refresh the drafts folder in the opener window\n            if (rc && rc.env.mailbox == this.env.drafts_mailbox) {\n                rc.command('checkmail');\n            }\n\n            this.env.draft_id = id;\n            $(\"[name='_draft_saveid']\").val(id);\n        }\n\n        // always remove local copy upon saving as draft\n        this.remove_compose_data(this.env.compose_id);\n        this.compose_skip_unsavedcheck = false;\n    };\n\n    // Create (attach) 'savetarget' iframe before use\n    this.get_save_target = function (unlock) {\n        // Removing the frame on load/error to workaround issues with window history\n        this.dummy_iframe('savetarget', 'javascript:false;')\n            .on('load error', function () {\n                // catch invalid/error response from server and unlock the UI (#7494, #7488, #7522)\n                if (unlock && $(this).contents().find('meta[name=\"generator\"][content=\"Roundcube\"]').length == 0) {\n                    ref.iframe_loaded(unlock);\n                    ref.display_message('connerror', 'error');\n                }\n\n                $(this).remove();\n            });\n\n        return 'savetarget';\n    };\n\n    this.auto_save_start = function () {\n        if (this.env.draft_autosave) {\n            this.save_timer = setTimeout(function () {\n                ref.command('savedraft');\n            }, this.env.draft_autosave * 1000);\n        }\n\n        // save compose form content to local storage every 5 seconds\n        if (!this.local_save_timer && window.localStorage && this.env.save_localstorage) {\n            // track typing activity and only save on changes\n            this.compose_type_activity = this.compose_type_activity_last = 0;\n            $(document).keypress(function (e) {\n                ref.compose_type_activity++;\n            });\n\n            this.local_save_timer = setInterval(function () {\n                if (ref.compose_type_activity > ref.compose_type_activity_last) {\n                    ref.save_compose_form_local();\n                    ref.compose_type_activity_last = ref.compose_type_activity;\n                }\n            }, 5000);\n\n            $(window).on('pagehide', function () {\n                // remove copy from local storage if compose screen is left after warning\n                if (!ref.env.server_error) {\n                    ref.remove_compose_data(ref.env.compose_id);\n                }\n            });\n        }\n\n        // check for unsaved changes before leaving the compose page\n        if (!window.onbeforeunload) {\n            window.onbeforeunload = function () {\n                if (!ref.compose_skip_unsavedcheck && ref.cmp_hash != ref.compose_field_hash()) {\n                    return ref.get_label('notsentwarning');\n                }\n            };\n        }\n\n        // Unlock interface now that saving is complete\n        this.busy = false;\n    };\n\n    this.compose_field_hash = function (save) {\n        // check input fields\n        var i, id, val, str = '', hash_fields = ['to', 'cc', 'bcc', 'subject'];\n\n        for (i = 0; i < hash_fields.length; i++) {\n            if (val = $('[name=\"_' + hash_fields[i] + '\"]').val()) {\n                str += val + ':';\n            }\n        }\n\n        str += this.editor.get_content({ refresh: false });\n\n        for (id in this.env.attachments) {\n            str += id;\n        }\n\n        // we can't detect changes in the Mailvelope editor so assume it changed\n        if (this.mailvelope_editor) {\n            str += ';' + new Date().getTime();\n        }\n\n        if (save) {\n            this.cmp_hash = str;\n        }\n\n        return str;\n    };\n\n    // store the contents of the compose form to localstorage\n    this.save_compose_form_local = function () {\n        // feature is disabled\n        if (!this.env.save_localstorage) {\n            return;\n        }\n\n        var ed, empty = true,\n            formdata = { session: this.env.session_id, changed: new Date().getTime() };\n\n        // get fresh content from editor\n        this.editor.save();\n\n        if (this.env.draft_id) {\n            formdata.draft_id = this.env.draft_id;\n        }\n\n        if (this.env.reply_msgid) {\n            formdata.reply_msgid = this.env.reply_msgid;\n        }\n\n        $('input, select, textarea', this.gui_objects.messageform).each(function (i, elem) {\n            switch (elem.tagName.toLowerCase()) {\n                case 'input':\n                    if (elem.type == 'button' || elem.type == 'submit' || (elem.type == 'hidden' && elem.name != '_is_html')) {\n                        break;\n                    }\n                    formdata[elem.name] = elem.type != 'checkbox' || elem.checked ? $(elem).val() : '';\n\n                    if (formdata[elem.name] != '' && elem.type != 'hidden') {\n                        empty = false;\n                    }\n\n                    break;\n                case 'select':\n                    formdata[elem.name] = $('option:checked', elem).val();\n                    break;\n                default:\n                    formdata[elem.name] = $(elem).val();\n                    if (formdata[elem.name] != '') {\n                        empty = false;\n                    }\n            }\n        });\n\n        if (!empty) {\n            var index = this.local_storage_get_item('compose.index', []),\n                key = this.env.compose_id;\n\n            if ($.inArray(key, index) < 0) {\n                index.push(key);\n            }\n\n            this.local_storage_set_item('compose.' + key, formdata, true);\n            this.local_storage_set_item('compose.index', index);\n        }\n    };\n\n    // write stored compose data back to form\n    this.restore_compose_form = function (key, html_mode) {\n        var ed, formdata = this.local_storage_get_item('compose.' + key, true);\n\n        if (formdata && typeof formdata === 'object') {\n            $.each(formdata, function (k, value) {\n                if (k[0] == '_') {\n                    var elem = $('[name=' + k + ']');\n                    if (elem[0] && elem[0].type == 'checkbox') {\n                        elem.prop('checked', value != '');\n                    } else {\n                        elem.val(value).change();\n                    }\n                }\n            });\n\n            // initialize HTML editor\n            if ((formdata._is_html == '1' && !html_mode) || (formdata._is_html != '1' && html_mode)) {\n                this.command('toggle-editor', { id: this.env.composebody, html: !html_mode, noconvert: true });\n            }\n        }\n    };\n\n    // Remove stored compose data from localStorage\n    this.remove_compose_data = function (key) {\n        var index = this.local_storage_get_item('compose.index', []);\n\n        if ($.inArray(key, index) >= 0) {\n            this.local_storage_remove_item('compose.' + key);\n            this.local_storage_set_item('compose.index', $.grep(index, function (val, i) {\n                return val != key;\n            }));\n        }\n    };\n\n    // Clear all stored compose data of this user\n    this.clear_compose_data = function () {\n        var i, index = this.local_storage_get_item('compose.index', []);\n\n        for (i = 0; i < index.length; i++) {\n            this.local_storage_remove_item('compose.' + index[i]);\n        }\n\n        this.local_storage_remove_item('compose.index');\n    };\n\n    this.change_identity = function (obj, show) {\n        if (!obj || !obj.options) {\n            return false;\n        }\n\n        var id = $(obj).val(),\n            got_sig = this.env.signatures && this.env.signatures[id],\n            sig = this.env.identity,\n            show_sig = show ? show : this.env.show_sig;\n\n        // enable manual signature insert\n        if (got_sig) {\n            this.enable_command('insert-sig', true);\n            this.env.compose_commands.push('insert-sig');\n            got_sig = true;\n        } else {\n            this.enable_command('insert-sig', false);\n        }\n\n        // first function execution\n        if (!this.env.identities_initialized) {\n            this.env.identities_initialized = true;\n            if (this.env.show_sig_later) {\n                this.env.show_sig = true;\n            }\n            if (this.env.opened_extwin) {\n                return;\n            }\n        }\n\n        // update reply-to/bcc fields with addresses defined in identities\n        $.each(['replyto', 'bcc'], function () {\n            var rx, key = this,\n                old_val = sig && ref.env.identities[sig] ? ref.env.identities[sig][key] : '',\n                new_val = id && ref.env.identities[id] ? ref.env.identities[id][key] : '',\n                input = $('[name=\"_' + key + '\"]'), input_val = input.val();\n\n            // remove old address(es)\n            if (old_val && input_val) {\n                rx = new RegExp('\\\\s*' + RegExp.escape(old_val) + '\\\\s*');\n                input_val = input_val.replace(rx, '');\n            }\n\n            // cleanup\n            input_val = String(input_val).replace(/[,;]\\s*[,;]/g, ',').replace(/^[\\s,;]+/, '');\n\n            // add new address(es)\n            if (new_val && input_val.indexOf(new_val) == -1 && input_val.indexOf(new_val.replace(/\"/g, '')) == -1) {\n                if (input_val) {\n                    input_val = input_val.replace(/[,;\\s]+$/, '') + ', ';\n                }\n\n                input_val += new_val + ', ';\n            }\n\n            if (old_val || new_val) {\n                input.val(input_val).change();\n            }\n        });\n\n        if (this.editor) {\n            this.editor.change_signature(id, show_sig);\n        }\n\n        if (show && got_sig) {\n            this.display_message('siginserted', 'confirmation');\n        }\n\n        this.env.identity = id;\n        this.triggerEvent('change_identity');\n\n        return true;\n    };\n\n    // Open file selection dialog for defined upload form\n    // Works only on click and only with smart-upload forms\n    this.upload_input = function (name) {\n        $('#' + name + ' input[type=\"file\"]').click();\n    };\n\n    // upload (attachment) file\n    this.upload_file = function (form, action, lock) {\n        if (form) {\n            var fname, files = [];\n            $('input', form).each(function () {\n                if (this.files) {\n                    fname = this.name;\n                    for (var i = 0; i < this.files.length; i++) {\n                        files.push(this.files[i]);\n                    }\n                }\n            });\n\n            return this.file_upload(files, { _id: this.env.compose_id || '' }, {\n                name: fname,\n                action: action,\n                lock: lock,\n            });\n        }\n    };\n\n    // Add file name to attachment list, called from upload page\n    this.add2attachment_list = function (name, att, upload_id) {\n        if (upload_id) {\n            this.triggerEvent('fileuploaded', { name: name, attachment: att, id: upload_id });\n        }\n\n        if (upload_id && this.env.attachments[upload_id]) {\n            delete this.env.attachments[upload_id];\n        }\n\n        this.env.attachments[name] = att;\n\n        if (!this.gui_objects.attachmentlist) {\n            return false;\n        }\n\n        var label, indicator, li = $('<li>');\n\n        if (!att.complete && att.html.indexOf('<') < 0) {\n            att.html = '<span class=\"uploading\">' + att.html + '</span>';\n        }\n\n        if (!att.complete && this.env.loadingicon) {\n            att.html = '<img src=\"' + this.env.loadingicon + '\" class=\"uploading\" />' + att.html;\n        }\n\n        if (!att.complete) {\n            label = this.get_label('cancel');\n            att.html = '<a title=\"' + label + '\" onclick=\"return rcmail.cancel_attachment_upload(\\'' + name + '\\');\" href=\"#cancelupload\" class=\"cancelupload\">'\n                + (this.env.cancelicon ? '<img src=\"' + this.env.cancelicon + '\" />' : '<span class=\"inner\">' + label + '</span>') + '</a>' + att.html;\n        }\n\n        li.attr('id', name).addClass(att.classname).html(att.html)\n            .find('.attachment-name').on('mouseover', function () {\n                rcube_webmail.long_subject_title_ex(this);\n            });\n\n        // replace indicator's li\n        if (upload_id && (indicator = document.getElementById(upload_id))) {\n            li.replaceAll(indicator);\n        } else {\n            // add new li\n            li.appendTo(this.gui_objects.attachmentlist);\n        }\n\n        // set tabindex attribute\n        var tabindex = $(this.gui_objects.attachmentlist).attr('data-tabindex') || '0';\n        li.find('a').attr('tabindex', tabindex);\n\n        this.triggerEvent('fileappended', {\n            name: name, attachment: att, id: upload_id, item: li,\n        });\n\n        return true;\n    };\n\n    this.remove_from_attachment_list = function (name) {\n        delete this.env.attachments[name];\n        $('#' + name).remove();\n    };\n\n    this.remove_attachment = function (name) {\n        if (name && this.env.attachments[name]) {\n            this.http_post('remove-attachment', { _id: this.env.compose_id, _file: name });\n        }\n\n        return false;\n    };\n\n    this.cancel_attachment_upload = function (name) {\n        if (!name || !this.uploads[name]) {\n            return false;\n        }\n\n        this.remove_from_attachment_list(name);\n        this.uploads[name].abort();\n        return false;\n    };\n\n    // rename uploaded attachment (in compose)\n    this.rename_attachment = function (id) {\n        var attachment = this.env.attachments[id];\n\n        if (!attachment) {\n            return;\n        }\n\n        var input = $('<input>').attr({ type: 'text', size: 50 }).val(attachment.name),\n            content = $('<label>').text(this.get_label('namex')).append(input);\n\n        this.simple_dialog(content, 'attachmentrename', function () {\n            var name;\n            if ((name = input.val()) && name != attachment.name) {\n                ref.http_post('rename-attachment', { _id: ref.env.compose_id, _file: id, _name: name },\n                    ref.set_busy(true, 'loading'));\n                return true;\n            }\n        }\n        );\n    };\n\n    // update attachments list with the new name\n    this.rename_attachment_handler = function (id, name) {\n        var attachment = this.env.attachments[id];\n\n        if (!attachment || !name) {\n            return;\n        }\n\n        attachment.name = name;\n\n        $('#' + id + ' .attachment-name').text(name).attr('title', '');\n    };\n\n    // send remote request to add a new contact\n    this.add_contact = function (value, reload, source) {\n        if (value) {\n            this.http_post('addcontact', { _address: value, _reload: reload, _source: source });\n        }\n    };\n\n    // send remote request to search mail or contacts\n    this.qsearch = function (value) {\n        // Note: Some plugins would like to do search without value,\n        // so we keep value != '' check to allow that use-case. Which means\n        // e.g. that qsearch() with no argument will execute the search.\n        if (value != '' || $(this.gui_objects.qsearchbox).val() || $(this.gui_objects.search_interval).val()) {\n            var r, lock = this.set_busy(true, 'searching'),\n                url = this.search_params(value),\n                action = this.env.action == 'compose' && this.contact_list ? 'search-contacts' : 'search';\n\n            if (this.message_list) {\n                this.clear_message_list();\n            } else if (this.contact_list) {\n                this.list_contacts_clear();\n                // use env.last_source as env.source is overwritten by search action\n                url._scope = this.env.search_scope == 'base' ? this.env.last_source : null;\n            }\n\n            if (this.env.source) {\n                url._source = this.env.source;\n            }\n            if (this.env.group) {\n                url._gid = this.env.group;\n            }\n\n            // reset vars\n            this.env.current_page = 1;\n\n            r = this.http_request(action, url, lock);\n\n            this.env.qsearch = { lock: lock, request: r };\n            this.enable_command('set-listmode', this.env.threads && (this.env.search_scope || 'base') == 'base');\n\n            return true;\n        }\n\n        return false;\n    };\n\n    this.continue_search = function (request_id) {\n        var lock = this.set_busy(true, 'stillsearching');\n\n        setTimeout(function () {\n            var url = ref.search_params();\n            url._continue = request_id;\n            ref.env.qsearch = { lock: lock, request: ref.http_request('search', url, lock) };\n        }, 100);\n    };\n\n    // build URL params for search\n    this.search_params = function (search, filter) {\n        var n, url = {}, mods_arr = [],\n            mods = this.env.search_mods,\n            scope = this.env.search_scope || 'base',\n            mbox = this.env.mailbox;\n\n        if (!filter && this.gui_objects.search_filter) {\n            filter = this.gui_objects.search_filter.value;\n        }\n\n        if (!search && this.gui_objects.qsearchbox) {\n            search = this.gui_objects.qsearchbox.value;\n        }\n\n        if (this.gui_objects.search_interval) {\n            url._interval = $(this.gui_objects.search_interval).val();\n        }\n\n        if (search) {\n            url._q = search;\n\n            if (mods && this.message_list) {\n                mods = mods[mbox] || mods['*'];\n            }\n\n            if (mods) {\n                for (n in mods) {\n                    mods_arr.push(n);\n                }\n                url._headers = mods_arr.join(',');\n            }\n        }\n\n        url._layout = this.env.layout;\n        url._filter = filter;\n        url._scope = scope;\n        url._mbox = mbox;\n\n        return url;\n    };\n\n    // reset search filter\n    this.reset_search_filter = function () {\n        this.filter_disabled = true;\n        if (this.gui_objects.search_filter) {\n            $(this.gui_objects.search_filter).val('ALL').change();\n        }\n        this.filter_disabled = false;\n    };\n\n    // reset quick-search form\n    this.reset_qsearch = function (all) {\n        if (this.gui_objects.qsearchbox) {\n            this.gui_objects.qsearchbox.value = '';\n        }\n\n        if (this.gui_objects.search_interval) {\n            $(this.gui_objects.search_interval).val('');\n        }\n\n        if (this.env.qsearch) {\n            this.abort_request(this.env.qsearch);\n        }\n\n        if (all) {\n            this.env.search_scope = this.env.search_scope || 'base';\n            this.reset_search_filter();\n        }\n\n        this.env.qsearch = null;\n        this.env.search_request = null;\n        this.env.search_id = null;\n        this.select_all_mode = false;\n\n        this.enable_command('set-listmode', this.env.threads);\n    };\n\n    this.set_searchscope = function (scope) {\n        this.env.search_scope = scope;\n    };\n\n    this.set_searchinterval = function (interval) {\n        this.env.search_interval = interval;\n    };\n\n    this.set_searchmods = function (mods) {\n        var mbox = this.env.mailbox,\n            scope = this.env.search_scope || 'base';\n\n        if (!this.env.search_mods) {\n            this.env.search_mods = {};\n        }\n\n        if (mbox) {\n            this.env.search_mods[mbox] = mods;\n        }\n    };\n\n    this.is_multifolder_listing = function () {\n        return this.env.multifolder_listing !== undefined ? this.env.multifolder_listing\n            : (this.env.search_request && (this.env.search_scope || 'base') != 'base');\n    };\n\n    // action executed after mail is sent\n    this.sent_successfully = function (type, msg, folders, save_error) {\n        this.display_message(msg, type);\n        this.compose_skip_unsavedcheck = true;\n\n        if (this.env.extwin) {\n            if (!save_error) {\n                this.lock_form(this.gui_objects.messageform);\n            }\n\n            var filter = { task: 'mail', action: '' },\n                rc = this.opener(false, filter) || this.opener(true, filter);\n\n            if (rc) {\n                rc.display_message(msg, type);\n                // refresh the folder where sent message was saved or replied message comes from\n                if (folders && $.inArray(rc.env.mailbox, folders) >= 0) {\n                    rc.command('checkmail');\n                }\n            }\n\n            if (!save_error) {\n                setTimeout(function () {\n                    window.close();\n                }, 1000);\n            }\n        } else if (!save_error) {\n            // before redirect we need to wait some time for Chrome (#1486177)\n            setTimeout(function () {\n                ref.list_mailbox();\n            }, 500);\n        }\n\n        if (save_error) {\n            this.env.is_sent = true;\n        }\n    };\n\n    this.image_rotate = function () {\n        var curr = this.image_style ? (this.image_style.rotate || 0) : 0;\n\n        this.image_style.rotate = curr > 180 ? 0 : curr + 90;\n\n        $(this.gui_objects.messagepartframe).contents().find('img')\n            .css({ rotate: this.image_style.rotate + 'deg' });\n    };\n\n    this.image_scale = function (prop) {\n        var curr = this.image_style ? (this.image_style.scale || 1) : 1,\n            img = $(this.gui_objects.messagepartframe).contents().find('img'),\n            zoom_base = img.width() <= img.height() ? (img.width() / curr) : (img.height() / curr),\n            zoom_dim = img.width() <= img.height() ? ['width', 'height'] : ['height', 'width'];\n\n        this.image_style.scale = Math.max(0.1, curr + 0.1 * (prop == '-' ? -1 : 1));\n\n        img.css({\n            maxWidth: '',\n            maxHeight: '',\n            [zoom_dim[0]]: zoom_base * this.image_style.scale,\n            [zoom_dim[1]]: 'auto',\n        });\n    };\n\n    // Update import dialog state\n    this.import_state_set = function (state) {\n        if (this.import_dialog) {\n            this.import_state = state;\n\n            var button = $(this.import_dialog).parent().find('.ui-dialog-buttonset > button').first();\n\n            if (state != 'error') {\n                // replace Import/Cancel buttons with Close button\n                button.hide();\n                button.next().text(this.gettext('close')).focus();\n            } else {\n                // activate the Import button\n                button.prop('disabled', false);\n            }\n        }\n    };\n\n\n    /*********************************************************/\n    /*              keyboard live-search methods             */\n    /*********************************************************/\n\n    // handler for keyboard events on address-fields\n    this.ksearch_keydown = function (e, obj, props) {\n        if (this.ksearch_timer) {\n            clearTimeout(this.ksearch_timer);\n        }\n\n        var key = rcube_event.get_keycode(e);\n\n        switch (key) {\n            case 38: // arrow up\n            case 40: // arrow down\n                if (!this.ksearch_visible()) {\n                    return;\n                }\n\n                var dir = key == 38 ? 1 : 0,\n                    highlight = this.ksearch_pane.find('li.selected')[0];\n\n                if (!highlight) {\n                    highlight = this.ksearch_pane.__ul.firstChild;\n                }\n\n                if (highlight) {\n                    this.ksearch_select(dir ? highlight.previousSibling : highlight.nextSibling);\n                }\n\n                return rcube_event.cancel(e);\n            case 9: // tab\n                if (rcube_event.get_modifier(e) == SHIFT_KEY || !this.ksearch_visible()) {\n                    this.ksearch_hide();\n                    return;\n                }\n\n            case 13: // enter\n                if (!this.ksearch_visible()) {\n                    return false;\n                }\n\n                // insert selected address and hide ksearch pane\n                this.insert_recipient(this.ksearch_selected);\n                this.ksearch_hide();\n\n                // Don't cancel on Tab, we want to jump to the next field (#5659)\n                return key == 9 ? null : rcube_event.cancel(e);\n            case 27: // escape\n                this.ksearch_hide();\n                return;\n            case 37: // left\n            case 39: // right\n                return;\n        }\n\n        // start timer\n        this.ksearch_timer = setTimeout(function () {\n            ref.ksearch_get_results(props);\n        }, 200);\n        this.ksearch_input = obj;\n\n        return true;\n    };\n\n    this.ksearch_visible = function () {\n        return this.ksearch_selected !== null && this.ksearch_selected !== undefined && this.ksearch_value;\n    };\n\n    this.ksearch_select = function (node) {\n        if (this.ksearch_pane && node) {\n            this.ksearch_pane.find('li.selected').removeClass('selected').removeAttr('aria-selected');\n        }\n\n        if (node) {\n            $(node).addClass('selected').attr('aria-selected', 'true');\n            this.ksearch_selected = node._rcm_id;\n            $(this.ksearch_input).attr('aria-activedescendant', 'rcmkSearchItem' + this.ksearch_selected);\n        }\n    };\n\n    this.insert_recipient = function (id) {\n        if (id === null || !this.env.contacts[id] || !this.ksearch_input) {\n            return;\n        }\n\n        var trigger = false, insert = '', delim = ', ',\n            contact = this.env.contacts[id];\n\n        this.ksearch_destroy();\n\n        // insert all members of a group\n        if (typeof contact === 'object' && contact.type == 'group' && !contact.email && contact.id) {\n            // We wrap the group name with invisible markers to prevent from problems with group expanding (#7569)\n            var name = '\\u200B' + contact.name + '\\u200B';\n            insert = name + delim;\n            this.group2expand[contact.id] = { name: name, input: this.ksearch_input };\n            this.http_request('mail/group-expand', { _source: contact.source, _gid: contact.id }, false);\n        } else if (typeof contact === 'object' && contact.name) {\n            insert = contact.name + delim;\n            trigger = true;\n        } else if (typeof contact === 'string') {\n            insert = contact + delim;\n            trigger = true;\n        }\n\n        this.ksearch_input_replace(this.ksearch_value, insert, null, trigger);\n\n        if (trigger) {\n            this.triggerEvent('autocomplete_insert', {\n                field: this.ksearch_input,\n                insert: insert,\n                data: contact,\n                search: this.ksearch_value_last,\n                result_type: 'person',\n            });\n\n            this.ksearch_value_last = null;\n            this.compose_type_activity++;\n        }\n    };\n\n    this.replace_group_recipients = function (id, recipients) {\n        var data = this.group2expand[id];\n\n        if (data) {\n            this.ksearch_input_replace(data.name, recipients, data.input);\n\n            this.triggerEvent('autocomplete_insert', {\n                field: data.input,\n                insert: recipients,\n                data: data,\n                search: this.ksearch_value_last,\n                result_type: 'group',\n            });\n\n            this.ksearch_value_last = null;\n            this.group2expand[id] = null;\n            this.compose_type_activity++;\n        }\n    };\n\n    // address search processor\n    this.ksearch_get_results = function (props) {\n        if (this.ksearch_pane && this.ksearch_pane.is(':visible')) {\n            this.ksearch_pane.hide();\n        }\n\n        // get string from cursor position back to the last comma or semicolon\n        var q = this.ksearch_input_get(),\n            min = this.env.autocomplete_min_length,\n            data = this.ksearch_data;\n\n        // trim query string\n        q = q.trim();\n\n        // Don't (re-)search if the last results are still active\n        if (q == this.ksearch_value) {\n            return;\n        }\n\n        this.ksearch_destroy();\n\n        if (q.length && q.length < min) {\n            if (!this.ksearch_info) {\n                this.ksearch_info = this.display_message(this.get_label('autocompletechars').replace('$min', min));\n            }\n            return;\n        }\n\n        var old_value = this.ksearch_value;\n        this.ksearch_value = q;\n\n        // Group expansion clears ksearch_value before calling autocomplete_insert trigger,\n        // therefore store it in separate variable for later consumption.\n        this.ksearch_value_last = q;\n\n        // ...string is empty\n        if (!q.length) {\n            return;\n        }\n\n        // ...new search value contains old one and previous search was not finished or its result was empty\n        if (old_value && old_value.length && q.startsWith(old_value) && (!data || data.num <= 0) && this.env.contacts && !this.env.contacts.length) {\n            return;\n        }\n\n        var sources = props && props.sources ? props.sources : [''];\n        var reqid = this.multi_thread_http_request({\n            items: sources,\n            threads: props && props.threads ? props.threads : 1,\n            action: props && props.action ? props.action : 'mail/autocomplete',\n            postdata: { _search: q, _source: '%s' },\n            lock: this.display_message('searching', 'loading'),\n        });\n\n        this.ksearch_data = { id: reqid, sources: sources.slice(), num: sources.length };\n    };\n\n    this.ksearch_query_results = function (results, search, reqid) {\n        // trigger multi-thread http response callback\n        this.multi_thread_http_response(results, reqid);\n\n        // search stopped in meantime?\n        if (!this.ksearch_value) {\n            return;\n        }\n\n        // ignore this outdated search response\n        if (this.ksearch_input && search != this.ksearch_value) {\n            return;\n        }\n\n        // display search results\n        var i, id, len, ul, text, type, init,\n            is_framed = this.is_framed(),\n            value = this.ksearch_value,\n            maxlen = this.env.autocomplete_max ? this.env.autocomplete_max : 15;\n\n        // create results pane if not present\n        if (!this.ksearch_pane) {\n            ul = $('<ul>');\n            this.ksearch_pane = $('<div>')\n                .attr({ id: 'rcmKSearchpane', role: 'listbox', class: 'select-menu inline' })\n                .css({ position: 'absolute', 'z-index': 30000 })\n                .append(ul)\n                .appendTo(is_framed ? parent.document.body : document.body);\n\n            this.ksearch_pane.__ul = ul[0];\n            this.triggerEvent('autocomplete_create', { obj: this.ksearch_pane });\n        }\n\n        ul = this.ksearch_pane.__ul;\n\n        // remove all search results or add to existing list if parallel search\n        if (reqid && this.ksearch_pane.data('reqid') == reqid) {\n            maxlen -= ul.childNodes.length;\n        } else {\n            this.ksearch_pane.data('reqid', reqid);\n            init = 1;\n            // reset content\n            ul.innerHTML = '';\n            this.env.contacts = [];\n\n            // Calculate the results pane position and size\n            // Elastic: On small screen we use the width/position of the whole .ac-input element (input's parent)\n            var is_composite_input = $('html').is('.layout-small,.layout-phone') && $(this.ksearch_input).parents('.ac-input').length == 1,\n                input = is_composite_input ? $(this.ksearch_input).parents('.ac-input')[0] : $(this.ksearch_input)[0],\n                pos = $(input).offset();\n\n            // ... consider scroll position\n            pos.left -= $(document.documentElement).scrollLeft();\n            pos.top -= $(document.documentElement).scrollTop();\n\n            // ... consider iframe position\n            if (is_framed) {\n                try {\n                    parent.$('iframe').each(function () {\n                        if (this.contentWindow == window) {\n                            var offset = $(this).offset();\n                            pos.left += offset.left;\n                            pos.top += offset.top;\n                        }\n                    });\n                } catch (e) {}\n            }\n\n            var w = $(is_framed ? parent : window).width(),\n                input_width = $(input).outerWidth(),\n                left = w - pos.left > 200 ? pos.left : w - 200,\n                top = (pos.top + input.offsetHeight + 1),\n                width = Math.min(400, w - left);\n\n            this.ksearch_pane.css({\n                left: (is_composite_input ? pos.left : left) + 'px',\n                top: top + 'px',\n                maxWidth: (is_composite_input ? input_width : width) + 'px',\n                minWidth: '200px',\n                width: is_composite_input ? (input_width + 'px') : 'auto',\n                display: 'none',\n            });\n        }\n\n        // add each result line to list\n        if (results && (len = results.length)) {\n            for (i = 0; i < len && maxlen > 0; i++) {\n                text = typeof results[i] === 'object' ? (results[i].display || results[i].name) : results[i];\n                type = typeof results[i] === 'object' ? results[i].type : '';\n                id = i + this.env.contacts.length;\n                $('<li>').attr({ id: 'rcmkSearchItem' + id, role: 'option' })\n                    .html('<i class=\"icon\"></i>' + this.quote_html(text.replace(new RegExp('(' + RegExp.escape(value) + ')', 'ig'), '##$1%%')).replace(/##([^%]+)%%/g, '<b>$1</b>'))\n                    .addClass(type || '')\n                    .appendTo(ul)\n                    .mouseover(function () {\n                        ref.ksearch_select(this);\n                    })\n                    .mouseup(function () {\n                        ref.ksearch_click(this);\n                    })\n                    .get(0)._rcm_id = id;\n                maxlen -= 1;\n            }\n        }\n\n        if (ul.childNodes.length) {\n            // set the right aria-* attributes to the input field\n            $(this.ksearch_input)\n                .attr({ 'aria-haspopup': 'true', 'aria-expanded': 'true', 'aria-owns': 'rcmKSearchpane' });\n\n            this.ksearch_pane.show();\n\n            // select the first\n            if (!this.env.contacts.length) {\n                this.ksearch_select($('li', ul)[0]);\n            }\n        }\n\n        if (len) {\n            this.env.contacts = this.env.contacts.concat(results);\n        }\n\n        if (this.ksearch_data.id == reqid) {\n            this.ksearch_data.num--;\n        }\n    };\n\n    // Getter for input value\n    // returns a string from the last comma to current cursor position\n    this.ksearch_input_get = function () {\n        if (!this.ksearch_input) {\n            return '';\n        }\n\n        var cp = this.get_caret_pos(this.ksearch_input);\n\n        return this.ksearch_input.value.substr(0, cp).split(/[,;]/).pop();\n    };\n\n    // Setter for input value\n    // replaces 'from' string with 'to' and sets cursor position at the end\n    this.ksearch_input_replace = function (from, to, input, trigger) {\n        if (!this.ksearch_input && !input) {\n            return;\n        }\n\n        if (!input) {\n            input = this.ksearch_input;\n        }\n\n        var cpos = this.get_caret_pos(input),\n            p = input.value.lastIndexOf(from, cpos),\n            pre = input.value.substring(0, p),\n            end = input.value.substring(p + from.length, input.value.length);\n\n        input.value = pre + to + end;\n\n        // set caret to insert pos\n        this.set_caret_pos(input, cpos + to.length - from.length);\n\n        // run onchange action on the element\n        $(input).trigger('change', [true, trigger]);\n    };\n\n    this.ksearch_click = function (node) {\n        if (this.ksearch_input) {\n            this.ksearch_input.focus();\n        }\n\n        this.insert_recipient(node._rcm_id);\n        this.ksearch_hide();\n    };\n\n    this.ksearch_blur = function () {\n        if (this.ksearch_timer) {\n            clearTimeout(this.ksearch_timer);\n        }\n\n        this.ksearch_input = null;\n        this.ksearch_hide();\n    };\n\n    this.ksearch_hide = function () {\n        this.ksearch_selected = null;\n        this.ksearch_value = '';\n\n        if (this.ksearch_pane) {\n            this.ksearch_pane.hide();\n        }\n\n        $(this.ksearch_input)\n            .attr({ 'aria-haspopup': 'false', 'aria-expanded': 'false' })\n            .removeAttr('aria-activedescendant')\n            .removeAttr('aria-owns');\n\n        this.ksearch_destroy();\n    };\n\n    // Clears autocomplete data/requests\n    this.ksearch_destroy = function () {\n        if (this.ksearch_data) {\n            this.multi_thread_request_abort(this.ksearch_data.id);\n        }\n\n        if (this.ksearch_info) {\n            this.hide_message(this.ksearch_info);\n        }\n\n        if (this.ksearch_msg) {\n            this.hide_message(this.ksearch_msg);\n        }\n\n        this.ksearch_data = null;\n        this.ksearch_info = null;\n        this.ksearch_msg = null;\n    };\n\n\n    /*********************************************************/\n    /*                  address book methods                 */\n    /*********************************************************/\n\n    this.contactlist_select = function (list) {\n        if (this.preview_timer) {\n            clearTimeout(this.preview_timer);\n        }\n\n        var id, targets,\n            groupcount = 0,\n            writable = false,\n            deletable = false,\n            copy_writable = false,\n            selected = list.get_selection().length,\n            source = this.env.source ? this.env.address_sources[this.env.source] : null;\n\n        // we don't have dblclick handler here, so use 50 instead of this.dblclick_time\n        if (this.env.contentframe && !list.multi_selecting && (id = list.get_single_selection())) {\n            this.preview_timer = setTimeout(function () {\n                ref.load_contact(id, 'show');\n            }, this.preview_delay_click);\n        } else if (this.env.contentframe) {\n            this.show_contentframe(false);\n        }\n\n        if (selected) {\n            list.draggable = false;\n\n            // no source = search result, we'll need to detect if any of\n            // selected contacts are in writable addressbook to enable edit/delete\n            // we'll also need to know sources used in selection for copy\n            // and group-addmember operations (drag&drop)\n            this.env.selection_sources = [];\n\n            if (source) {\n                this.env.selection_sources.push(this.env.source);\n            }\n\n            $.each(list.get_selection(), function (i, v) {\n                var book, sid, contact = list.data[v];\n                if (!source) {\n                    sid = String(v).replace(/^[^-]+-/, '');\n                    book = sid ? ref.env.address_sources[sid] : null;\n\n                    if (book) {\n                        writable = writable || (!book.readonly && !contact.readonly);\n                        deletable = deletable || book.deletable === true;\n                        ref.env.selection_sources.push(sid);\n                    }\n                } else {\n                    writable = writable || (!source.readonly && !contact.readonly);\n                    deletable = deletable || source.deletable === true;\n                }\n\n                if (contact._type != 'group') {\n                    list.draggable = true;\n                }\n            });\n\n            this.env.selection_sources = $.unique(this.env.selection_sources);\n\n            if (source && source.groups) {\n                $.each(this.env.contactgroups, function () {\n                    if (this.source === ref.env.source) {\n                        groupcount++;\n                    }\n                });\n            }\n\n            targets = $.map(this.env.address_sources, function (v, i) {\n                return v.readonly ? null : i;\n            });\n            copy_writable = $.grep(targets, function (v) {\n                return jQuery.inArray(v, ref.env.selection_sources) < 0;\n            }).length > 0;\n        }\n\n        // if a group is currently selected, and there is at least one contact selected\n        // we can enable the group-remove-selected command\n        this.enable_command('group-assign-selected', groupcount > 0 && writable);\n        this.enable_command('group-remove-selected', this.env.group && writable);\n        this.enable_command('print', 'qrcode', selected == 1);\n        this.enable_command('export-selected', selected > 0);\n        this.enable_command('edit', id && writable);\n        this.enable_command('delete', 'move', writable || deletable);\n        this.enable_command('copy', copy_writable);\n\n        return false;\n    };\n\n    this.list_contacts = function (src, group, page, search) {\n        var win, folder, index = -1, url = {},\n            refresh = src === undefined && group === undefined && page === undefined,\n            target = window;\n\n        if (!src) {\n            src = this.env.source;\n        }\n\n        if (refresh) {\n            group = this.env.group;\n        }\n\n        if (src != this.env.source) {\n            page = this.env.current_page = 1;\n            this.reset_qsearch();\n        } else if (!refresh && group != this.env.group) {\n            page = this.env.current_page = 1;\n        }\n\n        if (this.env.search_id) {\n            folder = 'S' + this.env.search_id;\n        } else if (!this.env.search_request) {\n            folder = group ? 'G' + src + group : src;\n        }\n\n        this.env.source = this.env.last_source = src;\n        this.env.group = this.env.last_group = group;\n\n        // truncate groups listing stack\n        $.each(this.env.address_group_stack, function (i, v) {\n            if (ref.env.group == v.id) {\n                index = i;\n                return false;\n            }\n        });\n\n        this.env.address_group_stack = index < 0 ? [] : this.env.address_group_stack.slice(0, index);\n\n        // remove cached contact group selector\n        this.destroy_entity_selector('contactgroup-selector');\n\n        // make sure the current group is on top of the stack\n        if (this.env.group) {\n            if (!search) {\n                search = {};\n            }\n            search.id = this.env.group;\n            this.env.address_group_stack.push(search);\n\n            // mark the first group on the stack as selected in the directory list\n            folder = 'G' + src + this.env.address_group_stack[0].id;\n        } else if (this.gui_objects.addresslist_title) {\n            $(this.gui_objects.addresslist_title).text(this.get_label('contacts'));\n        }\n\n        if (!this.env.search_id) {\n            this.select_folder(folder, '', true);\n        }\n\n        // load contacts remotely\n        if (this.gui_objects.contactslist) {\n            this.list_contacts_remote(src, group, page);\n            return;\n        }\n\n        if (win = this.get_frame_window(this.env.contentframe)) {\n            target = win;\n            url._framed = 1;\n        }\n\n        if (group) {\n            url._gid = group;\n        }\n        if (page) {\n            url._page = page;\n        }\n        if (src) {\n            url._source = src;\n        }\n\n        // also send search request to get the correct listing\n        if (this.env.search_request) {\n            url._search = this.env.search_request;\n        }\n\n        this.set_busy(true, 'loading');\n        this.location_href(url, target);\n    };\n\n    // send remote request to load contacts list\n    this.list_contacts_remote = function (src, group, page) {\n        // clear message list first\n        this.list_contacts_clear();\n\n        // send request to server\n        var url = {}, lock = this.set_busy(true, 'loading');\n\n        if (src) {\n            url._source = src;\n        }\n        if (page) {\n            url._page = page;\n        }\n        if (group) {\n            url._gid = group;\n        }\n\n        this.env.source = src;\n        this.env.group = group;\n\n        // also send search request to get the right records\n        if (this.env.search_request) {\n            url._search = this.env.search_request;\n        }\n\n        this.http_request(this.env.task == 'mail' ? 'list-contacts' : 'list', url, lock);\n\n        if (this.env.task != 'mail') {\n            this.update_state({\n                _source: src,\n                _page: page && page > 1 ? page : null,\n                _gid: group ? group : null,\n            });\n        }\n    };\n\n    this.list_contacts_clear = function () {\n        this.contact_list.data = {};\n        this.contact_list.clear(true);\n        this.show_contentframe(false);\n        this.enable_command('delete', 'move', 'copy', 'print', false);\n    };\n\n    this.set_group_prop = function (prop) {\n        if (this.gui_objects.addresslist_title) {\n            var boxtitle = $(this.gui_objects.addresslist_title).html(''); // clear contents\n\n            // add link to pop back to parent group\n            if (this.env.address_group_stack.length > 1\n                || (this.env.address_group_stack.length == 1 && this.env.address_group_stack[0].search_request)\n            ) {\n                var link = $('<a href=\"#list\">...</a>')\n                    .attr({ title: this.get_label('uponelevel'), class: 'poplink' })\n                    .click(function () {\n                        return ref.command('popgroup', '', this);\n                    });\n\n                boxtitle.append(link).append('&nbsp;&raquo;&nbsp;');\n            }\n\n            boxtitle.append($('<span>').text(prop ? prop.name : this.get_label('contacts')));\n        }\n    };\n\n    // load contact record\n    this.load_contact = function (cid, action, framed) {\n        var win, url = {}, target = window,\n            rec = this.contact_list ? this.contact_list.data[cid] : null;\n\n        if (win = this.get_frame_window(this.env.contentframe)) {\n            url._framed = 1;\n            target = win;\n            this.show_contentframe(true);\n\n            // load dummy content, unselect selected row(s)\n            if (!cid) {\n                this.contact_list.clear_selection();\n            }\n\n            this.enable_command('export-selected', 'print', rec && rec._type != 'group');\n        } else if (framed) {\n            return false;\n        }\n\n        if (action && (cid || action == 'add') && !this.drag_active) {\n            if (this.env.group) {\n                url._gid = this.env.group;\n            }\n\n            if (this.env.search_request) {\n                url._search = this.env.search_request;\n            }\n\n            if (cid) {\n                url._cid = this.preview_id = cid;\n            }\n\n            url._action = action;\n            url._source = this.env.source;\n\n            this.location_href(url, target, true);\n        }\n\n        return true;\n    };\n\n    // add/delete member to/from the group\n    this.group_member_change = function (what, cid, source, gid) {\n        if (what != 'add') {\n            what = 'del';\n        }\n\n        var lock = this.display_message(what == 'add' ? 'addingmember' : 'removingmember', 'loading'),\n            post_data = { _cid: cid, _source: source, _gid: gid };\n\n        this.http_post('group-' + what + 'members', post_data, lock);\n    };\n\n    this.contacts_drag_menu = function (e, to) {\n        var dest = to.type == 'group' ? to.source : to.id,\n            source = this.env.source;\n\n        if (!this.env.address_sources[dest] || this.env.address_sources[dest].readonly) {\n            return true;\n        }\n\n        // search result may contain contacts from many sources, but if there is only one...\n        if (source == '' && this.env.selection_sources.length == 1) {\n            source = this.env.selection_sources[0];\n        }\n\n        if (to.type == 'group' && dest == source) {\n            var cid = this.contact_list.get_selection().join(',');\n            this.group_member_change('add', cid, dest, to.id);\n            return true;\n        }\n\n        // move action is not possible, \"redirect\" to copy if menu wasn't requested\n        if (!this.commands.move && rcube_event.get_modifier(e) != SHIFT_KEY) {\n            this.copy_contacts(to);\n            return true;\n        }\n\n        return this.drag_menu(e, to);\n    };\n\n    // copy contact(s) to the specified target (group or directory)\n    this.copy_contacts = function (to, event, cid) {\n        if (!to) {\n            cid = this.contact_list.get_selection();\n            return this.addressbook_selector(event, function (to, obj) {\n                var to = $(obj).data('source') ? ref.env.contactgroups['G' + $(obj).data('source') + $(obj).data('gid')] : ref.env.address_sources[to];\n                ref.copy_contacts(to, null, cid);\n            });\n        }\n\n        var dest = to.type == 'group' ? to.source : to.id,\n            source = this.env.source,\n            group = this.env.group ? this.env.group : '';\n\n        cid = cid ? cid.join(',') : this.contact_list.get_selection().join(',');\n\n        if (!cid || !this.env.address_sources[dest] || this.env.address_sources[dest].readonly) {\n            return;\n        }\n\n        // search result may contain contacts from many sources, but if there is only one...\n        if (source == '' && this.env.selection_sources.length == 1) {\n            source = this.env.selection_sources[0];\n        }\n\n        // target is a group\n        if (to.type == 'group') {\n            if (dest == source) {\n                return;\n            }\n\n            var lock = this.display_message('copyingcontact', 'loading'),\n                post_data = {\n                    _cid: cid, _source: this.env.source, _to: dest, _togid: to.id, _gid: group,\n                };\n\n            this.http_post('copy', post_data, lock);\n        }\n        // target is an addressbook\n        else if (to.id != source) {\n            var lock = this.display_message('copyingcontact', 'loading'),\n                post_data = {\n                    _cid: cid, _source: this.env.source, _to: to.id, _gid: group,\n                };\n\n            this.http_post('copy', post_data, lock);\n        }\n    };\n\n    // move contact(s) to the specified target (group or directory)\n    this.move_contacts = function (to, event, cid) {\n        if (!to) {\n            cid = this.contact_list.get_selection();\n            return this.addressbook_selector(event, function (to, obj) {\n                var to = $(obj).data('source') ? ref.env.contactgroups['G' + $(obj).data('source') + $(obj).data('gid')] : ref.env.address_sources[to];\n                ref.move_contacts(to, null, cid);\n            });\n        }\n\n        var dest = to.type == 'group' ? to.source : to.id,\n            source = this.env.source,\n            group = this.env.group ? this.env.group : '';\n\n        if (!this.env.address_sources[dest] || this.env.address_sources[dest].readonly) {\n            return;\n        }\n\n        if (!cid) {\n            cid = this.contact_list.get_selection();\n        }\n\n        // search result may contain contacts from many sources, but if there is only one...\n        if (source == '' && this.env.selection_sources.length == 1) {\n            source = this.env.selection_sources[0];\n        }\n\n        if (to.type == 'group') {\n            if (dest == source) {\n                return;\n            }\n\n            this._with_selected_contacts('move', { _to: dest, _togid: to.id, _cid: cid });\n        }\n        // target is an addressbook\n        else if (to.id != source) {\n            this._with_selected_contacts('move', { _to: to.id, _cid: cid });\n        }\n    };\n\n    // delete contact(s)\n    this.delete_contacts = function () {\n        var undelete = this.env.source && this.env.address_sources[this.env.source].undelete;\n\n        if (undelete) {\n            this._with_selected_contacts('delete', { _cid: this.contact_list.get_selection() });\n        } else {\n            var cid = this.contact_list.get_selection();\n            this.confirm_dialog(this.get_label('deletecontactconfirm'), 'delete', function () {\n                ref._with_selected_contacts('delete', { _cid: cid });\n            });\n        }\n    };\n\n    this._with_selected_contacts = function (action, post_data) {\n        var selection = post_data._cid;\n\n        // exit if no contact specified or if selection is empty\n        if (!selection.length && !this.env.cid) {\n            return;\n        }\n\n        var n, a_cids = [],\n            label = action == 'delete' ? 'contactdeleting' : 'movingcontact',\n            lock = this.display_message(label, 'loading'),\n            display_next = this.check_display_next();\n\n        if (this.env.cid) {\n            a_cids.push(this.env.cid);\n        } else {\n            for (n = 0; n < selection.length; n++) {\n                id = selection[n];\n                a_cids.push(id);\n                this.contact_list.remove_row(id, display_next && n == selection.length - 1);\n            }\n\n            if (!display_next) {\n                this.contact_list.clear_selection();\n            }\n        }\n\n        if (!post_data) {\n            post_data = {};\n        }\n\n        post_data._source = this.env.source;\n        post_data._from = this.env.action;\n        post_data._cid = a_cids.join(',');\n\n        if (this.env.group) {\n            post_data._gid = this.env.group;\n        }\n\n        // also send search request to get the right records from the next page\n        if (this.env.search_request) {\n            post_data._search = this.env.search_request;\n        }\n\n        // send request to server\n        this.http_post(action, post_data, lock);\n\n        return true;\n    };\n\n    // update a contact record in the list\n    this.update_contact_row = function (cid, cols_arr, newcid, source, data) {\n        var list = this.contact_list;\n\n        cid = this.html_identifier(cid);\n\n        // when in searching mode, concat cid with the source name\n        if (!list.rows[cid]) {\n            cid = cid + '-' + source;\n            if (newcid) {\n                newcid = newcid + '-' + source;\n            }\n        }\n\n        list.update_row(cid, cols_arr, newcid, true);\n        list.data[cid] = data;\n    };\n\n    // add row to contacts list\n    this.add_contact_row = function (cid, cols, classes, data) {\n        if (!this.gui_objects.contactslist) {\n            return false;\n        }\n\n        var c, col, list = this.contact_list,\n            row = { cols: [] };\n\n        row.id = 'rcmrow' + this.html_identifier(cid);\n        row.className = 'contact ' + (classes || '');\n\n        if (list.in_selection(cid)) {\n            row.className += ' selected';\n        }\n\n        // add each submitted col\n        for (c in cols) {\n            col = {};\n            col.className = String(c).toLowerCase();\n            col.innerHTML = cols[c];\n            row.cols.push(col);\n        }\n\n        // store data in list member\n        list.data[cid] = data;\n        list.insert_row(row);\n\n        this.enable_command('export', list.rowcount > 0);\n    };\n\n    this.init_contact_form = function () {\n        var col;\n\n        if (this.env.coltypes) {\n            this.set_photo_actions($('#ff_photo').val());\n            for (col in this.env.coltypes) {\n                this.init_edit_field(col, null);\n            }\n        }\n\n        $('.contactfieldgroup .row a.deletebutton').click(function () {\n            ref.delete_edit_field(this);\n            return false;\n        });\n\n        $('select.addfieldmenu').change(function () {\n            ref.insert_edit_field($(this).val(), $(this).attr('rel'), this);\n            this.selectedIndex = 0;\n        });\n\n        // enable date pickers on date fields\n        if ($.datepicker && this.env.date_format) {\n            $.datepicker.setDefaults({\n                dateFormat: this.env.date_format,\n                changeMonth: true,\n                changeYear: true,\n                yearRange: '-120:+10',\n                showOtherMonths: true,\n                selectOtherMonths: true,\n            });\n            $('input.datepicker').datepicker();\n        }\n\n        // Submit search form on Enter\n        if (this.env.action == 'search') {\n            $(this.gui_objects.editform).append($('<input type=\"submit\">').hide())\n                .submit(function () {\n                    $('input.mainaction').click(); return false;\n                });\n        }\n    };\n\n    // group creation dialog\n    this.group_create = function () {\n        var input = $('<input>').attr({ type: 'text', 'data-submit': 'true' }),\n            content = $('<label>').text(this.get_label('namex')).append(input),\n            source = this.env.source;\n\n        this.simple_dialog(content, 'newgroup', function () {\n            var name;\n            if (name = input.val()) {\n                ref.http_post('group-create', { _source: source, _name: name },\n                    ref.set_busy(true, 'loading'));\n                return true;\n            }\n        });\n    };\n\n    // group rename dialog\n    this.group_rename = function () {\n        if (!this.env.group) {\n            return;\n        }\n\n        var group_name = this.env.contactgroups['G' + this.env.source + this.env.group].name,\n            input = $('<input>').attr({ type: 'text', 'data-submit': 'true' }).val(group_name),\n            content = $('<label>').text(this.get_label('namex')).append(input),\n            source = this.env.source,\n            group = this.env.group;\n\n        this.simple_dialog(content, 'grouprename', function () {\n            var name;\n            if ((name = input.val()) && name != group_name) {\n                ref.http_post('group-rename', { _source: source, _gid: group, _name: name },\n                    ref.set_busy(true, 'loading'));\n                return true;\n            }\n        });\n    };\n\n    this.group_delete = function () {\n        if (this.env.group) {\n            var group = this.env.group;\n            this.confirm_dialog(this.get_label('deletegroupconfirm'), 'delete', function () {\n                var lock = ref.set_busy(true, 'groupdeleting');\n                ref.http_post('group-delete', { _source: ref.env.source, _gid: group }, lock);\n            });\n        }\n    };\n\n    // Callback from server upon group-delete command\n    this.remove_group_item = function (prop) {\n        var key = 'G' + prop.source + prop.id;\n\n        if (this.treelist.remove(key)) {\n            // make sure there is no cached address book or contact group selectors\n            this.destroy_entity_selector('addressbook-selector');\n            this.destroy_entity_selector('contactgroup-selector');\n\n            this.triggerEvent('group_delete', { source: prop.source, id: prop.id });\n\n            delete this.env.contactfolders[key];\n            delete this.env.contactgroups[key];\n        }\n\n        if (prop.source == this.env.source && prop.id == this.env.group) {\n            this.list_contacts(prop.source, 0);\n        }\n    };\n\n    // assign selected contacts to a group\n    this.group_assign_selected = function (props, obj, event) {\n        var cid = ref.contact_list.get_selection(),\n            source = ref.env.source;\n\n        this.contactgroup_selector(event, function (to) {\n            ref.group_member_change('add', cid, source, to);\n        });\n    };\n\n    // remove selected contacts from current active group\n    this.group_remove_selected = function () {\n        this.http_post('group-delmembers', {\n            _cid: this.contact_list.get_selection(),\n            _source: this.env.source,\n            _gid: this.env.group,\n        });\n    };\n\n    // callback after deleting contact(s) from current group\n    this.remove_group_contacts = function (props) {\n        if (this.env.group !== undefined && this.env.group === props.gid) {\n            var n, selection = this.contact_list.get_selection(),\n                display_next = this.check_display_next();\n\n            for (n = 0; n < selection.length; n++) {\n                id = selection[n];\n                this.contact_list.remove_row(id, display_next && n == selection.length - 1);\n            }\n\n            if (!display_next) {\n                this.contact_list.clear_selection();\n            }\n        }\n    };\n\n    // callback for creating a new contact group\n    this.insert_contact_group = function (prop) {\n        prop.type = 'group';\n\n        var key = 'G' + prop.source + prop.id,\n            link = $('<a>').attr({ href: '#', rel: prop.source + ':' + prop.id })\n                .click(function () {\n                    return ref.command('listgroup', prop, this);\n                })\n                .text(prop.name);\n\n        if (!this.env.contactgroups.length) {\n            this.env.contactgroups = {};\n        }\n\n        this.env.contactfolders[key] = this.env.contactgroups[key] = prop;\n        this.treelist.insert({ id: key, html: link, classes: ['contactgroup'] }, prop.source, 'contactgroup');\n\n        // If there was a contact selected we have to clear the list because we have outdated\n        // some commands state (e.g. group-assign-selected) as well as groups list in the contact frame\n        this.contact_list.clear_selection();\n\n        // make sure there is no cached address book or contact group selectors\n        this.destroy_entity_selector('addressbook-selector');\n        this.destroy_entity_selector('contactgroup-selector');\n\n        this.triggerEvent('group_insert', {\n            id: prop.id, source: prop.source, name: prop.name, li: this.treelist.get_item(key),\n        });\n    };\n\n    // callback for renaming a contact group\n    this.update_contact_group = function (prop) {\n        var key = 'G' + prop.source + prop.id,\n            newnode = {};\n\n        // group ID has changed, replace link node and identifiers\n        if (prop.newid) {\n            var newkey = 'G' + prop.source + prop.newid,\n                newprop = $.extend({}, prop);\n\n            this.env.contactfolders[newkey] = this.env.contactfolders[key];\n            this.env.contactfolders[newkey].id = prop.newid;\n            this.env.group = prop.newid;\n\n            delete this.env.contactfolders[key];\n            delete this.env.contactgroups[key];\n\n            newprop.id = prop.newid;\n            newprop.type = 'group';\n\n            newnode.id = newkey;\n            newnode.html = $('<a>').attr({ href: '#', rel: prop.source + ':' + prop.newid })\n                .click(function () {\n                    return ref.command('listgroup', newprop, this);\n                })\n                .text(prop.name);\n        } else {\n            // update displayed group name\n            $(this.treelist.get_item(key)).children().first().text(prop.name);\n            this.env.contactfolders[key].name = this.env.contactgroups[key].name = prop.name;\n\n            if (prop.source == this.env.source && prop.id == this.env.group) {\n                this.set_group_prop(prop);\n            }\n        }\n\n        // update list node and re-sort it\n        this.treelist.update(key, newnode, true);\n\n        // make sure there is no cached address book or contact group selectors\n        this.destroy_entity_selector('addressbook-selector');\n        this.destroy_entity_selector('contactgroup-selector');\n\n        this.triggerEvent('group_update', {\n            id: prop.id, source: prop.source, name: prop.name, li: this.treelist.get_item(key), newid: prop.newid,\n        });\n    };\n\n    this.update_group_commands = function () {\n        var source = this.env.source != '' ? this.env.address_sources[this.env.source] : null,\n            supported = source && source.groups && !source.readonly;\n\n        this.enable_command('group-create', supported);\n        this.enable_command('group-rename', 'group-delete', supported && this.env.group);\n    };\n\n    this.init_edit_field = function (col, elem) {\n        var label = this.env.coltypes[col].label;\n\n        if (!elem) {\n            elem = $('.ff_' + col);\n        }\n\n        if (label && !$('label[for=\"ff_' + col + '\"]').length) {\n            elem.placeholder(label);\n        }\n    };\n\n    this.insert_edit_field = function (col, section, menu) {\n        // just make pre-defined input field visible\n        var elem = $('#ff_' + col);\n\n        if (elem.length) {\n            $('label[for=\"ff_' + col + '\"]').parent().show();\n            elem.show().focus();\n            $(menu).children('option[value=\"' + col + '\"]').prop('disabled', true);\n        } else {\n            var lastelem = $('.ff_' + col),\n                appendcontainer = $('#contactsection' + section + ' .contactcontroller' + col);\n\n            if (!appendcontainer.length) {\n                var sect = $('#contactsection' + section),\n                    lastgroup = $('.contactfieldgroup', sect).last();\n                appendcontainer = $('<fieldset>').addClass('contactfieldgroup contactcontroller' + col);\n                if (lastgroup.length) {\n                    appendcontainer.insertAfter(lastgroup);\n                } else {\n                    sect.prepend(appendcontainer);\n                }\n            }\n\n            if (appendcontainer.get(0).nodeName == 'FIELDSET') {\n                var label, input,\n                    colprop = this.env.coltypes[col],\n                    name_suffix = colprop.limit != 1 ? '[]' : '',\n                    compact = $(menu).data('compact') ? true : false,\n                    input_id = 'ff_' + col + (colprop.count || 0),\n                    row = $('<div>').addClass('row input-group'),\n                    cell = $('<div>').addClass('contactfieldcontent ' + colprop.type);\n\n                // Field label\n                if (colprop.subtypes_select) {\n                    label = $(colprop.subtypes_select);\n                    if (!compact) {\n                        label = $('<div>').addClass('contactfieldlabel label').append(label);\n                    } else {\n                        label.addClass('input-group-prepend');\n                    }\n                } else {\n                    label = $('<label>').addClass('contactfieldlabel label input-group-text')\n                        .attr('for', input_id).text(colprop.label);\n\n                    if (compact) {\n                        label = $('<span class=\"input-group-prepend\">').append(label);\n                    }\n                }\n\n                // Field input\n                if (colprop.type == 'text' || colprop.type == 'date') {\n                    input = $('<input>')\n                        .addClass('form-control ff_' + col)\n                        .attr({\n                            type: 'text', name: '_' + col + name_suffix, size: colprop.size, id: input_id,\n                        });\n\n                    this.init_edit_field(col, input);\n\n                    if (colprop.type == 'date' && $.datepicker) {\n                        input.addClass('datepicker').datepicker();\n                    }\n                } else if (colprop.type == 'textarea') {\n                    input = $('<textarea>')\n                        .addClass('form-control ff_' + col)\n                        .attr({\n                            name: '_' + col + name_suffix, cols: colprop.size, rows: colprop.rows, id: input_id,\n                        });\n\n                    this.init_edit_field(col, input);\n                } else if (colprop.type == 'composite') {\n                    var i, childcol, cp, first, templ, cols = [], suffices = [], content = cell;\n\n                    row.addClass('composite');\n\n                    if (compact) {\n                        content = $('<div class=\"content input-group-text\">');\n                    }\n\n                    // read template for composite field order\n                    if (templ = this.env[col + '_template']) {\n                        for (i = 0; i < templ.length; i++) {\n                            cols.push(templ[i][1]);\n                            suffices.push(templ[i][2]);\n                        }\n                    } else { // list fields according to appearance in colprop\n                        for (childcol in colprop.childs) {\n                            cols.push(childcol);\n                        }\n                    }\n\n                    for (i = 0; i < cols.length; i++) {\n                        childcol = cols[i];\n                        cp = colprop.childs[childcol];\n                        input = $('<input>')\n                            .addClass('form-control ff_' + childcol)\n                            .attr({ type: 'text', name: '_' + childcol + name_suffix, size: cp.size })\n                            .appendTo(content);\n\n                        if (!compact) {\n                            content.append(suffices[i] || ' ');\n                        }\n\n                        this.init_edit_field(childcol, input);\n                        if (!first) {\n                            first = input;\n                        }\n                    }\n\n                    if (compact) {\n                        input = content;\n                    } else {\n                        input = first;\n                    } // set focus to the first of this composite fields\n                } else if (colprop.type == 'select') {\n                    input = $('<select>')\n                        .addClass('custom-select ff_' + col)\n                        .attr({ name: '_' + col + name_suffix, id: input_id });\n\n                    var options = input.attr('options');\n                    options[options.length] = new Option('---', '');\n                    if (colprop.options) {\n                        $.each(colprop.options, function (i, val) {\n                            options[options.length] = new Option(val, i);\n                        });\n                    }\n                }\n\n                if (input) {\n                    var delbutton = $('<a href=\"#del\"></a>')\n                        .addClass('contactfieldbutton deletebutton input-group-text icon delete')\n                        .attr({ title: this.get_label('delete'), rel: col })\n                        .html(this.env.delbutton)\n                        .click(function () {\n                            ref.delete_edit_field(this); return false;\n                        });\n\n                    row.append(label);\n\n                    if (!compact) {\n                        if (colprop.type != 'composite') {\n                            cell.append(input);\n                        }\n                        row.append(cell.append(delbutton));\n                    } else {\n                        row.append(input).append(delbutton);\n                        delbutton.wrap('<span class=\"input-group-append\">');\n                    }\n\n                    row.appendTo(appendcontainer.show());\n\n                    if (input.is('div')) {\n                        input.find('input').first().focus();\n                    } else {\n                        input.first().focus();\n                    }\n\n                    // disable option if limit reached\n                    if (!colprop.count) {\n                        colprop.count = 0;\n                    }\n                    if (++colprop.count == colprop.limit && colprop.limit) {\n                        $(menu).children('option[value=\"' + col + '\"]').prop('disabled', true);\n                    }\n\n                    this.triggerEvent('insert-edit-field', input);\n                }\n            }\n        }\n    };\n\n    this.delete_edit_field = function (elem) {\n        var col = $(elem).attr('rel'),\n            colprop = this.env.coltypes[col],\n            input_group = $(elem).parents('div.row'),\n            fieldset = $(elem).parents('fieldset.contactfieldgroup'),\n            addmenu = fieldset.parent().find('select.addfieldmenu');\n\n        // just clear input but don't hide the last field\n        if (--colprop.count <= 0 && colprop.visible) {\n            input_group.find('input').val('').blur();\n        } else {\n            input_group.remove();\n            // hide entire fieldset if no more rows\n            if (!fieldset.children('div.row').length) {\n                fieldset.hide();\n            }\n        }\n\n        // enable option in add-field selector or insert it if necessary\n        if (addmenu.length) {\n            var option = addmenu.children('option[value=\"' + col + '\"]');\n            if (option.length) {\n                option.prop('disabled', false);\n            } else {\n                option = $('<option>').attr('value', col).html(colprop.label).appendTo(addmenu);\n            }\n            addmenu.show();\n        }\n    };\n\n    this.upload_contact_photo = function (form) {\n        if (form && form.elements._photo.value) {\n            this.async_upload_form(form, 'upload-photo', function (e) {\n                ref.set_busy(false, null, ref.file_upload_id);\n            });\n\n            // display upload indicator\n            this.file_upload_id = this.set_busy(true, 'uploading');\n        }\n    };\n\n    this.replace_contact_photo = function (id) {\n        var img_src = id == '-del-' ? this.env.photo_placeholder\n            : this.env.comm_path + '&_action=photo&_source=' + this.env.source + '&_cid=' + (this.env.cid || 0) + '&_photo=' + id;\n\n        this.set_photo_actions(id);\n        $(this.gui_objects.contactphoto).children('img').attr('src', img_src);\n    };\n\n    this.photo_upload_end = function () {\n        this.set_busy(false, null, this.file_upload_id);\n        delete this.file_upload_id;\n    };\n\n    this.set_photo_actions = function (id) {\n        var n, buttons = this.buttons['upload-photo'];\n        for (n = 0; buttons && n < buttons.length; n++) {\n            $('a#' + buttons[n].id).html(this.get_label(id == '-del-' ? 'addphoto' : 'replacephoto'));\n        }\n\n        $('#ff_photo').val(id);\n        this.enable_command('upload-photo', this.env.coltypes.photo ? true : false);\n        this.enable_command('delete-photo', this.env.coltypes.photo && id != '-del-');\n    };\n\n    // load advanced search page\n    this.advanced_search = function () {\n        var dialog = $('<iframe>').attr('src', this.url('search', { _form: 1, _framed: 1 })),\n            search_func = function () {\n                var valid = false, form = { _adv: 1 };\n\n                $.each($(dialog[0].contentWindow.rcmail.gui_objects.editform).serializeArray(), function () {\n                    if (this.name.match(/^_search/) && this.value != '') {\n                        form[this.name] = this.value;\n                        valid = true;\n                    } else if (this.name == '_scope' && this.value == 'base') {\n                        // use env.last_source as env.source is overwritten by search action\n                        form[this.name] = ref.env.last_source;\n                    }\n                });\n\n                if (valid) {\n                    ref.http_post('search', form, ref.set_busy(true, 'searching'));\n                    return true;\n                }\n            };\n\n        this.simple_dialog(dialog, 'advsearch', search_func, {\n            button: 'search',\n            width: 600,\n            height: 500,\n        });\n\n        return true;\n    };\n\n    // unselect directory/group\n    this.unselect_directory = function () {\n        this.select_folder('');\n        this.enable_command('search-delete', false);\n    };\n\n    // callback for creating a new saved search record\n    this.insert_saved_search = function (name, id) {\n        var key = 'S' + id,\n            link = $('<a>').attr({ href: '#', rel: id })\n                .click(function () {\n                    return ref.command('listsearch', id, this);\n                })\n                .html(name),\n            prop = { name: name, id: id };\n\n        this.savedsearchlist.insert({ id: key, html: link, classes: ['contactsearch'] }, null, 'contactsearch');\n        this.select_folder(key, '', true);\n        this.enable_command('search-delete', true);\n        this.env.search_id = id;\n\n        this.triggerEvent('abook_search_insert', prop);\n    };\n\n    // creates a dialog for saved search\n    this.search_create = function () {\n        var input = $('<input>').attr('type', 'text'),\n            content = $('<label>').text(this.get_label('namex')).append(input);\n\n        this.simple_dialog(content, 'searchsave',\n            function () {\n                var name;\n                if (name = input.val()) {\n                    ref.http_post('search-create', { _search: ref.env.search_request, _name: name },\n                        ref.set_busy(true, 'loading'));\n                    return true;\n                }\n            }\n        );\n    };\n\n    this.search_delete = function () {\n        if (this.env.search_request) {\n            var lock = this.set_busy(true, 'savedsearchdeleting');\n            this.http_post('search-delete', { _sid: this.env.search_id }, lock);\n        }\n    };\n\n    // callback from server upon search-delete command\n    this.remove_search_item = function (id) {\n        if (this.savedsearchlist.remove('S' + id)) {\n            this.triggerEvent('search_delete', { id: id });\n        }\n\n        this.env.search_id = null;\n        this.env.search_request = null;\n        this.list_contacts_clear();\n        this.reset_qsearch();\n        this.enable_command('search-delete', 'search-create', false);\n    };\n\n    this.listsearch = function (id) {\n        var lock = this.set_busy(true, 'searching');\n\n        if (this.contact_list) {\n            this.list_contacts_clear();\n        }\n\n        this.reset_qsearch();\n\n        if (this.savedsearchlist) {\n            this.treelist.select('');\n            this.savedsearchlist.select('S' + id);\n        } else {\n            this.select_folder('S' + id, '', true);\n        }\n\n        // reset vars\n        this.env.current_page = 1;\n        this.http_request('search', { _sid: id }, lock);\n    };\n\n    // display a dialog with QR code image\n    this.qrcode = function () {\n        var img = new Image(300, 300);\n\n        img.src = this.url('addressbook/qrcode', { _source: this.env.source, _cid: this.get_single_cid() });\n\n        return this.simple_dialog(img, 'qrcode', null, {\n            button: false,\n            cancel_button: 'close',\n            width: 300,\n            height: 300,\n        });\n    };\n\n\n    /*********************************************************/\n    /*                 user settings methods                 */\n    /*********************************************************/\n\n    // preferences section select and load options frame\n    this.section_select = function (list) {\n        var win, id = list.get_single_selection();\n\n        if (id && (win = this.get_frame_window(this.env.contentframe))) {\n            this.location_href({ _action: 'edit-prefs', _section: id, _framed: 1 }, win, true);\n        }\n    };\n\n    this.response_select = function (list) {\n        var id = list.get_single_selection();\n\n        this.enable_command('delete', !!id && $.inArray(id, this.env.readonly_responses) < 0);\n\n        if (id) {\n            this.load_response(id, 'edit-response');\n        }\n    };\n\n    // load response record\n    this.load_response = function (id, action) {\n        var win;\n\n        if (win = this.get_frame_window(this.env.contentframe)) {\n            if (id || action == 'add-response') {\n                if (!id) {\n                    this.responses_list.clear_selection();\n                }\n\n                this.location_href({ _action: action, _id: id, _framed: 1 }, win, true);\n            }\n        }\n    };\n\n    this.identity_select = function (list) {\n        var id = list.get_single_selection();\n\n        this.enable_command('delete', !!id && list.rowcount > 1 && this.env.identities_level < 2);\n\n        if (id) {\n            this.load_identity(id, 'edit-identity');\n        }\n    };\n\n    // load identity record\n    this.load_identity = function (id, action) {\n        var win;\n\n        if (win = this.get_frame_window(this.env.contentframe)) {\n            if (id || action == 'add-identity') {\n                if (!id) {\n                    this.identity_list.clear_selection();\n                }\n\n                this.location_href({ _action: action, _iid: id, _framed: 1 }, win, true);\n            }\n        }\n    };\n\n    this.delete_identity = function (id) {\n        if (!id && this.identity_list) {\n            id = this.identity_list.get_single_selection();\n        }\n\n        if (id) {\n            this.confirm_dialog(this.get_label('deleteidentityconfirm'), 'delete', function () {\n                ref.http_post('settings/delete-identity', { _iid: id }, true);\n            });\n        }\n    };\n\n    this.delete_response = function (id) {\n        if (!id && this.responses_list) {\n            id = this.responses_list.get_single_selection();\n        }\n\n        if (id) {\n            this.confirm_dialog(this.get_label('deleteresponseconfirm'), 'delete', function () {\n                ref.http_post('settings/delete-response', { _id: id }, true);\n            });\n        }\n    };\n\n    // Update indetities list (add or update a record)\n    this.update_identity_row = function (id, name, add) {\n        var list = this.identity_list,\n            rid = this.html_identifier(id);\n\n        if (add) {\n            list.insert_row({ id: 'rcmrow' + rid, cols: [{ className: 'mail', innerHTML: name }] });\n            list.select(rid);\n        } else {\n            list.update_row(rid, [name]);\n        }\n    };\n\n    // Update responses list (add or update a record)\n    this.update_response_row = function (id, name, add) {\n        var list = this.responses_list;\n\n        if (add) {\n            list.insert_row({ id: 'rcmrow' + id, cols: [{ className: 'name', innerHTML: name }] });\n            list.select(id);\n        } else {\n            list.update_row(id, [name]);\n        }\n    };\n\n    // Remove response record from the responses list\n    this.remove_response = function (id) {\n        if (this.responses_list) {\n            this.responses_list.remove_row(id);\n            this.show_contentframe(false);\n        }\n\n        this.enable_command('delete', false);\n    };\n\n    // Remove identity record from the identities list\n    this.remove_identity = function (id) {\n        var list = this.identity_list,\n            rid = this.html_identifier(id);\n\n        if (list && id) {\n            list.remove_row(rid);\n            this.show_contentframe(false);\n        }\n\n        this.enable_command('delete', false);\n    };\n\n\n    /*********************************************************/\n    /*                 folder manager methods                */\n    /*********************************************************/\n\n    this.init_subscription_list = function () {\n        var delim = RegExp.escape(this.env.delimiter);\n\n        this.last_sub_rx = RegExp('[' + delim + ']?[^' + delim + ']+$');\n\n        this.subscription_list = new rcube_treelist_widget(this.gui_objects.subscriptionlist, {\n            selectable: true,\n            tabexit: false,\n            parent_focus: true,\n            id_prefix: 'rcmli',\n            id_encode: this.html_identifier_encode,\n            id_decode: this.html_identifier_decode,\n            searchbox: '#foldersearch',\n        });\n\n        this.subscription_list\n            .addEventListener('select', function (node) {\n                ref.subscription_select(node.id);\n            })\n            .addEventListener('collapse', function (node) {\n                ref.folder_collapsed(node);\n            })\n            .addEventListener('expand', function (node) {\n                ref.folder_collapsed(node);\n            })\n            .addEventListener('search', function (p) {\n                if (p.query) {\n                    ref.subscription_select();\n                }\n            })\n            .draggable({ cancel: 'li.mailbox.root,input,div.treetoggle,.custom-control' })\n            .droppable({\n                // @todo: find better way, accept callback is executed for every folder\n                // on the list when dragging starts (and stops), this is slow, but\n                // I didn't find a method to check droptarget on over event\n                accept: function (node) {\n                    if (!node.is('.mailbox')) {\n                        return false;\n                    }\n\n                    var source_folder = ref.folder_id2name(node.attr('id')),\n                        dest_folder = ref.folder_id2name(this.id),\n                        source = ref.env.subscriptionrows[source_folder],\n                        dest = ref.env.subscriptionrows[dest_folder];\n\n                    return source && !source[2]\n                        && dest_folder != source_folder.replace(ref.last_sub_rx, '')\n                        && !dest_folder.startsWith(source_folder + ref.env.delimiter);\n                },\n                drop: function (e, ui) {\n                    var source = ref.folder_id2name(ui.draggable.attr('id')),\n                        dest = ref.folder_id2name(this.id);\n\n                    ref.subscription_move_folder(source, dest);\n                },\n            });\n    };\n\n    this.folder_id2name = function (id) {\n        return id ? ref.html_identifier_decode(id.replace(/^rcmli/, '')) : null;\n    };\n\n    this.subscription_select = function (id) {\n        var folder;\n\n        if (id && id != '*' && (folder = this.env.subscriptionrows[id])) {\n            this.env.mailbox = id;\n            this.show_folder(id);\n            this.enable_command('delete-folder', !folder[2]);\n        } else {\n            this.env.mailbox = null;\n            this.show_contentframe(false);\n            this.subscription_list.select('');\n            this.enable_command('delete-folder', 'purge', false);\n        }\n    };\n\n    this.subscription_move_folder = function (from, to) {\n        if (from && to !== null && from != to && to != from.replace(this.last_sub_rx, '')) {\n            var path = from.split(this.env.delimiter),\n                basename = path.pop(),\n                newname = to === '' || to === '*' ? basename : to + this.env.delimiter + basename;\n\n            if (newname != from) {\n                this.confirm_dialog(this.get_label('movefolderconfirm'), 'move', function () {\n                    ref.http_post('rename-folder', { _folder_oldname: from, _folder_newname: newname },\n                        ref.set_busy(true, 'foldermoving'));\n                }, { button_class: 'save move' });\n            }\n        }\n    };\n\n    // tell server to create and subscribe a new mailbox\n    this.create_folder = function () {\n        this.show_folder('', this.env.mailbox);\n    };\n\n    // delete a specific mailbox with all its messages\n    this.delete_folder = function (name) {\n        if (!name) {\n            name = this.env.mailbox;\n        }\n\n        if (name) {\n            this.confirm_dialog(this.get_label('deletefolderconfirm'), 'delete', function () {\n                ref.http_post('delete-folder', { _mbox: name }, ref.set_busy(true, 'folderdeleting'));\n            });\n        }\n    };\n\n    // Add folder row to the table and initialize it\n    this.add_folder_row = function (id, name, display_name, is_protected, subscribed, class_name, refrow, subfolders) {\n        if (!this.gui_objects.subscriptionlist) {\n            return false;\n        }\n\n        // reset searching\n        if (this.subscription_list.is_search()) {\n            this.subscription_select();\n            this.subscription_list.reset_search();\n        }\n\n        // disable drag-n-drop temporarily\n        // some skins disable dragging in mobile mode, so we have to check if it is still draggable\n        if (this.subscription_list.is_draggable()) {\n            this.subscription_list.draggable('destroy').droppable('destroy');\n        }\n\n        var n, tmp, tmp_name, rowid, collator, pos, p, parent = '',\n            folders = [], list = [], slist = [],\n            list_element = $(this.gui_objects.subscriptionlist),\n            row = refrow ? refrow : $($('li', list_element).get(1)).clone(true);\n\n        if (!row.length) {\n            // Refresh page if we don't have a table row to clone\n            this.goto_url('folders');\n            return false;\n        }\n\n        // set ID, reset css class\n        row.attr({ id: 'rcmli' + this.html_identifier_encode(id), class: class_name });\n\n        if (!refrow || !refrow.length) {\n            // remove old data, subfolders and toggle\n            $('ul,div.treetoggle', row).remove();\n            row.removeData('filtered');\n        }\n\n        // set folder name\n        $('a', row).first().text(display_name).removeAttr('title');\n\n        // update subscription checkbox\n        $('input[name=\"_subscribed[]\"]', row).first().val(id)\n            .prop({ checked: subscribed ? true : false, disabled: is_protected ? true : false });\n\n        // add to folder/row-ID map\n        this.env.subscriptionrows[id] = [name, display_name, false];\n\n        // copy folders data to an array for sorting\n        $.each(this.env.subscriptionrows, function (k, v) {\n            v[3] = k; folders.push(v);\n        });\n\n        try {\n            // use collator if supported (FF29, IE11, Opera15, Chrome24)\n            collator = new Intl.Collator(this.env.locale.replace('_', '-'));\n        } catch (e) {}\n\n        // sort folders\n        folders.sort(function (a, b) {\n            var i, f1, f2,\n                path1 = a[0].split(ref.env.delimiter),\n                path2 = b[0].split(ref.env.delimiter),\n                len = path1.length;\n\n            for (i = 0; i < len; i++) {\n                f1 = path1[i];\n                f2 = path2[i];\n\n                if (f1 !== f2) {\n                    if (f2 === undefined) {\n                        return 1;\n                    }\n                    if (collator) {\n                        return collator.compare(f1, f2);\n                    }\n\n                    return f1 < f2 ? -1 : 1;\n                }\n\n                if (i == len - 1) {\n                    return -1;\n                }\n            }\n        });\n\n        for (n in folders) {\n            p = folders[n][3];\n            // protected folder\n            if (folders[n][2]) {\n                tmp_name = p + this.env.delimiter;\n                // prefix namespace cannot have subfolders (#1488349)\n                if (tmp_name == this.env.prefix_ns) {\n                    continue;\n                }\n                slist.push(p);\n                tmp = tmp_name;\n            }\n            // protected folder's child\n            else if (tmp && p.startsWith(tmp)) {\n                slist.push(p);\n            }\n            // other\n            else {\n                list.push(p);\n                tmp = null;\n            }\n        }\n\n        // check if subfolder of a protected folder\n        for (n = 0; n < slist.length; n++) {\n            if (id.startsWith(slist[n] + this.env.delimiter)) {\n                rowid = slist[n];\n            }\n        }\n\n        // find folder position after sorting\n        for (n = 0; !rowid && n < list.length; n++) {\n            if (n && list[n] == id) {\n                rowid = list[n - 1];\n            }\n        }\n\n        // add row to the table\n        if (rowid && (n = this.subscription_list.get_item(rowid, true))) {\n            // find parent folder\n            if (pos = id.lastIndexOf(this.env.delimiter)) {\n                parent = id.substring(0, pos);\n                parent = this.subscription_list.get_item(parent, true);\n\n                // add required tree elements to the parent if not already there\n                if (!$('div.treetoggle', parent).length) {\n                    $('<div>&nbsp;</div>').addClass('treetoggle collapsed').appendTo(parent);\n                }\n                if (!$('ul', parent).length) {\n                    $('<ul>').css('display', 'none').appendTo(parent);\n                }\n            }\n\n            if (parent && n == parent) {\n                $('ul', parent).first().append(row);\n            } else {\n                while (p = $(n).parent().parent().get(0)) {\n                    if (parent && p == parent) {\n                        break;\n                    }\n                    if (!$(p).is('li.mailbox')) {\n                        break;\n                    }\n                    n = p;\n                }\n\n                $(n).after(row);\n            }\n        } else {\n            list_element.append(row);\n        }\n\n        // add subfolders\n        $.extend(this.env.subscriptionrows, subfolders || {});\n\n        // update list widget\n        this.subscription_list.reset(true);\n        this.subscription_select();\n\n        // expand parent\n        if (parent) {\n            this.subscription_list.expand(this.folder_id2name(parent.id));\n        }\n\n        row = row.show().get(0);\n        if (row.scrollIntoView) {\n            row.scrollIntoView(false);\n        }\n\n        // Let skins to do their magic, e.g. Elastic will fix pretty checkbox\n        if (!refrow) {\n            this.triggerEvent('clonerow', { row: row, id: id });\n        }\n\n        return row;\n    };\n\n    // replace an existing table row with a new folder line (with subfolders)\n    this.replace_folder_row = function (oldid, id, name, display_name, is_protected, class_name) {\n        if (!this.gui_objects.subscriptionlist) {\n            if (this.is_framed()) {\n                // @FIXME: for some reason this 'parent' variable need to be prefixed with 'window.'\n                return window.parent.rcmail.replace_folder_row(oldid, id, name, display_name, is_protected, class_name);\n            }\n\n            return false;\n        }\n\n        // reset searching\n        if (this.subscription_list.is_search()) {\n            this.subscription_select();\n            this.subscription_list.reset_search();\n        }\n\n        var subfolders = {},\n            row = this.subscription_list.get_item(oldid, true),\n            parent = $(row).parent(),\n            old_folder = this.env.subscriptionrows[oldid],\n            prefix_len_id = oldid.length,\n            prefix_len_name = old_folder[0].length,\n            subscribed = $('input[name=\"_subscribed[]\"]', row).first().prop('checked');\n\n        // no renaming, only update class_name\n        if (oldid == id) {\n            $(row).attr('class', class_name || '');\n            return;\n        }\n\n        // update subfolders\n        $('li', row).each(function () {\n            var fname = ref.folder_id2name(this.id),\n                folder = ref.env.subscriptionrows[fname],\n                newid = id + fname.slice(prefix_len_id);\n\n            this.id = 'rcmli' + ref.html_identifier_encode(newid);\n            $('input[name=\"_subscribed[]\"]', this).first().val(newid);\n            folder[0] = name + folder[0].slice(prefix_len_name);\n\n            subfolders[newid] = folder;\n            delete ref.env.subscriptionrows[fname];\n        });\n\n        // get row off the list\n        row = $(row).detach();\n\n        delete this.env.subscriptionrows[oldid];\n\n        // remove parent list/toggle elements if not needed\n        if (parent.get(0) != this.gui_objects.subscriptionlist && !$('li', parent).length) {\n            $('ul,div.treetoggle', parent.parent()).remove();\n        }\n\n        // move the existing table row\n        this.add_folder_row(id, name, display_name, is_protected, subscribed, class_name, row, subfolders);\n    };\n\n    // remove the table row of a specific mailbox from the table\n    this.remove_folder_row = function (folder) {\n        // reset searching\n        if (this.subscription_list.is_search()) {\n            this.subscription_select();\n            this.subscription_list.reset_search();\n        }\n\n        var list = [], row = this.subscription_list.get_item(folder, true);\n\n        // get subfolders if any\n        $('li', row).each(function () {\n            list.push(ref.folder_id2name(this.id));\n        });\n\n        // remove folder row (and subfolders)\n        this.subscription_list.remove(folder);\n\n        // update local list variable\n        list.push(folder);\n        $.each(list, function (i, v) {\n            delete ref.env.subscriptionrows[v];\n        });\n    };\n\n    this.subscribe = function (folder) {\n        this.change_subscription_state(folder, true);\n    };\n\n    this.unsubscribe = function (folder) {\n        this.change_subscription_state(folder, false);\n    };\n\n    this.change_subscription_state = function (folder, state) {\n        if (folder) {\n            var prefix = state ? '' : 'un',\n                lock = this.display_message('folder' + prefix + 'subscribing', 'loading');\n\n            this.http_post(prefix + 'subscribe', { _mbox: folder }, lock);\n\n            // in case this was a list of search results, update also the main list\n            $(this.gui_objects.subscriptionlist).find('input[value=\"' + folder + '\"]').prop('checked', state);\n        }\n    };\n\n\n    // when user select a folder in manager\n    this.show_folder = function (folder, path, force) {\n        var win, target = window,\n            action = folder === '' ? 'add' : 'edit',\n            url = '&_action=' + action + '-folder&_mbox=' + urlencode(folder);\n\n        if (path) {\n            url += '&_path=' + urlencode(path);\n        }\n\n        if (win = this.get_frame_window(this.env.contentframe)) {\n            target = win;\n            url += '&_framed=1';\n        }\n\n        // unselect selected row(s)\n        if (action == 'add') {\n            this.subscription_select('');\n        }\n\n        if (String(target.location.href).indexOf(url) >= 0 && !force) {\n            this.show_contentframe(true);\n        } else {\n            this.location_href(this.env.comm_path + url, target, true);\n        }\n    };\n\n    // disables subscription checkbox (for protected folder)\n    this.disable_subscription = function (folder) {\n        var row = this.subscription_list.get_item(folder, true);\n        if (row) {\n            $('input[name=\"_subscribed[]\"]', row).first().prop('disabled', true);\n        }\n    };\n\n    // resets state of subscription checkbox (e.g. on error)\n    this.reset_subscription = function (folder, state) {\n        var row = this.subscription_list.get_item(folder, true);\n        if (row) {\n            $('input[name=\"_subscribed[]\"]', row).first().prop('checked', state);\n        }\n    };\n\n    this.folder_size = function (folder) {\n        var lock = this.set_busy(true, 'loading');\n        this.http_post('folder-size', { _mbox: folder }, lock);\n    };\n\n    this.folder_size_update = function (size) {\n        $('#folder-size').replaceWith(size);\n    };\n\n    // filter folders by namespace\n    this.folder_filter = function (prefix) {\n        this.subscription_list.reset_search();\n\n        this.subscription_list.container.children('li').each(function () {\n            var i, folder = ref.folder_id2name(this.id);\n            // show all folders\n            if (prefix == '---') {\n                // do nothing\n            }\n            // got namespace prefix\n            else if (prefix) {\n                if (folder !== prefix) {\n                    $(this).data('filtered', true).hide();\n                    return;\n                }\n            }\n            // no namespace prefix, filter out all other namespaces\n            else {\n                // first get all namespace roots\n                for (i in ref.env.ns_roots) {\n                    if (folder === ref.env.ns_roots[i]) {\n                        $(this).data('filtered', true).hide();\n                        return;\n                    }\n                }\n            }\n\n            $(this).removeData('filtered').show();\n        });\n    };\n\n    /*********************************************************/\n    /*                   GUI functionality                   */\n    /*********************************************************/\n\n    this.init_button = function (cmd, prop) {\n        var elm = document.getElementById(prop.id);\n        if (!elm) {\n            return;\n        }\n\n        var preload = false;\n        if (prop.type == 'image') {\n            elm = elm.parentNode;\n            preload = true;\n        }\n\n        elm._command = cmd;\n        elm._id = prop.id;\n\n        if (prop.sel) {\n            elm.onmousedown = function (e) {\n                return ref.button_sel(this._command, this._id);\n            };\n            elm.onmouseup = function (e) {\n                return ref.button_out(this._command, this._id);\n            };\n            if (preload) {\n                new Image().src = prop.sel;\n            }\n        }\n\n        if (prop.over) {\n            elm.onmouseover = function (e) {\n                return ref.button_over(this._command, this._id);\n            };\n            elm.onmouseout = function (e) {\n                return ref.button_out(this._command, this._id);\n            };\n            if (preload) {\n                new Image().src = prop.over;\n            }\n        }\n    };\n\n    // set event handlers on registered buttons\n    this.init_buttons = function () {\n        for (var cmd in this.buttons) {\n            if (typeof cmd !== 'string') {\n                continue;\n            }\n\n            for (var i = 0; i < this.buttons[cmd].length; i++) {\n                this.init_button(cmd, this.buttons[cmd][i]);\n            }\n        }\n    };\n\n    // set button to a specific state\n    this.set_button = function (command, state) {\n        var n, button, obj, a_buttons = this.buttons[command],\n            len = a_buttons ? a_buttons.length : 0;\n\n        for (n = 0; n < len; n++) {\n            button = a_buttons[n];\n            obj = document.getElementById(button.id);\n\n            if (!obj || button.status === state) {\n                continue;\n            }\n\n            // get default/passive setting of the button\n            if (button.type == 'image' && !button.status) {\n                button.pas = obj._original_src ? obj._original_src : obj.src;\n                // respect PNG fix on IE browsers\n                if (obj.runtimeStyle && obj.runtimeStyle.filter && obj.runtimeStyle.filter.match(/src=['\"]([^'\"]+)['\"]/)) {\n                    button.pas = RegExp.$1;\n                }\n            } else if (!button.status) {\n                button.pas = String(obj.className);\n            }\n\n            button.status = state;\n\n            // set image according to button state\n            if (button.type == 'image' && button[state]) {\n                obj.src = button[state];\n            }\n            // set class name according to button state\n            else if (button[state] !== undefined) {\n                obj.className = button[state];\n            }\n\n            // disable/enable input buttons\n            if (button.type == 'input' || button.type == 'button') {\n                obj.disabled = state == 'pas';\n            } else {\n                $(obj).attr({\n                    tabindex: state == 'pas' || state == 'sel' ? '-1' : ($(obj).attr('data-tabindex') || '0'),\n                    'aria-disabled': state == 'pas' || state == 'sel' ? 'true' : 'false',\n                });\n            }\n        }\n    };\n\n    // display a specific alttext\n    this.set_alttext = function (command, label) {\n        var n, button, obj, link, label,\n            a_buttons = this.buttons[command],\n            len = a_buttons ? a_buttons.length : 0;\n\n        for (n = 0; n < len; n++) {\n            button = a_buttons[n];\n            obj = document.getElementById(button.id);\n            label = this.get_label(label);\n\n            if (obj && button.type == 'image') {\n                obj.setAttribute('alt', label);\n                if ((link = obj.parentNode) && link.tagName.toLowerCase() == 'a') {\n                    link.setAttribute('title', label);\n                }\n            } else if (obj) {\n                obj.setAttribute('title', label);\n            }\n        }\n    };\n\n    // mouse over button\n    this.button_over = function (command, id) {\n        this.button_event(command, id, 'over');\n    };\n\n    // mouse down on button\n    this.button_sel = function (command, id) {\n        this.button_event(command, id, 'sel');\n    };\n\n    // mouse out of button\n    this.button_out = function (command, id) {\n        this.button_event(command, id, 'act');\n    };\n\n    // event of button\n    this.button_event = function (command, id, event) {\n        var n, button, obj, a_buttons = this.buttons[command],\n            len = a_buttons ? a_buttons.length : 0;\n\n        for (n = 0; n < len; n++) {\n            button = a_buttons[n];\n            if (button.id == id && button.status == 'act') {\n                if (button[event] && (obj = document.getElementById(button.id))) {\n                    obj[button.type == 'image' ? 'src' : 'className'] = button[event];\n                }\n\n                if (event == 'sel') {\n                    this.buttons_sel[id] = command;\n                }\n            }\n        }\n    };\n\n    // write to the document/window title\n    this.set_pagetitle = function (title) {\n        if (title && document.title) {\n            document.title = title;\n        }\n    };\n\n    // display a system message, list of types in common.css (below #message definition)\n    this.display_message = function (msg, type, timeout, key) {\n        if (msg && msg.length && /^[a-z._]+$/.test(msg)) {\n            msg = this.get_label(msg);\n        }\n\n        // pass command to parent window\n        if (this.is_framed()) {\n            return parent.rcmail.display_message(msg, type, timeout);\n        }\n\n        if (!this.gui_objects.message) {\n            // save message in order to display after page loaded\n            if (type != 'loading') {\n                this.pending_message = [msg, type, timeout, key];\n            }\n            return 1;\n        }\n\n        if (!type) {\n            type = 'notice';\n        } else if (type == 'loading') {\n            if (!key) {\n                key = 'loading';\n            }\n            if (!timeout) {\n                timeout = this.env.request_timeout * 1000;\n            }\n            if (!msg) {\n                msg = this.get_label('loading');\n            }\n        }\n\n        if (!key) {\n            key = this.html_identifier(msg);\n        }\n\n        var date = new Date(),\n            id = type + date.getTime();\n\n        if (!timeout) {\n            switch (type) {\n                case 'error':\n                case 'warning':\n                    timeout = this.message_time * 2;\n                    break;\n                case 'uploading':\n                    timeout = 0;\n                    break;\n                default:\n                    timeout = this.message_time;\n            }\n        }\n\n        // The same message is already displayed\n        if (this.messages[key]) {\n            // replace label\n            if (this.messages[key].obj) {\n                $('div.content', this.messages[key].obj).html(msg);\n            }\n\n            // store label in stack\n            if (type == 'loading') {\n                this.messages[key].labels.push({ id: id, msg: msg });\n            }\n\n            // add element and set timeout\n            this.messages[key].elements.push(id);\n            setTimeout(function () {\n                ref.hide_message(id, type == 'loading');\n            }, timeout);\n\n            return id;\n        }\n\n        // create DOM object and display it\n        var obj = $('<div>').addClass(type + ' content').html(msg).data('key', key),\n            cont = $(this.gui_objects.message).append(obj).show();\n\n        this.messages[key] = { obj: obj, elements: [id] };\n\n        if (type == 'loading') {\n            this.messages[key].labels = [{ id: id, msg: msg }];\n        } else if (type != 'uploading') {\n            obj.click(function () {\n                return ref.hide_message(obj);\n            })\n                .attr('role', 'alert');\n        }\n\n        this.triggerEvent('message', {\n            message: msg, type: type, timeout: timeout, object: obj,\n        });\n\n        if (timeout > 0) {\n            setTimeout(function () {\n                ref.hide_message(id, type != 'loading');\n            }, timeout);\n        }\n\n        return id;\n    };\n\n    // Make a message to disappear\n    this.hide_message = function (obj, fade) {\n        // pass command to parent window\n        if (this.is_framed()) {\n            return parent.rcmail.hide_message(obj, fade);\n        }\n\n        if (!this.gui_objects.message) {\n            return;\n        }\n\n        var k, n, i, o, m = this.messages;\n\n        // Hide message by object, don't use for 'loading'!\n        if (typeof obj === 'object') {\n            o = $(obj);\n            k = o.data('key');\n            this.hide_message_object(o, fade);\n            if (m[k]) {\n                delete m[k];\n            }\n        }\n        // Hide message by id\n        else {\n            for (k in m) {\n                for (n in m[k].elements) {\n                    if (m[k] && m[k].elements[n] == obj) {\n                        m[k].elements.splice(n, 1);\n                        // hide DOM element if last instance is removed\n                        if (!m[k].elements.length) {\n                            this.hide_message_object(m[k].obj, fade);\n                            delete m[k];\n                        }\n                        // set pending action label for 'loading' message\n                        else if (k == 'loading') {\n                            for (i in m[k].labels) {\n                                if (m[k].labels[i].id == obj) {\n                                    delete m[k].labels[i];\n                                } else {\n                                    o = m[k].labels[i].msg;\n                                    $('div.content', m[k].obj).html(o);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    // hide message object and remove from the DOM\n    this.hide_message_object = function (o, fade) {\n        if (fade) {\n            o.fadeOut(600, function () {\n                $(this).remove();\n            });\n        } else {\n            o.hide().remove();\n        }\n    };\n\n    // remove all messages immediately\n    this.clear_messages = function () {\n        // pass command to parent window\n        if (this.is_framed()) {\n            return parent.rcmail.clear_messages();\n        }\n\n        var k, n, m = this.messages;\n\n        for (k in m) {\n            for (n in m[k].elements) {\n                if (m[k].obj) {\n                    this.hide_message_object(m[k].obj);\n                }\n            }\n        }\n\n        this.messages = {};\n    };\n\n    // display uploading message with progress indicator\n    // data should contain: name, total, current, percent, text\n    this.display_progress = function (data) {\n        if (!data || !data.name) {\n            return;\n        }\n\n        var msg = this.messages['progress' + data.name];\n\n        if (!data.label) {\n            data.label = this.get_label('uploadingmany');\n        }\n\n        if (!msg) {\n            if (!data.percent || data.percent < 100) {\n                this.display_message(data.label, 'uploading', 0, 'progress' + data.name);\n            }\n            return;\n        }\n\n        if (!data.total || data.percent >= 100) {\n            this.hide_message(msg.obj);\n            return;\n        }\n\n        if (data.text) {\n            data.label += ' ' + data.text;\n        }\n\n        msg.obj.text(data.label);\n    };\n\n    // open a jquery UI dialog with the given content\n    this.show_popup_dialog = function (content, title, buttons, options) {\n        // forward call to parent window\n        if (this.is_framed()) {\n            return parent.rcmail.show_popup_dialog(content, title, buttons, options);\n        }\n\n        var popup = $('<div class=\"popup\">');\n\n        if (typeof content === 'object') {\n            popup.append(content);\n            if ($(content).is('iframe')) {\n                popup.addClass('iframe');\n            }\n        } else {\n            popup.html(content);\n        }\n\n        // assign special classes to dialog buttons\n        var i = 0, fn = function (button, classes, idx) {\n            if (typeof button === 'function') {\n                button = {\n                    click: button,\n                    text: idx,\n                    class: classes,\n                };\n            } else {\n                buttons.class = classes;\n            }\n\n            return button;\n        };\n\n        if (options && options.button_classes) {\n            $.each(buttons, function (idx, button) {\n                var cl = options.button_classes[i];\n                if (cl) {\n                    buttons[idx] = fn(button, cl, idx);\n                }\n                i++;\n            });\n        }\n\n        options = $.extend({\n            title: title,\n            buttons: buttons,\n            modal: true,\n            resizable: true,\n            width: 500,\n            close: function (event, ui) {\n                $(this).remove();\n            },\n        }, options || {});\n\n        popup.dialog(options);\n\n        // Remember the jQuery instance (window), useful when closing the dialog\n        popup[0].jqref = $;\n\n        if (options.width) {\n            popup.width(options.width);\n        }\n        if (options.height) {\n            popup.height(options.height);\n        }\n\n        var dialog = popup.parent();\n\n        if (!options.noresize) {\n            // resize and center popup\n            var win = $(window), w = win.width(), h = win.height(),\n                width = popup.width(),\n                height = options.height || (popup[0].scrollHeight + 20),\n                titlebar_height = $('.ui-dialog-titlebar', dialog).outerHeight() || 0,\n                buttonpane_height = $('.ui-dialog-buttonpane', dialog).outerHeight() || 0,\n                padding = (parseInt(dialog.css('padding-top'), 10) + parseInt(popup.css('padding-top'), 10)) * 2;\n\n            popup.dialog('option', {\n                height: Math.min(h - 40, height + titlebar_height + buttonpane_height + padding + 2),\n                width: Math.min(w - 20, width + 28),\n            });\n        } else {\n            popup.css('width', 'auto');\n        }\n\n        // Don't propagate keyboard events to the UI below the dialog (#6055)\n        dialog.on('keydown keyup', function (e) {\n            e.stopPropagation();\n        });\n\n        // Add Enter key handler to the input, click the 'mainaction' button\n        dialog.find('input[data-submit]').on('keydown', function (e) {\n            if (e.which == 13) {\n                dialog.find('.ui-dialog-buttonpane button.mainaction').click();\n            }\n        });\n\n        this.triggerEvent('dialog-open', { obj: popup });\n\n        return popup;\n    };\n\n    // show_popup_dialog() wrapper for simple dialogs with action and Cancel buttons\n    this.simple_dialog = function (content, title, action_func, options) {\n        if (!options) {\n            options = {};\n        }\n\n        var title = this.get_label(title),\n            save_label = options.button || 'save',\n            save_class = options.button_class || save_label.replace(/^[^\\.]+\\./i, ''),\n            cancel_label = options.cancel_button || 'cancel',\n            cancel_class = options.cancel_class || cancel_label.replace(/^[^\\.]+\\./i, ''),\n            close_func = function (e, ui, dialog) {\n                if (!dialog) {\n                    dialog = this;\n                }\n\n                // The dialog might got open in the current window, but also any of its parents (#8627)\n                // We have to use the jQuery object that did invoke the dialog, set in show_popup_dialog()\n                dialog.jqref(dialog).dialog('close');\n                if (options.cancel_func) {\n                    options.cancel_func(e, ref);\n                }\n            },\n            buttons = [{\n                text: this.get_label(cancel_label),\n                class: cancel_class.replace(/close/i, 'cancel'),\n                click: close_func,\n            }];\n\n        if (!action_func) {\n            buttons[0].class += ' mainaction';\n        } else {\n            buttons.unshift({\n                text: this.get_label(save_label),\n                class: 'mainaction ' + save_class,\n                click: function (e, ui) {\n                    if (action_func(e, ref)) {\n                        close_func(e, ui, this);\n                    }\n                },\n            });\n        }\n\n        return this.show_popup_dialog(content, title, buttons, options);\n    };\n\n    // show_popup_dialog() wrapper for alert() type dialogs\n    this.alert_dialog = function (content, action, options) {\n        options = $.extend(options || {}, {\n            cancel_button: 'ok',\n            cancel_class: 'save',\n            cancel_func: action,\n            noresize: true,\n        });\n\n        return this.simple_dialog(content, options.title || 'alerttitle', null, options);\n    };\n\n    // simple_dialog() wrapper for confirm() type dialogs\n    this.confirm_dialog = function (content, button_label, action, options) {\n        var action_func = function (e, ref) {\n            action(e, ref); return true;\n        };\n\n        options = $.extend(options || {}, {\n            button: button_label || 'continue',\n            noresize: true,\n        });\n\n        return this.simple_dialog(content, options.title || 'confirmationtitle', action_func, options);\n    };\n\n    // enable/disable buttons for page shifting\n    this.set_page_buttons = function () {\n        this.enable_command('nextpage', 'lastpage', this.env.pagecount > this.env.current_page);\n        this.enable_command('previouspage', 'firstpage', this.env.current_page > 1);\n\n        this.update_pagejumper();\n    };\n\n    // mark a mailbox as selected and set environment variable\n    this.select_folder = function (name, prefix, encode) {\n        if (this.savedsearchlist) {\n            this.savedsearchlist.select('');\n        }\n\n        if (this.treelist) {\n            this.treelist.select(name);\n        } else if (this.gui_objects.folderlist) {\n            $('li.selected', this.gui_objects.folderlist).removeClass('selected');\n            $(this.get_folder_li(name, prefix, encode)).addClass('selected');\n\n            // trigger event hook\n            this.triggerEvent('selectfolder', { folder: name, prefix: prefix });\n        }\n    };\n\n    // adds a class to selected folder\n    this.mark_folder = function (name, class_name, prefix, encode) {\n        $(this.get_folder_li(name, prefix, encode)).addClass(class_name);\n        this.triggerEvent('markfolder', { folder: name, mark: class_name, status: true });\n    };\n\n    // adds a class to selected folder\n    this.unmark_folder = function (name, class_name, prefix, encode) {\n        $(this.get_folder_li(name, prefix, encode)).removeClass(class_name);\n        this.triggerEvent('markfolder', { folder: name, mark: class_name, status: false });\n    };\n\n    // helper method to find a folder list item\n    this.get_folder_li = function (name, prefix, encode) {\n        if (!prefix) {\n            prefix = 'rcmli';\n        }\n\n        if (this.gui_objects.folderlist) {\n            name = this.html_identifier(name, encode);\n            return document.getElementById(prefix + name);\n        }\n    };\n\n    // for reordering column array (Konqueror workaround)\n    // and for setting some message list global variables\n    this.set_message_coltypes = function (cols, repl, smart_col) {\n        // update list mode columns list\n        this.env.listcols = cols;\n\n        // reset message list cols\n        this.msglist_setup(this.env.layout);\n\n        var list = this.message_list,\n            thead = list ? list.thead : null,\n            repl, cell, col, c, n, len, tr,\n            listcols = this.env.msglist_cols;\n\n        if (!this.env.coltypes) {\n            this.env.coltypes = {};\n        }\n\n        // replace old column headers\n        if (thead) {\n            if (repl) {\n                thead.innerHTML = '';\n                tr = document.createElement('tr');\n\n                for (n in listcols) {\n                    c = listcols[n];\n                    cell = document.createElement('th');\n                    cell.innerHTML = repl[c].html || '';\n                    if (repl[c].id) {\n                        cell.id = repl[c].id;\n                    }\n                    if (repl[c].className) {\n                        cell.className = repl[c].className;\n                    }\n                    tr.appendChild(cell);\n                }\n\n                if (list.checkbox_selection) {\n                    list.insert_checkbox(tr, 'thead');\n                }\n\n                thead.appendChild(tr);\n            }\n\n            for (n = 0, len = listcols.length; n < len; n++) {\n                col = listcols[list.checkbox_selection ? n - 1 : n];\n                if ((cell = thead.rows[0].cells[n]) && (col == 'from' || col == 'to' || col == 'fromto')) {\n                    $(cell).attr('rel', col).find('span,a').text(this.get_label(col == 'fromto' ? smart_col : col));\n                }\n            }\n        }\n\n        this.env.subject_col = null;\n        this.env.flagged_col = null;\n        this.env.status_col = null;\n\n        if (this.env.coltypes.folder) {\n            this.env.coltypes.folder.hidden = !(this.env.search_request || this.env.search_id) || this.env.search_scope == 'base';\n        }\n\n        if ((n = $.inArray('subject', listcols)) >= 0) {\n            this.env.subject_col = n;\n            if (list) {\n                list.subject_col = n;\n            }\n        }\n        if ((n = $.inArray('flag', listcols)) >= 0) {\n            this.env.flagged_col = n;\n        }\n        if ((n = $.inArray('status', listcols)) >= 0) {\n            this.env.status_col = n;\n        }\n\n        if (list) {\n            list.hide_column('folder', (this.env.coltypes.folder && this.env.coltypes.folder.hidden) || $.inArray('folder', listcols) < 0);\n            list.init_header();\n        }\n    };\n\n    // replace content of row count display\n    this.set_rowcount = function (text, mbox) {\n        // #1487752\n        if (mbox && mbox != this.env.mailbox) {\n            return false;\n        }\n\n        $(this.gui_objects.countdisplay).html(text);\n\n        // update page navigation buttons\n        this.set_page_buttons();\n    };\n\n    // replace content of mailboxname display\n    this.set_mailboxname = function (content) {\n        if (this.gui_objects.mailboxname && content) {\n            this.gui_objects.mailboxname.innerHTML = content;\n        }\n    };\n\n    // replace content of quota display\n    this.set_quota = function (content) {\n        if (!content || !content.total) {\n            return;\n        }\n        if (this.gui_objects.quotadisplay && content.type == 'text') {\n            $(this.gui_objects.quotadisplay).text((content.percent || 0) + '%').attr('title', content.title || '');\n        }\n\n        this.triggerEvent('setquota', content);\n        this.env.quota_content = content;\n    };\n\n    // update trash folder state\n    this.set_trash_count = function (count) {\n        this[(count ? 'un' : '') + 'mark_folder'](this.env.trash_mailbox, 'empty', '', true);\n    };\n\n    // update the mailboxlist\n    this.set_unread_count = function (mbox, count, set_title, mark) {\n        if (!this.gui_objects.mailboxlist) {\n            return false;\n        }\n\n        this.env.unread_counts[mbox] = count;\n        this.set_unread_count_display(mbox, set_title);\n\n        if (mark) {\n            this.mark_folder(mbox, mark, '', true);\n        } else if (!count) {\n            this.unmark_folder(mbox, 'recent', '', true);\n        }\n\n        this.mark_all_read_state();\n        this.triggerEvent('set-unread-count', { mbox: mbox, count: count });\n    };\n\n    // update the mailbox count display\n    this.set_unread_count_display = function (mbox, set_title) {\n        var reg, link, text_obj, item, mycount, childcount, div;\n\n        if (item = this.get_folder_li(mbox, '', true)) {\n            mycount = this.env.unread_counts[mbox] ? this.env.unread_counts[mbox] : 0;\n            link = $(item).children('a').eq(0);\n            text_obj = link.children('span.unreadcount');\n            if (!text_obj.length && mycount) {\n                text_obj = $('<span>').addClass('unreadcount skip-content').appendTo(link);\n            }\n            reg = /\\s+\\([0-9]+\\)$/i;\n\n            childcount = 0;\n            if ((div = item.getElementsByTagName('div')[0])\n                && div.className.match(/collapsed/)\n            ) {\n                // add children's counters\n                for (var k in this.env.unread_counts) {\n                    if (k.startsWith(mbox + this.env.delimiter)) {\n                        childcount += this.env.unread_counts[k];\n                    }\n                }\n            }\n\n            if (mycount && text_obj.length) {\n                text_obj.html(this.env.unreadwrap.replace(/%[sd]/, mycount));\n            } else if (text_obj.length) {\n                text_obj.remove();\n            }\n\n            // set parent's display\n            reg = new RegExp(RegExp.escape(this.env.delimiter) + '[^' + RegExp.escape(this.env.delimiter) + ']+$');\n            if (mbox.match(reg)) {\n                this.set_unread_count_display(mbox.replace(reg, ''), false);\n            }\n\n            // set the right classes\n            if ((mycount + childcount) > 0) {\n                $(item).addClass('unread');\n            } else {\n                $(item).removeClass('unread');\n            }\n        }\n\n        // set unread count to window title\n        reg = /^\\([0-9]+\\)\\s+/i;\n        if (set_title && document.title) {\n            var new_title = '',\n                doc_title = String(document.title);\n\n            if (mycount && doc_title.match(reg)) {\n                new_title = doc_title.replace(reg, '(' + mycount + ') ');\n            } else if (mycount) {\n                new_title = '(' + mycount + ') ' + doc_title;\n            } else {\n                new_title = doc_title.replace(reg, '');\n            }\n\n            this.set_pagetitle(new_title);\n        }\n    };\n\n    // display fetched raw headers\n    this.set_headers = function (content) {\n        if (this.gui_objects.all_headers_box && content) {\n            $(this.gui_objects.all_headers_box).html(content).show();\n        }\n    };\n\n    // display all-headers row and fetch raw message headers\n    this.show_headers = function (props, elem) {\n        if (!this.gui_objects.all_headers_row || !this.gui_objects.all_headers_box || !this.env.uid) {\n            return;\n        }\n\n        $(elem).removeClass('show-headers').addClass('hide-headers');\n        $(this.gui_objects.all_headers_row).show();\n        elem.onclick = function () {\n            ref.command('hide-headers', '', elem);\n        };\n\n        // fetch headers only once\n        if (!this.gui_objects.all_headers_box.innerHTML) {\n            this.http_request('headers', { _uid: this.env.uid, _mbox: this.env.mailbox },\n                this.display_message('', 'loading')\n            );\n        }\n    };\n\n    // hide all-headers row\n    this.hide_headers = function (props, elem) {\n        if (!this.gui_objects.all_headers_row || !this.gui_objects.all_headers_box) {\n            return;\n        }\n\n        $(elem).removeClass('hide-headers').addClass('show-headers');\n        $(this.gui_objects.all_headers_row).hide();\n        elem.onclick = function () {\n            ref.command('show-headers', '', elem);\n        };\n    };\n\n    // create folder selector popup\n    this.folder_selector = function (event, callback) {\n        this.entity_selector('folder-selector', callback, this.env.mailboxes_list, function (obj, a) {\n            var folder = ref.env.mailboxes[obj],\n                id = folder.id,\n                depth = folder.level || 0,\n                row = $('<li>');\n\n            if (folder.virtual) {\n                a.addClass('virtual').attr({ 'aria-disabled': 'true', tabindex: '-1' });\n            } else {\n                a.addClass('active').data('id', folder.id);\n            }\n\n            if (folder.class) {\n                row.addClass(folder.class);\n            }\n\n            // set indentation level\n            a.css('padding-left', depth ? (depth * 16) + 'px' : 0);\n\n            // add folder name element\n            a.append($('<span>').text(folder.name));\n\n            return row.append(a);\n        }, event);\n    };\n\n    // create addressbook selector popup\n    this.addressbook_selector = function (event, callback) {\n        // build addressbook + groups list\n        var combined_sources = [];\n\n        // check we really need it before processing\n        if (!this.entity_selectors['addressbook-selector']) {\n            $.each(this.env.address_sources, function () {\n                if (!this.readonly) {\n                    var source = this;\n                    combined_sources.push(source);\n\n                    $.each(ref.env.contactgroups, function () {\n                        if (source.id === this.source) {\n                            combined_sources.push(this);\n                        }\n                    });\n                }\n            });\n        }\n\n        this.entity_selector('addressbook-selector', callback, combined_sources, function (obj, a) {\n            if (obj.type == 'group') {\n                a.attr('rel', obj.source + ':' + obj.id)\n                    .addClass('contactgroup active')\n                    .data({ source: obj.source, gid: obj.id, id: obj.source + ':' + obj.id })\n                    .css('padding-left', '16px');\n            } else {\n                a.addClass('addressbook active').data('id', obj.id);\n            }\n            a.append($('<span>').text(obj.name));\n\n            return $('<li>').append(a);\n        }, event);\n    };\n\n    // create contactgroup selector popup\n    this.contactgroup_selector = function (event, callback) {\n        this.entity_selector('contactgroup-selector', callback, this.env.contactgroups, function (obj, a) {\n            if (ref.env.source === obj.source) {\n                a.addClass('contactgroup active')\n                    .data({ id: obj.id })\n                    .append($('<span>').text(obj.name));\n\n                return $('<li>').append(a);\n            }\n        }, event);\n    };\n\n    // create selector popup (eg for folders or address books), position and display it\n    this.entity_selector = function (name, click_callback, entity_list, list_callback, event) {\n        var container = this.entity_selectors[name];\n\n        if (!container) {\n            var rows = [],\n                container = $('<div>').attr('id', name).addClass('popupmenu'),\n                ul = $('<ul>').addClass('toolbarmenu menu'),\n                link = document.createElement('a');\n\n            link.href = '#';\n            link.className = 'icon';\n\n            // loop over entity list\n            $.each(entity_list, function (i) {\n                var a = $(link.cloneNode(false)).attr('rel', this.id);\n                rows.push(list_callback(this, a, i));\n            });\n\n            ul.append(rows).appendTo(container);\n\n            // temporarily show element to calculate its size\n            container.css({ left: '-1000px', top: '-1000px' })\n                .appendTo(document.body).show();\n\n            // set max-height if the list is long\n            if (rows.length > 10) {\n                container.css('max-height', $('li', container)[0].offsetHeight * 10 + 9);\n            }\n\n            // register delegate event handler for folder item clicks\n            container.on('click', 'a.active', function (e) {\n                container.data('callback')($(this).data('id'), this);\n            });\n\n            this.entity_selectors[name] = container;\n        }\n\n        container.data('callback', click_callback);\n\n        // position menu on the screen\n        this.show_menu(name, true, event);\n    };\n\n    this.destroy_entity_selector = function (name) {\n        $('#' + name).remove();\n        delete this.entity_selectors[name];\n        this.triggerEvent('destroy-entity-selector', { name: name });\n    };\n\n    /***********************************************/\n    /*             popup menu functions            */\n    /***********************************************/\n\n    // Show/hide a specific popup menu\n    this.show_menu = function (prop, show, event) {\n        var name = typeof prop === 'object' ? prop.menu : prop,\n            obj = $('#' + name),\n            ref = event && event.target ? $(event.target) : $(obj.attr('rel') || '#' + name + 'link'),\n            keyboard = rcube_event.is_keyboard(event),\n            align = obj.attr('data-align') || '',\n            stack = false;\n\n        // find \"real\" button element\n        if (ref.get(0).tagName != 'A' && ref.closest('a').length) {\n            ref = ref.closest('a');\n        }\n\n        if (typeof prop === 'string') {\n            prop = { menu: name };\n        }\n\n        // let plugins or skins provide the menu element\n        if (!obj.length) {\n            obj = this.triggerEvent('menu-get', { name: name, props: prop, originalEvent: event });\n        }\n\n        if (!obj || !obj.length) {\n            // just delegate the action to subscribers\n            return this.triggerEvent(show === false ? 'menu-close' : 'menu-open', { name: name, props: prop, originalEvent: event });\n        }\n\n        // move element to top for proper absolute positioning\n        obj.appendTo(document.body);\n\n        if (typeof show === 'undefined') {\n            show = obj.is(':visible') ? false : true;\n        }\n\n        if (show && ref.length) {\n            var win = $(window),\n                pos = ref.offset(),\n                above = align.indexOf('bottom') >= 0;\n\n            stack = ref.attr('role') == 'menuitem' || ref.closest('[role=menuitem]').length > 0;\n\n            ref.offsetWidth = ref.outerWidth();\n            ref.offsetHeight = ref.outerHeight();\n            if (!above && pos.top + ref.offsetHeight + obj.height() > win.height()) {\n                above = true;\n            }\n            if (align.indexOf('right') >= 0) {\n                pos.left = pos.left + ref.outerWidth() - obj.width();\n            } else if (stack) {\n                pos.left = pos.left + ref.offsetWidth - 5;\n                pos.top -= ref.offsetHeight;\n            }\n            if (pos.left + obj.width() > win.width()) {\n                pos.left = win.width() - obj.width() - 12;\n            }\n            pos.top = Math.max(0, pos.top + (above ? -obj.height() : ref.offsetHeight));\n            obj.css({ left: pos.left + 'px', top: pos.top + 'px' });\n        }\n\n        // add menu to stack\n        if (show) {\n            // truncate stack down to the one containing the ref link\n            for (var i = this.menu_stack.length - 1; stack && i >= 0; i--) {\n                if (!$(ref).parents('#' + this.menu_stack[i]).length && $(event.target).parent().attr('role') != 'menuitem') {\n                    this.hide_menu(this.menu_stack[i], event);\n                }\n            }\n            if (stack && this.menu_stack.length) {\n                obj.data('parent', $.last(this.menu_stack));\n                obj.css('z-index', ($('#' + $.last(this.menu_stack)).css('z-index') || 0) + 1);\n            } else if (!stack && this.menu_stack.length) {\n                this.hide_menu(this.menu_stack[0], event);\n            }\n\n            obj.show().attr('aria-hidden', 'false').data('opener', ref.attr('aria-expanded', 'true').get(0));\n            this.triggerEvent('menu-open', {\n                name: name, obj: obj, props: prop, originalEvent: event,\n            });\n            this.menu_stack.push(name);\n\n            this.menu_keyboard_active = show && keyboard;\n            if (this.menu_keyboard_active) {\n                this.focused_menu = name;\n                obj.find('a,input:not(:disabled)').not('[aria-disabled=true]').first().focus();\n            }\n        } else { // close menu\n            this.hide_menu(name, event);\n        }\n\n        return show;\n    };\n\n    // hide the given popup menu (and its children)\n    this.hide_menu = function (name, event) {\n        if (!this.menu_stack.length) {\n            // delegate to subscribers\n            this.triggerEvent('menu-close', { name: name, props: { menu: name }, originalEvent: event });\n            return;\n        }\n\n        var obj, keyboard = rcube_event.is_keyboard(event);\n        for (var j = this.menu_stack.length - 1; j >= 0; j--) {\n            obj = $('#' + this.menu_stack[j]).hide().attr('aria-hidden', 'true').data('parent', false);\n            this.triggerEvent('menu-close', {\n                name: this.menu_stack[j], obj: obj, props: { menu: this.menu_stack[j] }, originalEvent: event,\n            });\n            if (this.menu_stack[j] == name) {\n                j = -1; // stop loop\n                if (obj.data('opener')) {\n                    $(obj.data('opener')).attr('aria-expanded', 'false');\n                    if (keyboard) {\n                        obj.data('opener').focus();\n                    }\n                }\n            }\n            this.menu_stack.pop();\n        }\n\n        // focus previous menu in stack\n        if (this.menu_stack.length && keyboard) {\n            this.menu_keyboard_active = true;\n            this.focused_menu = $.last(this.menu_stack);\n            if (!obj || !obj.data('opener')) {\n                $('#' + this.focused_menu).find('a,input:not(:disabled)').not('[aria-disabled=true]').first().focus();\n            }\n        } else {\n            this.focused_menu = null;\n            this.menu_keyboard_active = false;\n        }\n    };\n\n    // position a menu element on the screen in relation to other object\n    this.element_position = function (element, obj) {\n        var obj = $(obj), win = $(window),\n            width = obj.outerWidth(),\n            height = obj.outerHeight(),\n            menu_pos = obj.data('menu-pos'),\n            win_height = win.height(),\n            elem_height = $(element).height(),\n            elem_width = $(element).width(),\n            pos = obj.offset(),\n            top = pos.top,\n            left = pos.left + width;\n\n        if (menu_pos == 'bottom') {\n            top += height;\n            left -= width;\n        } else {\n            left -= 5;\n        }\n\n        if (top + elem_height > win_height) {\n            top -= elem_height - height;\n            if (top < 0) {\n                top = Math.max(0, (win_height - elem_height) / 2);\n            }\n        }\n\n        if (left + elem_width > win.width()) {\n            left -= elem_width + width;\n        }\n\n        element.css({ left: left + 'px', top: top + 'px' });\n    };\n\n    // initialize HTML editor\n    this.editor_init = function (config, id) {\n        this.editor = new rcube_text_editor(config || this.env.editor_config, id);\n    };\n\n\n    /********************************************************/\n    /*           html to text conversion functions          */\n    /********************************************************/\n\n    this.html2plain = function (html, func) {\n        return this.format_converter(html, 'html', func);\n    };\n\n    this.plain2html = function (plain, func) {\n        return this.format_converter(plain, 'plain', func);\n    };\n\n    this.format_converter = function (text, format, func) {\n        // warn the user (if converted content is not empty)\n        if (!text\n            || (format == 'html' && !(text.replace(/<[^>]+>|&nbsp;|\\u00C2\\u00A0|\\s/g, '')).length)\n            || (format != 'html' && !(text.replace(/\\u00C2\\u00A0|\\s/g, '')).length)\n        ) {\n            // without setTimeout() here, textarea is filled with initial (onload) content\n            if (func) {\n                setTimeout(function () {\n                    func('');\n                }, 50);\n            }\n            return true;\n        }\n\n        var confirmed = this.env.editor_warned || confirm(this.get_label('editorwarning'));\n\n        this.env.editor_warned = true;\n\n        if (!confirmed) {\n            return false;\n        }\n\n        var url = '?_task=utils&_action=' + (format == 'html' ? 'html2text' : 'text2html'),\n            lock = this.set_busy(true, 'converting');\n\n        $.ajax({\n            type: 'POST',\n            url: url,\n            data: text,\n            contentType: 'application/octet-stream',\n            error: function (o, status, err) {\n                ref.http_error(o, status, err, lock);\n            },\n            success: function (data) {\n                ref.set_busy(false, null, lock);\n                if (func) {\n                    func(data);\n                }\n            },\n        });\n\n        return true;\n    };\n\n\n    /********************************************************/\n    /*                 Remote request methods               */\n    /********************************************************/\n\n    // compose a valid url with the given parameters\n    this.url = function (action, query) {\n        var querystring = typeof query === 'string' ? query : '';\n\n        if (typeof action !== 'string') {\n            query = action;\n        } else if (!query || typeof query !== 'object') {\n            query = {};\n        }\n\n        if (action) {\n            query._action = action;\n        } else if (this.env.action) {\n            query._action = this.env.action;\n        }\n\n        var url = this.env.comm_path, k, param = {};\n\n        // overwrite task name\n        if (action && action.match(/([a-z0-9_-]+)\\/([a-z0-9-_.]+)/)) {\n            query._action = RegExp.$2;\n            url = url.replace(/\\_task=[a-z0-9_-]+/, '_task=' + RegExp.$1);\n        }\n\n        // force _framed=0\n        if (query._framed === 0) {\n            url = url.replace('&_framed=1', '');\n            query._framed = null;\n        }\n\n        // remove undefined values\n        for (k in query) {\n            if (query[k] !== undefined && query[k] !== null) {\n                param[k] = query[k];\n            }\n        }\n\n        if (param = $.param(param)) {\n            url += (url.indexOf('?') > -1 ? '&' : '?') + param;\n        }\n\n        if (querystring) {\n            url += (url.indexOf('?') > -1 ? '&' : '?') + querystring;\n        }\n\n        return url;\n    };\n\n    this.redirect = function (url, lock) {\n        if (lock !== false) {\n            this.set_busy(true, 'loading');\n        }\n\n        if (this.is_framed()) {\n            url = url.replace(/&_framed=1/, '');\n            parent.rcmail.redirect(url, lock);\n        } else {\n            if (this.env.extwin) {\n                if (typeof url === 'string') {\n                    url += (url.indexOf('?') < 0 ? '?' : '&') + '_extwin=1';\n                } else {\n                    url._extwin = 1;\n                }\n            }\n            this.location_href(url, window);\n        }\n    };\n\n    this.goto_url = function (action, query, lock, secure) {\n        var url = this.url(action, query);\n        if (secure) {\n            url = this.secure_url(url);\n        }\n        this.redirect(url, lock);\n    };\n\n    this.location_href = function (url, target, frame) {\n        if (frame) {\n            this.lock_frame(target);\n        }\n\n        if (typeof url === 'object') {\n            url = this.env.comm_path + '&' + $.param(url);\n        }\n\n        // simulate real link click to force IE to send referer header\n        if (bw.ie && target == window) {\n            $('<a>').attr('href', url).appendTo(document.body).get(0).click();\n        } else {\n            target.location.href = url;\n        }\n\n        // reset keep-alive interval\n        this.start_keepalive();\n    };\n\n    // update browser location to remember current view\n    this.update_state = function (query) {\n        if (window.history.replaceState) {\n            try {\n                // This may throw security exception in Firefox (#5400)\n                window.history.replaceState({}, document.title, rcmail.url('', query));\n            } catch (e) {\n                // ignore\n            }\n        }\n    };\n\n    // send a http request to the server\n    this.http_request = function (action, data, lock, type) {\n        if (type != 'POST') {\n            type = 'GET';\n        }\n\n        if (typeof data !== 'object') {\n            data = rcube_parse_query(data);\n        }\n\n        data._remote = 1;\n        data._unlock = lock ? lock : 0;\n\n        // trigger plugin hook\n        var result = this.triggerEvent('request' + action, data);\n\n        // abort if one of the handlers returned false\n        if (result === false) {\n            if (data._unlock) {\n                this.set_busy(false, null, data._unlock);\n            }\n            return false;\n        }\n\n        if (result && result.getResponseHeader) {\n            return result;\n        }\n\n        if (result !== undefined) {\n            data = result;\n            if (data._action) {\n                action = data._action;\n                delete data._action;\n            }\n        }\n\n        var url = this.url(action);\n\n        // reset keep-alive interval\n        this.start_keepalive();\n\n        // send request\n        return $.ajax({\n            type: type,\n            url: url,\n            data: data,\n            dataType: 'json',\n            success: function (data) {\n                ref.http_response(data);\n            },\n            error: function (o, status, err) {\n                ref.http_error(o, status, err, lock, action);\n            },\n        });\n    };\n\n    // send a http GET request to the server\n    this.http_get = this.http_request;\n\n    // send a http POST request to the server\n    this.http_post = function (action, data, lock) {\n        return this.http_request(action, data, lock, 'POST');\n    };\n\n    // aborts ajax request\n    this.abort_request = function (r) {\n        if (r.request) {\n            r.request.abort();\n        }\n        if (r.lock) {\n            this.set_busy(false, null, r.lock);\n        }\n    };\n\n    // handle HTTP response\n    this.http_response = function (response) {\n        if (!response) {\n            return;\n        }\n\n        if (response.unlock) {\n            this.set_busy(false, null, response.unlock);\n        }\n\n        this.triggerEvent('responsebefore', { response: response });\n        this.triggerEvent('responsebefore' + response.action, { response: response });\n\n        // set env vars\n        if (response.env) {\n            this.set_env(response.env);\n        }\n\n        var i;\n\n        // we have labels to add\n        if (typeof response.texts === 'object') {\n            for (i in response.texts) {\n                if (typeof response.texts[i] === 'string') {\n                    this.add_label(i, response.texts[i]);\n                }\n            }\n        }\n\n        // if we get javascript code from server -> execute it\n        if (response.exec) {\n            eval(response.exec);\n        }\n\n        // execute callback functions of plugins\n        if (response.callbacks && response.callbacks.length) {\n            for (i = 0; i < response.callbacks.length; i++) {\n                this.triggerEvent(response.callbacks[i][0], response.callbacks[i][1]);\n            }\n        }\n\n        // process the response data according to the sent action\n        switch (response.action) {\n            case 'mark':\n                // Mark the message as Seen also in the opener/parent\n                if ((this.env.action == 'show' || this.env.action == 'preview') && this.env.last_flag == 'SEEN') {\n                    this.set_unread_message(this.env.uid, this.env.mailbox);\n                }\n\n                break;\n            case 'delete':\n                if (this.task == 'addressbook') {\n                    var sid, uid = this.contact_list.get_selection(), writable = false;\n\n                    if (uid && this.contact_list.rows[uid]) {\n                        // search results, get source ID from record ID\n                        if (this.env.source == '') {\n                            sid = String(uid).replace(/^[^-]+-/, '');\n                            writable = sid && this.env.address_sources[sid] && !this.env.address_sources[sid].readonly;\n                        } else {\n                            writable = !this.env.address_sources[this.env.source].readonly;\n                        }\n                    }\n                    this.enable_command('delete', 'edit', writable);\n                    this.enable_command('export', (this.contact_list && this.contact_list.rowcount > 0));\n                    this.enable_command('export-selected', 'print', false);\n                }\n\n            case 'move':\n                if (this.env.action == 'show') {\n                    // re-enable commands on move/delete error\n                    this.enable_command(this.env.message_commands, true);\n                    if (!this.env.list_post) {\n                        this.enable_command('reply-list', false);\n                    }\n                } else if (this.task == 'addressbook') {\n                    this.triggerEvent('listupdate', { list: this.contact_list, folder: this.env.source, rowcount: this.contact_list.rowcount });\n                }\n\n            case 'purge':\n            case 'expunge':\n                if (this.task == 'mail') {\n                    if (!this.env.exists) {\n                        // clear preview pane content\n                        if (this.env.contentframe) {\n                            this.show_contentframe(false);\n                        }\n                        // disable commands useless when mailbox is empty\n                        this.enable_command(this.env.message_commands, 'purge', 'expunge',\n                            'select-all', 'select-none', 'expand-all', 'expand-unread', 'collapse-all', false);\n                    }\n                    if (this.message_list) {\n                        this.triggerEvent('listupdate', { list: this.message_list, folder: this.env.mailbox, rowcount: this.message_list.rowcount });\n                    }\n                }\n\n                break;\n            case 'refresh':\n            case 'check-recent':\n                // update message flags\n                $.each(this.env.recent_flags || {}, function (uid, flags) {\n                    ref.set_message(uid, 'deleted', flags.deleted);\n                    ref.set_message(uid, 'replied', flags.answered);\n                    ref.set_message(uid, 'unread', !flags.seen);\n                    ref.set_message(uid, 'forwarded', flags.forwarded);\n                    ref.set_message(uid, 'flagged', flags.flagged);\n                });\n                delete this.env.recent_flags;\n\n            case 'getunread':\n            case 'search':\n                this.env.qsearch = null;\n            case 'list':\n                if (this.task == 'mail') {\n                    var is_multifolder = this.is_multifolder_listing(),\n                        list = this.message_list,\n                        uid = this.env.list_uid;\n\n                    this.enable_command('show', 'select-all', 'select-none', this.env.messagecount > 0);\n                    this.enable_command('expunge', 'purge', this.env.exists && !is_multifolder);\n                    this.enable_command('import-messages', !is_multifolder);\n                    this.enable_command('expand-all', 'expand-unread', 'collapse-all', this.env.threading && this.env.messagecount && !is_multifolder);\n\n                    if (list) {\n                        if (response.action == 'list' || response.action == 'search') {\n                            // highlight message row when we're back from message page\n                            if (uid) {\n                                if (uid === 'FIRST') {\n                                    uid = list.get_first_row();\n                                } else if (uid === 'LAST') {\n                                    uid = list.get_last_row();\n                                } else if (!list.rows[uid]) {\n                                    uid += '-' + this.env.mailbox;\n                                }\n\n                                if (uid && list.rows[uid]) {\n                                    list.select(uid);\n                                }\n\n                                delete this.env.list_uid;\n                            }\n\n                            this.enable_command('set-listmode', this.env.threads && !is_multifolder);\n                            if (list.rowcount > 0 && !$(document.activeElement).is('input,textarea')) {\n                                list.focus();\n                            }\n\n                            // trigger 'select' so all dependent actions update its state\n                            // e.g. plugins use this event to activate buttons (#1490647)\n                            list.triggerEvent('select');\n                        }\n\n                        if (response.action != 'getunread') {\n                            this.triggerEvent('listupdate', { list: list, folder: this.env.mailbox, rowcount: list.rowcount });\n                        }\n                    }\n                } else if (this.task == 'addressbook') {\n                    var list = this.contact_list,\n                        uid = this.env.list_uid;\n\n                    this.enable_command('export', 'select-all', 'select-none', (list && list.rowcount > 0));\n\n                    if (response.action == 'list' || response.action == 'search') {\n                        this.enable_command('search-create', this.env.source == '');\n                        this.enable_command('search-delete', this.env.search_id);\n                        this.update_group_commands();\n\n                        if (list && uid) {\n                            if (uid === 'FIRST') {\n                                uid = list.get_first_row();\n                            } else if (uid === 'LAST') {\n                                uid = list.get_last_row();\n                            }\n\n                            if (uid && list.rows[uid]) {\n                                list.select(uid);\n                            }\n\n                            delete this.env.list_uid;\n\n                            // trigger 'select' so all dependent actions update its state\n                            list.triggerEvent('select');\n                        }\n\n                        if (list.rowcount > 0 && !$(document.activeElement).is('input,textarea')) {\n                            list.focus();\n                        }\n\n                        this.triggerEvent('listupdate', { list: list, folder: this.env.source, rowcount: list.rowcount });\n                    }\n                }\n\n                break;\n            case 'list-contacts':\n            case 'search-contacts':\n                if (this.contact_list) {\n                    if (this.contact_list.rowcount > 0) {\n                        this.contact_list.focus();\n                    }\n                    this.triggerEvent('listupdate', { list: this.contact_list, rowcount: this.contact_list.rowcount });\n                }\n\n                break;\n        }\n\n        if (response.unlock) {\n            this.hide_message(response.unlock);\n        }\n\n        this.triggerEvent('responseafter', { response: response });\n        this.triggerEvent('responseafter' + response.action, { response: response });\n\n        // reset keep-alive interval\n        this.start_keepalive();\n    };\n\n    // handle HTTP request errors\n    this.http_error = function (request, status, err, lock, action) {\n        var errmsg = request.statusText;\n\n        this.set_busy(false, null, lock);\n        request.abort();\n\n        // don't display error message on page unload (#1488547)\n        if (this.unload) {\n            return;\n        }\n\n        if (request.status && errmsg) {\n            this.display_message(this.get_label('servererror') + ' (' + errmsg + ')', 'error');\n        } else if (status == 'timeout') {\n            this.display_message('requesttimedout', 'error');\n        } else if (request.status == 0 && status != 'abort') {\n            this.display_message('connerror', 'error');\n        }\n\n        // redirect to url specified in location header if not empty\n        var location_url = request.getResponseHeader('Location');\n        if (location_url && this.env.action != 'compose') { // don't redirect on compose screen, contents might get lost (#1488926)\n            this.redirect(location_url);\n        }\n\n        // 403 Forbidden response (CSRF prevention) - reload the page.\n        // In case there's a new valid session it will be used, otherwise\n        // login form will be presented (#1488960).\n        if (request.status == 403) {\n            (this.is_framed() ? parent : window).location.reload();\n            return;\n        }\n\n        // re-send keep-alive requests after 30 seconds\n        if (action == 'keep-alive') {\n            setTimeout(function () {\n                ref.keep_alive(); ref.start_keepalive();\n            }, 30000);\n        }\n    };\n\n    // handler for session errors detected on the server\n    this.session_error = function (redirect_url) {\n        this.env.server_error = 401;\n\n        // save message in local storage and do not redirect\n        if (this.env.action == 'compose') {\n            this.save_compose_form_local();\n            this.compose_skip_unsavedcheck = true;\n            // stop keep-alive and refresh processes\n            this.env.session_lifetime = 0;\n            if (this._keepalive) {\n                clearInterval(this._keepalive);\n            }\n            if (this._refresh) {\n                clearInterval(this._refresh);\n            }\n        } else if (redirect_url) {\n            setTimeout(function () {\n                ref.redirect(redirect_url, true);\n            }, 2000);\n        }\n    };\n\n    // callback when an iframe finished loading\n    this.iframe_loaded = function (unlock) {\n        if (!unlock) {\n            unlock = this.env.frame_lock;\n        }\n\n        this.set_busy(false, null, unlock);\n\n        if (this.submit_timer) {\n            clearTimeout(this.submit_timer);\n        }\n    };\n\n    /**\n     Send multi-threaded parallel HTTP requests to the server for a list if items.\n     The string '%' in either a GET query or POST parameters will be replaced with the respective item value.\n     This is the argument object expected: {\n         items: ['foo','bar','gna'],      // list of items to send requests for\n         action: 'task/some-action',      // Roundcube action to call\n         query: { q:'%s' },               // GET query parameters\n         postdata: { source:'%s' },       // POST data (sends a POST request if present)\n         threads: 3,                      // max. number of concurrent requests\n         onresponse: function(data){ },   // Callback function called for every response received from server\n         whendone: function(alldata){ }   // Callback function called when all requests have been sent\n     }\n     */\n    this.multi_thread_http_request = function (prop) {\n        var i, item, reqid = new Date().getTime(),\n            threads = prop.threads || 1;\n\n        prop.reqid = reqid;\n        prop.running = 0;\n        prop.requests = [];\n        prop.result = [];\n        prop._items = $.extend([], prop.items); // copy items\n\n        if (!prop.lock) {\n            prop.lock = this.display_message('', 'loading');\n        }\n\n        // add the request arguments to the jobs pool\n        this.http_request_jobs[reqid] = prop;\n\n        // start n threads\n        for (i = 0; i < threads; i++) {\n            item = prop._items.shift();\n            if (item === undefined) {\n                break;\n            }\n\n            prop.running++;\n            prop.requests.push(this.multi_thread_send_request(prop, item));\n        }\n\n        return reqid;\n    };\n\n    // helper method to send an HTTP request with the given iterator value\n    this.multi_thread_send_request = function (prop, item) {\n        var k, postdata, query;\n\n        // replace %s in post data\n        if (prop.postdata) {\n            postdata = {};\n            for (k in prop.postdata) {\n                postdata[k] = String(prop.postdata[k]).replace('%s', item);\n            }\n            postdata._reqid = prop.reqid;\n        }\n        // replace %s in query\n        else if (typeof prop.query === 'string') {\n            query = prop.query.replace('%s', item);\n            query += '&_reqid=' + prop.reqid;\n        } else if (typeof prop.query === 'object' && prop.query) {\n            query = {};\n            for (k in prop.query) {\n                query[k] = String(prop.query[k]).replace('%s', item);\n            }\n            query._reqid = prop.reqid;\n        }\n\n        // send HTTP GET or POST request\n        return postdata ? this.http_post(prop.action, postdata) : this.http_request(prop.action, query);\n    };\n\n    // callback function for multi-threaded http responses\n    this.multi_thread_http_response = function (data, reqid) {\n        var prop = this.http_request_jobs[reqid];\n        if (!prop || prop.running <= 0 || prop.cancelled) {\n            return;\n        }\n\n        prop.running--;\n\n        // trigger response callback\n        if (prop.onresponse && typeof prop.onresponse === 'function') {\n            prop.onresponse(data);\n        }\n\n        prop.result = $.extend(prop.result, data);\n\n        // send next request if prop.items is not yet empty\n        var item = prop._items.shift();\n        if (item !== undefined) {\n            prop.running++;\n            prop.requests.push(this.multi_thread_send_request(prop, item));\n        }\n        // trigger whendone callback and mark this request as done\n        else if (prop.running == 0) {\n            if (prop.whendone && typeof prop.whendone === 'function') {\n                prop.whendone(prop.result);\n            }\n\n            this.set_busy(false, '', prop.lock);\n\n            // remove from this.http_request_jobs pool\n            delete this.http_request_jobs[reqid];\n        }\n    };\n\n    // abort a running multi-thread request with the given identifier\n    this.multi_thread_request_abort = function (reqid) {\n        var prop = this.http_request_jobs[reqid];\n        if (prop) {\n            for (var i = 0; prop.running > 0 && i < prop.requests.length; i++) {\n                if (prop.requests[i].abort) {\n                    prop.requests[i].abort();\n                }\n            }\n\n            prop.running = 0;\n            prop.cancelled = true;\n            this.set_busy(false, '', prop.lock);\n        }\n    };\n\n    // post the given form to a hidden iframe\n    this.async_upload_form = function (form, action, onload) {\n    // create hidden iframe\n        var ts = new Date().getTime(),\n            frame_name = 'rcmupload' + ts,\n            frame = this.dummy_iframe(frame_name);\n\n        // handle upload errors by parsing iframe content in onload\n        frame.on('load', { ts: ts }, onload);\n\n        $(form).attr({\n            target: frame_name,\n            action: this.url(action, { _id: this.env.compose_id || '', _uploadid: ts, _from: this.env.action }),\n            method: 'POST',\n            enctype: 'multipart/form-data',\n        })\n            .submit();\n\n        return frame_name;\n    };\n\n    // create hidden iframe element\n    this.dummy_iframe = function (name, src) {\n        return $('<iframe>').attr({\n            name: name,\n            src: src,\n            style: 'width:0;height:0;visibility:hidden',\n            'aria-hidden': 'true',\n        })\n            .appendTo(document.body);\n    };\n\n    // html5 file-drop API\n    this.document_drag_hover = function (e, over) {\n        // don't e.preventDefault() here to not block text dragging on the page (#1490619)\n        $(this.gui_objects.filedrop)[(over ? 'addClass' : 'removeClass')]('active');\n    };\n\n    this.file_drag_hover = function (e, over) {\n        e.preventDefault();\n        e.stopPropagation();\n        $(this.gui_objects.filedrop)[(over ? 'addClass' : 'removeClass')]('hover');\n    };\n\n    // handler when files are dropped to a designated area.\n    // compose a multipart form data and submit it to the server\n    this.file_dropped = function (e) {\n        // abort event and reset UI\n        this.file_drag_hover(e, false);\n\n        // prepare multipart form data composition\n        var uri,\n            files = e.target.files || e.dataTransfer.files,\n            args = { _id: this.env.compose_id || this.env.cid || '', _remote: 1, _from: this.env.action };\n\n        if (!files || !files.length) {\n            // Roundcube attachment, pass its uri to the backend and attach\n            if (uri = e.dataTransfer.getData('roundcube-uri')) {\n                var ts = 'upload' + new Date().getTime(),\n                    // jQuery way to escape filename (#1490530)\n                    content = $('<span>').text(e.dataTransfer.getData('roundcube-name') || this.get_label('attaching')).html();\n\n                args._uri = uri;\n                args._uploadid = ts;\n\n                // add to attachments list\n                if (!this.add2attachment_list(ts, {\n                    name: '', html: content, classname: 'uploading', complete: false,\n                })) {\n                    this.file_upload_id = this.set_busy(true, 'attaching');\n                }\n\n                this.http_post(this.env.filedrop.action || 'upload', args);\n            }\n\n            return;\n        }\n\n        this.file_upload(files, args, {\n            name: (this.env.filedrop.fieldname || '_file') + (this.env.filedrop.single ? '' : '[]'),\n            single: this.env.filedrop.single,\n            filter: this.env.filedrop.filter,\n            action: ref.env.filedrop.action,\n        });\n    };\n\n    // Files upload using ajax\n    this.file_upload = function (files, post_args, props) {\n        if (!window.FormData || !files || !files.length) {\n            return false;\n        }\n\n        var f, i, fname, size = 0, numfiles = 0,\n            formdata = new FormData(),\n            fieldname = props.name || '_file[]',\n            limit = props.single ? 1 : files.length;\n        args = $.extend({ _remote: 1, _from: this.env.action }, post_args || {});\n\n        // add files to form data\n        for (i = 0; numfiles < limit && (f = files[i]); i++) {\n            // filter by file type if requested\n            if (props.filter && !f.type.match(new RegExp(props.filter))) {\n                // TODO: show message to user\n                continue;\n            }\n\n            formdata.append(fieldname, f);\n            size += f.size;\n            fname = f.name;\n            numfiles++;\n        }\n\n        if (numfiles) {\n            if (this.env.max_filesize && this.env.filesizeerror && size > this.env.max_filesize) {\n                this.display_message(this.env.filesizeerror, 'error');\n                return false;\n            }\n\n            if (this.env.max_filecount && this.env.filecounterror && numfiles > this.env.max_filecount) {\n                this.display_message(this.env.filecounterror, 'error');\n                return false;\n            }\n\n            var ts = 'upload' + new Date().getTime(),\n                label = numfiles > 1 ? this.get_label('uploadingmany') : fname,\n                // jQuery way to escape filename (#1490530)\n                content = $('<span>').text(label).html();\n\n            // add to attachments list\n            if (!this.add2attachment_list(ts, {\n                name: '', html: content, classname: 'uploading', complete: false,\n            }) && !props.lock) {\n                props.lock = this.file_upload_id = this.set_busy(true, 'uploading');\n            }\n\n            args._uploadid = ts;\n            args._unlock = props.lock;\n\n            this.uploads[ts] = $.ajax({\n                type: 'POST',\n                dataType: 'json',\n                url: this.url(props.action || 'upload', args),\n                contentType: false,\n                processData: false,\n                timeout: this.uploadTimeout, // ajax call timeout for loading attachment\n                data: formdata,\n                headers: { 'X-Roundcube-Request': this.env.request_token },\n                xhr: function () {\n                    var xhr = $.ajaxSettings.xhr();\n                    if (xhr.upload && ref.labels.uploadprogress) {\n                        xhr.upload.onprogress = function (e) {\n                            var msg = ref.file_upload_msg(e.loaded, e.total);\n                            if (msg) {\n                                $('#' + ts).find('.uploading').text(msg);\n                            }\n                        };\n                    }\n                    return xhr;\n                },\n                success: function (data) {\n                    delete ref.uploads[ts];\n                    ref.http_response(data);\n                },\n                error: function (o, status, err) {\n                    delete ref.uploads[ts];\n                    ref.remove_from_attachment_list(ts);\n                    ref.http_error(o, status, err, props.lock, 'attachment');\n                },\n            });\n        }\n\n        return true;\n    };\n\n    this.file_upload_msg = function (current, total) {\n        if (total && current < total) {\n            var percent = Math.round(current / total * 100),\n                label = ref.get_label('uploadprogress');\n\n            if (total >= 1073741824) {\n                total = parseFloat(total / 1073741824).toFixed(1) + ' ' + this.get_label('GB');\n                current = parseFloat(current / 1073741824).toFixed(1);\n            } else if (total >= 1048576) {\n                total = parseFloat(total / 1048576).toFixed(1) + ' ' + this.get_label('MB');\n                current = parseFloat(current / 1048576).toFixed(1);\n            } else if (total >= 1024) {\n                total = parseInt(total / 1024, 10) + ' ' + this.get_label('KB');\n                current = parseInt(current / 1024, 10);\n            } else {\n                total = total + ' ' + this.get_label('B');\n            }\n\n            return label.replace('$percent', percent + '%').replace('$current', current).replace('$total', total);\n        }\n    };\n\n    // starts interval for keep-alive signal\n    this.start_keepalive = function () {\n        if (!this.env.session_lifetime || this.env.framed || this.env.extwin || this.task == 'login' || this.env.action == 'print') {\n            return;\n        }\n\n        if (this._keepalive) {\n            clearInterval(this._keepalive);\n        }\n\n        // use Math to prevent from an integer overflow (#5273)\n        // maximum interval is 15 minutes, minimum is 30 seconds\n        var interval = Math.min(1800, this.env.session_lifetime) * 0.5 * 1000;\n        this._keepalive = setInterval(function () {\n            ref.keep_alive();\n        }, interval < 30000 ? 30000 : interval);\n    };\n\n    // starts interval for refresh signal\n    this.start_refresh = function () {\n        if (!this.env.refresh_interval || this.env.framed || this.env.extwin || this.task == 'login' || this.env.action == 'print') {\n            return;\n        }\n\n        if (this._refresh) {\n            clearInterval(this._refresh);\n        }\n\n        this._refresh = setInterval(function () {\n            ref.refresh();\n        }, this.env.refresh_interval * 1000);\n    };\n\n    // sends keep-alive signal\n    this.keep_alive = function () {\n        if (!this.busy) {\n            this.http_request('keep-alive');\n        }\n    };\n\n    // sends refresh signal\n    this.refresh = function () {\n        if (this.busy) {\n            // try again after 10 seconds\n            setTimeout(function () {\n                ref.refresh(); ref.start_refresh();\n            }, 10000);\n            return;\n        }\n\n        var params = {}, lock = this.set_busy(true, 'refreshing');\n\n        if (this.task == 'mail' && this.gui_objects.mailboxlist) {\n            params = this.check_recent_params();\n        }\n\n        params._last = Math.floor(this.env.lastrefresh.getTime() / 1000);\n        this.env.lastrefresh = new Date();\n\n        // plugins should bind to 'requestrefresh' event to add own params\n        this.http_post('refresh', params, lock);\n    };\n\n    // returns check-recent request parameters\n    this.check_recent_params = function () {\n        var params = { _mbox: this.env.mailbox };\n\n        if (this.gui_objects.mailboxlist) {\n            params._folderlist = 1;\n        }\n        if (this.gui_objects.quotadisplay) {\n            params._quota = 1;\n        }\n        if (this.env.search_request) {\n            params._search = this.env.search_request;\n        }\n\n        if (this.gui_objects.messagelist) {\n            params._list = 1;\n\n            // message uids for flag updates check\n            params._uids = $.map(this.message_list.rows, function (row, uid) {\n                return uid;\n            }).join(',');\n        }\n\n        return params;\n    };\n\n\n    /********************************************************/\n    /*                     helper methods                   */\n    /********************************************************/\n\n    /**\n     * Quote html entities\n     */\n    this.quote_html = function (str) {\n        return String(str).replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n    };\n\n    // get window.opener.rcmail if available\n    this.opener = function (deep, filter) {\n        var i, win = window.opener;\n\n        // catch Error: Permission denied to access property rcmail\n        try {\n            if (win && !win.closed && win !== window) {\n                // try parent of the opener window, e.g. preview frame\n                if (deep && (!win.rcmail || win.rcmail.env.framed) && win.parent && win.parent.rcmail) {\n                    win = win.parent;\n                }\n\n                if (win.rcmail && filter) {\n                    for (i in filter) {\n                        if (win.rcmail.env[i] != filter[i]) {\n                            return;\n                        }\n                    }\n                }\n\n                return win.rcmail;\n            }\n        } catch (e) {}\n    };\n\n    // check if we're in show mode or if we have a unique selection\n    // and return the message uid\n    this.get_single_uid = function () {\n        var uid = this.env.uid || (this.message_list ? this.message_list.get_single_selection() : null);\n        var result = ref.triggerEvent('get_single_uid', { uid: uid });\n        return result || uid;\n    };\n\n    // same as above but for contacts\n    this.get_single_cid = function () {\n        var cid = this.env.cid || (this.contact_list ? this.contact_list.get_single_selection() : null);\n        var result = ref.triggerEvent('get_single_cid', { cid: cid });\n        return result || cid;\n    };\n\n    // get the IMP mailbox of the message with the given UID\n    this.get_message_mailbox = function (uid) {\n        var msg;\n\n        if (this.env.messages && uid && (msg = this.env.messages[uid]) && msg.mbox) {\n            return msg.mbox;\n        }\n\n        if (/^[0-9]+-(.*)$/.test(uid)) {\n            return RegExp.$1;\n        }\n\n        return this.env.mailbox;\n    };\n\n    // build request parameters from single message id (maybe with mailbox name)\n    this.params_from_uid = function (uid, params) {\n        if (!params) {\n            params = {};\n        }\n\n        params._uid = String(uid).split('-')[0];\n        params._mbox = this.get_message_mailbox(uid);\n\n        return params;\n    };\n\n    // gets cursor position\n    this.get_caret_pos = function (obj) {\n        if (obj.selectionEnd !== undefined) {\n            return obj.selectionEnd;\n        }\n\n        return obj.value.length;\n    };\n\n    // moves cursor to specified position\n    this.set_caret_pos = function (obj, pos) {\n        try {\n            if (obj.setSelectionRange) {\n                obj.setSelectionRange(pos, pos);\n            }\n        } catch (e) {} // catch Firefox exception if obj is hidden\n    };\n\n    // get selected text from an input field\n    this.get_input_selection = function (obj) {\n        var start = 0, end = 0, normalizedValue = '';\n\n        if (typeof obj.selectionStart === 'number' && typeof obj.selectionEnd === 'number') {\n            normalizedValue = obj.value;\n            start = obj.selectionStart;\n            end = obj.selectionEnd;\n        }\n\n        return { start: start, end: end, text: normalizedValue.substr(start, end - start) };\n    };\n\n    // disable/enable all fields of a form\n    this.lock_form = function (form, lock) {\n        if (!form || !form.elements) {\n            return;\n        }\n\n        if (lock) {\n            this.disabled_form_elements = [];\n        }\n\n        $.each(form.elements, function () {\n            if (this.type == 'hidden') {\n                return;\n            }\n            // remember which elem was disabled before lock\n            if (lock && this.disabled) {\n                ref.disabled_form_elements.push(this);\n            } else if (lock || $.inArray(this, ref.disabled_form_elements) < 0) {\n                this.disabled = lock;\n            }\n        });\n    };\n\n    this.mailto_handler_uri = function () {\n        return location.href.split('?')[0] + '?_task=mail&_action=compose&_to=%s';\n    };\n\n    this.register_protocol_handler = function (name) {\n        try {\n            window.navigator.registerProtocolHandler('mailto', this.mailto_handler_uri(), name);\n        } catch (e) {\n            this.display_message(String(e), 'error');\n        }\n    };\n\n    this.check_protocol_handler = function (name, elem) {\n        var nav = window.navigator;\n\n        if (!nav || (typeof nav.registerProtocolHandler !== 'function')) {\n            $(elem).addClass('disabled').click(function () {\n                ref.display_message('nosupporterror', 'error');\n                return false;\n            });\n        } else if (typeof nav.isProtocolHandlerRegistered === 'function') {\n            var status = nav.isProtocolHandlerRegistered('mailto', this.mailto_handler_uri());\n            if (status) {\n                $(elem).parent().find('.mailtoprotohandler-status').html(status);\n            }\n        } else {\n            $(elem).click(function () {\n                ref.register_protocol_handler(name); return false;\n            });\n        }\n    };\n\n    // Checks browser capabilities e.g. PDF support, TIF support\n    this.browser_capabilities_check = function () {\n        $.each(['pdf', 'flash', 'tiff', 'webp', 'pgpmime'], function () {\n            if (ref.env.browser_capabilities[this] === undefined) {\n                ref.env.browser_capabilities[this] = ref[this + '_support_check']();\n            }\n        });\n    };\n\n    // Returns browser capabilities string\n    this.browser_capabilities = function () {\n        var n, ret = [];\n\n        for (n in this.env.browser_capabilities) {\n            ret.push(n + '=' + this.env.browser_capabilities[n]);\n        }\n\n        return ret.join();\n    };\n\n    this.tiff_support_check = function () {\n        this.image_support_check('tiff');\n        return 0;\n    };\n\n    this.webp_support_check = function () {\n        this.image_support_check('webp');\n        return 0;\n    };\n\n    this.image_support_check = function (type) {\n        setTimeout(function () {\n            var img = new Image();\n            img.onload = function () {\n                ref.env.browser_capabilities[type] = 1;\n            };\n            img.onerror = function () {\n                ref.env.browser_capabilities[type] = 0;\n            };\n            img.src = ref.assets_path('program/resources/blank.' + type);\n        }, 10);\n    };\n\n    this.pdf_support_check = function () {\n        if ('pdfViewerEnabled' in navigator) {\n            return navigator.pdfViewerEnabled ? 1 : 0;\n        }\n\n        var i, plugin = navigator.mimeTypes ? navigator.mimeTypes['application/pdf'] : {},\n            regex = /Adobe Reader|PDF|Acrobat/i;\n\n        if (plugin && plugin.enabledPlugin) {\n            return 1;\n        }\n\n        for (i in navigator.plugins) {\n            plugin = navigator.plugins[i];\n            if (typeof plugin === 'string') {\n                if (regex.test(plugin)) {\n                    return 1;\n                }\n            } else if (plugin.name && regex.test(plugin.name)) {\n                return 1;\n            }\n        }\n\n        setTimeout(function () {\n            $('<object>').attr({\n                data: ref.assets_path('program/resources/dummy.pdf'),\n                type: 'application/pdf',\n                style: 'position: \"absolute\"; top: -1000px; height: 1px; width: 1px',\n            })\n                .on('load error', function (e) {\n                    ref.env.browser_capabilities.pdf = e.type == 'load' ? 1 : 0;\n\n                    // add a short delay before attempting to remove element (#8128)\n                    var obj = this;\n                    setTimeout(function () {\n                        $(obj).remove();\n                    }, 10);\n                })\n                .appendTo(document.body);\n        }, 10);\n\n        return 0;\n    };\n\n    this.flash_support_check = function () {\n        var plugin = navigator.mimeTypes ? navigator.mimeTypes['application/x-shockwave-flash'] : {};\n\n        if (plugin && plugin.enabledPlugin) {\n            return 1;\n        }\n\n        if ('ActiveXObject' in window) {\n            try {\n                plugin = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');\n\n                return 1;\n            } catch (e) {}\n        }\n\n        return 0;\n    };\n\n    // check for mailvelope API\n    this.pgpmime_support_check = function (action) {\n        if (window.mailvelope) {\n            return 1;\n        }\n\n        $(window).on('mailvelope', function () {\n            ref.env.browser_capabilities.pgpmime = 1;\n        });\n\n        return 0;\n    };\n\n    this.assets_path = function (path) {\n        if (this.env.assets_path && !path.startsWith(this.env.assets_path)) {\n            path = this.env.assets_path + path;\n        }\n\n        if (!path.startsWith('static.php/') && path.indexOf('://') == -1) {\n            path = 'static.php/' + path;\n        }\n\n        return path;\n    };\n\n    // Cookie setter\n    this.set_cookie = function (name, value, expires) {\n        if (expires === false) {\n            var expires = new Date();\n            expires.setYear(expires.getFullYear() + 1);\n        }\n\n        setCookie(name, value, expires, this.env.cookie_path, this.env.cookie_domain, this.env.cookie_secure);\n    };\n\n    this.get_local_storage_prefix = function () {\n        if (!this.local_storage_prefix) {\n            this.local_storage_prefix = 'roundcube.' + (this.env.user_id || 'anonymous') + '.';\n        }\n\n        return this.local_storage_prefix;\n    };\n\n    // wrapper for localStorage.getItem(key)\n    this.local_storage_get_item = function (key, deflt, encrypted) {\n        var item, result;\n\n        // TODO: add encryption\n        try {\n            item = localStorage.getItem(this.get_local_storage_prefix() + key);\n            result = JSON.parse(item);\n        } catch (e) {}\n\n        return result || deflt || null;\n    };\n\n    // wrapper for localStorage.setItem(key, data)\n    this.local_storage_set_item = function (key, data, encrypted) {\n        // try/catch to handle no localStorage support, but also error\n        // in Safari-in-private-browsing-mode where localStorage exists\n        // but can't be used (#1489996)\n        try {\n            // TODO: add encryption\n            localStorage.setItem(this.get_local_storage_prefix() + key, JSON.stringify(data));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // wrapper for localStorage.removeItem(key)\n    this.local_storage_remove_item = function (key) {\n        try {\n            localStorage.removeItem(this.get_local_storage_prefix() + key);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    this.print_dialog = function () {\n        // setTimeout for Safari\n        setTimeout('window.print()', 10);\n    };\n} // end object rcube_webmail\n\n\n// some static methods\nrcube_webmail.long_subject_title = function (elem, indent, text_elem) {\n    if (!elem.title) {\n        var siblings_width = 0, $elem = $(text_elem || elem);\n\n        $elem.siblings().each(function () {\n            // Note: width() returns 0 for elements with icons in :before (Elastic)\n            siblings_width += $(this).width() + (parseFloat(window.getComputedStyle(this, ':before').width) || 0);\n        });\n\n        // Note: 3px to be on the safe side, but also specifically for Elastic\n        if ($elem.width() + siblings_width + (indent || 0) * 15 >= $elem.parent().width() - 3) {\n            elem.title = rcube_webmail.subject_text($elem[0]);\n        }\n    }\n};\n\nrcube_webmail.long_subject_title_ex = function (elem) {\n    if (!elem.title) {\n        var $elem = $(elem),\n            txt = $elem.text().trim(),\n            indent = $('span.branch', $elem).width() || 0,\n            tmp = $('<span>').text(txt)\n                .css({\n                    position: 'absolute',\n                    float: 'left',\n                    visibility: 'hidden',\n                    'font-size': $elem.css('font-size'),\n                    'font-weight': $elem.css('font-weight'),\n                })\n                .appendTo(document.body),\n            w = tmp.width();\n\n        tmp.remove();\n        if (w + indent * 15 > $elem.width()) {\n            elem.title = rcube_webmail.subject_text(elem);\n        }\n    }\n};\n\nrcube_webmail.subject_text = function (elem) {\n    var t = $(elem).clone();\n    t.find('.skip-on-drag,.skip-content,.voice').remove();\n    return t.text().trim();\n};\n\n// set event handlers on all iframe elements (and their contents)\nrcube_webmail.set_iframe_events = function (events) {\n    $('iframe').each(function () {\n        var frame = $(this);\n        $.each(events, function (event_name, event_handler) {\n            frame.on('load', function (e) {\n                try {\n                    $(this).contents().on(event_name, event_handler);\n                } catch (e) { /* catch possible permission error in IE */ }\n            });\n\n            try {\n                frame.contents().on(event_name, event_handler);\n            } catch (e) { /* catch possible permission error in IE */ }\n        });\n    });\n};\n\nrcube_webmail.prototype.get_cookie = getCookie;\n\n// copy event engine prototype\nrcube_webmail.prototype.addEventListener = rcube_event_engine.prototype.addEventListener;\nrcube_webmail.prototype.removeEventListener = rcube_event_engine.prototype.removeEventListener;\nrcube_webmail.prototype.triggerEvent = rcube_event_engine.prototype.triggerEvent;\n", "patch": "@@ -999,7 +999,7 @@ function rcube_webmail()\n             break;\n         }\n \n-        this.goto_url('get', qstring+'&_download=1', false);\n+        this.goto_url('get', qstring+'&_download=1', false, true);\n         break;\n \n       case 'select-all':\n@@ -1205,10 +1205,10 @@ function rcube_webmail()\n \n       case 'download':\n         if (this.env.action == 'get') {\n-          location.href = location.href.replace(/_frame=/, '_download=');\n+          location.href = this.secure_url(location.href.replace(/_frame=/, '_download='));\n         }\n         else if (uid = this.get_single_uid()) {\n-          this.goto_url('viewsource', this.params_from_uid(uid, {_save: 1}));\n+          this.goto_url('viewsource', this.params_from_uid(uid, {_save: 1}), false, true);\n         }\n         break;\n \n@@ -1296,13 +1296,13 @@ function rcube_webmail()\n \n       case 'export':\n         if (this.contact_list.rowcount > 0) {\n-          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _search: this.env.search_request });\n+          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _search: this.env.search_request }, false, true);\n         }\n         break;\n \n       case 'export-selected':\n         if (this.contact_list.rowcount > 0) {\n-          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _cid: this.contact_list.get_selection().join(',') });\n+          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _cid: this.contact_list.get_selection().join(',') }, false, true);\n         }\n         break;\n \n@@ -1417,7 +1417,7 @@ function rcube_webmail()\n     if (task == 'mail')\n       url += '&_mbox=INBOX';\n     else if (task == 'logout' && !this.env.server_error) {\n-      url += '&_token=' + this.env.request_token;\n+      url = this.secure_url(url);\n       this.clear_compose_data();\n     }\n \n@@ -1466,6 +1466,12 @@ function rcube_webmail()\n     return url + '?' + name + '=' + value;\n   };\n \n+  // append CSRF protection token to the given url\n+  this.secure_url = function(url)\n+  {\n+    return this.add_url(url, '_token', this.env.request_token);\n+  },\n+\n   this.is_framed = function()\n   {\n     return this.env.framed && parent.rcmail && parent.rcmail != this && typeof parent.rcmail.command == 'function';\n@@ -7282,9 +7288,11 @@ function rcube_webmail()\n     }\n   };\n \n-  this.goto_url = function(action, query, lock)\n+  this.goto_url = function(action, query, lock, secure)\n   {\n-    this.redirect(this.url(action, query), lock);\n+    var url = this.url(action, query)\n+    if (secure) url = this.secure_url(url);\n+    this.redirect(url, lock);\n   };\n \n   this.location_href = function(url, target, frame)", "file_path": "files/2016_8\\24", "file_language": "js", "file_name": "program/js/app.js", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/699af1e5206ed9114322adaa3c25c1c969640a53/program/lib/Roundcube/rcube_message.php", "code": "<?php\n\n/*\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2008-2014, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Logical representation of a mail message with all its data          |\n |   and related functions                                               |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Logical representation of a mail message with all its data\n * and related functions\n *\n * @package    Framework\n * @subpackage Storage\n * @author     Thomas Bruederli <roundcube@gmail.com>\n */\nclass rcube_message\n{\n    /**\n     * Instace of framework class.\n     *\n     * @var rcube\n     */\n    private $app;\n\n    /**\n     * Instance of storage class\n     *\n     * @var rcube_storage\n     */\n    private $storage;\n\n    /**\n     * Instance of mime class\n     *\n     * @var rcube_mime\n     */\n    private $mime;\n    private $opt = array();\n    private $parse_alternative = false;\n\n    public $uid;\n    public $folder;\n    public $headers;\n    public $parts = array();\n    public $mime_parts = array();\n    public $inline_parts = array();\n    public $attachments = array();\n    public $subject = '';\n    public $sender = null;\n    public $is_safe = false;\n\n    const BODY_MAX_SIZE = 1048576; // 1MB\n\n\n    /**\n     * __construct\n     *\n     * Provide a uid, and parse message structure.\n     *\n     * @param string $uid    The message UID.\n     * @param string $folder Folder name\n     *\n     * @see self::$app, self::$storage, self::$opt, self::$parts\n     */\n    function __construct($uid, $folder = null)\n    {\n        // decode combined UID-folder identifier\n        if (preg_match('/^\\d+-.+/', $uid)) {\n            list($uid, $folder) = explode('-', $uid, 2);\n        }\n\n        $this->uid  = $uid;\n        $this->app  = rcube::get_instance();\n        $this->storage = $this->app->get_storage();\n        $this->folder  = strlen($folder) ? $folder : $this->storage->get_folder();\n        $this->storage->set_options(array('all_headers' => true));\n\n        // Set current folder\n        $this->storage->set_folder($this->folder);\n\n        $this->headers = $this->storage->get_message($uid);\n\n        if (!$this->headers) {\n            return;\n        }\n\n        $this->mime = new rcube_mime($this->headers->charset);\n\n        $this->subject = $this->headers->get('subject');\n        list(, $this->sender) = each($this->mime->decode_address_list($this->headers->from, 1));\n\n        $this->set_safe((intval($_GET['_safe']) || $_SESSION['safe_messages'][$this->folder.':'.$uid]));\n        $this->opt = array(\n            'safe' => $this->is_safe,\n            'prefer_html' => $this->app->config->get('prefer_html'),\n            'get_url'     => $this->app->url(array(\n                    'action' => 'get',\n                    'mbox'   => $this->storage->get_folder(),\n                    'uid'    => $uid),\n                false, false, true)\n        );\n\n        if (!empty($this->headers->structure)) {\n            $this->get_mime_numbers($this->headers->structure);\n            $this->parse_structure($this->headers->structure);\n        }\n        else {\n            $this->body = $this->storage->get_body($uid);\n        }\n\n        // notify plugins and let them analyze this structured message object\n        $this->app->plugins->exec_hook('message_load', array('object' => $this));\n    }\n\n\n    /**\n     * Return a (decoded) message header\n     *\n     * @param string $name Header name\n     * @param bool   $row  Don't mime-decode the value\n     * @return string Header value\n     */\n    public function get_header($name, $raw = false)\n    {\n        if (empty($this->headers)) {\n            return null;\n        }\n\n        return $this->headers->get($name, !$raw);\n    }\n\n\n    /**\n     * Set is_safe var and session data\n     *\n     * @param bool $safe enable/disable\n     */\n    public function set_safe($safe = true)\n    {\n        $_SESSION['safe_messages'][$this->folder.':'.$this->uid] = $this->is_safe = $safe;\n    }\n\n\n    /**\n     * Compose a valid URL for getting a message part\n     *\n     * @param string $mime_id Part MIME-ID\n     * @param mixed  $embed Mimetype class for parts to be embedded\n     * @return string URL or false if part does not exist\n     */\n    public function get_part_url($mime_id, $embed = false)\n    {\n        if ($this->mime_parts[$mime_id])\n            return $this->opt['get_url'] . '&_part=' . $mime_id . ($embed ? '&_embed=1&_mimeclass=' . $embed : '');\n        else\n            return false;\n    }\n\n\n    /**\n     * Get content of a specific part of this message\n     *\n     * @param string   $mime_id           Part MIME-ID\n     * @param resource $fp File           pointer to save the message part\n     * @param boolean  $skip_charset_conv Disables charset conversion\n     * @param int      $max_bytes         Only read this number of bytes\n     * @param boolean  $formatted         Enables formatting of text/* parts bodies\n     *\n     * @return string Part content\n     * @deprecated\n     */\n    public function get_part_content($mime_id, $fp = null, $skip_charset_conv = false, $max_bytes = 0, $formatted = true)\n    {\n        if ($part = $this->mime_parts[$mime_id]) {\n            // stored in message structure (winmail/inline-uuencode)\n            if (!empty($part->body) || $part->encoding == 'stream') {\n                if ($fp) {\n                    fwrite($fp, $part->body);\n                }\n                return $fp ? true : $part->body;\n            }\n\n            // get from IMAP\n            $this->storage->set_folder($this->folder);\n\n            return $this->storage->get_message_part($this->uid, $mime_id, $part,\n                NULL, $fp, $skip_charset_conv, $max_bytes, $formatted);\n        }\n    }\n\n\n    /**\n     * Get content of a specific part of this message\n     *\n     * @param string  $mime_id   Part ID\n     * @param boolean $formatted Enables formatting of text/* parts bodies\n     * @param int     $max_bytes Only return/read this number of bytes\n     * @param mixed   $mode      NULL to return a string, -1 to print body\n     *                           or file pointer to save the body into\n     *\n     * @return string|bool Part content or operation status\n     */\n    public function get_part_body($mime_id, $formatted = false, $max_bytes = 0, $mode = null)\n    {\n        if (!($part = $this->mime_parts[$mime_id])) {\n            return;\n        }\n\n        // only text parts can be formatted\n        $formatted = $formatted && $part->ctype_primary == 'text';\n\n        // part body not fetched yet... save in memory if it's small enough\n        if ($part->body === null && is_numeric($mime_id) && $part->size < self::BODY_MAX_SIZE) {\n            $this->storage->set_folder($this->folder);\n            // Warning: body here should be always unformatted\n            $part->body = $this->storage->get_message_part($this->uid, $mime_id, $part,\n                null, null, true, 0, false);\n        }\n\n        // body stored in message structure (winmail/inline-uuencode)\n        if ($part->body !== null || $part->encoding == 'stream') {\n            $body = $part->body;\n\n            if ($formatted && $body) {\n                $body = self::format_part_body($body, $part, $this->headers->charset);\n            }\n\n            if ($max_bytes && strlen($body) > $max_bytes) {\n                $body = substr($body, 0, $max_bytes);\n            }\n\n            if (is_resource($mode)) {\n                if ($body !== false) {\n                    fwrite($mode, $body);\n                    rewind($mode);\n                }\n\n                return $body !== false;\n            }\n\n            if ($mode === -1) {\n                if ($body !== false) {\n                    print($body);\n                }\n\n                return $body !== false;\n            }\n\n            return $body;\n        }\n\n        // get the body from IMAP\n        $this->storage->set_folder($this->folder);\n\n        $body = $this->storage->get_message_part($this->uid, $mime_id, $part,\n            $mode === -1, is_resource($mode) ? $mode : null,\n            !($mode && $formatted), $max_bytes, $mode && $formatted);\n\n        if (is_resource($mode)) {\n            rewind($mode);\n            return $body !== false;\n        }\n\n        if (!$mode && $body && $formatted) {\n            $body = self::format_part_body($body, $part, $this->headers->charset);\n        }\n\n        return $body;\n    }\n\n\n    /**\n     * Format text message part for display\n     *\n     * @param string             $body            Part body\n     * @param rcube_message_part $part            Part object\n     * @param string             $default_charset Fallback charset if part charset is not specified\n     *\n     * @return string Formatted body\n     */\n    public static function format_part_body($body, $part, $default_charset = null)\n    {\n        // remove useless characters\n        $body = preg_replace('/[\\t\\r\\0\\x0B]+\\n/', \"\\n\", $body);\n\n        // remove NULL characters if any (#1486189)\n        if (strpos($body, \"\\x00\") !== false) {\n            $body = str_replace(\"\\x00\", '', $body);\n        }\n\n        // detect charset...\n        if (!$part->charset || strtoupper($part->charset) == 'US-ASCII') {\n            // try to extract charset information from HTML meta tag (#1488125)\n            if ($part->ctype_secondary == 'html' && preg_match('/<meta[^>]+charset=([a-z0-9-_]+)/i', $body, $m)) {\n                $part->charset = strtoupper($m[1]);\n            }\n            else if ($default_charset) {\n                $part->charset = $default_charset;\n            }\n            else {\n                $rcube         = rcube::get_instance();\n                $part->charset = $rcube->config->get('default_charset', RCUBE_CHARSET);\n            }\n        }\n\n        // ..convert charset encoding\n        $body = rcube_charset::convert($body, $part->charset);\n\n        return $body;\n    }\n\n\n    /**\n     * Determine if the message contains a HTML part. This must to be\n     * a real part not an attachment (or its part)\n     *\n     * @param bool               $enriched Enables checking for text/enriched parts too\n     * @param rcube_message_part &$part    Reference to the part if found\n     *\n     * @return bool True if a HTML is available, False if not\n     */\n    public function has_html_part($enriched = false, &$part = null)\n    {\n        // check all message parts\n        foreach ($this->mime_parts as $part) {\n            if ($part->mimetype == 'text/html' || ($enriched && $part->mimetype == 'text/enriched')) {\n                // Skip if part is an attachment, don't use is_attachment() here\n                if ($part->filename) {\n                    continue;\n                }\n\n                $level = explode('.', $part->mime_id);\n                $depth = count($level);\n\n                // Check if the part belongs to higher-level's multipart part\n                // this can be alternative/related/signed/encrypted or mixed\n                while (array_pop($level) !== null) {\n                    $parent_depth = count($level);\n                    if (!$parent_depth) {\n                        return true;\n                    }\n\n                    $parent = $this->mime_parts[join('.', $level)];\n                    if (!preg_match('/^multipart\\/(alternative|related|signed|encrypted|mixed)$/', $parent->mimetype)\n                        || ($parent->mimetype == 'multipart/mixed' && $parent_depth < $depth - 1)) {\n                        continue 2;\n                    }\n                }\n\n                if ($part->size) {\n                    return true;\n                }\n            }\n        }\n\n        $part = null;\n\n        return false;\n    }\n\n\n    /**\n     * Determine if the message contains a text/plain part. This must to be\n     * a real part not an attachment (or its part)\n     *\n     * @param rcube_message_part &$part Reference to the part if found\n     *\n     * @return bool True if a plain text part is available, False if not\n     */\n    public function has_text_part(&$part = null)\n    {\n        // check all message parts\n        foreach ($this->mime_parts as $part) {\n            if ($part->mimetype == 'text/plain') {\n                // Skip if part is an attachment, don't use is_attachment() here\n                if ($part->filename) {\n                    continue;\n                }\n\n                $level = explode('.', $part->mime_id);\n\n                // Check if the part belongs to higher-level's alternative/related\n                while (array_pop($level) !== null) {\n                    if (!count($level)) {\n                        return true;\n                    }\n\n                    $parent = $this->mime_parts[join('.', $level)];\n                    if ($parent->mimetype != 'multipart/alternative' && $parent->mimetype != 'multipart/related') {\n                        continue 2;\n                    }\n                }\n\n                if ($part->size) {\n                    return true;\n                }\n            }\n        }\n\n        $part = null;\n\n        return false;\n    }\n\n\n    /**\n     * Return the first HTML part of this message\n     *\n     * @param rcube_message_part &$part    Reference to the part if found\n     * @param bool               $enriched Enables checking for text/enriched parts too\n     *\n     * @return string HTML message part content\n     */\n    public function first_html_part(&$part = null, $enriched = false)\n    {\n        if ($this->has_html_part($enriched, $part)) {\n            $body = $this->get_part_body($part->mime_id, true);\n\n            if ($part->mimetype == 'text/enriched') {\n                $body = rcube_enriched::to_html($body);\n            }\n\n            return $body;\n        }\n    }\n\n\n    /**\n     * Return the first text part of this message.\n     * If there's no text/plain part but $strict=true and text/html part\n     * exists, it will be returned in text/plain format.\n     *\n     * @param rcube_message_part &$part  Reference to the part if found\n     * @param bool               $strict Check only text/plain parts\n     *\n     * @return string Plain text message/part content\n     */\n    public function first_text_part(&$part = null, $strict = false)\n    {\n        // no message structure, return complete body\n        if (empty($this->parts)) {\n            return $this->body;\n        }\n\n        if ($this->has_text_part($part)) {\n            return $this->get_part_body($part->mime_id, true);\n        }\n\n        if (!$strict && ($body = $this->first_html_part($part, true))) {\n            // create instance of html2text class\n            $h2t  = new rcube_html2text($body);\n            return $h2t->get_text();\n        }\n    }\n\n\n    /**\n     * Checks if part of the message is an attachment (or part of it)\n     *\n     * @param rcube_message_part $part Message part\n     *\n     * @return bool True if the part is an attachment part\n     */\n    public function is_attachment($part)\n    {\n        foreach ($this->attachments as $att_part) {\n            if ($att_part->mime_id == $part->mime_id) {\n                return true;\n            }\n\n            // check if the part is a subpart of another attachment part (message/rfc822)\n            if ($att_part->mimetype == 'message/rfc822') {\n                if (in_array($part, (array)$att_part->parts)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Read the message structure returend by the IMAP server\n     * and build flat lists of content parts and attachments\n     *\n     * @param rcube_message_part $structure Message structure node\n     * @param bool               $recursive True when called recursively\n     */\n    private function parse_structure($structure, $recursive = false)\n    {\n        // real content-type of message/rfc822 part\n        if ($structure->mimetype == 'message/rfc822' && $structure->real_mimetype) {\n            $mimetype = $structure->real_mimetype;\n\n            // parse headers from message/rfc822 part\n            if (!isset($structure->headers['subject']) && !isset($structure->headers['from'])) {\n                list($headers, ) = explode(\"\\r\\n\\r\\n\", $this->get_part_body($structure->mime_id, false, 32768));\n                $structure->headers = rcube_mime::parse_headers($headers);\n            }\n        }\n        else\n            $mimetype = $structure->mimetype;\n\n        // show message headers\n        if ($recursive && is_array($structure->headers) &&\n                (isset($structure->headers['subject']) || $structure->headers['from'] || $structure->headers['to'])) {\n            $c = new stdClass;\n            $c->type = 'headers';\n            $c->headers = $structure->headers;\n            $this->parts[] = $c;\n        }\n\n        // Allow plugins to handle message parts\n        $plugin = $this->app->plugins->exec_hook('message_part_structure',\n            array('object' => $this, 'structure' => $structure,\n                'mimetype' => $mimetype, 'recursive' => $recursive));\n\n        if ($plugin['abort'])\n            return;\n\n        $structure = $plugin['structure'];\n        list($message_ctype_primary, $message_ctype_secondary) = explode('/', $plugin['mimetype']);\n\n        // print body if message doesn't have multiple parts\n        if ($message_ctype_primary == 'text' && !$recursive) {\n            // parts with unsupported type add to attachments list\n            if (!in_array($message_ctype_secondary, array('plain', 'html', 'enriched'))) {\n                $this->attachments[] = $structure;\n                return;\n            }\n\n            $structure->type = 'content';\n            $this->parts[] = $structure;\n\n            // Parse simple (plain text) message body\n            if ($message_ctype_secondary == 'plain') {\n                foreach ((array)$this->uu_decode($structure) as $uupart) {\n                    $this->mime_parts[$uupart->mime_id] = $uupart;\n                    $this->attachments[] = $uupart;\n                }\n            }\n        }\n        // the same for pgp signed messages\n        else if ($mimetype == 'application/pgp' && !$recursive) {\n            $structure->type = 'content';\n            $this->parts[] = $structure;\n        }\n        // message contains (more than one!) alternative parts\n        else if ($mimetype == 'multipart/alternative'\n            && is_array($structure->parts) && count($structure->parts) > 1\n        ) {\n            // get html/plaintext parts, other add to attachments list\n            foreach ($structure->parts as $p => $sub_part) {\n                $sub_mimetype = $sub_part->mimetype;\n                $is_multipart = preg_match('/^multipart\\/(related|relative|mixed|alternative)/', $sub_mimetype);\n\n                // skip empty text parts\n                if (!$sub_part->size && !$is_multipart) {\n                    continue;\n                }\n\n                // We've encountered (malformed) messages with more than\n                // one text/plain or text/html part here. There's no way to choose\n                // which one is better, so we'll display first of them and add\n                // others as attachments (#1489358)\n\n                // check if sub part is\n                if ($is_multipart)\n                    $related_part = $p;\n                else if ($sub_mimetype == 'text/plain' && !$plain_part)\n                    $plain_part = $p;\n                else if ($sub_mimetype == 'text/html' && !$html_part) {\n                    $html_part = $p;\n                    $this->got_html_part = true;\n                }\n                else if ($sub_mimetype == 'text/enriched' && !$enriched_part)\n                    $enriched_part = $p;\n                else {\n                    // add unsupported/unrecognized parts to attachments list\n                    $this->attachments[] = $sub_part;\n                }\n            }\n\n            // parse related part (alternative part could be in here)\n            if ($related_part !== null && !$this->parse_alternative) {\n                $this->parse_alternative = true;\n                $this->parse_structure($structure->parts[$related_part], true);\n                $this->parse_alternative = false;\n\n                // if plain part was found, we should unset it if html is preferred\n                if ($this->opt['prefer_html'] && count($this->parts))\n                    $plain_part = null;\n            }\n\n            // choose html/plain part to print\n            if ($html_part !== null && $this->opt['prefer_html']) {\n                $print_part = $structure->parts[$html_part];\n            }\n            else if ($enriched_part !== null) {\n                $print_part = $structure->parts[$enriched_part];\n            }\n            else if ($plain_part !== null) {\n                $print_part = $structure->parts[$plain_part];\n            }\n\n            // add the right message body\n            if (is_object($print_part)) {\n                $print_part->type = 'content';\n                $this->parts[] = $print_part;\n            }\n            // show plaintext warning\n            else if ($html_part !== null && empty($this->parts)) {\n                $c = new stdClass;\n                $c->type            = 'content';\n                $c->ctype_primary   = 'text';\n                $c->ctype_secondary = 'plain';\n                $c->mimetype        = 'text/plain';\n                $c->realtype        = 'text/html';\n\n                $this->parts[] = $c;\n            }\n        }\n        // this is an ecrypted message -> create a plaintext body with the according message\n        else if ($mimetype == 'multipart/encrypted') {\n            $p = new stdClass;\n            $p->type            = 'content';\n            $p->ctype_primary   = 'text';\n            $p->ctype_secondary = 'plain';\n            $p->mimetype        = 'text/plain';\n            $p->realtype        = 'multipart/encrypted';\n            $p->mime_id         = $structure->mime_id;\n\n            $this->parts[] = $p;\n\n            // add encrypted payload part as attachment\n            if (is_array($structure->parts)) {\n                for ($i=0; $i < count($structure->parts); $i++) {\n                    $subpart = $structure->parts[$i];\n                    if ($subpart->mimetype == 'application/octet-stream' || !empty($subpart->filename)) {\n                        $this->attachments[] = $subpart;\n                    }\n                }\n            }\n        }\n        // this is an S/MIME ecrypted message -> create a plaintext body with the according message\n        else if ($mimetype == 'application/pkcs7-mime') {\n            $p = new stdClass;\n            $p->type            = 'content';\n            $p->ctype_primary   = 'text';\n            $p->ctype_secondary = 'plain';\n            $p->mimetype        = 'text/plain';\n            $p->realtype        = 'application/pkcs7-mime';\n            $p->mime_id         = $structure->mime_id;\n\n            $this->parts[] = $p;\n\n            if (!empty($structure->filename)) {\n                $this->attachments[] = $structure;\n            }\n        }\n        // message contains multiple parts\n        else if (is_array($structure->parts) && !empty($structure->parts)) {\n            // iterate over parts\n            for ($i=0; $i < count($structure->parts); $i++) {\n                $mail_part      = &$structure->parts[$i];\n                $primary_type   = $mail_part->ctype_primary;\n                $secondary_type = $mail_part->ctype_secondary;\n                $part_mimetype  = $mail_part->mimetype;\n\n                // multipart/alternative or message/rfc822\n                if ($primary_type == 'multipart' || $part_mimetype == 'message/rfc822') {\n                    $this->parse_structure($mail_part, true);\n\n                    // list message/rfc822 as attachment as well (mostly .eml)\n                    if ($primary_type == 'message' && !empty($mail_part->filename)) {\n                        $this->attachments[] = $mail_part;\n                    }\n                }\n                // part text/[plain|html] or delivery status\n                else if ((($part_mimetype == 'text/plain' || $part_mimetype == 'text/html') && $mail_part->disposition != 'attachment') ||\n                    in_array($part_mimetype, array('message/delivery-status', 'text/rfc822-headers', 'message/disposition-notification'))\n                ) {\n                    // Allow plugins to handle also this part\n                    $plugin = $this->app->plugins->exec_hook('message_part_structure',\n                        array('object' => $this, 'structure' => $mail_part,\n                            'mimetype' => $part_mimetype, 'recursive' => true));\n\n                    if ($plugin['abort']) {\n                        continue;\n                    }\n\n                    if ($part_mimetype == 'text/html' && $mail_part->size) {\n                        $this->got_html_part = true;\n                    }\n\n                    $mail_part = $plugin['structure'];\n                    list($primary_type, $secondary_type) = explode('/', $plugin['mimetype']);\n\n                    // add text part if it matches the prefs\n                    if (!$this->parse_alternative ||\n                        ($secondary_type == 'html' && $this->opt['prefer_html']) ||\n                        ($secondary_type == 'plain' && !$this->opt['prefer_html'])\n                    ) {\n                        $mail_part->type = 'content';\n                        $this->parts[] = $mail_part;\n                    }\n\n                    // list as attachment as well\n                    if (!empty($mail_part->filename)) {\n                        $this->attachments[] = $mail_part;\n                    }\n                }\n                // ignore \"virtual\" protocol parts\n                else if ($primary_type == 'protocol') {\n                    continue;\n                }\n                // part is Microsoft Outlook TNEF (winmail.dat)\n                else if ($part_mimetype == 'application/ms-tnef') {\n                    foreach ((array)$this->tnef_decode($mail_part) as $tpart) {\n                        $this->mime_parts[$tpart->mime_id] = $tpart;\n                        $this->attachments[] = $tpart;\n                    }\n                }\n                // part is a file/attachment\n                else if (preg_match('/^(inline|attach)/', $mail_part->disposition) ||\n                    $mail_part->headers['content-id'] ||\n                    ($mail_part->filename &&\n                        (empty($mail_part->disposition) || preg_match('/^[a-z0-9!#$&.+^_-]+$/i', $mail_part->disposition)))\n                ) {\n                    // skip apple resource forks\n                    if ($message_ctype_secondary == 'appledouble' && $secondary_type == 'applefile')\n                        continue;\n\n                    // part belongs to a related message and is linked\n                    if (preg_match('/^multipart\\/(related|relative)/', $mimetype)\n                        && ($mail_part->headers['content-id'] || $mail_part->headers['content-location'])\n                    ) {\n                        if ($mail_part->headers['content-id'])\n                            $mail_part->content_id = preg_replace(array('/^</', '/>$/'), '', $mail_part->headers['content-id']);\n                        if ($mail_part->headers['content-location'])\n                            $mail_part->content_location = $mail_part->headers['content-base'] . $mail_part->headers['content-location'];\n\n                        $this->inline_parts[] = $mail_part;\n                    }\n                    // regular attachment with valid content type\n                    // (content-type name regexp according to RFC4288.4.2)\n                    else if (preg_match('/^[a-z0-9!#$&.+^_-]+\\/[a-z0-9!#$&.+^_-]+$/i', $part_mimetype)) {\n                        $this->attachments[] = $mail_part;\n                    }\n                    // attachment with invalid content type\n                    // replace malformed content type with application/octet-stream (#1487767)\n                    else if ($mail_part->filename) {\n                        $mail_part->ctype_primary   = 'application';\n                        $mail_part->ctype_secondary = 'octet-stream';\n                        $mail_part->mimetype        = 'application/octet-stream';\n\n                        $this->attachments[] = $mail_part;\n                    }\n                }\n                // calendar part not marked as attachment (#1490325)\n                else if ($part_mimetype == 'text/calendar') {\n                    if (!$mail_part->filename) {\n                        $mail_part->filename = 'calendar.ics';\n                    }\n\n                    $this->attachments[] = $mail_part;\n                }\n            }\n\n            // if this was a related part try to resolve references\n            if (preg_match('/^multipart\\/(related|relative)/', $mimetype) && sizeof($this->inline_parts)) {\n                $a_replaces = array();\n                $img_regexp = '/^image\\/(gif|jpe?g|png|tiff|bmp|svg)/';\n\n                foreach ($this->inline_parts as $inline_object) {\n                    $part_url = $this->get_part_url($inline_object->mime_id, $inline_object->ctype_primary);\n                    if (isset($inline_object->content_id))\n                        $a_replaces['cid:'.$inline_object->content_id] = $part_url;\n                    if ($inline_object->content_location) {\n                        $a_replaces[$inline_object->content_location] = $part_url;\n                    }\n\n                    if (!empty($inline_object->filename)) {\n                        // MS Outlook sends sometimes non-related attachments as related\n                        // In this case multipart/related message has only one text part\n                        // We'll add all such attachments to the attachments list\n                        if (!isset($this->got_html_part)) {\n                            $this->attachments[] = $inline_object;\n                        }\n                        // MS Outlook sometimes also adds non-image attachments as related\n                        // We'll add all such attachments to the attachments list\n                        // Warning: some browsers support pdf in <img/>\n                        else if (!preg_match($img_regexp, $inline_object->mimetype)) {\n                            $this->attachments[] = $inline_object;\n                        }\n                        // @TODO: we should fetch HTML body and find attachment's content-id\n                        // to handle also image attachments without reference in the body\n                        // @TODO: should we list all image attachments in text mode?\n                    }\n                }\n\n                // add replace array to each content part\n                // (will be applied later when part body is available)\n                foreach ($this->parts as $i => $part) {\n                    if ($part->type == 'content')\n                        $this->parts[$i]->replaces = $a_replaces;\n                }\n            }\n        }\n        // message is a single part non-text\n        else if ($structure->filename) {\n            $this->attachments[] = $structure;\n        }\n        // message is a single part non-text (without filename)\n        else if (preg_match('/application\\//i', $mimetype)) {\n            $this->attachments[] = $structure;\n        }\n    }\n\n\n    /**\n     * Fill aflat array with references to all parts, indexed by part numbers\n     *\n     * @param rcube_message_part $part Message body structure\n     */\n    private function get_mime_numbers(&$part)\n    {\n        if (strlen($part->mime_id))\n            $this->mime_parts[$part->mime_id] = &$part;\n\n        if (is_array($part->parts))\n            for ($i=0; $i<count($part->parts); $i++)\n                $this->get_mime_numbers($part->parts[$i]);\n    }\n\n\n    /**\n     * Decode a Microsoft Outlook TNEF part (winmail.dat)\n     *\n     * @param rcube_message_part $part Message part to decode\n     * @return array\n     */\n    function tnef_decode(&$part)\n    {\n        // @TODO: attachment may be huge, handle body via file\n        $body     = $this->get_part_body($part->mime_id);\n        $tnef     = new rcube_tnef_decoder;\n        $tnef_arr = $tnef->decompress($body);\n        $parts    = array();\n\n        unset($body);\n\n        foreach ($tnef_arr as $pid => $winatt) {\n            $tpart = new rcube_message_part;\n\n            $tpart->filename        = $this->fix_attachment_name(trim($winatt['name']), $part);\n            $tpart->encoding        = 'stream';\n            $tpart->ctype_primary   = trim(strtolower($winatt['type']));\n            $tpart->ctype_secondary = trim(strtolower($winatt['subtype']));\n            $tpart->mimetype        = $tpart->ctype_primary . '/' . $tpart->ctype_secondary;\n            $tpart->mime_id         = 'winmail.' . $part->mime_id . '.' . $pid;\n            $tpart->size            = $winatt['size'];\n            $tpart->body            = $winatt['stream'];\n\n            $parts[] = $tpart;\n            unset($tnef_arr[$pid]);\n        }\n\n        return $parts;\n    }\n\n\n    /**\n     * Parse message body for UUencoded attachments bodies\n     *\n     * @param rcube_message_part $part Message part to decode\n     * @return array\n     */\n    function uu_decode(&$part)\n    {\n        // @TODO: messages may be huge, handle body via file\n        $part->body = $this->get_part_body($part->mime_id);\n        $parts      = array();\n        $pid        = 0;\n\n        // FIXME: line length is max.65?\n        $uu_regexp_begin = '/begin [0-7]{3,4} ([^\\r\\n]+)\\r?\\n/s';\n        $uu_regexp_end   = '/`\\r?\\nend((\\r?\\n)|($))/s';\n\n        while (preg_match($uu_regexp_begin, $part->body, $matches, PREG_OFFSET_CAPTURE)) {\n            $startpos = $matches[0][1];\n\n            if (!preg_match($uu_regexp_end, $part->body, $m, PREG_OFFSET_CAPTURE, $startpos)) {\n                break;\n            }\n\n            $endpos    = $m[0][1];\n            $begin_len = strlen($matches[0][0]);\n            $end_len   = strlen($m[0][0]);\n\n            // extract attachment body\n            $filebody = substr($part->body, $startpos + $begin_len, $endpos - $startpos - $begin_len - 1);\n            $filebody = str_replace(\"\\r\\n\", \"\\n\", $filebody);\n\n            // remove attachment body from the message body\n            $part->body = substr_replace($part->body, '', $startpos, $endpos + $end_len - $startpos);\n            // mark body as modified so it will not be cached by rcube_imap_cache\n            $part->body_modified = true;\n\n            // add attachments to the structure\n            $uupart = new rcube_message_part;\n            $uupart->filename = trim($matches[1][0]);\n            $uupart->encoding = 'stream';\n            $uupart->body     = convert_uudecode($filebody);\n            $uupart->size     = strlen($uupart->body);\n            $uupart->mime_id  = 'uu.' . $part->mime_id . '.' . $pid;\n\n            $ctype = rcube_mime::file_content_type($uupart->body, $uupart->filename, 'application/octet-stream', true);\n            $uupart->mimetype = $ctype;\n            list($uupart->ctype_primary, $uupart->ctype_secondary) = explode('/', $ctype);\n\n            $parts[] = $uupart;\n            $pid++;\n        }\n\n        return $parts;\n    }\n\n    /**\n     * Fix attachment name encoding if needed/possible\n     */\n    protected function fix_attachment_name($name, $part)\n    {\n        if ($name == rcube_charset::clean($name)) {\n            return $name;\n        }\n\n        // find charset from part or its parent(s)\n        if ($part->charset) {\n            $charsets[] = $part->charset;\n        }\n        else {\n            // check first part (common case)\n            $n = strpos($part->mime_id, '.') ? preg_replace('/\\.[0-9]+$/', '', $part->mime_id) . '.1' : 1;\n            if (($_part = $this->mime_parts[$n]) && $_part->charset) {\n                $charsets[] = $_part->charset;\n            }\n\n            // check parents' charset\n            $items = explode('.', $part->mime_id);\n            for ($i = count($items)-1; $i > 0; $i--) {\n                $last   = array_pop($items);\n                $parent = $this->mime_parts[join('.', $items)];\n\n                if ($parent && $parent->charset) {\n                    $charsets[] = $parent->charset;\n                }\n            }\n        }\n\n        if ($this->headers->charset) {\n            $charsets[] = $this->headers->charset;\n        }\n\n        if (empty($charsets)) {\n            $rcube      = rcube::get_instance();\n            $charsets[] = rcube_charset::detect($name, $rcube->config->get('default_charset', RCUBE_CHARSET));\n        }\n\n        foreach (array_unique($charsets) as $charset) {\n            $_name = rcube_charset::convert($name, $charset);\n\n            if ($_name == rcube_charset::clean($_name)) {\n                if (!$part->charset) {\n                    $part->charset = $charset;\n                }\n\n                return $_name;\n            }\n        }\n\n        return $name;\n    }\n\n    /**\n     * Deprecated methods (to be removed)\n     */\n\n    public static function unfold_flowed($text)\n    {\n        return rcube_mime::unfold_flowed($text);\n    }\n\n    public static function format_flowed($text, $length = 72)\n    {\n        return rcube_mime::format_flowed($text, $length);\n    }\n\n}\n", "code_before": "<?php\n\n/*\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Logical representation of a mail message with all its data          |\n |   and related functions                                               |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Logical representation of a mail message with all its data\n * and related functions\n */\nclass rcube_message\n{\n    /**\n     * Instance of framework class.\n     *\n     * @var rcube\n     */\n    protected $app;\n\n    /**\n     * Instance of storage class\n     *\n     * @var rcube_storage\n     */\n    protected $storage;\n\n    /**\n     * Instance of mime class\n     *\n     * @var rcube_mime\n     */\n    protected $mime;\n\n    protected $opt = [];\n    protected $parse_alternative = false;\n    protected $got_html_part = false;\n    protected $tnef_decode = false;\n\n    /**\n     * This holds a list of Content-IDs and Content-Locations by which parts of\n     * this message are referenced (e.g. in HTML parts).\n     *\n     * @var array\n     */\n    protected $replacement_references = [];\n\n    public $uid;\n    public $folder;\n    public $headers;\n    public $sender;\n    public $context;\n    public $body;\n    public $subject = '';\n    public $is_safe = false;\n    public $pgp_mime = false;\n    public $encrypted_part;\n\n    /** @var array<rcube_message_part> */\n    public $parts = [];\n\n    /** @var array<rcube_message_part> */\n    public $mime_parts = [];\n\n    /** @var array<rcube_message_part> */\n    public $attachments = [];\n\n    public const BODY_MAX_SIZE = 1048576; // 1MB\n\n    /**\n     * __construct\n     *\n     * Provide a uid, and parse message structure.\n     *\n     * @param string $uid     the message UID\n     * @param string $folder  Folder name\n     * @param bool   $is_safe Security flag\n     */\n    public function __construct($uid, $folder = null, $is_safe = false)\n    {\n        // decode combined UID-folder identifier\n        if (preg_match('/^[0-9.]+-.+/', $uid)) {\n            [$uid, $folder] = explode('-', $uid, 2);\n        }\n\n        $context = null;\n        if (preg_match('/^([0-9]+)\\.([0-9.]+)$/', $uid, $matches)) {\n            $uid = $matches[1];\n            $context = $matches[2];\n        }\n\n        $this->uid = $uid;\n        $this->context = $context;\n        $this->app = rcube::get_instance();\n        $this->storage = $this->app->get_storage();\n        $this->folder = is_string($folder) && strlen($folder) ? $folder : $this->storage->get_folder();\n\n        // Set current folder\n        $this->storage->set_folder($this->folder);\n        $this->storage->set_options(['all_headers' => true]);\n\n        $this->headers = $this->storage->get_message($uid);\n\n        if (!$this->headers) {\n            return;\n        }\n\n        $this->tnef_decode = (bool) $this->app->config->get('tnef_decode', true);\n\n        $this->set_safe($is_safe || !empty($_SESSION['safe_messages'][$this->folder . ':' . $uid]));\n        $this->opt = [\n            'safe' => $this->is_safe,\n            'prefer_html' => $this->app->config->get('prefer_html'),\n            'get_url' => $this->app->url([\n                    'action' => 'get',\n                    'mbox' => $this->folder,\n                    'uid' => $uid,\n                ],\n                false, false, true\n            ),\n        ];\n\n        $this->mime = new rcube_mime($this->headers->charset);\n        $this->subject = str_replace(\"\\n\", '', (string) $this->headers->get('subject'));\n        $from = $this->mime->decode_address_list($this->headers->from, 1);\n        $this->sender = current($from);\n\n        if (!empty($this->headers->structure)) {\n            $this->get_mime_numbers($this->headers->structure);\n            $this->parse_structure($this->headers->structure);\n        } elseif ($this->context === null) {\n            $this->body = $this->storage->get_body($uid);\n        }\n\n        // notify plugins and let them analyze this structured message object\n        $this->app->plugins->exec_hook('message_load', ['object' => $this]);\n    }\n\n    /**\n     * Return a (decoded) message header\n     *\n     * @param string $name Header name\n     * @param bool   $raw  Don't mime-decode the value\n     *\n     * @return string|null Header value\n     */\n    public function get_header($name, $raw = false)\n    {\n        if (empty($this->headers)) {\n            return null;\n        }\n\n        return $this->headers->get($name, !$raw);\n    }\n\n    /**\n     * Set is_safe var and session data\n     *\n     * @param bool $safe enable/disable\n     */\n    public function set_safe($safe = true)\n    {\n        $_SESSION['safe_messages'][$this->folder . ':' . $this->uid] = $this->is_safe = $safe;\n    }\n\n    /**\n     * Compose a valid URL for getting a message part\n     *\n     * @param string $mime_id Part MIME-ID\n     * @param mixed  $embed   Mimetype class for parts to be embedded\n     *\n     * @return string|false URL or false if part does not exist\n     */\n    public function get_part_url($mime_id, $embed = false)\n    {\n        if (!empty($this->mime_parts[$mime_id])) {\n            return $this->opt['get_url'] . '&_part=' . $mime_id\n                . ($embed ? '&_embed=1&_mimeclass=' . $embed : '');\n        }\n\n        return false;\n    }\n\n    /**\n     * Get content of a specific part of this message\n     *\n     * @param string   $mime_id           Part MIME-ID\n     * @param resource $fp                File pointer to save the message part\n     * @param bool     $skip_charset_conv Disables charset conversion\n     * @param int      $max_bytes         Only read this number of bytes\n     * @param bool     $formatted         Enables formatting of text/* parts bodies\n     *\n     * @return string|bool Part content, False on error\n     *\n     * @deprecated\n     */\n    public function get_part_content($mime_id, $fp = null, $skip_charset_conv = false, $max_bytes = 0, $formatted = true)\n    {\n        $part = $this->mime_parts[$mime_id] ?? null;\n\n        if ($part) {\n            // stored in message structure (winmail/inline-uuencode)\n            if (!empty($part->body) || $part->encoding == 'stream') {\n                if ($fp) {\n                    fwrite($fp, $part->body);\n                }\n\n                return $fp ? true : $part->body;\n            }\n\n            // get from IMAP\n            $this->storage->set_folder($this->folder);\n\n            return $this->storage->get_message_part($this->uid, $mime_id, $part,\n                null, $fp, $skip_charset_conv, $max_bytes, $formatted);\n        }\n\n        return false;\n    }\n\n    /**\n     * Get content of a specific part of this message\n     *\n     * @param string $mime_id   Part ID\n     * @param bool   $formatted Enables formatting of text/* parts bodies\n     * @param int    $max_bytes Only return/read this number of bytes\n     * @param mixed  $mode      NULL to return a string, -1 to print body\n     *                          or file pointer to save the body into\n     *\n     * @return string|bool Part content or operation status, False on error\n     */\n    public function get_part_body($mime_id, $formatted = false, $max_bytes = 0, $mode = null)\n    {\n        if (empty($this->mime_parts[$mime_id])) {\n            return false;\n        }\n\n        $part = $this->mime_parts[$mime_id];\n\n        // allow plugins to modify part body\n        $plugin = $this->app->plugins->exec_hook('message_part_body',\n            ['object' => $this, 'part' => $part]);\n\n        // only text parts can be formatted\n        $formatted = $formatted && $part->ctype_primary == 'text';\n\n        // part body not fetched yet... save in memory if it's small enough\n        if ($part->body === null && is_numeric($mime_id) && $part->size < self::BODY_MAX_SIZE) {\n            $this->storage->set_folder($this->folder);\n            // Warning: body here should be always unformatted\n            $body = $this->storage->get_message_part($this->uid, $mime_id, $part, null, null, true, 0, false);\n            if ($body === false) {\n                return false;\n            }\n\n            $part->body = $body;\n        }\n\n        $charset = !empty($this->headers) ? $this->headers->charset : null;\n\n        // body stored in message structure (winmail/inline-uuencode)\n        if (is_string($part->body) || $part->encoding == 'stream') {\n            $body = $part->body;\n\n            if ($formatted) {\n                $body = self::format_part_body($body, $part, $charset);\n            }\n\n            if ($max_bytes && strlen($body) > $max_bytes) {\n                $body = substr($body, 0, $max_bytes);\n            }\n\n            if (is_resource($mode)) {\n                fwrite($mode, $body);\n                @rewind($mode);\n                return true;\n            }\n\n            if ($mode === -1) {\n                echo $body;\n                return true;\n            }\n\n            return $body;\n        }\n\n        // get the body from IMAP\n        $this->storage->set_folder($this->folder);\n\n        $body = $this->storage->get_message_part($this->uid, $mime_id, $part,\n            $mode === -1, is_resource($mode) ? $mode : null,\n            !($mode && $formatted), $max_bytes, $mode && $formatted);\n\n        if (is_resource($mode)) {\n            @rewind($mode);\n            return $body !== false;\n        }\n\n        if (!$mode && is_string($body) && $formatted) {\n            $body = self::format_part_body($body, $part, $charset);\n        }\n\n        return $body;\n    }\n\n    /**\n     * Format text message part for display\n     *\n     * @param string             $body            Part body\n     * @param rcube_message_part $part            Part object\n     * @param string             $default_charset Fallback charset if part charset is not specified\n     *\n     * @return string Formatted body\n     */\n    public static function format_part_body($body, $part, $default_charset = null)\n    {\n        // remove useless characters\n        $body = preg_replace('/[\\t\\r\\0\\x0B]+\\n/', \"\\n\", $body);\n\n        // remove NULL characters if any (#1486189)\n        if (str_contains($body, \"\\x00\")) {\n            $body = str_replace(\"\\x00\", '', $body);\n        }\n\n        // detect charset...\n        if (empty($part->charset) || strtoupper($part->charset) == 'US-ASCII') {\n            // try to extract charset information from HTML meta tag (#1488125)\n            if ($part->ctype_secondary == 'html' && preg_match('/<meta[^>]+charset=([a-z0-9-_]+)/i', $body, $m)) {\n                $part->charset = strtoupper($m[1]);\n            } elseif ($default_charset) {\n                $part->charset = $default_charset;\n            } else {\n                $rcube = rcube::get_instance();\n                $part->charset = $rcube->config->get('default_charset', RCUBE_CHARSET);\n            }\n        }\n\n        // ..convert charset encoding\n        $body = rcube_charset::convert($body, $part->charset);\n\n        return $body;\n    }\n\n    /**\n     * Determine if the message contains a HTML part. This must to be\n     * a real part not an attachment (or its part)\n     *\n     * @param bool                    $check_convertible Enables checking for text/enriched or markdown parts, too\n     * @param rcube_message_part|null &$ref              Reference to the part if found\n     *\n     * @return bool True if a HTML is available, False if not\n     */\n    public function has_html_part($check_convertible = false, &$ref = null)\n    {\n        // check all message parts\n        foreach ($this->mime_parts as $part) {\n            if ($part->mimetype == 'text/html' || ($check_convertible && ($part->mimetype == 'text/enriched' || $part->mimetype === 'text/markdown' || $part->mimetype === 'text/x-markdown'))) {\n                // Skip if part is an attachment, don't use is_attachment() here\n                if ($part->filename) {\n                    continue;\n                }\n\n                if (!$part->size) {\n                    continue;\n                }\n\n                if (!$this->check_context($part)) {\n                    continue;\n                }\n\n                // The HTML body part extracted from a winmail.dat attachment part\n                if (str_starts_with($part->mime_id, 'winmail.')) {\n                    $ref = $part;\n\n                    return true;\n                }\n\n                $level = explode('.', $part->mime_id);\n                $depth = count($level);\n                $last = '';\n\n                // Check if the part does not belong to a message/rfc822 part\n                // @phpstan-ignore-next-line\n                while (array_pop($level) !== null) {\n                    if (!count($level)) {\n                        break;\n                    }\n\n                    $parent = $this->mime_parts[implode('.', $level)];\n\n                    if (!$this->check_context($parent)) {\n                        break;\n                    }\n\n                    if ($parent->mimetype == 'message/rfc822') {\n                        continue 2;\n                    }\n                }\n\n                $ref = $part;\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Determine if the message contains a text/plain part. This must to be\n     * a real part not an attachment (or its part)\n     *\n     * @param ?rcube_message_part &$ref Reference to the part if found\n     *\n     * @return bool True if a plain text part is available, False if not\n     */\n    public function has_text_part(&$ref = null)\n    {\n        // check all message parts\n        foreach ($this->mime_parts as $part) {\n            if ($part->mimetype == 'text/plain') {\n                // Skip if part is an attachment, don't use is_attachment() here\n                if (!empty($part->filename)) {\n                    continue;\n                }\n\n                if (empty($part->size)) {\n                    continue;\n                }\n\n                if (!$this->check_context($part)) {\n                    continue;\n                }\n\n                $level = explode('.', $part->mime_id);\n\n                // Check if the part does not belong to a message/rfc822 part\n                // @phpstan-ignore-next-line\n                while (array_pop($level) !== null) {\n                    if (!count($level)) {\n                        break;\n                    }\n\n                    $parent = $this->mime_parts[implode('.', $level)];\n\n                    if (!$this->check_context($parent)) {\n                        break;\n                    }\n\n                    if ($parent->mimetype == 'message/rfc822') {\n                        continue 2;\n                    }\n                }\n\n                $ref = $part;\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Return the first HTML part of this message\n     *\n     * @param rcube_message_part &$part             Reference to the part if found\n     * @param bool               $check_convertible Enables checking for text/enriched or markdown parts, too\n     *\n     * @return string|null HTML message part content\n     */\n    public function first_html_part(&$part = null, $check_convertible = false)\n    {\n        if ($this->has_html_part($check_convertible, $part)) {\n            $body = $this->get_part_body($part->mime_id, true);\n\n            if ($part->mimetype == 'text/enriched') {\n                $body = rcube_enriched::to_html($body);\n            } elseif ($part->mimetype == 'text/markdown' || $part->mimetype == 'text/x-markdown') {\n                $body = rcube_markdown::to_html($body);\n            }\n\n            return $body;\n        }\n\n        return null;\n    }\n\n    /**\n     * Return the first text part of this message.\n     * If there's no text/plain part but $strict=true and text/html part\n     * exists, it will be returned in text/plain format.\n     *\n     * @param rcube_message_part &$part  Reference to the part if found\n     * @param bool               $strict Check only text/plain parts\n     *\n     * @return string|null Plain text message/part content\n     */\n    public function first_text_part(&$part = null, $strict = false)\n    {\n        // no message structure, return complete body\n        if (empty($this->parts)) {\n            return $this->body;\n        }\n\n        if ($this->has_text_part($part)) {\n            return $this->get_part_body($part->mime_id, true);\n        }\n\n        if (!$strict && ($body = $this->first_html_part($part, true))) {\n            // create instance of html2text class\n            $h2t = new rcube_html2text($body);\n            return $h2t->get_text();\n        }\n\n        return null;\n    }\n\n    /**\n     * Return message parts in current context\n     *\n     * @return array<rcube_message_part> Message parts\n     */\n    public function mime_parts()\n    {\n        if ($this->context === null) {\n            return $this->mime_parts;\n        }\n\n        $parts = [];\n\n        foreach ($this->mime_parts as $part_id => $part) {\n            if ($this->check_context($part)) {\n                $parts[$part_id] = $part;\n            }\n        }\n\n        return $parts;\n    }\n\n    /**\n     * Checks if part of the message is an attachment (or part of it)\n     *\n     * @param rcube_message_part $part Message part\n     *\n     * @return bool True if the part is an attachment part\n     */\n    public function is_attachment($part)\n    {\n        foreach ($this->attachments as $att_part) {\n            if ($att_part->mime_id === $part->mime_id) {\n                return true;\n            }\n\n            // check if the part is a subpart of another attachment part (message/rfc822)\n            if ($att_part->mimetype == 'message/rfc822') {\n                if (in_array($part, (array) $att_part->parts)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    private function parse_html_for_replacement_references(rcube_message_part $part): array\n    {\n        // Check if the part is actually referenced in a text/html-part sibling\n        // (i.e. that is part of the same `$part`).\n        $html_parts = $this->find_html_parts($part);\n        if (empty($html_parts)) {\n            return [];\n        }\n        // Note: There might be more than one HTML part, thus we use a callback\n        // and concatenate the results.\n        $html_content = implode('', array_map(function ($html_part) { return $this->get_part_body($html_part->mime_id); }, $html_parts));\n\n        $referenced_content_identifiers = [];\n        $replacements = [];\n        // TODO: recursion.\n        // TODO: only get replacements from siblings\n        foreach ($this->mime_parts as $mime_part) {\n            $replacements = array_merge($replacements, array_keys($mime_part->replaces));\n        }\n        foreach ($replacements as $content_identifier) {\n            // Is the Content-Id or Content-Location used?\n            // TODO: match Content-Location more strictly. E.g. \"image.jpg\" is a\n            // valid value here, too, which can easily be matched wrongly\n            // currently.\n            if (str_contains($html_content, $content_identifier)) {\n                $referenced_content_identifiers[] = preg_replace('/^cid:/', '', $content_identifier);\n            }\n        }\n        return $referenced_content_identifiers;\n    }\n\n    /**\n     * Get a cached list of replacement references, which are collected during\n     * parsing from Content-Id and Content-Location headers of mime-parts.\n     */\n    protected function get_replacement_references(rcube_message_part $part): array\n    {\n        if (!isset($this->replacement_references[$part->mime_id])) {\n            $this->replacement_references[$part->mime_id] = $this->parse_html_for_replacement_references($part);\n        }\n\n        return $this->replacement_references[$part->mime_id];\n    }\n\n    /**\n     * Checks if a given message part is referred to from another message part.\n     * Usually this happens if an HTML-part includes images to show inline, but\n     * technically there can be other cases, too.\n     * In any case, an attachment that is *not* referred to, shall be shown to\n     * the users (either in/after the message body or as downloadable file).\n     *\n     * @param rcube_message_part $part Message part\n     *\n     * @return bool True if the part is an attachment part\n     */\n    public function is_referred_attachment(rcube_message_part $part): bool\n    {\n        // This code is intentionally verbose to keep it comprehensible.\n        $references = $this->get_replacement_references($part);\n\n        // Filter out attachments that are referenced by their Content-ID in\n        // another mime-part.\n        if (!empty($part->content_id) && in_array($part->content_id, $references)) {\n            return true;\n        }\n\n        // Filter out attachments that are referenced by their Content-Location\n        // in another mime-part.\n        if (!empty($part->content_location) && in_array($part->content_location, $references)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * In a multipart/encrypted encrypted message,\n     * find the encrypted message payload part.\n     *\n     * @return rcube_message_part|null\n     */\n    public function get_multipart_encrypted_part()\n    {\n        foreach ($this->mime_parts as $mime_id => $mpart) {\n            if ($mpart->mimetype == 'multipart/encrypted') {\n                $this->pgp_mime = true;\n            }\n            if ($this->pgp_mime && ($mpart->mimetype == 'application/octet-stream'\n                    || (!empty($mpart->filename) && $mpart->filename != 'version.txt'))\n            ) {\n                $this->encrypted_part = $mime_id;\n                return $mpart;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Read the message structure returned by the IMAP server\n     * and build flat lists of content parts and attachments\n     *\n     * @param rcube_message_part $structure Message structure node\n     * @param bool               $recursive True when called recursively\n     */\n    private function parse_structure($structure, $recursive = false)\n    {\n        // real content-type of message/rfc822 part\n        if ($structure->mimetype == 'message/rfc822' && !empty($structure->real_mimetype)) {\n            $mimetype = $structure->real_mimetype;\n\n            // parse headers from message/rfc822 part\n            if (!isset($structure->headers['subject']) && !isset($structure->headers['from'])) {\n                $part_body = $this->get_part_body($structure->mime_id, false, 32768);\n\n                if (str_contains($part_body, \"\\r\\n\\r\\n\")) {\n                    [$headers] = explode(\"\\r\\n\\r\\n\", $part_body, 2);\n                }\n\n                $structure->headers = rcube_mime::parse_headers($headers);\n\n                if ($this->context === $structure->mime_id) {\n                    $this->headers = rcube_message_header::from_array($structure->headers);\n                }\n\n                // For small text messages we can optimize, so an additional FETCH is not needed\n                if ($structure->size < 32768) {\n                    $decoder = new rcube_mime_decode();\n                    $decoded = $decoder->decode($part_body);\n\n                    // Non-multipart message\n                    if (isset($decoded->body) && count($structure->parts) == 1) {\n                        $structure->parts[0]->body = $decoded->body;\n                    }\n                    // Multipart message\n                    else {\n                        foreach ($decoded->parts as $idx => $p) {\n                            if (array_key_exists($idx, $structure->parts)) {\n                                $structure->parts[$idx]->body = $p->body;\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            $mimetype = $structure->mimetype;\n        }\n\n        // show message headers\n        if (\n            $recursive\n            && (\n                isset($structure->headers['subject'])\n                || !empty($structure->headers['from'])\n                || !empty($structure->headers['to'])\n            )\n        ) {\n            $c = new rcube_message_part();\n            $c->type = 'headers';\n            $c->headers = $structure->headers;\n            $this->add_part($c);\n        }\n\n        // Allow plugins to handle message parts\n        $plugin = $this->app->plugins->exec_hook('message_part_structure', [\n            'object' => $this,\n            'structure' => $structure,\n            'mimetype' => $mimetype,\n            'recursive' => $recursive,\n        ]);\n\n        if ($plugin['abort']) {\n            return;\n        }\n\n        /** @var rcube_message_part $structure */\n        $structure = $plugin['structure'];\n        $mimetype = $plugin['mimetype'];\n        $recursive = $plugin['recursive'];\n\n        [$message_ctype_primary, $message_ctype_secondary] = explode('/', $mimetype);\n\n        // print body if message doesn't have multiple parts\n        if ($message_ctype_primary == 'text' && !$recursive) {\n            // parts with unsupported type add to attachments list\n            if (!in_array($message_ctype_secondary, ['plain', 'html', 'enriched', 'markdown', 'x-markdown'])) {\n                $this->add_attachment($structure);\n                return;\n            }\n\n            $structure->type = 'content';\n            $this->add_part($structure);\n\n            // Parse simple (plain text) message body\n            if ($message_ctype_secondary == 'plain') {\n                foreach ((array) $this->uu_decode($structure) as $uupart) {\n                    $this->mime_parts[$uupart->mime_id] = $uupart;\n                    $this->add_attachment($uupart);\n                }\n            }\n        }\n        // the same for pgp signed messages\n        elseif ($mimetype == 'application/pgp' && !$recursive) {\n            $structure->type = 'content';\n            $this->add_part($structure);\n        }\n        // message contains (more than one!) alternative parts\n        elseif ($mimetype == 'multipart/alternative' && count($structure->parts) > 1) {\n            // get html/plaintext parts, other add to attachments list\n            foreach ($structure->parts as $p => $sub_part) {\n                $sub_mimetype = $sub_part->mimetype;\n                $is_multipart = preg_match('/^multipart\\/(related|relative|mixed|alternative)/', $sub_mimetype);\n\n                // skip empty text parts\n                if (!$sub_part->size && !$is_multipart) {\n                    continue;\n                }\n\n                // We've encountered (malformed) messages with more than\n                // one text/plain or text/html part here. There's no way to choose\n                // which one is better, so we'll display first of them and add\n                // others as attachments (#1489358)\n\n                // check if sub part is\n                if ($is_multipart) {\n                    $related_part = $p;\n                } elseif ($sub_mimetype == 'text/plain' && !isset($plain_part)) {\n                    $plain_part = $p;\n                } elseif ($sub_mimetype == 'text/html' && !isset($html_part)) {\n                    $html_part = $p;\n                    $this->got_html_part = true;\n                } elseif ($sub_mimetype == 'text/enriched' && !isset($enriched_part)) {\n                    $enriched_part = $p;\n                } elseif (($sub_mimetype === 'text/markdown' || $sub_mimetype === 'text/x-markdown') && !isset($markdown_part)) {\n                    $markdown_part = $p;\n                } else {\n                    // add unsupported/unrecognized parts to attachments list\n                    $this->add_attachment($sub_part);\n                }\n            }\n\n            // parse related part (alternative part could be in here)\n            if (isset($related_part) && !$this->parse_alternative) {\n                $this->parse_alternative = true;\n                $this->parse_structure($structure->parts[$related_part], true);\n                $this->parse_alternative = false;\n\n                // if plain part was found, we should unset it if html is preferred\n                if (!empty($this->opt['prefer_html']) && count($this->parts)) {\n                    $plain_part = null;\n                }\n            }\n\n            // choose html/plain part to print\n            $print_part = null;\n            if (isset($html_part) && !empty($this->opt['prefer_html'])) {\n                $print_part = $structure->parts[$html_part];\n            } elseif (isset($enriched_part)) {\n                $print_part = $structure->parts[$enriched_part];\n            } elseif (isset($markdown_part)) {\n                $print_part = $structure->parts[$markdown_part];\n            } elseif (isset($plain_part)) {\n                $print_part = $structure->parts[$plain_part];\n            }\n\n            // add the right message body\n            if (is_object($print_part)) {\n                $print_part->type = 'content';\n\n                // Allow plugins to handle also this part\n                $plugin = $this->app->plugins->exec_hook('message_part_structure', [\n                    'object' => $this,\n                    'structure' => $print_part,\n                    'mimetype' => $print_part->mimetype,\n                    'recursive' => true,\n                ]);\n\n                if (!$plugin['abort']) {\n                    $this->add_part($print_part);\n                }\n            }\n            // show plaintext warning\n            elseif (isset($html_part) && empty($this->parts)) {\n                $c = new rcube_message_part();\n                $c->type = 'content';\n                $c->ctype_primary = 'text';\n                $c->ctype_secondary = 'plain';\n                $c->mimetype = 'text/plain';\n                $c->realtype = 'text/html';\n\n                $this->add_part($c);\n            }\n        }\n        // this is an encrypted message -> create a plaintext body with the according message\n        elseif ($mimetype == 'multipart/encrypted') {\n            $p = new rcube_message_part();\n            $p->type = 'content';\n            $p->ctype_primary = 'text';\n            $p->ctype_secondary = 'plain';\n            $p->mimetype = 'text/plain';\n            $p->realtype = 'multipart/encrypted';\n            $p->mime_id = $structure->mime_id;\n\n            $this->add_part($p);\n\n            // add encrypted payload part as attachment\n            if (!empty($structure->parts)) {\n                for ($i = 0; $i < count($structure->parts); $i++) {\n                    $subpart = $structure->parts[$i];\n                    if ($subpart->mimetype == 'application/octet-stream' || !empty($subpart->filename)) {\n                        $this->add_attachment($subpart);\n                    }\n                }\n            }\n        }\n        // this is an S/MIME encrypted message -> create a plaintext body with the according message\n        elseif ($mimetype == 'application/pkcs7-mime') {\n            $p = new rcube_message_part();\n            $p->type = 'content';\n            $p->ctype_primary = 'text';\n            $p->ctype_secondary = 'plain';\n            $p->mimetype = 'text/plain';\n            $p->realtype = 'application/pkcs7-mime';\n            $p->mime_id = $structure->mime_id;\n\n            $this->add_part($p);\n\n            if (!empty($structure->filename)) {\n                $this->add_attachment($structure);\n            }\n        }\n        // message contains multiple parts\n        elseif (!empty($structure->parts)) {\n            // iterate over parts\n            foreach ($structure->parts as $mail_part) {\n                $primary_type = $mail_part->ctype_primary;\n                $secondary_type = $mail_part->ctype_secondary;\n                $part_mimetype = $mail_part->mimetype;\n\n                // multipart/alternative or message/rfc822\n                if ($primary_type == 'multipart' || $part_mimetype == 'message/rfc822') {\n                    // list message/rfc822 as attachment as well\n                    if ($part_mimetype == 'message/rfc822') {\n                        $this->add_attachment($mail_part);\n                    }\n\n                    $this->parse_structure($mail_part, true);\n                }\n                // part text/[plain|html] or delivery status\n                elseif ((in_array($part_mimetype, ['text/plain', 'text/html', 'text/markdown', 'text/x-markdown']) && $mail_part->disposition != 'attachment')\n                    || in_array($part_mimetype, ['message/delivery-status', 'text/rfc822-headers', 'message/disposition-notification'])\n                ) {\n                    // Allow plugins to handle also this part\n                    $plugin = $this->app->plugins->exec_hook('message_part_structure', [\n                        'object' => $this,\n                        'structure' => $mail_part,\n                        'mimetype' => $part_mimetype,\n                        'recursive' => true,\n                    ]);\n\n                    if ($plugin['abort']) {\n                        continue;\n                    }\n\n                    if ($part_mimetype == 'text/html' && $mail_part->size) {\n                        $this->got_html_part = true;\n                    }\n\n                    $mail_part = $plugin['structure'];\n                    [$primary_type, $secondary_type] = explode('/', $plugin['mimetype']);\n\n                    // add text part if it matches the prefs\n                    if (!$this->parse_alternative\n                        || ($secondary_type == 'html' && $this->opt['prefer_html'])\n                        || ($secondary_type == 'plain' && !$this->opt['prefer_html'])\n                    ) {\n                        $mail_part->type = 'content';\n                        $this->add_part($mail_part);\n                    }\n\n                    // list as attachment as well\n                    if (!empty($mail_part->filename)) {\n                        $this->add_attachment($mail_part);\n                    }\n                }\n                // ignore \"virtual\" protocol parts\n                elseif ($primary_type == 'protocol') {\n                    continue;\n                }\n                // part is Microsoft Outlook TNEF (winmail.dat)\n                // Note: It can be application/ms-tnef or application/vnd.ms-tnef\n                elseif ($primary_type == 'application' && str_contains($secondary_type, 'ms-tnef')\n                    && $this->tnef_decode\n                ) {\n                    $tnef_parts = (array) $this->tnef_decode($mail_part);\n\n                    foreach ($tnef_parts as $tpart) {\n                        $this->mime_parts[$tpart->mime_id] = $tpart;\n\n                        if (strpos($tpart->mime_id, '.html')) {\n                            if ($this->opt['prefer_html']) {\n                                $tpart->type = 'content';\n\n                                // Reset type on the plain text part that usually is added to winmail.dat messages\n                                // (on the same level in the structure as the attachment itself)\n                                $level = count(explode('.', $mail_part->mime_id));\n                                foreach ($this->parts as $p) {\n                                    if ($p->type == 'content' && $p->mimetype == 'text/plain'\n                                        && count(explode('.', $p->mime_id)) == $level\n                                    ) {\n                                        $p->type = null;\n                                    }\n                                }\n                            }\n                            $this->add_part($tpart);\n                        } else {\n                            $this->add_attachment($tpart);\n                        }\n                    }\n\n                    // add winmail.dat to the list if it's content is unknown\n                    if (empty($tnef_parts) && !empty($mail_part->filename)) {\n                        $this->mime_parts[$mail_part->mime_id] = $mail_part;\n                        $this->add_attachment($mail_part);\n                    }\n                }\n                // part is a file/attachment\n                elseif (\n                    preg_match('/^(inline|attach)/', $mail_part->disposition)\n                    || !empty($mail_part->headers['content-id'])\n                    || ($mail_part->filename\n                        && (empty($mail_part->disposition) || preg_match('/^[a-z0-9!#$&.+^_-]+$/i', $mail_part->disposition)))\n                ) {\n                    // skip apple resource forks\n                    if ($message_ctype_secondary == 'appledouble' && $secondary_type == 'applefile') {\n                        continue;\n                    }\n\n                    if (!empty($mail_part->headers['content-id'])) {\n                        $mail_part->content_id = preg_replace(['/^</', '/>$/'], '', $mail_part->headers['content-id']);\n                    }\n\n                    if (!empty($mail_part->headers['content-location'])) {\n                        $mail_part->content_location = '';\n                        if (!empty($mail_part->headers['content-base'])) {\n                            $mail_part->content_location = $mail_part->headers['content-base'];\n                        }\n                        $mail_part->content_location .= $mail_part->headers['content-location'];\n                    }\n\n                    // application/smil message's are known to use inline images that aren't really inline (#8870)\n                    // TODO: This code probably does not belong here. I.e. we should not default to\n                    // disposition=inline in rcube_imap::structure_part().\n                    if ($primary_type === 'image'\n                        && !empty($structure->ctype_parameters['type'])\n                        && $structure->ctype_parameters['type'] === 'application/smil'\n                    ) {\n                        $mail_part->disposition = 'attachment';\n                    }\n\n                    // part belongs to a related message\n                    // Note: mixed is not supposed to contain inline images, but we've found such examples (#5905)\n                    if (preg_match('/^multipart\\/(related|relative|mixed)/', $mimetype)) {\n                        $this->add_attachment($mail_part);\n                        continue;\n                    }\n\n                    // Any non-inline attachment\n                    if (!preg_match('/^inline/i', $mail_part->disposition) || empty($mail_part->headers['content-id'])) {\n                        // Content-Type name regexp according to RFC4288.4.2\n                        if (!preg_match('/^[a-z0-9!#$&.+^_-]+\\/[a-z0-9!#$&.+^_-]+$/i', $part_mimetype)) {\n                            // replace malformed content type with application/octet-stream (#1487767)\n                            $mail_part->ctype_primary = 'application';\n                            $mail_part->ctype_secondary = 'octet-stream';\n                            $mail_part->mimetype = 'application/octet-stream';\n                        }\n\n                        $this->add_attachment($mail_part);\n                    }\n                }\n                // calendar part not marked as attachment (#1490325)\n                elseif ($part_mimetype == 'text/calendar') {\n                    if (!$mail_part->filename) {\n                        $mail_part->filename = 'calendar.ics';\n                    }\n\n                    $this->add_attachment($mail_part);\n                }\n                // Last resort, non-text and non-multipart part of multipart/mixed message (#7117)\n                elseif ($mimetype == 'multipart/mixed'\n                    && $primary_type && $primary_type != 'text' && $primary_type != 'multipart'\n                ) {\n                    $this->add_attachment($mail_part);\n                }\n            }\n\n            // if this is a related part try to resolve references\n            // Note: mixed is not supposed to contain inline images, but we've found such examples (#5905)\n            if (preg_match('/^multipart\\/(related|relative|mixed)/', $mimetype)) {\n                $a_replaces = [];\n\n                foreach ($this->attachments as $attachment) {\n                    $part_url = $this->get_part_url($attachment->mime_id, $attachment->ctype_primary);\n                    // We did not yet check if the values of these\n                    // Content-Id/Content-Location headers are actually present in\n                    // the corresponding HTML part body, because it's too expensive\n                    // right now.\n                    // Storing the replacement references just in case.\n                    if (isset($attachment->content_id)) {\n                        $a_replaces['cid:' . $attachment->content_id] = $part_url;\n                    }\n                    if (!empty($attachment->content_location)) {\n                        $a_replaces[$attachment->content_location] = $part_url;\n                    }\n                }\n\n                // add replace array to each content part\n                // (will be applied later when part body is available)\n                foreach ($this->parts as $i => $part) {\n                    if ($part->type == 'content') {\n                        $this->parts[$i]->replaces = $a_replaces;\n                    }\n                }\n            }\n        }\n        // message is a single part non-text\n        elseif ($structure->filename || preg_match('/^application\\//i', $mimetype)) {\n            $this->add_attachment($structure);\n        }\n    }\n\n    private function find_parent_part($child_part, $start_part)\n    {\n        $parts = $start_part->mime_parts ?? $start_part->parts;\n        foreach ($parts as $mime_part) {\n            if ($mime_part->mime_id === $child_part->mime_id) {\n                return $start_part;\n            } elseif (!empty($mime_part->parts)) {\n                return $this->find_parent_part($child_part, $mime_part);\n            }\n        }\n    }\n\n    private function find_html_parts($initial_part)\n    {\n        // Find the parent part of the initial part.\n        $parent_part = $this->find_parent_part($initial_part, $this);\n        if (empty($parent_part)) {\n            // Shouldn't happen, but who knows...\n            // TODO: handle this error more explicitly?\n            return [];\n        }\n\n        $html_parts = [];\n        foreach ($parent_part->parts as $child_part) {\n            if ($child_part->mimetype === 'text/html') {\n                $html_parts[] = $child_part;\n            }\n        }\n\n        return $html_parts;\n    }\n\n    /**\n     * Fill a flat array with references to all parts, indexed by part numbers\n     *\n     * @param rcube_message_part $part Message body structure\n     */\n    private function get_mime_numbers(&$part)\n    {\n        if (strlen($part->mime_id)) {\n            $this->mime_parts[$part->mime_id] = &$part;\n        }\n\n        for ($i = 0; $i < count($part->parts); $i++) {\n            $this->get_mime_numbers($part->parts[$i]);\n        }\n    }\n\n    /**\n     * Add a part to the list of attachments (with context check)\n     *\n     * @param rcube_message_part $part Message part\n     */\n    private function add_attachment($part)\n    {\n        if ($this->check_context($part)) {\n            // It may happen that we add the same part to the array many times\n            // use part ID index to prevent from duplicates\n            $this->attachments[$part->mime_id] = $part;\n        }\n    }\n\n    /**\n     * Add a part to object parts array(s) (with context check)\n     *\n     * @param rcube_message_part $part Message part\n     */\n    private function add_part($part)\n    {\n        if ($this->check_context($part)) {\n            $this->parts[] = $part;\n        }\n    }\n\n    /**\n     * Check if specified part belongs to the current context\n     *\n     * @param rcube_message_part $part Message part\n     *\n     * @return bool True if the part belongs to the current context, False otherwise\n     */\n    private function check_context($part)\n    {\n        return $this->context === null || str_starts_with($part->mime_id, $this->context . '.');\n    }\n\n    /**\n     * Decode a Microsoft Outlook TNEF part (winmail.dat)\n     *\n     * @param rcube_message_part $part Message part to decode\n     *\n     * @return rcube_message_part[] List of message parts extracted from TNEF\n     */\n    public function tnef_decode(&$part)\n    {\n        // @TODO: attachment may be huge, handle body via file\n        $body = $this->get_part_body($part->mime_id);\n        $tnef = new rcube_tnef_decoder();\n        $tnef_arr = $tnef->decompress($body, true);\n        $parts = [];\n\n        unset($body);\n\n        // HTML body\n        if (!empty($tnef_arr['message'])) {\n            $tpart = new rcube_message_part();\n\n            $tpart->encoding = 'stream';\n            $tpart->ctype_primary = 'text';\n            $tpart->ctype_secondary = 'html';\n            $tpart->mimetype = 'text/html';\n            $tpart->mime_id = 'winmail.' . $part->mime_id . '.html';\n            $tpart->size = strlen($tnef_arr['message']);\n            $tpart->body = $tnef_arr['message'];\n            $tpart->charset = RCUBE_CHARSET;\n\n            $parts[] = $tpart;\n        }\n\n        // Attachments\n        foreach ($tnef_arr['attachments'] as $pid => $winatt) {\n            $tpart = new rcube_message_part();\n\n            $tpart->filename = $this->fix_attachment_name(trim($winatt['name']), $part);\n            $tpart->encoding = 'stream';\n            $tpart->ctype_primary = trim(strtolower($winatt['type']));\n            $tpart->ctype_secondary = trim(strtolower($winatt['subtype']));\n            $tpart->mimetype = $tpart->ctype_primary . '/' . $tpart->ctype_secondary;\n            $tpart->mime_id = 'winmail.' . $part->mime_id . '.' . $pid;\n            $tpart->size = $winatt['size'] ?? 0;\n            $tpart->body = $winatt['stream'];\n\n            if (!empty($winatt['content-id'])) {\n                $tpart->content_id = $winatt['content-id'];\n            }\n\n            $parts[] = $tpart;\n            unset($tnef_arr[$pid]);\n        }\n\n        return $parts;\n    }\n\n    /**\n     * Parse message body for UUencoded attachments bodies\n     *\n     * @param rcube_message_part $part Message part to decode\n     *\n     * @return rcube_message_part[] List of message parts extracted from the file\n     */\n    public function uu_decode(&$part)\n    {\n        // @TODO: messages may be huge, handle body via file\n        $part->body = $this->get_part_body($part->mime_id);\n        $parts = [];\n        $pid = 0;\n\n        // FIXME: line length is max.65?\n        $uu_regexp_begin = '/begin [0-7]{3,4} ([^\\r\\n]+)\\r?\\n/s';\n        $uu_regexp_end = '/`\\r?\\nend((\\r?\\n)|($))/s';\n\n        while (preg_match($uu_regexp_begin, $part->body, $matches, \\PREG_OFFSET_CAPTURE)) {\n            $startpos = $matches[0][1];\n\n            if (!preg_match($uu_regexp_end, $part->body, $m, \\PREG_OFFSET_CAPTURE, $startpos)) {\n                break;\n            }\n\n            $endpos = $m[0][1];\n            $begin_len = strlen($matches[0][0]);\n            $end_len = strlen($m[0][0]);\n\n            // extract attachment body\n            $filebody = substr($part->body, $startpos + $begin_len, $endpos - $startpos - $begin_len - 1);\n            $filebody = str_replace(\"\\r\\n\", \"\\n\", $filebody);\n\n            // remove attachment body from the message body\n            $part->body = substr_replace($part->body, '', $startpos, $endpos + $end_len - $startpos);\n            // mark body as modified so it will not be cached by rcube_imap_cache\n            $part->body_modified = true;\n\n            // add attachments to the structure\n            $uupart = new rcube_message_part();\n            $uupart->filename = trim($matches[1][0]);\n            $uupart->encoding = 'stream';\n            $uupart->body = convert_uudecode($filebody);\n            $uupart->size = strlen($uupart->body);\n            $uupart->mime_id = 'uu.' . $part->mime_id . '.' . $pid;\n\n            $ctype = rcube_mime::file_content_type($uupart->body, $uupart->filename, 'application/octet-stream', true);\n            $uupart->mimetype = $ctype;\n            [$uupart->ctype_primary, $uupart->ctype_secondary] = explode('/', $ctype);\n\n            $parts[] = $uupart;\n            $pid++;\n        }\n\n        return $parts;\n    }\n\n    /**\n     * Fix attachment name encoding if needed and possible\n     *\n     * @param string             $name Attachment name\n     * @param rcube_message_part $part Message part\n     *\n     * @return string Fixed attachment name\n     */\n    protected function fix_attachment_name($name, $part)\n    {\n        if ($name == rcube_charset::clean($name)) {\n            return $name;\n        }\n\n        $charsets = [];\n\n        // find charset from part or its parent(s)\n        if ($part->charset) {\n            $charsets[] = $part->charset;\n        } else {\n            // check first part (common case)\n            $n = strpos($part->mime_id, '.') ? preg_replace('/\\.[0-9]+$/', '', $part->mime_id) . '.1' : 1;\n            $_part = $this->mime_parts[$n] ?? null;\n            if ($_part && $_part->charset) {\n                $charsets[] = $_part->charset;\n            }\n\n            // check parents' charset\n            $items = explode('.', $part->mime_id);\n            for ($i = count($items) - 1; $i > 0; $i--) {\n                array_pop($items);\n                $parent = $this->mime_parts[implode('.', $items)] ?? null;\n\n                if ($parent && $parent->charset) {\n                    $charsets[] = $parent->charset;\n                }\n            }\n        }\n\n        if ($this->headers->charset) {\n            $charsets[] = $this->headers->charset;\n        }\n\n        if ($charset = rcube_charset::check($name, $charsets)) {\n            $name = rcube_charset::convert($name, $charset);\n            $part->charset = $charset;\n        }\n\n        return $name;\n    }\n\n    /**\n     * Deprecated methods (to be removed)\n     */\n    public static function unfold_flowed($text)\n    {\n        return rcube_mime::unfold_flowed($text);\n    }\n\n    public static function format_flowed($text, $length = 72)\n    {\n        return rcube_mime::format_flowed($text, $length);\n    }\n}\n", "patch": "@@ -105,10 +105,11 @@ function __construct($uid, $folder = null)\n         $this->opt = array(\n             'safe' => $this->is_safe,\n             'prefer_html' => $this->app->config->get('prefer_html'),\n-            'get_url' => $this->app->url(array(\n-                'action' => 'get',\n-                'mbox'   => $this->storage->get_folder(),\n-                'uid'    => $uid))\n+            'get_url'     => $this->app->url(array(\n+                    'action' => 'get',\n+                    'mbox'   => $this->storage->get_folder(),\n+                    'uid'    => $uid),\n+                false, false, true)\n         );\n \n         if (!empty($this->headers->structure)) {", "file_path": "files/2016_8\\25", "file_language": "php", "file_name": "program/lib/Roundcube/rcube_message.php", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/699af1e5206ed9114322adaa3c25c1c969640a53/program/lib/Roundcube/rcube_output.php", "code": "<?php\n\n/*\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube PHP suite                          |\n | Copyright (C) 2005-2014 The Roundcube Dev Team                        |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | CONTENTS:                                                             |\n |   Abstract class for output generation                                |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <alec@alec.pl>                            |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Class for output generation\n *\n * @package    Framework\n * @subpackage View\n */\nabstract class rcube_output\n{\n    public $browser;\n\n    protected $app;\n    protected $config;\n    protected $charset = RCUBE_CHARSET;\n    protected $env = array();\n    protected $skins = array();\n\n\n    /**\n     * Object constructor\n     */\n    public function __construct()\n    {\n        $this->app     = rcube::get_instance();\n        $this->config  = $this->app->config;\n        $this->browser = new rcube_browser();\n    }\n\n    /**\n     * Magic getter\n     */\n    public function __get($var)\n    {\n        // allow read-only access to some members\n        switch ($var) {\n            case 'env':     return $this->env;\n            case 'skins':   return $this->skins;\n            case 'charset': return $this->charset;\n        }\n\n        return null;\n    }\n\n    /**\n     * Setter for output charset.\n     * To be specified in a meta tag and sent as http-header\n     *\n     * @param string $charset Charset name\n     */\n    public function set_charset($charset)\n    {\n        $this->charset = $charset;\n    }\n\n    /**\n     * Getter for output charset\n     *\n     * @return string Output charset name\n     */\n    public function get_charset()\n    {\n        return $this->charset;\n    }\n\n    /**\n     * Set environment variable\n     *\n     * @param string $name   Property name\n     * @param mixed  $value  Property value\n     */\n    public function set_env($name, $value)\n    {\n        $this->env[$name] = $value;\n    }\n\n    /**\n     * Environment variable getter.\n     *\n     * @param string $name  Property name\n     *\n     * @return mixed Property value\n     */\n    public function get_env($name)\n    {\n        return $this->env[$name];\n    }\n\n    /**\n     * Delete all stored env variables and commands\n     */\n    public function reset()\n    {\n        $this->env = array();\n    }\n\n    /**\n     * Invoke display_message command\n     *\n     * @param string  $message  Message to display\n     * @param string  $type     Message type [notice|confirm|error]\n     * @param array   $vars     Key-value pairs to be replaced in localized text\n     * @param boolean $override Override last set message\n     * @param int     $timeout  Message displaying time in seconds\n     */\n    abstract function show_message($message, $type = 'notice', $vars = null, $override = true, $timeout = 0);\n\n    /**\n     * Redirect to a certain url.\n     *\n     * @param mixed $p     Either a string with the action or url parameters as key-value pairs\n     * @param int   $delay Delay in seconds\n     */\n    abstract function redirect($p = array(), $delay = 1);\n\n    /**\n     * Send output to the client.\n     */\n    abstract function send();\n\n    /**\n     * Send HTTP headers to prevent caching a page\n     */\n    public function nocacheing_headers()\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        header(\"Expires: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n        header(\"Last-Modified: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n\n        // We need to set the following headers to make downloads work using IE in HTTPS mode.\n        if ($this->browser->ie && rcube_utils::https_check()) {\n            header('Pragma: private');\n            header(\"Cache-Control: private, must-revalidate\");\n        }\n        else {\n            header(\"Cache-Control: private, no-cache, no-store, must-revalidate, post-check=0, pre-check=0\");\n            header(\"Pragma: no-cache\");\n        }\n    }\n\n    /**\n     * Send header with expire date 30 days in future\n     *\n     * @param int Expiration time in seconds\n     */\n    public function future_expire_header($offset = 2600000)\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        header(\"Expires: \" . gmdate(\"D, d M Y H:i:s\", time()+$offset) . \" GMT\");\n        header(\"Cache-Control: max-age=$offset\");\n        header(\"Pragma: \");\n    }\n\n    /**\n     * Send browser compatibility/security/etc. headers\n     */\n    public function common_headers()\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        // Unlock IE compatibility mode\n        if ($this->browser->ie) {\n            header('X-UA-Compatible: IE=edge');\n        }\n\n        // Request browser to disable DNS prefetching (CVE-2010-0464)\n        header(\"X-DNS-Prefetch-Control: off\");\n\n        // send CSRF and clickjacking protection headers\n        if ($xframe = $this->app->config->get('x_frame_options', 'sameorigin')) {\n            header('X-Frame-Options: ' . $xframe);\n        }\n    }\n\n    /**\n     * Show error page and terminate script execution\n     *\n     * @param int    $code     Error code\n     * @param string $message  Error message\n     */\n    public function raise_error($code, $message)\n    {\n        // STUB: to be overloaded by specific output classes\n        fputs(STDERR, \"Error $code: $message\\n\");\n        exit(-1);\n    }\n\n    /**\n     * Create an edit field for inclusion on a form\n     *\n     * @param string col field name\n     * @param string value field value\n     * @param array attrib HTML element attributes for field\n     * @param string type HTML element type (default 'text')\n     *\n     * @return string HTML field definition\n     */\n    public static function get_edit_field($col, $value, $attrib, $type = 'text')\n    {\n        static $colcounts = array();\n\n        $fname = '_'.$col;\n        $attrib['name']  = $fname . ($attrib['array'] ? '[]' : '');\n        $attrib['class'] = trim($attrib['class'] . ' ff_' . $col);\n\n        if ($type == 'checkbox') {\n            $attrib['value'] = '1';\n            $input = new html_checkbox($attrib);\n        }\n        else if ($type == 'textarea') {\n            $attrib['cols'] = $attrib['size'];\n            $input = new html_textarea($attrib);\n        }\n        else if ($type == 'select') {\n            $input = new html_select($attrib);\n            $input->add('---', '');\n            $input->add(array_values($attrib['options']), array_keys($attrib['options']));\n        }\n        else if ($attrib['type'] == 'password') {\n            $input = new html_passwordfield($attrib);\n        }\n        else {\n            if ($attrib['type'] != 'text' && $attrib['type'] != 'hidden') {\n                $attrib['type'] = 'text';\n            }\n            $input = new html_inputfield($attrib);\n        }\n\n        // use value from post\n        if (isset($_POST[$fname])) {\n            $postvalue = rcube_utils::get_input_value($fname, rcube_utils::INPUT_POST, true);\n            $value = $attrib['array'] ? $postvalue[intval($colcounts[$col]++)] : $postvalue;\n        }\n\n        $out = $input->show($value);\n\n        return $out;\n    }\n\n    /**\n     * Convert a variable into a javascript object notation\n     *\n     * @param mixed Input value\n     *\n     * @return string Serialized JSON string\n     */\n    public static function json_serialize($input)\n    {\n        $input = rcube_charset::clean($input);\n\n        // sometimes even using rcube_charset::clean() the input contains invalid UTF-8 sequences\n        // that's why we have @ here\n        return @json_encode($input);\n    }\n}\n", "code_before": "<?php\n\n/*\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | CONTENTS:                                                             |\n |   Abstract class for output generation                                |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <alec@alec.pl>                            |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Class for output generation\n */\nabstract class rcube_output\n{\n    public $browser;\n    public $skins = [];\n    public $charset = RCUBE_CHARSET;\n\n    protected $app;\n    protected $config;\n    protected $env = [];\n\n    /**\n     * Object constructor\n     */\n    public function __construct()\n    {\n        $this->app = rcube::get_instance();\n        $this->config = $this->app->config;\n        $this->browser = new rcube_browser();\n    }\n\n    /**\n     * Magic getter\n     */\n    public function __get($var)\n    {\n        // allow read-only access to some members\n        switch ($var) {\n            case 'env':     return $this->env;\n            case 'skins':   return $this->skins;\n            case 'charset': return $this->charset;\n        }\n    }\n\n    /**\n     * Setter for output charset.\n     * To be specified in a meta tag and sent as http-header\n     *\n     * @param string $charset Charset name\n     */\n    public function set_charset($charset)\n    {\n        $this->charset = $charset;\n    }\n\n    /**\n     * Getter for output charset\n     *\n     * @return string Output charset name\n     */\n    public function get_charset()\n    {\n        return $this->charset;\n    }\n\n    /**\n     * Set environment variable\n     *\n     * @param string $name  Property name\n     * @param mixed  $value Property value\n     */\n    public function set_env($name, $value)\n    {\n        $this->env[$name] = $value;\n    }\n\n    /**\n     * Environment variable getter.\n     *\n     * @param string $name Property name\n     *\n     * @return mixed Property value\n     */\n    public function get_env($name)\n    {\n        return $this->env[$name] ?? null;\n    }\n\n    /**\n     * Delete all stored env variables and commands\n     */\n    public function reset()\n    {\n        $this->env = [];\n    }\n\n    /**\n     * Invoke display_message command\n     *\n     * @param string $message  Message to display\n     * @param string $type     Message type [notice|confirm|error]\n     * @param array  $vars     Key-value pairs to be replaced in localized text\n     * @param bool   $override Override last set message\n     * @param int    $timeout  Message displaying time in seconds\n     */\n    abstract public function show_message($message, $type = 'notice', $vars = null, $override = true, $timeout = 0);\n\n    /**\n     * Redirect to a certain url.\n     *\n     * @param array|string $p     Either a string with the action or url parameters as key-value pairs\n     * @param int          $delay Delay in seconds\n     */\n    abstract public function redirect($p = [], $delay = 1);\n\n    /**\n     * Send output to the client.\n     */\n    abstract public function send();\n\n    /**\n     * Send HTTP headers to prevent caching a page\n     */\n    public function nocacheing_headers()\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        $this->header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n        $this->header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n\n        // We need to set the following headers to make downloads work using IE in HTTPS mode.\n        if ($this->browser->ie && rcube_utils::https_check()) {\n            $this->header('Pragma: private');\n            $this->header('Cache-Control: private, must-revalidate');\n        } else {\n            $this->header('Cache-Control: private, no-cache, no-store, must-revalidate, post-check=0, pre-check=0');\n            $this->header('Pragma: no-cache');\n        }\n    }\n\n    /**\n     * Send header with expire date 30 days in future\n     *\n     * @param int $offset Expiration time in seconds\n     */\n    public function future_expire_header($offset = 2600000)\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        $this->header('Expires: ' . gmdate('D, d M Y H:i:s', time() + $offset) . ' GMT');\n        $this->header(\"Cache-Control: max-age={$offset}\");\n        $this->header('Pragma: ');\n    }\n\n    /**\n     * Send browser compatibility/security/privacy headers\n     *\n     * @param bool $privacy Enable privacy headers\n     */\n    public function common_headers($privacy = true)\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        $headers = [];\n\n        // Unlock IE compatibility mode\n        if ($this->browser->ie) {\n            $headers['X-UA-Compatible'] = 'IE=edge';\n        }\n\n        if ($privacy) {\n            // Request browser to disable DNS prefetching (CVE-2010-0464)\n            $headers['X-DNS-Prefetch-Control'] = 'off';\n\n            // Request browser disable Referer (sic) header\n            $headers['Referrer-Policy'] = 'same-origin';\n        }\n\n        // send CSRF and clickjacking protection headers\n        if ($xframe = $this->app->config->get('x_frame_options', 'sameorigin')) {\n            $headers['X-Frame-Options'] = $xframe;\n        }\n\n        $plugin = $this->app->plugins->exec_hook('common_headers', ['headers' => $headers, 'privacy' => $privacy]);\n\n        foreach ($plugin['headers'] as $header => $value) {\n            $this->header(\"{$header}: {$value}\");\n        }\n    }\n\n    /**\n     * Send headers related to file downloads.\n     *\n     * @param string $filename File name\n     * @param array  $params   Optional parameters:\n     *                         type         - File content type (default: 'application/octet-stream')\n     *                         disposition  - Download type: 'inline' or 'attachment' (default)\n     *                         length       - Content length\n     *                         charset      - File name character set\n     *                         type_charset - Content character set\n     *                         time_limit   - Script execution limit (default: 3600)\n     */\n    public function download_headers($filename, $params = [])\n    {\n        // For security reasons we validate type, filename and charset params.\n        // Some HTTP servers might drop a header that is malformed or very long, this then\n        // can lead to web browsers unintentionally executing javascript code in the body.\n\n        if (empty($params['disposition'])) {\n            $params['disposition'] = 'attachment';\n        }\n\n        $ctype = 'application/octet-stream';\n        $disposition = $params['disposition'];\n\n        if (!empty($params['type']) && is_string($params['type']) && strlen($params['type']) < 256\n            && preg_match('/^[a-z0-9!#$&.+^_-]+\\/[a-z0-9!#$&.+^_-]+$/i', $params['type'])\n        ) {\n            $ctype = strtolower($params['type']);\n        }\n\n        // Send unsafe content as plain text\n        if ($disposition == 'inline') {\n            if ($ctype != 'image/svg+xml' && preg_match('~(javascript|jscript|ecmascript|xml|html|text/)~', $ctype)) {\n                $ctype = 'text/plain';\n            }\n\n            if (str_starts_with($ctype, 'text')) {\n                $charset = $this->charset;\n                if (!empty($params['type_charset']) && rcube_charset::is_valid($params['type_charset'])) {\n                    $charset = $params['type_charset'];\n                }\n\n                $ctype .= \"; charset={$charset}\";\n            }\n        }\n\n        // @phpstan-ignore-next-line\n        if (is_string($filename) && $filename !== '' && strlen($filename) <= 1024) {\n            // For non-ascii characters we'll use RFC2231 syntax\n            $fallback_filename = preg_replace('/[^a-zA-Z0-9_.(),;@+ -]/', '_', $filename);\n            $disposition .= \"; filename=\\\"{$fallback_filename}\\\"\";\n\n            if ($fallback_filename != $filename) {\n                $filename = rawurlencode($filename);\n                $charset = $this->charset;\n                if (!empty($params['charset']) && rcube_charset::is_valid($params['charset'])) {\n                    $charset = $params['charset'];\n                }\n                $disposition .= \"; filename*={$charset}''{$filename}\";\n            }\n        }\n\n        $this->header(\"Content-Disposition: {$disposition}\");\n        $this->header(\"Content-Type: {$ctype}\");\n\n        if ($params['disposition'] == 'attachment' && $this->browser->ie) {\n            $this->header('Content-Type: application/force-download');\n        }\n\n        if (isset($params['length'])) {\n            $this->header('Content-Length: ' . $params['length']);\n        }\n\n        // Use strict security policy to make sure no javascript content is executed\n        // img-src is needed to be able to print attachment preview page\n        $this->header(\"Content-Security-Policy: default-src 'none'; img-src 'self'\");\n\n        // don't kill the connection if download takes more than 30 sec.\n        if (!array_key_exists('time_limit', $params)) {\n            $params['time_limit'] = 3600;\n        }\n\n        if (is_numeric($params['time_limit'])) {\n            @set_time_limit($params['time_limit']);\n        }\n    }\n\n    /**\n     * Show error page and terminate script execution\n     *\n     * @param int    $code    Error code\n     * @param string $message Error message\n     */\n    public function raise_error($code, $message)\n    {\n        // STUB: to be overloaded by specific output classes\n        fwrite(\\STDERR, \"Error {$code}: {$message}\\n\");\n        exit(-1);\n    }\n\n    /**\n     * Create an edit field for inclusion on a form\n     *\n     * @param string $name   Field name\n     * @param string $value  Field value\n     * @param array  $attrib HTML element attributes for the field\n     * @param string $type   HTML element type (default 'text')\n     *\n     * @return string HTML field definition\n     */\n    public static function get_edit_field($name, $value, $attrib = [], $type = 'text')\n    {\n        static $colcounts = [];\n\n        $fname = '_' . $name;\n        $attrib['name'] = $fname . (!empty($attrib['array']) ? '[]' : '');\n        $attrib['class'] = trim((!empty($attrib['class']) ? $attrib['class'] : '') . ' ff_' . $name);\n\n        if ($type == 'checkbox') {\n            $attrib['value'] = '1';\n            $input = new html_checkbox($attrib);\n        } elseif ($type == 'textarea') {\n            if (!empty($attrib['size'])) {\n                $attrib['cols'] = $attrib['size'];\n            }\n            $input = new html_textarea($attrib);\n        } elseif ($type == 'select') {\n            $input = new html_select($attrib);\n            if (empty($attrib['skip-empty'])) {\n                $input->add('---', '');\n            }\n            if (!empty($attrib['options'])) {\n                $input->add(array_values($attrib['options']), array_keys($attrib['options']));\n            }\n        } elseif ($type == 'password' || (isset($attrib['type']) && $attrib['type'] == 'password')) {\n            $input = new html_passwordfield($attrib);\n        } else {\n            if (!isset($attrib['type']) || ($attrib['type'] != 'text' && $attrib['type'] != 'hidden')) {\n                $attrib['type'] = 'text';\n            }\n            $input = new html_inputfield($attrib);\n        }\n\n        // use value from post\n        if (isset($_POST[$fname])) {\n            $postvalue = rcube_utils::get_input_value($fname, rcube_utils::INPUT_POST, true);\n            if (!empty($attrib['array'])) {\n                if (!isset($colcounts[$name])) {\n                    $colcounts[$name] = 0;\n                }\n                $idx = intval($colcounts[$name]++);\n                $value = $postvalue[$idx] ?? null;\n            } else {\n                $value = $postvalue;\n            }\n        }\n\n        return $input->show($value);\n    }\n\n    /**\n     * Convert a variable into a javascript object notation\n     *\n     * @param mixed $input  Input value\n     * @param bool  $pretty Enable JSON formatting\n     * @param bool  $inline Enable inline mode (generates output safe for use inside HTML)\n     *\n     * @return string Serialized JSON string\n     */\n    public static function json_serialize($input, $pretty = false, $inline = true)\n    {\n        $options = \\JSON_UNESCAPED_SLASHES | \\JSON_UNESCAPED_UNICODE | \\JSON_INVALID_UTF8_IGNORE;\n\n        // JSON_HEX_TAG is needed for inlining JSON inside of the <script> tag\n        // if input contains a html tag it will cause issues (#6207)\n        if ($inline) {\n            $options |= \\JSON_HEX_TAG;\n        }\n\n        if ($pretty) {\n            $options |= \\JSON_PRETTY_PRINT;\n        }\n\n        return json_encode($input, $options);\n    }\n\n    /**\n     * A wrapper for header() function, so it can be replaced for automated tests\n     *\n     * @param string $header  The header string\n     * @param bool   $replace Replace previously set header?\n     */\n    public function header($header, $replace = true)\n    {\n        header($header, $replace);\n    }\n\n    /**\n     * A helper to send output to the browser and exit\n     *\n     * @param string $body    The output body\n     * @param array  $headers Headers\n     *\n     * @return never\n     */\n    public function sendExit($body = '', $headers = [])\n    {\n        foreach ($headers as $header) {\n            $this->header($header);\n        }\n\n        echo $body;\n        exit;\n    }\n\n    /**\n     * A helper to send HTTP error code and message to the browser, and exit.\n     *\n     * @param int    $code    The HTTP error code\n     * @param string $message The HTTP error message\n     *\n     * @return never\n     */\n    public function sendExitError($code, $message = '')\n    {\n        http_response_code($code);\n        exit($message);\n    }\n}\n", "patch": "@@ -190,6 +190,11 @@ public function common_headers()\n \n         // Request browser to disable DNS prefetching (CVE-2010-0464)\n         header(\"X-DNS-Prefetch-Control: off\");\n+\n+        // send CSRF and clickjacking protection headers\n+        if ($xframe = $this->app->config->get('x_frame_options', 'sameorigin')) {\n+            header('X-Frame-Options: ' . $xframe);\n+        }\n     }\n \n     /**", "file_path": "files/2016_8\\26", "file_language": "php", "file_name": "program/lib/Roundcube/rcube_output.php", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/699af1e5206ed9114322adaa3c25c1c969640a53/program/steps/addressbook/export.inc", "code": "<?php\n\n/*\n +-----------------------------------------------------------------------+\n | program/steps/addressbook/export.inc                                  |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2008-2013, The Roundcube Dev Team                       |\n | Copyright (C) 2011-2013, Kolab Systems AG                             |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Export the selected address book as vCard file                      |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <machniak@kolabsys.com>                   |\n +-----------------------------------------------------------------------+\n*/\n\n$RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n\n// Use search result\nif (!empty($_REQUEST['_search']) && isset($_SESSION['search'][$_REQUEST['_search']])) {\n    $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $search  = (array)$_SESSION['search'][$_REQUEST['_search']];\n    $records = array();\n\n    // Get records from all sources\n    foreach ($search as $s => $set) {\n        $source = $RCMAIL->get_address_book($s);\n\n        // reset page\n        $source->set_page(1);\n        $source->set_pagesize(99999);\n        $source->set_search_set($set);\n\n        // get records\n        $result = $source->list_records();\n\n        while ($record = $result->next()) {\n            // because vcard_map is per-source we need to create vcard here\n            prepare_for_export($record, $source);\n\n            $record['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($record, $sort_col);\n            $records[$key] = $record;\n        }\n\n        unset($result);\n    }\n\n    // sort the records\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n    $result->records = array_values($records);\n}\n// selected contacts\nelse if (!empty($_REQUEST['_cid'])) {\n    $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $records  = array();\n\n    // Selected contact IDs (with multi-source support)\n    $cids = rcmail_get_cids();\n\n    foreach ($cids as $s => $ids) {\n        $source = $RCMAIL->get_address_book($s);\n        $result = $source->search('ID', $ids, 1, true, true);\n\n        while ($record = $result->next()) {\n            // because vcard_map is per-source we need to create vcard here\n            prepare_for_export($record, $source);\n\n            $record['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($record, $sort_col);\n            $records[$key] = $record;\n        }\n    }\n\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n    $result->records = array_values($records);\n}\n// selected directory/group\nelse {\n    $CONTACTS = rcmail_contact_source(null, true);\n\n    // get contacts for this user\n    $CONTACTS->set_page(1);\n    $CONTACTS->set_pagesize(99999);\n    $result = $CONTACTS->list_records(null, 0, true);\n}\n\n// Give plugins a possibility to implement other output formats or modify the result\n$plugin = $RCMAIL->plugins->exec_hook('addressbook_export', array('result' => $result));\n$result = $plugin['result'];\n\nif ($plugin['abort']) {\n    exit;\n}\n\n// send downlaod headers\nheader('Content-Type: text/x-vcard; charset='.RCUBE_CHARSET);\nheader('Content-Disposition: attachment; filename=\"contacts.vcf\"');\n\nwhile ($result && ($row = $result->next())) {\n    if ($CONTACTS) {\n        prepare_for_export($row, $CONTACTS);\n    }\n\n    // fix folding and end-of-line chars\n    $row['vcard'] = preg_replace('/\\r|\\n\\s+/', '', $row['vcard']);\n    $row['vcard'] = preg_replace('/\\n/', rcube_vcard::$eol, $row['vcard']);\n    echo rcube_vcard::rfc2425_fold($row['vcard']) . rcube_vcard::$eol;\n}\n\nexit;\n\n\n/**\n * Copy contact record properties into a vcard object\n */\nfunction prepare_for_export(&$record, $source = null)\n{\n    $groups   = $source && $source->groups && $source->export_groups ? $source->get_record_groups($record['ID']) : null;\n    $fieldmap = $source ? $source->vcard_map : null;\n\n    if (empty($record['vcard'])) {\n        $vcard = new rcube_vcard($record['vcard'], RCUBE_CHARSET, false, $fieldmap);\n        $vcard->reset();\n\n        foreach ($record as $key => $values) {\n            list($field, $section) = explode(':', $key);\n            // avoid unwanted casting of DateTime objects to an array\n            // (same as in rcube_contacts::convert_save_data())\n            if (is_object($values) && is_a($values, 'DateTime')) {\n                $values = array($values);\n            }\n\n            foreach ((array) $values as $value) {\n                if (is_array($value) || is_a($value, 'DateTime') || @strlen($value)) {\n                    $vcard->set($field, $value, strtoupper($section));\n                }\n            }\n        }\n\n        // append group names\n        if ($groups) {\n            $vcard->set('groups', join(',', $groups), null);\n        }\n\n        $record['vcard'] = $vcard->export();\n    }\n    // patch categories to alread existing vcard block\n    else if ($record['vcard']) {\n        $vcard = new rcube_vcard($record['vcard'], RCUBE_CHARSET, false, $fieldmap);\n\n        // unset CATEGORIES entry, it might be not up-to-date (#1490277)\n        $vcard->set('groups', null);\n        $record['vcard'] = $vcard->export();\n\n        if (!empty($groups)) {\n            $vgroups = 'CATEGORIES:' . rcube_vcard::vcard_quote($groups, ',');\n            $record['vcard'] = str_replace('END:VCARD', $vgroups . rcube_vcard::$eol . 'END:VCARD', $record['vcard']);\n        }\n    }\n}\n", "code_before": "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n | Copyright (C) Kolab Systems AG                                        |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Export the selected address book as vCard file                      |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <machniak@kolabsys.com>                   |\n +-----------------------------------------------------------------------+\n*/\n\n$RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n\n// Use search result\nif (!empty($_REQUEST['_search']) && isset($_SESSION['search'][$_REQUEST['_search']])) {\n    $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $search  = (array)$_SESSION['search'][$_REQUEST['_search']];\n    $records = array();\n\n    // Get records from all sources\n    foreach ($search as $s => $set) {\n        $source = $RCMAIL->get_address_book($s);\n\n        // reset page\n        $source->set_page(1);\n        $source->set_pagesize(99999);\n        $source->set_search_set($set);\n\n        // get records\n        $result = $source->list_records();\n\n        while ($record = $result->next()) {\n            // because vcard_map is per-source we need to create vcard here\n            prepare_for_export($record, $source);\n\n            $record['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($record, $sort_col);\n            $records[$key] = $record;\n        }\n\n        unset($result);\n    }\n\n    // sort the records\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n    $result->records = array_values($records);\n}\n// selected contacts\nelse if (!empty($_REQUEST['_cid'])) {\n    $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $records  = array();\n\n    // Selected contact IDs (with multi-source support)\n    $cids = rcmail_get_cids();\n\n    foreach ($cids as $s => $ids) {\n        $source = $RCMAIL->get_address_book($s);\n\n        // reset page and page size (#6103)\n        $source->set_page(1);\n        $source->set_pagesize(count($ids));\n\n        $result = $source->search('ID', $ids, 1, true, true);\n\n        while ($record = $result->next()) {\n            // because vcard_map is per-source we need to create vcard here\n            prepare_for_export($record, $source);\n\n            $record['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($record, $sort_col);\n            $records[$key] = $record;\n        }\n    }\n\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n    $result->records = array_values($records);\n}\n// selected directory/group\nelse {\n    $CONTACTS = rcmail_contact_source(null, true);\n\n    // get contacts for this user\n    $CONTACTS->set_page(1);\n    $CONTACTS->set_pagesize(99999);\n    $result = $CONTACTS->list_records(null, 0, true);\n}\n\n// Give plugins a possibility to implement other output formats or modify the result\n$plugin = $RCMAIL->plugins->exec_hook('addressbook_export', array('result' => $result));\n$result = $plugin['result'];\n\nif ($plugin['abort']) {\n    exit;\n}\n\n// send downlaod headers\nheader('Content-Type: text/vcard; charset=' . RCUBE_CHARSET);\nheader('Content-Disposition: attachment; filename=\"contacts.vcf\"');\n\nwhile ($result && ($row = $result->next())) {\n    if ($CONTACTS) {\n        prepare_for_export($row, $CONTACTS);\n    }\n\n    // fix folding and end-of-line chars\n    $row['vcard'] = preg_replace('/\\r|\\n\\s+/', '', $row['vcard']);\n    $row['vcard'] = preg_replace('/\\n/', rcube_vcard::$eol, $row['vcard']);\n    echo rcube_vcard::rfc2425_fold($row['vcard']) . rcube_vcard::$eol;\n}\n\nexit;\n\n\n/**\n * Copy contact record properties into a vcard object\n */\nfunction prepare_for_export(&$record, $source = null)\n{\n    $groups   = $source && $source->groups && $source->export_groups ? $source->get_record_groups($record['ID']) : null;\n    $fieldmap = $source ? $source->vcard_map : null;\n\n    if (empty($record['vcard'])) {\n        $vcard = new rcube_vcard($record['vcard'], RCUBE_CHARSET, false, $fieldmap);\n        $vcard->reset();\n\n        foreach ($record as $key => $values) {\n            list($field, $section) = explode(':', $key);\n            // avoid unwanted casting of DateTime objects to an array\n            // (same as in rcube_contacts::convert_save_data())\n            if (is_object($values) && is_a($values, 'DateTime')) {\n                $values = array($values);\n            }\n\n            foreach ((array) $values as $value) {\n                if (is_array($value) || is_a($value, 'DateTime') || @strlen($value)) {\n                    $vcard->set($field, $value, strtoupper($section));\n                }\n            }\n        }\n\n        // append group names\n        if ($groups) {\n            $vcard->set('groups', join(',', $groups), null);\n        }\n\n        $record['vcard'] = $vcard->export();\n    }\n    // patch categories to alread existing vcard block\n    else if ($record['vcard']) {\n        $vcard = new rcube_vcard($record['vcard'], RCUBE_CHARSET, false, $fieldmap);\n\n        // unset CATEGORIES entry, it might be not up-to-date (#1490277)\n        $vcard->set('groups', null);\n        $record['vcard'] = $vcard->export();\n\n        if (!empty($groups)) {\n            $vgroups = 'CATEGORIES:' . rcube_vcard::vcard_quote($groups, ',');\n            $record['vcard'] = str_replace('END:VCARD', $vgroups . rcube_vcard::$eol . 'END:VCARD', $record['vcard']);\n        }\n    }\n}\n", "patch": "@@ -21,6 +21,8 @@\n  +-----------------------------------------------------------------------+\n */\n \n+$RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n+\n // Use search result\n if (!empty($_REQUEST['_search']) && isset($_SESSION['search'][$_REQUEST['_search']])) {\n     $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');", "file_path": "files/2016_8\\27", "file_language": "inc", "file_name": "program/steps/addressbook/export.inc", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/699af1e5206ed9114322adaa3c25c1c969640a53/program/steps/mail/get.inc", "code": "<?php\n\n/*\n +-----------------------------------------------------------------------+\n | program/steps/mail/get.inc                                            |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2005-2013, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Delivering a specific part of a mail message                        |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n\n// show loading page\nif (!empty($_GET['_preload'])) {\n    $_get = $_GET + array('_mimewarning' => 1, '_embed' => 1);\n    unset($_get['_preload']);\n    $url = $RCMAIL->url($_get);\n    $message = $RCMAIL->gettext('loadingdata');\n\n    header('Content-Type: text/html; charset=' . RCUBE_CHARSET);\n    print \"<html>\\n<head>\\n\"\n        . '<meta http-equiv=\"refresh\" content=\"0; url='.rcube::Q($url).'\">' . \"\\n\"\n        . '<meta http-equiv=\"content-type\" content=\"text/html; charset='.RCUBE_CHARSET.'\">' . \"\\n\"\n        . \"</head>\\n<body>\\n$message\\n</body>\\n</html>\";\n    exit;\n}\n\nob_end_clean();\n\n\n// similar code as in program/steps/mail/show.inc\nif (!empty($_GET['_uid'])) {\n    $uid = rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET);\n    $RCMAIL->config->set('prefer_html', true);\n    $MESSAGE = new rcube_message($uid);\n}\n\n// check connection status\ncheck_storage_status();\n\n$part_id = rcube_utils::get_input_value('_part', rcube_utils::INPUT_GPC);\n\n// show part page\nif (!empty($_GET['_frame'])) {\n    if ($part_id && ($part = $MESSAGE->mime_parts[$part_id])) {\n        $filename = rcmail_attachment_name($part);\n        $OUTPUT->set_pagetitle($filename);\n    }\n\n    // register UI objects\n    $OUTPUT->add_handlers(array(\n        'messagepartframe'    => 'rcmail_message_part_frame',\n        'messagepartcontrols' => 'rcmail_message_part_controls',\n    ));\n\n    $OUTPUT->set_env('mailbox', $RCMAIL->storage->get_folder());\n    $OUTPUT->set_env('uid', $uid);\n    $OUTPUT->set_env('part', $part_id);\n    $OUTPUT->set_env('filename', $filename);\n\n    $OUTPUT->send('messagepart');\n    exit;\n}\n\n// render thumbnail of an image attachment\nelse if ($_GET['_thumb']) {\n    $pid = rcube_utils::get_input_value('_part', rcube_utils::INPUT_GET);\n    if ($part = $MESSAGE->mime_parts[$pid]) {\n        $thumbnail_size = $RCMAIL->config->get('image_thumbnail_size', 240);\n        $temp_dir       = $RCMAIL->config->get('temp_dir');\n        $mimetype       = $part->mimetype;\n        $file_ident     = $MESSAGE->headers->messageID . ':' . $part->mime_id . ':' . $part->size . ':' . $part->mimetype;\n        $cache_basename = $temp_dir . '/' . md5($file_ident . ':' . $RCMAIL->user->ID . ':' . $thumbnail_size);\n        $cache_file     = $cache_basename . '.thumb';\n\n        // render thumbnail image if not done yet\n        if (!is_file($cache_file)) {\n            if ($fp = fopen(($orig_name = $cache_basename . '.tmp'), 'w')) {\n                $MESSAGE->get_part_body($part->mime_id, false, 0, $fp);\n                fclose($fp);\n\n                $image = new rcube_image($orig_name);\n                if ($imgtype = $image->resize($thumbnail_size, $cache_file, true)) {\n                    $mimetype = 'image/' . $imgtype;\n                    unlink($orig_name);\n                }\n                else if (stripos($mimetype, 'image/svg') === 0) {\n                    $content = rcmail_svg_filter(file_get_contents($orig_name));\n                    file_put_contents($cache_file, $content);\n                    unlink($orig_name);\n                }\n                else {\n                    rename($orig_name, $cache_file);\n                }\n            }\n        }\n\n        if (is_file($cache_file)) {\n            header('Content-Type: ' . $mimetype);\n            readfile($cache_file);\n        }\n    }\n\n    exit;\n}\n\nelse if (strlen($part_id)) {\n    if ($part = $MESSAGE->mime_parts[$part_id]) {\n        $mimetype = rcmail_fix_mimetype($part->mimetype);\n\n        // allow post-processing of the message body\n        $plugin = $RCMAIL->plugins->exec_hook('message_part_get', array(\n            'uid'      => $MESSAGE->uid,\n            'id'       => $part->mime_id,\n            'mimetype' => $mimetype,\n            'part'     => $part,\n            'download' => !empty($_GET['_download'])\n        ));\n\n        if ($plugin['abort']) {\n            exit;\n        }\n\n        // require CSRF protected url for downloads\n        if ($plugin['download'])\n            $RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n\n        // overwrite modified vars from plugin\n        $mimetype   = $plugin['mimetype'];\n        $extensions = rcube_mime::get_mime_extensions($mimetype);\n\n        if ($plugin['body']) {\n            $body = $plugin['body'];\n        }\n\n        // compare file mimetype with the stated content-type headers and file extension to avoid malicious operations\n        if (!empty($_REQUEST['_embed']) && empty($_REQUEST['_nocheck'])) {\n            $file_extension = strtolower(pathinfo($part->filename, PATHINFO_EXTENSION));\n\n            // 1. compare filename suffix with expected suffix derived from mimetype\n            $valid = $file_extension && in_array($file_extension, (array)$extensions) || empty($extensions) || !empty($_REQUEST['_mimeclass']);\n\n            // 2. detect the real mimetype of the attachment part and compare it with the stated mimetype and filename extension\n            if ($valid || !$file_extension || $mimetype == 'application/octet-stream' || stripos($mimetype, 'text/') === 0) {\n                $tmp_body = $body ?: $MESSAGE->get_part_body($part->mime_id, false, 2048);\n\n                // detect message part mimetype\n                $real_mimetype = rcube_mime::file_content_type($tmp_body, $part->filename, $mimetype, true, true);\n                list($real_ctype_primary, $real_ctype_secondary) = explode('/', $real_mimetype);\n\n                // accept text/plain with any extension\n                if ($real_mimetype == 'text/plain' && $real_mimetype == $mimetype) {\n                    $valid_extension = true;\n                }\n                // ignore differences in text/* mimetypes. Filetype detection isn't very reliable here\n                else if ($real_ctype_primary == 'text' && strpos($mimetype, $real_ctype_primary) === 0) {\n                    $real_mimetype   = $mimetype;\n                    $valid_extension = true;\n                }\n                // ignore filename extension if mimeclass matches (#1489029)\n                else if (!empty($_REQUEST['_mimeclass']) && $real_ctype_primary == $_REQUEST['_mimeclass']) {\n                    $valid_extension = true;\n                }\n                else {\n                    // get valid file extensions\n                    $extensions      = rcube_mime::get_mime_extensions($real_mimetype);\n                    $valid_extension = !$file_extension || empty($extensions) || in_array($file_extension, (array)$extensions);\n                }\n\n                // fix mimetype for images wrongly declared as octet-stream\n                if ($mimetype == 'application/octet-stream' && strpos($real_mimetype, 'image/') === 0 && $valid_extension) {\n                    $mimetype = $real_mimetype;\n                }\n\n                // \"fix\" real mimetype the same way the original is before comparison\n                $real_mimetype = rcmail_fix_mimetype($real_mimetype);\n\n                $valid = $real_mimetype == $mimetype && $valid_extension;\n            }\n            else {\n                $real_mimetype = $mimetype;\n            }\n\n            // show warning if validity checks failed\n            if (!$valid) {\n                // send blocked.gif for expected images\n                if (empty($_REQUEST['_mimewarning']) && strpos($mimetype, 'image/') === 0) {\n                    // Do not cache. Failure might be the result of a misconfiguration, thus real content should be returned once fixed. \n                    $content = $RCMAIL->get_resource_content('blocked.gif');\n                    $OUTPUT->nocacheing_headers();\n                    header(\"Content-Type: image/gif\");\n                    header(\"Content-Transfer-Encoding: binary\");\n                    header(\"Content-Length: \" . strlen($content));\n                    echo $content;\n                }\n                else {  // html warning with a button to load the file anyway\n                    $OUTPUT = new rcmail_html_page();\n                    $OUTPUT->write(html::tag('html', null, html::tag('body', 'embed',\n                        html::div(array('class' => 'rcmail-inline-message rcmail-inline-warning'),\n                            $RCMAIL->gettext(array(\n                                'name' => 'attachmentvalidationerror',\n                                'vars' => array(\n                                    'expected' => $mimetype . ($file_extension ? \" (.$file_extension)\" : ''),\n                                    'detected' => $real_mimetype . ($extensions[0] ? \" (.$extensions[0])\" : ''),\n                                )\n                            ))\n                            . html::p(array('class' => 'rcmail-inline-buttons'),\n                                html::tag('button', array(\n                                    'onclick' => \"location.href='\" . $RCMAIL->url(array_merge($_GET, array('_nocheck' => 1))) . \"'\"\n                                ),\n                                $RCMAIL->gettext('showanyway'))\n                            )\n                        ))));\n                }\n\n                exit;\n            }\n        }\n\n\n        // TIFF to JPEG conversion, if needed\n        $tiff_support = !empty($_SESSION['browser_caps']) && !empty($_SESSION['browser_caps']['tif']);\n        if (!empty($_REQUEST['_embed']) && !$tiff_support\n            && rcube_image::is_convertable('image/tiff')\n            && rcmail_part_image_type($part) == 'image/tiff'\n        ) {\n            $tiff2jpeg = true;\n            $mimetype  = 'image/jpeg';\n        }\n\n\n        $browser = $RCMAIL->output->browser;\n        list($ctype_primary, $ctype_secondary) = explode('/', $mimetype);\n\n        if (!$plugin['download'] && $ctype_primary == 'text') {\n            header(\"Content-Type: text/$ctype_secondary; charset=\" . ($part->charset ? $part->charset : RCUBE_CHARSET));\n        }\n        else {\n            header(\"Content-Type: $mimetype\");\n            header(\"Content-Transfer-Encoding: binary\");\n        }\n\n        // deliver part content\n        if ($ctype_primary == 'text' && $ctype_secondary == 'html' && empty($plugin['download'])) {\n            // Check if we have enough memory to handle the message in it\n            // #1487424: we need up to 10x more memory than the body\n            if (!rcube_utils::mem_check($part->size * 10)) {\n                $out = '<body>' . $RCMAIL->gettext('messagetoobig'). ' '\n                    . html::a('?_task=mail&_action=get&_download=1&_uid='.$MESSAGE->uid.'&_part='.$part->mime_id\n                        .'&_mbox='. urlencode($MESSAGE->folder), $RCMAIL->gettext('download')) . '</body></html>';\n            }\n            else {\n                // get part body if not available\n                if (!isset($body)) {\n                    $body = $MESSAGE->get_part_body($part->mime_id, true);\n                }\n\n                // show images?\n                rcmail_check_safe($MESSAGE);\n\n                // render HTML body\n                $out = rcmail_print_body($body, $part, array('safe' => $MESSAGE->is_safe, 'inline_html' => false));\n\n                // insert remote objects warning into HTML body\n                if ($REMOTE_OBJECTS) {\n                    $body_start = 0;\n                    if ($body_pos = strpos($out, '<body')) {\n                        $body_start = strpos($out, '>', $body_pos) + 1;\n                    }\n\n                    $out = substr($out, 0, $body_start)\n                        . html::div(array('class' => 'rcmail-inline-message rcmail-inline-warning'),\n                            rcube::Q($RCMAIL->gettext('blockedimages')) . '&nbsp;' .\n                            html::tag('button',\n                                array('onclick' => \"location.href='\" . $RCMAIL->url(array_merge($_GET, array('_safe' => 1))) . \"'\"),\n                                rcube::Q($RCMAIL->gettext('showimages')))\n                        )\n                        . substr($out, $body_start);\n                }\n            }\n\n            // check connection status\n            if ($part->size && empty($body)) {\n                check_storage_status();\n            }\n\n            $OUTPUT = new rcmail_html_page();\n            $OUTPUT->write($out);\n        }\n        else {\n            // don't kill the connection if download takes more than 30 sec.\n            @set_time_limit(0);\n\n            $filename = rcmail_attachment_name($part);\n\n            if ($browser->ie)\n                $filename = rawurlencode($filename);\n            else\n                $filename = addcslashes($filename, '\"');\n\n            $disposition = !empty($plugin['download']) ? 'attachment' : 'inline';\n\n            // Workaround for nasty IE bug (#1488844)\n            // If Content-Disposition header contains string \"attachment\" e.g. in filename\n            // IE handles data as attachment not inline\n            if ($disposition == 'inline' && $browser->ie && $browser->ver < 9) {\n                $filename = str_ireplace('attachment', 'attach', $filename);\n            }\n\n            // add filename extension if missing\n            if (!pathinfo($filename, PATHINFO_EXTENSION) && ($extensions = rcube_mime::get_mime_extensions($mimetype))) {\n                $filename .= '.' . $extensions[0];\n            }\n\n            header(\"Content-Disposition: $disposition; filename=\\\"$filename\\\"\");\n\n            // handle tiff to jpeg conversion\n            if (!empty($tiff2jpeg)) {\n                $temp_dir  = unslashify($RCMAIL->config->get('temp_dir'));\n                $file_path = tempnam($temp_dir, 'rcmAttmnt');\n\n                // write content to temp file\n                if ($body) {\n                    $saved = file_put_contents($file_path, $body);\n                }\n                else if ($part->size) {\n                    $fd    = fopen($file_path, 'w');\n                    $saved = $MESSAGE->get_part_body($part->mime_id, false, 0, $fd);\n                    fclose($fd);\n                }\n\n                // convert image to jpeg and send it to the browser\n                if ($sent = $saved) {\n                    $image = new rcube_image($file_path);\n                    if ($image->convert(rcube_image::TYPE_JPG, $file_path)) {\n                        header(\"Content-Length: \" . filesize($file_path));\n                        readfile($file_path);\n                    }\n                    unlink($file_path);\n                }\n            }\n            else {\n                $sent = rcmail_message_part_output($body, $part, $mimetype, $plugin['download']);\n            }\n\n            // check connection status\n            if ($part->size && !$sent) {\n                check_storage_status();\n            }\n        }\n\n        exit;\n    }\n}\n// print message\nelse {\n    // send correct headers for content type\n    header(\"Content-Type: text/html\");\n\n    $cont = \"<html>\\n<head><title></title>\\n</head>\\n<body>\";\n    $cont .= rcmail_message_body(array());\n    $cont .= \"\\n</body>\\n</html>\";\n\n    $OUTPUT = new rcmail_html_page();\n    $OUTPUT->write($cont);\n\n    exit;\n}\n\n\n// if we arrive here, the requested part was not found\nheader('HTTP/1.1 404 Not Found');\nexit;\n\n/**\n * Handles nicely storage connection errors\n */\nfunction check_storage_status()\n{\n    $error = rcmail::get_instance()->storage->get_error_code();\n\n    // Check if we have a connection error\n    if ($error == rcube_imap_generic::ERROR_BAD) {\n        ob_end_clean();\n\n        // Get action is often executed simultanously.\n        // Some servers have MAXPERIP or other limits.\n        // To workaround this we'll wait for some time\n        // and try again (once).\n        // Note: Random sleep interval is used to minimize concurency\n        // in getting message parts\n\n        if (!isset($_GET['_redirected'])) {\n            usleep(rand(10,30)*100000); // 1-3 sec.\n            header('Location: ' . $_SERVER['REQUEST_URI'] . '&_redirected=1');\n        }\n        else {\n            rcube::raise_error(array(\n                'code' => 500, 'type' => 'php',\n                'file' => __FILE__, 'line' => __LINE__,\n                'message' => 'Unable to get/display message part. IMAP connection error'),\n                true, true);\n        }\n\n        // Don't kill session, just quit (#1486995)\n        exit;\n    }\n}\n\n/**\n * Attachment properties table\n */\nfunction rcmail_message_part_controls($attrib)\n{\n    global $MESSAGE, $RCMAIL;\n\n    $part = asciiwords(rcube_utils::get_input_value('_part', rcube_utils::INPUT_GPC));\n    if (!is_object($MESSAGE) || !is_array($MESSAGE->parts)\n        || !($_GET['_uid'] && $_GET['_part']) || !$MESSAGE->mime_parts[$part]\n    ) {\n        return '';\n    }\n\n    $part  = $MESSAGE->mime_parts[$part];\n    $table = new html_table(array('cols' => 2));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('namex')).':');\n    $table->add('header', rcube::Q(rcmail_attachment_name($part)));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('type')).':');\n    $table->add('header', rcube::Q($part->mimetype));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('size')).':');\n    $table->add('header', rcube::Q($RCMAIL->message_part_size($part)));\n\n    return $table->show($attrib);\n}\n\n/**\n * Attachment preview frame\n */\nfunction rcmail_message_part_frame($attrib)\n{\n    global $MESSAGE, $RCMAIL;\n\n    $part = $MESSAGE->mime_parts[asciiwords(rcube_utils::get_input_value('_part', rcube_utils::INPUT_GPC))];\n    $ctype_primary = strtolower($part->ctype_primary);\n\n    $attrib['src'] = './?' . str_replace('_frame=', ($ctype_primary=='text' ? '_embed=' : '_preload='), $_SERVER['QUERY_STRING']);\n\n    $RCMAIL->output->add_gui_object('messagepartframe', $attrib['id']);\n\n    return html::iframe($attrib);\n}\n\n/**\n * Output attachment body with content filtering\n */\nfunction rcmail_message_part_output($body, $part, $mimetype, $download)\n{\n    global $MESSAGE, $RCMAIL;\n\n    if (!$part->size && !$body) {\n        return false;\n    }\n\n    $browser = $RCMAIL->output->browser;\n    $secure  = stripos($mimetype, 'image/') === false || $download;\n\n    // Remove <script> in SVG images\n    if (!$secure && stripos($mimetype, 'image/svg') === 0) {\n        if (!$body) {\n            $body = $MESSAGE->get_part_body($part->mime_id, false);\n            if (empty($body)) {\n                return false;\n            }\n        }\n\n        echo rcmail_svg_filter($body);\n        return true;\n    }\n\n    // Remove dangerous content in images for older IE (to be removed)\n    if (!$secure && $browser->ie && $browser->ver <= 8) {\n        if ($body) {\n            echo preg_match('/<(script|iframe|object)/i', $body) ? '' : $body;\n            return true;\n        }\n        else {\n            $stdout = fopen('php://output', 'w');\n            stream_filter_register('rcube_content', 'rcube_content_filter') or die('Failed to register content filter');\n            stream_filter_append($stdout, 'rcube_content');\n            return $MESSAGE->get_part_body($part->mime_id, true, 0, $stdout);\n        }\n    }\n\n    if ($body && !$download) {\n        header(\"Content-Length: \" . strlen($body));\n        echo $body;\n        return true;\n    }\n\n    // Don't be tempted to set Content-Length to $part->d_parameters['size'] (#1490482)\n    // RFC2183 says \"The size parameter indicates an approximate size\"\n\n    return $MESSAGE->get_part_body($part->mime_id, false, 0, -1);\n}\n\n/**\n * Remove <script> in SVG images\n */\nfunction rcmail_svg_filter($body)\n{\n    // clean SVG with washhtml\n    $wash_opts = array(\n        'show_washed'   => false,\n        'allow_remote'  => false,\n        'charset'       => RCUBE_CHARSET,\n        'html_elements' => array('title'),\n//        'blocked_src'   => 'program/resources/blocked.gif',\n    );\n\n    // initialize HTML washer\n    $washer = new rcube_washtml($wash_opts);\n\n    // allow CSS styles, will be sanitized by rcmail_washtml_callback()\n    $washer->add_callback('style', 'rcmail_washtml_callback');\n\n    return $washer->wash($body);\n}\n", "code_before": "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Delivering a specific uploaded file or mail message attachment      |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <alec@alec.pl>                            |\n +-----------------------------------------------------------------------+\n*/\n\n// This resets X-Frame-Options for framed output (#6688)\n$OUTPUT->page_headers();\n\n// show loading page\nif (!empty($_GET['_preload'])) {\n    unset($_GET['_preload']);\n    unset($_GET['_safe']);\n\n    $url     = $RCMAIL->url($_GET + array('_mimewarning' => 1, '_embed' => 1));\n    $message = $RCMAIL->gettext('loadingdata');\n\n    header('Content-Type: text/html; charset=' . RCUBE_CHARSET);\n    print \"<html>\\n<head>\\n\"\n        . '<meta http-equiv=\"refresh\" content=\"0; url='.rcube::Q($url).'\">' . \"\\n\"\n        . '<meta http-equiv=\"content-type\" content=\"text/html; charset='.RCUBE_CHARSET.'\">' . \"\\n\"\n        . \"</head>\\n<body>\\n$message\\n</body>\\n</html>\";\n    exit;\n}\n\n$attachment = new rcmail_attachment_handler;\n$mimetype   = $attachment->mimetype;\n$filename   = $attachment->filename;\n\n// show part page\nif (!empty($_GET['_frame'])) {\n    $OUTPUT->set_pagetitle($filename);\n\n    // register UI objects\n    $OUTPUT->add_handlers(array(\n        'messagepartframe'    => 'rcmail_message_part_frame',\n        'messagepartcontrols' => 'rcmail_message_part_controls',\n    ));\n\n    $part_id = rcube_utils::get_input_value('_part', rcube_utils::INPUT_GET);\n    $uid     = rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET);\n\n    // message/rfc822 preview (Note: handle also multipart/ parts, they can\n    // come from Enigma, which replaces message/rfc822 with real mimetype)\n    if ($part_id && ($mimetype == 'message/rfc822' || strpos($mimetype, 'multipart/') === 0)) {\n        $uid = preg_replace('/\\.[0-9.]+/', '', $uid);\n        $uid .= '.' . $part_id;\n\n        $OUTPUT->set_env('is_message', true);\n    }\n\n    $OUTPUT->set_env('mailbox', $RCMAIL->storage->get_folder());\n    $OUTPUT->set_env('uid', $uid);\n    $OUTPUT->set_env('part', $part_id);\n    $OUTPUT->set_env('filename', $filename);\n    $OUTPUT->set_env('mimetype', $mimetype);\n\n    $OUTPUT->send('messagepart');\n    exit;\n}\n\n// render thumbnail of an image attachment\nif (!empty($_GET['_thumb']) && $attachment->is_valid()) {\n    $thumbnail_size = $RCMAIL->config->get('image_thumbnail_size', 240);\n    $file_ident     = $attachment->ident;\n    $thumb_name     = 'thumb' . md5($file_ident . ':' . $RCMAIL->user->ID . ':' . $thumbnail_size);\n    $cache_file     = rcube_utils::temp_filename($thumb_name, false, false);\n\n    // render thumbnail image if not done yet\n    if (!is_file($cache_file) && $attachment->body_to_file($orig_name = $cache_file . '.tmp')) {\n        $image = new rcube_image($orig_name);\n\n        if ($imgtype = $image->resize($thumbnail_size, $cache_file, true)) {\n            $mimetype = 'image/' . $imgtype;\n        }\n        else {\n            // Resize failed, we need to check the file mimetype\n            // So, we do not exit here, but goto generic file body handler below\n            $_GET['_thumb']     = 0;\n            $_REQUEST['_embed'] = 1;\n        }\n    }\n\n    if (!empty($_GET['_thumb'])) {\n        if (is_file($cache_file)) {\n            $RCMAIL->output->future_expire_header(3600);\n            header('Content-Type: ' . $mimetype);\n            header('Content-Length: ' . filesize($cache_file));\n            readfile($cache_file);\n        }\n\n        exit;\n    }\n}\n\n// Handle attachment body (display or download)\nif (empty($_GET['_thumb']) && $attachment->is_valid()) {\n    // require CSRF protected url for downloads\n    if (!empty($_GET['_download'])) {\n        $RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n    }\n\n    $extensions = rcube_mime::get_mime_extensions($mimetype);\n\n    // compare file mimetype with the stated content-type headers and file extension to avoid malicious operations\n    if (!empty($_REQUEST['_embed']) && empty($_REQUEST['_nocheck'])) {\n        $file_extension = strtolower(pathinfo($filename, PATHINFO_EXTENSION));\n\n        // 1. compare filename suffix with expected suffix derived from mimetype\n        $valid = $file_extension && in_array($file_extension, (array)$extensions) || empty($extensions) || !empty($_REQUEST['_mimeclass']);\n\n        // 2. detect the real mimetype of the attachment part and compare it with the stated mimetype and filename extension\n        if ($valid || !$file_extension || $mimetype == 'application/octet-stream' || stripos($mimetype, 'text/') === 0) {\n            $tmp_body = $attachment->body(2048);\n\n            // detect message part mimetype\n            $real_mimetype = rcube_mime::file_content_type($tmp_body, $filename, $mimetype, true, true);\n            list($real_ctype_primary, $real_ctype_secondary) = explode('/', $real_mimetype);\n\n            // accept text/plain with any extension\n            if ($real_mimetype == 'text/plain' && rcmail_mimetype_compare($real_mimetype, $mimetype)) {\n                $valid_extension = true;\n            }\n            // ignore differences in text/* mimetypes. Filetype detection isn't very reliable here\n            else if ($real_ctype_primary == 'text' && strpos($mimetype, $real_ctype_primary) === 0) {\n                $real_mimetype   = $mimetype;\n                $valid_extension = true;\n            }\n            // ignore filename extension if mimeclass matches (#1489029)\n            else if (!empty($_REQUEST['_mimeclass']) && $real_ctype_primary == $_REQUEST['_mimeclass']) {\n                $valid_extension = true;\n            }\n            else {\n                // get valid file extensions\n                $extensions      = rcube_mime::get_mime_extensions($real_mimetype);\n                $valid_extension = !$file_extension || empty($extensions) || in_array($file_extension, (array)$extensions);\n            }\n\n            // fix mimetype for files wrongly declared as octet-stream\n            if ($mimetype == 'application/octet-stream' && $valid_extension) {\n                $mimetype = $real_mimetype;\n            }\n            // fix mimetype for images with wrong mimetype\n            else if (strpos($real_mimetype, 'image/') === 0 && strpos($mimetype, 'image/') === 0) {\n                $mimetype = $real_mimetype;\n            }\n\n            // \"fix\" real mimetype the same way the original is before comparison\n            $real_mimetype = rcube_mime::fix_mimetype($real_mimetype);\n\n            $valid = $valid_extension && rcmail_mimetype_compare($real_mimetype, $mimetype);\n        }\n        else {\n            $real_mimetype = $mimetype;\n        }\n\n        // show warning if validity checks failed\n        if (!$valid) {\n            // send blocked.gif for expected images\n            if (empty($_REQUEST['_mimewarning']) && strpos($mimetype, 'image/') === 0) {\n                // Do not cache. Failure might be the result of a misconfiguration, thus real content should be returned once fixed. \n                $content = $RCMAIL->get_resource_content('blocked.gif');\n                $OUTPUT->nocacheing_headers();\n                header(\"Content-Type: image/gif\");\n                header(\"Content-Transfer-Encoding: binary\");\n                header(\"Content-Length: \" . strlen($content));\n                echo $content;\n            }\n            // html warning with a button to load the file anyway\n            else {\n                $OUTPUT = new rcmail_html_page();\n                $OUTPUT->register_inline_warning(\n                        $RCMAIL->gettext(array(\n                                'name' => 'attachmentvalidationerror',\n                                'vars' => array(\n                                    'expected' => $mimetype . ($file_extension ? \" (.$file_extension)\" : ''),\n                                    'detected' => $real_mimetype . ($extensions[0] ? \" (.$extensions[0])\" : ''),\n                                )\n                            )\n                        ),\n                        $RCMAIL->gettext('showanyway'),\n                        $RCMAIL->url(array_merge($_GET, array('_nocheck' => 1)))\n                );\n\n                $OUTPUT->write();\n            }\n\n            exit;\n        }\n    }\n\n    // TIFF/WEBP to JPEG conversion, if needed\n    foreach (array('tiff', 'webp') as $type) {\n        $img_support = !empty($_SESSION['browser_caps']) && !empty($_SESSION['browser_caps'][$type]);\n        if (!empty($_REQUEST['_embed']) && !$img_support\n            && $attachment->image_type() == 'image/' . $type\n            && rcube_image::is_convertable('image/' . $type)\n        ) {\n            $convert2jpeg = true;\n            $mimetype     = 'image/jpeg';\n            break;\n        }\n    }\n\n    // deliver part content\n    if ($mimetype == 'text/html' && empty($_GET['_download'])) {\n        $OUTPUT = new rcmail_html_page();\n\n        // Check if we have enough memory to handle the message in it\n        // #1487424: we need up to 10x more memory than the body\n        if (!rcube_utils::mem_check($attachment->size * 10)) {\n            $OUTPUT->register_inline_warning(\n                $RCMAIL->gettext('messagetoobig'),\n                $RCMAIL->gettext('download'),\n                $RCMAIL->url(array_merge($_GET, array('_download' => 1)))\n            );\n        }\n        else {\n            // render HTML body\n            $out = $attachment->html();\n\n            // insert remote objects warning into HTML body\n            if ($REMOTE_OBJECTS) {\n                $OUTPUT->register_inline_warning(\n                    $RCMAIL->gettext('blockedresources'),\n                    $RCMAIL->gettext('allow'),\n                    $RCMAIL->url(array_merge($_GET, array('_safe' => 1)))\n                );\n            }\n        }\n\n        $OUTPUT->write($out);\n        exit;\n    }\n\n    // add filename extension if missing\n    if (!pathinfo($filename, PATHINFO_EXTENSION) && ($extensions = rcube_mime::get_mime_extensions($mimetype))) {\n        $filename .= '.' . $extensions[0];\n    }\n\n    $OUTPUT->download_headers($filename, array(\n            'type'         => $mimetype,\n            'type_charset' => $attachment->charset,\n            'disposition'  => !empty($_GET['_download']) ? 'attachment' : 'inline',\n    ));\n\n    // handle tiff to jpeg conversion\n    if (!empty($convert2jpeg)) {\n        $file_path = rcube_utils::temp_filename('attmnt');\n\n        // convert image to jpeg and send it to the browser\n        if ($attachment->body_to_file($file_path)) {\n            $image = new rcube_image($file_path);\n            if ($image->convert(rcube_image::TYPE_JPG, $file_path)) {\n                header(\"Content-Length: \" . filesize($file_path));\n                readfile($file_path);\n            }\n        }\n    }\n    else {\n        $attachment->output($mimetype);\n    }\n\n    exit;\n}\n\n// if we arrive here, the requested part was not found\nheader('HTTP/1.1 404 Not Found');\nexit;\n\n\n/**\n * Compares two mimetype strings with making sure that\n * e.g. image/bmp and image/x-ms-bmp are treated as equal.\n */\nfunction rcmail_mimetype_compare($type1, $type2)\n{\n    $regexp = '~/(x-ms-|x-)~';\n    $type1  = preg_replace($regexp, '/', $type1);\n    $type2  = preg_replace($regexp, '/', $type2);\n\n    return $type1 === $type2;\n}\n\n/**\n * Attachment properties table\n */\nfunction rcmail_message_part_controls($attrib)\n{\n    global $attachment, $RCMAIL;\n\n    if (!$attachment->is_valid()) {\n        return '';\n    }\n\n    $table = new html_table(array('cols' => 2));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('namex')).':');\n    $table->add('header', rcube::Q($attachment->filename));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('type')).':');\n    $table->add('header', rcube::Q($attachment->mimetype));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('size')).':');\n    $table->add('header', rcube::Q($attachment->size()));\n\n    return $table->show($attrib);\n}\n\n/**\n * Attachment preview frame\n */\nfunction rcmail_message_part_frame($attrib)\n{\n    global $RCMAIL;\n\n    if ($RCMAIL->output->get_env('is_message')) {\n        $url = array(\n            'task'   => 'mail',\n            'action' => 'preview',\n            'uid'    => $RCMAIL->output->get_env('uid'),\n            'mbox'   => $RCMAIL->output->get_env('mailbox'),\n        );\n    }\n    else {\n        $mimetype = $RCMAIL->output->get_env('mimetype');\n        $url      = $_GET;\n        $url[strpos($mimetype, 'text/') === 0 ? '_embed' : '_preload'] = 1;\n        unset($url['_frame']);\n    }\n\n    $url['_framed'] = 1; // For proper X-Frame-Options:deny handling\n\n    $attrib['src'] = $RCMAIL->url($url);\n\n    $RCMAIL->output->add_gui_object('messagepartframe', $attrib['id']);\n\n    return html::iframe($attrib);\n}\n\n/**\n * Wrapper class with unified access to attachment properties and body\n *\n * Unified for message parts as well as uploaded attachments\n */\nclass rcmail_attachment_handler\n{\n    public $filename;\n    public $size;\n    public $mimetype;\n    public $ident;\n    public $charset = RCUBE_CHARSET;\n\n    private $message;\n    private $part;\n    private $upload;\n    private $body;\n    private $body_file;\n    private $download = false;\n\n    /**\n     * Class constructor.\n     * Reads request parameters and initializes attachment/part props.\n     */\n    public function __construct()\n    {\n        ob_end_clean();\n\n        $part_id    = rcube_utils::get_input_value('_part', rcube_utils::INPUT_GET);\n        $file_id    = rcube_utils::get_input_value('_file', rcube_utils::INPUT_GET);\n        $compose_id = rcube_utils::get_input_value('_id', rcube_utils::INPUT_GET);\n        $uid        = rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET);\n        $rcube      = rcube::get_instance();\n\n        $this->download = !empty($_GET['_download']);\n\n        // similar code as in program/steps/mail/show.inc\n        if (!empty($uid)) {\n            $rcube->config->set('prefer_html', true);\n            $this->message = new rcube_message($uid, null, intval($_GET['_safe']));\n\n            if ($this->part = $this->message->mime_parts[$part_id]) {\n                $this->filename = rcmail_attachment_name($this->part);\n                $this->mimetype = $this->part->mimetype;\n                $this->size     = $this->part->size;\n                $this->ident    = $this->message->headers->messageID . ':' . $this->part->mime_id . ':' . $this->size . ':' . $this->mimetype;\n                $this->charset  = $this->part->charset ?: RCUBE_CHARSET;\n\n                if (empty($_GET['_frame'])) {\n                    // allow post-processing of the attachment body\n                    $plugin = $rcube->plugins->exec_hook('message_part_get', array(\n                            'uid'      => $uid,\n                            'id'       => $this->part->mime_id,\n                            'mimetype' => $this->mimetype,\n                            'part'     => $this->part,\n                            'download' => $this->download,\n                    ));\n\n                    if ($plugin['abort']) {\n                        exit;\n                    }\n\n                    // overwrite modified vars from plugin\n                    $this->mimetype = $plugin['mimetype'];\n\n                    if ($plugin['body']) {\n                        $this->body = $plugin['body'];\n                        $this->size = strlen($this->body);\n                    }\n                }\n            }\n        }\n        else if ($file_id && $compose_id) {\n            $file_id = preg_replace('/^rcmfile/', '', $file_id);\n\n            if (($compose = $_SESSION['compose_data_' . $compose_id])\n                && ($this->upload = $compose['attachments'][$file_id])\n            ) {\n                $this->filename = $this->upload['name'];\n                $this->mimetype = $this->upload['mimetype'];\n                $this->size     = $this->upload['size'];\n                $this->ident    = sprintf('%s:%s%s', $compose_id, $file_id, $this->size);\n                $this->charset  = $this->upload['charset'] ?: RCUBE_CHARSET;\n            }\n        }\n\n        if (empty($this->part) && empty($this->upload)) {\n            header('HTTP/1.1 404 Not Found');\n            exit;\n        }\n\n        // check connection status\n        self::check_storage_status();\n\n        $this->mimetype = rcube_mime::fix_mimetype($this->mimetype);\n    }\n\n    /**\n     * Remove temp files, etc.\n     */\n    public function __destruct()\n    {\n        if ($this->body_file) {\n            @unlink($this->body_file);\n        }\n    }\n\n    /**\n     * Check if the object is a message part not uploaded file\n     *\n     * @return bool True if the object is a meesage part\n     */\n    public function is_message_part()\n    {\n        return !empty($this->message);\n    }\n\n    /**\n     * Object/request status\n     *\n     * @return bool Status\n     */\n    public function is_valid()\n    {\n        return !empty($this->part) || !empty($this->upload);\n    }\n\n    /**\n     * Return attachment/part mimetype if this is an image\n     * of supported type.\n     *\n     * @return string Image mimetype\n     */\n    public function image_type()\n    {\n        $part = (object) array(\n            'filename' => $this->filename,\n            'mimetype' => $this->mimetype,\n        );\n\n        return rcmail_part_image_type($part);\n    }\n\n    /**\n     * Formatted attachment/part size (with units)\n     *\n     * @return string Attachment/part size (with units)\n     */\n    public function size()\n    {\n        $part = $this->part ?: ((object) array('size' => $this->size, 'exact_size' => true));\n        return rcube::get_instance()->message_part_size($part);\n    }\n\n    /**\n     * Returns, prints or saves the attachment/part body\n     */\n    public function body($size = null, $fp = null)\n    {\n        // we may have the body in memory or file already\n        if ($this->body !== null) {\n            if ($fp == -1) {\n                echo $size ? substr($this->body, 0, $size) : $this->body;\n            }\n            else if ($fp) {\n                $result = fwrite($fp, $size ? substr($this->body, $size) : $this->body) !== false;\n            }\n            else {\n                $result = $size ? substr($this->body, 0, $size) : $this->body;\n            }\n        }\n        else if ($this->body_file) {\n            if ($size) {\n                $result = file_get_contents($this->body_file, false, null, 0, $size);\n            }\n            else {\n                $result = file_get_contents($this->body_file);\n            }\n\n            if ($fp == -1) {\n                echo $result;\n            }\n            else if ($fp) {\n                $result = fwrite($fp, $result) !== false;\n            }\n        }\n        else if ($this->message) {\n            $result = $this->message->get_part_body($this->part->mime_id, false, 0, $fp);\n\n            // check connection status\n            if (!$fp && $this->size && empty($result)) {\n                self::check_storage_status();\n            }\n        }\n        else if ($this->upload) {\n            // This hook retrieves the attachment contents from the file storage backend\n            $attachment = rcube::get_instance()->plugins->exec_hook('attachment_get', $this->upload);\n\n            if ($fp && $fp != -1) {\n                if ($attachment['data']) {\n                    $result = fwrite($fp, $size ? substr($attachment['data'], 0, $size) : $attachment['data']) !== false;\n                }\n                else if ($attachment['path']) {\n                    if ($fh = fopen($attachment['path'], 'rb')) {\n                        $result = stream_copy_to_stream($fh, $fp, $size ? $size : -1);\n                    }\n                }\n            }\n            else {\n                $data = $attachment['data'];\n                if (!$data && $attachment['path']) {\n                    $data = file_get_contents($attachment['path']);\n                }\n\n                if ($fp == -1) {\n                    echo $size ? substr($data, 0, $size) : $data;\n                }\n                else {\n                    $result = $size ? substr($data, 0, $size) : $data;\n                }\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Save the body to a file\n     *\n     * @param string $filename File name with path\n     *\n     * @return bool True on success, False on failure\n     */\n    public function body_to_file($filename)\n    {\n        if ($filename && $this->size && ($fp = fopen($filename, 'w'))) {\n            $this->body(0, $fp);\n            $this->body_file = $filename;\n            fclose($fp);\n            @chmod(filename, 0600);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Output attachment body with content filtering\n     */\n    public function output($mimetype)\n    {\n        if (!$this->size) {\n            return false;\n        }\n\n        $secure = stripos($mimetype, 'image/') === false || $this->download;\n\n        // Remove <script> in SVG images\n        if (!$secure && stripos($mimetype, 'image/svg') === 0) {\n            if (!$this->body) {\n                $this->body = $this->body();\n                if (empty($this->body)) {\n                    return false;\n                }\n            }\n\n            echo self::svg_filter($this->body);\n            return true;\n        }\n\n        if ($this->body !== null && !$this->download) {\n            header(\"Content-Length: \" . strlen($this->body));\n            echo $this->body;\n            return true;\n        }\n\n        // Don't be tempted to set Content-Length to $part->d_parameters['size'] (#1490482)\n        // RFC2183 says \"The size parameter indicates an approximate size\"\n\n        return $this->body(0, -1);\n    }\n\n    /**\n     * Returns formatted HTML if the attachment is HTML\n     */\n    public function html()\n    {\n        list($type, $subtype) = explode($this->mimetype, '/');\n        $part = (object) array(\n            'charset'         => $this->charset,\n            'ctype_secondary' => $subtype,\n        );\n\n        // get part body if not available\n        // fix formatting and charset\n        $body = rcube_message::format_part_body($this->body(), $part);\n\n        // show images?\n        $is_safe = $this->is_safe();\n\n        return rcmail_wash_html($body, array('safe' => $is_safe, 'inline_html' => false));\n    }\n\n    /**\n     * Remove <script> in SVG images\n     */\n    public static function svg_filter($body)\n    {\n        // clean SVG with washtml\n        $wash_opts = array(\n            'show_washed'   => false,\n            'allow_remote'  => false,\n            'charset'       => RCUBE_CHARSET,\n            'html_elements' => array('title'),\n        );\n\n        // initialize HTML washer\n        $washer = new rcube_washtml($wash_opts);\n\n        // allow CSS styles, will be sanitized by rcmail_washtml_callback()\n        $washer->add_callback('style', 'rcmail_washtml_callback');\n\n        return $washer->wash($body);\n    }\n\n    /**\n     * Handles nicely storage connection errors\n     */\n    public static function check_storage_status()\n    {\n        $error = rcmail::get_instance()->storage->get_error_code();\n\n        // Check if we have a connection error\n        if ($error == rcube_imap_generic::ERROR_BAD) {\n            ob_end_clean();\n\n            // Get action is often executed simultaneously.\n            // Some servers have MAXPERIP or other limits.\n            // To workaround this we'll wait for some time\n            // and try again (once).\n            // Note: Random sleep interval is used to minimize concurency\n            // in getting message parts\n\n            if (!isset($_GET['_redirected'])) {\n                usleep(rand(10,30)*100000); // 1-3 sec.\n                header('Location: ' . $_SERVER['REQUEST_URI'] . '&_redirected=1');\n            }\n            else {\n                rcube::raise_error(array(\n                    'code' => 500, 'file' => __FILE__, 'line' => __LINE__,\n                    'message' => 'Unable to get/display message part. IMAP connection error'),\n                    true, true);\n            }\n\n            // Don't kill session, just quit (#1486995)\n            exit;\n        }\n    }\n\n    public function is_safe()\n    {\n        if ($this->message) {\n            return rcmail_check_safe($this->message);\n        }\n\n        return !empty($_GET['_safe']);\n    }\n}\n", "patch": "@@ -131,6 +131,10 @@ else if (strlen($part_id)) {\n             exit;\n         }\n \n+        // require CSRF protected url for downloads\n+        if ($plugin['download'])\n+            $RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n+\n         // overwrite modified vars from plugin\n         $mimetype   = $plugin['mimetype'];\n         $extensions = rcube_mime::get_mime_extensions($mimetype);", "file_path": "files/2016_8\\28", "file_language": "inc", "file_name": "program/steps/mail/get.inc", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/roundcube/roundcubemail/raw/699af1e5206ed9114322adaa3c25c1c969640a53/program/steps/mail/viewsource.inc", "code": "<?php\n\n/*\n +-----------------------------------------------------------------------+\n | program/steps/mail/viewsource.inc                                     |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2005-2013, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Display a mail message similar as a usual mail application does     |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\nif (!empty($_GET['_save'])) {\n    $RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n}\n\nob_end_clean();\n\n// similar code as in program/steps/mail/get.inc\nif ($uid = rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET)) {\n    $headers = $RCMAIL->storage->get_message_headers($uid);\n    $charset = $headers->charset ? $headers->charset : $RCMAIL->config->get('default_charset');\n\n    header(\"Content-Type: text/plain; charset={$charset}\");\n\n    if (!empty($_GET['_save'])) {\n        $subject  = rcube_mime::decode_header($headers->subject, $headers->charset);\n        $filename = ($subject ? $subject : $RCMAIL->config->get('product_name', 'email')) . '.eml';\n        $browser  = $RCMAIL->output->browser;\n\n        if ($browser->ie)\n            $filename = rawurlencode($filename);\n        else\n            $filename = addcslashes($filename, '\"');\n\n        header(\"Content-Length: {$headers->size}\");\n        header(\"Content-Disposition: attachment; filename=\\\"$filename\\\"\");\n    }\n\n    $RCMAIL->storage->print_raw_body($uid, empty($_GET['_save']));\n}\nelse {\n    rcube::raise_error(array(\n            'code'    => 500,\n            'type'    => 'php',\n            'file'    => __FILE__,\n            'line'    => __LINE__,\n            'message' => \"Message UID $uid not found\"\n        ),\n        true, true);\n}\n\nexit;\n", "code_before": "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n |                                                                       |\n | Copyright (C) The Roundcube Dev Team                                  |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Display a mail message similar as a usual mail application does     |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\nif (!empty($_GET['_save'])) {\n    $RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n}\n\nob_end_clean();\n\n// similar code as in program/steps/mail/get.inc\nif ($uid = rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET)) {\n    if ($pos = strpos($uid, '.')) {\n        $message = new rcube_message($uid);\n        $headers = $message->headers;\n        $part_id = substr($uid, $pos + 1);\n    }\n    else {\n        $headers = $RCMAIL->storage->get_message_headers($uid);\n    }\n\n    $charset = $headers->charset ?: $RCMAIL->config->get('default_charset');\n\n    if (!empty($_GET['_save'])) {\n        $subject  = rcube_mime::decode_header($headers->subject, $headers->charset);\n        $filename = rcmail_filename_from_subject(mb_substr($subject, 0, 128));\n        $filename = ($filename ?: $uid)  . '.eml';\n\n        $RCMAIL->output->download_headers($filename, array(\n                'length'       => $headers->size,\n                'type'         => 'text/plain',\n                'type_charset' => $charset,\n        ));\n    }\n    else {\n        header(\"Content-Type: text/plain; charset={$charset}\");\n    }\n\n    if (isset($message)) {\n        $message->get_part_body($part_id, empty($_GET['_save']), 0, -1);\n    }\n    else {\n        $RCMAIL->storage->print_raw_body($uid, empty($_GET['_save']));\n    }\n}\nelse {\n    rcube::raise_error(array(\n            'code'    => 500,\n            'type'    => 'php',\n            'file'    => __FILE__,\n            'line'    => __LINE__,\n            'message' => \"Message UID $uid not found\"\n        ),\n        true, true);\n}\n\nexit;\n\n\n/**\n * Helper function to convert message subject into filename\n */\nfunction rcmail_filename_from_subject($str)\n{\n    $str = preg_replace('/[:\\t\\n\\r\\0\\x0B\\/]+\\s*/', ' ', $str);\n\n    return trim($str, \" \\t\\n\\r\\0\\x0B./_\");\n}\n", "patch": "@@ -19,6 +19,10 @@\n  +-----------------------------------------------------------------------+\n */\n \n+if (!empty($_GET['_save'])) {\n+    $RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n+}\n+\n ob_end_clean();\n \n // similar code as in program/steps/mail/get.inc", "file_path": "files/2016_8\\29", "file_language": "inc", "file_name": "program/steps/mail/viewsource.inc", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}], "outdated": 0}
{"index": 10, "cve_id": "CVE-2016-6635", "cwe_id": ["CWE-352"], "cve_language": "PHP", "cve_description": "Cross-site request forgery (CSRF) vulnerability in the wp_ajax_wp_compression_test function in wp-admin/includes/ajax-actions.php in WordPress before 4.5 allows remote attackers to hijack the authentication of administrators for requests that change the script compression option.", "cvss": "8.8", "publish_date": "August 7, 2016", "AV": "NETWORK", "AC": "LOW", "PR": "NONE", "UI": "REQUIRED", "S": "UNCHANGED", "C": "HIGH", "I": "HIGH", "A": "HIGH", "commit_id": "9b7a7754133c50b82bd9d976fb5b24094f658aab", "commit_message": "Add nonce to AJAX action for script compression setting\n\nBuilt from https://develop.svn.wordpress.org/trunk@37143\n\n\ngit-svn-id: http://core.svn.wordpress.org/trunk@37110 1a063a9b-81f0-0310-95a4-ce76da25c4cd", "commit_date": "2016-03-30T18:21:25Z", "project": "wordpress/wordpress", "url": "https://api.github.com/repos/WordPress/WordPress/commits/9b7a7754133c50b82bd9d976fb5b24094f658aab", "html_url": "https://github.com/WordPress/WordPress/commit/9b7a7754133c50b82bd9d976fb5b24094f658aab", "windows_before": "", "windows_after": "", "parents": [{"commit_id_before": "db47a4913ca550da030439b6d14169671ff20cc2", "url_before": "https://api.github.com/repos/WordPress/WordPress/commits/db47a4913ca550da030439b6d14169671ff20cc2", "html_url_before": "https://github.com/WordPress/WordPress/commit/db47a4913ca550da030439b6d14169671ff20cc2"}], "details": [{"raw_url": "https://github.com/WordPress/WordPress/raw/9b7a7754133c50b82bd9d976fb5b24094f658aab/wp-admin/includes/ajax-actions.php", "code": "<?php\n/**\n * Administration API: Core Ajax handlers\n *\n * @package WordPress\n * @subpackage Administration\n * @since 2.1.0\n */\n\n//\n// No-privilege Ajax handlers.\n//\n\n/**\n * Ajax handler for the Heartbeat API in\n * the no-privilege context.\n *\n * Runs when the user is not logged in.\n *\n * @since 3.6.0\n */\nfunction wp_ajax_nopriv_heartbeat() {\n\t$response = array();\n\n\t// screen_id is the same as $current_screen->id and the JS global 'pagenow'.\n\tif ( ! empty($_POST['screen_id']) )\n\t\t$screen_id = sanitize_key($_POST['screen_id']);\n\telse\n\t\t$screen_id = 'front';\n\n\tif ( ! empty($_POST['data']) ) {\n\t\t$data = wp_unslash( (array) $_POST['data'] );\n\n\t\t/**\n\t\t * Filter Heartbeat AJAX response in no-privilege environments.\n\t\t *\n\t\t * @since 3.6.0\n\t\t *\n\t\t * @param array|object $response  The no-priv Heartbeat response object or array.\n\t\t * @param array        $data      An array of data passed via $_POST.\n\t\t * @param string       $screen_id The screen id.\n\t\t */\n\t\t$response = apply_filters( 'heartbeat_nopriv_received', $response, $data, $screen_id );\n\t}\n\n\t/**\n\t * Filter Heartbeat AJAX response when no data is passed.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param array|object $response  The Heartbeat response object or array.\n\t * @param string       $screen_id The screen id.\n\t */\n\t$response = apply_filters( 'heartbeat_nopriv_send', $response, $screen_id );\n\n\t/**\n\t * Fires when Heartbeat ticks in no-privilege environments.\n\t *\n\t * Allows the transport to be easily replaced with long-polling.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param array|object $response  The no-priv Heartbeat response.\n\t * @param string       $screen_id The screen id.\n\t */\n\tdo_action( 'heartbeat_nopriv_tick', $response, $screen_id );\n\n\t// Send the current time according to the server.\n\t$response['server_time'] = time();\n\n\twp_send_json($response);\n}\n\n//\n// GET-based Ajax handlers.\n//\n\n/**\n * Ajax handler for fetching a list table.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n */\nfunction wp_ajax_fetch_list() {\n\tglobal $wp_list_table;\n\n\t$list_class = $_GET['list_args']['class'];\n\tcheck_ajax_referer( \"fetch-list-$list_class\", '_ajax_fetch_list_nonce' );\n\n\t$wp_list_table = _get_list_table( $list_class, array( 'screen' => $_GET['list_args']['screen']['id'] ) );\n\tif ( ! $wp_list_table )\n\t\twp_die( 0 );\n\n\tif ( ! $wp_list_table->ajax_user_can() )\n\t\twp_die( -1 );\n\n\t$wp_list_table->ajax_response();\n\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for tag search.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_ajax_tag_search() {\n\tif ( ! isset( $_GET['tax'] ) ) {\n\t\twp_die( 0 );\n\t}\n\n\t$taxonomy = sanitize_key( $_GET['tax'] );\n\t$tax = get_taxonomy( $taxonomy );\n\tif ( ! $tax ) {\n\t\twp_die( 0 );\n\t}\n\n\tif ( ! current_user_can( $tax->cap->assign_terms ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$s = wp_unslash( $_GET['q'] );\n\n\t$comma = _x( ',', 'tag delimiter' );\n\tif ( ',' !== $comma )\n\t\t$s = str_replace( $comma, ',', $s );\n\tif ( false !== strpos( $s, ',' ) ) {\n\t\t$s = explode( ',', $s );\n\t\t$s = $s[count( $s ) - 1];\n\t}\n\t$s = trim( $s );\n\n\t/**\n\t * Filter the minimum number of characters required to fire a tag search via AJAX.\n\t *\n\t * @since 4.0.0\n\t *\n\t * @param int    $characters The minimum number of characters required. Default 2.\n\t * @param object $tax        The taxonomy object.\n\t * @param string $s          The search term.\n\t */\n\t$term_search_min_chars = (int) apply_filters( 'term_search_min_chars', 2, $tax, $s );\n\n\t/*\n\t * Require $term_search_min_chars chars for matching (default: 2)\n\t * ensure it's a non-negative, non-zero integer.\n\t */\n\tif ( ( $term_search_min_chars == 0 ) || ( strlen( $s ) < $term_search_min_chars ) ){\n\t\twp_die();\n\t}\n\n\t$results = get_terms( $taxonomy, array( 'name__like' => $s, 'fields' => 'names', 'hide_empty' => false ) );\n\n\techo join( $results, \"\\n\" );\n\twp_die();\n}\n\n/**\n * Ajax handler for compression testing.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_wp_compression_test() {\n\tif ( !current_user_can( 'manage_options' ) )\n\t\twp_die( -1 );\n\n\tif ( ini_get('zlib.output_compression') || 'ob_gzhandler' == ini_get('output_handler') ) {\n\t\tupdate_site_option('can_compress_scripts', 0);\n\t\twp_die( 0 );\n\t}\n\n\tif ( isset($_GET['test']) ) {\n\t\theader( 'Expires: Wed, 11 Jan 1984 05:00:00 GMT' );\n\t\theader( 'Last-Modified: ' . gmdate( 'D, d M Y H:i:s' ) . ' GMT' );\n\t\theader( 'Cache-Control: no-cache, must-revalidate, max-age=0' );\n\t\theader( 'Pragma: no-cache' );\n\t\theader('Content-Type: application/javascript; charset=UTF-8');\n\t\t$force_gzip = ( defined('ENFORCE_GZIP') && ENFORCE_GZIP );\n\t\t$test_str = '\"wpCompressionTest Lorem ipsum dolor sit amet consectetuer mollis sapien urna ut a. Eu nonummy condimentum fringilla tempor pretium platea vel nibh netus Maecenas. Hac molestie amet justo quis pellentesque est ultrices interdum nibh Morbi. Cras mattis pretium Phasellus ante ipsum ipsum ut sociis Suspendisse Lorem. Ante et non molestie. Porta urna Vestibulum egestas id congue nibh eu risus gravida sit. Ac augue auctor Ut et non a elit massa id sodales. Elit eu Nulla at nibh adipiscing mattis lacus mauris at tempus. Netus nibh quis suscipit nec feugiat eget sed lorem et urna. Pellentesque lacus at ut massa consectetuer ligula ut auctor semper Pellentesque. Ut metus massa nibh quam Curabitur molestie nec mauris congue. Volutpat molestie elit justo facilisis neque ac risus Ut nascetur tristique. Vitae sit lorem tellus et quis Phasellus lacus tincidunt nunc Fusce. Pharetra wisi Suspendisse mus sagittis libero lacinia Integer consequat ac Phasellus. Et urna ac cursus tortor aliquam Aliquam amet tellus volutpat Vestibulum. Justo interdum condimentum In augue congue tellus sollicitudin Quisque quis nibh.\"';\n\n\t\t if ( 1 == $_GET['test'] ) {\n\t\t \techo $test_str;\n\t\t \twp_die();\n\t\t } elseif ( 2 == $_GET['test'] ) {\n\t\t\tif ( !isset($_SERVER['HTTP_ACCEPT_ENCODING']) )\n\t\t\t\twp_die( -1 );\n\t\t\tif ( false !== stripos( $_SERVER['HTTP_ACCEPT_ENCODING'], 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {\n\t\t\t\theader('Content-Encoding: deflate');\n\t\t\t\t$out = gzdeflate( $test_str, 1 );\n\t\t\t} elseif ( false !== stripos( $_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') && function_exists('gzencode') ) {\n\t\t\t\theader('Content-Encoding: gzip');\n\t\t\t\t$out = gzencode( $test_str, 1 );\n\t\t\t} else {\n\t\t\t\twp_die( -1 );\n\t\t\t}\n\t\t\techo $out;\n\t\t\twp_die();\n\t\t} elseif ( 'no' == $_GET['test'] ) {\n\t\t\tcheck_ajax_referer( 'update_can_compress_scripts' );\n\t\t\tupdate_site_option('can_compress_scripts', 0);\n\t\t} elseif ( 'yes' == $_GET['test'] ) {\n\t\t\tcheck_ajax_referer( 'update_can_compress_scripts' );\n\t\t\tupdate_site_option('can_compress_scripts', 1);\n\t\t}\n\t}\n\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for image editor previews.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_imgedit_preview() {\n\t$post_id = intval($_GET['postid']);\n\tif ( empty($post_id) || !current_user_can('edit_post', $post_id) )\n\t\twp_die( -1 );\n\n\tcheck_ajax_referer( \"image_editor-$post_id\" );\n\n\tinclude_once( ABSPATH . 'wp-admin/includes/image-edit.php' );\n\tif ( ! stream_preview_image($post_id) )\n\t\twp_die( -1 );\n\n\twp_die();\n}\n\n/**\n * Ajax handler for oEmbed caching.\n *\n * @since 3.1.0\n *\n * @global WP_Embed $wp_embed\n */\nfunction wp_ajax_oembed_cache() {\n\t$GLOBALS['wp_embed']->cache_oembed( $_GET['post'] );\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for user autocomplete.\n *\n * @since 3.4.0\n */\nfunction wp_ajax_autocomplete_user() {\n\tif ( ! is_multisite() || ! current_user_can( 'promote_users' ) || wp_is_large_network( 'users' ) )\n\t\twp_die( -1 );\n\n\t/** This filter is documented in wp-admin/user-new.php */\n\tif ( ! is_super_admin() && ! apply_filters( 'autocomplete_users_for_site_admins', false ) )\n\t\twp_die( -1 );\n\n\t$return = array();\n\n\t// Check the type of request\n\t// Current allowed values are `add` and `search`\n\tif ( isset( $_REQUEST['autocomplete_type'] ) && 'search' === $_REQUEST['autocomplete_type'] ) {\n\t\t$type = $_REQUEST['autocomplete_type'];\n\t} else {\n\t\t$type = 'add';\n\t}\n\n\t// Check the desired field for value\n\t// Current allowed values are `user_email` and `user_login`\n\tif ( isset( $_REQUEST['autocomplete_field'] ) && 'user_email' === $_REQUEST['autocomplete_field'] ) {\n\t\t$field = $_REQUEST['autocomplete_field'];\n\t} else {\n\t\t$field = 'user_login';\n\t}\n\n\t// Exclude current users of this blog\n\tif ( isset( $_REQUEST['site_id'] ) ) {\n\t\t$id = absint( $_REQUEST['site_id'] );\n\t} else {\n\t\t$id = get_current_blog_id();\n\t}\n\n\t$include_blog_users = ( $type == 'search' ? get_users( array( 'blog_id' => $id, 'fields' => 'ID' ) ) : array() );\n\t$exclude_blog_users = ( $type == 'add' ? get_users( array( 'blog_id' => $id, 'fields' => 'ID' ) ) : array() );\n\n\t$users = get_users( array(\n\t\t'blog_id' => false,\n\t\t'search'  => '*' . $_REQUEST['term'] . '*',\n\t\t'include' => $include_blog_users,\n\t\t'exclude' => $exclude_blog_users,\n\t\t'search_columns' => array( 'user_login', 'user_nicename', 'user_email' ),\n\t) );\n\n\tforeach ( $users as $user ) {\n\t\t$return[] = array(\n\t\t\t/* translators: 1: user_login, 2: user_email */\n\t\t\t'label' => sprintf( _x( '%1$s (%2$s)', 'user autocomplete result' ), $user->user_login, $user->user_email ),\n\t\t\t'value' => $user->$field,\n\t\t);\n\t}\n\n\twp_die( wp_json_encode( $return ) );\n}\n\n/**\n * Ajax handler for dashboard widgets.\n *\n * @since 3.4.0\n */\nfunction wp_ajax_dashboard_widgets() {\n\trequire_once ABSPATH . 'wp-admin/includes/dashboard.php';\n\n\t$pagenow = $_GET['pagenow'];\n\tif ( $pagenow === 'dashboard-user' || $pagenow === 'dashboard-network' || $pagenow === 'dashboard' ) {\n\t\tset_current_screen( $pagenow );\n\t}\n\n\tswitch ( $_GET['widget'] ) {\n\t\tcase 'dashboard_primary' :\n\t\t\twp_dashboard_primary();\n\t\t\tbreak;\n\t}\n\twp_die();\n}\n\n/**\n * Ajax handler for Customizer preview logged-in status.\n *\n * @since 3.4.0\n */\nfunction wp_ajax_logged_in() {\n\twp_die( 1 );\n}\n\n//\n// Ajax helpers.\n//\n\n/**\n * Sends back current comment total and new page links if they need to be updated.\n *\n * Contrary to normal success AJAX response (\"1\"), die with time() on success.\n *\n * @access private\n * @since 2.7.0\n *\n * @param int $comment_id\n * @param int $delta\n */\nfunction _wp_ajax_delete_comment_response( $comment_id, $delta = -1 ) {\n\t$total    = isset( $_POST['_total'] )    ? (int) $_POST['_total']    : 0;\n\t$per_page = isset( $_POST['_per_page'] ) ? (int) $_POST['_per_page'] : 0;\n\t$page     = isset( $_POST['_page'] )     ? (int) $_POST['_page']     : 0;\n\t$url      = isset( $_POST['_url'] )      ? esc_url_raw( $_POST['_url'] ) : '';\n\n\t// JS didn't send us everything we need to know. Just die with success message\n\tif ( ! $total || ! $per_page || ! $page || ! $url ) {\n\t\t$time = time();\n\t\t$comment = get_comment( $comment_id );\n\n\t\t$counts = wp_count_comments();\n\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'comment',\n\t\t\t// Here for completeness - not used.\n\t\t\t'id' => $comment_id,\n\t\t\t'supplemental' => array(\n\t\t\t\t'status' => $comment ? $comment->comment_approved : '',\n\t\t\t\t'postId' => $comment ? $comment->comment_post_ID : '',\n\t\t\t\t'time' => $time,\n\t\t\t\t'in_moderation' => $counts->moderated,\n\t\t\t\t'i18n_comments_text' => sprintf(\n\t\t\t\t\t_n( '%s Comment', '%s Comments', $counts->approved ),\n\t\t\t\t\tnumber_format_i18n( $counts->approved )\n\t\t\t\t),\n\t\t\t\t'i18n_moderation_text' => sprintf(\n\t\t\t\t\t_nx( '%s in moderation', '%s in moderation', $counts->moderated, 'comments' ),\n\t\t\t\t\tnumber_format_i18n( $counts->moderated )\n\t\t\t\t)\n\t\t\t)\n\t\t) );\n\t\t$x->send();\n\t}\n\n\t$total += $delta;\n\tif ( $total < 0 )\n\t\t$total = 0;\n\n\t// Only do the expensive stuff on a page-break, and about 1 other time per page\n\tif ( 0 == $total % $per_page || 1 == mt_rand( 1, $per_page ) ) {\n\t\t$post_id = 0;\n\t\t// What type of comment count are we looking for?\n\t\t$status = 'all';\n\t\t$parsed = parse_url( $url );\n\t\tif ( isset( $parsed['query'] ) ) {\n\t\t\tparse_str( $parsed['query'], $query_vars );\n\t\t\tif ( !empty( $query_vars['comment_status'] ) )\n\t\t\t\t$status = $query_vars['comment_status'];\n\t\t\tif ( !empty( $query_vars['p'] ) )\n\t\t\t\t$post_id = (int) $query_vars['p'];\n\t\t}\n\n\t\t$comment_count = wp_count_comments($post_id);\n\n\t\t// We're looking for a known type of comment count.\n\t\tif ( isset( $comment_count->$status ) )\n\t\t\t$total = $comment_count->$status;\n\t\t\t// Else use the decremented value from above.\n\t}\n\n\t// The time since the last comment count.\n\t$time = time();\n\t$comment = get_comment( $comment_id );\n\n\t$x = new WP_Ajax_Response( array(\n\t\t'what' => 'comment',\n\t\t// Here for completeness - not used.\n\t\t'id' => $comment_id,\n\t\t'supplemental' => array(\n\t\t\t'status' => $comment ? $comment->comment_approved : '',\n\t\t\t'postId' => $comment ? $comment->comment_post_ID : '',\n\t\t\t'total_items_i18n' => sprintf( _n( '%s item', '%s items', $total ), number_format_i18n( $total ) ),\n\t\t\t'total_pages' => ceil( $total / $per_page ),\n\t\t\t'total_pages_i18n' => number_format_i18n( ceil( $total / $per_page ) ),\n\t\t\t'total' => $total,\n\t\t\t'time' => $time\n\t\t)\n\t) );\n\t$x->send();\n}\n\n//\n// POST-based Ajax handlers.\n//\n\n/**\n * Ajax handler for adding a hierarchical term.\n *\n * @access private\n * @since 3.1.0\n */\nfunction _wp_ajax_add_hierarchical_term() {\n\t$action = $_POST['action'];\n\t$taxonomy = get_taxonomy(substr($action, 4));\n\tcheck_ajax_referer( $action, '_ajax_nonce-add-' . $taxonomy->name );\n\tif ( !current_user_can( $taxonomy->cap->edit_terms ) )\n\t\twp_die( -1 );\n\t$names = explode(',', $_POST['new'.$taxonomy->name]);\n\t$parent = isset($_POST['new'.$taxonomy->name.'_parent']) ? (int) $_POST['new'.$taxonomy->name.'_parent'] : 0;\n\tif ( 0 > $parent )\n\t\t$parent = 0;\n\tif ( $taxonomy->name == 'category' )\n\t\t$post_category = isset($_POST['post_category']) ? (array) $_POST['post_category'] : array();\n\telse\n\t\t$post_category = ( isset($_POST['tax_input']) && isset($_POST['tax_input'][$taxonomy->name]) ) ? (array) $_POST['tax_input'][$taxonomy->name] : array();\n\t$checked_categories = array_map( 'absint', (array) $post_category );\n\t$popular_ids = wp_popular_terms_checklist($taxonomy->name, 0, 10, false);\n\n\tforeach ( $names as $cat_name ) {\n\t\t$cat_name = trim($cat_name);\n\t\t$category_nicename = sanitize_title($cat_name);\n\t\tif ( '' === $category_nicename )\n\t\t\tcontinue;\n\t\tif ( !$cat_id = term_exists( $cat_name, $taxonomy->name, $parent ) )\n\t\t\t$cat_id = wp_insert_term( $cat_name, $taxonomy->name, array( 'parent' => $parent ) );\n\t\tif ( is_wp_error( $cat_id ) ) {\n\t\t\tcontinue;\n\t\t} elseif ( is_array( $cat_id ) ) {\n\t\t\t$cat_id = $cat_id['term_id'];\n\t\t}\n\t\t$checked_categories[] = $cat_id;\n\t\tif ( $parent ) // Do these all at once in a second\n\t\t\tcontinue;\n\n\t\tob_start();\n\n\t\twp_terms_checklist( 0, array( 'taxonomy' => $taxonomy->name, 'descendants_and_self' => $cat_id, 'selected_cats' => $checked_categories, 'popular_cats' => $popular_ids ));\n\n\t\t$data = ob_get_clean();\n\n\t\t$add = array(\n\t\t\t'what' => $taxonomy->name,\n\t\t\t'id' => $cat_id,\n\t\t\t'data' => str_replace( array(\"\\n\", \"\\t\"), '', $data),\n\t\t\t'position' => -1\n\t\t);\n\t}\n\n\tif ( $parent ) { // Foncy - replace the parent and all its children\n\t\t$parent = get_term( $parent, $taxonomy->name );\n\t\t$term_id = $parent->term_id;\n\n\t\twhile ( $parent->parent ) { // get the top parent\n\t\t\t$parent = get_term( $parent->parent, $taxonomy->name );\n\t\t\tif ( is_wp_error( $parent ) )\n\t\t\t\tbreak;\n\t\t\t$term_id = $parent->term_id;\n\t\t}\n\n\t\tob_start();\n\n\t\twp_terms_checklist( 0, array('taxonomy' => $taxonomy->name, 'descendants_and_self' => $term_id, 'selected_cats' => $checked_categories, 'popular_cats' => $popular_ids));\n\n\t\t$data = ob_get_clean();\n\n\t\t$add = array(\n\t\t\t'what' => $taxonomy->name,\n\t\t\t'id' => $term_id,\n\t\t\t'data' => str_replace( array(\"\\n\", \"\\t\"), '', $data),\n\t\t\t'position' => -1\n\t\t);\n\t}\n\n\tob_start();\n\n\twp_dropdown_categories( array(\n\t\t'taxonomy' => $taxonomy->name, 'hide_empty' => 0, 'name' => 'new'.$taxonomy->name.'_parent', 'orderby' => 'name',\n\t\t'hierarchical' => 1, 'show_option_none' => '&mdash; '.$taxonomy->labels->parent_item.' &mdash;'\n\t) );\n\n\t$sup = ob_get_clean();\n\n\t$add['supplemental'] = array( 'newcat_parent' => $sup );\n\n\t$x = new WP_Ajax_Response( $add );\n\t$x->send();\n}\n\n/**\n * Ajax handler for deleting a comment.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_delete_comment() {\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tif ( !$comment = get_comment( $id ) )\n\t\twp_die( time() );\n\tif ( ! current_user_can( 'edit_comment', $comment->comment_ID ) )\n\t\twp_die( -1 );\n\n\tcheck_ajax_referer( \"delete-comment_$id\" );\n\t$status = wp_get_comment_status( $comment );\n\n\t$delta = -1;\n\tif ( isset($_POST['trash']) && 1 == $_POST['trash'] ) {\n\t\tif ( 'trash' == $status )\n\t\t\twp_die( time() );\n\t\t$r = wp_trash_comment( $comment );\n\t} elseif ( isset($_POST['untrash']) && 1 == $_POST['untrash'] ) {\n\t\tif ( 'trash' != $status )\n\t\t\twp_die( time() );\n\t\t$r = wp_untrash_comment( $comment );\n\t\tif ( ! isset( $_POST['comment_status'] ) || $_POST['comment_status'] != 'trash' ) // undo trash, not in trash\n\t\t\t$delta = 1;\n\t} elseif ( isset($_POST['spam']) && 1 == $_POST['spam'] ) {\n\t\tif ( 'spam' == $status )\n\t\t\twp_die( time() );\n\t\t$r = wp_spam_comment( $comment );\n\t} elseif ( isset($_POST['unspam']) && 1 == $_POST['unspam'] ) {\n\t\tif ( 'spam' != $status )\n\t\t\twp_die( time() );\n\t\t$r = wp_unspam_comment( $comment );\n\t\tif ( ! isset( $_POST['comment_status'] ) || $_POST['comment_status'] != 'spam' ) // undo spam, not in spam\n\t\t\t$delta = 1;\n\t} elseif ( isset($_POST['delete']) && 1 == $_POST['delete'] ) {\n\t\t$r = wp_delete_comment( $comment );\n\t} else {\n\t\twp_die( -1 );\n\t}\n\n\tif ( $r ) // Decide if we need to send back '1' or a more complicated response including page links and comment counts\n\t\t_wp_ajax_delete_comment_response( $comment->comment_ID, $delta );\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for deleting a tag.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_delete_tag() {\n\t$tag_id = (int) $_POST['tag_ID'];\n\tcheck_ajax_referer( \"delete-tag_$tag_id\" );\n\n\t$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';\n\t$tax = get_taxonomy($taxonomy);\n\n\tif ( !current_user_can( $tax->cap->delete_terms ) )\n\t\twp_die( -1 );\n\n\t$tag = get_term( $tag_id, $taxonomy );\n\tif ( !$tag || is_wp_error( $tag ) )\n\t\twp_die( 1 );\n\n\tif ( wp_delete_term($tag_id, $taxonomy))\n\t\twp_die( 1 );\n\telse\n\t\twp_die( 0 );\n}\n\n/**\n * Ajax handler for deleting a link.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_delete_link() {\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tcheck_ajax_referer( \"delete-bookmark_$id\" );\n\tif ( !current_user_can( 'manage_links' ) )\n\t\twp_die( -1 );\n\n\t$link = get_bookmark( $id );\n\tif ( !$link || is_wp_error( $link ) )\n\t\twp_die( 1 );\n\n\tif ( wp_delete_link( $id ) )\n\t\twp_die( 1 );\n\telse\n\t\twp_die( 0 );\n}\n\n/**\n * Ajax handler for deleting meta.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_delete_meta() {\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tcheck_ajax_referer( \"delete-meta_$id\" );\n\tif ( !$meta = get_metadata_by_mid( 'post', $id ) )\n\t\twp_die( 1 );\n\n\tif ( is_protected_meta( $meta->meta_key, 'post' ) || ! current_user_can( 'delete_post_meta',  $meta->post_id, $meta->meta_key ) )\n\t\twp_die( -1 );\n\tif ( delete_meta( $meta->meta_id ) )\n\t\twp_die( 1 );\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for deleting a post.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_delete_post( $action ) {\n\tif ( empty( $action ) )\n\t\t$action = 'delete-post';\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tcheck_ajax_referer( \"{$action}_$id\" );\n\tif ( !current_user_can( 'delete_post', $id ) )\n\t\twp_die( -1 );\n\n\tif ( !get_post( $id ) )\n\t\twp_die( 1 );\n\n\tif ( wp_delete_post( $id ) )\n\t\twp_die( 1 );\n\telse\n\t\twp_die( 0 );\n}\n\n/**\n * Ajax handler for sending a post to the trash.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_trash_post( $action ) {\n\tif ( empty( $action ) )\n\t\t$action = 'trash-post';\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tcheck_ajax_referer( \"{$action}_$id\" );\n\tif ( !current_user_can( 'delete_post', $id ) )\n\t\twp_die( -1 );\n\n\tif ( !get_post( $id ) )\n\t\twp_die( 1 );\n\n\tif ( 'trash-post' == $action )\n\t\t$done = wp_trash_post( $id );\n\telse\n\t\t$done = wp_untrash_post( $id );\n\n\tif ( $done )\n\t\twp_die( 1 );\n\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler to restore a post from the trash.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_untrash_post( $action ) {\n\tif ( empty( $action ) )\n\t\t$action = 'untrash-post';\n\twp_ajax_trash_post( $action );\n}\n\n/**\n * @since 3.1.0\n *\n * @param string $action\n */\nfunction wp_ajax_delete_page( $action ) {\n\tif ( empty( $action ) )\n\t\t$action = 'delete-page';\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tcheck_ajax_referer( \"{$action}_$id\" );\n\tif ( !current_user_can( 'delete_page', $id ) )\n\t\twp_die( -1 );\n\n\tif ( ! get_post( $id ) )\n\t\twp_die( 1 );\n\n\tif ( wp_delete_post( $id ) )\n\t\twp_die( 1 );\n\telse\n\t\twp_die( 0 );\n}\n\n/**\n * Ajax handler to dim a comment.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_dim_comment() {\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tif ( !$comment = get_comment( $id ) ) {\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'comment',\n\t\t\t'id' => new WP_Error('invalid_comment', sprintf(__('Comment %d does not exist'), $id))\n\t\t) );\n\t\t$x->send();\n\t}\n\n\tif ( ! current_user_can( 'edit_comment', $comment->comment_ID ) && ! current_user_can( 'moderate_comments' ) )\n\t\twp_die( -1 );\n\n\t$current = wp_get_comment_status( $comment );\n\tif ( isset( $_POST['new'] ) && $_POST['new'] == $current )\n\t\twp_die( time() );\n\n\tcheck_ajax_referer( \"approve-comment_$id\" );\n\tif ( in_array( $current, array( 'unapproved', 'spam' ) ) ) {\n\t\t$result = wp_set_comment_status( $comment, 'approve', true );\n\t} else {\n\t\t$result = wp_set_comment_status( $comment, 'hold', true );\n\t}\n\n\tif ( is_wp_error($result) ) {\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'comment',\n\t\t\t'id' => $result\n\t\t) );\n\t\t$x->send();\n\t}\n\n\t// Decide if we need to send back '1' or a more complicated response including page links and comment counts\n\t_wp_ajax_delete_comment_response( $comment->comment_ID );\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for deleting a link category.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_add_link_category( $action ) {\n\tif ( empty( $action ) )\n\t\t$action = 'add-link-category';\n\tcheck_ajax_referer( $action );\n\tif ( !current_user_can( 'manage_categories' ) )\n\t\twp_die( -1 );\n\t$names = explode(',', wp_unslash( $_POST['newcat'] ) );\n\t$x = new WP_Ajax_Response();\n\tforeach ( $names as $cat_name ) {\n\t\t$cat_name = trim($cat_name);\n\t\t$slug = sanitize_title($cat_name);\n\t\tif ( '' === $slug )\n\t\t\tcontinue;\n\t\tif ( !$cat_id = term_exists( $cat_name, 'link_category' ) )\n\t\t\t$cat_id = wp_insert_term( $cat_name, 'link_category' );\n\t\tif ( is_wp_error( $cat_id ) ) {\n\t\t\tcontinue;\n\t\t} elseif ( is_array( $cat_id ) ) {\n\t\t\t$cat_id = $cat_id['term_id'];\n\t\t}\n\t\t$cat_name = esc_html( $cat_name );\n\t\t$x->add( array(\n\t\t\t'what' => 'link-category',\n\t\t\t'id' => $cat_id,\n\t\t\t'data' => \"<li id='link-category-$cat_id'><label for='in-link-category-$cat_id' class='selectit'><input value='\" . esc_attr($cat_id) . \"' type='checkbox' checked='checked' name='link_category[]' id='in-link-category-$cat_id'/> $cat_name</label></li>\",\n\t\t\t'position' => -1\n\t\t) );\n\t}\n\t$x->send();\n}\n\n/**\n * Ajax handler to add a tag.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n */\nfunction wp_ajax_add_tag() {\n\tglobal $wp_list_table;\n\n\tcheck_ajax_referer( 'add-tag', '_wpnonce_add-tag' );\n\t$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';\n\t$tax = get_taxonomy($taxonomy);\n\n\tif ( !current_user_can( $tax->cap->edit_terms ) )\n\t\twp_die( -1 );\n\n\t$x = new WP_Ajax_Response();\n\n\t$tag = wp_insert_term($_POST['tag-name'], $taxonomy, $_POST );\n\n\tif ( !$tag || is_wp_error($tag) || (!$tag = get_term( $tag['term_id'], $taxonomy )) ) {\n\t\t$message = __('An error has occurred. Please reload the page and try again.');\n\t\tif ( is_wp_error($tag) && $tag->get_error_message() )\n\t\t\t$message = $tag->get_error_message();\n\n\t\t$x->add( array(\n\t\t\t'what' => 'taxonomy',\n\t\t\t'data' => new WP_Error('error', $message )\n\t\t) );\n\t\t$x->send();\n\t}\n\n\t$wp_list_table = _get_list_table( 'WP_Terms_List_Table', array( 'screen' => $_POST['screen'] ) );\n\n\t$level = 0;\n\tif ( is_taxonomy_hierarchical($taxonomy) ) {\n\t\t$level = count( get_ancestors( $tag->term_id, $taxonomy, 'taxonomy' ) );\n\t\tob_start();\n\t\t$wp_list_table->single_row( $tag, $level );\n\t\t$noparents = ob_get_clean();\n\t}\n\n\tob_start();\n\t$wp_list_table->single_row( $tag );\n\t$parents = ob_get_clean();\n\n\t$x->add( array(\n\t\t'what' => 'taxonomy',\n\t\t'supplemental' => compact('parents', 'noparents')\n\t) );\n\t$x->add( array(\n\t\t'what' => 'term',\n\t\t'position' => $level,\n\t\t'supplemental' => (array) $tag\n\t) );\n\t$x->send();\n}\n\n/**\n * Ajax handler for getting a tagcloud.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_get_tagcloud() {\n\tif ( ! isset( $_POST['tax'] ) ) {\n\t\twp_die( 0 );\n\t}\n\n\t$taxonomy = sanitize_key( $_POST['tax'] );\n\t$tax = get_taxonomy( $taxonomy );\n\tif ( ! $tax ) {\n\t\twp_die( 0 );\n\t}\n\n\tif ( ! current_user_can( $tax->cap->assign_terms ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$tags = get_terms( $taxonomy, array( 'number' => 45, 'orderby' => 'count', 'order' => 'DESC' ) );\n\n\tif ( empty( $tags ) )\n\t\twp_die( $tax->labels->not_found );\n\n\tif ( is_wp_error( $tags ) )\n\t\twp_die( $tags->get_error_message() );\n\n\tforeach ( $tags as $key => $tag ) {\n\t\t$tags[ $key ]->link = '#';\n\t\t$tags[ $key ]->id = $tag->term_id;\n\t}\n\n\t// We need raw tag names here, so don't filter the output\n\t$return = wp_generate_tag_cloud( $tags, array('filter' => 0) );\n\n\tif ( empty($return) )\n\t\twp_die( 0 );\n\n\techo $return;\n\n\twp_die();\n}\n\n/**\n * Ajax handler for getting comments.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n * @global int           $post_id\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_get_comments( $action ) {\n\tglobal $wp_list_table, $post_id;\n\tif ( empty( $action ) )\n\t\t$action = 'get-comments';\n\n\tcheck_ajax_referer( $action );\n\n\tif ( empty( $post_id ) && ! empty( $_REQUEST['p'] ) ) {\n\t\t$id = absint( $_REQUEST['p'] );\n\t\tif ( ! empty( $id ) )\n\t\t\t$post_id = $id;\n\t}\n\n\tif ( empty( $post_id ) )\n\t\twp_die( -1 );\n\n\t$wp_list_table = _get_list_table( 'WP_Post_Comments_List_Table', array( 'screen' => 'edit-comments' ) );\n\n\tif ( ! current_user_can( 'edit_post', $post_id ) )\n\t\twp_die( -1 );\n\n\t$wp_list_table->prepare_items();\n\n\tif ( !$wp_list_table->has_items() )\n\t\twp_die( 1 );\n\n\t$x = new WP_Ajax_Response();\n\tob_start();\n\tforeach ( $wp_list_table->items as $comment ) {\n\t\tif ( ! current_user_can( 'edit_comment', $comment->comment_ID ) )\n\t\t\tcontinue;\n\t\tget_comment( $comment );\n\t\t$wp_list_table->single_row( $comment );\n\t}\n\t$comment_list_item = ob_get_clean();\n\n\t$x->add( array(\n\t\t'what' => 'comments',\n\t\t'data' => $comment_list_item\n\t) );\n\t$x->send();\n}\n\n/**\n * Ajax handler for replying to a comment.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_replyto_comment( $action ) {\n\tglobal $wp_list_table;\n\tif ( empty( $action ) )\n\t\t$action = 'replyto-comment';\n\n\tcheck_ajax_referer( $action, '_ajax_nonce-replyto-comment' );\n\n\t$comment_post_ID = (int) $_POST['comment_post_ID'];\n\t$post = get_post( $comment_post_ID );\n\tif ( ! $post )\n\t\twp_die( -1 );\n\n\tif ( !current_user_can( 'edit_post', $comment_post_ID ) )\n\t\twp_die( -1 );\n\n\tif ( empty( $post->post_status ) )\n\t\twp_die( 1 );\n\telseif ( in_array($post->post_status, array('draft', 'pending', 'trash') ) )\n\t\twp_die( __('ERROR: you are replying to a comment on a draft post.') );\n\n\t$user = wp_get_current_user();\n\tif ( $user->exists() ) {\n\t\t$user_ID = $user->ID;\n\t\t$comment_author       = wp_slash( $user->display_name );\n\t\t$comment_author_email = wp_slash( $user->user_email );\n\t\t$comment_author_url   = wp_slash( $user->user_url );\n\t\t$comment_content      = trim( $_POST['content'] );\n\t\t$comment_type         = isset( $_POST['comment_type'] ) ? trim( $_POST['comment_type'] ) : '';\n\t\tif ( current_user_can( 'unfiltered_html' ) ) {\n\t\t\tif ( ! isset( $_POST['_wp_unfiltered_html_comment'] ) )\n\t\t\t\t$_POST['_wp_unfiltered_html_comment'] = '';\n\n\t\t\tif ( wp_create_nonce( 'unfiltered-html-comment' ) != $_POST['_wp_unfiltered_html_comment'] ) {\n\t\t\t\tkses_remove_filters(); // start with a clean slate\n\t\t\t\tkses_init_filters(); // set up the filters\n\t\t\t}\n\t\t}\n\t} else {\n\t\twp_die( __( 'Sorry, you must be logged in to reply to a comment.' ) );\n\t}\n\n\tif ( '' == $comment_content )\n\t\twp_die( __( 'ERROR: please type a comment.' ) );\n\n\t$comment_parent = 0;\n\tif ( isset( $_POST['comment_ID'] ) )\n\t\t$comment_parent = absint( $_POST['comment_ID'] );\n\t$comment_auto_approved = false;\n\t$commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_content', 'comment_type', 'comment_parent', 'user_ID');\n\n\t// Automatically approve parent comment.\n\tif ( !empty($_POST['approve_parent']) ) {\n\t\t$parent = get_comment( $comment_parent );\n\n\t\tif ( $parent && $parent->comment_approved === '0' && $parent->comment_post_ID == $comment_post_ID ) {\n\t\t\tif ( ! current_user_can( 'edit_comment', $parent->comment_ID ) ) {\n\t\t\t\twp_die( -1 );\n\t\t\t}\n\n\t\t\tif ( wp_set_comment_status( $parent, 'approve' ) )\n\t\t\t\t$comment_auto_approved = true;\n\t\t}\n\t}\n\n\t$comment_id = wp_new_comment( $commentdata );\n\t$comment = get_comment($comment_id);\n\tif ( ! $comment ) wp_die( 1 );\n\n\t$position = ( isset($_POST['position']) && (int) $_POST['position'] ) ? (int) $_POST['position'] : '-1';\n\n\tob_start();\n\tif ( isset( $_REQUEST['mode'] ) && 'dashboard' == $_REQUEST['mode'] ) {\n\t\trequire_once( ABSPATH . 'wp-admin/includes/dashboard.php' );\n\t\t_wp_dashboard_recent_comments_row( $comment );\n\t} else {\n\t\tif ( isset( $_REQUEST['mode'] ) && 'single' == $_REQUEST['mode'] ) {\n\t\t\t$wp_list_table = _get_list_table('WP_Post_Comments_List_Table', array( 'screen' => 'edit-comments' ) );\n\t\t} else {\n\t\t\t$wp_list_table = _get_list_table('WP_Comments_List_Table', array( 'screen' => 'edit-comments' ) );\n\t\t}\n\t\t$wp_list_table->single_row( $comment );\n\t}\n\t$comment_list_item = ob_get_clean();\n\n\t$response =  array(\n\t\t'what' => 'comment',\n\t\t'id' => $comment->comment_ID,\n\t\t'data' => $comment_list_item,\n\t\t'position' => $position\n\t);\n\n\t$counts = wp_count_comments();\n\t$response['supplemental'] = array(\n\t\t'in_moderation' => $counts->moderated,\n\t\t'i18n_comments_text' => sprintf(\n\t\t\t_n( '%s Comment', '%s Comments', $counts->approved ),\n\t\t\tnumber_format_i18n( $counts->approved )\n\t\t),\n\t\t'i18n_moderation_text' => sprintf(\n\t\t\t_nx( '%s in moderation', '%s in moderation', $counts->moderated, 'comments' ),\n\t\t\tnumber_format_i18n( $counts->moderated )\n\t\t)\n\t);\n\n\tif ( $comment_auto_approved ) {\n\t\t$response['supplemental']['parent_approved'] = $parent->comment_ID;\n\t\t$response['supplemental']['parent_post_id'] = $parent->comment_post_ID;\n\t}\n\n\t$x = new WP_Ajax_Response();\n\t$x->add( $response );\n\t$x->send();\n}\n\n/**\n * Ajax handler for editing a comment.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n */\nfunction wp_ajax_edit_comment() {\n\tglobal $wp_list_table;\n\n\tcheck_ajax_referer( 'replyto-comment', '_ajax_nonce-replyto-comment' );\n\n\t$comment_id = (int) $_POST['comment_ID'];\n\tif ( ! current_user_can( 'edit_comment', $comment_id ) )\n\t\twp_die( -1 );\n\n\tif ( '' == $_POST['content'] )\n\t\twp_die( __( 'ERROR: please type a comment.' ) );\n\n\tif ( isset( $_POST['status'] ) )\n\t\t$_POST['comment_status'] = $_POST['status'];\n\tedit_comment();\n\n\t$position = ( isset($_POST['position']) && (int) $_POST['position']) ? (int) $_POST['position'] : '-1';\n\t$checkbox = ( isset($_POST['checkbox']) && true == $_POST['checkbox'] ) ? 1 : 0;\n\t$wp_list_table = _get_list_table( $checkbox ? 'WP_Comments_List_Table' : 'WP_Post_Comments_List_Table', array( 'screen' => 'edit-comments' ) );\n\n\t$comment = get_comment( $comment_id );\n\tif ( empty( $comment->comment_ID ) )\n\t\twp_die( -1 );\n\n\tob_start();\n\t$wp_list_table->single_row( $comment );\n\t$comment_list_item = ob_get_clean();\n\n\t$x = new WP_Ajax_Response();\n\n\t$x->add( array(\n\t\t'what' => 'edit_comment',\n\t\t'id' => $comment->comment_ID,\n\t\t'data' => $comment_list_item,\n\t\t'position' => $position\n\t));\n\n\t$x->send();\n}\n\n/**\n * Ajax handler for adding a menu item.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_add_menu_item() {\n\tcheck_ajax_referer( 'add-menu_item', 'menu-settings-column-nonce' );\n\n\tif ( ! current_user_can( 'edit_theme_options' ) )\n\t\twp_die( -1 );\n\n\trequire_once ABSPATH . 'wp-admin/includes/nav-menu.php';\n\n\t// For performance reasons, we omit some object properties from the checklist.\n\t// The following is a hacky way to restore them when adding non-custom items.\n\n\t$menu_items_data = array();\n\tforeach ( (array) $_POST['menu-item'] as $menu_item_data ) {\n\t\tif (\n\t\t\t! empty( $menu_item_data['menu-item-type'] ) &&\n\t\t\t'custom' != $menu_item_data['menu-item-type'] &&\n\t\t\t! empty( $menu_item_data['menu-item-object-id'] )\n\t\t) {\n\t\t\tswitch( $menu_item_data['menu-item-type'] ) {\n\t\t\t\tcase 'post_type' :\n\t\t\t\t\t$_object = get_post( $menu_item_data['menu-item-object-id'] );\n\t\t\t\tbreak;\n\n\t\t\t\tcase 'post_type_archive' :\n\t\t\t\t\t$_object = get_post_type_object( $menu_item_data['menu-item-object'] );\n\t\t\t\tbreak;\n\n\t\t\t\tcase 'taxonomy' :\n\t\t\t\t\t$_object = get_term( $menu_item_data['menu-item-object-id'], $menu_item_data['menu-item-object'] );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$_menu_items = array_map( 'wp_setup_nav_menu_item', array( $_object ) );\n\t\t\t$_menu_item = reset( $_menu_items );\n\n\t\t\t// Restore the missing menu item properties\n\t\t\t$menu_item_data['menu-item-description'] = $_menu_item->description;\n\t\t}\n\n\t\t$menu_items_data[] = $menu_item_data;\n\t}\n\n\t$item_ids = wp_save_nav_menu_items( 0, $menu_items_data );\n\tif ( is_wp_error( $item_ids ) )\n\t\twp_die( 0 );\n\n\t$menu_items = array();\n\n\tforeach ( (array) $item_ids as $menu_item_id ) {\n\t\t$menu_obj = get_post( $menu_item_id );\n\t\tif ( ! empty( $menu_obj->ID ) ) {\n\t\t\t$menu_obj = wp_setup_nav_menu_item( $menu_obj );\n\t\t\t$menu_obj->label = $menu_obj->title; // don't show \"(pending)\" in ajax-added items\n\t\t\t$menu_items[] = $menu_obj;\n\t\t}\n\t}\n\n\t/** This filter is documented in wp-admin/includes/nav-menu.php */\n\t$walker_class_name = apply_filters( 'wp_edit_nav_menu_walker', 'Walker_Nav_Menu_Edit', $_POST['menu'] );\n\n\tif ( ! class_exists( $walker_class_name ) )\n\t\twp_die( 0 );\n\n\tif ( ! empty( $menu_items ) ) {\n\t\t$args = array(\n\t\t\t'after' => '',\n\t\t\t'before' => '',\n\t\t\t'link_after' => '',\n\t\t\t'link_before' => '',\n\t\t\t'walker' => new $walker_class_name,\n\t\t);\n\t\techo walk_nav_menu_tree( $menu_items, 0, (object) $args );\n\t}\n\twp_die();\n}\n\n/**\n * Ajax handler for adding meta.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_add_meta() {\n\tcheck_ajax_referer( 'add-meta', '_ajax_nonce-add-meta' );\n\t$c = 0;\n\t$pid = (int) $_POST['post_id'];\n\t$post = get_post( $pid );\n\n\tif ( isset($_POST['metakeyselect']) || isset($_POST['metakeyinput']) ) {\n\t\tif ( !current_user_can( 'edit_post', $pid ) )\n\t\t\twp_die( -1 );\n\t\tif ( isset($_POST['metakeyselect']) && '#NONE#' == $_POST['metakeyselect'] && empty($_POST['metakeyinput']) )\n\t\t\twp_die( 1 );\n\n\t\t// If the post is an autodraft, save the post as a draft and then attempt to save the meta.\n\t\tif ( $post->post_status == 'auto-draft' ) {\n\t\t\t$post_data = array();\n\t\t\t$post_data['action'] = 'draft'; // Warning fix\n\t\t\t$post_data['post_ID'] = $pid;\n\t\t\t$post_data['post_type'] = $post->post_type;\n\t\t\t$post_data['post_status'] = 'draft';\n\t\t\t$now = current_time('timestamp', 1);\n\t\t\t$post_data['post_title'] = sprintf( __( 'Draft created on %1$s at %2$s' ), date( __( 'F j, Y' ), $now ), date( __( 'g:i a' ), $now ) );\n\n\t\t\t$pid = edit_post( $post_data );\n\t\t\tif ( $pid ) {\n\t\t\t\tif ( is_wp_error( $pid ) ) {\n\t\t\t\t\t$x = new WP_Ajax_Response( array(\n\t\t\t\t\t\t'what' => 'meta',\n\t\t\t\t\t\t'data' => $pid\n\t\t\t\t\t) );\n\t\t\t\t\t$x->send();\n\t\t\t\t}\n\n\t\t\t\tif ( !$mid = add_meta( $pid ) )\n\t\t\t\t\twp_die( __( 'Please provide a custom field value.' ) );\n\t\t\t} else {\n\t\t\t\twp_die( 0 );\n\t\t\t}\n\t\t} elseif ( ! $mid = add_meta( $pid ) ) {\n\t\t\twp_die( __( 'Please provide a custom field value.' ) );\n\t\t}\n\n\t\t$meta = get_metadata_by_mid( 'post', $mid );\n\t\t$pid = (int) $meta->post_id;\n\t\t$meta = get_object_vars( $meta );\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'meta',\n\t\t\t'id' => $mid,\n\t\t\t'data' => _list_meta_row( $meta, $c ),\n\t\t\t'position' => 1,\n\t\t\t'supplemental' => array('postid' => $pid)\n\t\t) );\n\t} else { // Update?\n\t\t$mid = (int) key( $_POST['meta'] );\n\t\t$key = wp_unslash( $_POST['meta'][$mid]['key'] );\n\t\t$value = wp_unslash( $_POST['meta'][$mid]['value'] );\n\t\tif ( '' == trim($key) )\n\t\t\twp_die( __( 'Please provide a custom field name.' ) );\n\t\tif ( '' == trim($value) )\n\t\t\twp_die( __( 'Please provide a custom field value.' ) );\n\t\tif ( ! $meta = get_metadata_by_mid( 'post', $mid ) )\n\t\t\twp_die( 0 ); // if meta doesn't exist\n\t\tif ( is_protected_meta( $meta->meta_key, 'post' ) || is_protected_meta( $key, 'post' ) ||\n\t\t\t! current_user_can( 'edit_post_meta', $meta->post_id, $meta->meta_key ) ||\n\t\t\t! current_user_can( 'edit_post_meta', $meta->post_id, $key ) )\n\t\t\twp_die( -1 );\n\t\tif ( $meta->meta_value != $value || $meta->meta_key != $key ) {\n\t\t\tif ( !$u = update_metadata_by_mid( 'post', $mid, $value, $key ) )\n\t\t\t\twp_die( 0 ); // We know meta exists; we also know it's unchanged (or DB error, in which case there are bigger problems).\n\t\t}\n\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'meta',\n\t\t\t'id' => $mid, 'old_id' => $mid,\n\t\t\t'data' => _list_meta_row( array(\n\t\t\t\t'meta_key' => $key,\n\t\t\t\t'meta_value' => $value,\n\t\t\t\t'meta_id' => $mid\n\t\t\t), $c ),\n\t\t\t'position' => 0,\n\t\t\t'supplemental' => array('postid' => $meta->post_id)\n\t\t) );\n\t}\n\t$x->send();\n}\n\n/**\n * Ajax handler for adding a user.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_add_user( $action ) {\n\tglobal $wp_list_table;\n\tif ( empty( $action ) )\n\t\t$action = 'add-user';\n\n\tcheck_ajax_referer( $action );\n\tif ( ! current_user_can('create_users') )\n\t\twp_die( -1 );\n\tif ( ! $user_id = edit_user() ) {\n\t\twp_die( 0 );\n\t} elseif ( is_wp_error( $user_id ) ) {\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'user',\n\t\t\t'id' => $user_id\n\t\t) );\n\t\t$x->send();\n\t}\n\t$user_object = get_userdata( $user_id );\n\n\t$wp_list_table = _get_list_table('WP_Users_List_Table');\n\n\t$role = current( $user_object->roles );\n\n\t$x = new WP_Ajax_Response( array(\n\t\t'what' => 'user',\n\t\t'id' => $user_id,\n\t\t'data' => $wp_list_table->single_row( $user_object, '', $role ),\n\t\t'supplemental' => array(\n\t\t\t'show-link' => sprintf(\n\t\t\t\t/* translators: %s: the new user */\n\t\t\t\t__( 'User %s added' ),\n\t\t\t\t'<a href=\"#user-' . $user_id . '\">' . $user_object->user_login . '</a>'\n\t\t\t),\n\t\t\t'role' => $role,\n\t\t)\n\t) );\n\t$x->send();\n}\n\n/**\n * Ajax handler for closed post boxes.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_closed_postboxes() {\n\tcheck_ajax_referer( 'closedpostboxes', 'closedpostboxesnonce' );\n\t$closed = isset( $_POST['closed'] ) ? explode( ',', $_POST['closed']) : array();\n\t$closed = array_filter($closed);\n\n\t$hidden = isset( $_POST['hidden'] ) ? explode( ',', $_POST['hidden']) : array();\n\t$hidden = array_filter($hidden);\n\n\t$page = isset( $_POST['page'] ) ? $_POST['page'] : '';\n\n\tif ( $page != sanitize_key( $page ) )\n\t\twp_die( 0 );\n\n\tif ( ! $user = wp_get_current_user() )\n\t\twp_die( -1 );\n\n\tif ( is_array($closed) )\n\t\tupdate_user_option($user->ID, \"closedpostboxes_$page\", $closed, true);\n\n\tif ( is_array($hidden) ) {\n\t\t$hidden = array_diff( $hidden, array('submitdiv', 'linksubmitdiv', 'manage-menu', 'create-menu') ); // postboxes that are always shown\n\t\tupdate_user_option($user->ID, \"metaboxhidden_$page\", $hidden, true);\n\t}\n\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for hidden columns.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_hidden_columns() {\n\tcheck_ajax_referer( 'screen-options-nonce', 'screenoptionnonce' );\n\t$page = isset( $_POST['page'] ) ? $_POST['page'] : '';\n\n\tif ( $page != sanitize_key( $page ) )\n\t\twp_die( 0 );\n\n\tif ( ! $user = wp_get_current_user() )\n\t\twp_die( -1 );\n\n\t$hidden = ! empty( $_POST['hidden'] ) ? explode( ',', $_POST['hidden'] ) : array();\n\tupdate_user_option( $user->ID, \"manage{$page}columnshidden\", $hidden, true );\n\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for updating whether to display the welcome panel.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_update_welcome_panel() {\n\tcheck_ajax_referer( 'welcome-panel-nonce', 'welcomepanelnonce' );\n\n\tif ( ! current_user_can( 'edit_theme_options' ) )\n\t\twp_die( -1 );\n\n\tupdate_user_meta( get_current_user_id(), 'show_welcome_panel', empty( $_POST['visible'] ) ? 0 : 1 );\n\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for retrieving menu meta boxes.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_menu_get_metabox() {\n\tif ( ! current_user_can( 'edit_theme_options' ) )\n\t\twp_die( -1 );\n\n\trequire_once ABSPATH . 'wp-admin/includes/nav-menu.php';\n\n\tif ( isset( $_POST['item-type'] ) && 'post_type' == $_POST['item-type'] ) {\n\t\t$type = 'posttype';\n\t\t$callback = 'wp_nav_menu_item_post_type_meta_box';\n\t\t$items = (array) get_post_types( array( 'show_in_nav_menus' => true ), 'object' );\n\t} elseif ( isset( $_POST['item-type'] ) && 'taxonomy' == $_POST['item-type'] ) {\n\t\t$type = 'taxonomy';\n\t\t$callback = 'wp_nav_menu_item_taxonomy_meta_box';\n\t\t$items = (array) get_taxonomies( array( 'show_ui' => true ), 'object' );\n\t}\n\n\tif ( ! empty( $_POST['item-object'] ) && isset( $items[$_POST['item-object']] ) ) {\n\t\t$menus_meta_box_object = $items[ $_POST['item-object'] ];\n\n\t\t/** This filter is documented in wp-admin/includes/nav-menu.php */\n\t\t$item = apply_filters( 'nav_menu_meta_box_object', $menus_meta_box_object );\n\t\tob_start();\n\t\tcall_user_func_array($callback, array(\n\t\t\tnull,\n\t\t\tarray(\n\t\t\t\t'id' => 'add-' . $item->name,\n\t\t\t\t'title' => $item->labels->name,\n\t\t\t\t'callback' => $callback,\n\t\t\t\t'args' => $item,\n\t\t\t)\n\t\t));\n\n\t\t$markup = ob_get_clean();\n\n\t\techo wp_json_encode(array(\n\t\t\t'replace-id' => $type . '-' . $item->name,\n\t\t\t'markup' => $markup,\n\t\t));\n\t}\n\n\twp_die();\n}\n\n/**\n * Ajax handler for internal linking.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_wp_link_ajax() {\n\tcheck_ajax_referer( 'internal-linking', '_ajax_linking_nonce' );\n\n\t$args = array();\n\n\tif ( isset( $_POST['search'] ) ) {\n\t\t$args['s'] = wp_unslash( $_POST['search'] );\n\t}\n\n\tif ( isset( $_POST['term'] ) ) {\n\t\t$args['s'] = wp_unslash( $_POST['term'] );\n\t}\n\n\t$args['pagenum'] = ! empty( $_POST['page'] ) ? absint( $_POST['page'] ) : 1;\n\n\trequire(ABSPATH . WPINC . '/class-wp-editor.php');\n\t$results = _WP_Editors::wp_link_query( $args );\n\n\tif ( ! isset( $results ) )\n\t\twp_die( 0 );\n\n\techo wp_json_encode( $results );\n\techo \"\\n\";\n\n\twp_die();\n}\n\n/**\n * Ajax handler for menu locations save.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_menu_locations_save() {\n\tif ( ! current_user_can( 'edit_theme_options' ) )\n\t\twp_die( -1 );\n\tcheck_ajax_referer( 'add-menu_item', 'menu-settings-column-nonce' );\n\tif ( ! isset( $_POST['menu-locations'] ) )\n\t\twp_die( 0 );\n\tset_theme_mod( 'nav_menu_locations', array_map( 'absint', $_POST['menu-locations'] ) );\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for saving the meta box order.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_meta_box_order() {\n\tcheck_ajax_referer( 'meta-box-order' );\n\t$order = isset( $_POST['order'] ) ? (array) $_POST['order'] : false;\n\t$page_columns = isset( $_POST['page_columns'] ) ? $_POST['page_columns'] : 'auto';\n\n\tif ( $page_columns != 'auto' )\n\t\t$page_columns = (int) $page_columns;\n\n\t$page = isset( $_POST['page'] ) ? $_POST['page'] : '';\n\n\tif ( $page != sanitize_key( $page ) )\n\t\twp_die( 0 );\n\n\tif ( ! $user = wp_get_current_user() )\n\t\twp_die( -1 );\n\n\tif ( $order )\n\t\tupdate_user_option($user->ID, \"meta-box-order_$page\", $order, true);\n\n\tif ( $page_columns )\n\t\tupdate_user_option($user->ID, \"screen_layout_$page\", $page_columns, true);\n\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for menu quick searching.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_menu_quick_search() {\n\tif ( ! current_user_can( 'edit_theme_options' ) )\n\t\twp_die( -1 );\n\n\trequire_once ABSPATH . 'wp-admin/includes/nav-menu.php';\n\n\t_wp_ajax_menu_quick_search( $_POST );\n\n\twp_die();\n}\n\n/**\n * Ajax handler to retrieve a permalink.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_get_permalink() {\n\tcheck_ajax_referer( 'getpermalink', 'getpermalinknonce' );\n\t$post_id = isset($_POST['post_id'])? intval($_POST['post_id']) : 0;\n\twp_die( get_preview_post_link( $post_id ) );\n}\n\n/**\n * Ajax handler to retrieve a sample permalink.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_sample_permalink() {\n\tcheck_ajax_referer( 'samplepermalink', 'samplepermalinknonce' );\n\t$post_id = isset($_POST['post_id'])? intval($_POST['post_id']) : 0;\n\t$title = isset($_POST['new_title'])? $_POST['new_title'] : '';\n\t$slug = isset($_POST['new_slug'])? $_POST['new_slug'] : null;\n\twp_die( get_sample_permalink_html( $post_id, $title, $slug ) );\n}\n\n/**\n * Ajax handler for Quick Edit saving a post from a list table.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n */\nfunction wp_ajax_inline_save() {\n\tglobal $wp_list_table, $mode;\n\n\tcheck_ajax_referer( 'inlineeditnonce', '_inline_edit' );\n\n\tif ( ! isset($_POST['post_ID']) || ! ( $post_ID = (int) $_POST['post_ID'] ) )\n\t\twp_die();\n\n\tif ( 'page' == $_POST['post_type'] ) {\n\t\tif ( ! current_user_can( 'edit_page', $post_ID ) )\n\t\t\twp_die( __( 'You are not allowed to edit this page.' ) );\n\t} else {\n\t\tif ( ! current_user_can( 'edit_post', $post_ID ) )\n\t\t\twp_die( __( 'You are not allowed to edit this post.' ) );\n\t}\n\n\tif ( $last = wp_check_post_lock( $post_ID ) ) {\n\t\t$last_user = get_userdata( $last );\n\t\t$last_user_name = $last_user ? $last_user->display_name : __( 'Someone' );\n\t\tprintf( $_POST['post_type'] == 'page' ? __( 'Saving is disabled: %s is currently editing this page.' ) : __( 'Saving is disabled: %s is currently editing this post.' ),\tesc_html( $last_user_name ) );\n\t\twp_die();\n\t}\n\n\t$data = &$_POST;\n\n\t$post = get_post( $post_ID, ARRAY_A );\n\n\t// Since it's coming from the database.\n\t$post = wp_slash($post);\n\n\t$data['content'] = $post['post_content'];\n\t$data['excerpt'] = $post['post_excerpt'];\n\n\t// Rename.\n\t$data['user_ID'] = get_current_user_id();\n\n\tif ( isset($data['post_parent']) )\n\t\t$data['parent_id'] = $data['post_parent'];\n\n\t// Status.\n\tif ( isset( $data['keep_private'] ) && 'private' == $data['keep_private'] ) {\n\t\t$data['visibility']  = 'private';\n\t\t$data['post_status'] = 'private';\n\t} else {\n\t\t$data['post_status'] = $data['_status'];\n\t}\n\n\tif ( empty($data['comment_status']) )\n\t\t$data['comment_status'] = 'closed';\n\tif ( empty($data['ping_status']) )\n\t\t$data['ping_status'] = 'closed';\n\n\t// Exclude terms from taxonomies that are not supposed to appear in Quick Edit.\n\tif ( ! empty( $data['tax_input'] ) ) {\n\t\tforeach ( $data['tax_input'] as $taxonomy => $terms ) {\n\t\t\t$tax_object = get_taxonomy( $taxonomy );\n\t\t\t/** This filter is documented in wp-admin/includes/class-wp-posts-list-table.php */\n\t\t\tif ( ! apply_filters( 'quick_edit_show_taxonomy', $tax_object->show_in_quick_edit, $taxonomy, $post['post_type'] ) ) {\n\t\t\t\tunset( $data['tax_input'][ $taxonomy ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Hack: wp_unique_post_slug() doesn't work for drafts, so we will fake that our post is published.\n\tif ( ! empty( $data['post_name'] ) && in_array( $post['post_status'], array( 'draft', 'pending' ) ) ) {\n\t\t$post['post_status'] = 'publish';\n\t\t$data['post_name'] = wp_unique_post_slug( $data['post_name'], $post['ID'], $post['post_status'], $post['post_type'], $post['post_parent'] );\n\t}\n\n\t// Update the post.\n\tedit_post();\n\n\t$wp_list_table = _get_list_table( 'WP_Posts_List_Table', array( 'screen' => $_POST['screen'] ) );\n\n\t$mode = $_POST['post_view'] === 'excerpt' ? 'excerpt' : 'list';\n\n\t$level = 0;\n\t$request_post = array( get_post( $_POST['post_ID'] ) );\n\t$parent = $request_post[0]->post_parent;\n\n\twhile ( $parent > 0 ) {\n\t\t$parent_post = get_post( $parent );\n\t\t$parent = $parent_post->post_parent;\n\t\t$level++;\n\t}\n\n\t$wp_list_table->display_rows( array( get_post( $_POST['post_ID'] ) ), $level );\n\n\twp_die();\n}\n\n/**\n * Ajax handler for quick edit saving for a term.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n */\nfunction wp_ajax_inline_save_tax() {\n\tglobal $wp_list_table;\n\n\tcheck_ajax_referer( 'taxinlineeditnonce', '_inline_edit' );\n\n\t$taxonomy = sanitize_key( $_POST['taxonomy'] );\n\t$tax = get_taxonomy( $taxonomy );\n\tif ( ! $tax )\n\t\twp_die( 0 );\n\n\tif ( ! current_user_can( $tax->cap->edit_terms ) )\n\t\twp_die( -1 );\n\n\t$wp_list_table = _get_list_table( 'WP_Terms_List_Table', array( 'screen' => 'edit-' . $taxonomy ) );\n\n\tif ( ! isset($_POST['tax_ID']) || ! ( $id = (int) $_POST['tax_ID'] ) )\n\t\twp_die( -1 );\n\n\t$tag = get_term( $id, $taxonomy );\n\t$_POST['description'] = $tag->description;\n\n\t$updated = wp_update_term($id, $taxonomy, $_POST);\n\tif ( $updated && !is_wp_error($updated) ) {\n\t\t$tag = get_term( $updated['term_id'], $taxonomy );\n\t\tif ( !$tag || is_wp_error( $tag ) ) {\n\t\t\tif ( is_wp_error($tag) && $tag->get_error_message() )\n\t\t\t\twp_die( $tag->get_error_message() );\n\t\t\twp_die( __( 'Item not updated.' ) );\n\t\t}\n\t} else {\n\t\tif ( is_wp_error($updated) && $updated->get_error_message() )\n\t\t\twp_die( $updated->get_error_message() );\n\t\twp_die( __( 'Item not updated.' ) );\n\t}\n\t$level = 0;\n\t$parent = $tag->parent;\n\twhile ( $parent > 0 ) {\n\t\t$parent_tag = get_term( $parent, $taxonomy );\n\t\t$parent = $parent_tag->parent;\n\t\t$level++;\n\t}\n\t$wp_list_table->single_row( $tag, $level );\n\twp_die();\n}\n\n/**\n * Ajax handler for querying posts for the Find Posts modal.\n *\n * @see window.findPosts\n *\n * @since 3.1.0\n */\nfunction wp_ajax_find_posts() {\n\tcheck_ajax_referer( 'find-posts' );\n\n\t$post_types = get_post_types( array( 'public' => true ), 'objects' );\n\tunset( $post_types['attachment'] );\n\n\t$s = wp_unslash( $_POST['ps'] );\n\t$args = array(\n\t\t'post_type' => array_keys( $post_types ),\n\t\t'post_status' => 'any',\n\t\t'posts_per_page' => 50,\n\t);\n\tif ( '' !== $s )\n\t\t$args['s'] = $s;\n\n\t$posts = get_posts( $args );\n\n\tif ( ! $posts ) {\n\t\twp_send_json_error( __( 'No items found.' ) );\n\t}\n\n\t$html = '<table class=\"widefat\"><thead><tr><th class=\"found-radio\"><br /></th><th>'.__('Title').'</th><th class=\"no-break\">'.__('Type').'</th><th class=\"no-break\">'.__('Date').'</th><th class=\"no-break\">'.__('Status').'</th></tr></thead><tbody>';\n\t$alt = '';\n\tforeach ( $posts as $post ) {\n\t\t$title = trim( $post->post_title ) ? $post->post_title : __( '(no title)' );\n\t\t$alt = ( 'alternate' == $alt ) ? '' : 'alternate';\n\n\t\tswitch ( $post->post_status ) {\n\t\t\tcase 'publish' :\n\t\t\tcase 'private' :\n\t\t\t\t$stat = __('Published');\n\t\t\t\tbreak;\n\t\t\tcase 'future' :\n\t\t\t\t$stat = __('Scheduled');\n\t\t\t\tbreak;\n\t\t\tcase 'pending' :\n\t\t\t\t$stat = __('Pending Review');\n\t\t\t\tbreak;\n\t\t\tcase 'draft' :\n\t\t\t\t$stat = __('Draft');\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ( '0000-00-00 00:00:00' == $post->post_date ) {\n\t\t\t$time = '';\n\t\t} else {\n\t\t\t/* translators: date format in table columns, see http://php.net/date */\n\t\t\t$time = mysql2date(__('Y/m/d'), $post->post_date);\n\t\t}\n\n\t\t$html .= '<tr class=\"' . trim( 'found-posts ' . $alt ) . '\"><td class=\"found-radio\"><input type=\"radio\" id=\"found-'.$post->ID.'\" name=\"found_post_id\" value=\"' . esc_attr($post->ID) . '\"></td>';\n\t\t$html .= '<td><label for=\"found-'.$post->ID.'\">' . esc_html( $title ) . '</label></td><td class=\"no-break\">' . esc_html( $post_types[$post->post_type]->labels->singular_name ) . '</td><td class=\"no-break\">'.esc_html( $time ) . '</td><td class=\"no-break\">' . esc_html( $stat ). ' </td></tr>' . \"\\n\\n\";\n\t}\n\n\t$html .= '</tbody></table>';\n\n\twp_send_json_success( $html );\n}\n\n/**\n * Ajax handler for saving the widgets order.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_widgets_order() {\n\tcheck_ajax_referer( 'save-sidebar-widgets', 'savewidgets' );\n\n\tif ( !current_user_can('edit_theme_options') )\n\t\twp_die( -1 );\n\n\tunset( $_POST['savewidgets'], $_POST['action'] );\n\n\t// Save widgets order for all sidebars.\n\tif ( is_array($_POST['sidebars']) ) {\n\t\t$sidebars = array();\n\t\tforeach ( $_POST['sidebars'] as $key => $val ) {\n\t\t\t$sb = array();\n\t\t\tif ( !empty($val) ) {\n\t\t\t\t$val = explode(',', $val);\n\t\t\t\tforeach ( $val as $k => $v ) {\n\t\t\t\t\tif ( strpos($v, 'widget-') === false )\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t$sb[$k] = substr($v, strpos($v, '_') + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$sidebars[$key] = $sb;\n\t\t}\n\t\twp_set_sidebars_widgets($sidebars);\n\t\twp_die( 1 );\n\t}\n\n\twp_die( -1 );\n}\n\n/**\n * Ajax handler for saving a widget.\n *\n * @since 3.1.0\n *\n * @global array $wp_registered_widgets\n * @global array $wp_registered_widget_controls\n * @global array $wp_registered_widget_updates\n */\nfunction wp_ajax_save_widget() {\n\tglobal $wp_registered_widgets, $wp_registered_widget_controls, $wp_registered_widget_updates;\n\n\tcheck_ajax_referer( 'save-sidebar-widgets', 'savewidgets' );\n\n\tif ( !current_user_can('edit_theme_options') || !isset($_POST['id_base']) )\n\t\twp_die( -1 );\n\n\tunset( $_POST['savewidgets'], $_POST['action'] );\n\n\t/**\n\t * Fires early when editing the widgets displayed in sidebars.\n\t *\n\t * @since 2.8.0\n\t */\n\tdo_action( 'load-widgets.php' );\n\n\t/**\n\t * Fires early when editing the widgets displayed in sidebars.\n\t *\n\t * @since 2.8.0\n\t */\n\tdo_action( 'widgets.php' );\n\n\t/** This action is documented in wp-admin/widgets.php */\n\tdo_action( 'sidebar_admin_setup' );\n\n\t$id_base = $_POST['id_base'];\n\t$widget_id = $_POST['widget-id'];\n\t$sidebar_id = $_POST['sidebar'];\n\t$multi_number = !empty($_POST['multi_number']) ? (int) $_POST['multi_number'] : 0;\n\t$settings = isset($_POST['widget-' . $id_base]) && is_array($_POST['widget-' . $id_base]) ? $_POST['widget-' . $id_base] : false;\n\t$error = '<p>' . __('An error has occurred. Please reload the page and try again.') . '</p>';\n\n\t$sidebars = wp_get_sidebars_widgets();\n\t$sidebar = isset($sidebars[$sidebar_id]) ? $sidebars[$sidebar_id] : array();\n\n\t// Delete.\n\tif ( isset($_POST['delete_widget']) && $_POST['delete_widget'] ) {\n\n\t\tif ( !isset($wp_registered_widgets[$widget_id]) )\n\t\t\twp_die( $error );\n\n\t\t$sidebar = array_diff( $sidebar, array($widget_id) );\n\t\t$_POST = array('sidebar' => $sidebar_id, 'widget-' . $id_base => array(), 'the-widget-id' => $widget_id, 'delete_widget' => '1');\n\n\t\t/** This action is documented in wp-admin/widgets.php */\n\t\tdo_action( 'delete_widget', $widget_id, $sidebar_id, $id_base );\n\n\t} elseif ( $settings && preg_match( '/__i__|%i%/', key($settings) ) ) {\n\t\tif ( !$multi_number )\n\t\t\twp_die( $error );\n\n\t\t$_POST[ 'widget-' . $id_base ] = array( $multi_number => reset( $settings ) );\n\t\t$widget_id = $id_base . '-' . $multi_number;\n\t\t$sidebar[] = $widget_id;\n\t}\n\t$_POST['widget-id'] = $sidebar;\n\n\tforeach ( (array) $wp_registered_widget_updates as $name => $control ) {\n\n\t\tif ( $name == $id_base ) {\n\t\t\tif ( !is_callable( $control['callback'] ) )\n\t\t\t\tcontinue;\n\n\t\t\tob_start();\n\t\t\t\tcall_user_func_array( $control['callback'], $control['params'] );\n\t\t\tob_end_clean();\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif ( isset($_POST['delete_widget']) && $_POST['delete_widget'] ) {\n\t\t$sidebars[$sidebar_id] = $sidebar;\n\t\twp_set_sidebars_widgets($sidebars);\n\t\techo \"deleted:$widget_id\";\n\t\twp_die();\n\t}\n\n\tif ( !empty($_POST['add_new']) )\n\t\twp_die();\n\n\tif ( $form = $wp_registered_widget_controls[$widget_id] )\n\t\tcall_user_func_array( $form['callback'], $form['params'] );\n\n\twp_die();\n}\n\n/**\n * Ajax handler for saving a widget.\n *\n * @since 3.9.0\n *\n * @global WP_Customize_Manager $wp_customize\n */\nfunction wp_ajax_update_widget() {\n\tglobal $wp_customize;\n\t$wp_customize->widgets->wp_ajax_update_widget();\n}\n\n/**\n * Ajax handler for removing inactive widgets.\n *\n * @since 4.4.0\n */\nfunction wp_ajax_delete_inactive_widgets() {\n\tcheck_ajax_referer( 'remove-inactive-widgets', 'removeinactivewidgets' );\n\n\tif ( ! current_user_can( 'edit_theme_options' ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tunset( $_POST['removeinactivewidgets'], $_POST['action'] );\n\n\tdo_action( 'load-widgets.php' );\n\tdo_action( 'widgets.php' );\n\tdo_action( 'sidebar_admin_setup' );\n\n\t$sidebars_widgets = wp_get_sidebars_widgets();\n\n\tforeach ( $sidebars_widgets['wp_inactive_widgets'] as $key => $widget_id ) {\n\t\t$pieces = explode( '-', $widget_id );\n\t\t$multi_number = array_pop( $pieces );\n\t\t$id_base = implode( '-', $pieces );\n\t\t$widget = get_option( 'widget_' . $id_base );\n\t\tunset( $widget[$multi_number] );\n\t\tupdate_option( 'widget_' . $id_base, $widget );\n\t\tunset( $sidebars_widgets['wp_inactive_widgets'][$key] );\n\t}\n\n\twp_set_sidebars_widgets( $sidebars_widgets );\n\n\twp_die();\n}\n\n/**\n * Ajax handler for uploading attachments\n *\n * @since 3.3.0\n */\nfunction wp_ajax_upload_attachment() {\n\tcheck_ajax_referer( 'media-form' );\n\t/*\n\t * This function does not use wp_send_json_success() / wp_send_json_error()\n\t * as the html4 Plupload handler requires a text/html content-type for older IE.\n\t * See https://core.trac.wordpress.org/ticket/31037\n\t */\n\n\tif ( ! current_user_can( 'upload_files' ) ) {\n\t\techo wp_json_encode( array(\n\t\t\t'success' => false,\n\t\t\t'data'    => array(\n\t\t\t\t'message'  => __( 'You do not have permission to upload files.' ),\n\t\t\t\t'filename' => $_FILES['async-upload']['name'],\n\t\t\t)\n\t\t) );\n\n\t\twp_die();\n\t}\n\n\tif ( isset( $_REQUEST['post_id'] ) ) {\n\t\t$post_id = $_REQUEST['post_id'];\n\t\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\t\techo wp_json_encode( array(\n\t\t\t\t'success' => false,\n\t\t\t\t'data'    => array(\n\t\t\t\t\t'message'  => __( \"You don't have permission to attach files to this post.\" ),\n\t\t\t\t\t'filename' => $_FILES['async-upload']['name'],\n\t\t\t\t)\n\t\t\t) );\n\n\t\t\twp_die();\n\t\t}\n\t} else {\n\t\t$post_id = null;\n\t}\n\n\t$post_data = isset( $_REQUEST['post_data'] ) ? $_REQUEST['post_data'] : array();\n\n\t// If the context is custom header or background, make sure the uploaded file is an image.\n\tif ( isset( $post_data['context'] ) && in_array( $post_data['context'], array( 'custom-header', 'custom-background' ) ) ) {\n\t\t$wp_filetype = wp_check_filetype_and_ext( $_FILES['async-upload']['tmp_name'], $_FILES['async-upload']['name'] );\n\t\tif ( ! wp_match_mime_types( 'image', $wp_filetype['type'] ) ) {\n\t\t\techo wp_json_encode( array(\n\t\t\t\t'success' => false,\n\t\t\t\t'data'    => array(\n\t\t\t\t\t'message'  => __( 'The uploaded file is not a valid image. Please try again.' ),\n\t\t\t\t\t'filename' => $_FILES['async-upload']['name'],\n\t\t\t\t)\n\t\t\t) );\n\n\t\t\twp_die();\n\t\t}\n\t}\n\n\t$attachment_id = media_handle_upload( 'async-upload', $post_id, $post_data );\n\n\tif ( is_wp_error( $attachment_id ) ) {\n\t\techo wp_json_encode( array(\n\t\t\t'success' => false,\n\t\t\t'data'    => array(\n\t\t\t\t'message'  => $attachment_id->get_error_message(),\n\t\t\t\t'filename' => $_FILES['async-upload']['name'],\n\t\t\t)\n\t\t) );\n\n\t\twp_die();\n\t}\n\n\tif ( isset( $post_data['context'] ) && isset( $post_data['theme'] ) ) {\n\t\tif ( 'custom-background' === $post_data['context'] )\n\t\t\tupdate_post_meta( $attachment_id, '_wp_attachment_is_custom_background', $post_data['theme'] );\n\n\t\tif ( 'custom-header' === $post_data['context'] )\n\t\t\tupdate_post_meta( $attachment_id, '_wp_attachment_is_custom_header', $post_data['theme'] );\n\t}\n\n\tif ( ! $attachment = wp_prepare_attachment_for_js( $attachment_id ) )\n\t\twp_die();\n\n\techo wp_json_encode( array(\n\t\t'success' => true,\n\t\t'data'    => $attachment,\n\t) );\n\n\twp_die();\n}\n\n/**\n * Ajax handler for image editing.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_image_editor() {\n\t$attachment_id = intval($_POST['postid']);\n\tif ( empty($attachment_id) || !current_user_can('edit_post', $attachment_id) )\n\t\twp_die( -1 );\n\n\tcheck_ajax_referer( \"image_editor-$attachment_id\" );\n\tinclude_once( ABSPATH . 'wp-admin/includes/image-edit.php' );\n\n\t$msg = false;\n\tswitch ( $_POST['do'] ) {\n\t\tcase 'save' :\n\t\t\t$msg = wp_save_image($attachment_id);\n\t\t\t$msg = wp_json_encode($msg);\n\t\t\twp_die( $msg );\n\t\t\tbreak;\n\t\tcase 'scale' :\n\t\t\t$msg = wp_save_image($attachment_id);\n\t\t\tbreak;\n\t\tcase 'restore' :\n\t\t\t$msg = wp_restore_image($attachment_id);\n\t\t\tbreak;\n\t}\n\n\twp_image_editor($attachment_id, $msg);\n\twp_die();\n}\n\n/**\n * Ajax handler for setting the featured image.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_set_post_thumbnail() {\n\t$json = ! empty( $_REQUEST['json'] ); // New-style request\n\n\t$post_ID = intval( $_POST['post_id'] );\n\tif ( ! current_user_can( 'edit_post', $post_ID ) )\n\t\twp_die( -1 );\n\n\t$thumbnail_id = intval( $_POST['thumbnail_id'] );\n\n\tif ( $json )\n\t\tcheck_ajax_referer( \"update-post_$post_ID\" );\n\telse\n\t\tcheck_ajax_referer( \"set_post_thumbnail-$post_ID\" );\n\n\tif ( $thumbnail_id == '-1' ) {\n\t\tif ( delete_post_thumbnail( $post_ID ) ) {\n\t\t\t$return = _wp_post_thumbnail_html( null, $post_ID );\n\t\t\t$json ? wp_send_json_success( $return ) : wp_die( $return );\n\t\t} else {\n\t\t\twp_die( 0 );\n\t\t}\n\t}\n\n\tif ( set_post_thumbnail( $post_ID, $thumbnail_id ) ) {\n\t\t$return = _wp_post_thumbnail_html( $thumbnail_id, $post_ID );\n\t\t$json ? wp_send_json_success( $return ) : wp_die( $return );\n\t}\n\n\twp_die( 0 );\n}\n\n/**\n * AJAX handler for setting the featured image for an attachment.\n *\n * @since 4.0.0\n *\n * @see set_post_thumbnail()\n */\nfunction wp_ajax_set_attachment_thumbnail() {\n\tif ( empty( $_POST['urls'] ) || ! is_array( $_POST['urls'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$thumbnail_id = (int) $_POST['thumbnail_id'];\n\tif ( empty( $thumbnail_id ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$post_ids = array();\n\t// For each URL, try to find its corresponding post ID.\n\tforeach ( $_POST['urls'] as $url ) {\n\t\t$post_id = attachment_url_to_postid( $url );\n\t\tif ( ! empty( $post_id ) ) {\n\t\t\t$post_ids[] = $post_id;\n\t\t}\n\t}\n\n\tif ( empty( $post_ids ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$success = 0;\n\t// For each found attachment, set its thumbnail.\n\tforeach ( $post_ids as $post_id ) {\n\t\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( set_post_thumbnail( $post_id, $thumbnail_id ) ) {\n\t\t\t$success++;\n\t\t}\n\t}\n\n\tif ( 0 === $success ) {\n\t\twp_send_json_error();\n\t} else {\n\t\twp_send_json_success();\n\t}\n\n\twp_send_json_error();\n}\n\n/**\n * Ajax handler for date formatting.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_date_format() {\n\twp_die( date_i18n( sanitize_option( 'date_format', wp_unslash( $_POST['date'] ) ) ) );\n}\n\n/**\n * Ajax handler for time formatting.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_time_format() {\n\twp_die( date_i18n( sanitize_option( 'time_format', wp_unslash( $_POST['date'] ) ) ) );\n}\n\n/**\n * Ajax handler for saving posts from the fullscreen editor.\n *\n * @since 3.1.0\n * @deprecated 4.3.0\n */\nfunction wp_ajax_wp_fullscreen_save_post() {\n\t$post_id = isset( $_POST['post_ID'] ) ? (int) $_POST['post_ID'] : 0;\n\n\t$post = null;\n\n\tif ( $post_id )\n\t\t$post = get_post( $post_id );\n\n\tcheck_ajax_referer('update-post_' . $post_id, '_wpnonce');\n\n\t$post_id = edit_post();\n\n\tif ( is_wp_error( $post_id ) ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( $post ) {\n\t\t$last_date = mysql2date( __( 'F j, Y' ), $post->post_modified );\n\t\t$last_time = mysql2date( __( 'g:i a' ), $post->post_modified );\n\t} else {\n\t\t$last_date = date_i18n( __( 'F j, Y' ) );\n\t\t$last_time = date_i18n( __( 'g:i a' ) );\n\t}\n\n\tif ( $last_id = get_post_meta( $post_id, '_edit_last', true ) ) {\n\t\t$last_user = get_userdata( $last_id );\n\t\t$last_edited = sprintf( __('Last edited by %1$s on %2$s at %3$s'), esc_html( $last_user->display_name ), $last_date, $last_time );\n\t} else {\n\t\t$last_edited = sprintf( __('Last edited on %1$s at %2$s'), $last_date, $last_time );\n\t}\n\n\twp_send_json_success( array( 'last_edited' => $last_edited ) );\n}\n\n/**\n * Ajax handler for removing a post lock.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_wp_remove_post_lock() {\n\tif ( empty( $_POST['post_ID'] ) || empty( $_POST['active_post_lock'] ) )\n\t\twp_die( 0 );\n\t$post_id = (int) $_POST['post_ID'];\n\tif ( ! $post = get_post( $post_id ) )\n\t\twp_die( 0 );\n\n\tcheck_ajax_referer( 'update-post_' . $post_id );\n\n\tif ( ! current_user_can( 'edit_post', $post_id ) )\n\t\twp_die( -1 );\n\n\t$active_lock = array_map( 'absint', explode( ':', $_POST['active_post_lock'] ) );\n\tif ( $active_lock[1] != get_current_user_id() )\n\t\twp_die( 0 );\n\n\t/**\n\t * Filter the post lock window duration.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param int $interval The interval in seconds the post lock duration\n\t *                      should last, plus 5 seconds. Default 150.\n\t */\n\t$new_lock = ( time() - apply_filters( 'wp_check_post_lock_window', 150 ) + 5 ) . ':' . $active_lock[1];\n\tupdate_post_meta( $post_id, '_edit_lock', $new_lock, implode( ':', $active_lock ) );\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for dismissing a WordPress pointer.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_dismiss_wp_pointer() {\n\t$pointer = $_POST['pointer'];\n\tif ( $pointer != sanitize_key( $pointer ) )\n\t\twp_die( 0 );\n\n//\tcheck_ajax_referer( 'dismiss-pointer_' . $pointer );\n\n\t$dismissed = array_filter( explode( ',', (string) get_user_meta( get_current_user_id(), 'dismissed_wp_pointers', true ) ) );\n\n\tif ( in_array( $pointer, $dismissed ) )\n\t\twp_die( 0 );\n\n\t$dismissed[] = $pointer;\n\t$dismissed = implode( ',', $dismissed );\n\n\tupdate_user_meta( get_current_user_id(), 'dismissed_wp_pointers', $dismissed );\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for getting an attachment.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_get_attachment() {\n\tif ( ! isset( $_REQUEST['id'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! $id = absint( $_REQUEST['id'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! $post = get_post( $id ) )\n\t\twp_send_json_error();\n\n\tif ( 'attachment' != $post->post_type )\n\t\twp_send_json_error();\n\n\tif ( ! current_user_can( 'upload_files' ) )\n\t\twp_send_json_error();\n\n\tif ( ! $attachment = wp_prepare_attachment_for_js( $id ) )\n\t\twp_send_json_error();\n\n\twp_send_json_success( $attachment );\n}\n\n/**\n * Ajax handler for querying attachments.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_query_attachments() {\n\tif ( ! current_user_can( 'upload_files' ) )\n\t\twp_send_json_error();\n\n\t$query = isset( $_REQUEST['query'] ) ? (array) $_REQUEST['query'] : array();\n\t$keys = array(\n\t\t's', 'order', 'orderby', 'posts_per_page', 'paged', 'post_mime_type',\n\t\t'post_parent', 'post__in', 'post__not_in', 'year', 'monthnum'\n\t);\n\tforeach ( get_taxonomies_for_attachments( 'objects' ) as $t ) {\n\t\tif ( $t->query_var && isset( $query[ $t->query_var ] ) ) {\n\t\t\t$keys[] = $t->query_var;\n\t\t}\n\t}\n\n\t$query = array_intersect_key( $query, array_flip( $keys ) );\n\t$query['post_type'] = 'attachment';\n\tif ( MEDIA_TRASH\n\t\t&& ! empty( $_REQUEST['query']['post_status'] )\n\t\t&& 'trash' === $_REQUEST['query']['post_status'] ) {\n\t\t$query['post_status'] = 'trash';\n\t} else {\n\t\t$query['post_status'] = 'inherit';\n\t}\n\n\tif ( current_user_can( get_post_type_object( 'attachment' )->cap->read_private_posts ) )\n\t\t$query['post_status'] .= ',private';\n\n\t/**\n\t * Filter the arguments passed to WP_Query during an AJAX\n\t * call for querying attachments.\n\t *\n\t * @since 3.7.0\n\t *\n\t * @see WP_Query::parse_query()\n\t *\n\t * @param array $query An array of query variables.\n\t */\n\t$query = apply_filters( 'ajax_query_attachments_args', $query );\n\t$query = new WP_Query( $query );\n\n\t$posts = array_map( 'wp_prepare_attachment_for_js', $query->posts );\n\t$posts = array_filter( $posts );\n\n\twp_send_json_success( $posts );\n}\n\n/**\n * Ajax handler for updating attachment attributes.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_save_attachment() {\n\tif ( ! isset( $_REQUEST['id'] ) || ! isset( $_REQUEST['changes'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! $id = absint( $_REQUEST['id'] ) )\n\t\twp_send_json_error();\n\n\tcheck_ajax_referer( 'update-post_' . $id, 'nonce' );\n\n\tif ( ! current_user_can( 'edit_post', $id ) )\n\t\twp_send_json_error();\n\n\t$changes = $_REQUEST['changes'];\n\t$post    = get_post( $id, ARRAY_A );\n\n\tif ( 'attachment' != $post['post_type'] )\n\t\twp_send_json_error();\n\n\tif ( isset( $changes['parent'] ) )\n\t\t$post['post_parent'] = $changes['parent'];\n\n\tif ( isset( $changes['title'] ) )\n\t\t$post['post_title'] = $changes['title'];\n\n\tif ( isset( $changes['caption'] ) )\n\t\t$post['post_excerpt'] = $changes['caption'];\n\n\tif ( isset( $changes['description'] ) )\n\t\t$post['post_content'] = $changes['description'];\n\n\tif ( MEDIA_TRASH && isset( $changes['status'] ) )\n\t\t$post['post_status'] = $changes['status'];\n\n\tif ( isset( $changes['alt'] ) ) {\n\t\t$alt = wp_unslash( $changes['alt'] );\n\t\tif ( $alt != get_post_meta( $id, '_wp_attachment_image_alt', true ) ) {\n\t\t\t$alt = wp_strip_all_tags( $alt, true );\n\t\t\tupdate_post_meta( $id, '_wp_attachment_image_alt', wp_slash( $alt ) );\n\t\t}\n\t}\n\n\tif ( wp_attachment_is( 'audio', $post['ID'] ) ) {\n\t\t$changed = false;\n\t\t$id3data = wp_get_attachment_metadata( $post['ID'] );\n\t\tif ( ! is_array( $id3data ) ) {\n\t\t\t$changed = true;\n\t\t\t$id3data = array();\n\t\t}\n\t\tforeach ( wp_get_attachment_id3_keys( (object) $post, 'edit' ) as $key => $label ) {\n\t\t\tif ( isset( $changes[ $key ] ) ) {\n\t\t\t\t$changed = true;\n\t\t\t\t$id3data[ $key ] = sanitize_text_field( wp_unslash( $changes[ $key ] ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( $changed ) {\n\t\t\twp_update_attachment_metadata( $id, $id3data );\n\t\t}\n\t}\n\n\tif ( MEDIA_TRASH && isset( $changes['status'] ) && 'trash' === $changes['status'] ) {\n\t\twp_delete_post( $id );\n\t} else {\n\t\twp_update_post( $post );\n\t}\n\n\twp_send_json_success();\n}\n\n/**\n * Ajax handler for saving backwards compatible attachment attributes.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_save_attachment_compat() {\n\tif ( ! isset( $_REQUEST['id'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! $id = absint( $_REQUEST['id'] ) )\n\t\twp_send_json_error();\n\n\tif ( empty( $_REQUEST['attachments'] ) || empty( $_REQUEST['attachments'][ $id ] ) )\n\t\twp_send_json_error();\n\t$attachment_data = $_REQUEST['attachments'][ $id ];\n\n\tcheck_ajax_referer( 'update-post_' . $id, 'nonce' );\n\n\tif ( ! current_user_can( 'edit_post', $id ) )\n\t\twp_send_json_error();\n\n\t$post = get_post( $id, ARRAY_A );\n\n\tif ( 'attachment' != $post['post_type'] )\n\t\twp_send_json_error();\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$post = apply_filters( 'attachment_fields_to_save', $post, $attachment_data );\n\n\tif ( isset( $post['errors'] ) ) {\n\t\t$errors = $post['errors']; // @todo return me and display me!\n\t\tunset( $post['errors'] );\n\t}\n\n\twp_update_post( $post );\n\n\tforeach ( get_attachment_taxonomies( $post ) as $taxonomy ) {\n\t\tif ( isset( $attachment_data[ $taxonomy ] ) )\n\t\t\twp_set_object_terms( $id, array_map( 'trim', preg_split( '/,+/', $attachment_data[ $taxonomy ] ) ), $taxonomy, false );\n\t}\n\n\tif ( ! $attachment = wp_prepare_attachment_for_js( $id ) )\n\t\twp_send_json_error();\n\n\twp_send_json_success( $attachment );\n}\n\n/**\n * Ajax handler for saving the attachment order.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_save_attachment_order() {\n\tif ( ! isset( $_REQUEST['post_id'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! $post_id = absint( $_REQUEST['post_id'] ) )\n\t\twp_send_json_error();\n\n\tif ( empty( $_REQUEST['attachments'] ) )\n\t\twp_send_json_error();\n\n\tcheck_ajax_referer( 'update-post_' . $post_id, 'nonce' );\n\n\t$attachments = $_REQUEST['attachments'];\n\n\tif ( ! current_user_can( 'edit_post', $post_id ) )\n\t\twp_send_json_error();\n\n\tforeach ( $attachments as $attachment_id => $menu_order ) {\n\t\tif ( ! current_user_can( 'edit_post', $attachment_id ) )\n\t\t\tcontinue;\n\t\tif ( ! $attachment = get_post( $attachment_id ) )\n\t\t\tcontinue;\n\t\tif ( 'attachment' != $attachment->post_type )\n\t\t\tcontinue;\n\n\t\twp_update_post( array( 'ID' => $attachment_id, 'menu_order' => $menu_order ) );\n\t}\n\n\twp_send_json_success();\n}\n\n/**\n * Ajax handler for sending an attachment to the editor.\n *\n * Generates the HTML to send an attachment to the editor.\n * Backwards compatible with the media_send_to_editor filter\n * and the chain of filters that follow.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_send_attachment_to_editor() {\n\tcheck_ajax_referer( 'media-send-to-editor', 'nonce' );\n\n\t$attachment = wp_unslash( $_POST['attachment'] );\n\n\t$id = intval( $attachment['id'] );\n\n\tif ( ! $post = get_post( $id ) )\n\t\twp_send_json_error();\n\n\tif ( 'attachment' != $post->post_type )\n\t\twp_send_json_error();\n\n\tif ( current_user_can( 'edit_post', $id ) ) {\n\t\t// If this attachment is unattached, attach it. Primarily a back compat thing.\n\t\tif ( 0 == $post->post_parent && $insert_into_post_id = intval( $_POST['post_id'] ) ) {\n\t\t\twp_update_post( array( 'ID' => $id, 'post_parent' => $insert_into_post_id ) );\n\t\t}\n\t}\n\n\t$url = empty( $attachment['url'] ) ? '' : $attachment['url'];\n\t$rel = ( strpos( $url, 'attachment_id') || get_attachment_link( $id ) == $url );\n\n\tremove_filter( 'media_send_to_editor', 'image_media_send_to_editor' );\n\n\tif ( 'image' === substr( $post->post_mime_type, 0, 5 ) ) {\n\t\t$align = isset( $attachment['align'] ) ? $attachment['align'] : 'none';\n\t\t$size = isset( $attachment['image-size'] ) ? $attachment['image-size'] : 'medium';\n\t\t$alt = isset( $attachment['image_alt'] ) ? $attachment['image_alt'] : '';\n\n\t\t// No whitespace-only captions.\n\t\t$caption = isset( $attachment['post_excerpt'] ) ? $attachment['post_excerpt'] : '';\n\t\tif ( '' === trim( $caption ) ) {\n\t\t\t$caption = '';\n\t\t}\n\n\t\t$title = ''; // We no longer insert title tags into <img> tags, as they are redundant.\n\t\t$html = get_image_send_to_editor( $id, $caption, $title, $align, $url, $rel, $size, $alt );\n\t} elseif ( wp_attachment_is( 'video', $post ) || wp_attachment_is( 'audio', $post )  ) {\n\t\t$html = stripslashes_deep( $_POST['html'] );\n\t} else {\n\t\t$html = isset( $attachment['post_title'] ) ? $attachment['post_title'] : '';\n\t\t$rel = $rel ? ' rel=\"attachment wp-att-' . $id . '\"' : ''; // Hard-coded string, $id is already sanitized\n\n\t\tif ( ! empty( $url ) ) {\n\t\t\t$html = '<a href=\"' . esc_url( $url ) . '\"' . $rel . '\">' . $html . '</a>';\n\t\t}\n\t}\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$html = apply_filters( 'media_send_to_editor', $html, $id, $attachment );\n\n\twp_send_json_success( $html );\n}\n\n/**\n * Ajax handler for sending a link to the editor.\n *\n * Generates the HTML to send a non-image embed link to the editor.\n *\n * Backwards compatible with the following filters:\n * - file_send_to_editor_url\n * - audio_send_to_editor_url\n * - video_send_to_editor_url\n *\n * @since 3.5.0\n *\n * @global WP_Post  $post\n * @global WP_Embed $wp_embed\n */\nfunction wp_ajax_send_link_to_editor() {\n\tglobal $post, $wp_embed;\n\n\tcheck_ajax_referer( 'media-send-to-editor', 'nonce' );\n\n\tif ( ! $src = wp_unslash( $_POST['src'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! strpos( $src, '://' ) )\n\t\t$src = 'http://' . $src;\n\n\tif ( ! $src = esc_url_raw( $src ) )\n\t\twp_send_json_error();\n\n\tif ( ! $link_text = trim( wp_unslash( $_POST['link_text'] ) ) )\n\t\t$link_text = wp_basename( $src );\n\n\t$post = get_post( isset( $_POST['post_id'] ) ? $_POST['post_id'] : 0 );\n\n\t// Ping WordPress for an embed.\n\t$check_embed = $wp_embed->run_shortcode( '[embed]'. $src .'[/embed]' );\n\n\t// Fallback that WordPress creates when no oEmbed was found.\n\t$fallback = $wp_embed->maybe_make_link( $src );\n\n\tif ( $check_embed !== $fallback ) {\n\t\t// TinyMCE view for [embed] will parse this\n\t\t$html = '[embed]' . $src . '[/embed]';\n\t} elseif ( $link_text ) {\n\t\t$html = '<a href=\"' . esc_url( $src ) . '\">' . $link_text . '</a>';\n\t} else {\n\t\t$html = '';\n\t}\n\n\t// Figure out what filter to run:\n\t$type = 'file';\n\tif ( ( $ext = preg_replace( '/^.+?\\.([^.]+)$/', '$1', $src ) ) && ( $ext_type = wp_ext2type( $ext ) )\n\t\t&& ( 'audio' == $ext_type || 'video' == $ext_type ) )\n\t\t\t$type = $ext_type;\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$html = apply_filters( $type . '_send_to_editor_url', $html, $src, $link_text );\n\n\twp_send_json_success( $html );\n}\n\n/**\n * Ajax handler for the Heartbeat API.\n *\n * Runs when the user is logged in.\n *\n * @since 3.6.0\n */\nfunction wp_ajax_heartbeat() {\n\tif ( empty( $_POST['_nonce'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$response = $data = array();\n\t$nonce_state = wp_verify_nonce( $_POST['_nonce'], 'heartbeat-nonce' );\n\n\t// screen_id is the same as $current_screen->id and the JS global 'pagenow'.\n\tif ( ! empty( $_POST['screen_id'] ) ) {\n\t\t$screen_id = sanitize_key($_POST['screen_id']);\n\t} else {\n\t\t$screen_id = 'front';\n\t}\n\n\tif ( ! empty( $_POST['data'] ) ) {\n\t\t$data = wp_unslash( (array) $_POST['data'] );\n\t}\n\n\tif ( 1 !== $nonce_state ) {\n\t\t$response = apply_filters( 'wp_refresh_nonces', $response, $data, $screen_id );\n\n\t\tif ( false === $nonce_state ) {\n\t\t\t// User is logged in but nonces have expired.\n\t\t\t$response['nonces_expired'] = true;\n\t\t\twp_send_json( $response );\n\t\t}\n\t}\n\n\tif ( ! empty( $data ) ) {\n\t\t/**\n\t\t * Filter the Heartbeat response received.\n\t\t *\n\t\t * @since 3.6.0\n\t\t *\n\t\t * @param array  $response  The Heartbeat response.\n\t\t * @param array  $data      The $_POST data sent.\n\t\t * @param string $screen_id The screen id.\n\t\t */\n\t\t$response = apply_filters( 'heartbeat_received', $response, $data, $screen_id );\n\t}\n\n\t/**\n\t * Filter the Heartbeat response sent.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param array  $response  The Heartbeat response.\n\t * @param string $screen_id The screen id.\n\t */\n\t$response = apply_filters( 'heartbeat_send', $response, $screen_id );\n\n\t/**\n\t * Fires when Heartbeat ticks in logged-in environments.\n\t *\n\t * Allows the transport to be easily replaced with long-polling.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param array  $response  The Heartbeat response.\n\t * @param string $screen_id The screen id.\n\t */\n\tdo_action( 'heartbeat_tick', $response, $screen_id );\n\n\t// Send the current time according to the server\n\t$response['server_time'] = time();\n\n\twp_send_json( $response );\n}\n\n/**\n * Ajax handler for getting revision diffs.\n *\n * @since 3.6.0\n */\nfunction wp_ajax_get_revision_diffs() {\n\trequire ABSPATH . 'wp-admin/includes/revision.php';\n\n\tif ( ! $post = get_post( (int) $_REQUEST['post_id'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! current_user_can( 'read_post', $post->ID ) )\n\t\twp_send_json_error();\n\n\t// Really just pre-loading the cache here.\n\tif ( ! $revisions = wp_get_post_revisions( $post->ID, array( 'check_enabled' => false ) ) )\n\t\twp_send_json_error();\n\n\t$return = array();\n\t@set_time_limit( 0 );\n\n\tforeach ( $_REQUEST['compare'] as $compare_key ) {\n\t\tlist( $compare_from, $compare_to ) = explode( ':', $compare_key ); // from:to\n\n\t\t$return[] = array(\n\t\t\t'id' => $compare_key,\n\t\t\t'fields' => wp_get_revision_ui_diff( $post, $compare_from, $compare_to ),\n\t\t);\n\t}\n\twp_send_json_success( $return );\n}\n\n/**\n * Ajax handler for auto-saving the selected color scheme for\n * a user's own profile.\n *\n * @since 3.8.0\n *\n * @global array $_wp_admin_css_colors\n */\nfunction wp_ajax_save_user_color_scheme() {\n\tglobal $_wp_admin_css_colors;\n\n\tcheck_ajax_referer( 'save-color-scheme', 'nonce' );\n\n\t$color_scheme = sanitize_key( $_POST['color_scheme'] );\n\n\tif ( ! isset( $_wp_admin_css_colors[ $color_scheme ] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$previous_color_scheme = get_user_meta( get_current_user_id(), 'admin_color', true );\n\tupdate_user_meta( get_current_user_id(), 'admin_color', $color_scheme );\n\n\twp_send_json_success( array(\n\t\t'previousScheme' => 'admin-color-' . $previous_color_scheme,\n\t\t'currentScheme'  => 'admin-color-' . $color_scheme\n\t) );\n}\n\n/**\n * Ajax handler for getting themes from themes_api().\n *\n * @since 3.9.0\n *\n * @global array $themes_allowedtags\n * @global array $theme_field_defaults\n */\nfunction wp_ajax_query_themes() {\n\tglobal $themes_allowedtags, $theme_field_defaults;\n\n\tif ( ! current_user_can( 'install_themes' ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$args = wp_parse_args( wp_unslash( $_REQUEST['request'] ), array(\n\t\t'per_page' => 20,\n\t\t'fields'   => $theme_field_defaults\n\t) );\n\n\tif ( isset( $args['browse'] ) && 'favorites' === $args['browse'] && ! isset( $args['user'] ) ) {\n\t\t$user = get_user_option( 'wporg_favorites' );\n\t\tif ( $user ) {\n\t\t\t$args['user'] = $user;\n\t\t}\n\t}\n\n\t$old_filter = isset( $args['browse'] ) ? $args['browse'] : 'search';\n\n\t/** This filter is documented in wp-admin/includes/class-wp-theme-install-list-table.php */\n\t$args = apply_filters( 'install_themes_table_api_args_' . $old_filter, $args );\n\n\t$api = themes_api( 'query_themes', $args );\n\n\tif ( is_wp_error( $api ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$update_php = network_admin_url( 'update.php?action=install-theme' );\n\tforeach ( $api->themes as &$theme ) {\n\t\t$theme->install_url = add_query_arg( array(\n\t\t\t'theme'    => $theme->slug,\n\t\t\t'_wpnonce' => wp_create_nonce( 'install-theme_' . $theme->slug )\n\t\t), $update_php );\n\n\t\t$theme->name        = wp_kses( $theme->name, $themes_allowedtags );\n\t\t$theme->author      = wp_kses( $theme->author, $themes_allowedtags );\n\t\t$theme->version     = wp_kses( $theme->version, $themes_allowedtags );\n\t\t$theme->description = wp_kses( $theme->description, $themes_allowedtags );\n\t\t$theme->stars       = wp_star_rating( array( 'rating' => $theme->rating, 'type' => 'percent', 'number' => $theme->num_ratings, 'echo' => false ) );\n\t\t$theme->num_ratings = number_format_i18n( $theme->num_ratings );\n\t\t$theme->preview_url = set_url_scheme( $theme->preview_url );\n\t}\n\n\twp_send_json_success( $api );\n}\n\n/**\n * Apply [embed] AJAX handlers to a string.\n *\n * @since 4.0.0\n *\n * @global WP_Post    $post       Global $post.\n * @global WP_Embed   $wp_embed   Embed API instance.\n * @global WP_Scripts $wp_scripts\n */\nfunction wp_ajax_parse_embed() {\n\tglobal $post, $wp_embed;\n\n\tif ( ! $post = get_post( (int) $_POST['post_ID'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( empty( $_POST['shortcode'] ) || ! current_user_can( 'edit_post', $post->ID ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$shortcode = wp_unslash( $_POST['shortcode'] );\n\n\tpreg_match( '/' . get_shortcode_regex() . '/s', $shortcode, $matches );\n\t$atts = shortcode_parse_atts( $matches[3] );\n\tif ( ! empty( $matches[5] ) ) {\n\t\t$url = $matches[5];\n\t} elseif ( ! empty( $atts['src'] ) ) {\n\t\t$url = $atts['src'];\n\t} else {\n\t\t$url = '';\n\t}\n\n\t$parsed = false;\n\tsetup_postdata( $post );\n\n\t$wp_embed->return_false_on_fail = true;\n\n\tif ( is_ssl() && 0 === strpos( $url, 'http://' ) ) {\n\t\t// Admin is ssl and the user pasted non-ssl URL.\n\t\t// Check if the provider supports ssl embeds and use that for the preview.\n\t\t$ssl_shortcode = preg_replace( '%^(\\\\[embed[^\\\\]]*\\\\])http://%i', '$1https://', $shortcode );\n\t\t$parsed = $wp_embed->run_shortcode( $ssl_shortcode );\n\n\t\tif ( ! $parsed ) {\n\t\t\t$no_ssl_support = true;\n\t\t}\n\t}\n\n\tif ( $url && ! $parsed ) {\n\t\t$parsed = $wp_embed->run_shortcode( $shortcode );\n\t}\n\n\tif ( ! $parsed ) {\n\t\twp_send_json_error( array(\n\t\t\t'type' => 'not-embeddable',\n\t\t\t'message' => sprintf( __( '%s failed to embed.' ), '<code>' . esc_html( $url ) . '</code>' ),\n\t\t) );\n\t}\n\n\tif ( has_shortcode( $parsed, 'audio' ) || has_shortcode( $parsed, 'video' ) ) {\n\t\t$styles = '';\n\t\t$mce_styles = wpview_media_sandbox_styles();\n\t\tforeach ( $mce_styles as $style ) {\n\t\t\t$styles .= sprintf( '<link rel=\"stylesheet\" href=\"%s\"/>', $style );\n\t\t}\n\n\t\t$html = do_shortcode( $parsed );\n\n\t\tglobal $wp_scripts;\n\t\tif ( ! empty( $wp_scripts ) ) {\n\t\t\t$wp_scripts->done = array();\n\t\t}\n\t\tob_start();\n\t\twp_print_scripts( 'wp-mediaelement' );\n\t\t$scripts = ob_get_clean();\n\n\t\t$parsed = $styles . $html . $scripts;\n\t}\n\n\n\tif ( ! empty( $no_ssl_support ) || ( is_ssl() && ( preg_match( '%<(iframe|script|embed) [^>]*src=\"http://%', $parsed ) ||\n\t\tpreg_match( '%<link [^>]*href=\"http://%', $parsed ) ) ) ) {\n\t\t// Admin is ssl and the embed is not. Iframes, scripts, and other \"active content\" will be blocked.\n\t\twp_send_json_error( array(\n\t\t\t'type' => 'not-ssl',\n\t\t\t'message' => __( 'This preview is unavailable in the editor.' ),\n\t\t) );\n\t}\n\n\twp_send_json_success( array(\n\t\t'body' => $parsed,\n\t\t'attr' => $wp_embed->last_attr\n\t) );\n}\n\n/**\n * @since 4.0.0\n *\n * @global WP_Post    $post\n * @global WP_Scripts $wp_scripts\n */\nfunction wp_ajax_parse_media_shortcode() {\n\tglobal $post, $wp_scripts;\n\n\tif ( empty( $_POST['shortcode'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$shortcode = wp_unslash( $_POST['shortcode'] );\n\n\tif ( ! empty( $_POST['post_ID'] ) ) {\n\t\t$post = get_post( (int) $_POST['post_ID'] );\n\t}\n\n\t// the embed shortcode requires a post\n\tif ( ! $post || ! current_user_can( 'edit_post', $post->ID ) ) {\n\t\tif ( 'embed' === $shortcode ) {\n\t\t\twp_send_json_error();\n\t\t}\n\t} else {\n\t\tsetup_postdata( $post );\n\t}\n\n\t$parsed = do_shortcode( $shortcode  );\n\n\tif ( empty( $parsed ) ) {\n\t\twp_send_json_error( array(\n\t\t\t'type' => 'no-items',\n\t\t\t'message' => __( 'No items found.' ),\n\t\t) );\n\t}\n\n\t$head = '';\n\t$styles = wpview_media_sandbox_styles();\n\n\tforeach ( $styles as $style ) {\n\t\t$head .= '<link type=\"text/css\" rel=\"stylesheet\" href=\"' . $style . '\">';\n\t}\n\n\tif ( ! empty( $wp_scripts ) ) {\n\t\t$wp_scripts->done = array();\n\t}\n\n\tob_start();\n\n\techo $parsed;\n\n\tif ( 'playlist' === $_REQUEST['type'] ) {\n\t\twp_underscore_playlist_templates();\n\n\t\twp_print_scripts( 'wp-playlist' );\n\t} else {\n\t\twp_print_scripts( array( 'froogaloop', 'wp-mediaelement' ) );\n\t}\n\n\twp_send_json_success( array(\n\t\t'head' => $head,\n\t\t'body' => ob_get_clean()\n\t) );\n}\n\n/**\n * AJAX handler for destroying multiple open sessions for a user.\n *\n * @since 4.1.0\n */\nfunction wp_ajax_destroy_sessions() {\n\t$user = get_userdata( (int) $_POST['user_id'] );\n\tif ( $user ) {\n\t\tif ( ! current_user_can( 'edit_user', $user->ID ) ) {\n\t\t\t$user = false;\n\t\t} elseif ( ! wp_verify_nonce( $_POST['nonce'], 'update-user_' . $user->ID ) ) {\n\t\t\t$user = false;\n\t\t}\n\t}\n\n\tif ( ! $user ) {\n\t\twp_send_json_error( array(\n\t\t\t'message' => __( 'Could not log out user sessions. Please try again.' ),\n\t\t) );\n\t}\n\n\t$sessions = WP_Session_Tokens::get_instance( $user->ID );\n\n\tif ( $user->ID === get_current_user_id() ) {\n\t\t$sessions->destroy_others( wp_get_session_token() );\n\t\t$message = __( 'You are now logged out everywhere else.' );\n\t} else {\n\t\t$sessions->destroy_all();\n\t\t/* translators: 1: User's display name. */\n\t\t$message = sprintf( __( '%s has been logged out.' ), $user->display_name );\n\t}\n\n\twp_send_json_success( array( 'message' => $message ) );\n}\n\n\n/**\n * AJAX handler for updating a plugin.\n *\n * @since 4.2.0\n *\n * @see Plugin_Upgrader\n */\nfunction wp_ajax_update_plugin() {\n\tglobal $wp_filesystem;\n\n\t$plugin = urldecode( $_POST['plugin'] );\n\n\t$status = array(\n\t\t'update'     => 'plugin',\n\t\t'plugin'     => $plugin,\n\t\t'slug'       => sanitize_key( $_POST['slug'] ),\n\t\t'oldVersion' => '',\n\t\t'newVersion' => '',\n\t);\n\n\t$plugin_data = get_plugin_data( WP_PLUGIN_DIR . '/' . $plugin );\n\tif ( $plugin_data['Version'] ) {\n\t\t$status['oldVersion'] = sprintf( __( 'Version %s' ), $plugin_data['Version'] );\n\t}\n\n\tif ( ! current_user_can( 'update_plugins' ) ) {\n\t\t$status['error'] = __( 'You do not have sufficient permissions to update plugins for this site.' );\n \t\twp_send_json_error( $status );\n\t}\n\n\tcheck_ajax_referer( 'updates' );\n\n\tinclude_once( ABSPATH . 'wp-admin/includes/class-wp-upgrader.php' );\n\n\twp_update_plugins();\n\n\t$skin = new Automatic_Upgrader_Skin();\n\t$upgrader = new Plugin_Upgrader( $skin );\n\t$result = $upgrader->bulk_upgrade( array( $plugin ) );\n\n\tif ( is_array( $result ) && empty( $result[$plugin] ) && is_wp_error( $skin->result ) ) {\n\t\t$result = $skin->result;\n\t}\n\n\tif ( is_array( $result ) && !empty( $result[ $plugin ] ) ) {\n\t\t$plugin_update_data = current( $result );\n\n\t\t/*\n\t\t * If the `update_plugins` site transient is empty (e.g. when you update\n\t\t * two plugins in quick succession before the transient repopulates),\n\t\t * this may be the return.\n\t\t *\n\t\t * Preferably something can be done to ensure `update_plugins` isn't empty.\n\t\t * For now, surface some sort of error here.\n\t\t */\n\t\tif ( $plugin_update_data === true ) {\n\t\t\t$status['error'] = __( 'Plugin update failed.' );\n \t\t\twp_send_json_error( $status );\n\t\t}\n\n\t\t$plugin_data = get_plugins( '/' . $result[ $plugin ]['destination_name'] );\n\t\t$plugin_data = reset( $plugin_data );\n\n\t\tif ( $plugin_data['Version'] ) {\n\t\t\t$status['newVersion'] = sprintf( __( 'Version %s' ), $plugin_data['Version'] );\n\t\t}\n\n\t\twp_send_json_success( $status );\n\t} else if ( is_wp_error( $result ) ) {\n\t\t$status['error'] = $result->get_error_message();\n \t\twp_send_json_error( $status );\n\n \t} else if ( is_bool( $result ) && ! $result ) {\n\t\t$status['errorCode'] = 'unable_to_connect_to_filesystem';\n\t\t$status['error'] = __( 'Unable to connect to the filesystem. Please confirm your credentials.' );\n\n\t\t// Pass through the error from WP_Filesystem if one was raised\n\t\tif ( is_wp_error( $wp_filesystem->errors ) && $wp_filesystem->errors->get_error_code() ) {\n\t\t\t$status['error'] = $wp_filesystem->errors->get_error_message();\n\t\t}\n\n\t\twp_send_json_error( $status );\n\n\t} else {\n\t\t// An unhandled error occured\n\t\t$status['error'] = __( 'Plugin update failed.' );\n\t\twp_send_json_error( $status );\n\t}\n}\n\n/**\n * AJAX handler for saving a post from Press This.\n *\n * @since 4.2.0\n *\n * @global WP_Press_This $wp_press_this\n */\nfunction wp_ajax_press_this_save_post() {\n\tif ( empty( $GLOBALS['wp_press_this'] ) ) {\n\t\tinclude( ABSPATH . 'wp-admin/includes/class-wp-press-this.php' );\n\t}\n\n\t$GLOBALS['wp_press_this']->save_post();\n}\n\n/**\n * AJAX handler for creating new category from Press This.\n *\n * @since 4.2.0\n *\n * @global WP_Press_This $wp_press_this\n */\nfunction wp_ajax_press_this_add_category() {\n\tif ( empty( $GLOBALS['wp_press_this'] ) ) {\n\t\tinclude( ABSPATH . 'wp-admin/includes/class-wp-press-this.php' );\n\t}\n\n\t$GLOBALS['wp_press_this']->add_category();\n}\n\n/**\n * AJAX handler for cropping an image.\n *\n * @since 4.3.0\n *\n * @global WP_Site_Icon $wp_site_icon\n */\nfunction wp_ajax_crop_image() {\n\t$attachment_id = absint( $_POST['id'] );\n\n\tcheck_ajax_referer( 'image_editor-' . $attachment_id, 'nonce' );\n\tif ( ! current_user_can( 'customize' ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$context = str_replace( '_', '-', $_POST['context'] );\n\t$data    = array_map( 'absint', $_POST['cropDetails'] );\n\t$cropped = wp_crop_image( $attachment_id, $data['x1'], $data['y1'], $data['width'], $data['height'], $data['dst_width'], $data['dst_height'] );\n\n\tif ( ! $cropped || is_wp_error( $cropped ) ) {\n\t\twp_send_json_error( array( 'message' => __( 'Image could not be processed.' ) ) );\n\t}\n\n\tswitch ( $context ) {\n\t\tcase 'site-icon':\n\t\t\trequire_once ABSPATH . '/wp-admin/includes/class-wp-site-icon.php';\n\t\t\tglobal $wp_site_icon;\n\n\t\t\t// Skip creating a new attachment if the attachment is a Site Icon.\n\t\t\tif ( get_post_meta( $attachment_id, '_wp_attachment_context', true ) == $context ) {\n\n\t\t\t\t// Delete the temporary cropped file, we don't need it.\n\t\t\t\twp_delete_file( $cropped );\n\n\t\t\t\t// Additional sizes in wp_prepare_attachment_for_js().\n\t\t\t\tadd_filter( 'image_size_names_choose', array( $wp_site_icon, 'additional_sizes' ) );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t/** This filter is documented in wp-admin/custom-header.php */\n\t\t\t$cropped = apply_filters( 'wp_create_file_in_uploads', $cropped, $attachment_id ); // For replication.\n\t\t\t$object  = $wp_site_icon->create_attachment_object( $cropped, $attachment_id );\n\t\t\tunset( $object['ID'] );\n\n\t\t\t// Update the attachment.\n\t\t\tadd_filter( 'intermediate_image_sizes_advanced', array( $wp_site_icon, 'additional_sizes' ) );\n\t\t\t$attachment_id = $wp_site_icon->insert_attachment( $object, $cropped );\n\t\t\tremove_filter( 'intermediate_image_sizes_advanced', array( $wp_site_icon, 'additional_sizes' ) );\n\n\t\t\t// Additional sizes in wp_prepare_attachment_for_js().\n\t\t\tadd_filter( 'image_size_names_choose', array( $wp_site_icon, 'additional_sizes' ) );\n\t\t\tbreak;\n\n\t\tdefault:\n\n\t\t\t/**\n\t\t\t * Fires before a cropped image is saved.\n\t\t\t *\n\t\t\t * Allows to add filters to modify the way a cropped image is saved.\n\t\t\t *\n\t\t\t * @since 4.3.0\n\t\t\t *\n\t\t\t * @param string $context       The Customizer control requesting the cropped image.\n\t\t\t * @param int    $attachment_id The attachment ID of the original image.\n\t\t\t * @param string $cropped       Path to the cropped image file.\n\t\t\t */\n\t\t\tdo_action( 'wp_ajax_crop_image_pre_save', $context, $attachment_id, $cropped );\n\n\t\t\t/** This filter is documented in wp-admin/custom-header.php */\n\t\t\t$cropped = apply_filters( 'wp_create_file_in_uploads', $cropped, $attachment_id ); // For replication.\n\n\t\t\t$parent_url = wp_get_attachment_url( $attachment_id );\n\t\t\t$url        = str_replace( basename( $parent_url ), basename( $cropped ), $parent_url );\n\n\t\t\t$size       = @getimagesize( $cropped );\n\t\t\t$image_type = ( $size ) ? $size['mime'] : 'image/jpeg';\n\n\t\t\t$object = array(\n\t\t\t\t'post_title'     => basename( $cropped ),\n\t\t\t\t'post_content'   => $url,\n\t\t\t\t'post_mime_type' => $image_type,\n\t\t\t\t'guid'           => $url,\n\t\t\t\t'context'        => $context,\n\t\t\t);\n\n\t\t\t$attachment_id = wp_insert_attachment( $object, $cropped );\n\t\t\t$metadata = wp_generate_attachment_metadata( $attachment_id, $cropped );\n\n\t\t\t/**\n\t\t\t * Filter the cropped image attachment metadata.\n\t\t\t *\n\t\t\t * @since 4.3.0\n\t\t\t *\n\t\t\t * @see wp_generate_attachment_metadata()\n\t\t\t *\n\t\t\t * @param array $metadata Attachment metadata.\n\t\t\t */\n\t\t\t$metadata = apply_filters( 'wp_ajax_cropped_attachment_metadata', $metadata );\n\t\t\twp_update_attachment_metadata( $attachment_id, $metadata );\n\n\t\t\t/**\n\t\t\t * Filter the attachment ID for a cropped image.\n\t\t\t *\n\t\t\t * @since 4.3.0\n\t\t\t *\n\t\t\t * @param int    $attachment_id The attachment ID of the cropped image.\n\t\t\t * @param string $context       The Customizer control requesting the cropped image.\n\t\t\t */\n\t\t\t$attachment_id = apply_filters( 'wp_ajax_cropped_attachment_id', $attachment_id, $context );\n\t}\n\n\twp_send_json_success( wp_prepare_attachment_for_js( $attachment_id ) );\n}\n\n/**\n * Ajax handler for generating a password.\n *\n * @since 4.4.0\n */\nfunction wp_ajax_generate_password() {\n\twp_send_json_success( wp_generate_password( 24 ) );\n}\n\n/**\n * Ajax handler for saving the user's WordPress.org username.\n *\n * @since 4.4.0\n */\nfunction wp_ajax_save_wporg_username() {\n\tif ( ! current_user_can( 'install_themes' ) && ! current_user_can( 'install_plugins' ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$username = isset( $_REQUEST['username'] ) ? wp_unslash( $_REQUEST['username'] ) : false;\n\n\tif ( ! $username ) {\n\t\twp_send_json_error();\n\t}\n\n\twp_send_json_success( update_user_meta( get_current_user_id(), 'wporg_favorites', $username ) );\n}\n", "code_before": "<?php\n/**\n * Administration API: Core Ajax handlers\n *\n * @package WordPress\n * @subpackage Administration\n * @since 2.1.0\n */\n\n//\n// No-privilege Ajax handlers.\n//\n\n/**\n * Handles the Heartbeat API in the no-privilege context via AJAX .\n *\n * Runs when the user is not logged in.\n *\n * @since 3.6.0\n */\nfunction wp_ajax_nopriv_heartbeat() {\n\t$response = array();\n\n\t// 'screen_id' is the same as $current_screen->id and the JS global 'pagenow'.\n\tif ( ! empty( $_POST['screen_id'] ) ) {\n\t\t$screen_id = sanitize_key( $_POST['screen_id'] );\n\t} else {\n\t\t$screen_id = 'front';\n\t}\n\n\tif ( ! empty( $_POST['data'] ) ) {\n\t\t$data = wp_unslash( (array) $_POST['data'] );\n\n\t\t/**\n\t\t * Filters Heartbeat Ajax response in no-privilege environments.\n\t\t *\n\t\t * @since 3.6.0\n\t\t *\n\t\t * @param array  $response  The no-priv Heartbeat response.\n\t\t * @param array  $data      The $_POST data sent.\n\t\t * @param string $screen_id The screen ID.\n\t\t */\n\t\t$response = apply_filters( 'heartbeat_nopriv_received', $response, $data, $screen_id );\n\t}\n\n\t/**\n\t * Filters Heartbeat Ajax response in no-privilege environments when no data is passed.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param array  $response  The no-priv Heartbeat response.\n\t * @param string $screen_id The screen ID.\n\t */\n\t$response = apply_filters( 'heartbeat_nopriv_send', $response, $screen_id );\n\n\t/**\n\t * Fires when Heartbeat ticks in no-privilege environments.\n\t *\n\t * Allows the transport to be easily replaced with long-polling.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param array  $response  The no-priv Heartbeat response.\n\t * @param string $screen_id The screen ID.\n\t */\n\tdo_action( 'heartbeat_nopriv_tick', $response, $screen_id );\n\n\t// Send the current time according to the server.\n\t$response['server_time'] = time();\n\n\twp_send_json( $response );\n}\n\n//\n// GET-based Ajax handlers.\n//\n\n/**\n * Handles fetching a list table via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_fetch_list() {\n\t$list_class = $_GET['list_args']['class'];\n\tcheck_ajax_referer( \"fetch-list-$list_class\", '_ajax_fetch_list_nonce' );\n\n\t$wp_list_table = _get_list_table( $list_class, array( 'screen' => $_GET['list_args']['screen']['id'] ) );\n\tif ( ! $wp_list_table ) {\n\t\twp_die( 0 );\n\t}\n\n\tif ( ! $wp_list_table->ajax_user_can() ) {\n\t\twp_die( -1 );\n\t}\n\n\t$wp_list_table->ajax_response();\n\n\twp_die( 0 );\n}\n\n/**\n * Handles tag search via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_ajax_tag_search() {\n\tif ( ! isset( $_GET['tax'] ) ) {\n\t\twp_die( 0 );\n\t}\n\n\t$taxonomy        = sanitize_key( $_GET['tax'] );\n\t$taxonomy_object = get_taxonomy( $taxonomy );\n\n\tif ( ! $taxonomy_object ) {\n\t\twp_die( 0 );\n\t}\n\n\tif ( ! current_user_can( $taxonomy_object->cap->assign_terms ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$search = wp_unslash( $_GET['q'] );\n\n\t$comma = _x( ',', 'tag delimiter' );\n\tif ( ',' !== $comma ) {\n\t\t$search = str_replace( $comma, ',', $search );\n\t}\n\n\tif ( str_contains( $search, ',' ) ) {\n\t\t$search = explode( ',', $search );\n\t\t$search = $search[ count( $search ) - 1 ];\n\t}\n\n\t$search = trim( $search );\n\n\t/**\n\t * Filters the minimum number of characters required to fire a tag search via Ajax.\n\t *\n\t * @since 4.0.0\n\t *\n\t * @param int         $characters      The minimum number of characters required. Default 2.\n\t * @param WP_Taxonomy $taxonomy_object The taxonomy object.\n\t * @param string      $search          The search term.\n\t */\n\t$term_search_min_chars = (int) apply_filters( 'term_search_min_chars', 2, $taxonomy_object, $search );\n\n\t/*\n\t * Require $term_search_min_chars chars for matching (default: 2)\n\t * ensure it's a non-negative, non-zero integer.\n\t */\n\tif ( ( 0 === $term_search_min_chars ) || ( strlen( $search ) < $term_search_min_chars ) ) {\n\t\twp_die();\n\t}\n\n\t$results = get_terms(\n\t\tarray(\n\t\t\t'taxonomy'   => $taxonomy,\n\t\t\t'name__like' => $search,\n\t\t\t'fields'     => 'names',\n\t\t\t'hide_empty' => false,\n\t\t\t'number'     => isset( $_GET['number'] ) ? (int) $_GET['number'] : 0,\n\t\t)\n\t);\n\n\t/**\n\t * Filters the Ajax term search results.\n\t *\n\t * @since 6.1.0\n\t *\n\t * @param string[]    $results         Array of term names.\n\t * @param WP_Taxonomy $taxonomy_object The taxonomy object.\n\t * @param string      $search          The search term.\n\t */\n\t$results = apply_filters( 'ajax_term_search_results', $results, $taxonomy_object, $search );\n\n\techo implode( \"\\n\", $results );\n\twp_die();\n}\n\n/**\n * Handles compression testing via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_wp_compression_test() {\n\tif ( ! current_user_can( 'manage_options' ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tif ( ini_get( 'zlib.output_compression' ) || 'ob_gzhandler' === ini_get( 'output_handler' ) ) {\n\t\t// Use `update_option()` on single site to mark the option for autoloading.\n\t\tif ( is_multisite() ) {\n\t\t\tupdate_site_option( 'can_compress_scripts', 0 );\n\t\t} else {\n\t\t\tupdate_option( 'can_compress_scripts', 0, true );\n\t\t}\n\t\twp_die( 0 );\n\t}\n\n\tif ( isset( $_GET['test'] ) ) {\n\t\theader( 'Expires: Wed, 11 Jan 1984 05:00:00 GMT' );\n\t\theader( 'Last-Modified: ' . gmdate( 'D, d M Y H:i:s' ) . ' GMT' );\n\t\theader( 'Cache-Control: no-cache, must-revalidate, max-age=0' );\n\t\theader( 'Content-Type: application/javascript; charset=UTF-8' );\n\t\t$force_gzip = ( defined( 'ENFORCE_GZIP' ) && ENFORCE_GZIP );\n\t\t$test_str   = '\"wpCompressionTest Lorem ipsum dolor sit amet consectetuer mollis sapien urna ut a. Eu nonummy condimentum fringilla tempor pretium platea vel nibh netus Maecenas. Hac molestie amet justo quis pellentesque est ultrices interdum nibh Morbi. Cras mattis pretium Phasellus ante ipsum ipsum ut sociis Suspendisse Lorem. Ante et non molestie. Porta urna Vestibulum egestas id congue nibh eu risus gravida sit. Ac augue auctor Ut et non a elit massa id sodales. Elit eu Nulla at nibh adipiscing mattis lacus mauris at tempus. Netus nibh quis suscipit nec feugiat eget sed lorem et urna. Pellentesque lacus at ut massa consectetuer ligula ut auctor semper Pellentesque. Ut metus massa nibh quam Curabitur molestie nec mauris congue. Volutpat molestie elit justo facilisis neque ac risus Ut nascetur tristique. Vitae sit lorem tellus et quis Phasellus lacus tincidunt nunc Fusce. Pharetra wisi Suspendisse mus sagittis libero lacinia Integer consequat ac Phasellus. Et urna ac cursus tortor aliquam Aliquam amet tellus volutpat Vestibulum. Justo interdum condimentum In augue congue tellus sollicitudin Quisque quis nibh.\"';\n\n\t\tif ( '1' === $_GET['test'] ) {\n\t\t\techo $test_str;\n\t\t\twp_die();\n\t\t} elseif ( '2' === $_GET['test'] ) {\n\t\t\tif ( ! isset( $_SERVER['HTTP_ACCEPT_ENCODING'] ) ) {\n\t\t\t\twp_die( -1 );\n\t\t\t}\n\n\t\t\tif ( false !== stripos( $_SERVER['HTTP_ACCEPT_ENCODING'], 'deflate' ) && function_exists( 'gzdeflate' ) && ! $force_gzip ) {\n\t\t\t\theader( 'Content-Encoding: deflate' );\n\t\t\t\t$out = gzdeflate( $test_str, 1 );\n\t\t\t} elseif ( false !== stripos( $_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip' ) && function_exists( 'gzencode' ) ) {\n\t\t\t\theader( 'Content-Encoding: gzip' );\n\t\t\t\t$out = gzencode( $test_str, 1 );\n\t\t\t} else {\n\t\t\t\twp_die( -1 );\n\t\t\t}\n\n\t\t\techo $out;\n\t\t\twp_die();\n\t\t} elseif ( 'no' === $_GET['test'] ) {\n\t\t\tcheck_ajax_referer( 'update_can_compress_scripts' );\n\t\t\t// Use `update_option()` on single site to mark the option for autoloading.\n\t\t\tif ( is_multisite() ) {\n\t\t\t\tupdate_site_option( 'can_compress_scripts', 0 );\n\t\t\t} else {\n\t\t\t\tupdate_option( 'can_compress_scripts', 0, true );\n\t\t\t}\n\t\t} elseif ( 'yes' === $_GET['test'] ) {\n\t\t\tcheck_ajax_referer( 'update_can_compress_scripts' );\n\t\t\t// Use `update_option()` on single site to mark the option for autoloading.\n\t\t\tif ( is_multisite() ) {\n\t\t\t\tupdate_site_option( 'can_compress_scripts', 1 );\n\t\t\t} else {\n\t\t\t\tupdate_option( 'can_compress_scripts', 1, true );\n\t\t\t}\n\t\t}\n\t}\n\n\twp_die( 0 );\n}\n\n/**\n * Handles image editor previews via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_imgedit_preview() {\n\t$post_id = (int) $_GET['postid'];\n\tif ( empty( $post_id ) || ! current_user_can( 'edit_post', $post_id ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tcheck_ajax_referer( \"image_editor-$post_id\" );\n\n\trequire_once ABSPATH . 'wp-admin/includes/image-edit.php';\n\n\tif ( ! stream_preview_image( $post_id ) ) {\n\t\twp_die( -1 );\n\t}\n\n\twp_die();\n}\n\n/**\n * Handles oEmbed caching via AJAX.\n *\n * @since 3.1.0\n *\n * @global WP_Embed $wp_embed WordPress Embed object.\n */\nfunction wp_ajax_oembed_cache() {\n\t$GLOBALS['wp_embed']->cache_oembed( $_GET['post'] );\n\twp_die( 0 );\n}\n\n/**\n * Handles user autocomplete via AJAX.\n *\n * @since 3.4.0\n */\nfunction wp_ajax_autocomplete_user() {\n\tif ( ! is_multisite() || ! current_user_can( 'promote_users' ) || wp_is_large_network( 'users' ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t/** This filter is documented in wp-admin/user-new.php */\n\tif ( ! current_user_can( 'manage_network_users' ) && ! apply_filters( 'autocomplete_users_for_site_admins', false ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$return = array();\n\n\t/*\n\t * Check the type of request.\n\t * Current allowed values are `add` and `search`.\n\t */\n\tif ( isset( $_REQUEST['autocomplete_type'] ) && 'search' === $_REQUEST['autocomplete_type'] ) {\n\t\t$type = $_REQUEST['autocomplete_type'];\n\t} else {\n\t\t$type = 'add';\n\t}\n\n\t/*\n\t * Check the desired field for value.\n\t * Current allowed values are `user_email` and `user_login`.\n\t */\n\tif ( isset( $_REQUEST['autocomplete_field'] ) && 'user_email' === $_REQUEST['autocomplete_field'] ) {\n\t\t$field = $_REQUEST['autocomplete_field'];\n\t} else {\n\t\t$field = 'user_login';\n\t}\n\n\t// Exclude current users of this blog.\n\tif ( isset( $_REQUEST['site_id'] ) ) {\n\t\t$id = absint( $_REQUEST['site_id'] );\n\t} else {\n\t\t$id = get_current_blog_id();\n\t}\n\n\t$include_blog_users = ( 'search' === $type ? get_users(\n\t\tarray(\n\t\t\t'blog_id' => $id,\n\t\t\t'fields'  => 'ID',\n\t\t)\n\t) : array() );\n\n\t$exclude_blog_users = ( 'add' === $type ? get_users(\n\t\tarray(\n\t\t\t'blog_id' => $id,\n\t\t\t'fields'  => 'ID',\n\t\t)\n\t) : array() );\n\n\t$users = get_users(\n\t\tarray(\n\t\t\t'blog_id'        => false,\n\t\t\t'search'         => '*' . $_REQUEST['term'] . '*',\n\t\t\t'include'        => $include_blog_users,\n\t\t\t'exclude'        => $exclude_blog_users,\n\t\t\t'search_columns' => array( 'user_login', 'user_nicename', 'user_email' ),\n\t\t)\n\t);\n\n\tforeach ( $users as $user ) {\n\t\t$return[] = array(\n\t\t\t/* translators: 1: User login, 2: User email address. */\n\t\t\t'label' => sprintf( _x( '%1$s (%2$s)', 'user autocomplete result' ), $user->user_login, $user->user_email ),\n\t\t\t'value' => $user->$field,\n\t\t);\n\t}\n\n\twp_die( wp_json_encode( $return ) );\n}\n\n/**\n * Handles Ajax requests for community events\n *\n * @since 4.8.0\n */\nfunction wp_ajax_get_community_events() {\n\trequire_once ABSPATH . 'wp-admin/includes/class-wp-community-events.php';\n\n\tcheck_ajax_referer( 'community_events' );\n\n\t$search         = isset( $_POST['location'] ) ? wp_unslash( $_POST['location'] ) : '';\n\t$timezone       = isset( $_POST['timezone'] ) ? wp_unslash( $_POST['timezone'] ) : '';\n\t$user_id        = get_current_user_id();\n\t$saved_location = get_user_option( 'community-events-location', $user_id );\n\t$events_client  = new WP_Community_Events( $user_id, $saved_location );\n\t$events         = $events_client->get_events( $search, $timezone );\n\t$ip_changed     = false;\n\n\tif ( is_wp_error( $events ) ) {\n\t\twp_send_json_error(\n\t\t\tarray(\n\t\t\t\t'error' => $events->get_error_message(),\n\t\t\t)\n\t\t);\n\t} else {\n\t\tif ( empty( $saved_location['ip'] ) && ! empty( $events['location']['ip'] ) ) {\n\t\t\t$ip_changed = true;\n\t\t} elseif ( isset( $saved_location['ip'] ) && ! empty( $events['location']['ip'] ) && $saved_location['ip'] !== $events['location']['ip'] ) {\n\t\t\t$ip_changed = true;\n\t\t}\n\n\t\t/*\n\t\t * The location should only be updated when it changes. The API doesn't always return\n\t\t * a full location; sometimes it's missing the description or country. The location\n\t\t * that was saved during the initial request is known to be good and complete, though.\n\t\t * It should be left intact until the user explicitly changes it (either by manually\n\t\t * searching for a new location, or by changing their IP address).\n\t\t *\n\t\t * If the location was updated with an incomplete response from the API, then it could\n\t\t * break assumptions that the UI makes (e.g., that there will always be a description\n\t\t * that corresponds to a latitude/longitude location).\n\t\t *\n\t\t * The location is stored network-wide, so that the user doesn't have to set it on each site.\n\t\t */\n\t\tif ( $ip_changed || $search ) {\n\t\t\tupdate_user_meta( $user_id, 'community-events-location', $events['location'] );\n\t\t}\n\n\t\twp_send_json_success( $events );\n\t}\n}\n\n/**\n * Handles dashboard widgets via AJAX.\n *\n * @since 3.4.0\n */\nfunction wp_ajax_dashboard_widgets() {\n\trequire_once ABSPATH . 'wp-admin/includes/dashboard.php';\n\n\t$pagenow = $_GET['pagenow'];\n\tif ( 'dashboard-user' === $pagenow || 'dashboard-network' === $pagenow || 'dashboard' === $pagenow ) {\n\t\tset_current_screen( $pagenow );\n\t}\n\n\tswitch ( $_GET['widget'] ) {\n\t\tcase 'dashboard_primary':\n\t\t\twp_dashboard_primary();\n\t\t\tbreak;\n\t}\n\twp_die();\n}\n\n/**\n * Handles Customizer preview logged-in status via AJAX.\n *\n * @since 3.4.0\n */\nfunction wp_ajax_logged_in() {\n\twp_die( 1 );\n}\n\n//\n// Ajax helpers.\n//\n\n/**\n * Sends back current comment total and new page links if they need to be updated.\n *\n * Contrary to normal success Ajax response (\"1\"), die with time() on success.\n *\n * @since 2.7.0\n * @access private\n *\n * @param int $comment_id\n * @param int $delta\n */\nfunction _wp_ajax_delete_comment_response( $comment_id, $delta = -1 ) {\n\t$total    = isset( $_POST['_total'] ) ? (int) $_POST['_total'] : 0;\n\t$per_page = isset( $_POST['_per_page'] ) ? (int) $_POST['_per_page'] : 0;\n\t$page     = isset( $_POST['_page'] ) ? (int) $_POST['_page'] : 0;\n\t$url      = isset( $_POST['_url'] ) ? sanitize_url( $_POST['_url'] ) : '';\n\n\t// JS didn't send us everything we need to know. Just die with success message.\n\tif ( ! $total || ! $per_page || ! $page || ! $url ) {\n\t\t$time           = time();\n\t\t$comment        = get_comment( $comment_id );\n\t\t$comment_status = '';\n\t\t$comment_link   = '';\n\n\t\tif ( $comment ) {\n\t\t\t$comment_status = $comment->comment_approved;\n\t\t}\n\n\t\tif ( 1 === (int) $comment_status ) {\n\t\t\t$comment_link = get_comment_link( $comment );\n\t\t}\n\n\t\t$counts = wp_count_comments();\n\n\t\t$x = new WP_Ajax_Response(\n\t\t\tarray(\n\t\t\t\t'what'         => 'comment',\n\t\t\t\t// Here for completeness - not used.\n\t\t\t\t'id'           => $comment_id,\n\t\t\t\t'supplemental' => array(\n\t\t\t\t\t'status'               => $comment_status,\n\t\t\t\t\t'postId'               => $comment ? $comment->comment_post_ID : '',\n\t\t\t\t\t'time'                 => $time,\n\t\t\t\t\t'in_moderation'        => $counts->moderated,\n\t\t\t\t\t'i18n_comments_text'   => sprintf(\n\t\t\t\t\t\t/* translators: %s: Number of comments. */\n\t\t\t\t\t\t_n( '%s Comment', '%s Comments', $counts->approved ),\n\t\t\t\t\t\tnumber_format_i18n( $counts->approved )\n\t\t\t\t\t),\n\t\t\t\t\t'i18n_moderation_text' => sprintf(\n\t\t\t\t\t\t/* translators: %s: Number of comments. */\n\t\t\t\t\t\t_n( '%s Comment in moderation', '%s Comments in moderation', $counts->moderated ),\n\t\t\t\t\t\tnumber_format_i18n( $counts->moderated )\n\t\t\t\t\t),\n\t\t\t\t\t'comment_link'         => $comment_link,\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t\t$x->send();\n\t}\n\n\t$total += $delta;\n\tif ( $total < 0 ) {\n\t\t$total = 0;\n\t}\n\n\t// Only do the expensive stuff on a page-break, and about 1 other time per page.\n\tif ( 0 === $total % $per_page || 1 === mt_rand( 1, $per_page ) ) {\n\t\t$post_id = 0;\n\t\t// What type of comment count are we looking for?\n\t\t$status = 'all';\n\t\t$parsed = parse_url( $url );\n\n\t\tif ( isset( $parsed['query'] ) ) {\n\t\t\tparse_str( $parsed['query'], $query_vars );\n\n\t\t\tif ( ! empty( $query_vars['comment_status'] ) ) {\n\t\t\t\t$status = $query_vars['comment_status'];\n\t\t\t}\n\n\t\t\tif ( ! empty( $query_vars['p'] ) ) {\n\t\t\t\t$post_id = (int) $query_vars['p'];\n\t\t\t}\n\n\t\t\tif ( ! empty( $query_vars['comment_type'] ) ) {\n\t\t\t\t$type = $query_vars['comment_type'];\n\t\t\t}\n\t\t}\n\n\t\tif ( empty( $type ) ) {\n\t\t\t// Only use the comment count if not filtering by a comment_type.\n\t\t\t$comment_count = wp_count_comments( $post_id );\n\n\t\t\t// We're looking for a known type of comment count.\n\t\t\tif ( isset( $comment_count->$status ) ) {\n\t\t\t\t$total = $comment_count->$status;\n\t\t\t}\n\t\t}\n\t\t// Else use the decremented value from above.\n\t}\n\n\t// The time since the last comment count.\n\t$time    = time();\n\t$comment = get_comment( $comment_id );\n\t$counts  = wp_count_comments();\n\n\t$x = new WP_Ajax_Response(\n\t\tarray(\n\t\t\t'what'         => 'comment',\n\t\t\t'id'           => $comment_id,\n\t\t\t'supplemental' => array(\n\t\t\t\t'status'               => $comment ? $comment->comment_approved : '',\n\t\t\t\t'postId'               => $comment ? $comment->comment_post_ID : '',\n\t\t\t\t/* translators: %s: Number of comments. */\n\t\t\t\t'total_items_i18n'     => sprintf( _n( '%s item', '%s items', $total ), number_format_i18n( $total ) ),\n\t\t\t\t'total_pages'          => (int) ceil( $total / $per_page ),\n\t\t\t\t'total_pages_i18n'     => number_format_i18n( (int) ceil( $total / $per_page ) ),\n\t\t\t\t'total'                => $total,\n\t\t\t\t'time'                 => $time,\n\t\t\t\t'in_moderation'        => $counts->moderated,\n\t\t\t\t'i18n_moderation_text' => sprintf(\n\t\t\t\t\t/* translators: %s: Number of comments. */\n\t\t\t\t\t_n( '%s Comment in moderation', '%s Comments in moderation', $counts->moderated ),\n\t\t\t\t\tnumber_format_i18n( $counts->moderated )\n\t\t\t\t),\n\t\t\t),\n\t\t)\n\t);\n\t$x->send();\n}\n\n//\n// POST-based Ajax handlers.\n//\n\n/**\n * Handles adding a hierarchical term via AJAX.\n *\n * @since 3.1.0\n * @access private\n */\nfunction _wp_ajax_add_hierarchical_term() {\n\t$action   = $_POST['action'];\n\t$taxonomy = get_taxonomy( substr( $action, 4 ) );\n\tcheck_ajax_referer( $action, '_ajax_nonce-add-' . $taxonomy->name );\n\n\tif ( ! current_user_can( $taxonomy->cap->edit_terms ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$names  = explode( ',', $_POST[ 'new' . $taxonomy->name ] );\n\t$parent = isset( $_POST[ 'new' . $taxonomy->name . '_parent' ] ) ? (int) $_POST[ 'new' . $taxonomy->name . '_parent' ] : 0;\n\n\tif ( 0 > $parent ) {\n\t\t$parent = 0;\n\t}\n\n\tif ( 'category' === $taxonomy->name ) {\n\t\t$post_category = isset( $_POST['post_category'] ) ? (array) $_POST['post_category'] : array();\n\t} else {\n\t\t$post_category = ( isset( $_POST['tax_input'] ) && isset( $_POST['tax_input'][ $taxonomy->name ] ) ) ? (array) $_POST['tax_input'][ $taxonomy->name ] : array();\n\t}\n\n\t$checked_categories = array_map( 'absint', (array) $post_category );\n\t$popular_ids        = wp_popular_terms_checklist( $taxonomy->name, 0, 10, false );\n\n\tforeach ( $names as $cat_name ) {\n\t\t$cat_name          = trim( $cat_name );\n\t\t$category_nicename = sanitize_title( $cat_name );\n\n\t\tif ( '' === $category_nicename ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t$cat_id = wp_insert_term( $cat_name, $taxonomy->name, array( 'parent' => $parent ) );\n\n\t\tif ( ! $cat_id || is_wp_error( $cat_id ) ) {\n\t\t\tcontinue;\n\t\t} else {\n\t\t\t$cat_id = $cat_id['term_id'];\n\t\t}\n\n\t\t$checked_categories[] = $cat_id;\n\n\t\tif ( $parent ) { // Do these all at once in a second.\n\t\t\tcontinue;\n\t\t}\n\n\t\tob_start();\n\n\t\twp_terms_checklist(\n\t\t\t0,\n\t\t\tarray(\n\t\t\t\t'taxonomy'             => $taxonomy->name,\n\t\t\t\t'descendants_and_self' => $cat_id,\n\t\t\t\t'selected_cats'        => $checked_categories,\n\t\t\t\t'popular_cats'         => $popular_ids,\n\t\t\t)\n\t\t);\n\n\t\t$data = ob_get_clean();\n\n\t\t$add = array(\n\t\t\t'what'     => $taxonomy->name,\n\t\t\t'id'       => $cat_id,\n\t\t\t'data'     => str_replace( array( \"\\n\", \"\\t\" ), '', $data ),\n\t\t\t'position' => -1,\n\t\t);\n\t}\n\n\tif ( $parent ) { // Foncy - replace the parent and all its children.\n\t\t$parent  = get_term( $parent, $taxonomy->name );\n\t\t$term_id = $parent->term_id;\n\n\t\twhile ( $parent->parent ) { // Get the top parent.\n\t\t\t$parent = get_term( $parent->parent, $taxonomy->name );\n\t\t\tif ( is_wp_error( $parent ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$term_id = $parent->term_id;\n\t\t}\n\n\t\tob_start();\n\n\t\twp_terms_checklist(\n\t\t\t0,\n\t\t\tarray(\n\t\t\t\t'taxonomy'             => $taxonomy->name,\n\t\t\t\t'descendants_and_self' => $term_id,\n\t\t\t\t'selected_cats'        => $checked_categories,\n\t\t\t\t'popular_cats'         => $popular_ids,\n\t\t\t)\n\t\t);\n\n\t\t$data = ob_get_clean();\n\n\t\t$add = array(\n\t\t\t'what'     => $taxonomy->name,\n\t\t\t'id'       => $term_id,\n\t\t\t'data'     => str_replace( array( \"\\n\", \"\\t\" ), '', $data ),\n\t\t\t'position' => -1,\n\t\t);\n\t}\n\n\t$parent_dropdown_args = array(\n\t\t'taxonomy'         => $taxonomy->name,\n\t\t'hide_empty'       => 0,\n\t\t'name'             => 'new' . $taxonomy->name . '_parent',\n\t\t'orderby'          => 'name',\n\t\t'hierarchical'     => 1,\n\t\t'show_option_none' => '&mdash; ' . $taxonomy->labels->parent_item . ' &mdash;',\n\t);\n\n\t/** This filter is documented in wp-admin/includes/meta-boxes.php */\n\t$parent_dropdown_args = apply_filters( 'post_edit_category_parent_dropdown_args', $parent_dropdown_args );\n\n\tob_start();\n\n\twp_dropdown_categories( $parent_dropdown_args );\n\n\t$sup = ob_get_clean();\n\n\t$add['supplemental'] = array( 'newcat_parent' => $sup );\n\n\t$x = new WP_Ajax_Response( $add );\n\t$x->send();\n}\n\n/**\n * Handles deleting a comment via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_delete_comment() {\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\t$comment = get_comment( $id );\n\n\tif ( ! $comment ) {\n\t\twp_die( time() );\n\t}\n\n\tif ( ! current_user_can( 'edit_comment', $comment->comment_ID ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tcheck_ajax_referer( \"delete-comment_$id\" );\n\t$status = wp_get_comment_status( $comment );\n\t$delta  = -1;\n\n\tif ( isset( $_POST['trash'] ) && '1' === $_POST['trash'] ) {\n\t\tif ( 'trash' === $status ) {\n\t\t\twp_die( time() );\n\t\t}\n\n\t\t$r = wp_trash_comment( $comment );\n\t} elseif ( isset( $_POST['untrash'] ) && '1' === $_POST['untrash'] ) {\n\t\tif ( 'trash' !== $status ) {\n\t\t\twp_die( time() );\n\t\t}\n\n\t\t$r = wp_untrash_comment( $comment );\n\n\t\t// Undo trash, not in Trash.\n\t\tif ( ! isset( $_POST['comment_status'] ) || 'trash' !== $_POST['comment_status'] ) {\n\t\t\t$delta = 1;\n\t\t}\n\t} elseif ( isset( $_POST['spam'] ) && '1' === $_POST['spam'] ) {\n\t\tif ( 'spam' === $status ) {\n\t\t\twp_die( time() );\n\t\t}\n\n\t\t$r = wp_spam_comment( $comment );\n\t} elseif ( isset( $_POST['unspam'] ) && '1' === $_POST['unspam'] ) {\n\t\tif ( 'spam' !== $status ) {\n\t\t\twp_die( time() );\n\t\t}\n\n\t\t$r = wp_unspam_comment( $comment );\n\n\t\t// Undo spam, not in spam.\n\t\tif ( ! isset( $_POST['comment_status'] ) || 'spam' !== $_POST['comment_status'] ) {\n\t\t\t$delta = 1;\n\t\t}\n\t} elseif ( isset( $_POST['delete'] ) && '1' === $_POST['delete'] ) {\n\t\t$r = wp_delete_comment( $comment );\n\t} else {\n\t\twp_die( -1 );\n\t}\n\n\tif ( $r ) {\n\t\t// Decide if we need to send back '1' or a more complicated response including page links and comment counts.\n\t\t_wp_ajax_delete_comment_response( $comment->comment_ID, $delta );\n\t}\n\n\twp_die( 0 );\n}\n\n/**\n * Handles deleting a tag via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_delete_tag() {\n\t$tag_id = (int) $_POST['tag_ID'];\n\tcheck_ajax_referer( \"delete-tag_$tag_id\" );\n\n\tif ( ! current_user_can( 'delete_term', $tag_id ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$taxonomy = ! empty( $_POST['taxonomy'] ) ? $_POST['taxonomy'] : 'post_tag';\n\t$tag      = get_term( $tag_id, $taxonomy );\n\n\tif ( ! $tag || is_wp_error( $tag ) ) {\n\t\twp_die( 1 );\n\t}\n\n\tif ( wp_delete_term( $tag_id, $taxonomy ) ) {\n\t\twp_die( 1 );\n\t} else {\n\t\twp_die( 0 );\n\t}\n}\n\n/**\n * Handles deleting a link via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_delete_link() {\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tcheck_ajax_referer( \"delete-bookmark_$id\" );\n\n\tif ( ! current_user_can( 'manage_links' ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$link = get_bookmark( $id );\n\tif ( ! $link || is_wp_error( $link ) ) {\n\t\twp_die( 1 );\n\t}\n\n\tif ( wp_delete_link( $id ) ) {\n\t\twp_die( 1 );\n\t} else {\n\t\twp_die( 0 );\n\t}\n}\n\n/**\n * Handles deleting meta via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_delete_meta() {\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tcheck_ajax_referer( \"delete-meta_$id\" );\n\t$meta = get_metadata_by_mid( 'post', $id );\n\n\tif ( ! $meta ) {\n\t\twp_die( 1 );\n\t}\n\n\tif ( is_protected_meta( $meta->meta_key, 'post' ) || ! current_user_can( 'delete_post_meta', $meta->post_id, $meta->meta_key ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tif ( delete_meta( $meta->meta_id ) ) {\n\t\twp_die( 1 );\n\t}\n\n\twp_die( 0 );\n}\n\n/**\n * Handles deleting a post via AJAX.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_delete_post( $action ) {\n\tif ( empty( $action ) ) {\n\t\t$action = 'delete-post';\n\t}\n\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\tcheck_ajax_referer( \"{$action}_$id\" );\n\n\tif ( ! current_user_can( 'delete_post', $id ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tif ( ! get_post( $id ) ) {\n\t\twp_die( 1 );\n\t}\n\n\tif ( wp_delete_post( $id ) ) {\n\t\twp_die( 1 );\n\t} else {\n\t\twp_die( 0 );\n\t}\n}\n\n/**\n * Handles sending a post to the Trash via AJAX.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_trash_post( $action ) {\n\tif ( empty( $action ) ) {\n\t\t$action = 'trash-post';\n\t}\n\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\tcheck_ajax_referer( \"{$action}_$id\" );\n\n\tif ( ! current_user_can( 'delete_post', $id ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tif ( ! get_post( $id ) ) {\n\t\twp_die( 1 );\n\t}\n\n\tif ( 'trash-post' === $action ) {\n\t\t$done = wp_trash_post( $id );\n\t} else {\n\t\t$done = wp_untrash_post( $id );\n\t}\n\n\tif ( $done ) {\n\t\twp_die( 1 );\n\t}\n\n\twp_die( 0 );\n}\n\n/**\n * Handles restoring a post from the Trash via AJAX.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_untrash_post( $action ) {\n\tif ( empty( $action ) ) {\n\t\t$action = 'untrash-post';\n\t}\n\n\twp_ajax_trash_post( $action );\n}\n\n/**\n * Handles deleting a page via AJAX.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_delete_page( $action ) {\n\tif ( empty( $action ) ) {\n\t\t$action = 'delete-page';\n\t}\n\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\tcheck_ajax_referer( \"{$action}_$id\" );\n\n\tif ( ! current_user_can( 'delete_page', $id ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tif ( ! get_post( $id ) ) {\n\t\twp_die( 1 );\n\t}\n\n\tif ( wp_delete_post( $id ) ) {\n\t\twp_die( 1 );\n\t} else {\n\t\twp_die( 0 );\n\t}\n}\n\n/**\n * Handles dimming a comment via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_dim_comment() {\n\t$id      = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\t$comment = get_comment( $id );\n\n\tif ( ! $comment ) {\n\t\t$x = new WP_Ajax_Response(\n\t\t\tarray(\n\t\t\t\t'what' => 'comment',\n\t\t\t\t'id'   => new WP_Error(\n\t\t\t\t\t'invalid_comment',\n\t\t\t\t\t/* translators: %d: Comment ID. */\n\t\t\t\t\tsprintf( __( 'Comment %d does not exist' ), $id )\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t\t$x->send();\n\t}\n\n\tif ( ! current_user_can( 'edit_comment', $comment->comment_ID ) && ! current_user_can( 'moderate_comments' ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$current = wp_get_comment_status( $comment );\n\n\tif ( isset( $_POST['new'] ) && $_POST['new'] === $current ) {\n\t\twp_die( time() );\n\t}\n\n\tcheck_ajax_referer( \"approve-comment_$id\" );\n\n\tif ( in_array( $current, array( 'unapproved', 'spam' ), true ) ) {\n\t\t$result = wp_set_comment_status( $comment, 'approve', true );\n\t} else {\n\t\t$result = wp_set_comment_status( $comment, 'hold', true );\n\t}\n\n\tif ( is_wp_error( $result ) ) {\n\t\t$x = new WP_Ajax_Response(\n\t\t\tarray(\n\t\t\t\t'what' => 'comment',\n\t\t\t\t'id'   => $result,\n\t\t\t)\n\t\t);\n\t\t$x->send();\n\t}\n\n\t// Decide if we need to send back '1' or a more complicated response including page links and comment counts.\n\t_wp_ajax_delete_comment_response( $comment->comment_ID );\n\twp_die( 0 );\n}\n\n/**\n * Handles adding a link category via AJAX.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_add_link_category( $action ) {\n\tif ( empty( $action ) ) {\n\t\t$action = 'add-link-category';\n\t}\n\n\tcheck_ajax_referer( $action );\n\n\t$taxonomy_object = get_taxonomy( 'link_category' );\n\n\tif ( ! current_user_can( $taxonomy_object->cap->manage_terms ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$names = explode( ',', wp_unslash( $_POST['newcat'] ) );\n\t$x     = new WP_Ajax_Response();\n\n\tforeach ( $names as $cat_name ) {\n\t\t$cat_name = trim( $cat_name );\n\t\t$slug     = sanitize_title( $cat_name );\n\n\t\tif ( '' === $slug ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t$cat_id = wp_insert_term( $cat_name, 'link_category' );\n\n\t\tif ( ! $cat_id || is_wp_error( $cat_id ) ) {\n\t\t\tcontinue;\n\t\t} else {\n\t\t\t$cat_id = $cat_id['term_id'];\n\t\t}\n\n\t\t$cat_name = esc_html( $cat_name );\n\n\t\t$x->add(\n\t\t\tarray(\n\t\t\t\t'what'     => 'link-category',\n\t\t\t\t'id'       => $cat_id,\n\t\t\t\t'data'     => \"<li id='link-category-$cat_id'><label for='in-link-category-$cat_id' class='selectit'><input value='\" . esc_attr( $cat_id ) . \"' type='checkbox' checked='checked' name='link_category[]' id='in-link-category-$cat_id'/> $cat_name</label></li>\",\n\t\t\t\t'position' => -1,\n\t\t\t)\n\t\t);\n\t}\n\t$x->send();\n}\n\n/**\n * Handles adding a tag via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_add_tag() {\n\tcheck_ajax_referer( 'add-tag', '_wpnonce_add-tag' );\n\n\t$taxonomy        = ! empty( $_POST['taxonomy'] ) ? $_POST['taxonomy'] : 'post_tag';\n\t$taxonomy_object = get_taxonomy( $taxonomy );\n\n\tif ( ! current_user_can( $taxonomy_object->cap->edit_terms ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$x = new WP_Ajax_Response();\n\n\t$tag = wp_insert_term( $_POST['tag-name'], $taxonomy, $_POST );\n\n\tif ( $tag && ! is_wp_error( $tag ) ) {\n\t\t$tag = get_term( $tag['term_id'], $taxonomy );\n\t}\n\n\tif ( ! $tag || is_wp_error( $tag ) ) {\n\t\t$message    = __( 'An error has occurred. Please reload the page and try again.' );\n\t\t$error_code = 'error';\n\n\t\tif ( is_wp_error( $tag ) && $tag->get_error_message() ) {\n\t\t\t$message = $tag->get_error_message();\n\t\t}\n\n\t\tif ( is_wp_error( $tag ) && $tag->get_error_code() ) {\n\t\t\t$error_code = $tag->get_error_code();\n\t\t}\n\n\t\t$x->add(\n\t\t\tarray(\n\t\t\t\t'what' => 'taxonomy',\n\t\t\t\t'data' => new WP_Error( $error_code, $message ),\n\t\t\t)\n\t\t);\n\t\t$x->send();\n\t}\n\n\t$wp_list_table = _get_list_table( 'WP_Terms_List_Table', array( 'screen' => $_POST['screen'] ) );\n\n\t$level     = 0;\n\t$noparents = '';\n\n\tif ( is_taxonomy_hierarchical( $taxonomy ) ) {\n\t\t$level = count( get_ancestors( $tag->term_id, $taxonomy, 'taxonomy' ) );\n\t\tob_start();\n\t\t$wp_list_table->single_row( $tag, $level );\n\t\t$noparents = ob_get_clean();\n\t}\n\n\tob_start();\n\t$wp_list_table->single_row( $tag );\n\t$parents = ob_get_clean();\n\n\trequire ABSPATH . 'wp-admin/includes/edit-tag-messages.php';\n\n\t$message = '';\n\tif ( isset( $messages[ $taxonomy_object->name ][1] ) ) {\n\t\t$message = $messages[ $taxonomy_object->name ][1];\n\t} elseif ( isset( $messages['_item'][1] ) ) {\n\t\t$message = $messages['_item'][1];\n\t}\n\n\t$x->add(\n\t\tarray(\n\t\t\t'what'         => 'taxonomy',\n\t\t\t'data'         => $message,\n\t\t\t'supplemental' => array(\n\t\t\t\t'parents'   => $parents,\n\t\t\t\t'noparents' => $noparents,\n\t\t\t\t'notice'    => $message,\n\t\t\t),\n\t\t)\n\t);\n\n\t$x->add(\n\t\tarray(\n\t\t\t'what'         => 'term',\n\t\t\t'position'     => $level,\n\t\t\t'supplemental' => (array) $tag,\n\t\t)\n\t);\n\n\t$x->send();\n}\n\n/**\n * Handles getting a tagcloud via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_get_tagcloud() {\n\tif ( ! isset( $_POST['tax'] ) ) {\n\t\twp_die( 0 );\n\t}\n\n\t$taxonomy        = sanitize_key( $_POST['tax'] );\n\t$taxonomy_object = get_taxonomy( $taxonomy );\n\n\tif ( ! $taxonomy_object ) {\n\t\twp_die( 0 );\n\t}\n\n\tif ( ! current_user_can( $taxonomy_object->cap->assign_terms ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$tags = get_terms(\n\t\tarray(\n\t\t\t'taxonomy' => $taxonomy,\n\t\t\t'number'   => 45,\n\t\t\t'orderby'  => 'count',\n\t\t\t'order'    => 'DESC',\n\t\t)\n\t);\n\n\tif ( empty( $tags ) ) {\n\t\twp_die( $taxonomy_object->labels->not_found );\n\t}\n\n\tif ( is_wp_error( $tags ) ) {\n\t\twp_die( $tags->get_error_message() );\n\t}\n\n\tforeach ( $tags as $key => $tag ) {\n\t\t$tags[ $key ]->link = '#';\n\t\t$tags[ $key ]->id   = $tag->term_id;\n\t}\n\n\t// We need raw tag names here, so don't filter the output.\n\t$return = wp_generate_tag_cloud(\n\t\t$tags,\n\t\tarray(\n\t\t\t'filter' => 0,\n\t\t\t'format' => 'list',\n\t\t)\n\t);\n\n\tif ( empty( $return ) ) {\n\t\twp_die( 0 );\n\t}\n\n\techo $return;\n\twp_die();\n}\n\n/**\n * Handles getting comments via AJAX.\n *\n * @since 3.1.0\n *\n * @global int $post_id\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_get_comments( $action ) {\n\tglobal $post_id;\n\n\tif ( empty( $action ) ) {\n\t\t$action = 'get-comments';\n\t}\n\n\tcheck_ajax_referer( $action );\n\n\tif ( empty( $post_id ) && ! empty( $_REQUEST['p'] ) ) {\n\t\t$id = absint( $_REQUEST['p'] );\n\t\tif ( ! empty( $id ) ) {\n\t\t\t$post_id = $id;\n\t\t}\n\t}\n\n\tif ( empty( $post_id ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$wp_list_table = _get_list_table( 'WP_Post_Comments_List_Table', array( 'screen' => 'edit-comments' ) );\n\n\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$wp_list_table->prepare_items();\n\n\tif ( ! $wp_list_table->has_items() ) {\n\t\twp_die( 1 );\n\t}\n\n\t$x = new WP_Ajax_Response();\n\n\tob_start();\n\tforeach ( $wp_list_table->items as $comment ) {\n\t\tif ( ! current_user_can( 'edit_comment', $comment->comment_ID ) && 0 === $comment->comment_approved ) {\n\t\t\tcontinue;\n\t\t}\n\t\tget_comment( $comment );\n\t\t$wp_list_table->single_row( $comment );\n\t}\n\t$comment_list_item = ob_get_clean();\n\n\t$x->add(\n\t\tarray(\n\t\t\t'what' => 'comments',\n\t\t\t'data' => $comment_list_item,\n\t\t)\n\t);\n\n\t$x->send();\n}\n\n/**\n * Handles replying to a comment via AJAX.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_replyto_comment( $action ) {\n\tif ( empty( $action ) ) {\n\t\t$action = 'replyto-comment';\n\t}\n\n\tcheck_ajax_referer( $action, '_ajax_nonce-replyto-comment' );\n\n\t$comment_post_id = (int) $_POST['comment_post_ID'];\n\t$post            = get_post( $comment_post_id );\n\n\tif ( ! $post ) {\n\t\twp_die( -1 );\n\t}\n\n\tif ( ! current_user_can( 'edit_post', $comment_post_id ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tif ( empty( $post->post_status ) ) {\n\t\twp_die( 1 );\n\t} elseif ( in_array( $post->post_status, array( 'draft', 'pending', 'trash' ), true ) ) {\n\t\twp_die( __( 'You cannot reply to a comment on a draft post.' ) );\n\t}\n\n\t$user = wp_get_current_user();\n\n\tif ( $user->exists() ) {\n\t\t$comment_author       = wp_slash( $user->display_name );\n\t\t$comment_author_email = wp_slash( $user->user_email );\n\t\t$comment_author_url   = wp_slash( $user->user_url );\n\t\t$user_id              = $user->ID;\n\n\t\tif ( current_user_can( 'unfiltered_html' ) ) {\n\t\t\tif ( ! isset( $_POST['_wp_unfiltered_html_comment'] ) ) {\n\t\t\t\t$_POST['_wp_unfiltered_html_comment'] = '';\n\t\t\t}\n\n\t\t\tif ( wp_create_nonce( 'unfiltered-html-comment' ) !== $_POST['_wp_unfiltered_html_comment'] ) {\n\t\t\t\tkses_remove_filters(); // Start with a clean slate.\n\t\t\t\tkses_init_filters();   // Set up the filters.\n\t\t\t\tremove_filter( 'pre_comment_content', 'wp_filter_post_kses' );\n\t\t\t\tadd_filter( 'pre_comment_content', 'wp_filter_kses' );\n\t\t\t}\n\t\t}\n\t} else {\n\t\twp_die( __( 'Sorry, you must be logged in to reply to a comment.' ) );\n\t}\n\n\t$comment_content = trim( $_POST['content'] );\n\n\tif ( '' === $comment_content ) {\n\t\twp_die( __( 'Please type your comment text.' ) );\n\t}\n\n\t$comment_type = isset( $_POST['comment_type'] ) ? trim( $_POST['comment_type'] ) : 'comment';\n\n\t$comment_parent = 0;\n\n\tif ( isset( $_POST['comment_ID'] ) ) {\n\t\t$comment_parent = absint( $_POST['comment_ID'] );\n\t}\n\n\t$comment_auto_approved = false;\n\n\t$commentdata = array(\n\t\t'comment_post_ID' => $comment_post_id,\n\t);\n\n\t$commentdata += compact(\n\t\t'comment_author',\n\t\t'comment_author_email',\n\t\t'comment_author_url',\n\t\t'comment_content',\n\t\t'comment_type',\n\t\t'comment_parent',\n\t\t'user_id'\n\t);\n\n\t// Automatically approve parent comment.\n\tif ( ! empty( $_POST['approve_parent'] ) ) {\n\t\t$parent = get_comment( $comment_parent );\n\n\t\tif ( $parent && '0' === $parent->comment_approved && (int) $parent->comment_post_ID === $comment_post_id ) {\n\t\t\tif ( ! current_user_can( 'edit_comment', $parent->comment_ID ) ) {\n\t\t\t\twp_die( -1 );\n\t\t\t}\n\n\t\t\tif ( wp_set_comment_status( $parent, 'approve' ) ) {\n\t\t\t\t$comment_auto_approved = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t$comment_id = wp_new_comment( $commentdata );\n\n\tif ( is_wp_error( $comment_id ) ) {\n\t\twp_die( $comment_id->get_error_message() );\n\t}\n\n\t$comment = get_comment( $comment_id );\n\n\tif ( ! $comment ) {\n\t\twp_die( 1 );\n\t}\n\n\t$position = ( isset( $_POST['position'] ) && (int) $_POST['position'] ) ? (int) $_POST['position'] : '-1';\n\n\tob_start();\n\tif ( isset( $_REQUEST['mode'] ) && 'dashboard' === $_REQUEST['mode'] ) {\n\t\trequire_once ABSPATH . 'wp-admin/includes/dashboard.php';\n\t\t_wp_dashboard_recent_comments_row( $comment );\n\t} else {\n\t\tif ( isset( $_REQUEST['mode'] ) && 'single' === $_REQUEST['mode'] ) {\n\t\t\t$wp_list_table = _get_list_table( 'WP_Post_Comments_List_Table', array( 'screen' => 'edit-comments' ) );\n\t\t} else {\n\t\t\t$wp_list_table = _get_list_table( 'WP_Comments_List_Table', array( 'screen' => 'edit-comments' ) );\n\t\t}\n\t\t$wp_list_table->single_row( $comment );\n\t}\n\t$comment_list_item = ob_get_clean();\n\n\t$response = array(\n\t\t'what'     => 'comment',\n\t\t'id'       => $comment->comment_ID,\n\t\t'data'     => $comment_list_item,\n\t\t'position' => $position,\n\t);\n\n\t$counts                   = wp_count_comments();\n\t$response['supplemental'] = array(\n\t\t'in_moderation'        => $counts->moderated,\n\t\t'i18n_comments_text'   => sprintf(\n\t\t\t/* translators: %s: Number of comments. */\n\t\t\t_n( '%s Comment', '%s Comments', $counts->approved ),\n\t\t\tnumber_format_i18n( $counts->approved )\n\t\t),\n\t\t'i18n_moderation_text' => sprintf(\n\t\t\t/* translators: %s: Number of comments. */\n\t\t\t_n( '%s Comment in moderation', '%s Comments in moderation', $counts->moderated ),\n\t\t\tnumber_format_i18n( $counts->moderated )\n\t\t),\n\t);\n\n\tif ( $comment_auto_approved ) {\n\t\t$response['supplemental']['parent_approved'] = $parent->comment_ID;\n\t\t$response['supplemental']['parent_post_id']  = $parent->comment_post_ID;\n\t}\n\n\t$x = new WP_Ajax_Response();\n\t$x->add( $response );\n\t$x->send();\n}\n\n/**\n * Handles editing a comment via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_edit_comment() {\n\tcheck_ajax_referer( 'replyto-comment', '_ajax_nonce-replyto-comment' );\n\n\t$comment_id = (int) $_POST['comment_ID'];\n\n\tif ( ! current_user_can( 'edit_comment', $comment_id ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tif ( '' === $_POST['content'] ) {\n\t\twp_die( __( 'Please type your comment text.' ) );\n\t}\n\n\tif ( isset( $_POST['status'] ) ) {\n\t\t$_POST['comment_status'] = $_POST['status'];\n\t}\n\n\t$updated = edit_comment();\n\tif ( is_wp_error( $updated ) ) {\n\t\twp_die( $updated->get_error_message() );\n\t}\n\n\t$position = ( isset( $_POST['position'] ) && (int) $_POST['position'] ) ? (int) $_POST['position'] : '-1';\n\t/*\n\t * Checkbox is used to differentiate between the Edit Comments screen (1)\n\t * and the Comments section on the Edit Post screen (0).\n\t */\n\t$checkbox      = ( isset( $_POST['checkbox'] ) && '1' === $_POST['checkbox'] ) ? 1 : 0;\n\t$wp_list_table = _get_list_table( $checkbox ? 'WP_Comments_List_Table' : 'WP_Post_Comments_List_Table', array( 'screen' => 'edit-comments' ) );\n\n\t$comment = get_comment( $comment_id );\n\n\tif ( empty( $comment->comment_ID ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tob_start();\n\t$wp_list_table->single_row( $comment );\n\t$comment_list_item = ob_get_clean();\n\n\t$x = new WP_Ajax_Response();\n\n\t$x->add(\n\t\tarray(\n\t\t\t'what'     => 'edit_comment',\n\t\t\t'id'       => $comment->comment_ID,\n\t\t\t'data'     => $comment_list_item,\n\t\t\t'position' => $position,\n\t\t)\n\t);\n\n\t$x->send();\n}\n\n/**\n * Handles adding a menu item via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_add_menu_item() {\n\tcheck_ajax_referer( 'add-menu_item', 'menu-settings-column-nonce' );\n\n\tif ( ! current_user_can( 'edit_theme_options' ) ) {\n\t\twp_die( -1 );\n\t}\n\n\trequire_once ABSPATH . 'wp-admin/includes/nav-menu.php';\n\n\t/*\n\t * For performance reasons, we omit some object properties from the checklist.\n\t * The following is a hacky way to restore them when adding non-custom items.\n\t */\n\t$menu_items_data = array();\n\n\tforeach ( (array) $_POST['menu-item'] as $menu_item_data ) {\n\t\tif (\n\t\t\t! empty( $menu_item_data['menu-item-type'] ) &&\n\t\t\t'custom' !== $menu_item_data['menu-item-type'] &&\n\t\t\t! empty( $menu_item_data['menu-item-object-id'] )\n\t\t) {\n\t\t\tswitch ( $menu_item_data['menu-item-type'] ) {\n\t\t\t\tcase 'post_type':\n\t\t\t\t\t$_object = get_post( $menu_item_data['menu-item-object-id'] );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'post_type_archive':\n\t\t\t\t\t$_object = get_post_type_object( $menu_item_data['menu-item-object'] );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'taxonomy':\n\t\t\t\t\t$_object = get_term( $menu_item_data['menu-item-object-id'], $menu_item_data['menu-item-object'] );\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$_menu_items = array_map( 'wp_setup_nav_menu_item', array( $_object ) );\n\t\t\t$_menu_item  = reset( $_menu_items );\n\n\t\t\t// Restore the missing menu item properties.\n\t\t\t$menu_item_data['menu-item-description'] = $_menu_item->description;\n\t\t}\n\n\t\t$menu_items_data[] = $menu_item_data;\n\t}\n\n\t$item_ids = wp_save_nav_menu_items( 0, $menu_items_data );\n\tif ( is_wp_error( $item_ids ) ) {\n\t\twp_die( 0 );\n\t}\n\n\t$menu_items = array();\n\n\tforeach ( (array) $item_ids as $menu_item_id ) {\n\t\t$menu_obj = get_post( $menu_item_id );\n\n\t\tif ( ! empty( $menu_obj->ID ) ) {\n\t\t\t$menu_obj        = wp_setup_nav_menu_item( $menu_obj );\n\t\t\t$menu_obj->title = empty( $menu_obj->title ) ? __( 'Menu Item' ) : $menu_obj->title;\n\t\t\t$menu_obj->label = $menu_obj->title; // Don't show \"(pending)\" in ajax-added items.\n\t\t\t$menu_items[]    = $menu_obj;\n\t\t}\n\t}\n\n\t/** This filter is documented in wp-admin/includes/nav-menu.php */\n\t$walker_class_name = apply_filters( 'wp_edit_nav_menu_walker', 'Walker_Nav_Menu_Edit', $_POST['menu'] );\n\n\tif ( ! class_exists( $walker_class_name ) ) {\n\t\twp_die( 0 );\n\t}\n\n\tif ( ! empty( $menu_items ) ) {\n\t\t$args = array(\n\t\t\t'after'       => '',\n\t\t\t'before'      => '',\n\t\t\t'link_after'  => '',\n\t\t\t'link_before' => '',\n\t\t\t'walker'      => new $walker_class_name(),\n\t\t);\n\n\t\techo walk_nav_menu_tree( $menu_items, 0, (object) $args );\n\t}\n\n\twp_die();\n}\n\n/**\n * Handles adding meta via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_add_meta() {\n\tcheck_ajax_referer( 'add-meta', '_ajax_nonce-add-meta' );\n\t$c    = 0;\n\t$pid  = (int) $_POST['post_id'];\n\t$post = get_post( $pid );\n\n\tif ( isset( $_POST['metakeyselect'] ) || isset( $_POST['metakeyinput'] ) ) {\n\t\tif ( ! current_user_can( 'edit_post', $pid ) ) {\n\t\t\twp_die( -1 );\n\t\t}\n\n\t\tif ( isset( $_POST['metakeyselect'] ) && '#NONE#' === $_POST['metakeyselect'] && empty( $_POST['metakeyinput'] ) ) {\n\t\t\twp_die( 1 );\n\t\t}\n\n\t\t// If the post is an autodraft, save the post as a draft and then attempt to save the meta.\n\t\tif ( 'auto-draft' === $post->post_status ) {\n\t\t\t$post_data                = array();\n\t\t\t$post_data['action']      = 'draft'; // Warning fix.\n\t\t\t$post_data['post_ID']     = $pid;\n\t\t\t$post_data['post_type']   = $post->post_type;\n\t\t\t$post_data['post_status'] = 'draft';\n\t\t\t$now                      = time();\n\n\t\t\t$post_data['post_title'] = sprintf(\n\t\t\t\t/* translators: 1: Post creation date, 2: Post creation time. */\n\t\t\t\t__( 'Draft created on %1$s at %2$s' ),\n\t\t\t\tgmdate( __( 'F j, Y' ), $now ),\n\t\t\t\tgmdate( __( 'g:i a' ), $now )\n\t\t\t);\n\n\t\t\t$pid = edit_post( $post_data );\n\n\t\t\tif ( $pid ) {\n\t\t\t\tif ( is_wp_error( $pid ) ) {\n\t\t\t\t\t$x = new WP_Ajax_Response(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'what' => 'meta',\n\t\t\t\t\t\t\t'data' => $pid,\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\t$x->send();\n\t\t\t\t}\n\n\t\t\t\t$mid = add_meta( $pid );\n\t\t\t\tif ( ! $mid ) {\n\t\t\t\t\twp_die( __( 'Please provide a custom field value.' ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twp_die( 0 );\n\t\t\t}\n\t\t} else {\n\t\t\t$mid = add_meta( $pid );\n\t\t\tif ( ! $mid ) {\n\t\t\t\twp_die( __( 'Please provide a custom field value.' ) );\n\t\t\t}\n\t\t}\n\n\t\t$meta = get_metadata_by_mid( 'post', $mid );\n\t\t$pid  = (int) $meta->post_id;\n\t\t$meta = get_object_vars( $meta );\n\n\t\t$x = new WP_Ajax_Response(\n\t\t\tarray(\n\t\t\t\t'what'         => 'meta',\n\t\t\t\t'id'           => $mid,\n\t\t\t\t'data'         => _list_meta_row( $meta, $c ),\n\t\t\t\t'position'     => 1,\n\t\t\t\t'supplemental' => array( 'postid' => $pid ),\n\t\t\t)\n\t\t);\n\t} else { // Update?\n\t\t$mid   = (int) key( $_POST['meta'] );\n\t\t$key   = wp_unslash( $_POST['meta'][ $mid ]['key'] );\n\t\t$value = wp_unslash( $_POST['meta'][ $mid ]['value'] );\n\n\t\tif ( '' === trim( $key ) ) {\n\t\t\twp_die( __( 'Please provide a custom field name.' ) );\n\t\t}\n\n\t\t$meta = get_metadata_by_mid( 'post', $mid );\n\n\t\tif ( ! $meta ) {\n\t\t\twp_die( 0 ); // If meta doesn't exist.\n\t\t}\n\n\t\tif (\n\t\t\tis_protected_meta( $meta->meta_key, 'post' ) || is_protected_meta( $key, 'post' ) ||\n\t\t\t! current_user_can( 'edit_post_meta', $meta->post_id, $meta->meta_key ) ||\n\t\t\t! current_user_can( 'edit_post_meta', $meta->post_id, $key )\n\t\t) {\n\t\t\twp_die( -1 );\n\t\t}\n\n\t\tif ( $meta->meta_value !== $value || $meta->meta_key !== $key ) {\n\t\t\t$u = update_metadata_by_mid( 'post', $mid, $value, $key );\n\t\t\tif ( ! $u ) {\n\t\t\t\twp_die( 0 ); // We know meta exists; we also know it's unchanged (or DB error, in which case there are bigger problems).\n\t\t\t}\n\t\t}\n\n\t\t$x = new WP_Ajax_Response(\n\t\t\tarray(\n\t\t\t\t'what'         => 'meta',\n\t\t\t\t'id'           => $mid,\n\t\t\t\t'old_id'       => $mid,\n\t\t\t\t'data'         => _list_meta_row(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'meta_key'   => $key,\n\t\t\t\t\t\t'meta_value' => $value,\n\t\t\t\t\t\t'meta_id'    => $mid,\n\t\t\t\t\t),\n\t\t\t\t\t$c\n\t\t\t\t),\n\t\t\t\t'position'     => 0,\n\t\t\t\t'supplemental' => array( 'postid' => $meta->post_id ),\n\t\t\t)\n\t\t);\n\t}\n\t$x->send();\n}\n\n/**\n * Handles adding a user via AJAX.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_add_user( $action ) {\n\tif ( empty( $action ) ) {\n\t\t$action = 'add-user';\n\t}\n\n\tcheck_ajax_referer( $action );\n\n\tif ( ! current_user_can( 'create_users' ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$user_id = edit_user();\n\n\tif ( ! $user_id ) {\n\t\twp_die( 0 );\n\t} elseif ( is_wp_error( $user_id ) ) {\n\t\t$x = new WP_Ajax_Response(\n\t\t\tarray(\n\t\t\t\t'what' => 'user',\n\t\t\t\t'id'   => $user_id,\n\t\t\t)\n\t\t);\n\t\t$x->send();\n\t}\n\n\t$user_object   = get_userdata( $user_id );\n\t$wp_list_table = _get_list_table( 'WP_Users_List_Table' );\n\n\t$role = current( $user_object->roles );\n\n\t$x = new WP_Ajax_Response(\n\t\tarray(\n\t\t\t'what'         => 'user',\n\t\t\t'id'           => $user_id,\n\t\t\t'data'         => $wp_list_table->single_row( $user_object, '', $role ),\n\t\t\t'supplemental' => array(\n\t\t\t\t'show-link' => sprintf(\n\t\t\t\t\t/* translators: %s: The new user. */\n\t\t\t\t\t__( 'User %s added' ),\n\t\t\t\t\t'<a href=\"#user-' . $user_id . '\">' . $user_object->user_login . '</a>'\n\t\t\t\t),\n\t\t\t\t'role'      => $role,\n\t\t\t),\n\t\t)\n\t);\n\t$x->send();\n}\n\n/**\n * Handles closed post boxes via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_closed_postboxes() {\n\tcheck_ajax_referer( 'closedpostboxes', 'closedpostboxesnonce' );\n\t$closed = isset( $_POST['closed'] ) ? explode( ',', $_POST['closed'] ) : array();\n\t$closed = array_filter( $closed );\n\n\t$hidden = isset( $_POST['hidden'] ) ? explode( ',', $_POST['hidden'] ) : array();\n\t$hidden = array_filter( $hidden );\n\n\t$page = isset( $_POST['page'] ) ? $_POST['page'] : '';\n\n\tif ( sanitize_key( $page ) !== $page ) {\n\t\twp_die( 0 );\n\t}\n\n\t$user = wp_get_current_user();\n\tif ( ! $user ) {\n\t\twp_die( -1 );\n\t}\n\n\tif ( is_array( $closed ) ) {\n\t\tupdate_user_meta( $user->ID, \"closedpostboxes_$page\", $closed );\n\t}\n\n\tif ( is_array( $hidden ) ) {\n\t\t// Postboxes that are always shown.\n\t\t$hidden = array_diff( $hidden, array( 'submitdiv', 'linksubmitdiv', 'manage-menu', 'create-menu' ) );\n\t\tupdate_user_meta( $user->ID, \"metaboxhidden_$page\", $hidden );\n\t}\n\n\twp_die( 1 );\n}\n\n/**\n * Handles hidden columns via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_hidden_columns() {\n\tcheck_ajax_referer( 'screen-options-nonce', 'screenoptionnonce' );\n\t$page = isset( $_POST['page'] ) ? $_POST['page'] : '';\n\n\tif ( sanitize_key( $page ) !== $page ) {\n\t\twp_die( 0 );\n\t}\n\n\t$user = wp_get_current_user();\n\tif ( ! $user ) {\n\t\twp_die( -1 );\n\t}\n\n\t$hidden = ! empty( $_POST['hidden'] ) ? explode( ',', $_POST['hidden'] ) : array();\n\tupdate_user_meta( $user->ID, \"manage{$page}columnshidden\", $hidden );\n\n\twp_die( 1 );\n}\n\n/**\n * Handles updating whether to display the welcome panel via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_update_welcome_panel() {\n\tcheck_ajax_referer( 'welcome-panel-nonce', 'welcomepanelnonce' );\n\n\tif ( ! current_user_can( 'edit_theme_options' ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tupdate_user_meta( get_current_user_id(), 'show_welcome_panel', empty( $_POST['visible'] ) ? 0 : 1 );\n\n\twp_die( 1 );\n}\n\n/**\n * Handles for retrieving menu meta boxes via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_menu_get_metabox() {\n\tif ( ! current_user_can( 'edit_theme_options' ) ) {\n\t\twp_die( -1 );\n\t}\n\n\trequire_once ABSPATH . 'wp-admin/includes/nav-menu.php';\n\n\tif ( isset( $_POST['item-type'] ) && 'post_type' === $_POST['item-type'] ) {\n\t\t$type     = 'posttype';\n\t\t$callback = 'wp_nav_menu_item_post_type_meta_box';\n\t\t$items    = (array) get_post_types( array( 'show_in_nav_menus' => true ), 'object' );\n\t} elseif ( isset( $_POST['item-type'] ) && 'taxonomy' === $_POST['item-type'] ) {\n\t\t$type     = 'taxonomy';\n\t\t$callback = 'wp_nav_menu_item_taxonomy_meta_box';\n\t\t$items    = (array) get_taxonomies( array( 'show_ui' => true ), 'object' );\n\t}\n\n\tif ( ! empty( $_POST['item-object'] ) && isset( $items[ $_POST['item-object'] ] ) ) {\n\t\t$menus_meta_box_object = $items[ $_POST['item-object'] ];\n\n\t\t/** This filter is documented in wp-admin/includes/nav-menu.php */\n\t\t$item = apply_filters( 'nav_menu_meta_box_object', $menus_meta_box_object );\n\n\t\t$box_args = array(\n\t\t\t'id'       => 'add-' . $item->name,\n\t\t\t'title'    => $item->labels->name,\n\t\t\t'callback' => $callback,\n\t\t\t'args'     => $item,\n\t\t);\n\n\t\tob_start();\n\t\t$callback( null, $box_args );\n\n\t\t$markup = ob_get_clean();\n\n\t\techo wp_json_encode(\n\t\t\tarray(\n\t\t\t\t'replace-id' => $type . '-' . $item->name,\n\t\t\t\t'markup'     => $markup,\n\t\t\t)\n\t\t);\n\t}\n\n\twp_die();\n}\n\n/**\n * Handles internal linking via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_wp_link_ajax() {\n\tcheck_ajax_referer( 'internal-linking', '_ajax_linking_nonce' );\n\n\t$args = array();\n\n\tif ( isset( $_POST['search'] ) ) {\n\t\t$args['s'] = wp_unslash( $_POST['search'] );\n\t}\n\n\tif ( isset( $_POST['term'] ) ) {\n\t\t$args['s'] = wp_unslash( $_POST['term'] );\n\t}\n\n\t$args['pagenum'] = ! empty( $_POST['page'] ) ? absint( $_POST['page'] ) : 1;\n\n\tif ( ! class_exists( '_WP_Editors', false ) ) {\n\t\trequire ABSPATH . WPINC . '/class-wp-editor.php';\n\t}\n\n\t$results = _WP_Editors::wp_link_query( $args );\n\n\tif ( ! isset( $results ) ) {\n\t\twp_die( 0 );\n\t}\n\n\techo wp_json_encode( $results );\n\techo \"\\n\";\n\n\twp_die();\n}\n\n/**\n * Handles saving menu locations via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_menu_locations_save() {\n\tif ( ! current_user_can( 'edit_theme_options' ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tcheck_ajax_referer( 'add-menu_item', 'menu-settings-column-nonce' );\n\n\tif ( ! isset( $_POST['menu-locations'] ) ) {\n\t\twp_die( 0 );\n\t}\n\n\tset_theme_mod( 'nav_menu_locations', array_map( 'absint', $_POST['menu-locations'] ) );\n\twp_die( 1 );\n}\n\n/**\n * Handles saving the meta box order via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_meta_box_order() {\n\tcheck_ajax_referer( 'meta-box-order' );\n\t$order        = isset( $_POST['order'] ) ? (array) $_POST['order'] : false;\n\t$page_columns = isset( $_POST['page_columns'] ) ? $_POST['page_columns'] : 'auto';\n\n\tif ( 'auto' !== $page_columns ) {\n\t\t$page_columns = (int) $page_columns;\n\t}\n\n\t$page = isset( $_POST['page'] ) ? $_POST['page'] : '';\n\n\tif ( sanitize_key( $page ) !== $page ) {\n\t\twp_die( 0 );\n\t}\n\n\t$user = wp_get_current_user();\n\tif ( ! $user ) {\n\t\twp_die( -1 );\n\t}\n\n\tif ( $order ) {\n\t\tupdate_user_meta( $user->ID, \"meta-box-order_$page\", $order );\n\t}\n\n\tif ( $page_columns ) {\n\t\tupdate_user_meta( $user->ID, \"screen_layout_$page\", $page_columns );\n\t}\n\n\twp_send_json_success();\n}\n\n/**\n * Handles menu quick searching via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_menu_quick_search() {\n\tif ( ! current_user_can( 'edit_theme_options' ) ) {\n\t\twp_die( -1 );\n\t}\n\n\trequire_once ABSPATH . 'wp-admin/includes/nav-menu.php';\n\n\t_wp_ajax_menu_quick_search( $_POST );\n\n\twp_die();\n}\n\n/**\n * Handles retrieving a permalink via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_get_permalink() {\n\tcheck_ajax_referer( 'getpermalink', 'getpermalinknonce' );\n\t$post_id = isset( $_POST['post_id'] ) ? (int) $_POST['post_id'] : 0;\n\twp_die( get_preview_post_link( $post_id ) );\n}\n\n/**\n * Handles retrieving a sample permalink via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_sample_permalink() {\n\tcheck_ajax_referer( 'samplepermalink', 'samplepermalinknonce' );\n\t$post_id = isset( $_POST['post_id'] ) ? (int) $_POST['post_id'] : 0;\n\t$title   = isset( $_POST['new_title'] ) ? $_POST['new_title'] : '';\n\t$slug    = isset( $_POST['new_slug'] ) ? $_POST['new_slug'] : null;\n\twp_die( get_sample_permalink_html( $post_id, $title, $slug ) );\n}\n\n/**\n * Handles Quick Edit saving a post from a list table via AJAX.\n *\n * @since 3.1.0\n *\n * @global string $mode List table view mode.\n */\nfunction wp_ajax_inline_save() {\n\tglobal $mode;\n\n\tcheck_ajax_referer( 'inlineeditnonce', '_inline_edit' );\n\n\tif ( ! isset( $_POST['post_ID'] ) || ! (int) $_POST['post_ID'] ) {\n\t\twp_die();\n\t}\n\n\t$post_id = (int) $_POST['post_ID'];\n\n\tif ( 'page' === $_POST['post_type'] ) {\n\t\tif ( ! current_user_can( 'edit_page', $post_id ) ) {\n\t\t\twp_die( __( 'Sorry, you are not allowed to edit this page.' ) );\n\t\t}\n\t} else {\n\t\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\t\twp_die( __( 'Sorry, you are not allowed to edit this post.' ) );\n\t\t}\n\t}\n\n\t$last = wp_check_post_lock( $post_id );\n\tif ( $last ) {\n\t\t$last_user      = get_userdata( $last );\n\t\t$last_user_name = $last_user ? $last_user->display_name : __( 'Someone' );\n\n\t\t/* translators: %s: User's display name. */\n\t\t$msg_template = __( 'Saving is disabled: %s is currently editing this post.' );\n\n\t\tif ( 'page' === $_POST['post_type'] ) {\n\t\t\t/* translators: %s: User's display name. */\n\t\t\t$msg_template = __( 'Saving is disabled: %s is currently editing this page.' );\n\t\t}\n\n\t\tprintf( $msg_template, esc_html( $last_user_name ) );\n\t\twp_die();\n\t}\n\n\t$data = &$_POST;\n\n\t$post = get_post( $post_id, ARRAY_A );\n\n\t// Since it's coming from the database.\n\t$post = wp_slash( $post );\n\n\t$data['content'] = $post['post_content'];\n\t$data['excerpt'] = $post['post_excerpt'];\n\n\t// Rename.\n\t$data['user_ID'] = get_current_user_id();\n\n\tif ( isset( $data['post_parent'] ) ) {\n\t\t$data['parent_id'] = $data['post_parent'];\n\t}\n\n\t// Status.\n\tif ( isset( $data['keep_private'] ) && 'private' === $data['keep_private'] ) {\n\t\t$data['visibility']  = 'private';\n\t\t$data['post_status'] = 'private';\n\t} else {\n\t\t$data['post_status'] = $data['_status'];\n\t}\n\n\tif ( empty( $data['comment_status'] ) ) {\n\t\t$data['comment_status'] = 'closed';\n\t}\n\n\tif ( empty( $data['ping_status'] ) ) {\n\t\t$data['ping_status'] = 'closed';\n\t}\n\n\t// Exclude terms from taxonomies that are not supposed to appear in Quick Edit.\n\tif ( ! empty( $data['tax_input'] ) ) {\n\t\tforeach ( $data['tax_input'] as $taxonomy => $terms ) {\n\t\t\t$tax_object = get_taxonomy( $taxonomy );\n\t\t\t/** This filter is documented in wp-admin/includes/class-wp-posts-list-table.php */\n\t\t\tif ( ! apply_filters( 'quick_edit_show_taxonomy', $tax_object->show_in_quick_edit, $taxonomy, $post['post_type'] ) ) {\n\t\t\t\tunset( $data['tax_input'][ $taxonomy ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Hack: wp_unique_post_slug() doesn't work for drafts, so we will fake that our post is published.\n\tif ( ! empty( $data['post_name'] ) && in_array( $post['post_status'], array( 'draft', 'pending' ), true ) ) {\n\t\t$post['post_status'] = 'publish';\n\t\t$data['post_name']   = wp_unique_post_slug( $data['post_name'], $post['ID'], $post['post_status'], $post['post_type'], $post['post_parent'] );\n\t}\n\n\t// Update the post.\n\tedit_post();\n\n\t$wp_list_table = _get_list_table( 'WP_Posts_List_Table', array( 'screen' => $_POST['screen'] ) );\n\n\t$mode = 'excerpt' === $_POST['post_view'] ? 'excerpt' : 'list';\n\n\t$level = 0;\n\tif ( is_post_type_hierarchical( $wp_list_table->screen->post_type ) ) {\n\t\t$request_post = array( get_post( $_POST['post_ID'] ) );\n\t\t$parent       = $request_post[0]->post_parent;\n\n\t\twhile ( $parent > 0 ) {\n\t\t\t$parent_post = get_post( $parent );\n\t\t\t$parent      = $parent_post->post_parent;\n\t\t\t++$level;\n\t\t}\n\t}\n\n\t$wp_list_table->display_rows( array( get_post( $_POST['post_ID'] ) ), $level );\n\n\twp_die();\n}\n\n/**\n * Handles Quick Edit saving for a term via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_inline_save_tax() {\n\tcheck_ajax_referer( 'taxinlineeditnonce', '_inline_edit' );\n\n\t$taxonomy        = sanitize_key( $_POST['taxonomy'] );\n\t$taxonomy_object = get_taxonomy( $taxonomy );\n\n\tif ( ! $taxonomy_object ) {\n\t\twp_die( 0 );\n\t}\n\n\tif ( ! isset( $_POST['tax_ID'] ) || ! (int) $_POST['tax_ID'] ) {\n\t\twp_die( -1 );\n\t}\n\n\t$id = (int) $_POST['tax_ID'];\n\n\tif ( ! current_user_can( 'edit_term', $id ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$wp_list_table = _get_list_table( 'WP_Terms_List_Table', array( 'screen' => 'edit-' . $taxonomy ) );\n\n\t$tag                  = get_term( $id, $taxonomy );\n\t$_POST['description'] = $tag->description;\n\n\t$updated = wp_update_term( $id, $taxonomy, $_POST );\n\n\tif ( $updated && ! is_wp_error( $updated ) ) {\n\t\t$tag = get_term( $updated['term_id'], $taxonomy );\n\t\tif ( ! $tag || is_wp_error( $tag ) ) {\n\t\t\tif ( is_wp_error( $tag ) && $tag->get_error_message() ) {\n\t\t\t\twp_die( $tag->get_error_message() );\n\t\t\t}\n\t\t\twp_die( __( 'Item not updated.' ) );\n\t\t}\n\t} else {\n\t\tif ( is_wp_error( $updated ) && $updated->get_error_message() ) {\n\t\t\twp_die( $updated->get_error_message() );\n\t\t}\n\t\twp_die( __( 'Item not updated.' ) );\n\t}\n\n\t$level  = 0;\n\t$parent = $tag->parent;\n\n\twhile ( $parent > 0 ) {\n\t\t$parent_tag = get_term( $parent, $taxonomy );\n\t\t$parent     = $parent_tag->parent;\n\t\t++$level;\n\t}\n\n\t$wp_list_table->single_row( $tag, $level );\n\twp_die();\n}\n\n/**\n * Handles querying posts for the Find Posts modal via AJAX.\n *\n * @see window.findPosts\n *\n * @since 3.1.0\n */\nfunction wp_ajax_find_posts() {\n\tcheck_ajax_referer( 'find-posts' );\n\n\t$post_types = get_post_types( array( 'public' => true ), 'objects' );\n\tunset( $post_types['attachment'] );\n\n\t$args = array(\n\t\t'post_type'      => array_keys( $post_types ),\n\t\t'post_status'    => 'any',\n\t\t'posts_per_page' => 50,\n\t);\n\n\t$search = wp_unslash( $_POST['ps'] );\n\n\tif ( '' !== $search ) {\n\t\t$args['s'] = $search;\n\t}\n\n\t$posts = get_posts( $args );\n\n\tif ( ! $posts ) {\n\t\twp_send_json_error( __( 'No items found.' ) );\n\t}\n\n\t$html = '<table class=\"widefat\"><thead><tr><th class=\"found-radio\"><br /></th><th>' . __( 'Title' ) . '</th><th class=\"no-break\">' . __( 'Type' ) . '</th><th class=\"no-break\">' . __( 'Date' ) . '</th><th class=\"no-break\">' . __( 'Status' ) . '</th></tr></thead><tbody>';\n\t$alt  = '';\n\tforeach ( $posts as $post ) {\n\t\t$title = trim( $post->post_title ) ? $post->post_title : __( '(no title)' );\n\t\t$alt   = ( 'alternate' === $alt ) ? '' : 'alternate';\n\n\t\tswitch ( $post->post_status ) {\n\t\t\tcase 'publish':\n\t\t\tcase 'private':\n\t\t\t\t$stat = __( 'Published' );\n\t\t\t\tbreak;\n\t\t\tcase 'future':\n\t\t\t\t$stat = __( 'Scheduled' );\n\t\t\t\tbreak;\n\t\t\tcase 'pending':\n\t\t\t\t$stat = __( 'Pending Review' );\n\t\t\t\tbreak;\n\t\t\tcase 'draft':\n\t\t\t\t$stat = __( 'Draft' );\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ( '0000-00-00 00:00:00' === $post->post_date ) {\n\t\t\t$time = '';\n\t\t} else {\n\t\t\t/* translators: Date format in table columns, see https://www.php.net/manual/datetime.format.php */\n\t\t\t$time = mysql2date( __( 'Y/m/d' ), $post->post_date );\n\t\t}\n\n\t\t$html .= '<tr class=\"' . trim( 'found-posts ' . $alt ) . '\"><td class=\"found-radio\"><input type=\"radio\" id=\"found-' . $post->ID . '\" name=\"found_post_id\" value=\"' . esc_attr( $post->ID ) . '\"></td>';\n\t\t$html .= '<td><label for=\"found-' . $post->ID . '\">' . esc_html( $title ) . '</label></td><td class=\"no-break\">' . esc_html( $post_types[ $post->post_type ]->labels->singular_name ) . '</td><td class=\"no-break\">' . esc_html( $time ) . '</td><td class=\"no-break\">' . esc_html( $stat ) . ' </td></tr>' . \"\\n\\n\";\n\t}\n\n\t$html .= '</tbody></table>';\n\n\twp_send_json_success( $html );\n}\n\n/**\n * Handles saving the widgets order via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_widgets_order() {\n\tcheck_ajax_referer( 'save-sidebar-widgets', 'savewidgets' );\n\n\tif ( ! current_user_can( 'edit_theme_options' ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tunset( $_POST['savewidgets'], $_POST['action'] );\n\n\t// Save widgets order for all sidebars.\n\tif ( is_array( $_POST['sidebars'] ) ) {\n\t\t$sidebars = array();\n\n\t\tforeach ( wp_unslash( $_POST['sidebars'] ) as $key => $val ) {\n\t\t\t$sb = array();\n\n\t\t\tif ( ! empty( $val ) ) {\n\t\t\t\t$val = explode( ',', $val );\n\n\t\t\t\tforeach ( $val as $k => $v ) {\n\t\t\t\t\tif ( ! str_contains( $v, 'widget-' ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$sb[ $k ] = substr( $v, strpos( $v, '_' ) + 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t\t$sidebars[ $key ] = $sb;\n\t\t}\n\n\t\twp_set_sidebars_widgets( $sidebars );\n\t\twp_die( 1 );\n\t}\n\n\twp_die( -1 );\n}\n\n/**\n * Handles saving a widget via AJAX.\n *\n * @since 3.1.0\n *\n * @global array $wp_registered_widgets\n * @global array $wp_registered_widget_controls\n * @global array $wp_registered_widget_updates\n */\nfunction wp_ajax_save_widget() {\n\tglobal $wp_registered_widgets, $wp_registered_widget_controls, $wp_registered_widget_updates;\n\n\tcheck_ajax_referer( 'save-sidebar-widgets', 'savewidgets' );\n\n\tif ( ! current_user_can( 'edit_theme_options' ) || ! isset( $_POST['id_base'] ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tunset( $_POST['savewidgets'], $_POST['action'] );\n\n\t/**\n\t * Fires early when editing the widgets displayed in sidebars.\n\t *\n\t * @since 2.8.0\n\t */\n\tdo_action( 'load-widgets.php' ); // phpcs:ignore WordPress.NamingConventions.ValidHookName.UseUnderscores\n\n\t/**\n\t * Fires early when editing the widgets displayed in sidebars.\n\t *\n\t * @since 2.8.0\n\t */\n\tdo_action( 'widgets.php' ); // phpcs:ignore WordPress.NamingConventions.ValidHookName.UseUnderscores\n\n\t/** This action is documented in wp-admin/widgets.php */\n\tdo_action( 'sidebar_admin_setup' );\n\n\t$id_base      = wp_unslash( $_POST['id_base'] );\n\t$widget_id    = wp_unslash( $_POST['widget-id'] );\n\t$sidebar_id   = $_POST['sidebar'];\n\t$multi_number = ! empty( $_POST['multi_number'] ) ? (int) $_POST['multi_number'] : 0;\n\t$settings     = isset( $_POST[ 'widget-' . $id_base ] ) && is_array( $_POST[ 'widget-' . $id_base ] ) ? $_POST[ 'widget-' . $id_base ] : false;\n\t$error        = '<p>' . __( 'An error has occurred. Please reload the page and try again.' ) . '</p>';\n\n\t$sidebars = wp_get_sidebars_widgets();\n\t$sidebar  = isset( $sidebars[ $sidebar_id ] ) ? $sidebars[ $sidebar_id ] : array();\n\n\t// Delete.\n\tif ( isset( $_POST['delete_widget'] ) && $_POST['delete_widget'] ) {\n\n\t\tif ( ! isset( $wp_registered_widgets[ $widget_id ] ) ) {\n\t\t\twp_die( $error );\n\t\t}\n\n\t\t$sidebar = array_diff( $sidebar, array( $widget_id ) );\n\t\t$_POST   = array(\n\t\t\t'sidebar'            => $sidebar_id,\n\t\t\t'widget-' . $id_base => array(),\n\t\t\t'the-widget-id'      => $widget_id,\n\t\t\t'delete_widget'      => '1',\n\t\t);\n\n\t\t/** This action is documented in wp-admin/widgets.php */\n\t\tdo_action( 'delete_widget', $widget_id, $sidebar_id, $id_base );\n\n\t} elseif ( $settings && preg_match( '/__i__|%i%/', key( $settings ) ) ) {\n\t\tif ( ! $multi_number ) {\n\t\t\twp_die( $error );\n\t\t}\n\n\t\t$_POST[ 'widget-' . $id_base ] = array( $multi_number => reset( $settings ) );\n\t\t$widget_id                     = $id_base . '-' . $multi_number;\n\t\t$sidebar[]                     = $widget_id;\n\t}\n\t$_POST['widget-id'] = $sidebar;\n\n\tforeach ( (array) $wp_registered_widget_updates as $name => $control ) {\n\n\t\tif ( $name === $id_base ) {\n\t\t\tif ( ! is_callable( $control['callback'] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tob_start();\n\t\t\t\tcall_user_func_array( $control['callback'], $control['params'] );\n\t\t\tob_end_clean();\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif ( isset( $_POST['delete_widget'] ) && $_POST['delete_widget'] ) {\n\t\t$sidebars[ $sidebar_id ] = $sidebar;\n\t\twp_set_sidebars_widgets( $sidebars );\n\t\techo \"deleted:$widget_id\";\n\t\twp_die();\n\t}\n\n\tif ( ! empty( $_POST['add_new'] ) ) {\n\t\twp_die();\n\t}\n\n\t$form = $wp_registered_widget_controls[ $widget_id ];\n\tif ( $form ) {\n\t\tcall_user_func_array( $form['callback'], $form['params'] );\n\t}\n\n\twp_die();\n}\n\n/**\n * Handles updating a widget via AJAX.\n *\n * @since 3.9.0\n *\n * @global WP_Customize_Manager $wp_customize\n */\nfunction wp_ajax_update_widget() {\n\tglobal $wp_customize;\n\t$wp_customize->widgets->wp_ajax_update_widget();\n}\n\n/**\n * Handles removing inactive widgets via AJAX.\n *\n * @since 4.4.0\n */\nfunction wp_ajax_delete_inactive_widgets() {\n\tcheck_ajax_referer( 'remove-inactive-widgets', 'removeinactivewidgets' );\n\n\tif ( ! current_user_can( 'edit_theme_options' ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tunset( $_POST['removeinactivewidgets'], $_POST['action'] );\n\t/** This action is documented in wp-admin/includes/ajax-actions.php */\n\tdo_action( 'load-widgets.php' ); // phpcs:ignore WordPress.NamingConventions.ValidHookName.UseUnderscores\n\t/** This action is documented in wp-admin/includes/ajax-actions.php */\n\tdo_action( 'widgets.php' ); // phpcs:ignore WordPress.NamingConventions.ValidHookName.UseUnderscores\n\t/** This action is documented in wp-admin/widgets.php */\n\tdo_action( 'sidebar_admin_setup' );\n\n\t$sidebars_widgets = wp_get_sidebars_widgets();\n\n\tforeach ( $sidebars_widgets['wp_inactive_widgets'] as $key => $widget_id ) {\n\t\t$pieces       = explode( '-', $widget_id );\n\t\t$multi_number = array_pop( $pieces );\n\t\t$id_base      = implode( '-', $pieces );\n\t\t$widget       = get_option( 'widget_' . $id_base );\n\t\tunset( $widget[ $multi_number ] );\n\t\tupdate_option( 'widget_' . $id_base, $widget );\n\t\tunset( $sidebars_widgets['wp_inactive_widgets'][ $key ] );\n\t}\n\n\twp_set_sidebars_widgets( $sidebars_widgets );\n\n\twp_die();\n}\n\n/**\n * Handles creating missing image sub-sizes for just uploaded images via AJAX.\n *\n * @since 5.3.0\n */\nfunction wp_ajax_media_create_image_subsizes() {\n\tcheck_ajax_referer( 'media-form' );\n\n\tif ( ! current_user_can( 'upload_files' ) ) {\n\t\twp_send_json_error( array( 'message' => __( 'Sorry, you are not allowed to upload files.' ) ) );\n\t}\n\n\tif ( empty( $_POST['attachment_id'] ) ) {\n\t\twp_send_json_error( array( 'message' => __( 'Upload failed. Please reload and try again.' ) ) );\n\t}\n\n\t$attachment_id = (int) $_POST['attachment_id'];\n\n\tif ( ! empty( $_POST['_wp_upload_failed_cleanup'] ) ) {\n\t\t// Upload failed. Cleanup.\n\t\tif ( wp_attachment_is_image( $attachment_id ) && current_user_can( 'delete_post', $attachment_id ) ) {\n\t\t\t$attachment = get_post( $attachment_id );\n\n\t\t\t// Created at most 10 min ago.\n\t\t\tif ( $attachment && ( time() - strtotime( $attachment->post_date_gmt ) < 600 ) ) {\n\t\t\t\twp_delete_attachment( $attachment_id, true );\n\t\t\t\twp_send_json_success();\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t * Set a custom header with the attachment_id.\n\t * Used by the browser/client to resume creating image sub-sizes after a PHP fatal error.\n\t */\n\tif ( ! headers_sent() ) {\n\t\theader( 'X-WP-Upload-Attachment-ID: ' . $attachment_id );\n\t}\n\n\t/*\n\t * This can still be pretty slow and cause timeout or out of memory errors.\n\t * The js that handles the response would need to also handle HTTP 500 errors.\n\t */\n\twp_update_image_subsizes( $attachment_id );\n\n\tif ( ! empty( $_POST['_legacy_support'] ) ) {\n\t\t// The old (inline) uploader. Only needs the attachment_id.\n\t\t$response = array( 'id' => $attachment_id );\n\t} else {\n\t\t// Media modal and Media Library grid view.\n\t\t$response = wp_prepare_attachment_for_js( $attachment_id );\n\n\t\tif ( ! $response ) {\n\t\t\twp_send_json_error( array( 'message' => __( 'Upload failed.' ) ) );\n\t\t}\n\t}\n\n\t// At this point the image has been uploaded successfully.\n\twp_send_json_success( $response );\n}\n\n/**\n * Handles uploading attachments via AJAX.\n *\n * @since 3.3.0\n */\nfunction wp_ajax_upload_attachment() {\n\tcheck_ajax_referer( 'media-form' );\n\t/*\n\t * This function does not use wp_send_json_success() / wp_send_json_error()\n\t * as the html4 Plupload handler requires a text/html Content-Type for older IE.\n\t * See https://core.trac.wordpress.org/ticket/31037\n\t */\n\n\tif ( ! current_user_can( 'upload_files' ) ) {\n\t\techo wp_json_encode(\n\t\t\tarray(\n\t\t\t\t'success' => false,\n\t\t\t\t'data'    => array(\n\t\t\t\t\t'message'  => __( 'Sorry, you are not allowed to upload files.' ),\n\t\t\t\t\t'filename' => esc_html( $_FILES['async-upload']['name'] ),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\n\t\twp_die();\n\t}\n\n\tif ( isset( $_REQUEST['post_id'] ) ) {\n\t\t$post_id = $_REQUEST['post_id'];\n\n\t\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\t\techo wp_json_encode(\n\t\t\t\tarray(\n\t\t\t\t\t'success' => false,\n\t\t\t\t\t'data'    => array(\n\t\t\t\t\t\t'message'  => __( 'Sorry, you are not allowed to attach files to this post.' ),\n\t\t\t\t\t\t'filename' => esc_html( $_FILES['async-upload']['name'] ),\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t);\n\n\t\t\twp_die();\n\t\t}\n\t} else {\n\t\t$post_id = null;\n\t}\n\n\t$post_data = ! empty( $_REQUEST['post_data'] ) ? _wp_get_allowed_postdata( _wp_translate_postdata( false, (array) $_REQUEST['post_data'] ) ) : array();\n\n\tif ( is_wp_error( $post_data ) ) {\n\t\twp_die( $post_data->get_error_message() );\n\t}\n\n\t// If the context is custom header or background, make sure the uploaded file is an image.\n\tif ( isset( $post_data['context'] ) && in_array( $post_data['context'], array( 'custom-header', 'custom-background' ), true ) ) {\n\t\t$wp_filetype = wp_check_filetype_and_ext( $_FILES['async-upload']['tmp_name'], $_FILES['async-upload']['name'] );\n\n\t\tif ( ! wp_match_mime_types( 'image', $wp_filetype['type'] ) ) {\n\t\t\techo wp_json_encode(\n\t\t\t\tarray(\n\t\t\t\t\t'success' => false,\n\t\t\t\t\t'data'    => array(\n\t\t\t\t\t\t'message'  => __( 'The uploaded file is not a valid image. Please try again.' ),\n\t\t\t\t\t\t'filename' => esc_html( $_FILES['async-upload']['name'] ),\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t);\n\n\t\t\twp_die();\n\t\t}\n\t}\n\n\t$attachment_id = media_handle_upload( 'async-upload', $post_id, $post_data );\n\n\tif ( is_wp_error( $attachment_id ) ) {\n\t\techo wp_json_encode(\n\t\t\tarray(\n\t\t\t\t'success' => false,\n\t\t\t\t'data'    => array(\n\t\t\t\t\t'message'  => $attachment_id->get_error_message(),\n\t\t\t\t\t'filename' => esc_html( $_FILES['async-upload']['name'] ),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\n\t\twp_die();\n\t}\n\n\tif ( isset( $post_data['context'] ) && isset( $post_data['theme'] ) ) {\n\t\tif ( 'custom-background' === $post_data['context'] ) {\n\t\t\tupdate_post_meta( $attachment_id, '_wp_attachment_is_custom_background', $post_data['theme'] );\n\t\t}\n\n\t\tif ( 'custom-header' === $post_data['context'] ) {\n\t\t\tupdate_post_meta( $attachment_id, '_wp_attachment_is_custom_header', $post_data['theme'] );\n\t\t}\n\t}\n\n\t$attachment = wp_prepare_attachment_for_js( $attachment_id );\n\tif ( ! $attachment ) {\n\t\twp_die();\n\t}\n\n\techo wp_json_encode(\n\t\tarray(\n\t\t\t'success' => true,\n\t\t\t'data'    => $attachment,\n\t\t)\n\t);\n\n\twp_die();\n}\n\n/**\n * Handles image editing via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_image_editor() {\n\t$attachment_id = (int) $_POST['postid'];\n\n\tif ( empty( $attachment_id ) || ! current_user_can( 'edit_post', $attachment_id ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tcheck_ajax_referer( \"image_editor-$attachment_id\" );\n\trequire_once ABSPATH . 'wp-admin/includes/image-edit.php';\n\n\t$msg = false;\n\n\tswitch ( $_POST['do'] ) {\n\t\tcase 'save':\n\t\t\t$msg = wp_save_image( $attachment_id );\n\t\t\tif ( ! empty( $msg->error ) ) {\n\t\t\t\twp_send_json_error( $msg );\n\t\t\t}\n\n\t\t\twp_send_json_success( $msg );\n\t\t\tbreak;\n\t\tcase 'scale':\n\t\t\t$msg = wp_save_image( $attachment_id );\n\t\t\tbreak;\n\t\tcase 'restore':\n\t\t\t$msg = wp_restore_image( $attachment_id );\n\t\t\tbreak;\n\t}\n\n\tob_start();\n\twp_image_editor( $attachment_id, $msg );\n\t$html = ob_get_clean();\n\n\tif ( ! empty( $msg->error ) ) {\n\t\twp_send_json_error(\n\t\t\tarray(\n\t\t\t\t'message' => $msg,\n\t\t\t\t'html'    => $html,\n\t\t\t)\n\t\t);\n\t}\n\n\twp_send_json_success(\n\t\tarray(\n\t\t\t'message' => $msg,\n\t\t\t'html'    => $html,\n\t\t)\n\t);\n}\n\n/**\n * Handles setting the featured image via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_set_post_thumbnail() {\n\t$json = ! empty( $_REQUEST['json'] ); // New-style request.\n\n\t$post_id = (int) $_POST['post_id'];\n\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$thumbnail_id = (int) $_POST['thumbnail_id'];\n\n\tif ( $json ) {\n\t\tcheck_ajax_referer( \"update-post_$post_id\" );\n\t} else {\n\t\tcheck_ajax_referer( \"set_post_thumbnail-$post_id\" );\n\t}\n\n\tif ( -1 === $thumbnail_id ) {\n\t\tif ( delete_post_thumbnail( $post_id ) ) {\n\t\t\t$return = _wp_post_thumbnail_html( null, $post_id );\n\t\t\t$json ? wp_send_json_success( $return ) : wp_die( $return );\n\t\t} else {\n\t\t\twp_die( 0 );\n\t\t}\n\t}\n\n\tif ( set_post_thumbnail( $post_id, $thumbnail_id ) ) {\n\t\t$return = _wp_post_thumbnail_html( $thumbnail_id, $post_id );\n\t\t$json ? wp_send_json_success( $return ) : wp_die( $return );\n\t}\n\n\twp_die( 0 );\n}\n\n/**\n * Handles retrieving HTML for the featured image via AJAX.\n *\n * @since 4.6.0\n */\nfunction wp_ajax_get_post_thumbnail_html() {\n\t$post_id = (int) $_POST['post_id'];\n\n\tcheck_ajax_referer( \"update-post_$post_id\" );\n\n\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$thumbnail_id = (int) $_POST['thumbnail_id'];\n\n\t// For backward compatibility, -1 refers to no featured image.\n\tif ( -1 === $thumbnail_id ) {\n\t\t$thumbnail_id = null;\n\t}\n\n\t$return = _wp_post_thumbnail_html( $thumbnail_id, $post_id );\n\twp_send_json_success( $return );\n}\n\n/**\n * Handles setting the featured image for an attachment via AJAX.\n *\n * @since 4.0.0\n *\n * @see set_post_thumbnail()\n */\nfunction wp_ajax_set_attachment_thumbnail() {\n\tif ( empty( $_POST['urls'] ) || ! is_array( $_POST['urls'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$thumbnail_id = (int) $_POST['thumbnail_id'];\n\tif ( empty( $thumbnail_id ) ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( false === check_ajax_referer( 'set-attachment-thumbnail', '_ajax_nonce', false ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$post_ids = array();\n\t// For each URL, try to find its corresponding post ID.\n\tforeach ( $_POST['urls'] as $url ) {\n\t\t$post_id = attachment_url_to_postid( $url );\n\t\tif ( ! empty( $post_id ) ) {\n\t\t\t$post_ids[] = $post_id;\n\t\t}\n\t}\n\n\tif ( empty( $post_ids ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$success = 0;\n\t// For each found attachment, set its thumbnail.\n\tforeach ( $post_ids as $post_id ) {\n\t\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( set_post_thumbnail( $post_id, $thumbnail_id ) ) {\n\t\t\t++$success;\n\t\t}\n\t}\n\n\tif ( 0 === $success ) {\n\t\twp_send_json_error();\n\t} else {\n\t\twp_send_json_success();\n\t}\n\n\twp_send_json_error();\n}\n\n/**\n * Handles formatting a date via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_date_format() {\n\twp_die( date_i18n( sanitize_option( 'date_format', wp_unslash( $_POST['date'] ) ) ) );\n}\n\n/**\n * Handles formatting a time via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_time_format() {\n\twp_die( date_i18n( sanitize_option( 'time_format', wp_unslash( $_POST['date'] ) ) ) );\n}\n\n/**\n * Handles saving posts from the fullscreen editor via AJAX.\n *\n * @since 3.1.0\n * @deprecated 4.3.0\n */\nfunction wp_ajax_wp_fullscreen_save_post() {\n\t$post_id = isset( $_POST['post_ID'] ) ? (int) $_POST['post_ID'] : 0;\n\n\t$post = null;\n\n\tif ( $post_id ) {\n\t\t$post = get_post( $post_id );\n\t}\n\n\tcheck_ajax_referer( 'update-post_' . $post_id, '_wpnonce' );\n\n\t$post_id = edit_post();\n\n\tif ( is_wp_error( $post_id ) ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( $post ) {\n\t\t$last_date = mysql2date( __( 'F j, Y' ), $post->post_modified );\n\t\t$last_time = mysql2date( __( 'g:i a' ), $post->post_modified );\n\t} else {\n\t\t$last_date = date_i18n( __( 'F j, Y' ) );\n\t\t$last_time = date_i18n( __( 'g:i a' ) );\n\t}\n\n\t$last_id = get_post_meta( $post_id, '_edit_last', true );\n\tif ( $last_id ) {\n\t\t$last_user = get_userdata( $last_id );\n\t\t/* translators: 1: User's display name, 2: Date of last edit, 3: Time of last edit. */\n\t\t$last_edited = sprintf( __( 'Last edited by %1$s on %2$s at %3$s' ), esc_html( $last_user->display_name ), $last_date, $last_time );\n\t} else {\n\t\t/* translators: 1: Date of last edit, 2: Time of last edit. */\n\t\t$last_edited = sprintf( __( 'Last edited on %1$s at %2$s' ), $last_date, $last_time );\n\t}\n\n\twp_send_json_success( array( 'last_edited' => $last_edited ) );\n}\n\n/**\n * Handles removing a post lock via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_wp_remove_post_lock() {\n\tif ( empty( $_POST['post_ID'] ) || empty( $_POST['active_post_lock'] ) ) {\n\t\twp_die( 0 );\n\t}\n\n\t$post_id = (int) $_POST['post_ID'];\n\t$post    = get_post( $post_id );\n\n\tif ( ! $post ) {\n\t\twp_die( 0 );\n\t}\n\n\tcheck_ajax_referer( 'update-post_' . $post_id );\n\n\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$active_lock = array_map( 'absint', explode( ':', $_POST['active_post_lock'] ) );\n\n\tif ( get_current_user_id() !== $active_lock[1] ) {\n\t\twp_die( 0 );\n\t}\n\n\t/**\n\t * Filters the post lock window duration.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param int $interval The interval in seconds the post lock duration\n\t *                      should last, plus 5 seconds. Default 150.\n\t */\n\t$new_lock = ( time() - apply_filters( 'wp_check_post_lock_window', 150 ) + 5 ) . ':' . $active_lock[1];\n\tupdate_post_meta( $post_id, '_edit_lock', $new_lock, implode( ':', $active_lock ) );\n\twp_die( 1 );\n}\n\n/**\n * Handles dismissing a WordPress pointer via AJAX.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_dismiss_wp_pointer() {\n\t$pointer = $_POST['pointer'];\n\n\tif ( sanitize_key( $pointer ) !== $pointer ) {\n\t\twp_die( 0 );\n\t}\n\n\t//  check_ajax_referer( 'dismiss-pointer_' . $pointer );\n\n\t$dismissed = array_filter( explode( ',', (string) get_user_meta( get_current_user_id(), 'dismissed_wp_pointers', true ) ) );\n\n\tif ( in_array( $pointer, $dismissed, true ) ) {\n\t\twp_die( 0 );\n\t}\n\n\t$dismissed[] = $pointer;\n\t$dismissed   = implode( ',', $dismissed );\n\n\tupdate_user_meta( get_current_user_id(), 'dismissed_wp_pointers', $dismissed );\n\twp_die( 1 );\n}\n\n/**\n * Handles getting an attachment via AJAX.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_get_attachment() {\n\tif ( ! isset( $_REQUEST['id'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$id = absint( $_REQUEST['id'] );\n\tif ( ! $id ) {\n\t\twp_send_json_error();\n\t}\n\n\t$post = get_post( $id );\n\tif ( ! $post ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( 'attachment' !== $post->post_type ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( ! current_user_can( 'upload_files' ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$attachment = wp_prepare_attachment_for_js( $id );\n\tif ( ! $attachment ) {\n\t\twp_send_json_error();\n\t}\n\n\twp_send_json_success( $attachment );\n}\n\n/**\n * Handles querying attachments via AJAX.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_query_attachments() {\n\tif ( ! current_user_can( 'upload_files' ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$query = isset( $_REQUEST['query'] ) ? (array) $_REQUEST['query'] : array();\n\t$keys  = array(\n\t\t's',\n\t\t'order',\n\t\t'orderby',\n\t\t'posts_per_page',\n\t\t'paged',\n\t\t'post_mime_type',\n\t\t'post_parent',\n\t\t'author',\n\t\t'post__in',\n\t\t'post__not_in',\n\t\t'year',\n\t\t'monthnum',\n\t);\n\n\tforeach ( get_taxonomies_for_attachments( 'objects' ) as $t ) {\n\t\tif ( $t->query_var && isset( $query[ $t->query_var ] ) ) {\n\t\t\t$keys[] = $t->query_var;\n\t\t}\n\t}\n\n\t$query              = array_intersect_key( $query, array_flip( $keys ) );\n\t$query['post_type'] = 'attachment';\n\n\tif (\n\t\tMEDIA_TRASH &&\n\t\t! empty( $_REQUEST['query']['post_status'] ) &&\n\t\t'trash' === $_REQUEST['query']['post_status']\n\t) {\n\t\t$query['post_status'] = 'trash';\n\t} else {\n\t\t$query['post_status'] = 'inherit';\n\t}\n\n\tif ( current_user_can( get_post_type_object( 'attachment' )->cap->read_private_posts ) ) {\n\t\t$query['post_status'] .= ',private';\n\t}\n\n\t// Filter query clauses to include filenames.\n\tif ( isset( $query['s'] ) ) {\n\t\tadd_filter( 'wp_allow_query_attachment_by_filename', '__return_true' );\n\t}\n\n\t/**\n\t * Filters the arguments passed to WP_Query during an Ajax\n\t * call for querying attachments.\n\t *\n\t * @since 3.7.0\n\t *\n\t * @see WP_Query::parse_query()\n\t *\n\t * @param array $query An array of query variables.\n\t */\n\t$query             = apply_filters( 'ajax_query_attachments_args', $query );\n\t$attachments_query = new WP_Query( $query );\n\tupdate_post_parent_caches( $attachments_query->posts );\n\n\t$posts       = array_map( 'wp_prepare_attachment_for_js', $attachments_query->posts );\n\t$posts       = array_filter( $posts );\n\t$total_posts = $attachments_query->found_posts;\n\n\tif ( $total_posts < 1 ) {\n\t\t// Out-of-bounds, run the query again without LIMIT for total count.\n\t\tunset( $query['paged'] );\n\n\t\t$count_query = new WP_Query();\n\t\t$count_query->query( $query );\n\t\t$total_posts = $count_query->found_posts;\n\t}\n\n\t$posts_per_page = (int) $attachments_query->get( 'posts_per_page' );\n\n\t$max_pages = $posts_per_page ? (int) ceil( $total_posts / $posts_per_page ) : 0;\n\n\theader( 'X-WP-Total: ' . (int) $total_posts );\n\theader( 'X-WP-TotalPages: ' . $max_pages );\n\n\twp_send_json_success( $posts );\n}\n\n/**\n * Handles updating attachment attributes via AJAX.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_save_attachment() {\n\tif ( ! isset( $_REQUEST['id'] ) || ! isset( $_REQUEST['changes'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$id = absint( $_REQUEST['id'] );\n\tif ( ! $id ) {\n\t\twp_send_json_error();\n\t}\n\n\tcheck_ajax_referer( 'update-post_' . $id, 'nonce' );\n\n\tif ( ! current_user_can( 'edit_post', $id ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$changes = $_REQUEST['changes'];\n\t$post    = get_post( $id, ARRAY_A );\n\n\tif ( 'attachment' !== $post['post_type'] ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( isset( $changes['parent'] ) ) {\n\t\t$post['post_parent'] = $changes['parent'];\n\t}\n\n\tif ( isset( $changes['title'] ) ) {\n\t\t$post['post_title'] = $changes['title'];\n\t}\n\n\tif ( isset( $changes['caption'] ) ) {\n\t\t$post['post_excerpt'] = $changes['caption'];\n\t}\n\n\tif ( isset( $changes['description'] ) ) {\n\t\t$post['post_content'] = $changes['description'];\n\t}\n\n\tif ( MEDIA_TRASH && isset( $changes['status'] ) ) {\n\t\t$post['post_status'] = $changes['status'];\n\t}\n\n\tif ( isset( $changes['alt'] ) ) {\n\t\t$alt = wp_unslash( $changes['alt'] );\n\t\tif ( get_post_meta( $id, '_wp_attachment_image_alt', true ) !== $alt ) {\n\t\t\t$alt = wp_strip_all_tags( $alt, true );\n\t\t\tupdate_post_meta( $id, '_wp_attachment_image_alt', wp_slash( $alt ) );\n\t\t}\n\t}\n\n\tif ( wp_attachment_is( 'audio', $post['ID'] ) ) {\n\t\t$changed = false;\n\t\t$id3data = wp_get_attachment_metadata( $post['ID'] );\n\n\t\tif ( ! is_array( $id3data ) ) {\n\t\t\t$changed = true;\n\t\t\t$id3data = array();\n\t\t}\n\n\t\tforeach ( wp_get_attachment_id3_keys( (object) $post, 'edit' ) as $key => $label ) {\n\t\t\tif ( isset( $changes[ $key ] ) ) {\n\t\t\t\t$changed         = true;\n\t\t\t\t$id3data[ $key ] = sanitize_text_field( wp_unslash( $changes[ $key ] ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( $changed ) {\n\t\t\twp_update_attachment_metadata( $id, $id3data );\n\t\t}\n\t}\n\n\tif ( MEDIA_TRASH && isset( $changes['status'] ) && 'trash' === $changes['status'] ) {\n\t\twp_delete_post( $id );\n\t} else {\n\t\twp_update_post( $post );\n\t}\n\n\twp_send_json_success();\n}\n\n/**\n * Handles saving backward compatible attachment attributes via AJAX.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_save_attachment_compat() {\n\tif ( ! isset( $_REQUEST['id'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$id = absint( $_REQUEST['id'] );\n\tif ( ! $id ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( empty( $_REQUEST['attachments'] ) || empty( $_REQUEST['attachments'][ $id ] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$attachment_data = $_REQUEST['attachments'][ $id ];\n\n\tcheck_ajax_referer( 'update-post_' . $id, 'nonce' );\n\n\tif ( ! current_user_can( 'edit_post', $id ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$post = get_post( $id, ARRAY_A );\n\n\tif ( 'attachment' !== $post['post_type'] ) {\n\t\twp_send_json_error();\n\t}\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$post = apply_filters( 'attachment_fields_to_save', $post, $attachment_data );\n\n\tif ( isset( $post['errors'] ) ) {\n\t\t$errors = $post['errors']; // @todo return me and display me!\n\t\tunset( $post['errors'] );\n\t}\n\n\twp_update_post( $post );\n\n\tforeach ( get_attachment_taxonomies( $post ) as $taxonomy ) {\n\t\tif ( isset( $attachment_data[ $taxonomy ] ) ) {\n\t\t\twp_set_object_terms( $id, array_map( 'trim', preg_split( '/,+/', $attachment_data[ $taxonomy ] ) ), $taxonomy, false );\n\t\t}\n\t}\n\n\t$attachment = wp_prepare_attachment_for_js( $id );\n\n\tif ( ! $attachment ) {\n\t\twp_send_json_error();\n\t}\n\n\twp_send_json_success( $attachment );\n}\n\n/**\n * Handles saving the attachment order via AJAX.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_save_attachment_order() {\n\tif ( ! isset( $_REQUEST['post_id'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$post_id = absint( $_REQUEST['post_id'] );\n\tif ( ! $post_id ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( empty( $_REQUEST['attachments'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\tcheck_ajax_referer( 'update-post_' . $post_id, 'nonce' );\n\n\t$attachments = $_REQUEST['attachments'];\n\n\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\twp_send_json_error();\n\t}\n\n\tforeach ( $attachments as $attachment_id => $menu_order ) {\n\t\tif ( ! current_user_can( 'edit_post', $attachment_id ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t$attachment = get_post( $attachment_id );\n\n\t\tif ( ! $attachment ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( 'attachment' !== $attachment->post_type ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\twp_update_post(\n\t\t\tarray(\n\t\t\t\t'ID'         => $attachment_id,\n\t\t\t\t'menu_order' => $menu_order,\n\t\t\t)\n\t\t);\n\t}\n\n\twp_send_json_success();\n}\n\n/**\n * Handles sending an attachment to the editor via AJAX.\n *\n * Generates the HTML to send an attachment to the editor.\n * Backward compatible with the {@see 'media_send_to_editor'} filter\n * and the chain of filters that follow.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_send_attachment_to_editor() {\n\tcheck_ajax_referer( 'media-send-to-editor', 'nonce' );\n\n\t$attachment = wp_unslash( $_POST['attachment'] );\n\n\t$id = (int) $attachment['id'];\n\n\t$post = get_post( $id );\n\tif ( ! $post ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( 'attachment' !== $post->post_type ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( current_user_can( 'edit_post', $id ) ) {\n\t\t// If this attachment is unattached, attach it. Primarily a back compat thing.\n\t\t$insert_into_post_id = (int) $_POST['post_id'];\n\n\t\tif ( 0 === $post->post_parent && $insert_into_post_id ) {\n\t\t\twp_update_post(\n\t\t\t\tarray(\n\t\t\t\t\t'ID'          => $id,\n\t\t\t\t\t'post_parent' => $insert_into_post_id,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\t$url = empty( $attachment['url'] ) ? '' : $attachment['url'];\n\t$rel = ( str_contains( $url, 'attachment_id' ) || get_attachment_link( $id ) === $url );\n\n\tremove_filter( 'media_send_to_editor', 'image_media_send_to_editor' );\n\n\tif ( str_starts_with( $post->post_mime_type, 'image' ) ) {\n\t\t$align = isset( $attachment['align'] ) ? $attachment['align'] : 'none';\n\t\t$size  = isset( $attachment['image-size'] ) ? $attachment['image-size'] : 'medium';\n\t\t$alt   = isset( $attachment['image_alt'] ) ? $attachment['image_alt'] : '';\n\n\t\t// No whitespace-only captions.\n\t\t$caption = isset( $attachment['post_excerpt'] ) ? $attachment['post_excerpt'] : '';\n\t\tif ( '' === trim( $caption ) ) {\n\t\t\t$caption = '';\n\t\t}\n\n\t\t$title = ''; // We no longer insert title tags into <img> tags, as they are redundant.\n\t\t$html  = get_image_send_to_editor( $id, $caption, $title, $align, $url, $rel, $size, $alt );\n\t} elseif ( wp_attachment_is( 'video', $post ) || wp_attachment_is( 'audio', $post ) ) {\n\t\t$html = stripslashes_deep( $_POST['html'] );\n\t} else {\n\t\t$html = isset( $attachment['post_title'] ) ? $attachment['post_title'] : '';\n\t\t$rel  = $rel ? ' rel=\"attachment wp-att-' . $id . '\"' : ''; // Hard-coded string, $id is already sanitized.\n\n\t\tif ( ! empty( $url ) ) {\n\t\t\t$html = '<a href=\"' . esc_url( $url ) . '\"' . $rel . '>' . $html . '</a>';\n\t\t}\n\t}\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$html = apply_filters( 'media_send_to_editor', $html, $id, $attachment );\n\n\twp_send_json_success( $html );\n}\n\n/**\n * Handles sending a link to the editor via AJAX.\n *\n * Generates the HTML to send a non-image embed link to the editor.\n *\n * Backward compatible with the following filters:\n * - file_send_to_editor_url\n * - audio_send_to_editor_url\n * - video_send_to_editor_url\n *\n * @since 3.5.0\n *\n * @global WP_Post  $post     Global post object.\n * @global WP_Embed $wp_embed WordPress Embed object.\n */\nfunction wp_ajax_send_link_to_editor() {\n\tglobal $post, $wp_embed;\n\n\tcheck_ajax_referer( 'media-send-to-editor', 'nonce' );\n\n\t$src = wp_unslash( $_POST['src'] );\n\tif ( ! $src ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( ! strpos( $src, '://' ) ) {\n\t\t$src = 'http://' . $src;\n\t}\n\n\t$src = sanitize_url( $src );\n\tif ( ! $src ) {\n\t\twp_send_json_error();\n\t}\n\n\t$link_text = trim( wp_unslash( $_POST['link_text'] ) );\n\tif ( ! $link_text ) {\n\t\t$link_text = wp_basename( $src );\n\t}\n\n\t$post = get_post( isset( $_POST['post_id'] ) ? $_POST['post_id'] : 0 );\n\n\t// Ping WordPress for an embed.\n\t$check_embed = $wp_embed->run_shortcode( '[embed]' . $src . '[/embed]' );\n\n\t// Fallback that WordPress creates when no oEmbed was found.\n\t$fallback = $wp_embed->maybe_make_link( $src );\n\n\tif ( $check_embed !== $fallback ) {\n\t\t// TinyMCE view for [embed] will parse this.\n\t\t$html = '[embed]' . $src . '[/embed]';\n\t} elseif ( $link_text ) {\n\t\t$html = '<a href=\"' . esc_url( $src ) . '\">' . $link_text . '</a>';\n\t} else {\n\t\t$html = '';\n\t}\n\n\t// Figure out what filter to run:\n\t$type = 'file';\n\t$ext  = preg_replace( '/^.+?\\.([^.]+)$/', '$1', $src );\n\tif ( $ext ) {\n\t\t$ext_type = wp_ext2type( $ext );\n\t\tif ( 'audio' === $ext_type || 'video' === $ext_type ) {\n\t\t\t$type = $ext_type;\n\t\t}\n\t}\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$html = apply_filters( \"{$type}_send_to_editor_url\", $html, $src, $link_text );\n\n\twp_send_json_success( $html );\n}\n\n/**\n * Handles the Heartbeat API via AJAX.\n *\n * Runs when the user is logged in.\n *\n * @since 3.6.0\n */\nfunction wp_ajax_heartbeat() {\n\tif ( empty( $_POST['_nonce'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$response    = array();\n\t$data        = array();\n\t$nonce_state = wp_verify_nonce( $_POST['_nonce'], 'heartbeat-nonce' );\n\n\t// 'screen_id' is the same as $current_screen->id and the JS global 'pagenow'.\n\tif ( ! empty( $_POST['screen_id'] ) ) {\n\t\t$screen_id = sanitize_key( $_POST['screen_id'] );\n\t} else {\n\t\t$screen_id = 'front';\n\t}\n\n\tif ( ! empty( $_POST['data'] ) ) {\n\t\t$data = wp_unslash( (array) $_POST['data'] );\n\t}\n\n\tif ( 1 !== $nonce_state ) {\n\t\t/**\n\t\t * Filters the nonces to send to the New/Edit Post screen.\n\t\t *\n\t\t * @since 4.3.0\n\t\t *\n\t\t * @param array  $response  The Heartbeat response.\n\t\t * @param array  $data      The $_POST data sent.\n\t\t * @param string $screen_id The screen ID.\n\t\t */\n\t\t$response = apply_filters( 'wp_refresh_nonces', $response, $data, $screen_id );\n\n\t\tif ( false === $nonce_state ) {\n\t\t\t// User is logged in but nonces have expired.\n\t\t\t$response['nonces_expired'] = true;\n\t\t\twp_send_json( $response );\n\t\t}\n\t}\n\n\tif ( ! empty( $data ) ) {\n\t\t/**\n\t\t * Filters the Heartbeat response received.\n\t\t *\n\t\t * @since 3.6.0\n\t\t *\n\t\t * @param array  $response  The Heartbeat response.\n\t\t * @param array  $data      The $_POST data sent.\n\t\t * @param string $screen_id The screen ID.\n\t\t */\n\t\t$response = apply_filters( 'heartbeat_received', $response, $data, $screen_id );\n\t}\n\n\t/**\n\t * Filters the Heartbeat response sent.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param array  $response  The Heartbeat response.\n\t * @param string $screen_id The screen ID.\n\t */\n\t$response = apply_filters( 'heartbeat_send', $response, $screen_id );\n\n\t/**\n\t * Fires when Heartbeat ticks in logged-in environments.\n\t *\n\t * Allows the transport to be easily replaced with long-polling.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param array  $response  The Heartbeat response.\n\t * @param string $screen_id The screen ID.\n\t */\n\tdo_action( 'heartbeat_tick', $response, $screen_id );\n\n\t// Send the current time according to the server.\n\t$response['server_time'] = time();\n\n\twp_send_json( $response );\n}\n\n/**\n * Handles getting revision diffs via AJAX.\n *\n * @since 3.6.0\n */\nfunction wp_ajax_get_revision_diffs() {\n\trequire ABSPATH . 'wp-admin/includes/revision.php';\n\n\t$post = get_post( (int) $_REQUEST['post_id'] );\n\tif ( ! $post ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( ! current_user_can( 'edit_post', $post->ID ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t// Really just pre-loading the cache here.\n\t$revisions = wp_get_post_revisions( $post->ID, array( 'check_enabled' => false ) );\n\tif ( ! $revisions ) {\n\t\twp_send_json_error();\n\t}\n\n\t$return = array();\n\n\t// Increase the script timeout limit to allow ample time for diff UI setup.\n\tif ( function_exists( 'set_time_limit' ) ) {\n\t\tset_time_limit( 5 * MINUTE_IN_SECONDS );\n\t}\n\n\tforeach ( $_REQUEST['compare'] as $compare_key ) {\n\t\tlist( $compare_from, $compare_to ) = explode( ':', $compare_key ); // from:to\n\n\t\t$return[] = array(\n\t\t\t'id'     => $compare_key,\n\t\t\t'fields' => wp_get_revision_ui_diff( $post, $compare_from, $compare_to ),\n\t\t);\n\t}\n\twp_send_json_success( $return );\n}\n\n/**\n * Handles auto-saving the selected color scheme for\n * a user's own profile via AJAX.\n *\n * @since 3.8.0\n *\n * @global array $_wp_admin_css_colors\n */\nfunction wp_ajax_save_user_color_scheme() {\n\tglobal $_wp_admin_css_colors;\n\n\tcheck_ajax_referer( 'save-color-scheme', 'nonce' );\n\n\t$color_scheme = sanitize_key( $_POST['color_scheme'] );\n\n\tif ( ! isset( $_wp_admin_css_colors[ $color_scheme ] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$previous_color_scheme = get_user_meta( get_current_user_id(), 'admin_color', true );\n\tupdate_user_meta( get_current_user_id(), 'admin_color', $color_scheme );\n\n\twp_send_json_success(\n\t\tarray(\n\t\t\t'previousScheme' => 'admin-color-' . $previous_color_scheme,\n\t\t\t'currentScheme'  => 'admin-color-' . $color_scheme,\n\t\t)\n\t);\n}\n\n/**\n * Handles getting themes from themes_api() via AJAX.\n *\n * @since 3.9.0\n *\n * @global array $themes_allowedtags\n * @global array $theme_field_defaults\n */\nfunction wp_ajax_query_themes() {\n\tglobal $themes_allowedtags, $theme_field_defaults;\n\n\tif ( ! current_user_can( 'install_themes' ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$args = wp_parse_args(\n\t\twp_unslash( $_REQUEST['request'] ),\n\t\tarray(\n\t\t\t'per_page' => 20,\n\t\t\t'fields'   => array_merge(\n\t\t\t\t(array) $theme_field_defaults,\n\t\t\t\tarray(\n\t\t\t\t\t'reviews_url' => true, // Explicitly request the reviews URL to be linked from the Add Themes screen.\n\t\t\t\t)\n\t\t\t),\n\t\t)\n\t);\n\n\tif ( isset( $args['browse'] ) && 'favorites' === $args['browse'] && ! isset( $args['user'] ) ) {\n\t\t$user = get_user_option( 'wporg_favorites' );\n\t\tif ( $user ) {\n\t\t\t$args['user'] = $user;\n\t\t}\n\t}\n\n\t$old_filter = isset( $args['browse'] ) ? $args['browse'] : 'search';\n\n\t/** This filter is documented in wp-admin/includes/class-wp-theme-install-list-table.php */\n\t$args = apply_filters( 'install_themes_table_api_args_' . $old_filter, $args );\n\n\t$api = themes_api( 'query_themes', $args );\n\n\tif ( is_wp_error( $api ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$update_php = network_admin_url( 'update.php?action=install-theme' );\n\n\t$installed_themes = search_theme_directories();\n\n\tif ( false === $installed_themes ) {\n\t\t$installed_themes = array();\n\t}\n\n\tforeach ( $installed_themes as $theme_slug => $theme_data ) {\n\t\t// Ignore child themes.\n\t\tif ( str_contains( $theme_slug, '/' ) ) {\n\t\t\tunset( $installed_themes[ $theme_slug ] );\n\t\t}\n\t}\n\n\tforeach ( $api->themes as &$theme ) {\n\t\t$theme->install_url = add_query_arg(\n\t\t\tarray(\n\t\t\t\t'theme'    => $theme->slug,\n\t\t\t\t'_wpnonce' => wp_create_nonce( 'install-theme_' . $theme->slug ),\n\t\t\t),\n\t\t\t$update_php\n\t\t);\n\n\t\tif ( current_user_can( 'switch_themes' ) ) {\n\t\t\tif ( is_multisite() ) {\n\t\t\t\t$theme->activate_url = add_query_arg(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'action'   => 'enable',\n\t\t\t\t\t\t'_wpnonce' => wp_create_nonce( 'enable-theme_' . $theme->slug ),\n\t\t\t\t\t\t'theme'    => $theme->slug,\n\t\t\t\t\t),\n\t\t\t\t\tnetwork_admin_url( 'themes.php' )\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t$theme->activate_url = add_query_arg(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'action'     => 'activate',\n\t\t\t\t\t\t'_wpnonce'   => wp_create_nonce( 'switch-theme_' . $theme->slug ),\n\t\t\t\t\t\t'stylesheet' => $theme->slug,\n\t\t\t\t\t),\n\t\t\t\t\tadmin_url( 'themes.php' )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t$is_theme_installed = array_key_exists( $theme->slug, $installed_themes );\n\n\t\t// We only care about installed themes.\n\t\t$theme->block_theme = $is_theme_installed && wp_get_theme( $theme->slug )->is_block_theme();\n\n\t\tif ( ! is_multisite() && current_user_can( 'edit_theme_options' ) && current_user_can( 'customize' ) ) {\n\t\t\t$customize_url = $theme->block_theme ? admin_url( 'site-editor.php' ) : wp_customize_url( $theme->slug );\n\n\t\t\t$theme->customize_url = add_query_arg(\n\t\t\t\tarray(\n\t\t\t\t\t'return' => urlencode( network_admin_url( 'theme-install.php', 'relative' ) ),\n\t\t\t\t),\n\t\t\t\t$customize_url\n\t\t\t);\n\t\t}\n\n\t\t$theme->name        = wp_kses( $theme->name, $themes_allowedtags );\n\t\t$theme->author      = wp_kses( $theme->author['display_name'], $themes_allowedtags );\n\t\t$theme->version     = wp_kses( $theme->version, $themes_allowedtags );\n\t\t$theme->description = wp_kses( $theme->description, $themes_allowedtags );\n\n\t\t$theme->stars = wp_star_rating(\n\t\t\tarray(\n\t\t\t\t'rating' => $theme->rating,\n\t\t\t\t'type'   => 'percent',\n\t\t\t\t'number' => $theme->num_ratings,\n\t\t\t\t'echo'   => false,\n\t\t\t)\n\t\t);\n\n\t\t$theme->num_ratings    = number_format_i18n( $theme->num_ratings );\n\t\t$theme->preview_url    = set_url_scheme( $theme->preview_url );\n\t\t$theme->compatible_wp  = is_wp_version_compatible( $theme->requires );\n\t\t$theme->compatible_php = is_php_version_compatible( $theme->requires_php );\n\t}\n\n\twp_send_json_success( $api );\n}\n\n/**\n * Applies [embed] Ajax handlers to a string.\n *\n * @since 4.0.0\n *\n * @global WP_Post    $post          Global post object.\n * @global WP_Embed   $wp_embed      WordPress Embed object.\n * @global WP_Scripts $wp_scripts\n * @global int        $content_width\n */\nfunction wp_ajax_parse_embed() {\n\tglobal $post, $wp_embed, $content_width;\n\n\tif ( empty( $_POST['shortcode'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$post_id = isset( $_POST['post_ID'] ) ? (int) $_POST['post_ID'] : 0;\n\n\tif ( $post_id > 0 ) {\n\t\t$post = get_post( $post_id );\n\n\t\tif ( ! $post || ! current_user_can( 'edit_post', $post->ID ) ) {\n\t\t\twp_send_json_error();\n\t\t}\n\t\tsetup_postdata( $post );\n\t} elseif ( ! current_user_can( 'edit_posts' ) ) { // See WP_oEmbed_Controller::get_proxy_item_permissions_check().\n\t\twp_send_json_error();\n\t}\n\n\t$shortcode = wp_unslash( $_POST['shortcode'] );\n\n\tpreg_match( '/' . get_shortcode_regex() . '/s', $shortcode, $matches );\n\t$atts = shortcode_parse_atts( $matches[3] );\n\n\tif ( ! empty( $matches[5] ) ) {\n\t\t$url = $matches[5];\n\t} elseif ( ! empty( $atts['src'] ) ) {\n\t\t$url = $atts['src'];\n\t} else {\n\t\t$url = '';\n\t}\n\n\t$parsed                         = false;\n\t$wp_embed->return_false_on_fail = true;\n\n\tif ( 0 === $post_id ) {\n\t\t/*\n\t\t * Refresh oEmbeds cached outside of posts that are past their TTL.\n\t\t * Posts are excluded because they have separate logic for refreshing\n\t\t * their post meta caches. See WP_Embed::cache_oembed().\n\t\t */\n\t\t$wp_embed->usecache = false;\n\t}\n\n\tif ( is_ssl() && str_starts_with( $url, 'http://' ) ) {\n\t\t/*\n\t\t * Admin is ssl and the user pasted non-ssl URL.\n\t\t * Check if the provider supports ssl embeds and use that for the preview.\n\t\t */\n\t\t$ssl_shortcode = preg_replace( '%^(\\\\[embed[^\\\\]]*\\\\])http://%i', '$1https://', $shortcode );\n\t\t$parsed        = $wp_embed->run_shortcode( $ssl_shortcode );\n\n\t\tif ( ! $parsed ) {\n\t\t\t$no_ssl_support = true;\n\t\t}\n\t}\n\n\t// Set $content_width so any embeds fit in the destination iframe.\n\tif ( isset( $_POST['maxwidth'] ) && is_numeric( $_POST['maxwidth'] ) && $_POST['maxwidth'] > 0 ) {\n\t\tif ( ! isset( $content_width ) ) {\n\t\t\t$content_width = (int) $_POST['maxwidth'];\n\t\t} else {\n\t\t\t$content_width = min( $content_width, (int) $_POST['maxwidth'] );\n\t\t}\n\t}\n\n\tif ( $url && ! $parsed ) {\n\t\t$parsed = $wp_embed->run_shortcode( $shortcode );\n\t}\n\n\tif ( ! $parsed ) {\n\t\twp_send_json_error(\n\t\t\tarray(\n\t\t\t\t'type'    => 'not-embeddable',\n\t\t\t\t/* translators: %s: URL that could not be embedded. */\n\t\t\t\t'message' => sprintf( __( '%s failed to embed.' ), '<code>' . esc_html( $url ) . '</code>' ),\n\t\t\t)\n\t\t);\n\t}\n\n\tif ( has_shortcode( $parsed, 'audio' ) || has_shortcode( $parsed, 'video' ) ) {\n\t\t$styles     = '';\n\t\t$mce_styles = wpview_media_sandbox_styles();\n\n\t\tforeach ( $mce_styles as $style ) {\n\t\t\t$styles .= sprintf( '<link rel=\"stylesheet\" href=\"%s\" />', $style );\n\t\t}\n\n\t\t$html = do_shortcode( $parsed );\n\n\t\tglobal $wp_scripts;\n\n\t\tif ( ! empty( $wp_scripts ) ) {\n\t\t\t$wp_scripts->done = array();\n\t\t}\n\n\t\tob_start();\n\t\twp_print_scripts( array( 'mediaelement-vimeo', 'wp-mediaelement' ) );\n\t\t$scripts = ob_get_clean();\n\n\t\t$parsed = $styles . $html . $scripts;\n\t}\n\n\tif ( ! empty( $no_ssl_support ) || ( is_ssl() && ( preg_match( '%<(iframe|script|embed) [^>]*src=\"http://%', $parsed ) ||\n\t\tpreg_match( '%<link [^>]*href=\"http://%', $parsed ) ) ) ) {\n\t\t// Admin is ssl and the embed is not. Iframes, scripts, and other \"active content\" will be blocked.\n\t\twp_send_json_error(\n\t\t\tarray(\n\t\t\t\t'type'    => 'not-ssl',\n\t\t\t\t'message' => __( 'This preview is unavailable in the editor.' ),\n\t\t\t)\n\t\t);\n\t}\n\n\t$return = array(\n\t\t'body' => $parsed,\n\t\t'attr' => $wp_embed->last_attr,\n\t);\n\n\tif ( str_contains( $parsed, 'class=\"wp-embedded-content' ) ) {\n\t\tif ( defined( 'SCRIPT_DEBUG' ) && SCRIPT_DEBUG ) {\n\t\t\t$script_src = includes_url( 'js/wp-embed.js' );\n\t\t} else {\n\t\t\t$script_src = includes_url( 'js/wp-embed.min.js' );\n\t\t}\n\n\t\t$return['head']    = '<script src=\"' . $script_src . '\"></script>';\n\t\t$return['sandbox'] = true;\n\t}\n\n\twp_send_json_success( $return );\n}\n\n/**\n * @since 4.0.0\n *\n * @global WP_Post    $post       Global post object.\n * @global WP_Scripts $wp_scripts\n */\nfunction wp_ajax_parse_media_shortcode() {\n\tglobal $post, $wp_scripts;\n\n\tif ( empty( $_POST['shortcode'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$shortcode = wp_unslash( $_POST['shortcode'] );\n\n\t// Only process previews for media related shortcodes:\n\t$found_shortcodes = get_shortcode_tags_in_content( $shortcode );\n\t$media_shortcodes = array(\n\t\t'audio',\n\t\t'embed',\n\t\t'playlist',\n\t\t'video',\n\t\t'gallery',\n\t);\n\n\t$other_shortcodes = array_diff( $found_shortcodes, $media_shortcodes );\n\n\tif ( ! empty( $other_shortcodes ) ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( ! empty( $_POST['post_ID'] ) ) {\n\t\t$post = get_post( (int) $_POST['post_ID'] );\n\t}\n\n\t// The embed shortcode requires a post.\n\tif ( ! $post || ! current_user_can( 'edit_post', $post->ID ) ) {\n\t\tif ( in_array( 'embed', $found_shortcodes, true ) ) {\n\t\t\twp_send_json_error();\n\t\t}\n\t} else {\n\t\tsetup_postdata( $post );\n\t}\n\n\t$parsed = do_shortcode( $shortcode );\n\n\tif ( empty( $parsed ) ) {\n\t\twp_send_json_error(\n\t\t\tarray(\n\t\t\t\t'type'    => 'no-items',\n\t\t\t\t'message' => __( 'No items found.' ),\n\t\t\t)\n\t\t);\n\t}\n\n\t$head   = '';\n\t$styles = wpview_media_sandbox_styles();\n\n\tforeach ( $styles as $style ) {\n\t\t$head .= '<link type=\"text/css\" rel=\"stylesheet\" href=\"' . $style . '\">';\n\t}\n\n\tif ( ! empty( $wp_scripts ) ) {\n\t\t$wp_scripts->done = array();\n\t}\n\n\tob_start();\n\n\techo $parsed;\n\n\tif ( 'playlist' === $_REQUEST['type'] ) {\n\t\twp_underscore_playlist_templates();\n\n\t\twp_print_scripts( 'wp-playlist' );\n\t} else {\n\t\twp_print_scripts( array( 'mediaelement-vimeo', 'wp-mediaelement' ) );\n\t}\n\n\twp_send_json_success(\n\t\tarray(\n\t\t\t'head' => $head,\n\t\t\t'body' => ob_get_clean(),\n\t\t)\n\t);\n}\n\n/**\n * Handles destroying multiple open sessions for a user via AJAX.\n *\n * @since 4.1.0\n */\nfunction wp_ajax_destroy_sessions() {\n\t$user = get_userdata( (int) $_POST['user_id'] );\n\n\tif ( $user ) {\n\t\tif ( ! current_user_can( 'edit_user', $user->ID ) ) {\n\t\t\t$user = false;\n\t\t} elseif ( ! wp_verify_nonce( $_POST['nonce'], 'update-user_' . $user->ID ) ) {\n\t\t\t$user = false;\n\t\t}\n\t}\n\n\tif ( ! $user ) {\n\t\twp_send_json_error(\n\t\t\tarray(\n\t\t\t\t'message' => __( 'Could not log out user sessions. Please try again.' ),\n\t\t\t)\n\t\t);\n\t}\n\n\t$sessions = WP_Session_Tokens::get_instance( $user->ID );\n\n\tif ( get_current_user_id() === $user->ID ) {\n\t\t$sessions->destroy_others( wp_get_session_token() );\n\t\t$message = __( 'You are now logged out everywhere else.' );\n\t} else {\n\t\t$sessions->destroy_all();\n\t\t/* translators: %s: User's display name. */\n\t\t$message = sprintf( __( '%s has been logged out.' ), $user->display_name );\n\t}\n\n\twp_send_json_success( array( 'message' => $message ) );\n}\n\n/**\n * Handles cropping an image via AJAX.\n *\n * @since 4.3.0\n */\nfunction wp_ajax_crop_image() {\n\t$attachment_id = absint( $_POST['id'] );\n\n\tcheck_ajax_referer( 'image_editor-' . $attachment_id, 'nonce' );\n\n\tif ( empty( $attachment_id ) || ! current_user_can( 'edit_post', $attachment_id ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$context = str_replace( '_', '-', $_POST['context'] );\n\t$data    = array_map( 'absint', $_POST['cropDetails'] );\n\t$cropped = wp_crop_image( $attachment_id, $data['x1'], $data['y1'], $data['width'], $data['height'], $data['dst_width'], $data['dst_height'] );\n\n\tif ( ! $cropped || is_wp_error( $cropped ) ) {\n\t\twp_send_json_error( array( 'message' => __( 'Image could not be processed.' ) ) );\n\t}\n\n\tswitch ( $context ) {\n\t\tcase 'site-icon':\n\t\t\trequire_once ABSPATH . 'wp-admin/includes/class-wp-site-icon.php';\n\t\t\t$wp_site_icon = new WP_Site_Icon();\n\n\t\t\t// Skip creating a new attachment if the attachment is a Site Icon.\n\t\t\tif ( get_post_meta( $attachment_id, '_wp_attachment_context', true ) === $context ) {\n\n\t\t\t\t// Delete the temporary cropped file, we don't need it.\n\t\t\t\twp_delete_file( $cropped );\n\n\t\t\t\t// Additional sizes in wp_prepare_attachment_for_js().\n\t\t\t\tadd_filter( 'image_size_names_choose', array( $wp_site_icon, 'additional_sizes' ) );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t/** This filter is documented in wp-admin/includes/class-custom-image-header.php */\n\t\t\t$cropped = apply_filters( 'wp_create_file_in_uploads', $cropped, $attachment_id ); // For replication.\n\n\t\t\t// Copy attachment properties.\n\t\t\t$attachment = wp_copy_parent_attachment_properties( $cropped, $attachment_id, $context );\n\n\t\t\t// Update the attachment.\n\t\t\tadd_filter( 'intermediate_image_sizes_advanced', array( $wp_site_icon, 'additional_sizes' ) );\n\t\t\t$attachment_id = $wp_site_icon->insert_attachment( $attachment, $cropped );\n\t\t\tremove_filter( 'intermediate_image_sizes_advanced', array( $wp_site_icon, 'additional_sizes' ) );\n\n\t\t\t// Additional sizes in wp_prepare_attachment_for_js().\n\t\t\tadd_filter( 'image_size_names_choose', array( $wp_site_icon, 'additional_sizes' ) );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t/**\n\t\t\t * Fires before a cropped image is saved.\n\t\t\t *\n\t\t\t * Allows to add filters to modify the way a cropped image is saved.\n\t\t\t *\n\t\t\t * @since 4.3.0\n\t\t\t *\n\t\t\t * @param string $context       The Customizer control requesting the cropped image.\n\t\t\t * @param int    $attachment_id The attachment ID of the original image.\n\t\t\t * @param string $cropped       Path to the cropped image file.\n\t\t\t */\n\t\t\tdo_action( 'wp_ajax_crop_image_pre_save', $context, $attachment_id, $cropped );\n\n\t\t\t/** This filter is documented in wp-admin/includes/class-custom-image-header.php */\n\t\t\t$cropped = apply_filters( 'wp_create_file_in_uploads', $cropped, $attachment_id ); // For replication.\n\n\t\t\t// Copy attachment properties.\n\t\t\t$attachment = wp_copy_parent_attachment_properties( $cropped, $attachment_id, $context );\n\n\t\t\t$attachment_id = wp_insert_attachment( $attachment, $cropped );\n\t\t\t$metadata      = wp_generate_attachment_metadata( $attachment_id, $cropped );\n\n\t\t\t/**\n\t\t\t * Filters the cropped image attachment metadata.\n\t\t\t *\n\t\t\t * @since 4.3.0\n\t\t\t *\n\t\t\t * @see wp_generate_attachment_metadata()\n\t\t\t *\n\t\t\t * @param array $metadata Attachment metadata.\n\t\t\t */\n\t\t\t$metadata = apply_filters( 'wp_ajax_cropped_attachment_metadata', $metadata );\n\t\t\twp_update_attachment_metadata( $attachment_id, $metadata );\n\n\t\t\t/**\n\t\t\t * Filters the attachment ID for a cropped image.\n\t\t\t *\n\t\t\t * @since 4.3.0\n\t\t\t *\n\t\t\t * @param int    $attachment_id The attachment ID of the cropped image.\n\t\t\t * @param string $context       The Customizer control requesting the cropped image.\n\t\t\t */\n\t\t\t$attachment_id = apply_filters( 'wp_ajax_cropped_attachment_id', $attachment_id, $context );\n\t}\n\n\twp_send_json_success( wp_prepare_attachment_for_js( $attachment_id ) );\n}\n\n/**\n * Handles generating a password via AJAX.\n *\n * @since 4.4.0\n */\nfunction wp_ajax_generate_password() {\n\twp_send_json_success( wp_generate_password( 24 ) );\n}\n\n/**\n * Handles generating a password in the no-privilege context via AJAX.\n *\n * @since 5.7.0\n */\nfunction wp_ajax_nopriv_generate_password() {\n\twp_send_json_success( wp_generate_password( 24 ) );\n}\n\n/**\n * Handles saving the user's WordPress.org username via AJAX.\n *\n * @since 4.4.0\n */\nfunction wp_ajax_save_wporg_username() {\n\tif ( ! current_user_can( 'install_themes' ) && ! current_user_can( 'install_plugins' ) ) {\n\t\twp_send_json_error();\n\t}\n\n\tcheck_ajax_referer( 'save_wporg_username_' . get_current_user_id() );\n\n\t$username = isset( $_REQUEST['username'] ) ? wp_unslash( $_REQUEST['username'] ) : false;\n\n\tif ( ! $username ) {\n\t\twp_send_json_error();\n\t}\n\n\twp_send_json_success( update_user_meta( get_current_user_id(), 'wporg_favorites', $username ) );\n}\n\n/**\n * Handles installing a theme via AJAX.\n *\n * @since 4.6.0\n *\n * @see Theme_Upgrader\n *\n * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.\n */\nfunction wp_ajax_install_theme() {\n\tcheck_ajax_referer( 'updates' );\n\n\tif ( empty( $_POST['slug'] ) ) {\n\t\twp_send_json_error(\n\t\t\tarray(\n\t\t\t\t'slug'         => '',\n\t\t\t\t'errorCode'    => 'no_theme_specified',\n\t\t\t\t'errorMessage' => __( 'No theme specified.' ),\n\t\t\t)\n\t\t);\n\t}\n\n\t$slug = sanitize_key( wp_unslash( $_POST['slug'] ) );\n\n\t$status = array(\n\t\t'install' => 'theme',\n\t\t'slug'    => $slug,\n\t);\n\n\tif ( ! current_user_can( 'install_themes' ) ) {\n\t\t$status['errorMessage'] = __( 'Sorry, you are not allowed to install themes on this site.' );\n\t\twp_send_json_error( $status );\n\t}\n\n\trequire_once ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';\n\trequire_once ABSPATH . 'wp-admin/includes/theme.php';\n\n\t$api = themes_api(\n\t\t'theme_information',\n\t\tarray(\n\t\t\t'slug'   => $slug,\n\t\t\t'fields' => array( 'sections' => false ),\n\t\t)\n\t);\n\n\tif ( is_wp_error( $api ) ) {\n\t\t$status['errorMessage'] = $api->get_error_message();\n\t\twp_send_json_error( $status );\n\t}\n\n\t$skin     = new WP_Ajax_Upgrader_Skin();\n\t$upgrader = new Theme_Upgrader( $skin );\n\t$result   = $upgrader->install( $api->download_link );\n\n\tif ( defined( 'WP_DEBUG' ) && WP_DEBUG ) {\n\t\t$status['debug'] = $skin->get_upgrade_messages();\n\t}\n\n\tif ( is_wp_error( $result ) ) {\n\t\t$status['errorCode']    = $result->get_error_code();\n\t\t$status['errorMessage'] = $result->get_error_message();\n\t\twp_send_json_error( $status );\n\t} elseif ( is_wp_error( $skin->result ) ) {\n\t\t$status['errorCode']    = $skin->result->get_error_code();\n\t\t$status['errorMessage'] = $skin->result->get_error_message();\n\t\twp_send_json_error( $status );\n\t} elseif ( $skin->get_errors()->has_errors() ) {\n\t\t$status['errorMessage'] = $skin->get_error_messages();\n\t\twp_send_json_error( $status );\n\t} elseif ( is_null( $result ) ) {\n\t\tglobal $wp_filesystem;\n\n\t\t$status['errorCode']    = 'unable_to_connect_to_filesystem';\n\t\t$status['errorMessage'] = __( 'Unable to connect to the filesystem. Please confirm your credentials.' );\n\n\t\t// Pass through the error from WP_Filesystem if one was raised.\n\t\tif ( $wp_filesystem instanceof WP_Filesystem_Base && is_wp_error( $wp_filesystem->errors ) && $wp_filesystem->errors->has_errors() ) {\n\t\t\t$status['errorMessage'] = esc_html( $wp_filesystem->errors->get_error_message() );\n\t\t}\n\n\t\twp_send_json_error( $status );\n\t}\n\n\t$status['themeName'] = wp_get_theme( $slug )->get( 'Name' );\n\n\tif ( current_user_can( 'switch_themes' ) ) {\n\t\tif ( is_multisite() ) {\n\t\t\t$status['activateUrl'] = add_query_arg(\n\t\t\t\tarray(\n\t\t\t\t\t'action'   => 'enable',\n\t\t\t\t\t'_wpnonce' => wp_create_nonce( 'enable-theme_' . $slug ),\n\t\t\t\t\t'theme'    => $slug,\n\t\t\t\t),\n\t\t\t\tnetwork_admin_url( 'themes.php' )\n\t\t\t);\n\t\t} else {\n\t\t\t$status['activateUrl'] = add_query_arg(\n\t\t\t\tarray(\n\t\t\t\t\t'action'     => 'activate',\n\t\t\t\t\t'_wpnonce'   => wp_create_nonce( 'switch-theme_' . $slug ),\n\t\t\t\t\t'stylesheet' => $slug,\n\t\t\t\t),\n\t\t\t\tadmin_url( 'themes.php' )\n\t\t\t);\n\t\t}\n\t}\n\n\t$theme                = wp_get_theme( $slug );\n\t$status['blockTheme'] = $theme->is_block_theme();\n\n\tif ( ! is_multisite() && current_user_can( 'edit_theme_options' ) && current_user_can( 'customize' ) ) {\n\t\t$status['customizeUrl'] = add_query_arg(\n\t\t\tarray(\n\t\t\t\t'return' => urlencode( network_admin_url( 'theme-install.php', 'relative' ) ),\n\t\t\t),\n\t\t\twp_customize_url( $slug )\n\t\t);\n\t}\n\n\t/*\n\t * See WP_Theme_Install_List_Table::_get_theme_status() if we wanted to check\n\t * on post-installation status.\n\t */\n\twp_send_json_success( $status );\n}\n\n/**\n * Handles updating a theme via AJAX.\n *\n * @since 4.6.0\n *\n * @see Theme_Upgrader\n *\n * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.\n */\nfunction wp_ajax_update_theme() {\n\tcheck_ajax_referer( 'updates' );\n\n\tif ( empty( $_POST['slug'] ) ) {\n\t\twp_send_json_error(\n\t\t\tarray(\n\t\t\t\t'slug'         => '',\n\t\t\t\t'errorCode'    => 'no_theme_specified',\n\t\t\t\t'errorMessage' => __( 'No theme specified.' ),\n\t\t\t)\n\t\t);\n\t}\n\n\t$stylesheet = preg_replace( '/[^A-z0-9_\\-]/', '', wp_unslash( $_POST['slug'] ) );\n\t$status     = array(\n\t\t'update'     => 'theme',\n\t\t'slug'       => $stylesheet,\n\t\t'oldVersion' => '',\n\t\t'newVersion' => '',\n\t);\n\n\tif ( ! current_user_can( 'update_themes' ) ) {\n\t\t$status['errorMessage'] = __( 'Sorry, you are not allowed to update themes for this site.' );\n\t\twp_send_json_error( $status );\n\t}\n\n\t$theme = wp_get_theme( $stylesheet );\n\tif ( $theme->exists() ) {\n\t\t$status['oldVersion'] = $theme->get( 'Version' );\n\t}\n\n\trequire_once ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';\n\n\t$current = get_site_transient( 'update_themes' );\n\tif ( empty( $current ) ) {\n\t\twp_update_themes();\n\t}\n\n\t$skin     = new WP_Ajax_Upgrader_Skin();\n\t$upgrader = new Theme_Upgrader( $skin );\n\t$result   = $upgrader->bulk_upgrade( array( $stylesheet ) );\n\n\tif ( defined( 'WP_DEBUG' ) && WP_DEBUG ) {\n\t\t$status['debug'] = $skin->get_upgrade_messages();\n\t}\n\n\tif ( is_wp_error( $skin->result ) ) {\n\t\t$status['errorCode']    = $skin->result->get_error_code();\n\t\t$status['errorMessage'] = $skin->result->get_error_message();\n\t\twp_send_json_error( $status );\n\t} elseif ( $skin->get_errors()->has_errors() ) {\n\t\t$status['errorMessage'] = $skin->get_error_messages();\n\t\twp_send_json_error( $status );\n\t} elseif ( is_array( $result ) && ! empty( $result[ $stylesheet ] ) ) {\n\n\t\t// Theme is already at the latest version.\n\t\tif ( true === $result[ $stylesheet ] ) {\n\t\t\t$status['errorMessage'] = $upgrader->strings['up_to_date'];\n\t\t\twp_send_json_error( $status );\n\t\t}\n\n\t\t$theme = wp_get_theme( $stylesheet );\n\t\tif ( $theme->exists() ) {\n\t\t\t$status['newVersion'] = $theme->get( 'Version' );\n\t\t}\n\n\t\twp_send_json_success( $status );\n\t} elseif ( false === $result ) {\n\t\tglobal $wp_filesystem;\n\n\t\t$status['errorCode']    = 'unable_to_connect_to_filesystem';\n\t\t$status['errorMessage'] = __( 'Unable to connect to the filesystem. Please confirm your credentials.' );\n\n\t\t// Pass through the error from WP_Filesystem if one was raised.\n\t\tif ( $wp_filesystem instanceof WP_Filesystem_Base && is_wp_error( $wp_filesystem->errors ) && $wp_filesystem->errors->has_errors() ) {\n\t\t\t$status['errorMessage'] = esc_html( $wp_filesystem->errors->get_error_message() );\n\t\t}\n\n\t\twp_send_json_error( $status );\n\t}\n\n\t// An unhandled error occurred.\n\t$status['errorMessage'] = __( 'Theme update failed.' );\n\twp_send_json_error( $status );\n}\n\n/**\n * Handles deleting a theme via AJAX.\n *\n * @since 4.6.0\n *\n * @see delete_theme()\n *\n * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.\n */\nfunction wp_ajax_delete_theme() {\n\tcheck_ajax_referer( 'updates' );\n\n\tif ( empty( $_POST['slug'] ) ) {\n\t\twp_send_json_error(\n\t\t\tarray(\n\t\t\t\t'slug'         => '',\n\t\t\t\t'errorCode'    => 'no_theme_specified',\n\t\t\t\t'errorMessage' => __( 'No theme specified.' ),\n\t\t\t)\n\t\t);\n\t}\n\n\t$stylesheet = preg_replace( '/[^A-z0-9_\\-]/', '', wp_unslash( $_POST['slug'] ) );\n\t$status     = array(\n\t\t'delete' => 'theme',\n\t\t'slug'   => $stylesheet,\n\t);\n\n\tif ( ! current_user_can( 'delete_themes' ) ) {\n\t\t$status['errorMessage'] = __( 'Sorry, you are not allowed to delete themes on this site.' );\n\t\twp_send_json_error( $status );\n\t}\n\n\tif ( ! wp_get_theme( $stylesheet )->exists() ) {\n\t\t$status['errorMessage'] = __( 'The requested theme does not exist.' );\n\t\twp_send_json_error( $status );\n\t}\n\n\t// Check filesystem credentials. `delete_theme()` will bail otherwise.\n\t$url = wp_nonce_url( 'themes.php?action=delete&stylesheet=' . urlencode( $stylesheet ), 'delete-theme_' . $stylesheet );\n\n\tob_start();\n\t$credentials = request_filesystem_credentials( $url );\n\tob_end_clean();\n\n\tif ( false === $credentials || ! WP_Filesystem( $credentials ) ) {\n\t\tglobal $wp_filesystem;\n\n\t\t$status['errorCode']    = 'unable_to_connect_to_filesystem';\n\t\t$status['errorMessage'] = __( 'Unable to connect to the filesystem. Please confirm your credentials.' );\n\n\t\t// Pass through the error from WP_Filesystem if one was raised.\n\t\tif ( $wp_filesystem instanceof WP_Filesystem_Base && is_wp_error( $wp_filesystem->errors ) && $wp_filesystem->errors->has_errors() ) {\n\t\t\t$status['errorMessage'] = esc_html( $wp_filesystem->errors->get_error_message() );\n\t\t}\n\n\t\twp_send_json_error( $status );\n\t}\n\n\trequire_once ABSPATH . 'wp-admin/includes/theme.php';\n\n\t$result = delete_theme( $stylesheet );\n\n\tif ( is_wp_error( $result ) ) {\n\t\t$status['errorMessage'] = $result->get_error_message();\n\t\twp_send_json_error( $status );\n\t} elseif ( false === $result ) {\n\t\t$status['errorMessage'] = __( 'Theme could not be deleted.' );\n\t\twp_send_json_error( $status );\n\t}\n\n\twp_send_json_success( $status );\n}\n\n/**\n * Handles installing a plugin via AJAX.\n *\n * @since 4.6.0\n *\n * @see Plugin_Upgrader\n *\n * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.\n */\nfunction wp_ajax_install_plugin() {\n\tcheck_ajax_referer( 'updates' );\n\n\tif ( empty( $_POST['slug'] ) ) {\n\t\twp_send_json_error(\n\t\t\tarray(\n\t\t\t\t'slug'         => '',\n\t\t\t\t'errorCode'    => 'no_plugin_specified',\n\t\t\t\t'errorMessage' => __( 'No plugin specified.' ),\n\t\t\t)\n\t\t);\n\t}\n\n\t$status = array(\n\t\t'install' => 'plugin',\n\t\t'slug'    => sanitize_key( wp_unslash( $_POST['slug'] ) ),\n\t);\n\n\tif ( ! current_user_can( 'install_plugins' ) ) {\n\t\t$status['errorMessage'] = __( 'Sorry, you are not allowed to install plugins on this site.' );\n\t\twp_send_json_error( $status );\n\t}\n\n\trequire_once ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';\n\trequire_once ABSPATH . 'wp-admin/includes/plugin-install.php';\n\n\t$api = plugins_api(\n\t\t'plugin_information',\n\t\tarray(\n\t\t\t'slug'   => sanitize_key( wp_unslash( $_POST['slug'] ) ),\n\t\t\t'fields' => array(\n\t\t\t\t'sections' => false,\n\t\t\t),\n\t\t)\n\t);\n\n\tif ( is_wp_error( $api ) ) {\n\t\t$status['errorMessage'] = $api->get_error_message();\n\t\twp_send_json_error( $status );\n\t}\n\n\t$status['pluginName'] = $api->name;\n\n\t$skin     = new WP_Ajax_Upgrader_Skin();\n\t$upgrader = new Plugin_Upgrader( $skin );\n\t$result   = $upgrader->install( $api->download_link );\n\n\tif ( defined( 'WP_DEBUG' ) && WP_DEBUG ) {\n\t\t$status['debug'] = $skin->get_upgrade_messages();\n\t}\n\n\tif ( is_wp_error( $result ) ) {\n\t\t$status['errorCode']    = $result->get_error_code();\n\t\t$status['errorMessage'] = $result->get_error_message();\n\t\twp_send_json_error( $status );\n\t} elseif ( is_wp_error( $skin->result ) ) {\n\t\t$status['errorCode']    = $skin->result->get_error_code();\n\t\t$status['errorMessage'] = $skin->result->get_error_message();\n\t\twp_send_json_error( $status );\n\t} elseif ( $skin->get_errors()->has_errors() ) {\n\t\t$status['errorMessage'] = $skin->get_error_messages();\n\t\twp_send_json_error( $status );\n\t} elseif ( is_null( $result ) ) {\n\t\tglobal $wp_filesystem;\n\n\t\t$status['errorCode']    = 'unable_to_connect_to_filesystem';\n\t\t$status['errorMessage'] = __( 'Unable to connect to the filesystem. Please confirm your credentials.' );\n\n\t\t// Pass through the error from WP_Filesystem if one was raised.\n\t\tif ( $wp_filesystem instanceof WP_Filesystem_Base && is_wp_error( $wp_filesystem->errors ) && $wp_filesystem->errors->has_errors() ) {\n\t\t\t$status['errorMessage'] = esc_html( $wp_filesystem->errors->get_error_message() );\n\t\t}\n\n\t\twp_send_json_error( $status );\n\t}\n\n\t$install_status = install_plugin_install_status( $api );\n\t$pagenow        = isset( $_POST['pagenow'] ) ? sanitize_key( $_POST['pagenow'] ) : '';\n\n\t// If installation request is coming from import page, do not return network activation link.\n\t$plugins_url = ( 'import' === $pagenow ) ? admin_url( 'plugins.php' ) : network_admin_url( 'plugins.php' );\n\n\tif ( current_user_can( 'activate_plugin', $install_status['file'] ) && is_plugin_inactive( $install_status['file'] ) ) {\n\t\t$status['activateUrl'] = add_query_arg(\n\t\t\tarray(\n\t\t\t\t'_wpnonce' => wp_create_nonce( 'activate-plugin_' . $install_status['file'] ),\n\t\t\t\t'action'   => 'activate',\n\t\t\t\t'plugin'   => $install_status['file'],\n\t\t\t),\n\t\t\t$plugins_url\n\t\t);\n\t}\n\n\tif ( is_multisite() && current_user_can( 'manage_network_plugins' ) && 'import' !== $pagenow ) {\n\t\t$status['activateUrl'] = add_query_arg( array( 'networkwide' => 1 ), $status['activateUrl'] );\n\t}\n\n\twp_send_json_success( $status );\n}\n\n/**\n * Handles activating a plugin via AJAX.\n *\n * @since 6.5.0\n */\nfunction wp_ajax_activate_plugin() {\n\tcheck_ajax_referer( 'updates' );\n\n\tif ( empty( $_POST['name'] ) || empty( $_POST['slug'] ) || empty( $_POST['plugin'] ) ) {\n\t\twp_send_json_error(\n\t\t\tarray(\n\t\t\t\t'slug'         => '',\n\t\t\t\t'pluginName'   => '',\n\t\t\t\t'plugin'       => '',\n\t\t\t\t'errorCode'    => 'no_plugin_specified',\n\t\t\t\t'errorMessage' => __( 'No plugin specified.' ),\n\t\t\t)\n\t\t);\n\t}\n\n\t$status = array(\n\t\t'activate'   => 'plugin',\n\t\t'slug'       => wp_unslash( $_POST['slug'] ),\n\t\t'pluginName' => wp_unslash( $_POST['name'] ),\n\t\t'plugin'     => wp_unslash( $_POST['plugin'] ),\n\t);\n\n\tif ( ! current_user_can( 'activate_plugin', $status['plugin'] ) ) {\n\t\t$status['errorMessage'] = __( 'Sorry, you are not allowed to activate plugins on this site.' );\n\t\twp_send_json_error( $status );\n\t}\n\n\tif ( is_plugin_active( $status['plugin'] ) ) {\n\t\t$status['errorMessage'] = sprintf(\n\t\t\t/* translators: %s: Plugin name. */\n\t\t\t__( '%s is already active.' ),\n\t\t\t$status['pluginName']\n\t\t);\n\t}\n\n\t$activated = activate_plugin( $status['plugin'] );\n\n\tif ( is_wp_error( $activated ) ) {\n\t\t$status['errorMessage'] = $activated->get_error_message();\n\t\twp_send_json_error( $status );\n\t}\n\n\twp_send_json_success( $status );\n}\n\n/**\n * Handles updating a plugin via AJAX.\n *\n * @since 4.2.0\n *\n * @see Plugin_Upgrader\n *\n * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.\n */\nfunction wp_ajax_update_plugin() {\n\tcheck_ajax_referer( 'updates' );\n\n\tif ( empty( $_POST['plugin'] ) || empty( $_POST['slug'] ) ) {\n\t\twp_send_json_error(\n\t\t\tarray(\n\t\t\t\t'slug'         => '',\n\t\t\t\t'errorCode'    => 'no_plugin_specified',\n\t\t\t\t'errorMessage' => __( 'No plugin specified.' ),\n\t\t\t)\n\t\t);\n\t}\n\n\t$plugin = plugin_basename( sanitize_text_field( wp_unslash( $_POST['plugin'] ) ) );\n\n\t$status = array(\n\t\t'update'     => 'plugin',\n\t\t'slug'       => sanitize_key( wp_unslash( $_POST['slug'] ) ),\n\t\t'oldVersion' => '',\n\t\t'newVersion' => '',\n\t);\n\n\tif ( ! current_user_can( 'update_plugins' ) || 0 !== validate_file( $plugin ) ) {\n\t\t$status['errorMessage'] = __( 'Sorry, you are not allowed to update plugins for this site.' );\n\t\twp_send_json_error( $status );\n\t}\n\n\t$plugin_data          = get_plugin_data( WP_PLUGIN_DIR . '/' . $plugin );\n\t$status['plugin']     = $plugin;\n\t$status['pluginName'] = $plugin_data['Name'];\n\n\tif ( $plugin_data['Version'] ) {\n\t\t/* translators: %s: Plugin version. */\n\t\t$status['oldVersion'] = sprintf( __( 'Version %s' ), $plugin_data['Version'] );\n\t}\n\n\trequire_once ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';\n\n\twp_update_plugins();\n\n\t$skin     = new WP_Ajax_Upgrader_Skin();\n\t$upgrader = new Plugin_Upgrader( $skin );\n\t$result   = $upgrader->bulk_upgrade( array( $plugin ) );\n\n\tif ( defined( 'WP_DEBUG' ) && WP_DEBUG ) {\n\t\t$status['debug'] = $skin->get_upgrade_messages();\n\t}\n\n\tif ( is_wp_error( $skin->result ) ) {\n\t\t$status['errorCode']    = $skin->result->get_error_code();\n\t\t$status['errorMessage'] = $skin->result->get_error_message();\n\t\twp_send_json_error( $status );\n\t} elseif ( $skin->get_errors()->has_errors() ) {\n\t\t$status['errorMessage'] = $skin->get_error_messages();\n\t\twp_send_json_error( $status );\n\t} elseif ( is_array( $result ) && ! empty( $result[ $plugin ] ) ) {\n\n\t\t/*\n\t\t * Plugin is already at the latest version.\n\t\t *\n\t\t * This may also be the return value if the `update_plugins` site transient is empty,\n\t\t * e.g. when you update two plugins in quick succession before the transient repopulates.\n\t\t *\n\t\t * Preferably something can be done to ensure `update_plugins` isn't empty.\n\t\t * For now, surface some sort of error here.\n\t\t */\n\t\tif ( true === $result[ $plugin ] ) {\n\t\t\t$status['errorMessage'] = $upgrader->strings['up_to_date'];\n\t\t\twp_send_json_error( $status );\n\t\t}\n\n\t\t$plugin_data = get_plugins( '/' . $result[ $plugin ]['destination_name'] );\n\t\t$plugin_data = reset( $plugin_data );\n\n\t\tif ( $plugin_data['Version'] ) {\n\t\t\t/* translators: %s: Plugin version. */\n\t\t\t$status['newVersion'] = sprintf( __( 'Version %s' ), $plugin_data['Version'] );\n\t\t}\n\n\t\twp_send_json_success( $status );\n\t} elseif ( false === $result ) {\n\t\tglobal $wp_filesystem;\n\n\t\t$status['errorCode']    = 'unable_to_connect_to_filesystem';\n\t\t$status['errorMessage'] = __( 'Unable to connect to the filesystem. Please confirm your credentials.' );\n\n\t\t// Pass through the error from WP_Filesystem if one was raised.\n\t\tif ( $wp_filesystem instanceof WP_Filesystem_Base && is_wp_error( $wp_filesystem->errors ) && $wp_filesystem->errors->has_errors() ) {\n\t\t\t$status['errorMessage'] = esc_html( $wp_filesystem->errors->get_error_message() );\n\t\t}\n\n\t\twp_send_json_error( $status );\n\t}\n\n\t// An unhandled error occurred.\n\t$status['errorMessage'] = __( 'Plugin update failed.' );\n\twp_send_json_error( $status );\n}\n\n/**\n * Handles deleting a plugin via AJAX.\n *\n * @since 4.6.0\n *\n * @see delete_plugins()\n *\n * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.\n */\nfunction wp_ajax_delete_plugin() {\n\tcheck_ajax_referer( 'updates' );\n\n\tif ( empty( $_POST['slug'] ) || empty( $_POST['plugin'] ) ) {\n\t\twp_send_json_error(\n\t\t\tarray(\n\t\t\t\t'slug'         => '',\n\t\t\t\t'errorCode'    => 'no_plugin_specified',\n\t\t\t\t'errorMessage' => __( 'No plugin specified.' ),\n\t\t\t)\n\t\t);\n\t}\n\n\t$plugin = plugin_basename( sanitize_text_field( wp_unslash( $_POST['plugin'] ) ) );\n\n\t$status = array(\n\t\t'delete' => 'plugin',\n\t\t'slug'   => sanitize_key( wp_unslash( $_POST['slug'] ) ),\n\t);\n\n\tif ( ! current_user_can( 'delete_plugins' ) || 0 !== validate_file( $plugin ) ) {\n\t\t$status['errorMessage'] = __( 'Sorry, you are not allowed to delete plugins for this site.' );\n\t\twp_send_json_error( $status );\n\t}\n\n\t$plugin_data          = get_plugin_data( WP_PLUGIN_DIR . '/' . $plugin );\n\t$status['plugin']     = $plugin;\n\t$status['pluginName'] = $plugin_data['Name'];\n\n\tif ( is_plugin_active( $plugin ) ) {\n\t\t$status['errorMessage'] = __( 'You cannot delete a plugin while it is active on the main site.' );\n\t\twp_send_json_error( $status );\n\t}\n\n\t// Check filesystem credentials. `delete_plugins()` will bail otherwise.\n\t$url = wp_nonce_url( 'plugins.php?action=delete-selected&verify-delete=1&checked[]=' . $plugin, 'bulk-plugins' );\n\n\tob_start();\n\t$credentials = request_filesystem_credentials( $url );\n\tob_end_clean();\n\n\tif ( false === $credentials || ! WP_Filesystem( $credentials ) ) {\n\t\tglobal $wp_filesystem;\n\n\t\t$status['errorCode']    = 'unable_to_connect_to_filesystem';\n\t\t$status['errorMessage'] = __( 'Unable to connect to the filesystem. Please confirm your credentials.' );\n\n\t\t// Pass through the error from WP_Filesystem if one was raised.\n\t\tif ( $wp_filesystem instanceof WP_Filesystem_Base && is_wp_error( $wp_filesystem->errors ) && $wp_filesystem->errors->has_errors() ) {\n\t\t\t$status['errorMessage'] = esc_html( $wp_filesystem->errors->get_error_message() );\n\t\t}\n\n\t\twp_send_json_error( $status );\n\t}\n\n\t$result = delete_plugins( array( $plugin ) );\n\n\tif ( is_wp_error( $result ) ) {\n\t\t$status['errorMessage'] = $result->get_error_message();\n\t\twp_send_json_error( $status );\n\t} elseif ( false === $result ) {\n\t\t$status['errorMessage'] = __( 'Plugin could not be deleted.' );\n\t\twp_send_json_error( $status );\n\t}\n\n\twp_send_json_success( $status );\n}\n\n/**\n * Handles searching plugins via AJAX.\n *\n * @since 4.6.0\n *\n * @global string $s Search term.\n */\nfunction wp_ajax_search_plugins() {\n\tcheck_ajax_referer( 'updates' );\n\n\t// Ensure after_plugin_row_{$plugin_file} gets hooked.\n\twp_plugin_update_rows();\n\n\t$pagenow = isset( $_POST['pagenow'] ) ? sanitize_key( $_POST['pagenow'] ) : '';\n\tif ( 'plugins-network' === $pagenow || 'plugins' === $pagenow ) {\n\t\tset_current_screen( $pagenow );\n\t}\n\n\t/** @var WP_Plugins_List_Table $wp_list_table */\n\t$wp_list_table = _get_list_table(\n\t\t'WP_Plugins_List_Table',\n\t\tarray(\n\t\t\t'screen' => get_current_screen(),\n\t\t)\n\t);\n\n\t$status = array();\n\n\tif ( ! $wp_list_table->ajax_user_can() ) {\n\t\t$status['errorMessage'] = __( 'Sorry, you are not allowed to manage plugins for this site.' );\n\t\twp_send_json_error( $status );\n\t}\n\n\t// Set the correct requester, so pagination works.\n\t$_SERVER['REQUEST_URI'] = add_query_arg(\n\t\tarray_diff_key(\n\t\t\t$_POST,\n\t\t\tarray(\n\t\t\t\t'_ajax_nonce' => null,\n\t\t\t\t'action'      => null,\n\t\t\t)\n\t\t),\n\t\tnetwork_admin_url( 'plugins.php', 'relative' )\n\t);\n\n\t$GLOBALS['s'] = wp_unslash( $_POST['s'] );\n\n\t$wp_list_table->prepare_items();\n\n\tob_start();\n\t$wp_list_table->display();\n\t$status['count'] = count( $wp_list_table->items );\n\t$status['items'] = ob_get_clean();\n\n\twp_send_json_success( $status );\n}\n\n/**\n * Handles searching plugins to install via AJAX.\n *\n * @since 4.6.0\n */\nfunction wp_ajax_search_install_plugins() {\n\tcheck_ajax_referer( 'updates' );\n\n\t$pagenow = isset( $_POST['pagenow'] ) ? sanitize_key( $_POST['pagenow'] ) : '';\n\tif ( 'plugin-install-network' === $pagenow || 'plugin-install' === $pagenow ) {\n\t\tset_current_screen( $pagenow );\n\t}\n\n\t/** @var WP_Plugin_Install_List_Table $wp_list_table */\n\t$wp_list_table = _get_list_table(\n\t\t'WP_Plugin_Install_List_Table',\n\t\tarray(\n\t\t\t'screen' => get_current_screen(),\n\t\t)\n\t);\n\n\t$status = array();\n\n\tif ( ! $wp_list_table->ajax_user_can() ) {\n\t\t$status['errorMessage'] = __( 'Sorry, you are not allowed to manage plugins for this site.' );\n\t\twp_send_json_error( $status );\n\t}\n\n\t// Set the correct requester, so pagination works.\n\t$_SERVER['REQUEST_URI'] = add_query_arg(\n\t\tarray_diff_key(\n\t\t\t$_POST,\n\t\t\tarray(\n\t\t\t\t'_ajax_nonce' => null,\n\t\t\t\t'action'      => null,\n\t\t\t)\n\t\t),\n\t\tnetwork_admin_url( 'plugin-install.php', 'relative' )\n\t);\n\n\t$wp_list_table->prepare_items();\n\n\tob_start();\n\t$wp_list_table->display();\n\t$status['count'] = (int) $wp_list_table->get_pagination_arg( 'total_items' );\n\t$status['items'] = ob_get_clean();\n\n\twp_send_json_success( $status );\n}\n\n/**\n * Handles editing a theme or plugin file via AJAX.\n *\n * @since 4.9.0\n *\n * @see wp_edit_theme_plugin_file()\n */\nfunction wp_ajax_edit_theme_plugin_file() {\n\t$r = wp_edit_theme_plugin_file( wp_unslash( $_POST ) ); // Validation of args is done in wp_edit_theme_plugin_file().\n\n\tif ( is_wp_error( $r ) ) {\n\t\twp_send_json_error(\n\t\t\tarray_merge(\n\t\t\t\tarray(\n\t\t\t\t\t'code'    => $r->get_error_code(),\n\t\t\t\t\t'message' => $r->get_error_message(),\n\t\t\t\t),\n\t\t\t\t(array) $r->get_error_data()\n\t\t\t)\n\t\t);\n\t} else {\n\t\twp_send_json_success(\n\t\t\tarray(\n\t\t\t\t'message' => __( 'File edited successfully.' ),\n\t\t\t)\n\t\t);\n\t}\n}\n\n/**\n * Handles exporting a user's personal data via AJAX.\n *\n * @since 4.9.6\n */\nfunction wp_ajax_wp_privacy_export_personal_data() {\n\n\tif ( empty( $_POST['id'] ) ) {\n\t\twp_send_json_error( __( 'Missing request ID.' ) );\n\t}\n\n\t$request_id = (int) $_POST['id'];\n\n\tif ( $request_id < 1 ) {\n\t\twp_send_json_error( __( 'Invalid request ID.' ) );\n\t}\n\n\tif ( ! current_user_can( 'export_others_personal_data' ) ) {\n\t\twp_send_json_error( __( 'Sorry, you are not allowed to perform this action.' ) );\n\t}\n\n\tcheck_ajax_referer( 'wp-privacy-export-personal-data-' . $request_id, 'security' );\n\n\t// Get the request.\n\t$request = wp_get_user_request( $request_id );\n\n\tif ( ! $request || 'export_personal_data' !== $request->action_name ) {\n\t\twp_send_json_error( __( 'Invalid request type.' ) );\n\t}\n\n\t$email_address = $request->email;\n\tif ( ! is_email( $email_address ) ) {\n\t\twp_send_json_error( __( 'A valid email address must be given.' ) );\n\t}\n\n\tif ( ! isset( $_POST['exporter'] ) ) {\n\t\twp_send_json_error( __( 'Missing exporter index.' ) );\n\t}\n\n\t$exporter_index = (int) $_POST['exporter'];\n\n\tif ( ! isset( $_POST['page'] ) ) {\n\t\twp_send_json_error( __( 'Missing page index.' ) );\n\t}\n\n\t$page = (int) $_POST['page'];\n\n\t$send_as_email = isset( $_POST['sendAsEmail'] ) ? ( 'true' === $_POST['sendAsEmail'] ) : false;\n\n\t/**\n\t * Filters the array of exporter callbacks.\n\t *\n\t * @since 4.9.6\n\t *\n\t * @param array $args {\n\t *     An array of callable exporters of personal data. Default empty array.\n\t *\n\t *     @type array ...$0 {\n\t *         Array of personal data exporters.\n\t *\n\t *         @type callable $callback               Callable exporter function that accepts an\n\t *                                                email address and a page number and returns an\n\t *                                                array of name => value pairs of personal data.\n\t *         @type string   $exporter_friendly_name Translated user facing friendly name for the\n\t *                                                exporter.\n\t *     }\n\t * }\n\t */\n\t$exporters = apply_filters( 'wp_privacy_personal_data_exporters', array() );\n\n\tif ( ! is_array( $exporters ) ) {\n\t\twp_send_json_error( __( 'An exporter has improperly used the registration filter.' ) );\n\t}\n\n\t// Do we have any registered exporters?\n\tif ( 0 < count( $exporters ) ) {\n\t\tif ( $exporter_index < 1 ) {\n\t\t\twp_send_json_error( __( 'Exporter index cannot be negative.' ) );\n\t\t}\n\n\t\tif ( $exporter_index > count( $exporters ) ) {\n\t\t\twp_send_json_error( __( 'Exporter index is out of range.' ) );\n\t\t}\n\n\t\tif ( $page < 1 ) {\n\t\t\twp_send_json_error( __( 'Page index cannot be less than one.' ) );\n\t\t}\n\n\t\t$exporter_keys = array_keys( $exporters );\n\t\t$exporter_key  = $exporter_keys[ $exporter_index - 1 ];\n\t\t$exporter      = $exporters[ $exporter_key ];\n\n\t\tif ( ! is_array( $exporter ) ) {\n\t\t\twp_send_json_error(\n\t\t\t\t/* translators: %s: Exporter array index. */\n\t\t\t\tsprintf( __( 'Expected an array describing the exporter at index %s.' ), $exporter_key )\n\t\t\t);\n\t\t}\n\n\t\tif ( ! array_key_exists( 'exporter_friendly_name', $exporter ) ) {\n\t\t\twp_send_json_error(\n\t\t\t\t/* translators: %s: Exporter array index. */\n\t\t\t\tsprintf( __( 'Exporter array at index %s does not include a friendly name.' ), $exporter_key )\n\t\t\t);\n\t\t}\n\n\t\t$exporter_friendly_name = $exporter['exporter_friendly_name'];\n\n\t\tif ( ! array_key_exists( 'callback', $exporter ) ) {\n\t\t\twp_send_json_error(\n\t\t\t\t/* translators: %s: Exporter friendly name. */\n\t\t\t\tsprintf( __( 'Exporter does not include a callback: %s.' ), esc_html( $exporter_friendly_name ) )\n\t\t\t);\n\t\t}\n\n\t\tif ( ! is_callable( $exporter['callback'] ) ) {\n\t\t\twp_send_json_error(\n\t\t\t\t/* translators: %s: Exporter friendly name. */\n\t\t\t\tsprintf( __( 'Exporter callback is not a valid callback: %s.' ), esc_html( $exporter_friendly_name ) )\n\t\t\t);\n\t\t}\n\n\t\t$callback = $exporter['callback'];\n\t\t$response = call_user_func( $callback, $email_address, $page );\n\n\t\tif ( is_wp_error( $response ) ) {\n\t\t\twp_send_json_error( $response );\n\t\t}\n\n\t\tif ( ! is_array( $response ) ) {\n\t\t\twp_send_json_error(\n\t\t\t\t/* translators: %s: Exporter friendly name. */\n\t\t\t\tsprintf( __( 'Expected response as an array from exporter: %s.' ), esc_html( $exporter_friendly_name ) )\n\t\t\t);\n\t\t}\n\n\t\tif ( ! array_key_exists( 'data', $response ) ) {\n\t\t\twp_send_json_error(\n\t\t\t\t/* translators: %s: Exporter friendly name. */\n\t\t\t\tsprintf( __( 'Expected data in response array from exporter: %s.' ), esc_html( $exporter_friendly_name ) )\n\t\t\t);\n\t\t}\n\n\t\tif ( ! is_array( $response['data'] ) ) {\n\t\t\twp_send_json_error(\n\t\t\t\t/* translators: %s: Exporter friendly name. */\n\t\t\t\tsprintf( __( 'Expected data array in response array from exporter: %s.' ), esc_html( $exporter_friendly_name ) )\n\t\t\t);\n\t\t}\n\n\t\tif ( ! array_key_exists( 'done', $response ) ) {\n\t\t\twp_send_json_error(\n\t\t\t\t/* translators: %s: Exporter friendly name. */\n\t\t\t\tsprintf( __( 'Expected done (boolean) in response array from exporter: %s.' ), esc_html( $exporter_friendly_name ) )\n\t\t\t);\n\t\t}\n\t} else {\n\t\t// No exporters, so we're done.\n\t\t$exporter_key = '';\n\n\t\t$response = array(\n\t\t\t'data' => array(),\n\t\t\t'done' => true,\n\t\t);\n\t}\n\n\t/**\n\t * Filters a page of personal data exporter data. Used to build the export report.\n\t *\n\t * Allows the export response to be consumed by destinations in addition to Ajax.\n\t *\n\t * @since 4.9.6\n\t *\n\t * @param array  $response        The personal data for the given exporter and page number.\n\t * @param int    $exporter_index  The index of the exporter that provided this data.\n\t * @param string $email_address   The email address associated with this personal data.\n\t * @param int    $page            The page number for this response.\n\t * @param int    $request_id      The privacy request post ID associated with this request.\n\t * @param bool   $send_as_email   Whether the final results of the export should be emailed to the user.\n\t * @param string $exporter_key    The key (slug) of the exporter that provided this data.\n\t */\n\t$response = apply_filters( 'wp_privacy_personal_data_export_page', $response, $exporter_index, $email_address, $page, $request_id, $send_as_email, $exporter_key );\n\n\tif ( is_wp_error( $response ) ) {\n\t\twp_send_json_error( $response );\n\t}\n\n\twp_send_json_success( $response );\n}\n\n/**\n * Handles erasing personal data via AJAX.\n *\n * @since 4.9.6\n */\nfunction wp_ajax_wp_privacy_erase_personal_data() {\n\n\tif ( empty( $_POST['id'] ) ) {\n\t\twp_send_json_error( __( 'Missing request ID.' ) );\n\t}\n\n\t$request_id = (int) $_POST['id'];\n\n\tif ( $request_id < 1 ) {\n\t\twp_send_json_error( __( 'Invalid request ID.' ) );\n\t}\n\n\t// Both capabilities are required to avoid confusion, see `_wp_personal_data_removal_page()`.\n\tif ( ! current_user_can( 'erase_others_personal_data' ) || ! current_user_can( 'delete_users' ) ) {\n\t\twp_send_json_error( __( 'Sorry, you are not allowed to perform this action.' ) );\n\t}\n\n\tcheck_ajax_referer( 'wp-privacy-erase-personal-data-' . $request_id, 'security' );\n\n\t// Get the request.\n\t$request = wp_get_user_request( $request_id );\n\n\tif ( ! $request || 'remove_personal_data' !== $request->action_name ) {\n\t\twp_send_json_error( __( 'Invalid request type.' ) );\n\t}\n\n\t$email_address = $request->email;\n\n\tif ( ! is_email( $email_address ) ) {\n\t\twp_send_json_error( __( 'Invalid email address in request.' ) );\n\t}\n\n\tif ( ! isset( $_POST['eraser'] ) ) {\n\t\twp_send_json_error( __( 'Missing eraser index.' ) );\n\t}\n\n\t$eraser_index = (int) $_POST['eraser'];\n\n\tif ( ! isset( $_POST['page'] ) ) {\n\t\twp_send_json_error( __( 'Missing page index.' ) );\n\t}\n\n\t$page = (int) $_POST['page'];\n\n\t/**\n\t * Filters the array of personal data eraser callbacks.\n\t *\n\t * @since 4.9.6\n\t *\n\t * @param array $args {\n\t *     An array of callable erasers of personal data. Default empty array.\n\t *\n\t *     @type array ...$0 {\n\t *         Array of personal data exporters.\n\t *\n\t *         @type callable $callback               Callable eraser that accepts an email address and a page\n\t *                                                number, and returns an array with boolean values for\n\t *                                                whether items were removed or retained and any messages\n\t *                                                from the eraser, as well as if additional pages are\n\t *                                                available.\n\t *         @type string   $exporter_friendly_name Translated user facing friendly name for the eraser.\n\t *     }\n\t * }\n\t */\n\t$erasers = apply_filters( 'wp_privacy_personal_data_erasers', array() );\n\n\t// Do we have any registered erasers?\n\tif ( 0 < count( $erasers ) ) {\n\n\t\tif ( $eraser_index < 1 ) {\n\t\t\twp_send_json_error( __( 'Eraser index cannot be less than one.' ) );\n\t\t}\n\n\t\tif ( $eraser_index > count( $erasers ) ) {\n\t\t\twp_send_json_error( __( 'Eraser index is out of range.' ) );\n\t\t}\n\n\t\tif ( $page < 1 ) {\n\t\t\twp_send_json_error( __( 'Page index cannot be less than one.' ) );\n\t\t}\n\n\t\t$eraser_keys = array_keys( $erasers );\n\t\t$eraser_key  = $eraser_keys[ $eraser_index - 1 ];\n\t\t$eraser      = $erasers[ $eraser_key ];\n\n\t\tif ( ! is_array( $eraser ) ) {\n\t\t\t/* translators: %d: Eraser array index. */\n\t\t\twp_send_json_error( sprintf( __( 'Expected an array describing the eraser at index %d.' ), $eraser_index ) );\n\t\t}\n\n\t\tif ( ! array_key_exists( 'eraser_friendly_name', $eraser ) ) {\n\t\t\t/* translators: %d: Eraser array index. */\n\t\t\twp_send_json_error( sprintf( __( 'Eraser array at index %d does not include a friendly name.' ), $eraser_index ) );\n\t\t}\n\n\t\t$eraser_friendly_name = $eraser['eraser_friendly_name'];\n\n\t\tif ( ! array_key_exists( 'callback', $eraser ) ) {\n\t\t\twp_send_json_error(\n\t\t\t\tsprintf(\n\t\t\t\t\t/* translators: %s: Eraser friendly name. */\n\t\t\t\t\t__( 'Eraser does not include a callback: %s.' ),\n\t\t\t\t\tesc_html( $eraser_friendly_name )\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif ( ! is_callable( $eraser['callback'] ) ) {\n\t\t\twp_send_json_error(\n\t\t\t\tsprintf(\n\t\t\t\t\t/* translators: %s: Eraser friendly name. */\n\t\t\t\t\t__( 'Eraser callback is not valid: %s.' ),\n\t\t\t\t\tesc_html( $eraser_friendly_name )\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t$callback = $eraser['callback'];\n\t\t$response = call_user_func( $callback, $email_address, $page );\n\n\t\tif ( is_wp_error( $response ) ) {\n\t\t\twp_send_json_error( $response );\n\t\t}\n\n\t\tif ( ! is_array( $response ) ) {\n\t\t\twp_send_json_error(\n\t\t\t\tsprintf(\n\t\t\t\t\t/* translators: 1: Eraser friendly name, 2: Eraser array index. */\n\t\t\t\t\t__( 'Did not receive array from %1$s eraser (index %2$d).' ),\n\t\t\t\t\tesc_html( $eraser_friendly_name ),\n\t\t\t\t\t$eraser_index\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif ( ! array_key_exists( 'items_removed', $response ) ) {\n\t\t\twp_send_json_error(\n\t\t\t\tsprintf(\n\t\t\t\t\t/* translators: 1: Eraser friendly name, 2: Eraser array index. */\n\t\t\t\t\t__( 'Expected items_removed key in response array from %1$s eraser (index %2$d).' ),\n\t\t\t\t\tesc_html( $eraser_friendly_name ),\n\t\t\t\t\t$eraser_index\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif ( ! array_key_exists( 'items_retained', $response ) ) {\n\t\t\twp_send_json_error(\n\t\t\t\tsprintf(\n\t\t\t\t\t/* translators: 1: Eraser friendly name, 2: Eraser array index. */\n\t\t\t\t\t__( 'Expected items_retained key in response array from %1$s eraser (index %2$d).' ),\n\t\t\t\t\tesc_html( $eraser_friendly_name ),\n\t\t\t\t\t$eraser_index\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif ( ! array_key_exists( 'messages', $response ) ) {\n\t\t\twp_send_json_error(\n\t\t\t\tsprintf(\n\t\t\t\t\t/* translators: 1: Eraser friendly name, 2: Eraser array index. */\n\t\t\t\t\t__( 'Expected messages key in response array from %1$s eraser (index %2$d).' ),\n\t\t\t\t\tesc_html( $eraser_friendly_name ),\n\t\t\t\t\t$eraser_index\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif ( ! is_array( $response['messages'] ) ) {\n\t\t\twp_send_json_error(\n\t\t\t\tsprintf(\n\t\t\t\t\t/* translators: 1: Eraser friendly name, 2: Eraser array index. */\n\t\t\t\t\t__( 'Expected messages key to reference an array in response array from %1$s eraser (index %2$d).' ),\n\t\t\t\t\tesc_html( $eraser_friendly_name ),\n\t\t\t\t\t$eraser_index\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif ( ! array_key_exists( 'done', $response ) ) {\n\t\t\twp_send_json_error(\n\t\t\t\tsprintf(\n\t\t\t\t\t/* translators: 1: Eraser friendly name, 2: Eraser array index. */\n\t\t\t\t\t__( 'Expected done flag in response array from %1$s eraser (index %2$d).' ),\n\t\t\t\t\tesc_html( $eraser_friendly_name ),\n\t\t\t\t\t$eraser_index\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t} else {\n\t\t// No erasers, so we're done.\n\t\t$eraser_key = '';\n\n\t\t$response = array(\n\t\t\t'items_removed'  => false,\n\t\t\t'items_retained' => false,\n\t\t\t'messages'       => array(),\n\t\t\t'done'           => true,\n\t\t);\n\t}\n\n\t/**\n\t * Filters a page of personal data eraser data.\n\t *\n\t * Allows the erasure response to be consumed by destinations in addition to Ajax.\n\t *\n\t * @since 4.9.6\n\t *\n\t * @param array  $response        {\n\t *     The personal data for the given exporter and page number.\n\t *\n\t *     @type bool     $items_removed  Whether items were actually removed or not.\n\t *     @type bool     $items_retained Whether items were retained or not.\n\t *     @type string[] $messages       An array of messages to add to the personal data export file.\n\t *     @type bool     $done           Whether the eraser is finished or not.\n\t * }\n\t * @param int    $eraser_index    The index of the eraser that provided this data.\n\t * @param string $email_address   The email address associated with this personal data.\n\t * @param int    $page            The page number for this response.\n\t * @param int    $request_id      The privacy request post ID associated with this request.\n\t * @param string $eraser_key      The key (slug) of the eraser that provided this data.\n\t */\n\t$response = apply_filters( 'wp_privacy_personal_data_erasure_page', $response, $eraser_index, $email_address, $page, $request_id, $eraser_key );\n\n\tif ( is_wp_error( $response ) ) {\n\t\twp_send_json_error( $response );\n\t}\n\n\twp_send_json_success( $response );\n}\n\n/**\n * Handles site health checks on server communication via AJAX.\n *\n * @since 5.2.0\n * @deprecated 5.6.0 Use WP_REST_Site_Health_Controller::test_dotorg_communication()\n * @see WP_REST_Site_Health_Controller::test_dotorg_communication()\n */\nfunction wp_ajax_health_check_dotorg_communication() {\n\t_doing_it_wrong(\n\t\t'wp_ajax_health_check_dotorg_communication',\n\t\tsprintf(\n\t\t\t/* translators: 1: The Site Health action that is no longer used by core. 2: The new function that replaces it. */\n\t\t\t__( 'The Site Health check for %1$s has been replaced with %2$s.' ),\n\t\t\t'wp_ajax_health_check_dotorg_communication',\n\t\t\t'WP_REST_Site_Health_Controller::test_dotorg_communication'\n\t\t),\n\t\t'5.6.0'\n\t);\n\n\tcheck_ajax_referer( 'health-check-site-status' );\n\n\tif ( ! current_user_can( 'view_site_health_checks' ) ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( ! class_exists( 'WP_Site_Health' ) ) {\n\t\trequire_once ABSPATH . 'wp-admin/includes/class-wp-site-health.php';\n\t}\n\n\t$site_health = WP_Site_Health::get_instance();\n\twp_send_json_success( $site_health->get_test_dotorg_communication() );\n}\n\n/**\n * Handles site health checks on background updates via AJAX.\n *\n * @since 5.2.0\n * @deprecated 5.6.0 Use WP_REST_Site_Health_Controller::test_background_updates()\n * @see WP_REST_Site_Health_Controller::test_background_updates()\n */\nfunction wp_ajax_health_check_background_updates() {\n\t_doing_it_wrong(\n\t\t'wp_ajax_health_check_background_updates',\n\t\tsprintf(\n\t\t\t/* translators: 1: The Site Health action that is no longer used by core. 2: The new function that replaces it. */\n\t\t\t__( 'The Site Health check for %1$s has been replaced with %2$s.' ),\n\t\t\t'wp_ajax_health_check_background_updates',\n\t\t\t'WP_REST_Site_Health_Controller::test_background_updates'\n\t\t),\n\t\t'5.6.0'\n\t);\n\n\tcheck_ajax_referer( 'health-check-site-status' );\n\n\tif ( ! current_user_can( 'view_site_health_checks' ) ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( ! class_exists( 'WP_Site_Health' ) ) {\n\t\trequire_once ABSPATH . 'wp-admin/includes/class-wp-site-health.php';\n\t}\n\n\t$site_health = WP_Site_Health::get_instance();\n\twp_send_json_success( $site_health->get_test_background_updates() );\n}\n\n/**\n * Handles site health checks on loopback requests via AJAX.\n *\n * @since 5.2.0\n * @deprecated 5.6.0 Use WP_REST_Site_Health_Controller::test_loopback_requests()\n * @see WP_REST_Site_Health_Controller::test_loopback_requests()\n */\nfunction wp_ajax_health_check_loopback_requests() {\n\t_doing_it_wrong(\n\t\t'wp_ajax_health_check_loopback_requests',\n\t\tsprintf(\n\t\t\t/* translators: 1: The Site Health action that is no longer used by core. 2: The new function that replaces it. */\n\t\t\t__( 'The Site Health check for %1$s has been replaced with %2$s.' ),\n\t\t\t'wp_ajax_health_check_loopback_requests',\n\t\t\t'WP_REST_Site_Health_Controller::test_loopback_requests'\n\t\t),\n\t\t'5.6.0'\n\t);\n\n\tcheck_ajax_referer( 'health-check-site-status' );\n\n\tif ( ! current_user_can( 'view_site_health_checks' ) ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( ! class_exists( 'WP_Site_Health' ) ) {\n\t\trequire_once ABSPATH . 'wp-admin/includes/class-wp-site-health.php';\n\t}\n\n\t$site_health = WP_Site_Health::get_instance();\n\twp_send_json_success( $site_health->get_test_loopback_requests() );\n}\n\n/**\n * Handles site health check to update the result status via AJAX.\n *\n * @since 5.2.0\n */\nfunction wp_ajax_health_check_site_status_result() {\n\tcheck_ajax_referer( 'health-check-site-status-result' );\n\n\tif ( ! current_user_can( 'view_site_health_checks' ) ) {\n\t\twp_send_json_error();\n\t}\n\n\tset_transient( 'health-check-site-status-result', wp_json_encode( $_POST['counts'] ) );\n\n\twp_send_json_success();\n}\n\n/**\n * Handles site health check to get directories and database sizes via AJAX.\n *\n * @since 5.2.0\n * @deprecated 5.6.0 Use WP_REST_Site_Health_Controller::get_directory_sizes()\n * @see WP_REST_Site_Health_Controller::get_directory_sizes()\n */\nfunction wp_ajax_health_check_get_sizes() {\n\t_doing_it_wrong(\n\t\t'wp_ajax_health_check_get_sizes',\n\t\tsprintf(\n\t\t\t/* translators: 1: The Site Health action that is no longer used by core. 2: The new function that replaces it. */\n\t\t\t__( 'The Site Health check for %1$s has been replaced with %2$s.' ),\n\t\t\t'wp_ajax_health_check_get_sizes',\n\t\t\t'WP_REST_Site_Health_Controller::get_directory_sizes'\n\t\t),\n\t\t'5.6.0'\n\t);\n\n\tcheck_ajax_referer( 'health-check-site-status-result' );\n\n\tif ( ! current_user_can( 'view_site_health_checks' ) || is_multisite() ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( ! class_exists( 'WP_Debug_Data' ) ) {\n\t\trequire_once ABSPATH . 'wp-admin/includes/class-wp-debug-data.php';\n\t}\n\n\t$sizes_data = WP_Debug_Data::get_sizes();\n\t$all_sizes  = array( 'raw' => 0 );\n\n\tforeach ( $sizes_data as $name => $value ) {\n\t\t$name = sanitize_text_field( $name );\n\t\t$data = array();\n\n\t\tif ( isset( $value['size'] ) ) {\n\t\t\tif ( is_string( $value['size'] ) ) {\n\t\t\t\t$data['size'] = sanitize_text_field( $value['size'] );\n\t\t\t} else {\n\t\t\t\t$data['size'] = (int) $value['size'];\n\t\t\t}\n\t\t}\n\n\t\tif ( isset( $value['debug'] ) ) {\n\t\t\tif ( is_string( $value['debug'] ) ) {\n\t\t\t\t$data['debug'] = sanitize_text_field( $value['debug'] );\n\t\t\t} else {\n\t\t\t\t$data['debug'] = (int) $value['debug'];\n\t\t\t}\n\t\t}\n\n\t\tif ( ! empty( $value['raw'] ) ) {\n\t\t\t$data['raw'] = (int) $value['raw'];\n\t\t}\n\n\t\t$all_sizes[ $name ] = $data;\n\t}\n\n\tif ( isset( $all_sizes['total_size']['debug'] ) && 'not available' === $all_sizes['total_size']['debug'] ) {\n\t\twp_send_json_error( $all_sizes );\n\t}\n\n\twp_send_json_success( $all_sizes );\n}\n\n/**\n * Handles renewing the REST API nonce via AJAX.\n *\n * @since 5.3.0\n */\nfunction wp_ajax_rest_nonce() {\n\texit( wp_create_nonce( 'wp_rest' ) );\n}\n\n/**\n * Handles enabling or disable plugin and theme auto-updates via AJAX.\n *\n * @since 5.5.0\n */\nfunction wp_ajax_toggle_auto_updates() {\n\tcheck_ajax_referer( 'updates' );\n\n\tif ( empty( $_POST['type'] ) || empty( $_POST['asset'] ) || empty( $_POST['state'] ) ) {\n\t\twp_send_json_error( array( 'error' => __( 'Invalid data. No selected item.' ) ) );\n\t}\n\n\t$asset = sanitize_text_field( urldecode( $_POST['asset'] ) );\n\n\tif ( 'enable' !== $_POST['state'] && 'disable' !== $_POST['state'] ) {\n\t\twp_send_json_error( array( 'error' => __( 'Invalid data. Unknown state.' ) ) );\n\t}\n\t$state = $_POST['state'];\n\n\tif ( 'plugin' !== $_POST['type'] && 'theme' !== $_POST['type'] ) {\n\t\twp_send_json_error( array( 'error' => __( 'Invalid data. Unknown type.' ) ) );\n\t}\n\t$type = $_POST['type'];\n\n\tswitch ( $type ) {\n\t\tcase 'plugin':\n\t\t\tif ( ! current_user_can( 'update_plugins' ) ) {\n\t\t\t\t$error_message = __( 'Sorry, you are not allowed to modify plugins.' );\n\t\t\t\twp_send_json_error( array( 'error' => $error_message ) );\n\t\t\t}\n\n\t\t\t$option = 'auto_update_plugins';\n\t\t\t/** This filter is documented in wp-admin/includes/class-wp-plugins-list-table.php */\n\t\t\t$all_items = apply_filters( 'all_plugins', get_plugins() );\n\t\t\tbreak;\n\t\tcase 'theme':\n\t\t\tif ( ! current_user_can( 'update_themes' ) ) {\n\t\t\t\t$error_message = __( 'Sorry, you are not allowed to modify themes.' );\n\t\t\t\twp_send_json_error( array( 'error' => $error_message ) );\n\t\t\t}\n\n\t\t\t$option    = 'auto_update_themes';\n\t\t\t$all_items = wp_get_themes();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\twp_send_json_error( array( 'error' => __( 'Invalid data. Unknown type.' ) ) );\n\t}\n\n\tif ( ! array_key_exists( $asset, $all_items ) ) {\n\t\t$error_message = __( 'Invalid data. The item does not exist.' );\n\t\twp_send_json_error( array( 'error' => $error_message ) );\n\t}\n\n\t$auto_updates = (array) get_site_option( $option, array() );\n\n\tif ( 'disable' === $state ) {\n\t\t$auto_updates = array_diff( $auto_updates, array( $asset ) );\n\t} else {\n\t\t$auto_updates[] = $asset;\n\t\t$auto_updates   = array_unique( $auto_updates );\n\t}\n\n\t// Remove items that have been deleted since the site option was last updated.\n\t$auto_updates = array_intersect( $auto_updates, array_keys( $all_items ) );\n\n\tupdate_site_option( $option, $auto_updates );\n\n\twp_send_json_success();\n}\n\n/**\n * Handles sending a password reset link via AJAX.\n *\n * @since 5.7.0\n */\nfunction wp_ajax_send_password_reset() {\n\n\t// Validate the nonce for this action.\n\t$user_id = isset( $_POST['user_id'] ) ? (int) $_POST['user_id'] : 0;\n\tcheck_ajax_referer( 'reset-password-for-' . $user_id, 'nonce' );\n\n\t// Verify user capabilities.\n\tif ( ! current_user_can( 'edit_user', $user_id ) ) {\n\t\twp_send_json_error( __( 'Cannot send password reset, permission denied.' ) );\n\t}\n\n\t// Send the password reset link.\n\t$user    = get_userdata( $user_id );\n\t$results = retrieve_password( $user->user_login );\n\n\tif ( true === $results ) {\n\t\twp_send_json_success(\n\t\t\t/* translators: %s: User's display name. */\n\t\t\tsprintf( __( 'A password reset link was emailed to %s.' ), $user->display_name )\n\t\t);\n\t} else {\n\t\twp_send_json_error( $results->get_error_message() );\n\t}\n}\n", "patch": "@@ -197,8 +197,10 @@ function wp_ajax_wp_compression_test() {\n \t\t\techo $out;\n \t\t\twp_die();\n \t\t} elseif ( 'no' == $_GET['test'] ) {\n+\t\t\tcheck_ajax_referer( 'update_can_compress_scripts' );\n \t\t\tupdate_site_option('can_compress_scripts', 0);\n \t\t} elseif ( 'yes' == $_GET['test'] ) {\n+\t\t\tcheck_ajax_referer( 'update_can_compress_scripts' );\n \t\t\tupdate_site_option('can_compress_scripts', 1);\n \t\t}\n \t}", "file_path": "files/2016_8\\42", "file_language": "php", "file_name": "wp-admin/includes/ajax-actions.php", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/WordPress/WordPress/raw/9b7a7754133c50b82bd9d976fb5b24094f658aab/wp-admin/includes/template.php", "code": "<?php\n/**\n * Template WordPress Administration API.\n *\n * A Big Mess. Also some neat functions that are nicely written.\n *\n * @package WordPress\n * @subpackage Administration\n */\n\n/** Walker_Category_Checklist class */\nrequire_once( ABSPATH . 'wp-admin/includes/class-walker-category-checklist.php' );\n\n/** WP_Internal_Pointers class */\nrequire_once( ABSPATH . 'wp-admin/includes/class-wp-internal-pointers.php' );\n\n//\n// Category Checklists\n//\n\n/**\n * Output an unordered list of checkbox input elements labeled with category names.\n *\n * @since 2.5.1\n *\n * @see wp_terms_checklist()\n *\n * @param int    $post_id              Optional. Post to generate a categories checklist for. Default 0.\n *                                     $selected_cats must not be an array. Default 0.\n * @param int    $descendants_and_self Optional. ID of the category to output along with its descendants.\n *                                     Default 0.\n * @param array  $selected_cats        Optional. List of categories to mark as checked. Default false.\n * @param array  $popular_cats         Optional. List of categories to receive the \"popular-category\" class.\n *                                     Default false.\n * @param object $walker               Optional. Walker object to use to build the output.\n *                                     Default is a Walker_Category_Checklist instance.\n * @param bool   $checked_ontop        Optional. Whether to move checked items out of the hierarchy and to\n *                                     the top of the list. Default true.\n */\nfunction wp_category_checklist( $post_id = 0, $descendants_and_self = 0, $selected_cats = false, $popular_cats = false, $walker = null, $checked_ontop = true ) {\n\twp_terms_checklist( $post_id, array(\n\t\t'taxonomy' => 'category',\n\t\t'descendants_and_self' => $descendants_and_self,\n\t\t'selected_cats' => $selected_cats,\n\t\t'popular_cats' => $popular_cats,\n\t\t'walker' => $walker,\n\t\t'checked_ontop' => $checked_ontop\n\t) );\n}\n\n/**\n * Output an unordered list of checkbox input elements labelled with term names.\n *\n * Taxonomy-independent version of wp_category_checklist().\n *\n * @since 3.0.0\n * @since 4.4.0 Introduced the `$echo` argument.\n *\n * @param int          $post_id Optional. Post ID. Default 0.\n * @param array|string $args {\n *     Optional. Array or string of arguments for generating a terms checklist. Default empty array.\n *\n *     @type int    $descendants_and_self ID of the category to output along with its descendants.\n *                                        Default 0.\n *     @type array  $selected_cats        List of categories to mark as checked. Default false.\n *     @type array  $popular_cats         List of categories to receive the \"popular-category\" class.\n *                                        Default false.\n *     @type object $walker               Walker object to use to build the output.\n *                                        Default is a Walker_Category_Checklist instance.\n *     @type string $taxonomy             Taxonomy to generate the checklist for. Default 'category'.\n *     @type bool   $checked_ontop        Whether to move checked items out of the hierarchy and to\n *                                        the top of the list. Default true.\n *     @type bool   $echo                 Whether to echo the generated markup. False to return the markup instead\n *                                        of echoing it. Default true.\n * }\n */\nfunction wp_terms_checklist( $post_id = 0, $args = array() ) {\n \t$defaults = array(\n\t\t'descendants_and_self' => 0,\n\t\t'selected_cats' => false,\n\t\t'popular_cats' => false,\n\t\t'walker' => null,\n\t\t'taxonomy' => 'category',\n\t\t'checked_ontop' => true,\n\t\t'echo' => true,\n\t);\n\n\t/**\n\t * Filter the taxonomy terms checklist arguments.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @see wp_terms_checklist()\n\t *\n\t * @param array $args    An array of arguments.\n\t * @param int   $post_id The post ID.\n\t */\n\t$params = apply_filters( 'wp_terms_checklist_args', $args, $post_id );\n\n\t$r = wp_parse_args( $params, $defaults );\n\n\tif ( empty( $r['walker'] ) || ! ( $r['walker'] instanceof Walker ) ) {\n\t\t$walker = new Walker_Category_Checklist;\n\t} else {\n\t\t$walker = $r['walker'];\n\t}\n\n\t$taxonomy = $r['taxonomy'];\n\t$descendants_and_self = (int) $r['descendants_and_self'];\n\n\t$args = array( 'taxonomy' => $taxonomy );\n\n\t$tax = get_taxonomy( $taxonomy );\n\t$args['disabled'] = ! current_user_can( $tax->cap->assign_terms );\n\n\t$args['list_only'] = ! empty( $r['list_only'] );\n\n\tif ( is_array( $r['selected_cats'] ) ) {\n\t\t$args['selected_cats'] = $r['selected_cats'];\n\t} elseif ( $post_id ) {\n\t\t$args['selected_cats'] = wp_get_object_terms( $post_id, $taxonomy, array_merge( $args, array( 'fields' => 'ids' ) ) );\n\t} else {\n\t\t$args['selected_cats'] = array();\n\t}\n\tif ( is_array( $r['popular_cats'] ) ) {\n\t\t$args['popular_cats'] = $r['popular_cats'];\n\t} else {\n\t\t$args['popular_cats'] = get_terms( $taxonomy, array(\n\t\t\t'fields' => 'ids',\n\t\t\t'orderby' => 'count',\n\t\t\t'order' => 'DESC',\n\t\t\t'number' => 10,\n\t\t\t'hierarchical' => false\n\t\t) );\n\t}\n\tif ( $descendants_and_self ) {\n\t\t$categories = (array) get_terms( $taxonomy, array(\n\t\t\t'child_of' => $descendants_and_self,\n\t\t\t'hierarchical' => 0,\n\t\t\t'hide_empty' => 0\n\t\t) );\n\t\t$self = get_term( $descendants_and_self, $taxonomy );\n\t\tarray_unshift( $categories, $self );\n\t} else {\n\t\t$categories = (array) get_terms( $taxonomy, array( 'get' => 'all' ) );\n\t}\n\n\t$output = '';\n\n\tif ( $r['checked_ontop'] ) {\n\t\t// Post process $categories rather than adding an exclude to the get_terms() query to keep the query the same across all posts (for any query cache)\n\t\t$checked_categories = array();\n\t\t$keys = array_keys( $categories );\n\n\t\tforeach ( $keys as $k ) {\n\t\t\tif ( in_array( $categories[$k]->term_id, $args['selected_cats'] ) ) {\n\t\t\t\t$checked_categories[] = $categories[$k];\n\t\t\t\tunset( $categories[$k] );\n\t\t\t}\n\t\t}\n\n\t\t// Put checked cats on top\n\t\t$output .= call_user_func_array( array( $walker, 'walk' ), array( $checked_categories, 0, $args ) );\n\t}\n\t// Then the rest of them\n\t$output .= call_user_func_array( array( $walker, 'walk' ), array( $categories, 0, $args ) );\n\n\tif ( $r['echo'] ) {\n\t\techo $output;\n\t}\n\n\treturn $output;\n}\n\n/**\n * Retrieve a list of the most popular terms from the specified taxonomy.\n *\n * If the $echo argument is true then the elements for a list of checkbox\n * `<input>` elements labelled with the names of the selected terms is output.\n * If the $post_ID global isn't empty then the terms associated with that\n * post will be marked as checked.\n *\n * @since 2.5.0\n *\n * @param string $taxonomy Taxonomy to retrieve terms from.\n * @param int $default Not used.\n * @param int $number Number of terms to retrieve. Defaults to 10.\n * @param bool $echo Optionally output the list as well. Defaults to true.\n * @return array List of popular term IDs.\n */\nfunction wp_popular_terms_checklist( $taxonomy, $default = 0, $number = 10, $echo = true ) {\n\t$post = get_post();\n\n\tif ( $post && $post->ID )\n\t\t$checked_terms = wp_get_object_terms($post->ID, $taxonomy, array('fields'=>'ids'));\n\telse\n\t\t$checked_terms = array();\n\n\t$terms = get_terms( $taxonomy, array( 'orderby' => 'count', 'order' => 'DESC', 'number' => $number, 'hierarchical' => false ) );\n\n\t$tax = get_taxonomy($taxonomy);\n\n\t$popular_ids = array();\n\tforeach ( (array) $terms as $term ) {\n\t\t$popular_ids[] = $term->term_id;\n\t\tif ( !$echo ) // hack for AJAX use\n\t\t\tcontinue;\n\t\t$id = \"popular-$taxonomy-$term->term_id\";\n\t\t$checked = in_array( $term->term_id, $checked_terms ) ? 'checked=\"checked\"' : '';\n\t\t?>\n\n\t\t<li id=\"<?php echo $id; ?>\" class=\"popular-category\">\n\t\t\t<label class=\"selectit\">\n\t\t\t\t<input id=\"in-<?php echo $id; ?>\" type=\"checkbox\" <?php echo $checked; ?> value=\"<?php echo (int) $term->term_id; ?>\" <?php disabled( ! current_user_can( $tax->cap->assign_terms ) ); ?> />\n\t\t\t\t<?php\n\t\t\t\t/** This filter is documented in wp-includes/category-template.php */\n\t\t\t\techo esc_html( apply_filters( 'the_category', $term->name ) );\n\t\t\t\t?>\n\t\t\t</label>\n\t\t</li>\n\n\t\t<?php\n\t}\n\treturn $popular_ids;\n}\n\n/**\n * Outputs a link category checklist element.\n *\n * @since 2.5.1\n *\n * @param int $link_id\n */\nfunction wp_link_category_checklist( $link_id = 0 ) {\n\t$default = 1;\n\n\t$checked_categories = array();\n\n\tif ( $link_id ) {\n\t\t$checked_categories = wp_get_link_cats( $link_id );\n\t\t// No selected categories, strange\n\t\tif ( ! count( $checked_categories ) ) {\n\t\t\t$checked_categories[] = $default;\n\t\t}\n\t} else {\n\t\t$checked_categories[] = $default;\n\t}\n\n\t$categories = get_terms( 'link_category', array( 'orderby' => 'name', 'hide_empty' => 0 ) );\n\n\tif ( empty( $categories ) )\n\t\treturn;\n\n\tforeach ( $categories as $category ) {\n\t\t$cat_id = $category->term_id;\n\n\t\t/** This filter is documented in wp-includes/category-template.php */\n\t\t$name = esc_html( apply_filters( 'the_category', $category->name ) );\n\t\t$checked = in_array( $cat_id, $checked_categories ) ? ' checked=\"checked\"' : '';\n\t\techo '<li id=\"link-category-', $cat_id, '\"><label for=\"in-link-category-', $cat_id, '\" class=\"selectit\"><input value=\"', $cat_id, '\" type=\"checkbox\" name=\"link_category[]\" id=\"in-link-category-', $cat_id, '\"', $checked, '/> ', $name, \"</label></li>\";\n\t}\n}\n\n/**\n * Adds hidden fields with the data for use in the inline editor for posts and pages.\n *\n * @since 2.7.0\n *\n * @param WP_Post $post Post object.\n */\nfunction get_inline_data($post) {\n\t$post_type_object = get_post_type_object($post->post_type);\n\tif ( ! current_user_can( 'edit_post', $post->ID ) )\n\t\treturn;\n\n\t$title = esc_textarea( trim( $post->post_title ) );\n\n\t/** This filter is documented in wp-admin/edit-tag-form.php */\n\techo '\n<div class=\"hidden\" id=\"inline_' . $post->ID . '\">\n\t<div class=\"post_title\">' . $title . '</div>' .\n\t/** This filter is documented in wp-admin/edit-tag-form.php */\n\t'<div class=\"post_name\">' . apply_filters( 'editable_slug', $post->post_name, $post ) . '</div>\n\t<div class=\"post_author\">' . $post->post_author . '</div>\n\t<div class=\"comment_status\">' . esc_html( $post->comment_status ) . '</div>\n\t<div class=\"ping_status\">' . esc_html( $post->ping_status ) . '</div>\n\t<div class=\"_status\">' . esc_html( $post->post_status ) . '</div>\n\t<div class=\"jj\">' . mysql2date( 'd', $post->post_date, false ) . '</div>\n\t<div class=\"mm\">' . mysql2date( 'm', $post->post_date, false ) . '</div>\n\t<div class=\"aa\">' . mysql2date( 'Y', $post->post_date, false ) . '</div>\n\t<div class=\"hh\">' . mysql2date( 'H', $post->post_date, false ) . '</div>\n\t<div class=\"mn\">' . mysql2date( 'i', $post->post_date, false ) . '</div>\n\t<div class=\"ss\">' . mysql2date( 's', $post->post_date, false ) . '</div>\n\t<div class=\"post_password\">' . esc_html( $post->post_password ) . '</div>';\n\n\tif ( $post_type_object->hierarchical )\n\t\techo '<div class=\"post_parent\">' . $post->post_parent . '</div>';\n\n\tif ( $post->post_type == 'page' )\n\t\techo '<div class=\"page_template\">' . esc_html( get_post_meta( $post->ID, '_wp_page_template', true ) ) . '</div>';\n\n\tif ( post_type_supports( $post->post_type, 'page-attributes' ) )\n\t\techo '<div class=\"menu_order\">' . $post->menu_order . '</div>';\n\n\t$taxonomy_names = get_object_taxonomies( $post->post_type );\n\tforeach ( $taxonomy_names as $taxonomy_name) {\n\t\t$taxonomy = get_taxonomy( $taxonomy_name );\n\n\t\tif ( $taxonomy->hierarchical && $taxonomy->show_ui ) {\n\n\t\t\t$terms = get_object_term_cache( $post->ID, $taxonomy_name );\n\t\t\tif ( false === $terms ) {\n\t\t\t\t$terms = wp_get_object_terms( $post->ID, $taxonomy_name );\n\t\t\t\twp_cache_add( $post->ID, $terms, $taxonomy_name . '_relationships' );\n\t\t\t}\n\t\t\t$term_ids = empty( $terms ) ? array() : wp_list_pluck( $terms, 'term_id' );\n\n\t\t\techo '<div class=\"post_category\" id=\"' . $taxonomy_name . '_' . $post->ID . '\">' . implode( ',', $term_ids ) . '</div>';\n\n\t\t} elseif ( $taxonomy->show_ui ) {\n\n\t\t\t$terms_to_edit = get_terms_to_edit( $post->ID, $taxonomy_name );\n\t\t\tif ( ! is_string( $terms_to_edit ) ) {\n\t\t\t\t$terms_to_edit = '';\n\t\t\t}\n\n\t\t\techo '<div class=\"tags_input\" id=\"'.$taxonomy_name.'_'.$post->ID.'\">'\n\t\t\t\t. esc_html( str_replace( ',', ', ', $terms_to_edit ) ) . '</div>';\n\n\t\t}\n\t}\n\n\tif ( !$post_type_object->hierarchical )\n\t\techo '<div class=\"sticky\">' . (is_sticky($post->ID) ? 'sticky' : '') . '</div>';\n\n\tif ( post_type_supports( $post->post_type, 'post-formats' ) )\n\t\techo '<div class=\"post_format\">' . esc_html( get_post_format( $post->ID ) ) . '</div>';\n\n\techo '</div>';\n}\n\n/**\n * Outputs the in-line comment reply-to form in the Comments list table.\n *\n * @since 2.7.0\n *\n * @global WP_List_Table $wp_list_table\n *\n * @param int    $position\n * @param bool   $checkbox\n * @param string $mode\n * @param bool   $table_row\n */\nfunction wp_comment_reply( $position = 1, $checkbox = false, $mode = 'single', $table_row = true ) {\n\tglobal $wp_list_table;\n\t/**\n\t * Filter the in-line comment reply-to form output in the Comments\n\t * list table.\n\t *\n\t * Returning a non-empty value here will short-circuit display\n\t * of the in-line comment-reply form in the Comments list table,\n\t * echoing the returned value instead.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @see wp_comment_reply()\n\t *\n\t * @param string $content The reply-to form content.\n\t * @param array  $args    An array of default args.\n\t */\n\t$content = apply_filters( 'wp_comment_reply', '', array( 'position' => $position, 'checkbox' => $checkbox, 'mode' => $mode ) );\n\n\tif ( ! empty($content) ) {\n\t\techo $content;\n\t\treturn;\n\t}\n\n\tif ( ! $wp_list_table ) {\n\t\tif ( $mode == 'single' ) {\n\t\t\t$wp_list_table = _get_list_table('WP_Post_Comments_List_Table');\n\t\t} else {\n\t\t\t$wp_list_table = _get_list_table('WP_Comments_List_Table');\n\t\t}\n\t}\n\n?>\n<form method=\"get\">\n<?php if ( $table_row ) : ?>\n<table style=\"display:none;\"><tbody id=\"com-reply\"><tr id=\"replyrow\" class=\"inline-edit-row\" style=\"display:none;\"><td colspan=\"<?php echo $wp_list_table->get_column_count(); ?>\" class=\"colspanchange\">\n<?php else : ?>\n<div id=\"com-reply\" style=\"display:none;\"><div id=\"replyrow\" style=\"display:none;\">\n<?php endif; ?>\n\t<fieldset class=\"comment-reply\">\n\t<legend>\n\t\t<span class=\"hidden\" id=\"editlegend\"><?php _e( 'Edit Comment' ); ?></span>\n\t\t<span class=\"hidden\" id=\"replyhead\"><?php _e( 'Reply to Comment' ); ?></span>\n\t\t<span class=\"hidden\" id=\"addhead\"><?php _e( 'Add new Comment' ); ?></span>\n\t</legend>\n\n\t<div id=\"replycontainer\">\n\t<label for=\"replycontent\" class=\"screen-reader-text\"><?php _e( 'Comment' ); ?></label>\n\t<?php\n\t$quicktags_settings = array( 'buttons' => 'strong,em,link,block,del,ins,img,ul,ol,li,code,close' );\n\twp_editor( '', 'replycontent', array( 'media_buttons' => false, 'tinymce' => false, 'quicktags' => $quicktags_settings ) );\n\t?>\n\t</div>\n\n\t<div id=\"edithead\" style=\"display:none;\">\n\t\t<div class=\"inside\">\n\t\t<label for=\"author-name\"><?php _e( 'Name' ) ?></label>\n\t\t<input type=\"text\" name=\"newcomment_author\" size=\"50\" value=\"\" id=\"author-name\" />\n\t\t</div>\n\n\t\t<div class=\"inside\">\n\t\t<label for=\"author-email\"><?php _e('Email') ?></label>\n\t\t<input type=\"text\" name=\"newcomment_author_email\" size=\"50\" value=\"\" id=\"author-email\" />\n\t\t</div>\n\n\t\t<div class=\"inside\">\n\t\t<label for=\"author-url\"><?php _e('URL') ?></label>\n\t\t<input type=\"text\" id=\"author-url\" name=\"newcomment_author_url\" class=\"code\" size=\"103\" value=\"\" />\n\t\t</div>\n\t</div>\n\n\t<p id=\"replysubmit\" class=\"submit\">\n\t<a href=\"#comments-form\" class=\"save button-primary alignright\">\n\t<span id=\"addbtn\" style=\"display:none;\"><?php _e('Add Comment'); ?></span>\n\t<span id=\"savebtn\" style=\"display:none;\"><?php _e('Update Comment'); ?></span>\n\t<span id=\"replybtn\" style=\"display:none;\"><?php _e('Submit Reply'); ?></span></a>\n\t<a href=\"#comments-form\" class=\"cancel button-secondary alignleft\"><?php _e('Cancel'); ?></a>\n\t<span class=\"waiting spinner\"></span>\n\t<span class=\"error\" style=\"display:none;\"></span>\n\t</p>\n\n\t<input type=\"hidden\" name=\"action\" id=\"action\" value=\"\" />\n\t<input type=\"hidden\" name=\"comment_ID\" id=\"comment_ID\" value=\"\" />\n\t<input type=\"hidden\" name=\"comment_post_ID\" id=\"comment_post_ID\" value=\"\" />\n\t<input type=\"hidden\" name=\"status\" id=\"status\" value=\"\" />\n\t<input type=\"hidden\" name=\"position\" id=\"position\" value=\"<?php echo $position; ?>\" />\n\t<input type=\"hidden\" name=\"checkbox\" id=\"checkbox\" value=\"<?php echo $checkbox ? 1 : 0; ?>\" />\n\t<input type=\"hidden\" name=\"mode\" id=\"mode\" value=\"<?php echo esc_attr($mode); ?>\" />\n\t<?php\n\t\twp_nonce_field( 'replyto-comment', '_ajax_nonce-replyto-comment', false );\n\t\tif ( current_user_can( 'unfiltered_html' ) )\n\t\t\twp_nonce_field( 'unfiltered-html-comment', '_wp_unfiltered_html_comment', false );\n\t?>\n\t</fieldset>\n<?php if ( $table_row ) : ?>\n</td></tr></tbody></table>\n<?php else : ?>\n</div></div>\n<?php endif; ?>\n</form>\n<?php\n}\n\n/**\n * Output 'undo move to trash' text for comments\n *\n * @since 2.9.0\n */\nfunction wp_comment_trashnotice() {\n?>\n<div class=\"hidden\" id=\"trash-undo-holder\">\n\t<div class=\"trash-undo-inside\"><?php printf(__('Comment by %s moved to the trash.'), '<strong></strong>'); ?> <span class=\"undo untrash\"><a href=\"#\"><?php _e('Undo'); ?></a></span></div>\n</div>\n<div class=\"hidden\" id=\"spam-undo-holder\">\n\t<div class=\"spam-undo-inside\"><?php printf(__('Comment by %s marked as spam.'), '<strong></strong>'); ?> <span class=\"undo unspam\"><a href=\"#\"><?php _e('Undo'); ?></a></span></div>\n</div>\n<?php\n}\n\n/**\n * Outputs a post's public meta data in the Custom Fields meta box.\n *\n * @since 1.2.0\n *\n * @param array $meta\n */\nfunction list_meta( $meta ) {\n\t// Exit if no meta\n\tif ( ! $meta ) {\n\t\techo '\n<table id=\"list-table\" style=\"display: none;\">\n\t<thead>\n\t<tr>\n\t\t<th class=\"left\">' . _x( 'Name', 'meta name' ) . '</th>\n\t\t<th>' . __( 'Value' ) . '</th>\n\t</tr>\n\t</thead>\n\t<tbody id=\"the-list\" data-wp-lists=\"list:meta\">\n\t<tr><td></td></tr>\n\t</tbody>\n</table>'; //TBODY needed for list-manipulation JS\n\t\treturn;\n\t}\n\t$count = 0;\n?>\n<table id=\"list-table\">\n\t<thead>\n\t<tr>\n\t\t<th class=\"left\"><?php _ex( 'Name', 'meta name' ) ?></th>\n\t\t<th><?php _e( 'Value' ) ?></th>\n\t</tr>\n\t</thead>\n\t<tbody id='the-list' data-wp-lists='list:meta'>\n<?php\n\tforeach ( $meta as $entry )\n\t\techo _list_meta_row( $entry, $count );\n?>\n\t</tbody>\n</table>\n<?php\n}\n\n/**\n * Outputs a single row of public meta data in the Custom Fields meta box.\n *\n * @since 2.5.0\n *\n * @staticvar string $update_nonce\n *\n * @param array $entry\n * @param int   $count\n * @return string\n */\nfunction _list_meta_row( $entry, &$count ) {\n\tstatic $update_nonce = '';\n\n\tif ( is_protected_meta( $entry['meta_key'], 'post' ) )\n\t\treturn '';\n\n\tif ( ! $update_nonce )\n\t\t$update_nonce = wp_create_nonce( 'add-meta' );\n\n\t$r = '';\n\t++ $count;\n\n\tif ( is_serialized( $entry['meta_value'] ) ) {\n\t\tif ( is_serialized_string( $entry['meta_value'] ) ) {\n\t\t\t// This is a serialized string, so we should display it.\n\t\t\t$entry['meta_value'] = maybe_unserialize( $entry['meta_value'] );\n\t\t} else {\n\t\t\t// This is a serialized array/object so we should NOT display it.\n\t\t\t--$count;\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t$entry['meta_key'] = esc_attr($entry['meta_key']);\n\t$entry['meta_value'] = esc_textarea( $entry['meta_value'] ); // using a <textarea />\n\t$entry['meta_id'] = (int) $entry['meta_id'];\n\n\t$delete_nonce = wp_create_nonce( 'delete-meta_' . $entry['meta_id'] );\n\n\t$r .= \"\\n\\t<tr id='meta-{$entry['meta_id']}'>\";\n\t$r .= \"\\n\\t\\t<td class='left'><label class='screen-reader-text' for='meta-{$entry['meta_id']}-key'>\" . __( 'Key' ) . \"</label><input name='meta[{$entry['meta_id']}][key]' id='meta-{$entry['meta_id']}-key' type='text' size='20' value='{$entry['meta_key']}' />\";\n\n\t$r .= \"\\n\\t\\t<div class='submit'>\";\n\t$r .= get_submit_button( __( 'Delete' ), 'deletemeta small', \"deletemeta[{$entry['meta_id']}]\", false, array( 'data-wp-lists' => \"delete:the-list:meta-{$entry['meta_id']}::_ajax_nonce=$delete_nonce\" ) );\n\t$r .= \"\\n\\t\\t\";\n\t$r .= get_submit_button( __( 'Update' ), 'updatemeta small', \"meta-{$entry['meta_id']}-submit\", false, array( 'data-wp-lists' => \"add:the-list:meta-{$entry['meta_id']}::_ajax_nonce-add-meta=$update_nonce\" ) );\n\t$r .= \"</div>\";\n\t$r .= wp_nonce_field( 'change-meta', '_ajax_nonce', false, false );\n\t$r .= \"</td>\";\n\n\t$r .= \"\\n\\t\\t<td><label class='screen-reader-text' for='meta-{$entry['meta_id']}-value'>\" . __( 'Value' ) . \"</label><textarea name='meta[{$entry['meta_id']}][value]' id='meta-{$entry['meta_id']}-value' rows='2' cols='30'>{$entry['meta_value']}</textarea></td>\\n\\t</tr>\";\n\treturn $r;\n}\n\n/**\n * Prints the form in the Custom Fields meta box.\n *\n * @since 1.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param WP_Post $post Optional. The post being edited.\n */\nfunction meta_form( $post = null ) {\n\tglobal $wpdb;\n\t$post = get_post( $post );\n\n\t/**\n\t * Filter values for the meta key dropdown in the Custom Fields meta box.\n\t *\n\t * Returning a non-null value will effectively short-circuit and avoid a\n\t * potentially expensive query against postmeta.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param array|null $keys Pre-defined meta keys to be used in place of a postmeta query. Default null.\n\t * @param WP_Post    $post The current post object.\n\t */\n\t$keys = apply_filters( 'postmeta_form_keys', null, $post );\n\n\tif ( null === $keys ) {\n\t\t/**\n\t\t * Filter the number of custom fields to retrieve for the drop-down\n\t\t * in the Custom Fields meta box.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param int $limit Number of custom fields to retrieve. Default 30.\n\t\t */\n\t\t$limit = apply_filters( 'postmeta_form_limit', 30 );\n\t\t$sql = \"SELECT DISTINCT meta_key\n\t\t\tFROM $wpdb->postmeta\n\t\t\tWHERE meta_key NOT BETWEEN '_' AND '_z'\n\t\t\tHAVING meta_key NOT LIKE %s\n\t\t\tORDER BY meta_key\n\t\t\tLIMIT %d\";\n\t\t$keys = $wpdb->get_col( $wpdb->prepare( $sql, $wpdb->esc_like( '_' ) . '%', $limit ) );\n\t}\n\n\tif ( $keys ) {\n\t\tnatcasesort( $keys );\n\t\t$meta_key_input_id = 'metakeyselect';\n\t} else {\n\t\t$meta_key_input_id = 'metakeyinput';\n\t}\n?>\n<p><strong><?php _e( 'Add New Custom Field:' ) ?></strong></p>\n<table id=\"newmeta\">\n<thead>\n<tr>\n<th class=\"left\"><label for=\"<?php echo $meta_key_input_id; ?>\"><?php _ex( 'Name', 'meta name' ) ?></label></th>\n<th><label for=\"metavalue\"><?php _e( 'Value' ) ?></label></th>\n</tr>\n</thead>\n\n<tbody>\n<tr>\n<td id=\"newmetaleft\" class=\"left\">\n<?php if ( $keys ) { ?>\n<select id=\"metakeyselect\" name=\"metakeyselect\">\n<option value=\"#NONE#\"><?php _e( '&mdash; Select &mdash;' ); ?></option>\n<?php\n\n\tforeach ( $keys as $key ) {\n\t\tif ( is_protected_meta( $key, 'post' ) || ! current_user_can( 'add_post_meta', $post->ID, $key ) )\n\t\t\tcontinue;\n\t\techo \"\\n<option value='\" . esc_attr($key) . \"'>\" . esc_html($key) . \"</option>\";\n\t}\n?>\n</select>\n<input class=\"hide-if-js\" type=\"text\" id=\"metakeyinput\" name=\"metakeyinput\" value=\"\" />\n<a href=\"#postcustomstuff\" class=\"hide-if-no-js\" onclick=\"jQuery('#metakeyinput, #metakeyselect, #enternew, #cancelnew').toggle();return false;\">\n<span id=\"enternew\"><?php _e('Enter new'); ?></span>\n<span id=\"cancelnew\" class=\"hidden\"><?php _e('Cancel'); ?></span></a>\n<?php } else { ?>\n<input type=\"text\" id=\"metakeyinput\" name=\"metakeyinput\" value=\"\" />\n<?php } ?>\n</td>\n<td><textarea id=\"metavalue\" name=\"metavalue\" rows=\"2\" cols=\"25\"></textarea></td>\n</tr>\n\n<tr><td colspan=\"2\">\n<div class=\"submit\">\n<?php submit_button( __( 'Add Custom Field' ), 'secondary', 'addmeta', false, array( 'id' => 'newmeta-submit', 'data-wp-lists' => 'add:the-list:newmeta' ) ); ?>\n</div>\n<?php wp_nonce_field( 'add-meta', '_ajax_nonce-add-meta', false ); ?>\n</td></tr>\n</tbody>\n</table>\n<?php\n\n}\n\n/**\n * Print out HTML form date elements for editing post or comment publish date.\n *\n * @since 0.71\n * @since 4.4.0 Converted to use get_comment() instead of the global `$comment`.\n *\n * @global WP_Locale  $wp_locale\n *\n * @param int|bool $edit      Accepts 1|true for editing the date, 0|false for adding the date.\n * @param int|bool $for_post  Accepts 1|true for applying the date to a post, 0|false for a comment.\n * @param int      $tab_index The tabindex attribute to add. Default 0.\n * @param int|bool $multi     Optional. Whether the additional fields and buttons should be added.\n *                            Default 0|false.\n */\nfunction touch_time( $edit = 1, $for_post = 1, $tab_index = 0, $multi = 0 ) {\n\tglobal $wp_locale;\n\t$post = get_post();\n\n\tif ( $for_post )\n\t\t$edit = ! ( in_array($post->post_status, array('draft', 'pending') ) && (!$post->post_date_gmt || '0000-00-00 00:00:00' == $post->post_date_gmt ) );\n\n\t$tab_index_attribute = '';\n\tif ( (int) $tab_index > 0 )\n\t\t$tab_index_attribute = \" tabindex=\\\"$tab_index\\\"\";\n\n\t// todo: Remove this?\n\t// echo '<label for=\"timestamp\" style=\"display: block;\"><input type=\"checkbox\" class=\"checkbox\" name=\"edit_date\" value=\"1\" id=\"timestamp\"'.$tab_index_attribute.' /> '.__( 'Edit timestamp' ).'</label><br />';\n\n\t$time_adj = current_time('timestamp');\n\t$post_date = ($for_post) ? $post->post_date : get_comment()->comment_date;\n\t$jj = ($edit) ? mysql2date( 'd', $post_date, false ) : gmdate( 'd', $time_adj );\n\t$mm = ($edit) ? mysql2date( 'm', $post_date, false ) : gmdate( 'm', $time_adj );\n\t$aa = ($edit) ? mysql2date( 'Y', $post_date, false ) : gmdate( 'Y', $time_adj );\n\t$hh = ($edit) ? mysql2date( 'H', $post_date, false ) : gmdate( 'H', $time_adj );\n\t$mn = ($edit) ? mysql2date( 'i', $post_date, false ) : gmdate( 'i', $time_adj );\n\t$ss = ($edit) ? mysql2date( 's', $post_date, false ) : gmdate( 's', $time_adj );\n\n\t$cur_jj = gmdate( 'd', $time_adj );\n\t$cur_mm = gmdate( 'm', $time_adj );\n\t$cur_aa = gmdate( 'Y', $time_adj );\n\t$cur_hh = gmdate( 'H', $time_adj );\n\t$cur_mn = gmdate( 'i', $time_adj );\n\n\t$month = '<label><span class=\"screen-reader-text\">' . __( 'Month' ) . '</span><select ' . ( $multi ? '' : 'id=\"mm\" ' ) . 'name=\"mm\"' . $tab_index_attribute . \">\\n\";\n\tfor ( $i = 1; $i < 13; $i = $i +1 ) {\n\t\t$monthnum = zeroise($i, 2);\n\t\t$monthtext = $wp_locale->get_month_abbrev( $wp_locale->get_month( $i ) );\n\t\t$month .= \"\\t\\t\\t\" . '<option value=\"' . $monthnum . '\" data-text=\"' . $monthtext . '\" ' . selected( $monthnum, $mm, false ) . '>';\n\t\t/* translators: 1: month number (01, 02, etc.), 2: month abbreviation */\n\t\t$month .= sprintf( __( '%1$s-%2$s' ), $monthnum, $monthtext ) . \"</option>\\n\";\n\t}\n\t$month .= '</select></label>';\n\n\t$day = '<label><span class=\"screen-reader-text\">' . __( 'Day' ) . '</span><input type=\"text\" ' . ( $multi ? '' : 'id=\"jj\" ' ) . 'name=\"jj\" value=\"' . $jj . '\" size=\"2\" maxlength=\"2\"' . $tab_index_attribute . ' autocomplete=\"off\" /></label>';\n\t$year = '<label><span class=\"screen-reader-text\">' . __( 'Year' ) . '</span><input type=\"text\" ' . ( $multi ? '' : 'id=\"aa\" ' ) . 'name=\"aa\" value=\"' . $aa . '\" size=\"4\" maxlength=\"4\"' . $tab_index_attribute . ' autocomplete=\"off\" /></label>';\n\t$hour = '<label><span class=\"screen-reader-text\">' . __( 'Hour' ) . '</span><input type=\"text\" ' . ( $multi ? '' : 'id=\"hh\" ' ) . 'name=\"hh\" value=\"' . $hh . '\" size=\"2\" maxlength=\"2\"' . $tab_index_attribute . ' autocomplete=\"off\" /></label>';\n\t$minute = '<label><span class=\"screen-reader-text\">' . __( 'Minute' ) . '</span><input type=\"text\" ' . ( $multi ? '' : 'id=\"mn\" ' ) . 'name=\"mn\" value=\"' . $mn . '\" size=\"2\" maxlength=\"2\"' . $tab_index_attribute . ' autocomplete=\"off\" /></label>';\n\n\techo '<div class=\"timestamp-wrap\">';\n\t/* translators: 1: month, 2: day, 3: year, 4: hour, 5: minute */\n\tprintf( __( '%1$s %2$s, %3$s @ %4$s:%5$s' ), $month, $day, $year, $hour, $minute );\n\n\techo '</div><input type=\"hidden\" id=\"ss\" name=\"ss\" value=\"' . $ss . '\" />';\n\n\tif ( $multi ) return;\n\n\techo \"\\n\\n\";\n\t$map = array(\n\t\t'mm' => array( $mm, $cur_mm ),\n\t\t'jj' => array( $jj, $cur_jj ),\n\t\t'aa' => array( $aa, $cur_aa ),\n\t\t'hh' => array( $hh, $cur_hh ),\n\t\t'mn' => array( $mn, $cur_mn ),\n\t);\n\tforeach ( $map as $timeunit => $value ) {\n\t\tlist( $unit, $curr ) = $value;\n\n\t\techo '<input type=\"hidden\" id=\"hidden_' . $timeunit . '\" name=\"hidden_' . $timeunit . '\" value=\"' . $unit . '\" />' . \"\\n\";\n\t\t$cur_timeunit = 'cur_' . $timeunit;\n\t\techo '<input type=\"hidden\" id=\"' . $cur_timeunit . '\" name=\"' . $cur_timeunit . '\" value=\"' . $curr . '\" />' . \"\\n\";\n\t}\n?>\n\n<p>\n<a href=\"#edit_timestamp\" class=\"save-timestamp hide-if-no-js button\"><?php _e('OK'); ?></a>\n<a href=\"#edit_timestamp\" class=\"cancel-timestamp hide-if-no-js button-cancel\"><?php _e('Cancel'); ?></a>\n</p>\n<?php\n}\n\n/**\n * Print out option HTML elements for the page templates drop-down.\n *\n * @since 1.5.0\n *\n * @param string $default Optional. The template file name. Default empty.\n */\nfunction page_template_dropdown( $default = '' ) {\n\t$templates = get_page_templates( get_post() );\n\tksort( $templates );\n\tforeach ( array_keys( $templates ) as $template ) {\n\t\t$selected = selected( $default, $templates[ $template ], false );\n\t\techo \"\\n\\t<option value='\" . $templates[ $template ] . \"' $selected>$template</option>\";\n\t}\n}\n\n/**\n * Print out option HTML elements for the page parents drop-down.\n *\n * @since 1.5.0\n * @since 4.4.0 `$post` argument was added.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int         $default Optional. The default page ID to be pre-selected. Default 0.\n * @param int         $parent  Optional. The parent page ID. Default 0.\n * @param int         $level   Optional. Page depth level. Default 0.\n * @param int|WP_Post $post    Post ID or WP_Post object.\n *\n * @return null|false Boolean False if page has no children, otherwise print out html elements\n */\nfunction parent_dropdown( $default = 0, $parent = 0, $level = 0, $post = null ) {\n\tglobal $wpdb;\n\t$post = get_post( $post );\n\t$items = $wpdb->get_results( $wpdb->prepare(\"SELECT ID, post_parent, post_title FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'page' ORDER BY menu_order\", $parent) );\n\n\tif ( $items ) {\n\t\tforeach ( $items as $item ) {\n\t\t\t// A page cannot be its own parent.\n\t\t\tif ( $post && $post->ID && $item->ID == $post->ID )\n\t\t\t\tcontinue;\n\n\t\t\t$pad = str_repeat( '&nbsp;', $level * 3 );\n\t\t\t$selected = selected( $default, $item->ID, false );\n\n\t\t\techo \"\\n\\t<option class='level-$level' value='$item->ID' $selected>$pad \" . esc_html($item->post_title) . \"</option>\";\n\t\t\tparent_dropdown( $default, $item->ID, $level +1 );\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/**\n * Print out option html elements for role selectors.\n *\n * @since 2.1.0\n *\n * @param string $selected Slug for the role that should be already selected.\n */\nfunction wp_dropdown_roles( $selected = '' ) {\n\t$p = '';\n\t$r = '';\n\n\t$editable_roles = array_reverse( get_editable_roles() );\n\n\tforeach ( $editable_roles as $role => $details ) {\n\t\t$name = translate_user_role($details['name'] );\n\t\tif ( $selected == $role ) // preselect specified role\n\t\t\t$p = \"\\n\\t<option selected='selected' value='\" . esc_attr($role) . \"'>$name</option>\";\n\t\telse\n\t\t\t$r .= \"\\n\\t<option value='\" . esc_attr($role) . \"'>$name</option>\";\n\t}\n\techo $p . $r;\n}\n\n/**\n * Outputs the form used by the importers to accept the data to be imported\n *\n * @since 2.0.0\n *\n * @param string $action The action attribute for the form.\n */\nfunction wp_import_upload_form( $action ) {\n\n\t/**\n\t * Filter the maximum allowed upload size for import files.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @see wp_max_upload_size()\n\t *\n\t * @param int $max_upload_size Allowed upload size. Default 1 MB.\n\t */\n\t$bytes = apply_filters( 'import_upload_size_limit', wp_max_upload_size() );\n\t$size = size_format( $bytes );\n\t$upload_dir = wp_upload_dir();\n\tif ( ! empty( $upload_dir['error'] ) ) :\n\t\t?><div class=\"error\"><p><?php _e('Before you can upload your import file, you will need to fix the following error:'); ?></p>\n\t\t<p><strong><?php echo $upload_dir['error']; ?></strong></p></div><?php\n\telse :\n?>\n<form enctype=\"multipart/form-data\" id=\"import-upload-form\" method=\"post\" class=\"wp-upload-form\" action=\"<?php echo esc_url( wp_nonce_url( $action, 'import-upload' ) ); ?>\">\n<p>\n<label for=\"upload\"><?php _e( 'Choose a file from your computer:' ); ?></label> (<?php printf( __('Maximum size: %s' ), $size ); ?>)\n<input type=\"file\" id=\"upload\" name=\"import\" size=\"25\" />\n<input type=\"hidden\" name=\"action\" value=\"save\" />\n<input type=\"hidden\" name=\"max_file_size\" value=\"<?php echo $bytes; ?>\" />\n</p>\n<?php submit_button( __('Upload file and import'), 'primary' ); ?>\n</form>\n<?php\n\tendif;\n}\n\n/**\n * Adds a meta box to one or more screens.\n *\n * @since 2.5.0\n * @since 4.4.0 The `$screen` parameter now accepts an array of screen IDs.\n *\n * @global array $wp_meta_boxes\n *\n * @param string                 $id            Meta box ID (used in the 'id' attribute for the meta box).\n * @param string                 $title         Title of the meta box.\n * @param callable               $callback      Function that fills the box with the desired content.\n *                                              The function should echo its output.\n * @param string|array|WP_Screen $screen        Optional. The screen or screens on which to show the box\n *                                              (such as a post type, 'link', or 'comment'). Accepts a single\n *                                              screen ID, WP_Screen object, or array of screen IDs. Default\n *                                              is the current screen.\n * @param string                 $context       Optional. The context within the screen where the boxes\n *                                              should display. Available contexts vary from screen to\n *                                              screen. Post edit screen contexts include 'normal', 'side',\n *                                              and 'advanced'. Comments screen contexts include 'normal'\n *                                              and 'side'. Menus meta boxes (accordion sections) all use\n *                                              the 'side' context. Global default is 'advanced'.\n * @param string                 $priority      Optional. The priority within the context where the boxes\n *                                              should show ('high', 'low'). Default 'default'.\n * @param array                  $callback_args Optional. Data that should be set as the $args property\n *                                              of the box array (which is the second parameter passed\n *                                              to your callback). Default null.\n */\nfunction add_meta_box( $id, $title, $callback, $screen = null, $context = 'advanced', $priority = 'default', $callback_args = null ) {\n\tglobal $wp_meta_boxes;\n\n\tif ( empty( $screen ) ) {\n\t\t$screen = get_current_screen();\n\t} elseif ( is_string( $screen ) ) {\n\t\t$screen = convert_to_screen( $screen );\n\t} elseif ( is_array( $screen ) ) {\n\t\tforeach ( $screen as $single_screen ) {\n\t\t\tadd_meta_box( $id, $title, $callback, $single_screen, $context, $priority, $callback_args );\n\t\t}\n\t}\n\n\tif ( ! isset( $screen->id ) ) {\n\t\treturn;\n\t}\n\n\t$page = $screen->id;\n\n\tif ( !isset($wp_meta_boxes) )\n\t\t$wp_meta_boxes = array();\n\tif ( !isset($wp_meta_boxes[$page]) )\n\t\t$wp_meta_boxes[$page] = array();\n\tif ( !isset($wp_meta_boxes[$page][$context]) )\n\t\t$wp_meta_boxes[$page][$context] = array();\n\n\tforeach ( array_keys($wp_meta_boxes[$page]) as $a_context ) {\n\t\tforeach ( array('high', 'core', 'default', 'low') as $a_priority ) {\n\t\t\tif ( !isset($wp_meta_boxes[$page][$a_context][$a_priority][$id]) )\n\t\t\t\tcontinue;\n\n\t\t\t// If a core box was previously added or removed by a plugin, don't add.\n\t\t\tif ( 'core' == $priority ) {\n\t\t\t\t// If core box previously deleted, don't add\n\t\t\t\tif ( false === $wp_meta_boxes[$page][$a_context][$a_priority][$id] )\n\t\t\t\t\treturn;\n\n\t\t\t\t/*\n\t\t\t\t * If box was added with default priority, give it core priority to\n\t\t\t\t * maintain sort order.\n\t\t\t\t */\n\t\t\t\tif ( 'default' == $a_priority ) {\n\t\t\t\t\t$wp_meta_boxes[$page][$a_context]['core'][$id] = $wp_meta_boxes[$page][$a_context]['default'][$id];\n\t\t\t\t\tunset($wp_meta_boxes[$page][$a_context]['default'][$id]);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If no priority given and id already present, use existing priority.\n\t\t\tif ( empty($priority) ) {\n\t\t\t\t$priority = $a_priority;\n\t\t\t/*\n\t\t\t * Else, if we're adding to the sorted priority, we don't know the title\n\t\t\t * or callback. Grab them from the previously added context/priority.\n\t\t\t */\n\t\t\t} elseif ( 'sorted' == $priority ) {\n\t\t\t\t$title = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['title'];\n\t\t\t\t$callback = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['callback'];\n\t\t\t\t$callback_args = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['args'];\n\t\t\t}\n\t\t\t// An id can be in only one priority and one context.\n\t\t\tif ( $priority != $a_priority || $context != $a_context )\n\t\t\t\tunset($wp_meta_boxes[$page][$a_context][$a_priority][$id]);\n\t\t}\n\t}\n\n\tif ( empty($priority) )\n\t\t$priority = 'low';\n\n\tif ( !isset($wp_meta_boxes[$page][$context][$priority]) )\n\t\t$wp_meta_boxes[$page][$context][$priority] = array();\n\n\t$wp_meta_boxes[$page][$context][$priority][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $callback_args);\n}\n\n/**\n * Meta-Box template function\n *\n * @since 2.5.0\n *\n * @global array $wp_meta_boxes\n *\n * @staticvar bool $already_sorted\n * @param string|WP_Screen $screen  Screen identifier\n * @param string           $context box context\n * @param mixed            $object  gets passed to the box callback function as first parameter\n * @return int number of meta_boxes\n */\nfunction do_meta_boxes( $screen, $context, $object ) {\n\tglobal $wp_meta_boxes;\n\tstatic $already_sorted = false;\n\n\tif ( empty( $screen ) )\n\t\t$screen = get_current_screen();\n\telseif ( is_string( $screen ) )\n\t\t$screen = convert_to_screen( $screen );\n\n\t$page = $screen->id;\n\n\t$hidden = get_hidden_meta_boxes( $screen );\n\n\tprintf('<div id=\"%s-sortables\" class=\"meta-box-sortables\">', htmlspecialchars($context));\n\n\t// Grab the ones the user has manually sorted. Pull them out of their previous context/priority and into the one the user chose\n\tif ( ! $already_sorted && $sorted = get_user_option( \"meta-box-order_$page\" ) ) {\n\t\tforeach ( $sorted as $box_context => $ids ) {\n\t\t\tforeach ( explode( ',', $ids ) as $id ) {\n\t\t\t\tif ( $id && 'dashboard_browser_nag' !== $id ) {\n\t\t\t\t\tadd_meta_box( $id, null, null, $screen, $box_context, 'sorted' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t$already_sorted = true;\n\n\t$i = 0;\n\n\tif ( isset( $wp_meta_boxes[ $page ][ $context ] ) ) {\n\t\tforeach ( array( 'high', 'sorted', 'core', 'default', 'low' ) as $priority ) {\n\t\t\tif ( isset( $wp_meta_boxes[ $page ][ $context ][ $priority ]) ) {\n\t\t\t\tforeach ( (array) $wp_meta_boxes[ $page ][ $context ][ $priority ] as $box ) {\n\t\t\t\t\tif ( false == $box || ! $box['title'] )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t$i++;\n\t\t\t\t\t$hidden_class = in_array($box['id'], $hidden) ? ' hide-if-js' : '';\n\t\t\t\t\techo '<div id=\"' . $box['id'] . '\" class=\"postbox ' . postbox_classes($box['id'], $page) . $hidden_class . '\" ' . '>' . \"\\n\";\n\t\t\t\t\tif ( 'dashboard_browser_nag' != $box['id'] ) {\n\t\t\t\t\t\techo '<button type=\"button\" class=\"handlediv button-link\" aria-expanded=\"true\">';\n\t\t\t\t\t\techo '<span class=\"screen-reader-text\">' . sprintf( __( 'Toggle panel: %s' ), $box['title'] ) . '</span>';\n\t\t\t\t\t\techo '<span class=\"toggle-indicator\" aria-hidden=\"true\"></span>';\n\t\t\t\t\t\techo '</button>';\n\t\t\t\t\t}\n\t\t\t\t\techo \"<h2 class='hndle'><span>{$box['title']}</span></h2>\\n\";\n\t\t\t\t\techo '<div class=\"inside\">' . \"\\n\";\n\t\t\t\t\tcall_user_func($box['callback'], $object, $box);\n\t\t\t\t\techo \"</div>\\n\";\n\t\t\t\t\techo \"</div>\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\techo \"</div>\";\n\n\treturn $i;\n\n}\n\n/**\n * Removes a meta box from one or more screens.\n *\n * @since 2.6.0\n * @since 4.4.0 The `$screen` parameter now accepts an array of screen IDs.\n *\n * @global array $wp_meta_boxes\n *\n * @param string                 $id      Meta box ID (used in the 'id' attribute for the meta box).\n * @param string|array|WP_Screen $screen  The screen or screens on which the meta box is shown (such as a\n *                                        post type, 'link', or 'comment'). Accepts a single screen ID,\n *                                        WP_Screen object, or array of screen IDs.\n * @param string                 $context Optional. The context within the screen where the boxes\n *                                        should display. Available contexts vary from screen to\n *                                        screen. Post edit screen contexts include 'normal', 'side',\n *                                        and 'advanced'. Comments screen contexts include 'normal'\n *                                        and 'side'. Menus meta boxes (accordion sections) all use\n *                                        the 'side' context. Global default is 'advanced'.\n */\nfunction remove_meta_box( $id, $screen, $context ) {\n\tglobal $wp_meta_boxes;\n\n\tif ( empty( $screen ) ) {\n\t\t$screen = get_current_screen();\n\t} elseif ( is_string( $screen ) ) {\n\t\t$screen = convert_to_screen( $screen );\n\t} elseif ( is_array( $screen ) ) {\n\t\tforeach ( $screen as $single_screen ) {\n\t\t\tremove_meta_box( $id, $single_screen, $context );\n\t\t}\n\t}\n\n\tif ( ! isset( $screen->id ) ) {\n\t\treturn;\n\t}\n\n\t$page = $screen->id;\n\n\tif ( !isset($wp_meta_boxes) )\n\t\t$wp_meta_boxes = array();\n\tif ( !isset($wp_meta_boxes[$page]) )\n\t\t$wp_meta_boxes[$page] = array();\n\tif ( !isset($wp_meta_boxes[$page][$context]) )\n\t\t$wp_meta_boxes[$page][$context] = array();\n\n\tforeach ( array('high', 'core', 'default', 'low') as $priority )\n\t\t$wp_meta_boxes[$page][$context][$priority][$id] = false;\n}\n\n/**\n * Meta Box Accordion Template Function\n *\n * Largely made up of abstracted code from {@link do_meta_boxes()}, this\n * function serves to build meta boxes as list items for display as\n * a collapsible accordion.\n *\n * @since 3.6.0\n *\n * @uses global $wp_meta_boxes Used to retrieve registered meta boxes.\n *\n * @param string|object $screen  The screen identifier.\n * @param string        $context The meta box context.\n * @param mixed         $object  gets passed to the section callback function as first parameter.\n * @return int number of meta boxes as accordion sections.\n */\nfunction do_accordion_sections( $screen, $context, $object ) {\n\tglobal $wp_meta_boxes;\n\n\twp_enqueue_script( 'accordion' );\n\n\tif ( empty( $screen ) )\n\t\t$screen = get_current_screen();\n\telseif ( is_string( $screen ) )\n\t\t$screen = convert_to_screen( $screen );\n\n\t$page = $screen->id;\n\n\t$hidden = get_hidden_meta_boxes( $screen );\n\t?>\n\t<div id=\"side-sortables\" class=\"accordion-container\">\n\t\t<ul class=\"outer-border\">\n\t<?php\n\t$i = 0;\n\t$first_open = false;\n\n\tif ( isset( $wp_meta_boxes[ $page ][ $context ] ) ) {\n\t\tforeach ( array( 'high', 'core', 'default', 'low' ) as $priority ) {\n\t\t\tif ( isset( $wp_meta_boxes[ $page ][ $context ][ $priority ] ) ) {\n\t\t\t\tforeach ( $wp_meta_boxes[ $page ][ $context ][ $priority ] as $box ) {\n\t\t\t\t\tif ( false == $box || ! $box['title'] )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t$i++;\n\t\t\t\t\t$hidden_class = in_array( $box['id'], $hidden ) ? 'hide-if-js' : '';\n\n\t\t\t\t\t$open_class = '';\n\t\t\t\t\tif ( ! $first_open && empty( $hidden_class ) ) {\n\t\t\t\t\t\t$first_open = true;\n\t\t\t\t\t\t$open_class = 'open';\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t\t<li class=\"control-section accordion-section <?php echo $hidden_class; ?> <?php echo $open_class; ?> <?php echo esc_attr( $box['id'] ); ?>\" id=\"<?php echo esc_attr( $box['id'] ); ?>\">\n\t\t\t\t\t\t<h3 class=\"accordion-section-title hndle\" tabindex=\"0\">\n\t\t\t\t\t\t\t<?php echo esc_html( $box['title'] ); ?>\n\t\t\t\t\t\t\t<span class=\"screen-reader-text\"><?php _e( 'Press return or enter to open this section' ); ?></span>\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<div class=\"accordion-section-content <?php postbox_classes( $box['id'], $page ); ?>\">\n\t\t\t\t\t\t\t<div class=\"inside\">\n\t\t\t\t\t\t\t\t<?php call_user_func( $box['callback'], $object, $box ); ?>\n\t\t\t\t\t\t\t</div><!-- .inside -->\n\t\t\t\t\t\t</div><!-- .accordion-section-content -->\n\t\t\t\t\t</li><!-- .accordion-section -->\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t?>\n\t\t</ul><!-- .outer-border -->\n\t</div><!-- .accordion-container -->\n\t<?php\n\treturn $i;\n}\n\n/**\n * Add a new section to a settings page.\n *\n * Part of the Settings API. Use this to define new settings sections for an admin page.\n * Show settings sections in your admin page callback function with do_settings_sections().\n * Add settings fields to your section with add_settings_field()\n *\n * The $callback argument should be the name of a function that echoes out any\n * content you want to show at the top of the settings section before the actual\n * fields. It can output nothing if you want.\n *\n * @since 2.7.0\n *\n * @global $wp_settings_sections Storage array of all settings sections added to admin pages\n *\n * @param string   $id       Slug-name to identify the section. Used in the 'id' attribute of tags.\n * @param string   $title    Formatted title of the section. Shown as the heading for the section.\n * @param callable $callback Function that echos out any content at the top of the section (between heading and fields).\n * @param string   $page     The slug-name of the settings page on which to show the section. Built-in pages include\n *                           'general', 'reading', 'writing', 'discussion', 'media', etc. Create your own using\n *                           add_options_page();\n */\nfunction add_settings_section($id, $title, $callback, $page) {\n\tglobal $wp_settings_sections;\n\n\tif ( 'misc' == $page ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.0', sprintf( __( 'The \"%s\" options group has been removed. Use another settings group.' ), 'misc' ) );\n\t\t$page = 'general';\n\t}\n\n\tif ( 'privacy' == $page ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.5', sprintf( __( 'The \"%s\" options group has been removed. Use another settings group.' ), 'privacy' ) );\n\t\t$page = 'reading';\n\t}\n\n\t$wp_settings_sections[$page][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback);\n}\n\n/**\n * Add a new field to a section of a settings page\n *\n * Part of the Settings API. Use this to define a settings field that will show\n * as part of a settings section inside a settings page. The fields are shown using\n * do_settings_fields() in do_settings-sections()\n *\n * The $callback argument should be the name of a function that echoes out the\n * html input tags for this setting field. Use get_option() to retrieve existing\n * values to show.\n *\n * @since 2.7.0\n * @since 4.2.0 The `$class` argument was added.\n *\n * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections\n *\n * @param string   $id       Slug-name to identify the field. Used in the 'id' attribute of tags.\n * @param string   $title    Formatted title of the field. Shown as the label for the field\n *                           during output.\n * @param callable $callback Function that fills the field with the desired form inputs. The\n *                           function should echo its output.\n * @param string   $page     The slug-name of the settings page on which to show the section\n *                           (general, reading, writing, ...).\n * @param string   $section  Optional. The slug-name of the section of the settings page\n *                           in which to show the box. Default 'default'.\n * @param array    $args {\n *     Optional. Extra arguments used when outputting the field.\n *\n *     @type string $label_for When supplied, the setting title will be wrapped\n *                             in a `<label>` element, its `for` attribute populated\n *                             with this value.\n *     @type string $class     CSS Class to be added to the `<tr>` element when the\n *                             field is output.\n * }\n */\nfunction add_settings_field($id, $title, $callback, $page, $section = 'default', $args = array()) {\n\tglobal $wp_settings_fields;\n\n\tif ( 'misc' == $page ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );\n\t\t$page = 'general';\n\t}\n\n\tif ( 'privacy' == $page ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.5', __( 'The privacy options group has been removed. Use another settings group.' ) );\n\t\t$page = 'reading';\n\t}\n\n\t$wp_settings_fields[$page][$section][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $args);\n}\n\n/**\n * Prints out all settings sections added to a particular settings page\n *\n * Part of the Settings API. Use this in a settings page callback function\n * to output all the sections and fields that were added to that $page with\n * add_settings_section() and add_settings_field()\n *\n * @global $wp_settings_sections Storage array of all settings sections added to admin pages\n * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections\n * @since 2.7.0\n *\n * @param string $page The slug name of the page whose settings sections you want to output\n */\nfunction do_settings_sections( $page ) {\n\tglobal $wp_settings_sections, $wp_settings_fields;\n\n\tif ( ! isset( $wp_settings_sections[$page] ) )\n\t\treturn;\n\n\tforeach ( (array) $wp_settings_sections[$page] as $section ) {\n\t\tif ( $section['title'] )\n\t\t\techo \"<h2>{$section['title']}</h2>\\n\";\n\n\t\tif ( $section['callback'] )\n\t\t\tcall_user_func( $section['callback'], $section );\n\n\t\tif ( ! isset( $wp_settings_fields ) || !isset( $wp_settings_fields[$page] ) || !isset( $wp_settings_fields[$page][$section['id']] ) )\n\t\t\tcontinue;\n\t\techo '<table class=\"form-table\">';\n\t\tdo_settings_fields( $page, $section['id'] );\n\t\techo '</table>';\n\t}\n}\n\n/**\n * Print out the settings fields for a particular settings section\n *\n * Part of the Settings API. Use this in a settings page to output\n * a specific section. Should normally be called by do_settings_sections()\n * rather than directly.\n *\n * @global $wp_settings_fields Storage array of settings fields and their pages/sections\n *\n * @since 2.7.0\n *\n * @param string $page Slug title of the admin page who's settings fields you want to show.\n * @param string $section Slug title of the settings section who's fields you want to show.\n */\nfunction do_settings_fields($page, $section) {\n\tglobal $wp_settings_fields;\n\n\tif ( ! isset( $wp_settings_fields[$page][$section] ) )\n\t\treturn;\n\n\tforeach ( (array) $wp_settings_fields[$page][$section] as $field ) {\n\t\t$class = '';\n\n\t\tif ( ! empty( $field['args']['class'] ) ) {\n\t\t\t$class = ' class=\"' . esc_attr( $field['args']['class'] ) . '\"';\n\t\t}\n\n\t\techo \"<tr{$class}>\";\n\n\t\tif ( ! empty( $field['args']['label_for'] ) ) {\n\t\t\techo '<th scope=\"row\"><label for=\"' . esc_attr( $field['args']['label_for'] ) . '\">' . $field['title'] . '</label></th>';\n\t\t} else {\n\t\t\techo '<th scope=\"row\">' . $field['title'] . '</th>';\n\t\t}\n\n\t\techo '<td>';\n\t\tcall_user_func($field['callback'], $field['args']);\n\t\techo '</td>';\n\t\techo '</tr>';\n\t}\n}\n\n/**\n * Register a settings error to be displayed to the user\n *\n * Part of the Settings API. Use this to show messages to users about settings validation\n * problems, missing settings or anything else.\n *\n * Settings errors should be added inside the $sanitize_callback function defined in\n * register_setting() for a given setting to give feedback about the submission.\n *\n * By default messages will show immediately after the submission that generated the error.\n * Additional calls to settings_errors() can be used to show errors even when the settings\n * page is first accessed.\n *\n * @since 3.0.0\n *\n * @global array $wp_settings_errors Storage array of errors registered during this pageload\n *\n * @param string $setting Slug title of the setting to which this error applies\n * @param string $code    Slug-name to identify the error. Used as part of 'id' attribute in HTML output.\n * @param string $message The formatted message text to display to the user (will be shown inside styled\n *                        `<div>` and `<p>` tags).\n * @param string $type    Optional. Message type, controls HTML class. Accepts 'error' or 'updated'.\n *                        Default 'error'.\n */\nfunction add_settings_error( $setting, $code, $message, $type = 'error' ) {\n\tglobal $wp_settings_errors;\n\n\t$wp_settings_errors[] = array(\n\t\t'setting' => $setting,\n\t\t'code'    => $code,\n\t\t'message' => $message,\n\t\t'type'    => $type\n\t);\n}\n\n/**\n * Fetch settings errors registered by add_settings_error()\n *\n * Checks the $wp_settings_errors array for any errors declared during the current\n * pageload and returns them.\n *\n * If changes were just submitted ($_GET['settings-updated']) and settings errors were saved\n * to the 'settings_errors' transient then those errors will be returned instead. This\n * is used to pass errors back across pageloads.\n *\n * Use the $sanitize argument to manually re-sanitize the option before returning errors.\n * This is useful if you have errors or notices you want to show even when the user\n * hasn't submitted data (i.e. when they first load an options page, or in admin_notices action hook)\n *\n * @since 3.0.0\n *\n * @global array $wp_settings_errors Storage array of errors registered during this pageload\n *\n * @param string $setting Optional slug title of a specific setting who's errors you want.\n * @param boolean $sanitize Whether to re-sanitize the setting value before returning errors.\n * @return array Array of settings errors\n */\nfunction get_settings_errors( $setting = '', $sanitize = false ) {\n\tglobal $wp_settings_errors;\n\n\t/*\n\t * If $sanitize is true, manually re-run the sanitization for this option\n\t * This allows the $sanitize_callback from register_setting() to run, adding\n\t * any settings errors you want to show by default.\n\t */\n\tif ( $sanitize )\n\t\tsanitize_option( $setting, get_option( $setting ) );\n\n\t// If settings were passed back from options.php then use them.\n\tif ( isset( $_GET['settings-updated'] ) && $_GET['settings-updated'] && get_transient( 'settings_errors' ) ) {\n\t\t$wp_settings_errors = array_merge( (array) $wp_settings_errors, get_transient( 'settings_errors' ) );\n\t\tdelete_transient( 'settings_errors' );\n\t}\n\n\t// Check global in case errors have been added on this pageload.\n\tif ( ! count( $wp_settings_errors ) )\n\t\treturn array();\n\n\t// Filter the results to those of a specific setting if one was set.\n\tif ( $setting ) {\n\t\t$setting_errors = array();\n\t\tforeach ( (array) $wp_settings_errors as $key => $details ) {\n\t\t\tif ( $setting == $details['setting'] )\n\t\t\t\t$setting_errors[] = $wp_settings_errors[$key];\n\t\t}\n\t\treturn $setting_errors;\n\t}\n\n\treturn $wp_settings_errors;\n}\n\n/**\n * Display settings errors registered by {@see add_settings_error()}.\n *\n * Part of the Settings API. Outputs a div for each error retrieved by\n * {@see get_settings_errors()}.\n *\n * This is called automatically after a settings page based on the\n * Settings API is submitted. Errors should be added during the validation\n * callback function for a setting defined in {@see register_setting()}\n *\n * The $sanitize option is passed into {@see get_settings_errors()} and will\n * re-run the setting sanitization\n * on its current value.\n *\n * The $hide_on_update option will cause errors to only show when the settings\n * page is first loaded. if the user has already saved new values it will be\n * hidden to avoid repeating messages already shown in the default error\n * reporting after submission. This is useful to show general errors like\n * missing settings when the user arrives at the settings page.\n *\n * @since 3.0.0\n *\n * @param string $setting        Optional slug title of a specific setting who's errors you want.\n * @param bool   $sanitize       Whether to re-sanitize the setting value before returning errors.\n * @param bool   $hide_on_update If set to true errors will not be shown if the settings page has already been submitted.\n */\nfunction settings_errors( $setting = '', $sanitize = false, $hide_on_update = false ) {\n\n\tif ( $hide_on_update && ! empty( $_GET['settings-updated'] ) )\n\t\treturn;\n\n\t$settings_errors = get_settings_errors( $setting, $sanitize );\n\n\tif ( empty( $settings_errors ) )\n\t\treturn;\n\n\t$output = '';\n\tforeach ( $settings_errors as $key => $details ) {\n\t\t$css_id = 'setting-error-' . $details['code'];\n\t\t$css_class = $details['type'] . ' settings-error notice is-dismissible';\n\t\t$output .= \"<div id='$css_id' class='$css_class'> \\n\";\n\t\t$output .= \"<p><strong>{$details['message']}</strong></p>\";\n\t\t$output .= \"</div> \\n\";\n\t}\n\techo $output;\n}\n\n/**\n * Outputs the modal window used for attaching media to posts or pages in the media-listing screen.\n *\n * @since 2.7.0\n *\n * @param string $found_action\n */\nfunction find_posts_div($found_action = '') {\n?>\n\t<div id=\"find-posts\" class=\"find-box\" style=\"display: none;\">\n\t\t<div id=\"find-posts-head\" class=\"find-box-head\">\n\t\t\t<?php _e( 'Attach to existing content' ); ?>\n\t\t\t<div id=\"find-posts-close\"></div>\n\t\t</div>\n\t\t<div class=\"find-box-inside\">\n\t\t\t<div class=\"find-box-search\">\n\t\t\t\t<?php if ( $found_action ) { ?>\n\t\t\t\t\t<input type=\"hidden\" name=\"found_action\" value=\"<?php echo esc_attr($found_action); ?>\" />\n\t\t\t\t<?php } ?>\n\t\t\t\t<input type=\"hidden\" name=\"affected\" id=\"affected\" value=\"\" />\n\t\t\t\t<?php wp_nonce_field( 'find-posts', '_ajax_nonce', false ); ?>\n\t\t\t\t<label class=\"screen-reader-text\" for=\"find-posts-input\"><?php _e( 'Search' ); ?></label>\n\t\t\t\t<input type=\"text\" id=\"find-posts-input\" name=\"ps\" value=\"\" />\n\t\t\t\t<span class=\"spinner\"></span>\n\t\t\t\t<input type=\"button\" id=\"find-posts-search\" value=\"<?php esc_attr_e( 'Search' ); ?>\" class=\"button\" />\n\t\t\t\t<div class=\"clear\"></div>\n\t\t\t</div>\n\t\t\t<div id=\"find-posts-response\"></div>\n\t\t</div>\n\t\t<div class=\"find-box-buttons\">\n\t\t\t<?php submit_button( __( 'Select' ), 'button-primary alignright', 'find-posts-submit', false ); ?>\n\t\t\t<div class=\"clear\"></div>\n\t\t</div>\n\t</div>\n<?php\n}\n\n/**\n * Display the post password.\n *\n * The password is passed through {@link esc_attr()} to ensure that it\n * is safe for placing in an html attribute.\n *\n * @since 2.7.0\n */\nfunction the_post_password() {\n\t$post = get_post();\n\tif ( isset( $post->post_password ) )\n\t\techo esc_attr( $post->post_password );\n}\n\n/**\n * Get the post title.\n *\n * The post title is fetched and if it is blank then a default string is\n * returned.\n *\n * @since 2.7.0\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @return string The post title if set.\n */\nfunction _draft_or_post_title( $post = 0 ) {\n\t$title = get_the_title( $post );\n\tif ( empty( $title ) )\n\t\t$title = __( '(no title)' );\n\treturn esc_html( $title );\n}\n\n/**\n * Display the search query.\n *\n * A simple wrapper to display the \"s\" parameter in a GET URI. This function\n * should only be used when {@link the_search_query()} cannot.\n *\n * @since 2.7.0\n */\nfunction _admin_search_query() {\n\techo isset($_REQUEST['s']) ? esc_attr( wp_unslash( $_REQUEST['s'] ) ) : '';\n}\n\n/**\n * Generic Iframe header for use with Thickbox\n *\n * @since 2.7.0\n *\n * @global string    $hook_suffix\n * @global string    $admin_body_class\n * @global WP_Locale $wp_locale\n *\n * @param string $title      Optional. Title of the Iframe page. Default empty.\n * @param bool   $deprecated Not used.\n */\nfunction iframe_header( $title = '', $deprecated = false ) {\n\tshow_admin_bar( false );\n\tglobal $hook_suffix, $admin_body_class, $wp_locale;\n\t$admin_body_class = preg_replace('/[^a-z0-9_-]+/i', '-', $hook_suffix);\n\n\t$current_screen = get_current_screen();\n\n\t@header( 'Content-Type: ' . get_option( 'html_type' ) . '; charset=' . get_option( 'blog_charset' ) );\n\t_wp_admin_html_begin();\n?>\n<title><?php bloginfo('name') ?> &rsaquo; <?php echo $title ?> &#8212; <?php _e('WordPress'); ?></title>\n<?php\nwp_enqueue_style( 'colors' );\n?>\n<script type=\"text/javascript\">\naddLoadEvent = function(func){if(typeof jQuery!=\"undefined\")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};\nfunction tb_close(){var win=window.dialogArguments||opener||parent||top;win.tb_remove();}\nvar ajaxurl = '<?php echo admin_url( 'admin-ajax.php', 'relative' ); ?>',\n\tpagenow = '<?php echo $current_screen->id; ?>',\n\ttypenow = '<?php echo $current_screen->post_type; ?>',\n\tadminpage = '<?php echo $admin_body_class; ?>',\n\tthousandsSeparator = '<?php echo addslashes( $wp_locale->number_format['thousands_sep'] ); ?>',\n\tdecimalPoint = '<?php echo addslashes( $wp_locale->number_format['decimal_point'] ); ?>',\n\tisRtl = <?php echo (int) is_rtl(); ?>;\n</script>\n<?php\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( 'admin_enqueue_scripts', $hook_suffix );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( \"admin_print_styles-$hook_suffix\" );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( 'admin_print_styles' );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( \"admin_print_scripts-$hook_suffix\" );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( 'admin_print_scripts' );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( \"admin_head-$hook_suffix\" );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( 'admin_head' );\n\n$admin_body_class .= ' locale-' . sanitize_html_class( strtolower( str_replace( '_', '-', get_locale() ) ) );\n\nif ( is_rtl() )\n\t$admin_body_class .= ' rtl';\n\n?>\n</head>\n<?php\n/** This filter is documented in wp-admin/admin-header.php */\n$admin_body_classes = apply_filters( 'admin_body_class', '' );\n?>\n<body<?php\n/**\n * @global string $body_id\n */\nif ( isset($GLOBALS['body_id']) ) echo ' id=\"' . $GLOBALS['body_id'] . '\"'; ?> class=\"wp-admin wp-core-ui no-js iframe <?php echo $admin_body_classes . ' ' . $admin_body_class; ?>\">\n<script type=\"text/javascript\">\n(function(){\nvar c = document.body.className;\nc = c.replace(/no-js/, 'js');\ndocument.body.className = c;\n})();\n</script>\n<?php\n}\n\n/**\n * Generic Iframe footer for use with Thickbox\n *\n * @since 2.7.0\n */\nfunction iframe_footer() {\n\t/*\n\t * We're going to hide any footer output on iFrame pages,\n\t * but run the hooks anyway since they output JavaScript\n\t * or other needed content.\n\t */\n\t ?>\n\t<div class=\"hidden\">\n<?php\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_footer', '' );\n\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_print_footer_scripts' );\n?>\n\t</div>\n<script type=\"text/javascript\">if(typeof wpOnload==\"function\")wpOnload();</script>\n</body>\n</html>\n<?php\n}\n\n/**\n *\n * @param WP_Post $post\n */\nfunction _post_states($post) {\n\t$post_states = array();\n\tif ( isset( $_REQUEST['post_status'] ) )\n\t\t$post_status = $_REQUEST['post_status'];\n\telse\n\t\t$post_status = '';\n\n\tif ( !empty($post->post_password) )\n\t\t$post_states['protected'] = __('Password protected');\n\tif ( 'private' == $post->post_status && 'private' != $post_status )\n\t\t$post_states['private'] = __('Private');\n\tif ( 'draft' == $post->post_status && 'draft' != $post_status )\n\t\t$post_states['draft'] = __('Draft');\n\tif ( 'pending' == $post->post_status && 'pending' != $post_status )\n\t\t$post_states['pending'] = _x('Pending', 'post status');\n\tif ( is_sticky($post->ID) )\n\t\t$post_states['sticky'] = __('Sticky');\n\n\tif ( 'future' === $post->post_status ) {\n\t\t$post_states['scheduled'] = __( 'Scheduled' );\n\t}\n\n\tif ( 'page' === get_option( 'show_on_front' ) ) {\n\t\tif ( intval( get_option( 'page_on_front' ) ) === $post->ID ) {\n\t\t\t$post_states['page_on_front'] = __( 'Front Page' );\n\t\t}\n\n\t\tif ( intval( get_option( 'page_for_posts' ) ) === $post->ID ) {\n\t\t\t$post_states['page_for_posts'] = __( 'Posts Page' );\n\t\t}\n\t}\n\n\t/**\n\t * Filter the default post display states used in the posts list table.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param array   $post_states An array of post display states.\n\t * @param WP_Post $post        The current post object.\n\t */\n\t$post_states = apply_filters( 'display_post_states', $post_states, $post );\n\n\tif ( ! empty($post_states) ) {\n\t\t$state_count = count($post_states);\n\t\t$i = 0;\n\t\techo ' &mdash; ';\n\t\tforeach ( $post_states as $state ) {\n\t\t\t++$i;\n\t\t\t( $i == $state_count ) ? $sep = '' : $sep = ', ';\n\t\t\techo \"<span class='post-state'>$state$sep</span>\";\n\t\t}\n\t}\n\n}\n\n/**\n *\n * @param WP_Post $post\n */\nfunction _media_states( $post ) {\n\t$media_states = array();\n\t$stylesheet = get_option('stylesheet');\n\n\tif ( current_theme_supports( 'custom-header') ) {\n\t\t$meta_header = get_post_meta($post->ID, '_wp_attachment_is_custom_header', true );\n\t\tif ( ! empty( $meta_header ) && $meta_header == $stylesheet )\n\t\t\t$media_states[] = __( 'Header Image' );\n\t}\n\n\tif ( current_theme_supports( 'custom-background') ) {\n\t\t$meta_background = get_post_meta($post->ID, '_wp_attachment_is_custom_background', true );\n\t\tif ( ! empty( $meta_background ) && $meta_background == $stylesheet )\n\t\t\t$media_states[] = __( 'Background Image' );\n\t}\n\n\tif ( $post->ID == get_option( 'site_icon' ) ) {\n\t\t$media_states[] = __( 'Site Icon' );\n\t}\n\n\tif ( $post->ID == get_theme_mod( 'site_logo' ) ) {\n\t\t$media_states[] = __( 'Logo' );\n\t}\n\n\t/**\n\t * Filter the default media display states for items in the Media list table.\n\t *\n\t * @since 3.2.0\n\t *\n\t * @param array $media_states An array of media states. Default 'Header Image',\n\t *                            'Background Image', 'Site Icon', 'Logo'.\n\t */\n\t$media_states = apply_filters( 'display_media_states', $media_states );\n\n\tif ( ! empty( $media_states ) ) {\n\t\t$state_count = count( $media_states );\n\t\t$i = 0;\n\t\techo ' &mdash; ';\n\t\tforeach ( $media_states as $state ) {\n\t\t\t++$i;\n\t\t\t( $i == $state_count ) ? $sep = '' : $sep = ', ';\n\t\t\techo \"<span class='post-state'>$state$sep</span>\";\n\t\t}\n\t}\n}\n\n/**\n * Test support for compressing JavaScript from PHP\n *\n * Outputs JavaScript that tests if compression from PHP works as expected\n * and sets an option with the result. Has no effect when the current user\n * is not an administrator. To run the test again the option 'can_compress_scripts'\n * has to be deleted.\n *\n * @since 2.8.0\n */\nfunction compression_test() {\n?>\n\t<script type=\"text/javascript\">\n\tvar compressionNonce = <?php echo wp_json_encode( wp_create_nonce( 'update_can_compress_scripts' ) ); ?>;\n\tvar testCompression = {\n\t\tget : function(test) {\n\t\t\tvar x;\n\t\t\tif ( window.XMLHttpRequest ) {\n\t\t\t\tx = new XMLHttpRequest();\n\t\t\t} else {\n\t\t\t\ttry{x=new ActiveXObject('Msxml2.XMLHTTP');}catch(e){try{x=new ActiveXObject('Microsoft.XMLHTTP');}catch(e){};}\n\t\t\t}\n\n\t\t\tif (x) {\n\t\t\t\tx.onreadystatechange = function() {\n\t\t\t\t\tvar r, h;\n\t\t\t\t\tif ( x.readyState == 4 ) {\n\t\t\t\t\t\tr = x.responseText.substr(0, 18);\n\t\t\t\t\t\th = x.getResponseHeader('Content-Encoding');\n\t\t\t\t\t\ttestCompression.check(r, h, test);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tx.open('GET', ajaxurl + '?action=wp-compression-test&test='+test+'&_ajax_nonce='+compressionNonce+'&'+(new Date()).getTime(), true);\n\t\t\t\tx.send('');\n\t\t\t}\n\t\t},\n\n\t\tcheck : function(r, h, test) {\n\t\t\tif ( ! r && ! test )\n\t\t\t\tthis.get(1);\n\n\t\t\tif ( 1 == test ) {\n\t\t\t\tif ( h && ( h.match(/deflate/i) || h.match(/gzip/i) ) )\n\t\t\t\t\tthis.get('no');\n\t\t\t\telse\n\t\t\t\t\tthis.get(2);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( 2 == test ) {\n\t\t\t\tif ( '\"wpCompressionTest' == r )\n\t\t\t\t\tthis.get('yes');\n\t\t\t\telse\n\t\t\t\t\tthis.get('no');\n\t\t\t}\n\t\t}\n\t};\n\ttestCompression.check();\n\t</script>\n<?php\n}\n\n/**\n * Echoes a submit button, with provided text and appropriate class(es).\n *\n * @since 3.1.0\n *\n * @see get_submit_button()\n *\n * @param string       $text             The text of the button (defaults to 'Save Changes')\n * @param string       $type             Optional. The type and CSS class(es) of the button. Core values\n *                                       include 'primary', 'secondary', 'delete'. Default 'primary'\n * @param string       $name             The HTML name of the submit button. Defaults to \"submit\". If no\n *                                       id attribute is given in $other_attributes below, $name will be\n *                                       used as the button's id.\n * @param bool         $wrap             True if the output button should be wrapped in a paragraph tag,\n *                                       false otherwise. Defaults to true\n * @param array|string $other_attributes Other attributes that should be output with the button, mapping\n *                                       attributes to their values, such as setting tabindex to 1, etc.\n *                                       These key/value attribute pairs will be output as attribute=\"value\",\n *                                       where attribute is the key. Other attributes can also be provided\n *                                       as a string such as 'tabindex=\"1\"', though the array format is\n *                                       preferred. Default null.\n */\nfunction submit_button( $text = null, $type = 'primary', $name = 'submit', $wrap = true, $other_attributes = null ) {\n\techo get_submit_button( $text, $type, $name, $wrap, $other_attributes );\n}\n\n/**\n * Returns a submit button, with provided text and appropriate class\n *\n * @since 3.1.0\n *\n * @param string       $text             Optional. The text of the button. Default 'Save Changes'.\n * @param string       $type             Optional. The type of button. Accepts 'primary', 'secondary',\n *                                       or 'delete'. Default 'primary large'.\n * @param string       $name             Optional. The HTML name of the submit button. Defaults to \"submit\".\n *                                       If no id attribute is given in $other_attributes below, `$name` will\n *                                       be used as the button's id. Default 'submit'.\n * @param bool         $wrap             Optional. True if the output button should be wrapped in a paragraph\n *                                       tag, false otherwise. Default true.\n * @param array|string $other_attributes Optional. Other attributes that should be output with the button,\n *                                       mapping attributes to their values, such as `array( 'tabindex' => '1' )`.\n *                                       These attributes will be output as `attribute=\"value\"`, such as\n *                                       `tabindex=\"1\"`. Other attributes can also be provided as a string such\n *                                       as `tabindex=\"1\"`, though the array format is typically cleaner.\n *                                       Default empty.\n * @return string Submit button HTML.\n */\nfunction get_submit_button( $text = '', $type = 'primary large', $name = 'submit', $wrap = true, $other_attributes = '' ) {\n\tif ( ! is_array( $type ) )\n\t\t$type = explode( ' ', $type );\n\n\t$button_shorthand = array( 'primary', 'small', 'large' );\n\t$classes = array( 'button' );\n\tforeach ( $type as $t ) {\n\t\tif ( 'secondary' === $t || 'button-secondary' === $t )\n\t\t\tcontinue;\n\t\t$classes[] = in_array( $t, $button_shorthand ) ? 'button-' . $t : $t;\n\t}\n\t$class = implode( ' ', array_unique( $classes ) );\n\n\tif ( 'delete' === $type )\n\t\t$class = 'button-secondary delete';\n\n\t$text = $text ? $text : __( 'Save Changes' );\n\n\t// Default the id attribute to $name unless an id was specifically provided in $other_attributes\n\t$id = $name;\n\tif ( is_array( $other_attributes ) && isset( $other_attributes['id'] ) ) {\n\t\t$id = $other_attributes['id'];\n\t\tunset( $other_attributes['id'] );\n\t}\n\n\t$attributes = '';\n\tif ( is_array( $other_attributes ) ) {\n\t\tforeach ( $other_attributes as $attribute => $value ) {\n\t\t\t$attributes .= $attribute . '=\"' . esc_attr( $value ) . '\" '; // Trailing space is important\n\t\t}\n\t} elseif ( ! empty( $other_attributes ) ) { // Attributes provided as a string\n\t\t$attributes = $other_attributes;\n\t}\n\n\t// Don't output empty name and id attributes.\n\t$name_attr = $name ? ' name=\"' . esc_attr( $name ) . '\"' : '';\n\t$id_attr = $id ? ' id=\"' . esc_attr( $id ) . '\"' : '';\n\n\t$button = '<input type=\"submit\"' . $name_attr . $id_attr . ' class=\"' . esc_attr( $class );\n\t$button\t.= '\" value=\"' . esc_attr( $text ) . '\" ' . $attributes . ' />';\n\n\tif ( $wrap ) {\n\t\t$button = '<p class=\"submit\">' . $button . '</p>';\n\t}\n\n\treturn $button;\n}\n\n/**\n *\n * @global bool $is_IE\n */\nfunction _wp_admin_html_begin() {\n\tglobal $is_IE;\n\n\t$admin_html_class = ( is_admin_bar_showing() ) ? 'wp-toolbar' : '';\n\n\tif ( $is_IE )\n\t\t@header('X-UA-Compatible: IE=edge');\n\n?>\n<!DOCTYPE html>\n<!--[if IE 8]>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" class=\"ie8 <?php echo $admin_html_class; ?>\" <?php\n\t/**\n\t * Fires inside the HTML tag in the admin header.\n\t *\n\t * @since 2.2.0\n\t */\n\tdo_action( 'admin_xml_ns' );\n?> <?php language_attributes(); ?>>\n<![endif]-->\n<!--[if !(IE 8) ]><!-->\n<html xmlns=\"http://www.w3.org/1999/xhtml\" class=\"<?php echo $admin_html_class; ?>\" <?php\n\t/** This action is documented in wp-admin/includes/template.php */\n\tdo_action( 'admin_xml_ns' );\n?> <?php language_attributes(); ?>>\n<!--<![endif]-->\n<head>\n<meta http-equiv=\"Content-Type\" content=\"<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>\" />\n<?php\n}\n\n/**\n * Convert a screen string to a screen object\n *\n * @since 3.0.0\n *\n * @param string $hook_name The hook name (also known as the hook suffix) used to determine the screen.\n * @return WP_Screen Screen object.\n */\nfunction convert_to_screen( $hook_name ) {\n\tif ( ! class_exists( 'WP_Screen', false ) ) {\n\t\t_doing_it_wrong( 'convert_to_screen(), add_meta_box()', __( \"Likely direct inclusion of wp-admin/includes/template.php in order to use add_meta_box(). This is very wrong. Hook the add_meta_box() call into the add_meta_boxes action instead.\" ), '3.3' );\n\t\treturn (object) array( 'id' => '_invalid', 'base' => '_are_belong_to_us' );\n\t}\n\n\treturn WP_Screen::get( $hook_name );\n}\n\n/**\n * Output the HTML for restoring the post data from DOM storage\n *\n * @since 3.6.0\n * @access private\n */\nfunction _local_storage_notice() {\n\t?>\n\t<div id=\"local-storage-notice\" class=\"hidden notice\">\n\t<p class=\"local-restore\">\n\t\t<?php _e('The backup of this post in your browser is different from the version below.'); ?>\n\t\t<a class=\"restore-backup\" href=\"#\"><?php _e('Restore the backup.'); ?></a>\n\t</p>\n\t<p class=\"undo-restore hidden\">\n\t\t<?php _e('Post restored successfully.'); ?>\n\t\t<a class=\"undo-restore-backup\" href=\"#\"><?php _e('Undo.'); ?></a>\n\t</p>\n\t</div>\n\t<?php\n}\n\n/**\n * Output a HTML element with a star rating for a given rating.\n *\n * Outputs a HTML element with the star rating exposed on a 0..5 scale in\n * half star increments (ie. 1, 1.5, 2 stars). Optionally, if specified, the\n * number of ratings may also be displayed by passing the $number parameter.\n *\n * @since 3.8.0\n * @since 4.4.0 Introduced the `echo` parameter.\n *\n * @param array $args {\n *     Optional. Array of star ratings arguments.\n *\n *     @type int    $rating The rating to display, expressed in either a 0.5 rating increment,\n *                          or percentage. Default 0.\n *     @type string $type   Format that the $rating is in. Valid values are 'rating' (default),\n *                          or, 'percent'. Default 'rating'.\n *     @type int    $number The number of ratings that makes up this rating. Default 0.\n *     @type bool   $echo   Whether to echo the generated markup. False to return the markup instead\n *                          of echoing it. Default true.\n * }\n */\nfunction wp_star_rating( $args = array() ) {\n\t$defaults = array(\n\t\t'rating' => 0,\n\t\t'type'   => 'rating',\n\t\t'number' => 0,\n\t\t'echo'   => true,\n\t);\n\t$r = wp_parse_args( $args, $defaults );\n\n\t// Non-english decimal places when the $rating is coming from a string\n\t$rating = str_replace( ',', '.', $r['rating'] );\n\n\t// Convert Percentage to star rating, 0..5 in .5 increments\n\tif ( 'percent' == $r['type'] ) {\n\t\t$rating = round( $rating / 10, 0 ) / 2;\n\t}\n\n\t// Calculate the number of each type of star needed\n\t$full_stars = floor( $rating );\n\t$half_stars = ceil( $rating - $full_stars );\n\t$empty_stars = 5 - $full_stars - $half_stars;\n\n\tif ( $r['number'] ) {\n\t\t/* translators: 1: The rating, 2: The number of ratings */\n\t\t$format = _n( '%1$s rating based on %2$s rating', '%1$s rating based on %2$s ratings', $r['number'] );\n\t\t$title = sprintf( $format, number_format_i18n( $rating, 1 ), number_format_i18n( $r['number'] ) );\n\t} else {\n\t\t/* translators: 1: The rating */\n\t\t$title = sprintf( __( '%s rating' ), number_format_i18n( $rating, 1 ) );\n\t}\n\n\t$output = '<div class=\"star-rating\">';\n\t$output .= '<span class=\"screen-reader-text\">' . $title . '</span>';\n\t$output .= str_repeat( '<div class=\"star star-full\"></div>', $full_stars );\n\t$output .= str_repeat( '<div class=\"star star-half\"></div>', $half_stars );\n\t$output .= str_repeat( '<div class=\"star star-empty\"></div>', $empty_stars );\n\t$output .= '</div>';\n\n\tif ( $r['echo'] ) {\n\t\techo $output;\n\t}\n\n\treturn $output;\n}\n\n/**\n * Output a notice when editing the page for posts (internal use only).\n *\n * @ignore\n * @since 4.2.0\n */\nfunction _wp_posts_page_notice() {\n\techo '<div class=\"notice notice-warning inline\"><p>' . __( 'You are currently editing the page that shows your latest posts.' ) . '</p></div>';\n}\n", "code_before": "<?php\n/**\n * Template WordPress Administration API.\n *\n * A Big Mess. Also some neat functions that are nicely written.\n *\n * @package WordPress\n * @subpackage Administration\n */\n\n/** Walker_Category_Checklist class */\nrequire_once ABSPATH . 'wp-admin/includes/class-walker-category-checklist.php';\n\n/** WP_Internal_Pointers class */\nrequire_once ABSPATH . 'wp-admin/includes/class-wp-internal-pointers.php';\n\n//\n// Category Checklists.\n//\n\n/**\n * Outputs an unordered list of checkbox input elements labeled with category names.\n *\n * @since 2.5.1\n *\n * @see wp_terms_checklist()\n *\n * @param int         $post_id              Optional. Post to generate a categories checklist for. Default 0.\n *                                          $selected_cats must not be an array. Default 0.\n * @param int         $descendants_and_self Optional. ID of the category to output along with its descendants.\n *                                          Default 0.\n * @param int[]|false $selected_cats        Optional. Array of category IDs to mark as checked. Default false.\n * @param int[]|false $popular_cats         Optional. Array of category IDs to receive the \"popular-category\" class.\n *                                          Default false.\n * @param Walker      $walker               Optional. Walker object to use to build the output.\n *                                          Default is a Walker_Category_Checklist instance.\n * @param bool        $checked_ontop        Optional. Whether to move checked items out of the hierarchy and to\n *                                          the top of the list. Default true.\n */\nfunction wp_category_checklist( $post_id = 0, $descendants_and_self = 0, $selected_cats = false, $popular_cats = false, $walker = null, $checked_ontop = true ) {\n\twp_terms_checklist(\n\t\t$post_id,\n\t\tarray(\n\t\t\t'taxonomy'             => 'category',\n\t\t\t'descendants_and_self' => $descendants_and_self,\n\t\t\t'selected_cats'        => $selected_cats,\n\t\t\t'popular_cats'         => $popular_cats,\n\t\t\t'walker'               => $walker,\n\t\t\t'checked_ontop'        => $checked_ontop,\n\t\t)\n\t);\n}\n\n/**\n * Outputs an unordered list of checkbox input elements labelled with term names.\n *\n * Taxonomy-independent version of wp_category_checklist().\n *\n * @since 3.0.0\n * @since 4.4.0 Introduced the `$echo` argument.\n *\n * @param int          $post_id Optional. Post ID. Default 0.\n * @param array|string $args {\n *     Optional. Array or string of arguments for generating a terms checklist. Default empty array.\n *\n *     @type int    $descendants_and_self ID of the category to output along with its descendants.\n *                                        Default 0.\n *     @type int[]  $selected_cats        Array of category IDs to mark as checked. Default false.\n *     @type int[]  $popular_cats         Array of category IDs to receive the \"popular-category\" class.\n *                                        Default false.\n *     @type Walker $walker               Walker object to use to build the output. Default empty which\n *                                        results in a Walker_Category_Checklist instance being used.\n *     @type string $taxonomy             Taxonomy to generate the checklist for. Default 'category'.\n *     @type bool   $checked_ontop        Whether to move checked items out of the hierarchy and to\n *                                        the top of the list. Default true.\n *     @type bool   $echo                 Whether to echo the generated markup. False to return the markup instead\n *                                        of echoing it. Default true.\n * }\n * @return string HTML list of input elements.\n */\nfunction wp_terms_checklist( $post_id = 0, $args = array() ) {\n\t$defaults = array(\n\t\t'descendants_and_self' => 0,\n\t\t'selected_cats'        => false,\n\t\t'popular_cats'         => false,\n\t\t'walker'               => null,\n\t\t'taxonomy'             => 'category',\n\t\t'checked_ontop'        => true,\n\t\t'echo'                 => true,\n\t);\n\n\t/**\n\t * Filters the taxonomy terms checklist arguments.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @see wp_terms_checklist()\n\t *\n\t * @param array|string $args    An array or string of arguments.\n\t * @param int          $post_id The post ID.\n\t */\n\t$params = apply_filters( 'wp_terms_checklist_args', $args, $post_id );\n\n\t$parsed_args = wp_parse_args( $params, $defaults );\n\n\tif ( empty( $parsed_args['walker'] ) || ! ( $parsed_args['walker'] instanceof Walker ) ) {\n\t\t$walker = new Walker_Category_Checklist();\n\t} else {\n\t\t$walker = $parsed_args['walker'];\n\t}\n\n\t$taxonomy             = $parsed_args['taxonomy'];\n\t$descendants_and_self = (int) $parsed_args['descendants_and_self'];\n\n\t$args = array( 'taxonomy' => $taxonomy );\n\n\t$tax              = get_taxonomy( $taxonomy );\n\t$args['disabled'] = ! current_user_can( $tax->cap->assign_terms );\n\n\t$args['list_only'] = ! empty( $parsed_args['list_only'] );\n\n\tif ( is_array( $parsed_args['selected_cats'] ) ) {\n\t\t$args['selected_cats'] = array_map( 'intval', $parsed_args['selected_cats'] );\n\t} elseif ( $post_id ) {\n\t\t$args['selected_cats'] = wp_get_object_terms( $post_id, $taxonomy, array_merge( $args, array( 'fields' => 'ids' ) ) );\n\t} else {\n\t\t$args['selected_cats'] = array();\n\t}\n\n\tif ( is_array( $parsed_args['popular_cats'] ) ) {\n\t\t$args['popular_cats'] = array_map( 'intval', $parsed_args['popular_cats'] );\n\t} else {\n\t\t$args['popular_cats'] = get_terms(\n\t\t\tarray(\n\t\t\t\t'taxonomy'     => $taxonomy,\n\t\t\t\t'fields'       => 'ids',\n\t\t\t\t'orderby'      => 'count',\n\t\t\t\t'order'        => 'DESC',\n\t\t\t\t'number'       => 10,\n\t\t\t\t'hierarchical' => false,\n\t\t\t)\n\t\t);\n\t}\n\n\tif ( $descendants_and_self ) {\n\t\t$categories = (array) get_terms(\n\t\t\tarray(\n\t\t\t\t'taxonomy'     => $taxonomy,\n\t\t\t\t'child_of'     => $descendants_and_self,\n\t\t\t\t'hierarchical' => 0,\n\t\t\t\t'hide_empty'   => 0,\n\t\t\t)\n\t\t);\n\t\t$self       = get_term( $descendants_and_self, $taxonomy );\n\t\tarray_unshift( $categories, $self );\n\t} else {\n\t\t$categories = (array) get_terms(\n\t\t\tarray(\n\t\t\t\t'taxonomy' => $taxonomy,\n\t\t\t\t'get'      => 'all',\n\t\t\t)\n\t\t);\n\t}\n\n\t$output = '';\n\n\tif ( $parsed_args['checked_ontop'] ) {\n\t\t/*\n\t\t * Post-process $categories rather than adding an exclude to the get_terms() query\n\t\t * to keep the query the same across all posts (for any query cache).\n\t\t */\n\t\t$checked_categories = array();\n\t\t$keys               = array_keys( $categories );\n\n\t\tforeach ( $keys as $k ) {\n\t\t\tif ( in_array( $categories[ $k ]->term_id, $args['selected_cats'], true ) ) {\n\t\t\t\t$checked_categories[] = $categories[ $k ];\n\t\t\t\tunset( $categories[ $k ] );\n\t\t\t}\n\t\t}\n\n\t\t// Put checked categories on top.\n\t\t$output .= $walker->walk( $checked_categories, 0, $args );\n\t}\n\t// Then the rest of them.\n\t$output .= $walker->walk( $categories, 0, $args );\n\n\tif ( $parsed_args['echo'] ) {\n\t\techo $output;\n\t}\n\n\treturn $output;\n}\n\n/**\n * Retrieves a list of the most popular terms from the specified taxonomy.\n *\n * If the `$display` argument is true then the elements for a list of checkbox\n * `<input>` elements labelled with the names of the selected terms is output.\n * If the `$post_ID` global is not empty then the terms associated with that\n * post will be marked as checked.\n *\n * @since 2.5.0\n *\n * @param string $taxonomy     Taxonomy to retrieve terms from.\n * @param int    $default_term Optional. Not used.\n * @param int    $number       Optional. Number of terms to retrieve. Default 10.\n * @param bool   $display      Optional. Whether to display the list as well. Default true.\n * @return int[] Array of popular term IDs.\n */\nfunction wp_popular_terms_checklist( $taxonomy, $default_term = 0, $number = 10, $display = true ) {\n\t$post = get_post();\n\n\tif ( $post && $post->ID ) {\n\t\t$checked_terms = wp_get_object_terms( $post->ID, $taxonomy, array( 'fields' => 'ids' ) );\n\t} else {\n\t\t$checked_terms = array();\n\t}\n\n\t$terms = get_terms(\n\t\tarray(\n\t\t\t'taxonomy'     => $taxonomy,\n\t\t\t'orderby'      => 'count',\n\t\t\t'order'        => 'DESC',\n\t\t\t'number'       => $number,\n\t\t\t'hierarchical' => false,\n\t\t)\n\t);\n\n\t$tax = get_taxonomy( $taxonomy );\n\n\t$popular_ids = array();\n\n\tforeach ( (array) $terms as $term ) {\n\t\t$popular_ids[] = $term->term_id;\n\n\t\tif ( ! $display ) { // Hack for Ajax use.\n\t\t\tcontinue;\n\t\t}\n\n\t\t$id      = \"popular-$taxonomy-$term->term_id\";\n\t\t$checked = in_array( $term->term_id, $checked_terms, true ) ? 'checked=\"checked\"' : '';\n\t\t?>\n\n\t\t<li id=\"<?php echo $id; ?>\" class=\"popular-category\">\n\t\t\t<label class=\"selectit\">\n\t\t\t\t<input id=\"in-<?php echo $id; ?>\" type=\"checkbox\" <?php echo $checked; ?> value=\"<?php echo (int) $term->term_id; ?>\" <?php disabled( ! current_user_can( $tax->cap->assign_terms ) ); ?> />\n\t\t\t\t<?php\n\t\t\t\t/** This filter is documented in wp-includes/category-template.php */\n\t\t\t\techo esc_html( apply_filters( 'the_category', $term->name, '', '' ) );\n\t\t\t\t?>\n\t\t\t</label>\n\t\t</li>\n\n\t\t<?php\n\t}\n\treturn $popular_ids;\n}\n\n/**\n * Outputs a link category checklist element.\n *\n * @since 2.5.1\n *\n * @param int $link_id Optional. The link ID. Default 0.\n */\nfunction wp_link_category_checklist( $link_id = 0 ) {\n\t$default = 1;\n\n\t$checked_categories = array();\n\n\tif ( $link_id ) {\n\t\t$checked_categories = wp_get_link_cats( $link_id );\n\t\t// No selected categories, strange.\n\t\tif ( ! count( $checked_categories ) ) {\n\t\t\t$checked_categories[] = $default;\n\t\t}\n\t} else {\n\t\t$checked_categories[] = $default;\n\t}\n\n\t$categories = get_terms(\n\t\tarray(\n\t\t\t'taxonomy'   => 'link_category',\n\t\t\t'orderby'    => 'name',\n\t\t\t'hide_empty' => 0,\n\t\t)\n\t);\n\n\tif ( empty( $categories ) ) {\n\t\treturn;\n\t}\n\n\tforeach ( $categories as $category ) {\n\t\t$cat_id = $category->term_id;\n\n\t\t/** This filter is documented in wp-includes/category-template.php */\n\t\t$name    = esc_html( apply_filters( 'the_category', $category->name, '', '' ) );\n\t\t$checked = in_array( $cat_id, $checked_categories, true ) ? ' checked=\"checked\"' : '';\n\t\techo '<li id=\"link-category-', $cat_id, '\"><label for=\"in-link-category-', $cat_id, '\" class=\"selectit\"><input value=\"', $cat_id, '\" type=\"checkbox\" name=\"link_category[]\" id=\"in-link-category-', $cat_id, '\"', $checked, '/> ', $name, '</label></li>';\n\t}\n}\n\n/**\n * Adds hidden fields with the data for use in the inline editor for posts and pages.\n *\n * @since 2.7.0\n *\n * @param WP_Post $post Post object.\n */\nfunction get_inline_data( $post ) {\n\t$post_type_object = get_post_type_object( $post->post_type );\n\tif ( ! current_user_can( 'edit_post', $post->ID ) ) {\n\t\treturn;\n\t}\n\n\t$title = esc_textarea( trim( $post->post_title ) );\n\n\techo '\n<div class=\"hidden\" id=\"inline_' . $post->ID . '\">\n\t<div class=\"post_title\">' . $title . '</div>' .\n\t/** This filter is documented in wp-admin/edit-tag-form.php */\n\t'<div class=\"post_name\">' . apply_filters( 'editable_slug', $post->post_name, $post ) . '</div>\n\t<div class=\"post_author\">' . $post->post_author . '</div>\n\t<div class=\"comment_status\">' . esc_html( $post->comment_status ) . '</div>\n\t<div class=\"ping_status\">' . esc_html( $post->ping_status ) . '</div>\n\t<div class=\"_status\">' . esc_html( $post->post_status ) . '</div>\n\t<div class=\"jj\">' . mysql2date( 'd', $post->post_date, false ) . '</div>\n\t<div class=\"mm\">' . mysql2date( 'm', $post->post_date, false ) . '</div>\n\t<div class=\"aa\">' . mysql2date( 'Y', $post->post_date, false ) . '</div>\n\t<div class=\"hh\">' . mysql2date( 'H', $post->post_date, false ) . '</div>\n\t<div class=\"mn\">' . mysql2date( 'i', $post->post_date, false ) . '</div>\n\t<div class=\"ss\">' . mysql2date( 's', $post->post_date, false ) . '</div>\n\t<div class=\"post_password\">' . esc_html( $post->post_password ) . '</div>';\n\n\tif ( $post_type_object->hierarchical ) {\n\t\techo '<div class=\"post_parent\">' . $post->post_parent . '</div>';\n\t}\n\n\techo '<div class=\"page_template\">' . ( $post->page_template ? esc_html( $post->page_template ) : 'default' ) . '</div>';\n\n\tif ( post_type_supports( $post->post_type, 'page-attributes' ) ) {\n\t\techo '<div class=\"menu_order\">' . $post->menu_order . '</div>';\n\t}\n\n\t$taxonomy_names = get_object_taxonomies( $post->post_type );\n\n\tforeach ( $taxonomy_names as $taxonomy_name ) {\n\t\t$taxonomy = get_taxonomy( $taxonomy_name );\n\n\t\tif ( ! $taxonomy->show_in_quick_edit ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( $taxonomy->hierarchical ) {\n\n\t\t\t$terms = get_object_term_cache( $post->ID, $taxonomy_name );\n\t\t\tif ( false === $terms ) {\n\t\t\t\t$terms = wp_get_object_terms( $post->ID, $taxonomy_name );\n\t\t\t\twp_cache_add( $post->ID, wp_list_pluck( $terms, 'term_id' ), $taxonomy_name . '_relationships' );\n\t\t\t}\n\t\t\t$term_ids = empty( $terms ) ? array() : wp_list_pluck( $terms, 'term_id' );\n\n\t\t\techo '<div class=\"post_category\" id=\"' . $taxonomy_name . '_' . $post->ID . '\">' . implode( ',', $term_ids ) . '</div>';\n\n\t\t} else {\n\n\t\t\t$terms_to_edit = get_terms_to_edit( $post->ID, $taxonomy_name );\n\t\t\tif ( ! is_string( $terms_to_edit ) ) {\n\t\t\t\t$terms_to_edit = '';\n\t\t\t}\n\n\t\t\techo '<div class=\"tags_input\" id=\"' . $taxonomy_name . '_' . $post->ID . '\">'\n\t\t\t\t. esc_html( str_replace( ',', ', ', $terms_to_edit ) ) . '</div>';\n\n\t\t}\n\t}\n\n\tif ( ! $post_type_object->hierarchical ) {\n\t\techo '<div class=\"sticky\">' . ( is_sticky( $post->ID ) ? 'sticky' : '' ) . '</div>';\n\t}\n\n\tif ( post_type_supports( $post->post_type, 'post-formats' ) ) {\n\t\techo '<div class=\"post_format\">' . esc_html( get_post_format( $post->ID ) ) . '</div>';\n\t}\n\n\t/**\n\t * Fires after outputting the fields for the inline editor for posts and pages.\n\t *\n\t * @since 4.9.8\n\t *\n\t * @param WP_Post      $post             The current post object.\n\t * @param WP_Post_Type $post_type_object The current post's post type object.\n\t */\n\tdo_action( 'add_inline_data', $post, $post_type_object );\n\n\techo '</div>';\n}\n\n/**\n * Outputs the in-line comment reply-to form in the Comments list table.\n *\n * @since 2.7.0\n *\n * @global WP_List_Table $wp_list_table\n *\n * @param int    $position  Optional. The value of the 'position' input field. Default 1.\n * @param bool   $checkbox  Optional. The value of the 'checkbox' input field. Default false.\n * @param string $mode      Optional. If set to 'single', will use WP_Post_Comments_List_Table,\n *                          otherwise WP_Comments_List_Table. Default 'single'.\n * @param bool   $table_row Optional. Whether to use a table instead of a div element. Default true.\n */\nfunction wp_comment_reply( $position = 1, $checkbox = false, $mode = 'single', $table_row = true ) {\n\tglobal $wp_list_table;\n\t/**\n\t * Filters the in-line comment reply-to form output in the Comments\n\t * list table.\n\t *\n\t * Returning a non-empty value here will short-circuit display\n\t * of the in-line comment-reply form in the Comments list table,\n\t * echoing the returned value instead.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @see wp_comment_reply()\n\t *\n\t * @param string $content The reply-to form content.\n\t * @param array  $args    An array of default args.\n\t */\n\t$content = apply_filters(\n\t\t'wp_comment_reply',\n\t\t'',\n\t\tarray(\n\t\t\t'position' => $position,\n\t\t\t'checkbox' => $checkbox,\n\t\t\t'mode'     => $mode,\n\t\t)\n\t);\n\n\tif ( ! empty( $content ) ) {\n\t\techo $content;\n\t\treturn;\n\t}\n\n\tif ( ! $wp_list_table ) {\n\t\tif ( 'single' === $mode ) {\n\t\t\t$wp_list_table = _get_list_table( 'WP_Post_Comments_List_Table' );\n\t\t} else {\n\t\t\t$wp_list_table = _get_list_table( 'WP_Comments_List_Table' );\n\t\t}\n\t}\n\n\t?>\n<form method=\"get\">\n\t<?php if ( $table_row ) : ?>\n<table style=\"display:none;\"><tbody id=\"com-reply\"><tr id=\"replyrow\" class=\"inline-edit-row\" style=\"display:none;\"><td colspan=\"<?php echo $wp_list_table->get_column_count(); ?>\" class=\"colspanchange\">\n<?php else : ?>\n<div id=\"com-reply\" style=\"display:none;\"><div id=\"replyrow\" style=\"display:none;\">\n<?php endif; ?>\n\t<fieldset class=\"comment-reply\">\n\t<legend>\n\t\t<span class=\"hidden\" id=\"editlegend\"><?php _e( 'Edit Comment' ); ?></span>\n\t\t<span class=\"hidden\" id=\"replyhead\"><?php _e( 'Reply to Comment' ); ?></span>\n\t\t<span class=\"hidden\" id=\"addhead\"><?php _e( 'Add Comment' ); ?></span>\n\t</legend>\n\n\t<div id=\"replycontainer\">\n\t<label for=\"replycontent\" class=\"screen-reader-text\">\n\t\t<?php\n\t\t/* translators: Hidden accessibility text. */\n\t\t_e( 'Comment' );\n\t\t?>\n\t</label>\n\t<?php\n\t$quicktags_settings = array( 'buttons' => 'strong,em,link,block,del,ins,img,ul,ol,li,code,close' );\n\twp_editor(\n\t\t'',\n\t\t'replycontent',\n\t\tarray(\n\t\t\t'media_buttons' => false,\n\t\t\t'tinymce'       => false,\n\t\t\t'quicktags'     => $quicktags_settings,\n\t\t)\n\t);\n\t?>\n\t</div>\n\n\t<div id=\"edithead\" style=\"display:none;\">\n\t\t<div class=\"inside\">\n\t\t<label for=\"author-name\"><?php _e( 'Name' ); ?></label>\n\t\t<input type=\"text\" name=\"newcomment_author\" size=\"50\" value=\"\" id=\"author-name\" />\n\t\t</div>\n\n\t\t<div class=\"inside\">\n\t\t<label for=\"author-email\"><?php _e( 'Email' ); ?></label>\n\t\t<input type=\"text\" name=\"newcomment_author_email\" size=\"50\" value=\"\" id=\"author-email\" />\n\t\t</div>\n\n\t\t<div class=\"inside\">\n\t\t<label for=\"author-url\"><?php _e( 'URL' ); ?></label>\n\t\t<input type=\"text\" id=\"author-url\" name=\"newcomment_author_url\" class=\"code\" size=\"103\" value=\"\" />\n\t\t</div>\n\t</div>\n\n\t<div id=\"replysubmit\" class=\"submit\">\n\t\t<p class=\"reply-submit-buttons\">\n\t\t\t<button type=\"button\" class=\"save button button-primary\">\n\t\t\t\t<span id=\"addbtn\" style=\"display: none;\"><?php _e( 'Add Comment' ); ?></span>\n\t\t\t\t<span id=\"savebtn\" style=\"display: none;\"><?php _e( 'Update Comment' ); ?></span>\n\t\t\t\t<span id=\"replybtn\" style=\"display: none;\"><?php _e( 'Submit Reply' ); ?></span>\n\t\t\t</button>\n\t\t\t<button type=\"button\" class=\"cancel button\"><?php _e( 'Cancel' ); ?></button>\n\t\t\t<span class=\"waiting spinner\"></span>\n\t\t</p>\n\t\t<?php\n\t\twp_admin_notice(\n\t\t\t'<p class=\"error\"></p>',\n\t\t\tarray(\n\t\t\t\t'type'               => 'error',\n\t\t\t\t'additional_classes' => array( 'notice-alt', 'inline', 'hidden' ),\n\t\t\t\t'paragraph_wrap'     => false,\n\t\t\t)\n\t\t);\n\t\t?>\n\t</div>\n\n\t<input type=\"hidden\" name=\"action\" id=\"action\" value=\"\" />\n\t<input type=\"hidden\" name=\"comment_ID\" id=\"comment_ID\" value=\"\" />\n\t<input type=\"hidden\" name=\"comment_post_ID\" id=\"comment_post_ID\" value=\"\" />\n\t<input type=\"hidden\" name=\"status\" id=\"status\" value=\"\" />\n\t<input type=\"hidden\" name=\"position\" id=\"position\" value=\"<?php echo $position; ?>\" />\n\t<input type=\"hidden\" name=\"checkbox\" id=\"checkbox\" value=\"<?php echo $checkbox ? 1 : 0; ?>\" />\n\t<input type=\"hidden\" name=\"mode\" id=\"mode\" value=\"<?php echo esc_attr( $mode ); ?>\" />\n\t<?php\n\t\twp_nonce_field( 'replyto-comment', '_ajax_nonce-replyto-comment', false );\n\tif ( current_user_can( 'unfiltered_html' ) ) {\n\t\twp_nonce_field( 'unfiltered-html-comment', '_wp_unfiltered_html_comment', false );\n\t}\n\t?>\n\t</fieldset>\n\t<?php if ( $table_row ) : ?>\n</td></tr></tbody></table>\n\t<?php else : ?>\n</div></div>\n\t<?php endif; ?>\n</form>\n\t<?php\n}\n\n/**\n * Outputs 'undo move to Trash' text for comments.\n *\n * @since 2.9.0\n */\nfunction wp_comment_trashnotice() {\n\t?>\n<div class=\"hidden\" id=\"trash-undo-holder\">\n\t<div class=\"trash-undo-inside\">\n\t\t<?php\n\t\t/* translators: %s: Comment author, filled by Ajax. */\n\t\tprintf( __( 'Comment by %s moved to the Trash.' ), '<strong></strong>' );\n\t\t?>\n\t\t<span class=\"undo untrash\"><a href=\"#\"><?php _e( 'Undo' ); ?></a></span>\n\t</div>\n</div>\n<div class=\"hidden\" id=\"spam-undo-holder\">\n\t<div class=\"spam-undo-inside\">\n\t\t<?php\n\t\t/* translators: %s: Comment author, filled by Ajax. */\n\t\tprintf( __( 'Comment by %s marked as spam.' ), '<strong></strong>' );\n\t\t?>\n\t\t<span class=\"undo unspam\"><a href=\"#\"><?php _e( 'Undo' ); ?></a></span>\n\t</div>\n</div>\n\t<?php\n}\n\n/**\n * Outputs a post's public meta data in the Custom Fields meta box.\n *\n * @since 1.2.0\n *\n * @param array[] $meta An array of meta data arrays keyed on 'meta_key' and 'meta_value'.\n */\nfunction list_meta( $meta ) {\n\t// Exit if no meta.\n\tif ( ! $meta ) {\n\t\techo '\n<table id=\"list-table\" style=\"display: none;\">\n\t<thead>\n\t<tr>\n\t\t<th class=\"left\">' . _x( 'Name', 'meta name' ) . '</th>\n\t\t<th>' . __( 'Value' ) . '</th>\n\t</tr>\n\t</thead>\n\t<tbody id=\"the-list\" data-wp-lists=\"list:meta\">\n\t<tr><td></td></tr>\n\t</tbody>\n</table>'; // TBODY needed for list-manipulation JS.\n\t\treturn;\n\t}\n\t$count = 0;\n\t?>\n<table id=\"list-table\">\n\t<thead>\n\t<tr>\n\t\t<th class=\"left\"><?php _ex( 'Name', 'meta name' ); ?></th>\n\t\t<th><?php _e( 'Value' ); ?></th>\n\t</tr>\n\t</thead>\n\t<tbody id='the-list' data-wp-lists='list:meta'>\n\t<?php\n\tforeach ( $meta as $entry ) {\n\t\techo _list_meta_row( $entry, $count );\n\t}\n\t?>\n\t</tbody>\n</table>\n\t<?php\n}\n\n/**\n * Outputs a single row of public meta data in the Custom Fields meta box.\n *\n * @since 2.5.0\n *\n * @param array $entry An array of meta data keyed on 'meta_key' and 'meta_value'.\n * @param int   $count Reference to the row number.\n * @return string A single row of public meta data.\n */\nfunction _list_meta_row( $entry, &$count ) {\n\tstatic $update_nonce = '';\n\n\tif ( is_protected_meta( $entry['meta_key'], 'post' ) ) {\n\t\treturn '';\n\t}\n\n\tif ( ! $update_nonce ) {\n\t\t$update_nonce = wp_create_nonce( 'add-meta' );\n\t}\n\n\t$r = '';\n\t++$count;\n\n\tif ( is_serialized( $entry['meta_value'] ) ) {\n\t\tif ( is_serialized_string( $entry['meta_value'] ) ) {\n\t\t\t// This is a serialized string, so we should display it.\n\t\t\t$entry['meta_value'] = maybe_unserialize( $entry['meta_value'] );\n\t\t} else {\n\t\t\t// This is a serialized array/object so we should NOT display it.\n\t\t\t--$count;\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t$entry['meta_key']   = esc_attr( $entry['meta_key'] );\n\t$entry['meta_value'] = esc_textarea( $entry['meta_value'] ); // Using a <textarea />.\n\t$entry['meta_id']    = (int) $entry['meta_id'];\n\n\t$delete_nonce = wp_create_nonce( 'delete-meta_' . $entry['meta_id'] );\n\n\t$r .= \"\\n\\t<tr id='meta-{$entry['meta_id']}'>\";\n\t$r .= \"\\n\\t\\t<td class='left'><label class='screen-reader-text' for='meta-{$entry['meta_id']}-key'>\" .\n\t\t/* translators: Hidden accessibility text. */\n\t\t__( 'Key' ) .\n\t\"</label><input name='meta[{$entry['meta_id']}][key]' id='meta-{$entry['meta_id']}-key' type='text' size='20' value='{$entry['meta_key']}' />\";\n\n\t$r .= \"\\n\\t\\t<div class='submit'>\";\n\t$r .= get_submit_button( __( 'Delete' ), 'deletemeta small', \"deletemeta[{$entry['meta_id']}]\", false, array( 'data-wp-lists' => \"delete:the-list:meta-{$entry['meta_id']}::_ajax_nonce=$delete_nonce\" ) );\n\t$r .= \"\\n\\t\\t\";\n\t$r .= get_submit_button( __( 'Update' ), 'updatemeta small', \"meta-{$entry['meta_id']}-submit\", false, array( 'data-wp-lists' => \"add:the-list:meta-{$entry['meta_id']}::_ajax_nonce-add-meta=$update_nonce\" ) );\n\t$r .= '</div>';\n\t$r .= wp_nonce_field( 'change-meta', '_ajax_nonce', false, false );\n\t$r .= '</td>';\n\n\t$r .= \"\\n\\t\\t<td><label class='screen-reader-text' for='meta-{$entry['meta_id']}-value'>\" .\n\t\t/* translators: Hidden accessibility text. */\n\t\t__( 'Value' ) .\n\t\"</label><textarea name='meta[{$entry['meta_id']}][value]' id='meta-{$entry['meta_id']}-value' rows='2' cols='30'>{$entry['meta_value']}</textarea></td>\\n\\t</tr>\";\n\treturn $r;\n}\n\n/**\n * Prints the form in the Custom Fields meta box.\n *\n * @since 1.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param WP_Post $post Optional. The post being edited.\n */\nfunction meta_form( $post = null ) {\n\tglobal $wpdb;\n\t$post = get_post( $post );\n\n\t/**\n\t * Filters values for the meta key dropdown in the Custom Fields meta box.\n\t *\n\t * Returning a non-null value will effectively short-circuit and avoid a\n\t * potentially expensive query against postmeta.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param array|null $keys Pre-defined meta keys to be used in place of a postmeta query. Default null.\n\t * @param WP_Post    $post The current post object.\n\t */\n\t$keys = apply_filters( 'postmeta_form_keys', null, $post );\n\n\tif ( null === $keys ) {\n\t\t/**\n\t\t * Filters the number of custom fields to retrieve for the drop-down\n\t\t * in the Custom Fields meta box.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param int $limit Number of custom fields to retrieve. Default 30.\n\t\t */\n\t\t$limit = apply_filters( 'postmeta_form_limit', 30 );\n\n\t\t$keys = $wpdb->get_col(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT DISTINCT meta_key\n\t\t\t\tFROM $wpdb->postmeta\n\t\t\t\tWHERE meta_key NOT BETWEEN '_' AND '_z'\n\t\t\t\tHAVING meta_key NOT LIKE %s\n\t\t\t\tORDER BY meta_key\n\t\t\t\tLIMIT %d\",\n\t\t\t\t$wpdb->esc_like( '_' ) . '%',\n\t\t\t\t$limit\n\t\t\t)\n\t\t);\n\t}\n\n\tif ( $keys ) {\n\t\tnatcasesort( $keys );\n\t}\n\t?>\n<p><strong><?php _e( 'Add Custom Field:' ); ?></strong></p>\n<table id=\"newmeta\">\n<thead>\n<tr>\n<th class=\"left\"><label for=\"metakeyselect\"><?php _ex( 'Name', 'meta name' ); ?></label></th>\n<th><label for=\"metavalue\"><?php _e( 'Value' ); ?></label></th>\n</tr>\n</thead>\n\n<tbody>\n<tr>\n<td id=\"newmetaleft\" class=\"left\">\n\t<?php if ( $keys ) { ?>\n<select id=\"metakeyselect\" name=\"metakeyselect\">\n<option value=\"#NONE#\"><?php _e( '&mdash; Select &mdash;' ); ?></option>\n\t\t<?php\n\t\tforeach ( $keys as $key ) {\n\t\t\tif ( is_protected_meta( $key, 'post' ) || ! current_user_can( 'add_post_meta', $post->ID, $key ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\techo \"\\n<option value='\" . esc_attr( $key ) . \"'>\" . esc_html( $key ) . '</option>';\n\t\t}\n\t\t?>\n</select>\n<input class=\"hidden\" type=\"text\" id=\"metakeyinput\" name=\"metakeyinput\" value=\"\" aria-label=\"<?php _e( 'New custom field name' ); ?>\" />\n<button type=\"button\" id=\"newmeta-button\" class=\"button button-small hide-if-no-js\" onclick=\"jQuery('#metakeyinput, #metakeyselect, #enternew, #cancelnew').toggleClass('hidden');jQuery('#metakeyinput, #metakeyselect').filter(':visible').trigger('focus');\">\n<span id=\"enternew\"><?php _e( 'Enter new' ); ?></span>\n<span id=\"cancelnew\" class=\"hidden\"><?php _e( 'Cancel' ); ?></span></button>\n<?php } else { ?>\n<input type=\"text\" id=\"metakeyinput\" name=\"metakeyinput\" value=\"\" />\n<?php } ?>\n</td>\n<td><textarea id=\"metavalue\" name=\"metavalue\" rows=\"2\" cols=\"25\"></textarea>\n\t<?php wp_nonce_field( 'add-meta', '_ajax_nonce-add-meta', false ); ?>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"submit add-custom-field\">\n\t<?php\n\tsubmit_button(\n\t\t__( 'Add Custom Field' ),\n\t\t'',\n\t\t'addmeta',\n\t\tfalse,\n\t\tarray(\n\t\t\t'id'            => 'newmeta-submit',\n\t\t\t'data-wp-lists' => 'add:the-list:newmeta',\n\t\t)\n\t);\n\t?>\n</div>\n\t<?php\n}\n\n/**\n * Prints out HTML form date elements for editing post or comment publish date.\n *\n * @since 0.71\n * @since 4.4.0 Converted to use get_comment() instead of the global `$comment`.\n *\n * @global WP_Locale $wp_locale WordPress date and time locale object.\n *\n * @param int|bool $edit      Accepts 1|true for editing the date, 0|false for adding the date.\n * @param int|bool $for_post  Accepts 1|true for applying the date to a post, 0|false for a comment.\n * @param int      $tab_index The tabindex attribute to add. Default 0.\n * @param int|bool $multi     Optional. Whether the additional fields and buttons should be added.\n *                            Default 0|false.\n */\nfunction touch_time( $edit = 1, $for_post = 1, $tab_index = 0, $multi = 0 ) {\n\tglobal $wp_locale;\n\t$post = get_post();\n\n\tif ( $for_post ) {\n\t\t$edit = ! ( in_array( $post->post_status, array( 'draft', 'pending' ), true ) && ( ! $post->post_date_gmt || '0000-00-00 00:00:00' === $post->post_date_gmt ) );\n\t}\n\n\t$tab_index_attribute = '';\n\tif ( (int) $tab_index > 0 ) {\n\t\t$tab_index_attribute = \" tabindex=\\\"$tab_index\\\"\";\n\t}\n\n\t$post_date = ( $for_post ) ? $post->post_date : get_comment()->comment_date;\n\t$jj        = ( $edit ) ? mysql2date( 'd', $post_date, false ) : current_time( 'd' );\n\t$mm        = ( $edit ) ? mysql2date( 'm', $post_date, false ) : current_time( 'm' );\n\t$aa        = ( $edit ) ? mysql2date( 'Y', $post_date, false ) : current_time( 'Y' );\n\t$hh        = ( $edit ) ? mysql2date( 'H', $post_date, false ) : current_time( 'H' );\n\t$mn        = ( $edit ) ? mysql2date( 'i', $post_date, false ) : current_time( 'i' );\n\t$ss        = ( $edit ) ? mysql2date( 's', $post_date, false ) : current_time( 's' );\n\n\t$cur_jj = current_time( 'd' );\n\t$cur_mm = current_time( 'm' );\n\t$cur_aa = current_time( 'Y' );\n\t$cur_hh = current_time( 'H' );\n\t$cur_mn = current_time( 'i' );\n\n\t$month = '<label><span class=\"screen-reader-text\">' .\n\t\t/* translators: Hidden accessibility text. */\n\t\t__( 'Month' ) .\n\t'</span><select class=\"form-required\" ' . ( $multi ? '' : 'id=\"mm\" ' ) . 'name=\"mm\"' . $tab_index_attribute . \">\\n\";\n\tfor ( $i = 1; $i < 13; $i = $i + 1 ) {\n\t\t$monthnum  = zeroise( $i, 2 );\n\t\t$monthtext = $wp_locale->get_month_abbrev( $wp_locale->get_month( $i ) );\n\t\t$month    .= \"\\t\\t\\t\" . '<option value=\"' . $monthnum . '\" data-text=\"' . $monthtext . '\" ' . selected( $monthnum, $mm, false ) . '>';\n\t\t/* translators: 1: Month number (01, 02, etc.), 2: Month abbreviation. */\n\t\t$month .= sprintf( __( '%1$s-%2$s' ), $monthnum, $monthtext ) . \"</option>\\n\";\n\t}\n\t$month .= '</select></label>';\n\n\t$day = '<label><span class=\"screen-reader-text\">' .\n\t\t/* translators: Hidden accessibility text. */\n\t\t__( 'Day' ) .\n\t'</span><input type=\"text\" ' . ( $multi ? '' : 'id=\"jj\" ' ) . 'name=\"jj\" value=\"' . $jj . '\" size=\"2\" maxlength=\"2\"' . $tab_index_attribute . ' autocomplete=\"off\" class=\"form-required\" inputmode=\"numeric\" /></label>';\n\t$year = '<label><span class=\"screen-reader-text\">' .\n\t\t/* translators: Hidden accessibility text. */\n\t\t__( 'Year' ) .\n\t'</span><input type=\"text\" ' . ( $multi ? '' : 'id=\"aa\" ' ) . 'name=\"aa\" value=\"' . $aa . '\" size=\"4\" maxlength=\"4\"' . $tab_index_attribute . ' autocomplete=\"off\" class=\"form-required\" inputmode=\"numeric\" /></label>';\n\t$hour = '<label><span class=\"screen-reader-text\">' .\n\t\t/* translators: Hidden accessibility text. */\n\t\t__( 'Hour' ) .\n\t'</span><input type=\"text\" ' . ( $multi ? '' : 'id=\"hh\" ' ) . 'name=\"hh\" value=\"' . $hh . '\" size=\"2\" maxlength=\"2\"' . $tab_index_attribute . ' autocomplete=\"off\" class=\"form-required\" inputmode=\"numeric\" /></label>';\n\t$minute = '<label><span class=\"screen-reader-text\">' .\n\t\t/* translators: Hidden accessibility text. */\n\t\t__( 'Minute' ) .\n\t'</span><input type=\"text\" ' . ( $multi ? '' : 'id=\"mn\" ' ) . 'name=\"mn\" value=\"' . $mn . '\" size=\"2\" maxlength=\"2\"' . $tab_index_attribute . ' autocomplete=\"off\" class=\"form-required\" inputmode=\"numeric\" /></label>';\n\n\techo '<div class=\"timestamp-wrap\">';\n\t/* translators: 1: Month, 2: Day, 3: Year, 4: Hour, 5: Minute. */\n\tprintf( __( '%1$s %2$s, %3$s at %4$s:%5$s' ), $month, $day, $year, $hour, $minute );\n\n\techo '</div><input type=\"hidden\" id=\"ss\" name=\"ss\" value=\"' . $ss . '\" />';\n\n\tif ( $multi ) {\n\t\treturn;\n\t}\n\n\techo \"\\n\\n\";\n\n\t$map = array(\n\t\t'mm' => array( $mm, $cur_mm ),\n\t\t'jj' => array( $jj, $cur_jj ),\n\t\t'aa' => array( $aa, $cur_aa ),\n\t\t'hh' => array( $hh, $cur_hh ),\n\t\t'mn' => array( $mn, $cur_mn ),\n\t);\n\n\tforeach ( $map as $timeunit => $value ) {\n\t\tlist( $unit, $curr ) = $value;\n\n\t\techo '<input type=\"hidden\" id=\"hidden_' . $timeunit . '\" name=\"hidden_' . $timeunit . '\" value=\"' . $unit . '\" />' . \"\\n\";\n\t\t$cur_timeunit = 'cur_' . $timeunit;\n\t\techo '<input type=\"hidden\" id=\"' . $cur_timeunit . '\" name=\"' . $cur_timeunit . '\" value=\"' . $curr . '\" />' . \"\\n\";\n\t}\n\t?>\n\n<p>\n<a href=\"#edit_timestamp\" class=\"save-timestamp hide-if-no-js button\"><?php _e( 'OK' ); ?></a>\n<a href=\"#edit_timestamp\" class=\"cancel-timestamp hide-if-no-js button-cancel\"><?php _e( 'Cancel' ); ?></a>\n</p>\n\t<?php\n}\n\n/**\n * Prints out option HTML elements for the page templates drop-down.\n *\n * @since 1.5.0\n * @since 4.7.0 Added the `$post_type` parameter.\n *\n * @param string $default_template Optional. The template file name. Default empty.\n * @param string $post_type        Optional. Post type to get templates for. Default 'page'.\n */\nfunction page_template_dropdown( $default_template = '', $post_type = 'page' ) {\n\t$templates = get_page_templates( null, $post_type );\n\n\tksort( $templates );\n\n\tforeach ( array_keys( $templates ) as $template ) {\n\t\t$selected = selected( $default_template, $templates[ $template ], false );\n\t\techo \"\\n\\t<option value='\" . esc_attr( $templates[ $template ] ) . \"' $selected>\" . esc_html( $template ) . '</option>';\n\t}\n}\n\n/**\n * Prints out option HTML elements for the page parents drop-down.\n *\n * @since 1.5.0\n * @since 4.4.0 `$post` argument was added.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int         $default_page Optional. The default page ID to be pre-selected. Default 0.\n * @param int         $parent_page  Optional. The parent page ID. Default 0.\n * @param int         $level        Optional. Page depth level. Default 0.\n * @param int|WP_Post $post         Post ID or WP_Post object.\n * @return void|false Void on success, false if the page has no children.\n */\nfunction parent_dropdown( $default_page = 0, $parent_page = 0, $level = 0, $post = null ) {\n\tglobal $wpdb;\n\n\t$post  = get_post( $post );\n\t$items = $wpdb->get_results(\n\t\t$wpdb->prepare(\n\t\t\t\"SELECT ID, post_parent, post_title\n\t\t\tFROM $wpdb->posts\n\t\t\tWHERE post_parent = %d AND post_type = 'page'\n\t\t\tORDER BY menu_order\",\n\t\t\t$parent_page\n\t\t)\n\t);\n\n\tif ( $items ) {\n\t\tforeach ( $items as $item ) {\n\t\t\t// A page cannot be its own parent.\n\t\t\tif ( $post && $post->ID && (int) $item->ID === $post->ID ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$pad      = str_repeat( '&nbsp;', $level * 3 );\n\t\t\t$selected = selected( $default_page, $item->ID, false );\n\n\t\t\techo \"\\n\\t<option class='level-$level' value='$item->ID' $selected>$pad \" . esc_html( $item->post_title ) . '</option>';\n\t\t\tparent_dropdown( $default_page, $item->ID, $level + 1 );\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/**\n * Prints out option HTML elements for role selectors.\n *\n * @since 2.1.0\n *\n * @param string $selected Slug for the role that should be already selected.\n */\nfunction wp_dropdown_roles( $selected = '' ) {\n\t$r = '';\n\n\t$editable_roles = array_reverse( get_editable_roles() );\n\n\tforeach ( $editable_roles as $role => $details ) {\n\t\t$name = translate_user_role( $details['name'] );\n\t\t// Preselect specified role.\n\t\tif ( $selected === $role ) {\n\t\t\t$r .= \"\\n\\t<option selected='selected' value='\" . esc_attr( $role ) . \"'>$name</option>\";\n\t\t} else {\n\t\t\t$r .= \"\\n\\t<option value='\" . esc_attr( $role ) . \"'>$name</option>\";\n\t\t}\n\t}\n\n\techo $r;\n}\n\n/**\n * Outputs the form used by the importers to accept the data to be imported.\n *\n * @since 2.0.0\n *\n * @param string $action The action attribute for the form.\n */\nfunction wp_import_upload_form( $action ) {\n\n\t/**\n\t * Filters the maximum allowed upload size for import files.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @see wp_max_upload_size()\n\t *\n\t * @param int $max_upload_size Allowed upload size. Default 1 MB.\n\t */\n\t$bytes      = apply_filters( 'import_upload_size_limit', wp_max_upload_size() );\n\t$size       = size_format( $bytes );\n\t$upload_dir = wp_upload_dir();\n\tif ( ! empty( $upload_dir['error'] ) ) :\n\t\t$upload_directory_error  = '<p>' . __( 'Before you can upload your import file, you will need to fix the following error:' ) . '</p>';\n\t\t$upload_directory_error .= '<p><strong>' . $upload_dir['error'] . '</strong></p>';\n\t\twp_admin_notice(\n\t\t\t$upload_directory_error,\n\t\t\tarray(\n\t\t\t\t'additional_classes' => array( 'error' ),\n\t\t\t\t'paragraph_wrap'     => false,\n\t\t\t)\n\t\t);\n\telse :\n\t\t?>\n<form enctype=\"multipart/form-data\" id=\"import-upload-form\" method=\"post\" class=\"wp-upload-form\" action=\"<?php echo esc_url( wp_nonce_url( $action, 'import-upload' ) ); ?>\">\n<p>\n\t\t<?php\n\t\tprintf(\n\t\t\t'<label for=\"upload\">%s</label> (%s)',\n\t\t\t__( 'Choose a file from your computer:' ),\n\t\t\t/* translators: %s: Maximum allowed file size. */\n\t\t\tsprintf( __( 'Maximum size: %s' ), $size )\n\t\t);\n\t\t?>\n<input type=\"file\" id=\"upload\" name=\"import\" size=\"25\" />\n<input type=\"hidden\" name=\"action\" value=\"save\" />\n<input type=\"hidden\" name=\"max_file_size\" value=\"<?php echo $bytes; ?>\" />\n</p>\n\t\t<?php submit_button( __( 'Upload file and import' ), 'primary' ); ?>\n</form>\n\t\t<?php\n\tendif;\n}\n\n/**\n * Adds a meta box to one or more screens.\n *\n * @since 2.5.0\n * @since 4.4.0 The `$screen` parameter now accepts an array of screen IDs.\n *\n * @global array $wp_meta_boxes Global meta box state.\n *\n * @param string                 $id            Meta box ID (used in the 'id' attribute for the meta box).\n * @param string                 $title         Title of the meta box.\n * @param callable               $callback      Function that fills the box with the desired content.\n *                                              The function should echo its output.\n * @param string|array|WP_Screen $screen        Optional. The screen or screens on which to show the box\n *                                              (such as a post type, 'link', or 'comment'). Accepts a single\n *                                              screen ID, WP_Screen object, or array of screen IDs. Default\n *                                              is the current screen.  If you have used add_menu_page() or\n *                                              add_submenu_page() to create a new screen (and hence screen_id),\n *                                              make sure your menu slug conforms to the limits of sanitize_key()\n *                                              otherwise the 'screen' menu may not correctly render on your page.\n * @param string                 $context       Optional. The context within the screen where the box\n *                                              should display. Available contexts vary from screen to\n *                                              screen. Post edit screen contexts include 'normal', 'side',\n *                                              and 'advanced'. Comments screen contexts include 'normal'\n *                                              and 'side'. Menus meta boxes (accordion sections) all use\n *                                              the 'side' context. Global default is 'advanced'.\n * @param string                 $priority      Optional. The priority within the context where the box should show.\n *                                              Accepts 'high', 'core', 'default', or 'low'. Default 'default'.\n * @param array                  $callback_args Optional. Data that should be set as the $args property\n *                                              of the box array (which is the second parameter passed\n *                                              to your callback). Default null.\n */\nfunction add_meta_box( $id, $title, $callback, $screen = null, $context = 'advanced', $priority = 'default', $callback_args = null ) {\n\tglobal $wp_meta_boxes;\n\n\tif ( empty( $screen ) ) {\n\t\t$screen = get_current_screen();\n\t} elseif ( is_string( $screen ) ) {\n\t\t$screen = convert_to_screen( $screen );\n\t} elseif ( is_array( $screen ) ) {\n\t\tforeach ( $screen as $single_screen ) {\n\t\t\tadd_meta_box( $id, $title, $callback, $single_screen, $context, $priority, $callback_args );\n\t\t}\n\t}\n\n\tif ( ! isset( $screen->id ) ) {\n\t\treturn;\n\t}\n\n\t$page = $screen->id;\n\n\tif ( ! isset( $wp_meta_boxes ) ) {\n\t\t$wp_meta_boxes = array();\n\t}\n\tif ( ! isset( $wp_meta_boxes[ $page ] ) ) {\n\t\t$wp_meta_boxes[ $page ] = array();\n\t}\n\tif ( ! isset( $wp_meta_boxes[ $page ][ $context ] ) ) {\n\t\t$wp_meta_boxes[ $page ][ $context ] = array();\n\t}\n\n\tforeach ( array_keys( $wp_meta_boxes[ $page ] ) as $a_context ) {\n\t\tforeach ( array( 'high', 'core', 'default', 'low' ) as $a_priority ) {\n\t\t\tif ( ! isset( $wp_meta_boxes[ $page ][ $a_context ][ $a_priority ][ $id ] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If a core box was previously removed, don't add.\n\t\t\tif ( ( 'core' === $priority || 'sorted' === $priority )\n\t\t\t\t&& false === $wp_meta_boxes[ $page ][ $a_context ][ $a_priority ][ $id ]\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a core box was previously added by a plugin, don't add.\n\t\t\tif ( 'core' === $priority ) {\n\t\t\t\t/*\n\t\t\t\t * If the box was added with default priority, give it core priority\n\t\t\t\t * to maintain sort order.\n\t\t\t\t */\n\t\t\t\tif ( 'default' === $a_priority ) {\n\t\t\t\t\t$wp_meta_boxes[ $page ][ $a_context ]['core'][ $id ] = $wp_meta_boxes[ $page ][ $a_context ]['default'][ $id ];\n\t\t\t\t\tunset( $wp_meta_boxes[ $page ][ $a_context ]['default'][ $id ] );\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If no priority given and ID already present, use existing priority.\n\t\t\tif ( empty( $priority ) ) {\n\t\t\t\t$priority = $a_priority;\n\t\t\t\t/*\n\t\t\t\t * Else, if we're adding to the sorted priority, we don't know the title\n\t\t\t\t * or callback. Grab them from the previously added context/priority.\n\t\t\t\t */\n\t\t\t} elseif ( 'sorted' === $priority ) {\n\t\t\t\t$title         = $wp_meta_boxes[ $page ][ $a_context ][ $a_priority ][ $id ]['title'];\n\t\t\t\t$callback      = $wp_meta_boxes[ $page ][ $a_context ][ $a_priority ][ $id ]['callback'];\n\t\t\t\t$callback_args = $wp_meta_boxes[ $page ][ $a_context ][ $a_priority ][ $id ]['args'];\n\t\t\t}\n\n\t\t\t// An ID can be in only one priority and one context.\n\t\t\tif ( $priority !== $a_priority || $context !== $a_context ) {\n\t\t\t\tunset( $wp_meta_boxes[ $page ][ $a_context ][ $a_priority ][ $id ] );\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( empty( $priority ) ) {\n\t\t$priority = 'low';\n\t}\n\n\tif ( ! isset( $wp_meta_boxes[ $page ][ $context ][ $priority ] ) ) {\n\t\t$wp_meta_boxes[ $page ][ $context ][ $priority ] = array();\n\t}\n\n\t$wp_meta_boxes[ $page ][ $context ][ $priority ][ $id ] = array(\n\t\t'id'       => $id,\n\t\t'title'    => $title,\n\t\t'callback' => $callback,\n\t\t'args'     => $callback_args,\n\t);\n}\n\n\n/**\n * Renders a \"fake\" meta box with an information message,\n * shown on the block editor, when an incompatible meta box is found.\n *\n * @since 5.0.0\n *\n * @param mixed $data_object The data object being rendered on this screen.\n * @param array $box         {\n *     Custom formats meta box arguments.\n *\n *     @type string   $id           Meta box 'id' attribute.\n *     @type string   $title        Meta box title.\n *     @type callable $old_callback The original callback for this meta box.\n *     @type array    $args         Extra meta box arguments.\n * }\n */\nfunction do_block_editor_incompatible_meta_box( $data_object, $box ) {\n\t$plugin  = _get_plugin_from_callback( $box['old_callback'] );\n\t$plugins = get_plugins();\n\techo '<p>';\n\tif ( $plugin ) {\n\t\t/* translators: %s: The name of the plugin that generated this meta box. */\n\t\tprintf( __( 'This meta box, from the %s plugin, is not compatible with the block editor.' ), \"<strong>{$plugin['Name']}</strong>\" );\n\t} else {\n\t\t_e( 'This meta box is not compatible with the block editor.' );\n\t}\n\techo '</p>';\n\n\tif ( empty( $plugins['classic-editor/classic-editor.php'] ) ) {\n\t\tif ( current_user_can( 'install_plugins' ) ) {\n\t\t\t$install_url = wp_nonce_url(\n\t\t\t\tself_admin_url( 'plugin-install.php?tab=favorites&user=wordpressdotorg&save=0' ),\n\t\t\t\t'save_wporg_username_' . get_current_user_id()\n\t\t\t);\n\n\t\t\techo '<p>';\n\t\t\t/* translators: %s: A link to install the Classic Editor plugin. */\n\t\t\tprintf( __( 'Please install the <a href=\"%s\">Classic Editor plugin</a> to use this meta box.' ), esc_url( $install_url ) );\n\t\t\techo '</p>';\n\t\t}\n\t} elseif ( is_plugin_inactive( 'classic-editor/classic-editor.php' ) ) {\n\t\tif ( current_user_can( 'activate_plugins' ) ) {\n\t\t\t$activate_url = wp_nonce_url(\n\t\t\t\tself_admin_url( 'plugins.php?action=activate&plugin=classic-editor/classic-editor.php' ),\n\t\t\t\t'activate-plugin_classic-editor/classic-editor.php'\n\t\t\t);\n\n\t\t\techo '<p>';\n\t\t\t/* translators: %s: A link to activate the Classic Editor plugin. */\n\t\t\tprintf( __( 'Please activate the <a href=\"%s\">Classic Editor plugin</a> to use this meta box.' ), esc_url( $activate_url ) );\n\t\t\techo '</p>';\n\t\t}\n\t} elseif ( $data_object instanceof WP_Post ) {\n\t\t$edit_url = add_query_arg(\n\t\t\tarray(\n\t\t\t\t'classic-editor'         => '',\n\t\t\t\t'classic-editor__forget' => '',\n\t\t\t),\n\t\t\tget_edit_post_link( $data_object )\n\t\t);\n\t\techo '<p>';\n\t\t/* translators: %s: A link to use the Classic Editor plugin. */\n\t\tprintf( __( 'Please open the <a href=\"%s\">classic editor</a> to use this meta box.' ), esc_url( $edit_url ) );\n\t\techo '</p>';\n\t}\n}\n\n/**\n * Internal helper function to find the plugin from a meta box callback.\n *\n * @since 5.0.0\n *\n * @access private\n *\n * @param callable $callback The callback function to check.\n * @return array|null The plugin that the callback belongs to, or null if it doesn't belong to a plugin.\n */\nfunction _get_plugin_from_callback( $callback ) {\n\ttry {\n\t\tif ( is_array( $callback ) ) {\n\t\t\t$reflection = new ReflectionMethod( $callback[0], $callback[1] );\n\t\t} elseif ( is_string( $callback ) && str_contains( $callback, '::' ) ) {\n\t\t\t$reflection = new ReflectionMethod( $callback );\n\t\t} else {\n\t\t\t$reflection = new ReflectionFunction( $callback );\n\t\t}\n\t} catch ( ReflectionException $exception ) {\n\t\t// We could not properly reflect on the callable, so we abort here.\n\t\treturn null;\n\t}\n\n\t// Don't show an error if it's an internal PHP function.\n\tif ( ! $reflection->isInternal() ) {\n\n\t\t// Only show errors if the meta box was registered by a plugin.\n\t\t$filename   = wp_normalize_path( $reflection->getFileName() );\n\t\t$plugin_dir = wp_normalize_path( WP_PLUGIN_DIR );\n\n\t\tif ( str_starts_with( $filename, $plugin_dir ) ) {\n\t\t\t$filename = str_replace( $plugin_dir, '', $filename );\n\t\t\t$filename = preg_replace( '|^/([^/]*/).*$|', '\\\\1', $filename );\n\n\t\t\t$plugins = get_plugins();\n\n\t\t\tforeach ( $plugins as $name => $plugin ) {\n\t\t\t\tif ( str_starts_with( $name, $filename ) ) {\n\t\t\t\t\treturn $plugin;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Meta-Box template function.\n *\n * @since 2.5.0\n *\n * @global array $wp_meta_boxes Global meta box state.\n *\n * @param string|WP_Screen $screen      The screen identifier. If you have used add_menu_page() or\n *                                      add_submenu_page() to create a new screen (and hence screen_id)\n *                                      make sure your menu slug conforms to the limits of sanitize_key()\n *                                      otherwise the 'screen' menu may not correctly render on your page.\n * @param string           $context     The screen context for which to display meta boxes.\n * @param mixed            $data_object Gets passed to the meta box callback function as the first parameter.\n *                                      Often this is the object that's the focus of the current screen,\n *                                      for example a `WP_Post` or `WP_Comment` object.\n * @return int Number of meta_boxes.\n */\nfunction do_meta_boxes( $screen, $context, $data_object ) {\n\tglobal $wp_meta_boxes;\n\tstatic $already_sorted = false;\n\n\tif ( empty( $screen ) ) {\n\t\t$screen = get_current_screen();\n\t} elseif ( is_string( $screen ) ) {\n\t\t$screen = convert_to_screen( $screen );\n\t}\n\n\t$page = $screen->id;\n\n\t$hidden = get_hidden_meta_boxes( $screen );\n\n\tprintf( '<div id=\"%s-sortables\" class=\"meta-box-sortables\">', esc_attr( $context ) );\n\n\t/*\n\t * Grab the ones the user has manually sorted.\n\t * Pull them out of their previous context/priority and into the one the user chose.\n\t */\n\t$sorted = get_user_option( \"meta-box-order_$page\" );\n\n\tif ( ! $already_sorted && $sorted ) {\n\t\tforeach ( $sorted as $box_context => $ids ) {\n\t\t\tforeach ( explode( ',', $ids ) as $id ) {\n\t\t\t\tif ( $id && 'dashboard_browser_nag' !== $id ) {\n\t\t\t\t\tadd_meta_box( $id, null, null, $screen, $box_context, 'sorted' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t$already_sorted = true;\n\n\t$i = 0;\n\n\tif ( isset( $wp_meta_boxes[ $page ][ $context ] ) ) {\n\t\tforeach ( array( 'high', 'sorted', 'core', 'default', 'low' ) as $priority ) {\n\t\t\tif ( isset( $wp_meta_boxes[ $page ][ $context ][ $priority ] ) ) {\n\t\t\t\tforeach ( (array) $wp_meta_boxes[ $page ][ $context ][ $priority ] as $box ) {\n\t\t\t\t\tif ( false === $box || ! $box['title'] ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$block_compatible = true;\n\t\t\t\t\tif ( is_array( $box['args'] ) ) {\n\t\t\t\t\t\t// If a meta box is just here for back compat, don't show it in the block editor.\n\t\t\t\t\t\tif ( $screen->is_block_editor() && isset( $box['args']['__back_compat_meta_box'] ) && $box['args']['__back_compat_meta_box'] ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isset( $box['args']['__block_editor_compatible_meta_box'] ) ) {\n\t\t\t\t\t\t\t$block_compatible = (bool) $box['args']['__block_editor_compatible_meta_box'];\n\t\t\t\t\t\t\tunset( $box['args']['__block_editor_compatible_meta_box'] );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If the meta box is declared as incompatible with the block editor, override the callback function.\n\t\t\t\t\t\tif ( ! $block_compatible && $screen->is_block_editor() ) {\n\t\t\t\t\t\t\t$box['old_callback'] = $box['callback'];\n\t\t\t\t\t\t\t$box['callback']     = 'do_block_editor_incompatible_meta_box';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isset( $box['args']['__back_compat_meta_box'] ) ) {\n\t\t\t\t\t\t\t$block_compatible = $block_compatible || (bool) $box['args']['__back_compat_meta_box'];\n\t\t\t\t\t\t\tunset( $box['args']['__back_compat_meta_box'] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t++$i;\n\t\t\t\t\t// get_hidden_meta_boxes() doesn't apply in the block editor.\n\t\t\t\t\t$hidden_class = ( ! $screen->is_block_editor() && in_array( $box['id'], $hidden, true ) ) ? ' hide-if-js' : '';\n\t\t\t\t\techo '<div id=\"' . $box['id'] . '\" class=\"postbox ' . postbox_classes( $box['id'], $page ) . $hidden_class . '\" ' . '>' . \"\\n\";\n\n\t\t\t\t\techo '<div class=\"postbox-header\">';\n\t\t\t\t\techo '<h2 class=\"hndle\">';\n\t\t\t\t\tif ( 'dashboard_php_nag' === $box['id'] ) {\n\t\t\t\t\t\techo '<span aria-hidden=\"true\" class=\"dashicons dashicons-warning\"></span>';\n\t\t\t\t\t\techo '<span class=\"screen-reader-text\">' .\n\t\t\t\t\t\t\t/* translators: Hidden accessibility text. */\n\t\t\t\t\t\t\t__( 'Warning:' ) .\n\t\t\t\t\t\t' </span>';\n\t\t\t\t\t}\n\t\t\t\t\techo $box['title'];\n\t\t\t\t\techo \"</h2>\\n\";\n\n\t\t\t\t\tif ( 'dashboard_browser_nag' !== $box['id'] ) {\n\t\t\t\t\t\t$widget_title = $box['title'];\n\n\t\t\t\t\t\tif ( is_array( $box['args'] ) && isset( $box['args']['__widget_basename'] ) ) {\n\t\t\t\t\t\t\t$widget_title = $box['args']['__widget_basename'];\n\t\t\t\t\t\t\t// Do not pass this parameter to the user callback function.\n\t\t\t\t\t\t\tunset( $box['args']['__widget_basename'] );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\techo '<div class=\"handle-actions hide-if-no-js\">';\n\n\t\t\t\t\t\techo '<button type=\"button\" class=\"handle-order-higher\" aria-disabled=\"false\" aria-describedby=\"' . $box['id'] . '-handle-order-higher-description\">';\n\t\t\t\t\t\techo '<span class=\"screen-reader-text\">' .\n\t\t\t\t\t\t\t/* translators: Hidden accessibility text. */\n\t\t\t\t\t\t\t__( 'Move up' ) .\n\t\t\t\t\t\t'</span>';\n\t\t\t\t\t\techo '<span class=\"order-higher-indicator\" aria-hidden=\"true\"></span>';\n\t\t\t\t\t\techo '</button>';\n\t\t\t\t\t\techo '<span class=\"hidden\" id=\"' . $box['id'] . '-handle-order-higher-description\">' . sprintf(\n\t\t\t\t\t\t\t/* translators: %s: Meta box title. */\n\t\t\t\t\t\t\t__( 'Move %s box up' ),\n\t\t\t\t\t\t\t$widget_title\n\t\t\t\t\t\t) . '</span>';\n\n\t\t\t\t\t\techo '<button type=\"button\" class=\"handle-order-lower\" aria-disabled=\"false\" aria-describedby=\"' . $box['id'] . '-handle-order-lower-description\">';\n\t\t\t\t\t\techo '<span class=\"screen-reader-text\">' .\n\t\t\t\t\t\t\t/* translators: Hidden accessibility text. */\n\t\t\t\t\t\t\t__( 'Move down' ) .\n\t\t\t\t\t\t'</span>';\n\t\t\t\t\t\techo '<span class=\"order-lower-indicator\" aria-hidden=\"true\"></span>';\n\t\t\t\t\t\techo '</button>';\n\t\t\t\t\t\techo '<span class=\"hidden\" id=\"' . $box['id'] . '-handle-order-lower-description\">' . sprintf(\n\t\t\t\t\t\t\t/* translators: %s: Meta box title. */\n\t\t\t\t\t\t\t__( 'Move %s box down' ),\n\t\t\t\t\t\t\t$widget_title\n\t\t\t\t\t\t) . '</span>';\n\n\t\t\t\t\t\techo '<button type=\"button\" class=\"handlediv\" aria-expanded=\"true\">';\n\t\t\t\t\t\techo '<span class=\"screen-reader-text\">' . sprintf(\n\t\t\t\t\t\t\t/* translators: %s: Hidden accessibility text. Meta box title. */\n\t\t\t\t\t\t\t__( 'Toggle panel: %s' ),\n\t\t\t\t\t\t\t$widget_title\n\t\t\t\t\t\t) . '</span>';\n\t\t\t\t\t\techo '<span class=\"toggle-indicator\" aria-hidden=\"true\"></span>';\n\t\t\t\t\t\techo '</button>';\n\n\t\t\t\t\t\techo '</div>';\n\t\t\t\t\t}\n\t\t\t\t\techo '</div>';\n\n\t\t\t\t\techo '<div class=\"inside\">' . \"\\n\";\n\n\t\t\t\t\tif ( WP_DEBUG && ! $block_compatible && 'edit' === $screen->parent_base && ! $screen->is_block_editor() && ! isset( $_GET['meta-box-loader'] ) ) {\n\t\t\t\t\t\t$plugin = _get_plugin_from_callback( $box['callback'] );\n\t\t\t\t\t\tif ( $plugin ) {\n\t\t\t\t\t\t\t$meta_box_not_compatible_message = sprintf(\n\t\t\t\t\t\t\t\t/* translators: %s: The name of the plugin that generated this meta box. */\n\t\t\t\t\t\t\t\t__( 'This meta box, from the %s plugin, is not compatible with the block editor.' ),\n\t\t\t\t\t\t\t\t\"<strong>{$plugin['Name']}</strong>\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\twp_admin_notice(\n\t\t\t\t\t\t\t\t$meta_box_not_compatible_message,\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'additional_classes' => array( 'error', 'inline' ),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcall_user_func( $box['callback'], $data_object, $box );\n\t\t\t\t\techo \"</div>\\n\";\n\t\t\t\t\techo \"</div>\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\techo '</div>';\n\n\treturn $i;\n}\n\n/**\n * Removes a meta box from one or more screens.\n *\n * @since 2.6.0\n * @since 4.4.0 The `$screen` parameter now accepts an array of screen IDs.\n *\n * @global array $wp_meta_boxes Global meta box state.\n *\n * @param string                 $id      Meta box ID (used in the 'id' attribute for the meta box).\n * @param string|array|WP_Screen $screen  The screen or screens on which the meta box is shown (such as a\n *                                        post type, 'link', or 'comment'). Accepts a single screen ID,\n *                                        WP_Screen object, or array of screen IDs.\n * @param string                 $context The context within the screen where the box is set to display.\n *                                        Contexts vary from screen to screen. Post edit screen contexts\n *                                        include 'normal', 'side', and 'advanced'. Comments screen contexts\n *                                        include 'normal' and 'side'. Menus meta boxes (accordion sections)\n *                                        all use the 'side' context.\n */\nfunction remove_meta_box( $id, $screen, $context ) {\n\tglobal $wp_meta_boxes;\n\n\tif ( empty( $screen ) ) {\n\t\t$screen = get_current_screen();\n\t} elseif ( is_string( $screen ) ) {\n\t\t$screen = convert_to_screen( $screen );\n\t} elseif ( is_array( $screen ) ) {\n\t\tforeach ( $screen as $single_screen ) {\n\t\t\tremove_meta_box( $id, $single_screen, $context );\n\t\t}\n\t}\n\n\tif ( ! isset( $screen->id ) ) {\n\t\treturn;\n\t}\n\n\t$page = $screen->id;\n\n\tif ( ! isset( $wp_meta_boxes ) ) {\n\t\t$wp_meta_boxes = array();\n\t}\n\tif ( ! isset( $wp_meta_boxes[ $page ] ) ) {\n\t\t$wp_meta_boxes[ $page ] = array();\n\t}\n\tif ( ! isset( $wp_meta_boxes[ $page ][ $context ] ) ) {\n\t\t$wp_meta_boxes[ $page ][ $context ] = array();\n\t}\n\n\tforeach ( array( 'high', 'core', 'default', 'low' ) as $priority ) {\n\t\t$wp_meta_boxes[ $page ][ $context ][ $priority ][ $id ] = false;\n\t}\n}\n\n/**\n * Meta Box Accordion Template Function.\n *\n * Largely made up of abstracted code from do_meta_boxes(), this\n * function serves to build meta boxes as list items for display as\n * a collapsible accordion.\n *\n * @since 3.6.0\n *\n * @uses global $wp_meta_boxes Used to retrieve registered meta boxes.\n *\n * @param string|object $screen      The screen identifier.\n * @param string        $context     The screen context for which to display accordion sections.\n * @param mixed         $data_object Gets passed to the section callback function as the first parameter.\n * @return int Number of meta boxes as accordion sections.\n */\nfunction do_accordion_sections( $screen, $context, $data_object ) {\n\tglobal $wp_meta_boxes;\n\n\twp_enqueue_script( 'accordion' );\n\n\tif ( empty( $screen ) ) {\n\t\t$screen = get_current_screen();\n\t} elseif ( is_string( $screen ) ) {\n\t\t$screen = convert_to_screen( $screen );\n\t}\n\n\t$page = $screen->id;\n\n\t$hidden = get_hidden_meta_boxes( $screen );\n\t?>\n\t<div id=\"side-sortables\" class=\"accordion-container\">\n\t\t<ul class=\"outer-border\">\n\t<?php\n\t$i          = 0;\n\t$first_open = false;\n\n\tif ( isset( $wp_meta_boxes[ $page ][ $context ] ) ) {\n\t\tforeach ( array( 'high', 'core', 'default', 'low' ) as $priority ) {\n\t\t\tif ( isset( $wp_meta_boxes[ $page ][ $context ][ $priority ] ) ) {\n\t\t\t\tforeach ( $wp_meta_boxes[ $page ][ $context ][ $priority ] as $box ) {\n\t\t\t\t\tif ( false === $box || ! $box['title'] ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t++$i;\n\t\t\t\t\t$hidden_class = in_array( $box['id'], $hidden, true ) ? 'hide-if-js' : '';\n\n\t\t\t\t\t$open_class    = '';\n\t\t\t\t\t$aria_expanded = 'false';\n\t\t\t\t\tif ( ! $first_open && empty( $hidden_class ) ) {\n\t\t\t\t\t\t$first_open    = true;\n\t\t\t\t\t\t$open_class    = 'open';\n\t\t\t\t\t\t$aria_expanded = 'true';\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t\t<li class=\"control-section accordion-section <?php echo $hidden_class; ?> <?php echo $open_class; ?> <?php echo esc_attr( $box['id'] ); ?>\" id=\"<?php echo esc_attr( $box['id'] ); ?>\">\n\t\t\t\t\t\t<h3 class=\"accordion-section-title hndle\">\n\t\t\t\t\t\t\t<button type=\"button\" class=\"accordion-trigger\" aria-expanded=\"<?php echo $aria_expanded; ?>\" aria-controls=\"<?php echo esc_attr( $box['id'] ); ?>-content\">\n\t\t\t\t\t\t\t\t<span class=\"accordion-title\">\n\t\t\t\t\t\t\t\t\t<?php echo esc_html( $box['title'] ); ?>\n\t\t\t\t\t\t\t\t\t<span class=\"dashicons dashicons-arrow-down\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<div class=\"accordion-section-content <?php postbox_classes( $box['id'], $page ); ?>\" id=\"<?php echo esc_attr( $box['id'] ); ?>-content\">\n\t\t\t\t\t\t\t<div class=\"inside\">\n\t\t\t\t\t\t\t\t<?php call_user_func( $box['callback'], $data_object, $box ); ?>\n\t\t\t\t\t\t\t</div><!-- .inside -->\n\t\t\t\t\t\t</div><!-- .accordion-section-content -->\n\t\t\t\t\t</li><!-- .accordion-section -->\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t?>\n\t\t</ul><!-- .outer-border -->\n\t</div><!-- .accordion-container -->\n\t<?php\n\treturn $i;\n}\n\n/**\n * Adds a new section to a settings page.\n *\n * Part of the Settings API. Use this to define new settings sections for an admin page.\n * Show settings sections in your admin page callback function with do_settings_sections().\n * Add settings fields to your section with add_settings_field().\n *\n * The $callback argument should be the name of a function that echoes out any\n * content you want to show at the top of the settings section before the actual\n * fields. It can output nothing if you want.\n *\n * @since 2.7.0\n * @since 6.1.0 Added an `$args` parameter for the section's HTML wrapper and class name.\n *\n * @global array $wp_settings_sections Storage array of all settings sections added to admin pages.\n *\n * @param string   $id       Slug-name to identify the section. Used in the 'id' attribute of tags.\n * @param string   $title    Formatted title of the section. Shown as the heading for the section.\n * @param callable $callback Function that echos out any content at the top of the section (between heading and fields).\n * @param string   $page     The slug-name of the settings page on which to show the section. Built-in pages include\n *                           'general', 'reading', 'writing', 'discussion', 'media', etc. Create your own using\n *                           add_options_page();\n * @param array    $args     {\n *     Arguments used to create the settings section.\n *\n *     @type string $before_section HTML content to prepend to the section's HTML output.\n *                                  Receives the section's class name as `%s`. Default empty.\n *     @type string $after_section  HTML content to append to the section's HTML output. Default empty.\n *     @type string $section_class  The class name to use for the section. Default empty.\n * }\n */\nfunction add_settings_section( $id, $title, $callback, $page, $args = array() ) {\n\tglobal $wp_settings_sections;\n\n\t$defaults = array(\n\t\t'id'             => $id,\n\t\t'title'          => $title,\n\t\t'callback'       => $callback,\n\t\t'before_section' => '',\n\t\t'after_section'  => '',\n\t\t'section_class'  => '',\n\t);\n\n\t$section = wp_parse_args( $args, $defaults );\n\n\tif ( 'misc' === $page ) {\n\t\t_deprecated_argument(\n\t\t\t__FUNCTION__,\n\t\t\t'3.0.0',\n\t\t\tsprintf(\n\t\t\t\t/* translators: %s: misc */\n\t\t\t\t__( 'The \"%s\" options group has been removed. Use another settings group.' ),\n\t\t\t\t'misc'\n\t\t\t)\n\t\t);\n\t\t$page = 'general';\n\t}\n\n\tif ( 'privacy' === $page ) {\n\t\t_deprecated_argument(\n\t\t\t__FUNCTION__,\n\t\t\t'3.5.0',\n\t\t\tsprintf(\n\t\t\t\t/* translators: %s: privacy */\n\t\t\t\t__( 'The \"%s\" options group has been removed. Use another settings group.' ),\n\t\t\t\t'privacy'\n\t\t\t)\n\t\t);\n\t\t$page = 'reading';\n\t}\n\n\t$wp_settings_sections[ $page ][ $id ] = $section;\n}\n\n/**\n * Adds a new field to a section of a settings page.\n *\n * Part of the Settings API. Use this to define a settings field that will show\n * as part of a settings section inside a settings page. The fields are shown using\n * do_settings_fields() in do_settings_sections().\n *\n * The $callback argument should be the name of a function that echoes out the\n * HTML input tags for this setting field. Use get_option() to retrieve existing\n * values to show.\n *\n * @since 2.7.0\n * @since 4.2.0 The `$class` argument was added.\n *\n * @global array $wp_settings_fields Storage array of settings fields and info about their pages/sections.\n *\n * @param string   $id       Slug-name to identify the field. Used in the 'id' attribute of tags.\n * @param string   $title    Formatted title of the field. Shown as the label for the field\n *                           during output.\n * @param callable $callback Function that fills the field with the desired form inputs. The\n *                           function should echo its output.\n * @param string   $page     The slug-name of the settings page on which to show the section\n *                           (general, reading, writing, ...).\n * @param string   $section  Optional. The slug-name of the section of the settings page\n *                           in which to show the box. Default 'default'.\n * @param array    $args {\n *     Optional. Extra arguments that get passed to the callback function.\n *\n *     @type string $label_for When supplied, the setting title will be wrapped\n *                             in a `<label>` element, its `for` attribute populated\n *                             with this value.\n *     @type string $class     CSS Class to be added to the `<tr>` element when the\n *                             field is output.\n * }\n */\nfunction add_settings_field( $id, $title, $callback, $page, $section = 'default', $args = array() ) {\n\tglobal $wp_settings_fields;\n\n\tif ( 'misc' === $page ) {\n\t\t_deprecated_argument(\n\t\t\t__FUNCTION__,\n\t\t\t'3.0.0',\n\t\t\tsprintf(\n\t\t\t\t/* translators: %s: misc */\n\t\t\t\t__( 'The \"%s\" options group has been removed. Use another settings group.' ),\n\t\t\t\t'misc'\n\t\t\t)\n\t\t);\n\t\t$page = 'general';\n\t}\n\n\tif ( 'privacy' === $page ) {\n\t\t_deprecated_argument(\n\t\t\t__FUNCTION__,\n\t\t\t'3.5.0',\n\t\t\tsprintf(\n\t\t\t\t/* translators: %s: privacy */\n\t\t\t\t__( 'The \"%s\" options group has been removed. Use another settings group.' ),\n\t\t\t\t'privacy'\n\t\t\t)\n\t\t);\n\t\t$page = 'reading';\n\t}\n\n\t$wp_settings_fields[ $page ][ $section ][ $id ] = array(\n\t\t'id'       => $id,\n\t\t'title'    => $title,\n\t\t'callback' => $callback,\n\t\t'args'     => $args,\n\t);\n}\n\n/**\n * Prints out all settings sections added to a particular settings page.\n *\n * Part of the Settings API. Use this in a settings page callback function\n * to output all the sections and fields that were added to that $page with\n * add_settings_section() and add_settings_field()\n *\n * @global array $wp_settings_sections Storage array of all settings sections added to admin pages.\n * @global array $wp_settings_fields Storage array of settings fields and info about their pages/sections.\n * @since 2.7.0\n *\n * @param string $page The slug name of the page whose settings sections you want to output.\n */\nfunction do_settings_sections( $page ) {\n\tglobal $wp_settings_sections, $wp_settings_fields;\n\n\tif ( ! isset( $wp_settings_sections[ $page ] ) ) {\n\t\treturn;\n\t}\n\n\tforeach ( (array) $wp_settings_sections[ $page ] as $section ) {\n\t\tif ( '' !== $section['before_section'] ) {\n\t\t\tif ( '' !== $section['section_class'] ) {\n\t\t\t\techo wp_kses_post( sprintf( $section['before_section'], esc_attr( $section['section_class'] ) ) );\n\t\t\t} else {\n\t\t\t\techo wp_kses_post( $section['before_section'] );\n\t\t\t}\n\t\t}\n\n\t\tif ( $section['title'] ) {\n\t\t\techo \"<h2>{$section['title']}</h2>\\n\";\n\t\t}\n\n\t\tif ( $section['callback'] ) {\n\t\t\tcall_user_func( $section['callback'], $section );\n\t\t}\n\n\t\tif ( isset( $wp_settings_fields[ $page ][ $section['id'] ] ) ) {\n\t\t\techo '<table class=\"form-table\" role=\"presentation\">';\n\t\t\tdo_settings_fields( $page, $section['id'] );\n\t\t\techo '</table>';\n\t\t}\n\n\t\tif ( '' !== $section['after_section'] ) {\n\t\t\techo wp_kses_post( $section['after_section'] );\n\t\t}\n\t}\n}\n\n/**\n * Prints out the settings fields for a particular settings section.\n *\n * Part of the Settings API. Use this in a settings page to output\n * a specific section. Should normally be called by do_settings_sections()\n * rather than directly.\n *\n * @global array $wp_settings_fields Storage array of settings fields and their pages/sections.\n *\n * @since 2.7.0\n *\n * @param string $page Slug title of the admin page whose settings fields you want to show.\n * @param string $section Slug title of the settings section whose fields you want to show.\n */\nfunction do_settings_fields( $page, $section ) {\n\tglobal $wp_settings_fields;\n\n\tif ( ! isset( $wp_settings_fields[ $page ][ $section ] ) ) {\n\t\treturn;\n\t}\n\n\tforeach ( (array) $wp_settings_fields[ $page ][ $section ] as $field ) {\n\t\t$class = '';\n\n\t\tif ( ! empty( $field['args']['class'] ) ) {\n\t\t\t$class = ' class=\"' . esc_attr( $field['args']['class'] ) . '\"';\n\t\t}\n\n\t\techo \"<tr{$class}>\";\n\n\t\tif ( ! empty( $field['args']['label_for'] ) ) {\n\t\t\techo '<th scope=\"row\"><label for=\"' . esc_attr( $field['args']['label_for'] ) . '\">' . $field['title'] . '</label></th>';\n\t\t} else {\n\t\t\techo '<th scope=\"row\">' . $field['title'] . '</th>';\n\t\t}\n\n\t\techo '<td>';\n\t\tcall_user_func( $field['callback'], $field['args'] );\n\t\techo '</td>';\n\t\techo '</tr>';\n\t}\n}\n\n/**\n * Registers a settings error to be displayed to the user.\n *\n * Part of the Settings API. Use this to show messages to users about settings validation\n * problems, missing settings or anything else.\n *\n * Settings errors should be added inside the $sanitize_callback function defined in\n * register_setting() for a given setting to give feedback about the submission.\n *\n * By default messages will show immediately after the submission that generated the error.\n * Additional calls to settings_errors() can be used to show errors even when the settings\n * page is first accessed.\n *\n * @since 3.0.0\n * @since 5.3.0 Added `warning` and `info` as possible values for `$type`.\n *\n * @global array[] $wp_settings_errors Storage array of errors registered during this pageload\n *\n * @param string $setting Slug title of the setting to which this error applies.\n * @param string $code    Slug-name to identify the error. Used as part of 'id' attribute in HTML output.\n * @param string $message The formatted message text to display to the user (will be shown inside styled\n *                        `<div>` and `<p>` tags).\n * @param string $type    Optional. Message type, controls HTML class. Possible values include 'error',\n *                        'success', 'warning', 'info'. Default 'error'.\n */\nfunction add_settings_error( $setting, $code, $message, $type = 'error' ) {\n\tglobal $wp_settings_errors;\n\n\t$wp_settings_errors[] = array(\n\t\t'setting' => $setting,\n\t\t'code'    => $code,\n\t\t'message' => $message,\n\t\t'type'    => $type,\n\t);\n}\n\n/**\n * Fetches settings errors registered by add_settings_error().\n *\n * Checks the $wp_settings_errors array for any errors declared during the current\n * pageload and returns them.\n *\n * If changes were just submitted ($_GET['settings-updated']) and settings errors were saved\n * to the 'settings_errors' transient then those errors will be returned instead. This\n * is used to pass errors back across pageloads.\n *\n * Use the $sanitize argument to manually re-sanitize the option before returning errors.\n * This is useful if you have errors or notices you want to show even when the user\n * hasn't submitted data (i.e. when they first load an options page, or in the {@see 'admin_notices'}\n * action hook).\n *\n * @since 3.0.0\n *\n * @global array[] $wp_settings_errors Storage array of errors registered during this pageload\n *\n * @param string $setting  Optional. Slug title of a specific setting whose errors you want.\n * @param bool   $sanitize Optional. Whether to re-sanitize the setting value before returning errors.\n * @return array[] {\n *     Array of settings error arrays.\n *\n *     @type array ...$0 {\n *         Associative array of setting error data.\n *\n *         @type string $setting Slug title of the setting to which this error applies.\n *         @type string $code    Slug-name to identify the error. Used as part of 'id' attribute in HTML output.\n *         @type string $message The formatted message text to display to the user (will be shown inside styled\n *                               `<div>` and `<p>` tags).\n *         @type string $type    Optional. Message type, controls HTML class. Possible values include 'error',\n *                               'success', 'warning', 'info'. Default 'error'.\n *     }\n * }\n */\nfunction get_settings_errors( $setting = '', $sanitize = false ) {\n\tglobal $wp_settings_errors;\n\n\t/*\n\t * If $sanitize is true, manually re-run the sanitization for this option\n\t * This allows the $sanitize_callback from register_setting() to run, adding\n\t * any settings errors you want to show by default.\n\t */\n\tif ( $sanitize ) {\n\t\tsanitize_option( $setting, get_option( $setting ) );\n\t}\n\n\t// If settings were passed back from options.php then use them.\n\tif ( isset( $_GET['settings-updated'] ) && $_GET['settings-updated'] && get_transient( 'settings_errors' ) ) {\n\t\t$wp_settings_errors = array_merge( (array) $wp_settings_errors, get_transient( 'settings_errors' ) );\n\t\tdelete_transient( 'settings_errors' );\n\t}\n\n\t// Check global in case errors have been added on this pageload.\n\tif ( empty( $wp_settings_errors ) ) {\n\t\treturn array();\n\t}\n\n\t// Filter the results to those of a specific setting if one was set.\n\tif ( $setting ) {\n\t\t$setting_errors = array();\n\n\t\tforeach ( (array) $wp_settings_errors as $key => $details ) {\n\t\t\tif ( $setting === $details['setting'] ) {\n\t\t\t\t$setting_errors[] = $wp_settings_errors[ $key ];\n\t\t\t}\n\t\t}\n\n\t\treturn $setting_errors;\n\t}\n\n\treturn $wp_settings_errors;\n}\n\n/**\n * Displays settings errors registered by add_settings_error().\n *\n * Part of the Settings API. Outputs a div for each error retrieved by\n * get_settings_errors().\n *\n * This is called automatically after a settings page based on the\n * Settings API is submitted. Errors should be added during the validation\n * callback function for a setting defined in register_setting().\n *\n * The $sanitize option is passed into get_settings_errors() and will\n * re-run the setting sanitization\n * on its current value.\n *\n * The $hide_on_update option will cause errors to only show when the settings\n * page is first loaded. if the user has already saved new values it will be\n * hidden to avoid repeating messages already shown in the default error\n * reporting after submission. This is useful to show general errors like\n * missing settings when the user arrives at the settings page.\n *\n * @since 3.0.0\n * @since 5.3.0 Legacy `error` and `updated` CSS classes are mapped to\n *              `notice-error` and `notice-success`.\n *\n * @param string $setting        Optional slug title of a specific setting whose errors you want.\n * @param bool   $sanitize       Whether to re-sanitize the setting value before returning errors.\n * @param bool   $hide_on_update If set to true errors will not be shown if the settings page has\n *                               already been submitted.\n */\nfunction settings_errors( $setting = '', $sanitize = false, $hide_on_update = false ) {\n\n\tif ( $hide_on_update && ! empty( $_GET['settings-updated'] ) ) {\n\t\treturn;\n\t}\n\n\t$settings_errors = get_settings_errors( $setting, $sanitize );\n\n\tif ( empty( $settings_errors ) ) {\n\t\treturn;\n\t}\n\n\t$output = '';\n\n\tforeach ( $settings_errors as $key => $details ) {\n\t\tif ( 'updated' === $details['type'] ) {\n\t\t\t$details['type'] = 'success';\n\t\t}\n\n\t\tif ( in_array( $details['type'], array( 'error', 'success', 'warning', 'info' ), true ) ) {\n\t\t\t$details['type'] = 'notice-' . $details['type'];\n\t\t}\n\n\t\t$css_id    = sprintf(\n\t\t\t'setting-error-%s',\n\t\t\tesc_attr( $details['code'] )\n\t\t);\n\t\t$css_class = sprintf(\n\t\t\t'notice %s settings-error is-dismissible',\n\t\t\tesc_attr( $details['type'] )\n\t\t);\n\n\t\t$output .= \"<div id='$css_id' class='$css_class'> \\n\";\n\t\t$output .= \"<p><strong>{$details['message']}</strong></p>\";\n\t\t$output .= \"</div> \\n\";\n\t}\n\n\techo $output;\n}\n\n/**\n * Outputs the modal window used for attaching media to posts or pages in the media-listing screen.\n *\n * @since 2.7.0\n *\n * @param string $found_action Optional. The value of the 'found_action' input field. Default empty string.\n */\nfunction find_posts_div( $found_action = '' ) {\n\t?>\n\t<div id=\"find-posts\" class=\"find-box\" style=\"display: none;\">\n\t\t<div id=\"find-posts-head\" class=\"find-box-head\">\n\t\t\t<?php _e( 'Attach to existing content' ); ?>\n\t\t\t<button type=\"button\" id=\"find-posts-close\"><span class=\"screen-reader-text\">\n\t\t\t\t<?php\n\t\t\t\t/* translators: Hidden accessibility text. */\n\t\t\t\t_e( 'Close media attachment panel' );\n\t\t\t\t?>\n\t\t\t</span></button>\n\t\t</div>\n\t\t<div class=\"find-box-inside\">\n\t\t\t<div class=\"find-box-search\">\n\t\t\t\t<?php if ( $found_action ) { ?>\n\t\t\t\t\t<input type=\"hidden\" name=\"found_action\" value=\"<?php echo esc_attr( $found_action ); ?>\" />\n\t\t\t\t<?php } ?>\n\t\t\t\t<input type=\"hidden\" name=\"affected\" id=\"affected\" value=\"\" />\n\t\t\t\t<?php wp_nonce_field( 'find-posts', '_ajax_nonce', false ); ?>\n\t\t\t\t<label class=\"screen-reader-text\" for=\"find-posts-input\">\n\t\t\t\t\t<?php\n\t\t\t\t\t/* translators: Hidden accessibility text. */\n\t\t\t\t\t_e( 'Search' );\n\t\t\t\t\t?>\n\t\t\t\t</label>\n\t\t\t\t<input type=\"text\" id=\"find-posts-input\" name=\"ps\" value=\"\" />\n\t\t\t\t<span class=\"spinner\"></span>\n\t\t\t\t<input type=\"button\" id=\"find-posts-search\" value=\"<?php esc_attr_e( 'Search' ); ?>\" class=\"button\" />\n\t\t\t\t<div class=\"clear\"></div>\n\t\t\t</div>\n\t\t\t<div id=\"find-posts-response\"></div>\n\t\t</div>\n\t\t<div class=\"find-box-buttons\">\n\t\t\t<?php submit_button( __( 'Select' ), 'primary alignright', 'find-posts-submit', false ); ?>\n\t\t\t<div class=\"clear\"></div>\n\t\t</div>\n\t</div>\n\t<?php\n}\n\n/**\n * Displays the post password.\n *\n * The password is passed through esc_attr() to ensure that it is safe for placing in an HTML attribute.\n *\n * @since 2.7.0\n */\nfunction the_post_password() {\n\t$post = get_post();\n\tif ( isset( $post->post_password ) ) {\n\t\techo esc_attr( $post->post_password );\n\t}\n}\n\n/**\n * Gets the post title.\n *\n * The post title is fetched and if it is blank then a default string is\n * returned.\n *\n * @since 2.7.0\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @return string The post title if set.\n */\nfunction _draft_or_post_title( $post = 0 ) {\n\t$title = get_the_title( $post );\n\tif ( empty( $title ) ) {\n\t\t$title = __( '(no title)' );\n\t}\n\treturn esc_html( $title );\n}\n\n/**\n * Displays the search query.\n *\n * A simple wrapper to display the \"s\" parameter in a `GET` URI. This function\n * should only be used when the_search_query() cannot.\n *\n * @since 2.7.0\n */\nfunction _admin_search_query() {\n\techo isset( $_REQUEST['s'] ) ? esc_attr( wp_unslash( $_REQUEST['s'] ) ) : '';\n}\n\n/**\n * Generic Iframe header for use with Thickbox.\n *\n * @since 2.7.0\n *\n * @global string    $hook_suffix\n * @global string    $admin_body_class\n * @global string    $body_id\n * @global WP_Locale $wp_locale        WordPress date and time locale object.\n *\n * @param string $title      Optional. Title of the Iframe page. Default empty.\n * @param bool   $deprecated Not used.\n */\nfunction iframe_header( $title = '', $deprecated = false ) {\n\tglobal $hook_suffix, $admin_body_class, $body_id, $wp_locale;\n\n\tshow_admin_bar( false );\n\n\t$admin_body_class = preg_replace( '/[^a-z0-9_-]+/i', '-', $hook_suffix );\n\n\t$current_screen = get_current_screen();\n\n\theader( 'Content-Type: ' . get_option( 'html_type' ) . '; charset=' . get_option( 'blog_charset' ) );\n\t_wp_admin_html_begin();\n\t?>\n<title><?php bloginfo( 'name' ); ?> &rsaquo; <?php echo $title; ?> &#8212; <?php _e( 'WordPress' ); ?></title>\n\t<?php\n\twp_enqueue_style( 'colors' );\n\t?>\n<script type=\"text/javascript\">\naddLoadEvent = function(func){if(typeof jQuery!=='undefined')jQuery(function(){func();});else if(typeof wpOnload!=='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};\nfunction tb_close(){var win=window.dialogArguments||opener||parent||top;win.tb_remove();}\nvar ajaxurl = '<?php echo esc_js( admin_url( 'admin-ajax.php', 'relative' ) ); ?>',\n\tpagenow = '<?php echo esc_js( $current_screen->id ); ?>',\n\ttypenow = '<?php echo esc_js( $current_screen->post_type ); ?>',\n\tadminpage = '<?php echo esc_js( $admin_body_class ); ?>',\n\tthousandsSeparator = '<?php echo esc_js( $wp_locale->number_format['thousands_sep'] ); ?>',\n\tdecimalPoint = '<?php echo esc_js( $wp_locale->number_format['decimal_point'] ); ?>',\n\tisRtl = <?php echo (int) is_rtl(); ?>;\n</script>\n\t<?php\n\t/** This action is documented in wp-admin/admin-header.php */\n\tdo_action( 'admin_enqueue_scripts', $hook_suffix );\n\n\t/** This action is documented in wp-admin/admin-header.php */\n\tdo_action( \"admin_print_styles-{$hook_suffix}\" );  // phpcs:ignore WordPress.NamingConventions.ValidHookName.UseUnderscores\n\n\t/** This action is documented in wp-admin/admin-header.php */\n\tdo_action( 'admin_print_styles' );\n\n\t/** This action is documented in wp-admin/admin-header.php */\n\tdo_action( \"admin_print_scripts-{$hook_suffix}\" ); // phpcs:ignore WordPress.NamingConventions.ValidHookName.UseUnderscores\n\n\t/** This action is documented in wp-admin/admin-header.php */\n\tdo_action( 'admin_print_scripts' );\n\n\t/** This action is documented in wp-admin/admin-header.php */\n\tdo_action( \"admin_head-{$hook_suffix}\" ); // phpcs:ignore WordPress.NamingConventions.ValidHookName.UseUnderscores\n\n\t/** This action is documented in wp-admin/admin-header.php */\n\tdo_action( 'admin_head' );\n\n\t$admin_body_class .= ' locale-' . sanitize_html_class( strtolower( str_replace( '_', '-', get_user_locale() ) ) );\n\n\tif ( is_rtl() ) {\n\t\t$admin_body_class .= ' rtl';\n\t}\n\n\t?>\n</head>\n\t<?php\n\t$admin_body_id = isset( $body_id ) ? 'id=\"' . $body_id . '\" ' : '';\n\n\t/** This filter is documented in wp-admin/admin-header.php */\n\t$admin_body_classes = apply_filters( 'admin_body_class', '' );\n\t$admin_body_classes = ltrim( $admin_body_classes . ' ' . $admin_body_class );\n\t?>\n<body <?php echo $admin_body_id; ?>class=\"wp-admin wp-core-ui no-js iframe <?php echo esc_attr( $admin_body_classes ); ?>\">\n<script type=\"text/javascript\">\n(function(){\nvar c = document.body.className;\nc = c.replace(/no-js/, 'js');\ndocument.body.className = c;\n})();\n</script>\n\t<?php\n}\n\n/**\n * Generic Iframe footer for use with Thickbox.\n *\n * @since 2.7.0\n */\nfunction iframe_footer() {\n\t/*\n\t * We're going to hide any footer output on iFrame pages,\n\t * but run the hooks anyway since they output JavaScript\n\t * or other needed content.\n\t */\n\n\t/**\n\t * @global string $hook_suffix\n\t */\n\tglobal $hook_suffix;\n\t?>\n\t<div class=\"hidden\">\n\t<?php\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_footer', $hook_suffix );\n\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( \"admin_print_footer_scripts-{$hook_suffix}\" ); // phpcs:ignore WordPress.NamingConventions.ValidHookName.UseUnderscores\n\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_print_footer_scripts' );\n\t?>\n\t</div>\n<script type=\"text/javascript\">if(typeof wpOnload==='function')wpOnload();</script>\n</body>\n</html>\n\t<?php\n}\n\n/**\n * Echoes or returns the post states as HTML.\n *\n * @since 2.7.0\n * @since 5.3.0 Added the `$display` parameter and a return value.\n *\n * @see get_post_states()\n *\n * @param WP_Post $post    The post to retrieve states for.\n * @param bool    $display Optional. Whether to display the post states as an HTML string.\n *                         Default true.\n * @return string Post states string.\n */\nfunction _post_states( $post, $display = true ) {\n\t$post_states        = get_post_states( $post );\n\t$post_states_string = '';\n\n\tif ( ! empty( $post_states ) ) {\n\t\t$state_count = count( $post_states );\n\n\t\t$i = 0;\n\n\t\t$post_states_string .= ' &mdash; ';\n\n\t\tforeach ( $post_states as $state ) {\n\t\t\t++$i;\n\n\t\t\t$separator = ( $i < $state_count ) ? ', ' : '';\n\n\t\t\t$post_states_string .= \"<span class='post-state'>{$state}{$separator}</span>\";\n\t\t}\n\t}\n\n\tif ( $display ) {\n\t\techo $post_states_string;\n\t}\n\n\treturn $post_states_string;\n}\n\n/**\n * Retrieves an array of post states from a post.\n *\n * @since 5.3.0\n *\n * @param WP_Post $post The post to retrieve states for.\n * @return string[] Array of post state labels keyed by their state.\n */\nfunction get_post_states( $post ) {\n\t$post_states = array();\n\n\tif ( isset( $_REQUEST['post_status'] ) ) {\n\t\t$post_status = $_REQUEST['post_status'];\n\t} else {\n\t\t$post_status = '';\n\t}\n\n\tif ( ! empty( $post->post_password ) ) {\n\t\t$post_states['protected'] = _x( 'Password protected', 'post status' );\n\t}\n\n\tif ( 'private' === $post->post_status && 'private' !== $post_status ) {\n\t\t$post_states['private'] = _x( 'Private', 'post status' );\n\t}\n\n\tif ( 'draft' === $post->post_status ) {\n\t\tif ( get_post_meta( $post->ID, '_customize_changeset_uuid', true ) ) {\n\t\t\t$post_states[] = __( 'Customization Draft' );\n\t\t} elseif ( 'draft' !== $post_status ) {\n\t\t\t$post_states['draft'] = _x( 'Draft', 'post status' );\n\t\t}\n\t} elseif ( 'trash' === $post->post_status && get_post_meta( $post->ID, '_customize_changeset_uuid', true ) ) {\n\t\t$post_states[] = _x( 'Customization Draft', 'post status' );\n\t}\n\n\tif ( 'pending' === $post->post_status && 'pending' !== $post_status ) {\n\t\t$post_states['pending'] = _x( 'Pending', 'post status' );\n\t}\n\n\tif ( is_sticky( $post->ID ) ) {\n\t\t$post_states['sticky'] = _x( 'Sticky', 'post status' );\n\t}\n\n\tif ( 'future' === $post->post_status ) {\n\t\t$post_states['scheduled'] = _x( 'Scheduled', 'post status' );\n\t}\n\n\tif ( 'page' === get_option( 'show_on_front' ) ) {\n\t\tif ( (int) get_option( 'page_on_front' ) === $post->ID ) {\n\t\t\t$post_states['page_on_front'] = _x( 'Front Page', 'page label' );\n\t\t}\n\n\t\tif ( (int) get_option( 'page_for_posts' ) === $post->ID ) {\n\t\t\t$post_states['page_for_posts'] = _x( 'Posts Page', 'page label' );\n\t\t}\n\t}\n\n\tif ( (int) get_option( 'wp_page_for_privacy_policy' ) === $post->ID ) {\n\t\t$post_states['page_for_privacy_policy'] = _x( 'Privacy Policy Page', 'page label' );\n\t}\n\n\t/**\n\t * Filters the default post display states used in the posts list table.\n\t *\n\t * @since 2.8.0\n\t * @since 3.6.0 Added the `$post` parameter.\n\t * @since 5.5.0 Also applied in the Customizer context. If any admin functions\n\t *              are used within the filter, their existence should be checked\n\t *              with `function_exists()` before being used.\n\t *\n\t * @param string[] $post_states An array of post display states.\n\t * @param WP_Post  $post        The current post object.\n\t */\n\treturn apply_filters( 'display_post_states', $post_states, $post );\n}\n\n/**\n * Outputs the attachment media states as HTML.\n *\n * @since 3.2.0\n * @since 5.6.0 Added the `$display` parameter and a return value.\n *\n * @param WP_Post $post    The attachment post to retrieve states for.\n * @param bool    $display Optional. Whether to display the post states as an HTML string.\n *                         Default true.\n * @return string Media states string.\n */\nfunction _media_states( $post, $display = true ) {\n\t$media_states        = get_media_states( $post );\n\t$media_states_string = '';\n\n\tif ( ! empty( $media_states ) ) {\n\t\t$state_count = count( $media_states );\n\n\t\t$i = 0;\n\n\t\t$media_states_string .= ' &mdash; ';\n\n\t\tforeach ( $media_states as $state ) {\n\t\t\t++$i;\n\n\t\t\t$separator = ( $i < $state_count ) ? ', ' : '';\n\n\t\t\t$media_states_string .= \"<span class='post-state'>{$state}{$separator}</span>\";\n\t\t}\n\t}\n\n\tif ( $display ) {\n\t\techo $media_states_string;\n\t}\n\n\treturn $media_states_string;\n}\n\n/**\n * Retrieves an array of media states from an attachment.\n *\n * @since 5.6.0\n *\n * @param WP_Post $post The attachment to retrieve states for.\n * @return string[] Array of media state labels keyed by their state.\n */\nfunction get_media_states( $post ) {\n\tstatic $header_images;\n\n\t$media_states = array();\n\t$stylesheet   = get_option( 'stylesheet' );\n\n\tif ( current_theme_supports( 'custom-header' ) ) {\n\t\t$meta_header = get_post_meta( $post->ID, '_wp_attachment_is_custom_header', true );\n\n\t\tif ( is_random_header_image() ) {\n\t\t\tif ( ! isset( $header_images ) ) {\n\t\t\t\t$header_images = wp_list_pluck( get_uploaded_header_images(), 'attachment_id' );\n\t\t\t}\n\n\t\t\tif ( $meta_header === $stylesheet && in_array( $post->ID, $header_images, true ) ) {\n\t\t\t\t$media_states[] = __( 'Header Image' );\n\t\t\t}\n\t\t} else {\n\t\t\t$header_image = get_header_image();\n\n\t\t\t// Display \"Header Image\" if the image was ever used as a header image.\n\t\t\tif ( ! empty( $meta_header ) && $meta_header === $stylesheet && wp_get_attachment_url( $post->ID ) !== $header_image ) {\n\t\t\t\t$media_states[] = __( 'Header Image' );\n\t\t\t}\n\n\t\t\t// Display \"Current Header Image\" if the image is currently the header image.\n\t\t\tif ( $header_image && wp_get_attachment_url( $post->ID ) === $header_image ) {\n\t\t\t\t$media_states[] = __( 'Current Header Image' );\n\t\t\t}\n\t\t}\n\n\t\tif ( get_theme_support( 'custom-header', 'video' ) && has_header_video() ) {\n\t\t\t$mods = get_theme_mods();\n\t\t\tif ( isset( $mods['header_video'] ) && $post->ID === $mods['header_video'] ) {\n\t\t\t\t$media_states[] = __( 'Current Header Video' );\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( current_theme_supports( 'custom-background' ) ) {\n\t\t$meta_background = get_post_meta( $post->ID, '_wp_attachment_is_custom_background', true );\n\n\t\tif ( ! empty( $meta_background ) && $meta_background === $stylesheet ) {\n\t\t\t$media_states[] = __( 'Background Image' );\n\n\t\t\t$background_image = get_background_image();\n\t\t\tif ( $background_image && wp_get_attachment_url( $post->ID ) === $background_image ) {\n\t\t\t\t$media_states[] = __( 'Current Background Image' );\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( (int) get_option( 'site_icon' ) === $post->ID ) {\n\t\t$media_states[] = __( 'Site Icon' );\n\t}\n\n\tif ( (int) get_theme_mod( 'custom_logo' ) === $post->ID ) {\n\t\t$media_states[] = __( 'Logo' );\n\t}\n\n\t/**\n\t * Filters the default media display states for items in the Media list table.\n\t *\n\t * @since 3.2.0\n\t * @since 4.8.0 Added the `$post` parameter.\n\t *\n\t * @param string[] $media_states An array of media states. Default 'Header Image',\n\t *                               'Background Image', 'Site Icon', 'Logo'.\n\t * @param WP_Post  $post         The current attachment object.\n\t */\n\treturn apply_filters( 'display_media_states', $media_states, $post );\n}\n\n/**\n * Tests support for compressing JavaScript from PHP.\n *\n * Outputs JavaScript that tests if compression from PHP works as expected\n * and sets an option with the result. Has no effect when the current user\n * is not an administrator. To run the test again the option 'can_compress_scripts'\n * has to be deleted.\n *\n * @since 2.8.0\n */\nfunction compression_test() {\n\t?>\n\t<script type=\"text/javascript\">\n\tvar compressionNonce = <?php echo wp_json_encode( wp_create_nonce( 'update_can_compress_scripts' ), JSON_HEX_TAG | JSON_UNESCAPED_SLASHES ); ?>;\n\tvar testCompression = {\n\t\tget : function(test) {\n\t\t\tvar x;\n\t\t\tif ( window.XMLHttpRequest ) {\n\t\t\t\tx = new XMLHttpRequest();\n\t\t\t} else {\n\t\t\t\ttry{x=new ActiveXObject('Msxml2.XMLHTTP');}catch(e){try{x=new ActiveXObject('Microsoft.XMLHTTP');}catch(e){};}\n\t\t\t}\n\n\t\t\tif (x) {\n\t\t\t\tx.onreadystatechange = function() {\n\t\t\t\t\tvar r, h;\n\t\t\t\t\tif ( x.readyState == 4 ) {\n\t\t\t\t\t\tr = x.responseText.substr(0, 18);\n\t\t\t\t\t\th = x.getResponseHeader('Content-Encoding');\n\t\t\t\t\t\ttestCompression.check(r, h, test);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tx.open('GET', ajaxurl + '?action=wp-compression-test&test='+test+'&_ajax_nonce='+compressionNonce+'&'+(new Date()).getTime(), true);\n\t\t\t\tx.send('');\n\t\t\t}\n\t\t},\n\n\t\tcheck : function(r, h, test) {\n\t\t\tif ( ! r && ! test )\n\t\t\t\tthis.get(1);\n\n\t\t\tif ( 1 == test ) {\n\t\t\t\tif ( h && ( h.match(/deflate/i) || h.match(/gzip/i) ) )\n\t\t\t\t\tthis.get('no');\n\t\t\t\telse\n\t\t\t\t\tthis.get(2);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( 2 == test ) {\n\t\t\t\tif ( '\"wpCompressionTest' === r )\n\t\t\t\t\tthis.get('yes');\n\t\t\t\telse\n\t\t\t\t\tthis.get('no');\n\t\t\t}\n\t\t}\n\t};\n\ttestCompression.check();\n\t</script>\n\t<?php\n}\n\n/**\n * Echoes a submit button, with provided text and appropriate class(es).\n *\n * @since 3.1.0\n *\n * @see get_submit_button()\n *\n * @param string       $text             Optional. The text of the button. Defaults to 'Save Changes'.\n * @param string       $type             Optional. The type and CSS class(es) of the button. Core values\n *                                       include 'primary', 'small', and 'large'. Default 'primary'.\n * @param string       $name             Optional. The HTML name of the submit button. If no `id` attribute\n *                                       is given in the `$other_attributes` parameter, `$name` will be used\n *                                       as the button's `id`. Default 'submit'.\n * @param bool         $wrap             Optional. True if the output button should be wrapped in a paragraph tag,\n *                                       false otherwise. Default true.\n * @param array|string $other_attributes Optional. Other attributes that should be output with the button,\n *                                       mapping attributes to their values, e.g. `array( 'id' => 'search-submit' )`.\n *                                       These key/value attribute pairs will be output as `attribute=\"value\"`,\n *                                       where attribute is the key. Attributes can also be provided as a string,\n *                                       e.g. `id=\"search-submit\"`, though the array format is generally preferred.\n *                                       Default empty string.\n */\nfunction submit_button( $text = '', $type = 'primary', $name = 'submit', $wrap = true, $other_attributes = '' ) {\n\techo get_submit_button( $text, $type, $name, $wrap, $other_attributes );\n}\n\n/**\n * Returns a submit button, with provided text and appropriate class.\n *\n * @since 3.1.0\n *\n * @param string       $text             Optional. The text of the button. Defaults to 'Save Changes'.\n * @param string       $type             Optional. The type and CSS class(es) of the button. Core values\n *                                       include 'primary', 'small', and 'large'. Default 'primary large'.\n * @param string       $name             Optional. The HTML name of the submit button. If no `id` attribute\n *                                       is given in the `$other_attributes` parameter, `$name` will be used\n *                                       as the button's `id`. Default 'submit'.\n * @param bool         $wrap             Optional. True if the output button should be wrapped in a paragraph tag,\n *                                       false otherwise. Default true.\n * @param array|string $other_attributes Optional. Other attributes that should be output with the button,\n *                                       mapping attributes to their values, e.g. `array( 'id' => 'search-submit' )`.\n *                                       These key/value attribute pairs will be output as `attribute=\"value\"`,\n *                                       where attribute is the key. Attributes can also be provided as a string,\n *                                       e.g. `id=\"search-submit\"`, though the array format is generally preferred.\n *                                       Default empty string.\n * @return string Submit button HTML.\n */\nfunction get_submit_button( $text = '', $type = 'primary large', $name = 'submit', $wrap = true, $other_attributes = '' ) {\n\tif ( ! is_array( $type ) ) {\n\t\t$type = explode( ' ', $type );\n\t}\n\n\t$button_shorthand = array( 'primary', 'small', 'large' );\n\t$classes          = array( 'button' );\n\n\tforeach ( $type as $t ) {\n\t\tif ( 'secondary' === $t || 'button-secondary' === $t ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t$classes[] = in_array( $t, $button_shorthand, true ) ? 'button-' . $t : $t;\n\t}\n\n\t// Remove empty items, remove duplicate items, and finally build a string.\n\t$class = implode( ' ', array_unique( array_filter( $classes ) ) );\n\n\t$text = $text ? $text : __( 'Save Changes' );\n\n\t// Default the id attribute to $name unless an id was specifically provided in $other_attributes.\n\t$id = $name;\n\tif ( is_array( $other_attributes ) && isset( $other_attributes['id'] ) ) {\n\t\t$id = $other_attributes['id'];\n\t\tunset( $other_attributes['id'] );\n\t}\n\n\t$attributes = '';\n\tif ( is_array( $other_attributes ) ) {\n\t\tforeach ( $other_attributes as $attribute => $value ) {\n\t\t\t$attributes .= $attribute . '=\"' . esc_attr( $value ) . '\" '; // Trailing space is important.\n\t\t}\n\t} elseif ( ! empty( $other_attributes ) ) { // Attributes provided as a string.\n\t\t$attributes = $other_attributes;\n\t}\n\n\t// Don't output empty name and id attributes.\n\t$name_attr = $name ? ' name=\"' . esc_attr( $name ) . '\"' : '';\n\t$id_attr   = $id ? ' id=\"' . esc_attr( $id ) . '\"' : '';\n\n\t$button  = '<input type=\"submit\"' . $name_attr . $id_attr . ' class=\"' . esc_attr( $class );\n\t$button .= '\" value=\"' . esc_attr( $text ) . '\" ' . $attributes . ' />';\n\n\tif ( $wrap ) {\n\t\t$button = '<p class=\"submit\">' . $button . '</p>';\n\t}\n\n\treturn $button;\n}\n\n/**\n * Prints out the beginning of the admin HTML header.\n *\n * @since 3.3.0\n *\n * @global bool $is_IE\n */\nfunction _wp_admin_html_begin() {\n\tglobal $is_IE;\n\n\t$admin_html_class = ( is_admin_bar_showing() ) ? 'wp-toolbar' : '';\n\n\tif ( $is_IE ) {\n\t\theader( 'X-UA-Compatible: IE=edge' );\n\t}\n\n\t?>\n<!DOCTYPE html>\n<html class=\"<?php echo $admin_html_class; ?>\"\n\t<?php\n\t/**\n\t * Fires inside the HTML tag in the admin header.\n\t *\n\t * @since 2.2.0\n\t */\n\tdo_action( 'admin_xml_ns' );\n\n\tlanguage_attributes();\n\t?>\n>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"<?php bloginfo( 'html_type' ); ?>; charset=<?php echo get_option( 'blog_charset' ); ?>\" />\n\t<?php\n}\n\n/**\n * Converts a screen string to a screen object.\n *\n * @since 3.0.0\n *\n * @param string $hook_name The hook name (also known as the hook suffix) used to determine the screen.\n * @return WP_Screen Screen object.\n */\nfunction convert_to_screen( $hook_name ) {\n\tif ( ! class_exists( 'WP_Screen' ) ) {\n\t\t_doing_it_wrong(\n\t\t\t'convert_to_screen(), add_meta_box()',\n\t\t\tsprintf(\n\t\t\t\t/* translators: 1: wp-admin/includes/template.php, 2: add_meta_box(), 3: add_meta_boxes */\n\t\t\t\t__( 'Likely direct inclusion of %1$s in order to use %2$s. This is very wrong. Hook the %2$s call into the %3$s action instead.' ),\n\t\t\t\t'<code>wp-admin/includes/template.php</code>',\n\t\t\t\t'<code>add_meta_box()</code>',\n\t\t\t\t'<code>add_meta_boxes</code>'\n\t\t\t),\n\t\t\t'3.3.0'\n\t\t);\n\t\treturn (object) array(\n\t\t\t'id'   => '_invalid',\n\t\t\t'base' => '_are_belong_to_us',\n\t\t);\n\t}\n\n\treturn WP_Screen::get( $hook_name );\n}\n\n/**\n * Outputs the HTML for restoring the post data from DOM storage\n *\n * @since 3.6.0\n * @access private\n */\nfunction _local_storage_notice() {\n\t$local_storage_message  = '<p class=\"local-restore\">';\n\t$local_storage_message .= __( 'The backup of this post in your browser is different from the version below.' );\n\t$local_storage_message .= '<button type=\"button\" class=\"button restore-backup\">' . __( 'Restore the backup' ) . '</button></p>';\n\t$local_storage_message .= '<p class=\"help\">';\n\t$local_storage_message .= __( 'This will replace the current editor content with the last backup version. You can use undo and redo in the editor to get the old content back or to return to the restored version.' );\n\t$local_storage_message .= '</p>';\n\n\twp_admin_notice(\n\t\t$local_storage_message,\n\t\tarray(\n\t\t\t'id'                 => 'local-storage-notice',\n\t\t\t'additional_classes' => array( 'hidden' ),\n\t\t\t'dismissible'        => true,\n\t\t\t'paragraph_wrap'     => false,\n\t\t)\n\t);\n}\n\n/**\n * Outputs a HTML element with a star rating for a given rating.\n *\n * Outputs a HTML element with the star rating exposed on a 0..5 scale in\n * half star increments (ie. 1, 1.5, 2 stars). Optionally, if specified, the\n * number of ratings may also be displayed by passing the $number parameter.\n *\n * @since 3.8.0\n * @since 4.4.0 Introduced the `echo` parameter.\n *\n * @param array $args {\n *     Optional. Array of star ratings arguments.\n *\n *     @type int|float $rating The rating to display, expressed in either a 0.5 rating increment,\n *                             or percentage. Default 0.\n *     @type string    $type   Format that the $rating is in. Valid values are 'rating' (default),\n *                             or, 'percent'. Default 'rating'.\n *     @type int       $number The number of ratings that makes up this rating. Default 0.\n *     @type bool      $echo   Whether to echo the generated markup. False to return the markup instead\n *                             of echoing it. Default true.\n * }\n * @return string Star rating HTML.\n */\nfunction wp_star_rating( $args = array() ) {\n\t$defaults    = array(\n\t\t'rating' => 0,\n\t\t'type'   => 'rating',\n\t\t'number' => 0,\n\t\t'echo'   => true,\n\t);\n\t$parsed_args = wp_parse_args( $args, $defaults );\n\n\t// Non-English decimal places when the $rating is coming from a string.\n\t$rating = (float) str_replace( ',', '.', $parsed_args['rating'] );\n\n\t// Convert percentage to star rating, 0..5 in .5 increments.\n\tif ( 'percent' === $parsed_args['type'] ) {\n\t\t$rating = round( $rating / 10, 0 ) / 2;\n\t}\n\n\t// Calculate the number of each type of star needed.\n\t$full_stars  = floor( $rating );\n\t$half_stars  = ceil( $rating - $full_stars );\n\t$empty_stars = 5 - $full_stars - $half_stars;\n\n\tif ( $parsed_args['number'] ) {\n\t\t/* translators: Hidden accessibility text. 1: The rating, 2: The number of ratings. */\n\t\t$format = _n( '%1$s rating based on %2$s rating', '%1$s rating based on %2$s ratings', $parsed_args['number'] );\n\t\t$title  = sprintf( $format, number_format_i18n( $rating, 1 ), number_format_i18n( $parsed_args['number'] ) );\n\t} else {\n\t\t/* translators: Hidden accessibility text. %s: The rating. */\n\t\t$title = sprintf( __( '%s rating' ), number_format_i18n( $rating, 1 ) );\n\t}\n\n\t$output  = '<div class=\"star-rating\">';\n\t$output .= '<span class=\"screen-reader-text\">' . $title . '</span>';\n\t$output .= str_repeat( '<div class=\"star star-full\" aria-hidden=\"true\"></div>', $full_stars );\n\t$output .= str_repeat( '<div class=\"star star-half\" aria-hidden=\"true\"></div>', $half_stars );\n\t$output .= str_repeat( '<div class=\"star star-empty\" aria-hidden=\"true\"></div>', $empty_stars );\n\t$output .= '</div>';\n\n\tif ( $parsed_args['echo'] ) {\n\t\techo $output;\n\t}\n\n\treturn $output;\n}\n\n/**\n * Outputs a notice when editing the page for posts (internal use only).\n *\n * @ignore\n * @since 4.2.0\n */\nfunction _wp_posts_page_notice() {\n\twp_admin_notice(\n\t\t__( 'You are currently editing the page that shows your latest posts.' ),\n\t\tarray(\n\t\t\t'type'               => 'warning',\n\t\t\t'additional_classes' => array( 'inline' ),\n\t\t)\n\t);\n}\n\n/**\n * Outputs a notice when editing the page for posts in the block editor (internal use only).\n *\n * @ignore\n * @since 5.8.0\n */\nfunction _wp_block_editor_posts_page_notice() {\n\twp_add_inline_script(\n\t\t'wp-notices',\n\t\tsprintf(\n\t\t\t'wp.data.dispatch( \"core/notices\" ).createWarningNotice( \"%s\", { isDismissible: false } )',\n\t\t\t__( 'You are currently editing the page that shows your latest posts.' )\n\t\t),\n\t\t'after'\n\t);\n}\n", "patch": "@@ -1789,6 +1789,7 @@ function _media_states( $post ) {\n function compression_test() {\n ?>\n \t<script type=\"text/javascript\">\n+\tvar compressionNonce = <?php echo wp_json_encode( wp_create_nonce( 'update_can_compress_scripts' ) ); ?>;\n \tvar testCompression = {\n \t\tget : function(test) {\n \t\t\tvar x;\n@@ -1808,7 +1809,7 @@ function compression_test() {\n \t\t\t\t\t}\n \t\t\t\t};\n \n-\t\t\t\tx.open('GET', ajaxurl + '?action=wp-compression-test&test='+test+'&'+(new Date()).getTime(), true);\n+\t\t\t\tx.open('GET', ajaxurl + '?action=wp-compression-test&test='+test+'&_ajax_nonce='+compressionNonce+'&'+(new Date()).getTime(), true);\n \t\t\t\tx.send('');\n \t\t\t}\n \t\t},", "file_path": "files/2016_8\\43", "file_language": "php", "file_name": "wp-admin/includes/template.php", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/WordPress/WordPress/raw/9b7a7754133c50b82bd9d976fb5b24094f658aab/wp-includes/version.php", "code": "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.5-RC1-37143';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 36686;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4308-20160323';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n", "code_before": "<?php\n/**\n * WordPress Version\n *\n * Contains version information for the current WordPress release.\n *\n * @package WordPress\n * @since 1.2.0\n */\n\n/**\n * The WordPress version string.\n *\n * Holds the current version number for WordPress core. Used to bust caches\n * and to enable development mode for scripts when running from the /src directory.\n *\n * @global string $wp_version\n */\n$wp_version = '6.9-alpha-60923';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 60717;\n\n/**\n * Holds the TinyMCE version.\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '49110-20250317';\n\n/**\n * Holds the minimum required PHP version.\n *\n * @global string $required_php_version\n */\n$required_php_version = '7.2.24';\n\n/**\n * Holds the names of required PHP extensions.\n *\n * @global string[] $required_php_extensions\n */\n$required_php_extensions = array(\n\t'json',\n\t'hash',\n);\n\n/**\n * Holds the minimum required MySQL version.\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.5.5';\n", "patch": "@@ -4,7 +4,7 @@\n  *\n  * @global string $wp_version\n  */\n-$wp_version = '4.5-RC1-37135';\n+$wp_version = '4.5-RC1-37143';\n \n /**\n  * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.", "file_path": "files/2016_8\\44", "file_language": "php", "file_name": "wp-includes/version.php", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}], "outdated": 0}
