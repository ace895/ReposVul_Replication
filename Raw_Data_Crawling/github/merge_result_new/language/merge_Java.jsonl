{"index": 48, "cve_id": "CVE-2016-0782", "cwe_id": ["CWE-79"], "cve_language": "Java", "cve_description": "The administration web console in Apache ActiveMQ 5.x before 5.11.4, 5.12.x before 5.12.3, and 5.13.x before 5.13.2 allows remote authenticated users to conduct cross-site scripting (XSS) attacks and consequently obtain sensitive information from a Java memory dump via vectors related to creating a queue.", "cvss": "5.4", "publish_date": "August 5, 2016", "AV": "NETWORK", "AC": "LOW", "PR": "LOW", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "0c9fdb5b4180c1ae800bbc8bae7a2c0620f6749b", "commit_message": "Turn off jolokia discovery by default.", "commit_date": "2016-02-17T07:48:09Z", "project": "apache/activemq", "url": "https://api.github.com/repos/apache/activemq/commits/0c9fdb5b4180c1ae800bbc8bae7a2c0620f6749b", "html_url": "https://github.com/apache/activemq/commit/0c9fdb5b4180c1ae800bbc8bae7a2c0620f6749b", "windows_before": "", "windows_after": "", "parents": [{"commit_id_before": "2061186a0a2486aebf26c4ceb8126933ed01826e", "url_before": "https://api.github.com/repos/apache/activemq/commits/2061186a0a2486aebf26c4ceb8126933ed01826e", "html_url_before": "https://github.com/apache/activemq/commit/2061186a0a2486aebf26c4ceb8126933ed01826e"}], "details": [{"raw_url": "https://github.com/apache/activemq/raw/0c9fdb5b4180c1ae800bbc8bae7a2c0620f6749b/assembly/src/release/webapps/api/WEB-INF/web.xml", "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n    Licensed to the Apache Software Foundation (ASF) under one or more\n    contributor license agreements.  See the NOTICE file distributed with\n    this work for additional information regarding copyright ownership.\n    The ASF licenses this file to You under the Apache License, Version 2.0\n    (the \"License\"); you may not use this file except in compliance with\n    the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n-->\n<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n      version=\"3.0\"> \n\n    <display-name>Apache ActiveMQ REST API</display-name>\n\n    <servlet>\n        <servlet-name>MessageServlet</servlet-name>\n        <servlet-class>org.apache.activemq.web.MessageServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n        <async-supported>true</async-supported>\n        <!--\n        Uncomment this parameter if you plan to use multiple consumers over REST\n        <init-param>\n                <param-name>destinationOptions</param-name>\n                <param-value>consumer.prefetchSize=1</param-value>\n        </init-param>\n        -->\n    </servlet>\n\n    <servlet>\n        <servlet-name>jolokia-agent</servlet-name>\n        <servlet-class>org.jolokia.http.AgentServlet</servlet-class>\n        <!-- Uncomment this if you want jolokia multicast discovery to be enabled         \n        <init-param>\n          <param-name>discoveryEnabled</param-name>\n          <param-value>true</param-value>\n        </init-param>      \n        <init-param>\n          <param-name>discoveryAgentUrl</param-name>\n          <param-value>http://${host}:8161/api/jolokia</param-value>\n        </init-param>\n        <init-param>\n          <param-name>agentDescription</param-name>\n          <param-value>Apache ActiveMQ</param-value>\n        </init-param>\n        -->\n        <!-- turn off returning exceptions and stacktraces from jolokia -->\n        <init-param>\n          <param-name>allowErrorDetails</param-name>\n          <param-value>false</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup> \n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>MessageServlet</servlet-name>\n        <url-pattern>/message/*</url-pattern>\n    </servlet-mapping>\n\n    <servlet-mapping>\n        <servlet-name>jolokia-agent</servlet-name>\n        <url-pattern>/jolokia/*</url-pattern>\n    </servlet-mapping>\n\n</web-app>", "code_before": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n    Licensed to the Apache Software Foundation (ASF) under one or more\n    contributor license agreements.  See the NOTICE file distributed with\n    this work for additional information regarding copyright ownership.\n    The ASF licenses this file to You under the Apache License, Version 2.0\n    (the \"License\"); you may not use this file except in compliance with\n    the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n-->\n<web-app xmlns=\"https://jakarta.ee/xml/ns/jakartaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd\"\n         version=\"5.0\">\n\n    <display-name>Apache ActiveMQ REST API</display-name>\n\n    <servlet>\n        <servlet-name>MessageServlet</servlet-name>\n        <servlet-class>org.apache.activemq.web.MessageServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n        <async-supported>true</async-supported>\n        <!--\n        Uncomment this parameter if you plan to use multiple consumers over REST\n        <init-param>\n                <param-name>destinationOptions</param-name>\n                <param-value>consumer.prefetchSize=1</param-value>\n        </init-param>\n        -->\n        <!--\n        Uncomment this parameter if you plan to change the default max size of a message over REST. By default, it is set\n        to 100,000. Set it to -1 to disable the limitation but be aware that your AMQ instance could run out of memory if\n        the message is too big. See https://issues.apache.org/jira/browse/AMQ-8029 for more details.\n        <init-param>\n            <param-name>maxMessageSize</param-name>\n            <param-value>-1</param-value>\n        </init-param>\n        -->\n    </servlet>\n\n    <!-- AMQ-9239 jakarta - jolokia does not support jakarta\n    <servlet>\n        <servlet-name>jolokia-agent</servlet-name>\n        <servlet-class>org.jolokia.http.AgentServlet</servlet-class>\n    -->\n        <!-- Uncomment this if you want jolokia multicast discovery to be enabled         \n        <init-param>\n          <param-name>discoveryEnabled</param-name>\n          <param-value>true</param-value>\n        </init-param>      \n        <init-param>\n          <param-name>discoveryAgentUrl</param-name>\n          <param-value>http://${host}:8161/api/jolokia</param-value>\n        </init-param>\n        <init-param>\n          <param-name>agentDescription</param-name>\n          <param-value>Apache ActiveMQ</param-value>\n        </init-param>\n        -->\n    <!-- AMQ-9239 jakarta - jolokia does not support jakarta\n        <init-param>\n            <param-name>policyLocation</param-name>\n            <param-value>${prop:jolokia.conf}</param-value>\n        </init-param>\n    -->\n        <!-- turn off returning exceptions and stacktraces from jolokia -->\n    <!-- AMQ-9239 jakarta - jolokia does not support jakarta\n        <init-param>\n          <param-name>allowErrorDetails</param-name>\n          <param-value>false</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup> \n    </servlet>\n    -->\n\n    <servlet-mapping>\n        <servlet-name>MessageServlet</servlet-name>\n        <url-pattern>/message/*</url-pattern>\n    </servlet-mapping>\n\n    <!-- AMQ-9239 jakarta - jolokia does not support jakarta\n    <servlet-mapping>\n        <servlet-name>jolokia-agent</servlet-name>\n        <url-pattern>/jolokia/*</url-pattern>\n    </servlet-mapping>\n    -->\n\n    <session-config>\n        <cookie-config>\n            <http-only>true</http-only>\n        </cookie-config>\n    </session-config>\n\n</web-app>\n", "patch": "@@ -38,10 +38,11 @@\n \n     <servlet>\n         <servlet-name>jolokia-agent</servlet-name>\n-        <servlet-class>org.jolokia.http.AgentServlet</servlet-class>        \n+        <servlet-class>org.jolokia.http.AgentServlet</servlet-class>\n+        <!-- Uncomment this if you want jolokia multicast discovery to be enabled         \n         <init-param>\n           <param-name>discoveryEnabled</param-name>\n-          <param-value>false</param-value>\n+          <param-value>true</param-value>\n         </init-param>      \n         <init-param>\n           <param-name>discoveryAgentUrl</param-name>\n@@ -51,6 +52,7 @@\n           <param-name>agentDescription</param-name>\n           <param-value>Apache ActiveMQ</param-value>\n         </init-param>\n+        -->\n         <!-- turn off returning exceptions and stacktraces from jolokia -->\n         <init-param>\n           <param-name>allowErrorDetails</param-name>", "file_path": "files/2016_8\\110", "file_language": "xml", "file_name": "assembly/src/release/webapps/api/WEB-INF/web.xml", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}], "outdated": 0}
{"index": 49, "cve_id": "CVE-2016-0782", "cwe_id": ["CWE-79"], "cve_language": "Java", "cve_description": "The administration web console in Apache ActiveMQ 5.x before 5.11.4, 5.12.x before 5.12.3, and 5.13.x before 5.13.2 allows remote authenticated users to conduct cross-site scripting (XSS) attacks and consequently obtain sensitive information from a Java memory dump via vectors related to creating a queue.", "cvss": "5.4", "publish_date": "August 5, 2016", "AV": "NETWORK", "AC": "LOW", "PR": "LOW", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "2061186a0a2486aebf26c4ceb8126933ed01826e", "commit_message": "Jolokia should not send back exceptions/error details by default", "commit_date": "2016-02-17T07:48:04Z", "project": "apache/activemq", "url": "https://api.github.com/repos/apache/activemq/commits/2061186a0a2486aebf26c4ceb8126933ed01826e", "html_url": "https://github.com/apache/activemq/commit/2061186a0a2486aebf26c4ceb8126933ed01826e", "windows_before": "", "windows_after": "", "parents": [{"commit_id_before": "7828069637acb2f1ca1710523f6a2b216c12c7f8", "url_before": "https://api.github.com/repos/apache/activemq/commits/7828069637acb2f1ca1710523f6a2b216c12c7f8", "html_url_before": "https://github.com/apache/activemq/commit/7828069637acb2f1ca1710523f6a2b216c12c7f8"}], "details": [{"raw_url": "https://github.com/apache/activemq/raw/2061186a0a2486aebf26c4ceb8126933ed01826e/assembly/src/release/webapps/api/WEB-INF/web.xml", "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n    Licensed to the Apache Software Foundation (ASF) under one or more\n    contributor license agreements.  See the NOTICE file distributed with\n    this work for additional information regarding copyright ownership.\n    The ASF licenses this file to You under the Apache License, Version 2.0\n    (the \"License\"); you may not use this file except in compliance with\n    the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n-->\n<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n      version=\"3.0\"> \n\n    <display-name>Apache ActiveMQ REST API</display-name>\n\n    <servlet>\n        <servlet-name>MessageServlet</servlet-name>\n        <servlet-class>org.apache.activemq.web.MessageServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n        <async-supported>true</async-supported>\n        <!--\n        Uncomment this parameter if you plan to use multiple consumers over REST\n        <init-param>\n                <param-name>destinationOptions</param-name>\n                <param-value>consumer.prefetchSize=1</param-value>\n        </init-param>\n        -->\n    </servlet>\n\n    <servlet>\n        <servlet-name>jolokia-agent</servlet-name>\n        <servlet-class>org.jolokia.http.AgentServlet</servlet-class>        \n        <init-param>\n          <param-name>discoveryEnabled</param-name>\n          <param-value>false</param-value>\n        </init-param>      \n        <init-param>\n          <param-name>discoveryAgentUrl</param-name>\n          <param-value>http://${host}:8161/api/jolokia</param-value>\n        </init-param>\n        <init-param>\n          <param-name>agentDescription</param-name>\n          <param-value>Apache ActiveMQ</param-value>\n        </init-param>\n        <!-- turn off returning exceptions and stacktraces from jolokia -->\n        <init-param>\n          <param-name>allowErrorDetails</param-name>\n          <param-value>false</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup> \n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>MessageServlet</servlet-name>\n        <url-pattern>/message/*</url-pattern>\n    </servlet-mapping>\n\n    <servlet-mapping>\n        <servlet-name>jolokia-agent</servlet-name>\n        <url-pattern>/jolokia/*</url-pattern>\n    </servlet-mapping>\n\n</web-app>", "code_before": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n    Licensed to the Apache Software Foundation (ASF) under one or more\n    contributor license agreements.  See the NOTICE file distributed with\n    this work for additional information regarding copyright ownership.\n    The ASF licenses this file to You under the Apache License, Version 2.0\n    (the \"License\"); you may not use this file except in compliance with\n    the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n-->\n<web-app xmlns=\"https://jakarta.ee/xml/ns/jakartaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd\"\n         version=\"5.0\">\n\n    <display-name>Apache ActiveMQ REST API</display-name>\n\n    <servlet>\n        <servlet-name>MessageServlet</servlet-name>\n        <servlet-class>org.apache.activemq.web.MessageServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n        <async-supported>true</async-supported>\n        <!--\n        Uncomment this parameter if you plan to use multiple consumers over REST\n        <init-param>\n                <param-name>destinationOptions</param-name>\n                <param-value>consumer.prefetchSize=1</param-value>\n        </init-param>\n        -->\n        <!--\n        Uncomment this parameter if you plan to change the default max size of a message over REST. By default, it is set\n        to 100,000. Set it to -1 to disable the limitation but be aware that your AMQ instance could run out of memory if\n        the message is too big. See https://issues.apache.org/jira/browse/AMQ-8029 for more details.\n        <init-param>\n            <param-name>maxMessageSize</param-name>\n            <param-value>-1</param-value>\n        </init-param>\n        -->\n    </servlet>\n\n    <!-- AMQ-9239 jakarta - jolokia does not support jakarta\n    <servlet>\n        <servlet-name>jolokia-agent</servlet-name>\n        <servlet-class>org.jolokia.http.AgentServlet</servlet-class>\n    -->\n        <!-- Uncomment this if you want jolokia multicast discovery to be enabled         \n        <init-param>\n          <param-name>discoveryEnabled</param-name>\n          <param-value>true</param-value>\n        </init-param>      \n        <init-param>\n          <param-name>discoveryAgentUrl</param-name>\n          <param-value>http://${host}:8161/api/jolokia</param-value>\n        </init-param>\n        <init-param>\n          <param-name>agentDescription</param-name>\n          <param-value>Apache ActiveMQ</param-value>\n        </init-param>\n        -->\n    <!-- AMQ-9239 jakarta - jolokia does not support jakarta\n        <init-param>\n            <param-name>policyLocation</param-name>\n            <param-value>${prop:jolokia.conf}</param-value>\n        </init-param>\n    -->\n        <!-- turn off returning exceptions and stacktraces from jolokia -->\n    <!-- AMQ-9239 jakarta - jolokia does not support jakarta\n        <init-param>\n          <param-name>allowErrorDetails</param-name>\n          <param-value>false</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup> \n    </servlet>\n    -->\n\n    <servlet-mapping>\n        <servlet-name>MessageServlet</servlet-name>\n        <url-pattern>/message/*</url-pattern>\n    </servlet-mapping>\n\n    <!-- AMQ-9239 jakarta - jolokia does not support jakarta\n    <servlet-mapping>\n        <servlet-name>jolokia-agent</servlet-name>\n        <url-pattern>/jolokia/*</url-pattern>\n    </servlet-mapping>\n    -->\n\n    <session-config>\n        <cookie-config>\n            <http-only>true</http-only>\n        </cookie-config>\n    </session-config>\n\n</web-app>\n", "patch": "@@ -51,6 +51,11 @@\n           <param-name>agentDescription</param-name>\n           <param-value>Apache ActiveMQ</param-value>\n         </init-param>\n+        <!-- turn off returning exceptions and stacktraces from jolokia -->\n+        <init-param>\n+          <param-name>allowErrorDetails</param-name>\n+          <param-value>false</param-value>\n+        </init-param>\n         <load-on-startup>1</load-on-startup> \n     </servlet>\n ", "file_path": "files/2016_8\\111", "file_language": "xml", "file_name": "assembly/src/release/webapps/api/WEB-INF/web.xml", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}], "outdated": 0}
{"index": 50, "cve_id": "CVE-2016-0782", "cwe_id": ["CWE-79"], "cve_language": "Java", "cve_description": "The administration web console in Apache ActiveMQ 5.x before 5.11.4, 5.12.x before 5.12.3, and 5.13.x before 5.13.2 allows remote authenticated users to conduct cross-site scripting (XSS) attacks and consequently obtain sensitive information from a Java memory dump via vectors related to creating a queue.", "cvss": "5.4", "publish_date": "August 5, 2016", "AV": "NETWORK", "AC": "LOW", "PR": "LOW", "UI": "REQUIRED", "S": "CHANGED", "C": "LOW", "I": "LOW", "A": "NONE", "commit_id": "7828069637acb2f1ca1710523f6a2b216c12c7f8", "commit_message": "Upgrade jolokia", "commit_date": "2016-02-17T07:47:59Z", "project": "apache/activemq", "url": "https://api.github.com/repos/apache/activemq/commits/7828069637acb2f1ca1710523f6a2b216c12c7f8", "html_url": "https://github.com/apache/activemq/commit/7828069637acb2f1ca1710523f6a2b216c12c7f8", "windows_before": "", "windows_after": "", "parents": [{"commit_id_before": "a2786b5ad1701ef3643a024b634472b2aa107f6b", "url_before": "https://api.github.com/repos/apache/activemq/commits/a2786b5ad1701ef3643a024b634472b2aa107f6b", "html_url_before": "https://github.com/apache/activemq/commit/a2786b5ad1701ef3643a024b634472b2aa107f6b"}], "details": [{"raw_url": "https://github.com/apache/activemq/raw/7828069637acb2f1ca1710523f6a2b216c12c7f8/pom.xml", "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n  Licensed to the Apache Software Foundation (ASF) under one or more\n  contributor license agreements.  See the NOTICE file distributed with\n  this work for additional information regarding copyright ownership.\n  The ASF licenses this file to You under the Apache License, Version 2.0\n  (the \"License\"); you may not use this file except in compliance with\n  the License.  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n-->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>17</version>\n  </parent>\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-parent</artifactId>\n  <version>5.13.2-SNAPSHOT</version>\n  <packaging>pom</packaging>\n  <name>ActiveMQ</name>\n  <inceptionYear>2005</inceptionYear>\n\n  <properties>\n    <activeio-version>3.1.4</activeio-version>\n    <siteId>activemq-${project.version}</siteId>\n    <projectName>Apache ActiveMQ</projectName>\n    <!-- base url for site deployment.  See distribution management for full url.  Override this in settings.xml for staging -->\n    <staging.siteURL>scp://people.apache.org/x1/www/activemq.apache.org</staging.siteURL>\n\n    <!-- JAR dependency versions -->\n    <activemq-protobuf-version>1.1</activemq-protobuf-version>\n    <activesoap-version>1.3</activesoap-version>\n    <annogen-version>0.1.0</annogen-version>\n    <ant-version>1.8.4</ant-version>\n    <ant-bundle-version>1.7.0_6</ant-bundle-version>\n    <aopalliance-version>1.0</aopalliance-version>\n    <aries-version>1.1.0</aries-version>\n    <aries-transaction-version>1.1.1</aries-transaction-version>\n    <axion-version>1.0-M3-dev</axion-version>\n    <camel-version>2.16.2</camel-version>\n    <camel-version-range>[2.15,3)</camel-version-range>\n    <cglib-version>2.2</cglib-version>\n    <commons-beanutils-version>1.8.3</commons-beanutils-version>\n    <commons-collections-version>3.2.2</commons-collections-version>\n    <commons-daemon-version>1.0.15</commons-daemon-version>\n    <commons-dbcp2-version>2.1.1</commons-dbcp2-version>\n    <commons-io-version>2.4</commons-io-version>\n    <commons-lang-version>2.6</commons-lang-version>\n    <commons-logging-version>1.1.3</commons-logging-version>\n    <commons-pool2-version>2.4.2</commons-pool2-version>\n    <commons-primitives-version>1.0</commons-primitives-version>\n    <commons-net-version>3.3</commons-net-version>\n    <directory-version>2.0.0-M6</directory-version>\n    <ftpserver-version>1.0.6</ftpserver-version>\n    <geronimo-version>1.0</geronimo-version>\n    <hadoop-version>1.0.0</hadoop-version>\n    <hawtbuf-version>1.11</hawtbuf-version>\n    <hawtdispatch-version>1.22</hawtdispatch-version>\n    <howl-version>0.1.8</howl-version>\n    <hsqldb-version>1.8.0.12</hsqldb-version>\n    <httpclient-version>4.5.1</httpclient-version>\n    <httpcore-version>4.4.4</httpcore-version>\n    <insight-version>1.2.0.Beta4</insight-version>\n    <jackson-version>2.6.3</jackson-version>\n    <jasypt-version>1.9.2</jasypt-version>\n    <jaxb-bundle-version>2.2.11_1</jaxb-bundle-version>\n    <jdom-version>1.0</jdom-version>\n    <jetty9-version>9.2.13.v20150730</jetty9-version>\n    <jetty-version>${jetty9-version}</jetty-version>\n    <jmdns-version>3.4.1</jmdns-version>\n    <tomcat-api-version>8.0.24</tomcat-api-version>\n    <jettison-version>1.3.7</jettison-version>\n    <jmock-version>2.5.1</jmock-version>\n    <jolokia-version>1.3.3</jolokia-version>\n    <josql-version>1.5_5</josql-version>\n    <!-- for json-simple use same version as jolokia uses -->\n    <json-simple-version>1.1.1</json-simple-version>\n    <junit-version>4.12</junit-version>\n    <hamcrest-version>1.3</hamcrest-version>\n    <jxta-version>2.0</jxta-version>\n    <karaf-version>4.0.3</karaf-version>\n    <leveldb-api-version>0.6</leveldb-api-version>\n    <leveldb-version>0.6</leveldb-version>\n    <leveldbjni-version>1.8</leveldbjni-version>\n    <log4j-version>1.2.17</log4j-version>\n    <mockito-version>1.10.19</mockito-version>\n    <mqtt-client-version>1.12</mqtt-client-version>\n    <openjpa-version>1.2.0</openjpa-version>\n    <org-apache-derby-version>10.11.1.1</org-apache-derby-version>\n    <org.osgi.core-version>4.3.1</org.osgi.core-version>\n    <p2psockets-version>1.1.2</p2psockets-version>\n    <linkedin-zookeeper-version>1.4.0</linkedin-zookeeper-version>\n    <zookeeper-version>3.4.6</zookeeper-version>\n    <qpid-proton-version>0.12.0</qpid-proton-version>\n    <qpid-jms-version>0.7.0</qpid-jms-version>\n    <netty-all-version>4.0.33.Final</netty-all-version>\n    <regexp-version>1.3</regexp-version>\n    <rome-version>1.0</rome-version>\n    <saxon-version>9.5.1-2</saxon-version>\n    <saxon-bundle-version>9.5.1-1_1</saxon-bundle-version>\n    <scala-plugin-version>3.1.0</scala-plugin-version>\n    <scala-version>2.11.0</scala-version>\n    <shiro-version>1.2.4</shiro-version>\n    <scalatest-version>2.1.5</scalatest-version>\n    <slf4j-version>1.7.13</slf4j-version>\n    <snappy-version>1.1.2</snappy-version>\n    <spring-version>4.1.9.RELEASE</spring-version>\n    <spring-osgi-version>1.2.1</spring-osgi-version>\n    <stax2-api-version>3.0.2</stax2-api-version>\n    <taglibs-version>1.2.3</taglibs-version>\n    <velocity-version>1.7</velocity-version>\n    <woodstox-core-asl-version>4.2.0</woodstox-core-asl-version>\n    <xalan-version>2.7.2</xalan-version>\n    <xmlbeans-version>2.6.0</xmlbeans-version>\n    <xmlbeans-bundle-version>2.6.0_2</xmlbeans-bundle-version>\n    <xmlresolver-bundle-version>1.2_5</xmlresolver-bundle-version>\n    <xpp3-version>1.1.4c</xpp3-version>\n    <xstream-version>1.4.8</xstream-version>\n    <xbean-version>3.18</xbean-version>\n    <xerces-version>2.11.0</xerces-version>\n    <jaxb-basics-version>0.6.4</jaxb-basics-version>\n    <stompjms-version>1.19</stompjms-version>\n\n    <pax-exam-version>4.6.0</pax-exam-version>\n    <paxexam-karaf-container-version>1.0.0</paxexam-karaf-container-version>\n    <pax-runner-version>1.8.6</pax-runner-version>\n    <pax-url-version>2.4.3</pax-url-version>\n    <felix-configadmin-version>1.8.0</felix-configadmin-version>\n    <felix-framework-version>5.0.1</felix-framework-version>\n\n    <site-repo-url>scpexe://people.apache.org/www/activemq.apache.org/maven/</site-repo-url>\n    <source-version>1.7</source-version>\n    <target-version>1.7</target-version>\n    <javase-javadoc-url>http://docs.oracle.com/javase/7/docs/api/</javase-javadoc-url>\n    <javaee-javadoc-url>http://download.oracle.com/javaee/6/api/</javaee-javadoc-url>\n    <slf4j-javadoc-url>http://www.slf4j.org/apidocs/</slf4j-javadoc-url>\n\n    <!-- Maven Plugin Version for this Project -->\n    <maven-bundle-plugin-version>2.3.7</maven-bundle-plugin-version>\n    <maven-surefire-plugin-version>2.16</maven-surefire-plugin-version>\n    <maven-antrun-plugin-version>1.3</maven-antrun-plugin-version>\n    <maven-assembly-plugin-version>2.4</maven-assembly-plugin-version>\n    <maven-release-plugin-version>2.4.1</maven-release-plugin-version>\n    <maven-eclipse-plugin-version>2.10</maven-eclipse-plugin-version>\n    <maven-war-plugin-version>2.4</maven-war-plugin-version>\n    <maven-compiler-plugin-version>3.3</maven-compiler-plugin-version>\n    <maven-jar-plugin-version>2.4</maven-jar-plugin-version>\n    <maven-archiver-version>2.5</maven-archiver-version>\n    <maven-source-plugin-version>2.2.1</maven-source-plugin-version>\n    <maven-javadoc-plugin-version>2.9.1</maven-javadoc-plugin-version>\n    <maven-install-plugin-version>2.4</maven-install-plugin-version>\n    <maven-shade-plugin-version>2.1</maven-shade-plugin-version>\n    <findbugs-maven-plugin-version>2.5.2</findbugs-maven-plugin-version>\n    <javacc-maven-plugin-version>2.6</javacc-maven-plugin-version>\n    <cobertura-maven-plugin-version>2.5.2</cobertura-maven-plugin-version>\n    <taglist-maven-plugin-version>2.4</taglist-maven-plugin-version>\n    <build-helper-maven-plugin-version>1.8</build-helper-maven-plugin-version>\n    <apache-rat-plugin-version>0.11</apache-rat-plugin-version>\n    <ianal-maven-plugin-version>1.0-alpha-1</ianal-maven-plugin-version>\n    <depends-maven-plugin-version>1.2</depends-maven-plugin-version>\n    <maven-dependency-plugin-version>2.8</maven-dependency-plugin-version>\n    <maven-project-info-reports-plugin-version>2.7</maven-project-info-reports-plugin-version>\n    <maven-graph-plugin-version>1.30</maven-graph-plugin-version>\n    <!-- OSGi bundles properties -->\n    <activemq.osgi.import.pkg>*</activemq.osgi.import.pkg>\n    <activemq.osgi.export.pkg>org.apache.activemq*</activemq.osgi.export.pkg>\n    <activemq.osgi.private.pkg>!*</activemq.osgi.private.pkg>\n    <activemq.osgi.export>${activemq.osgi.export.pkg}*;version=${activemq.osgi.export.version};-noimport:=true</activemq.osgi.export>\n    <activemq.osgi.export.version>${project.version}</activemq.osgi.export.version>\n    <activemq.osgi.import>${activemq.osgi.import.pkg}</activemq.osgi.import>\n    <activemq.osgi.dynamic.import />\n    <activemq.osgi.symbolic.name>${project.groupId}.${project.artifactId}</activemq.osgi.symbolic.name>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n\n  <prerequisites>\n    <maven>3.1.1</maven>\n  </prerequisites>\n\n  <url>http://activemq.apache.org</url>\n\n  <issueManagement>\n    <system>Jira</system>\n    <url>https://issues.apache.org/jira/browse/AMQ</url>\n  </issueManagement>\n\n  <mailingLists>\n    <mailingList>\n      <name>User List</name>\n      <subscribe>users-subscribe@activemq.apache.org</subscribe>\n      <unsubscribe>users-unsubscribe@activemq.apache.org</unsubscribe>\n      <post>users@activemq.apache.org</post>\n    </mailingList>\n    <mailingList>\n      <name>Development List</name>\n      <subscribe>dev-subscribe@activemq.apache.org</subscribe>\n      <unsubscribe>dev-unsubscribe@activemq.apache.org</unsubscribe>\n      <post>dev@activemq.apache.org</post>\n    </mailingList>\n  </mailingLists>\n\n  <distributionManagement>\n    <site>\n      <!-- this needs to match a server in your settings.xml with upload settings -->\n      <id>activemq-website</id>\n      <!-- set the staging.siteURL in your ~/.m2/settings.xml in a release or other profile -->\n      <url>${staging.siteURL}/maven/${project.version}</url>\n      <!--<url>${site-repo-url}</url>-->\n    </site>\n    <snapshotRepository>\n      <id>apache.snapshots.https</id>\n      <name>Apache Development Snapshot Repository</name>\n      <url>https://repository.apache.org/content/repositories/snapshots</url>\n      <uniqueVersion>false</uniqueVersion>\n    </snapshotRepository>\n  </distributionManagement>\n\n  <modules>\n    <module>activemq-openwire-generator</module>\n    <module>activemq-client</module>\n    <module>activemq-openwire-legacy</module>\n    <module>activemq-broker</module>\n    <module>activemq-stomp</module>\n    <module>activemq-mqtt</module>\n    <module>activemq-amqp</module>\n    <module>activemq-kahadb-store</module>\n    <module>activemq-jdbc-store</module>\n    <module>activemq-leveldb-store</module>\n    <module>activemq-unit-tests</module>\n    <module>activemq-all</module>\n    <module>activemq-camel</module>\n    <module>activemq-console</module>\n    <module>activemq-fileserver</module>\n    <module>activemq-jaas</module>\n    <module>activemq-karaf</module>\n    <module>activemq-jms-pool</module>\n    <module>activemq-pool</module>\n    <module>activemq-ra</module>\n    <module>activemq-rar</module>\n    <module>activemq-run</module>\n    <module>activemq-shiro</module>\n    <module>activemq-spring</module>\n    <module>activemq-runtime-config</module>\n    <module>activemq-tooling</module>\n    <module>activemq-web</module>\n    <module>activemq-partition</module>\n    <module>activemq-osgi</module>\n    <module>activemq-blueprint</module>\n    <module>activemq-web-demo</module>\n    <module>activemq-web-console</module>\n    <module>activemq-karaf-itest</module>\n    <module>activemq-itests-spring31</module>\n    <module>assembly</module>\n    <module>activemq-log4j-appender</module>\n    <module>activemq-http</module>\n  </modules>\n\n  <scm>\n    <connection>scm:git:http://git-wip-us.apache.org/repos/asf/activemq.git</connection>\n    <developerConnection>scm:git:https://git-wip-us.apache.org/repos/asf/activemq.git</developerConnection>\n    <url>https://fisheye6.atlassian.com/browse/~br=master/activemq-git</url>\n    <tag>HEAD</tag>\n  </scm>\n\n  <dependencyManagement>\n    <dependencies>\n      <!-- =============================== -->\n      <!-- Internal ActiveMQ Dependencies -->\n      <!-- =============================== -->\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-amqp</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-http</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-log4j-appender</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-amq-store</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-kahadb-store</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-jdbc-store</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-leveldb-store</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-mqtt</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-stomp</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-client</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-openwire-legacy</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-broker</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-all</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-camel</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-partition</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-unit-tests</artifactId>\n        <version>${project.version}</version>\n        <type>test-jar</type>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-broker</artifactId>\n        <version>${project.version}</version>\n        <type>test-jar</type>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-jaas</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-jms-pool</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-pool</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-shiro</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-spring</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-runtime-config</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-web</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-xmpp</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-web-demo</artifactId>\n        <version>${project.version}</version>\n        <type>war</type>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-web-console</artifactId>\n        <version>${project.version}</version>\n        <type>war</type>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-console</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-fileserver</artifactId>\n        <version>${project.version}</version>\n        <type>war</type>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-ra</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-rar</artifactId>\n        <version>${project.version}</version>\n        <type>rar</type>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-run</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-web</artifactId>\n        <version>${project.version}</version>\n        <type>war</type>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activeio-core</artifactId>\n        <version>${activeio-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activeio-core</artifactId>\n        <version>${activeio-version}</version>\n        <type>test-jar</type>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-openwire-generator</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n     <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-karaf</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq.protobuf</groupId>\n        <artifactId>activemq-protobuf</artifactId>\n        <version>${activemq-protobuf-version}</version>\n      </dependency>\n\n      <!-- =============================== -->\n      <!-- Required dependencies -->\n      <!-- =============================== -->\n      <dependency>\n        <groupId>commons-logging</groupId>\n        <artifactId>commons-logging</artifactId>\n        <version>${commons-logging-version}</version>\n        <exclusions>\n          <exclusion>\n            <groupId>avalon-framework</groupId>\n            <artifactId>avalon-framework</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>logkit</groupId>\n            <artifactId>logkit</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>javax.servlet</groupId>\n            <artifactId>servlet-api</artifactId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.geronimo.specs</groupId>\n        <artifactId>geronimo-jms_1.1_spec</artifactId>\n        <version>1.1.1</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.geronimo.specs</groupId>\n        <artifactId>geronimo-jta_1.0.1B_spec</artifactId>\n        <version>1.0.1</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.geronimo.specs</groupId>\n        <artifactId>geronimo-j2ee-management_1.1_spec</artifactId>\n        <version>1.0.1</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.geronimo.specs</groupId>\n        <artifactId>geronimo-jacc_1.1_spec</artifactId>\n        <version>1.0.1</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.geronimo.specs</groupId>\n        <artifactId>geronimo-j2ee-connector_1.5_spec</artifactId>\n        <version>2.0.0</version>\n      </dependency>\n     <dependency>\n       <groupId>org.ow2.asm</groupId>\n       <artifactId>asm</artifactId>\n       <version>5.0.4</version>\n     </dependency>\n\n      <!-- Servlet 3.1 and JSP -->\n      <dependency>\n          <groupId>org.apache.tomcat</groupId>\n          <artifactId>tomcat-jsp-api</artifactId>\n          <version>${tomcat-api-version}</version>\n      </dependency>\n       <dependency>\n          <groupId>org.apache.tomcat</groupId>\n          <artifactId>tomcat-servlet-api</artifactId>\n          <version>${tomcat-api-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.tomcat</groupId>\n        <artifactId>tomcat-websocket-api</artifactId>\n        <version>${tomcat-api-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.geronimo.specs</groupId>\n        <artifactId>geronimo-annotation_1.0_spec</artifactId>\n        <version>1.1.1</version>\n      </dependency>\n\n\n      <!-- =============================== -->\n      <!-- Optional dependencies -->\n      <!-- =============================== -->\n\n      <dependency>\n        <groupId>org.apache.camel</groupId>\n        <artifactId>camel-core</artifactId>\n        <version>${camel-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.camel</groupId>\n        <artifactId>camel-spring</artifactId>\n        <version>${camel-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.camel</groupId>\n        <artifactId>camel-jms</artifactId>\n        <version>${camel-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.camel</groupId>\n        <artifactId>camel-test</artifactId>\n        <version>${camel-version}</version>\n      </dependency>\n      <!-- when upgrading to Spring 4.x then use camel-test-spring -->\n       <dependency>\n        <groupId>org.apache.camel</groupId>\n        <artifactId>camel-test-spring3</artifactId>\n        <version>${camel-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.osgi</groupId>\n        <artifactId>org.osgi.core</artifactId>\n        <version>${org.osgi.core-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.hadoop.zookeeper</groupId>\n        <artifactId>zookeeper</artifactId>\n        <version>${zookeeper-version}</version>\n      </dependency>\n\n      <!-- zeroconf transport -->\n      <dependency>\n        <groupId>javax.jmdns</groupId>\n        <artifactId>jmdns</artifactId>\n        <version>${jmdns-version}</version>\n      </dependency>\n\n      <!-- For jsvc support -->\n      <dependency>\n        <groupId>commons-daemon</groupId>\n        <artifactId>commons-daemon</artifactId>\n        <version>${commons-daemon-version}</version>\n      </dependency>\n\n      <!-- camel testing -->\n      <dependency>\n        <groupId>org.apache.camel</groupId>\n        <artifactId>camel-core</artifactId>\n        <version>${camel-version}</version>\n        <type>test-jar</type>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.camel</groupId>\n        <artifactId>camel-spring</artifactId>\n        <version>${camel-version}</version>\n        <type>test-jar</type>\n        <scope>test</scope>\n      </dependency>\n\n      <!--  for custom XML parsing -->\n      <dependency>\n        <groupId>org.apache.xbean</groupId>\n        <artifactId>xbean-spring</artifactId>\n        <version>${xbean-version}</version>\n        <exclusions>\n          <exclusion>\n            <groupId>qdox</groupId>\n            <artifactId>qdox</artifactId>\n          </exclusion>\n        </exclusions>\n\n      </dependency>\n\n      <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-core</artifactId>\n        <version>${jackson-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-annotations</artifactId>\n        <version>${jackson-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>${jackson-version}</version>\n      </dependency>\n\n      <!-- Used to configure the activemq logs -->\n      <dependency>\n        <groupId>log4j</groupId>\n        <artifactId>log4j</artifactId>\n        <version>${log4j-version}</version>\n        <scope>runtime</scope>\n      </dependency>\n\n      <!-- used to support optional transport configuration via URI query strings -->\n\n      <dependency>\n        <groupId>commons-beanutils</groupId>\n        <artifactId>commons-beanutils</artifactId>\n        <version>${commons-beanutils-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>commons-collections</groupId>\n        <artifactId>commons-collections</artifactId>\n        <version>${commons-collections-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.openjpa</groupId>\n        <artifactId>openjpa-persistence-jdbc</artifactId>\n        <version>${openjpa-version}</version>\n      </dependency>\n\n      <!-- Optional Shiro Support -->\n      <dependency>\n        <groupId>org.apache.shiro</groupId>\n        <artifactId>shiro-core</artifactId>\n        <version>${shiro-version}</version>\n        <optional>true</optional>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.shiro</groupId>\n        <artifactId>shiro-spring</artifactId>\n        <version>${shiro-version}</version>\n        <optional>true</optional>\n      </dependency>\n\n      <!-- Optional Spring Support -->\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-aop</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-beans</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-core</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-jms</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-tx</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <!--\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring</artifactId>\n        <version>${spring-version}</version>\n        <exclusions>\n          <exclusion>\n            <groupId>javax.mail</groupId>\n            <artifactId>mail</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>javax.resource</groupId>\n            <artifactId>connector</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>javax.transaction</groupId>\n            <artifactId>jta</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-support</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-orm</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-hibernate</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-remoting</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n      -->\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-webmvc</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-web</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-test</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-oxm</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n          <groupId>org.springframework.osgi</groupId>\n          <artifactId>spring-osgi-core</artifactId>\n          <version>${spring-osgi-version}</version>\n      </dependency>\n\n      <!-- Optional Derby support-->\n      <dependency>\n        <groupId>org.apache.derby</groupId>\n        <artifactId>derby</artifactId>\n        <version>${org-apache-derby-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.derby</groupId>\n        <artifactId>derbynet</artifactId>\n        <version>${org-apache-derby-version}</version>\n      </dependency>\n\n      <!-- Optional Axion support -->\n      <dependency>\n        <groupId>axion</groupId>\n        <artifactId>axion</artifactId>\n        <version>${axion-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>commons-primitives</groupId>\n        <artifactId>commons-primitives</artifactId>\n        <version>${commons-primitives-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>regexp</groupId>\n        <artifactId>regexp</artifactId>\n        <version>${regexp-version}</version>\n      </dependency>\n\n      <!-- Optional HSQL DB Support -->\n      <!--\n        <dependency>\n        <groupId>hsqldb</groupId>\n        <artifactId>hsqldb</artifactId>\n        <version>${hsqldb-version}</version>\n        </dependency>\n      -->\n\n      <dependency>\n        <groupId>org.apache.commons</groupId>\n        <artifactId>commons-dbcp2</artifactId>\n        <version>${commons-dbcp2-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.commons</groupId>\n        <artifactId>commons-pool2</artifactId>\n        <version>${commons-pool2-version}</version>\n      </dependency>\n\n      <!-- Optional Journal Implementation -->\n      <!--\n        <dependency>\n        <groupId>howl</groupId>\n        <artifactId>howl-logger</artifactId>\n        <version>${howl-version}</version>\n        </dependency>\n      -->\n\n      <!-- Optional Jabber support -->\n      <dependency>\n        <groupId>activemq</groupId>\n        <artifactId>smack</artifactId>\n        <version>1.5.0</version>\n      </dependency>\n\n      <dependency>\n        <groupId>activemq</groupId>\n        <artifactId>smackx</artifactId>\n        <version>1.5.0</version>\n      </dependency>\n\n      <!-- =============================== -->\n      <!-- XML processing dependencies -->\n      <!-- =============================== -->\n      <!-- For XMLBeans -->\n      <dependency>\n        <groupId>org.apache.xmlbeans</groupId>\n        <artifactId>xmlbeans</artifactId>\n        <version>${xmlbeans-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.xmlbeans</groupId>\n        <artifactId>xmlbeans-xpath</artifactId>\n        <version>${xmlbeans-version}</version>\n      </dependency>\n\n      <!-- To use XPath using JAXP 1.3 (std in Java 5) -->\n      <dependency>\n        <groupId>activesoap</groupId>\n        <artifactId>jaxp-api</artifactId>\n        <version>${activesoap-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>xalan</groupId>\n        <artifactId>xalan</artifactId>\n        <version>${xalan-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>com.thoughtworks.xstream</groupId>\n        <artifactId>xstream</artifactId>\n        <version>${xstream-version}</version>\n        <exclusions>\n          <exclusion>\n            <!-- xom is an optional dependency of xstream. Its also\n              LGPL, so its really not ASF compatible. -->\n            <groupId>xom</groupId>\n            <artifactId>xom</artifactId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n\n      <dependency>\n        <groupId>xpp3</groupId>\n        <artifactId>xpp3</artifactId>\n        <version>${xpp3-version}</version>\n      </dependency>\n\n\n      <dependency>\n        <groupId>org.eclipse.jetty</groupId>\n        <artifactId>apache-jsp</artifactId>\n        <version>${jetty-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.eclipse.jetty</groupId>\n        <artifactId>apache-jstl</artifactId>\n        <version>${jetty-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.eclipse.jetty.aggregate</groupId>\n        <artifactId>jetty-all</artifactId>\n        <version>${jetty-version}</version>\n        <exclusions>\n          <exclusion>\n            <groupId>javax.servlet</groupId>\n            <artifactId>javax.servlet-api</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>javax.websocket</groupId>\n            <artifactId>javax.websocket-api</artifactId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n      <dependency>\n        <groupId>org.eclipse.jetty.websocket</groupId>\n        <artifactId>websocket-server</artifactId>\n        <version>${jetty-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.httpcomponents</groupId>\n        <artifactId>httpclient</artifactId>\n        <version>${httpclient-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.httpcomponents</groupId>\n        <artifactId>httpcore</artifactId>\n        <version>${httpcore-version}</version>\n      </dependency>\n\n\n      <!-- Tag Libs -->\n      <dependency>\n        <groupId>org.apache.taglibs</groupId>\n        <artifactId>taglibs-standard-spec</artifactId>\n        <version>${taglibs-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.taglibs</groupId>\n        <artifactId>taglibs-standard-impl</artifactId>\n        <version>${taglibs-version}</version>\n      </dependency>\n      \n      <dependency>\n        <groupId>aopalliance</groupId>\n        <artifactId>aopalliance</artifactId>\n        <version>${aopalliance-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.jasypt</groupId>\n        <artifactId>jasypt</artifactId>\n        <version>${jasypt-version}</version>\n      </dependency>\n\n      <!-- testing dependencies -->\n      <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>${junit-version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.mockito</groupId>\n        <artifactId>mockito-core</artifactId>\n        <version>${mockito-version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.jmock</groupId>\n        <artifactId>jmock-junit4</artifactId>\n        <version>${jmock-version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.jmock</groupId>\n        <artifactId>jmock-legacy</artifactId>\n        <version>${jmock-version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.hamcrest</groupId>\n        <artifactId>hamcrest-all</artifactId>\n        <version>${hamcrest-version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.codehaus.jettison</groupId>\n        <artifactId>jettison</artifactId>\n        <version>${jettison-version}</version>\n    </dependency>\n\n      <dependency>\n        <groupId>annogen</groupId>\n        <artifactId>annogen</artifactId>\n        <version>${annogen-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>commons-io</groupId>\n        <artifactId>commons-io</artifactId>\n        <version>${commons-io-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.ant</groupId>\n        <artifactId>ant</artifactId>\n        <version>${ant-version}</version>\n      </dependency>\n\n      <!-- ACTIVEMQ-WEB Specific Dependencies -->\n      <dependency>\n        <groupId>rome</groupId>\n        <artifactId>rome</artifactId>\n        <version>${rome-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>jdom</groupId>\n        <artifactId>jdom</artifactId>\n        <version>${jdom-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.fusesource.mqtt-client</groupId>\n        <artifactId>mqtt-client</artifactId>\n        <version>${mqtt-client-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>p2psockets</groupId>\n        <artifactId>p2psockets-core</artifactId>\n        <version>${p2psockets-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>jxta</groupId>\n        <artifactId>jxta</artifactId>\n        <version>${jxta-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>slf4j-api</artifactId>\n        <version>${slf4j-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>slf4j-log4j12</artifactId>\n        <version>${slf4j-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>jcl-over-slf4j</artifactId>\n        <version>${slf4j-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.geronimo.components</groupId>\n        <artifactId>geronimo-transaction</artifactId>\n        <version>2.2.1</version>\n      </dependency>\n\n      <!-- FTP support for BlobMessages -->\n        <dependency>\n            <groupId>commons-net</groupId>\n            <artifactId>commons-net</artifactId>\n            <version>${commons-net-version}</version>\n        </dependency>\n\n      <dependency>\n        <groupId>org.apache.velocity</groupId>\n        <artifactId>velocity</artifactId>\n        <version>${velocity-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.servicemix.bundles</groupId>\n        <artifactId>org.apache.servicemix.bundles.josql</artifactId>\n        <version>${josql-version}</version>\n      </dependency>\n\n    </dependencies>\n  </dependencyManagement>\n\n  <build>\n    <defaultGoal>test</defaultGoal>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <groupId>org.apache.activemq.protobuf</groupId>\n          <artifactId>activemq-protobuf</artifactId>\n          <version>${activemq-protobuf-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-antrun-plugin</artifactId>\n          <version>${maven-antrun-plugin-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-assembly-plugin</artifactId>\n          <version>${maven-assembly-plugin-version}</version>\n          <configuration>\n            <tarLongFileMode>gnu</tarLongFileMode>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-jar-plugin</artifactId>\n          <version>${maven-jar-plugin-version}</version>\n          <configuration>\n            <archive>\n              <compress>true</compress>\n            </archive>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-release-plugin</artifactId>\n          <version>${maven-release-plugin-version}</version>\n          <configuration>\n            <autoVersionSubmodules>true</autoVersionSubmodules>\n            <allowTimestampedSnapshots>false</allowTimestampedSnapshots>\n            <preparationGoals>clean install</preparationGoals>\n            <goals>deploy</goals>\n            <remoteTagging>false</remoteTagging>\n            <suppressCommitBeforeTag>false</suppressCommitBeforeTag>\n            <tagNameFormat>activemq-@{project.version}</tagNameFormat>\n          </configuration>\n          <dependencies>\n            <dependency>\n             <groupId>org.apache.maven.scm</groupId>\n             <artifactId>maven-scm-api</artifactId>\n             <version>1.8.1</version>\n            </dependency>\n          <dependency>\n             <groupId>org.apache.maven.scm</groupId>\n             <artifactId>maven-scm-provider-gitexe</artifactId>\n             <version>1.8.1</version>\n           </dependency>\n         </dependencies>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-surefire-plugin</artifactId>\n          <version>${maven-surefire-plugin-version}</version>\n          <configuration>\n            <redirectTestOutputToFile>true</redirectTestOutputToFile>\n            <forkCount>1</forkCount>\n            <reuseForks>true</reuseForks>\n            <argLine>-enableassertions</argLine>\n            <failIfNoTests>false</failIfNoTests>\n            <systemPropertyVariables>\n                <java.awt.headless>true</java.awt.headless>\n            </systemPropertyVariables>\n            <argLine>-Xmx512m</argLine>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.felix</groupId>\n          <artifactId>maven-bundle-plugin</artifactId>\n          <version>${maven-bundle-plugin-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.codehaus.mojo</groupId>\n          <artifactId>ianal-maven-plugin</artifactId>\n          <version>${ianal-maven-plugin-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.codehaus.mojo</groupId>\n          <artifactId>javacc-maven-plugin</artifactId>\n          <version>${javacc-maven-plugin-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.rat</groupId>\n          <artifactId>apache-rat-plugin</artifactId>\n          <version>${apache-rat-plugin-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.eclipse.jetty</groupId>\n          <artifactId>jetty-maven-plugin</artifactId>\n          <version>${jetty-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.codehaus.mojo</groupId>\n          <artifactId>build-helper-maven-plugin</artifactId>\n          <version>${build-helper-maven-plugin-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.codehaus.mojo</groupId>\n          <artifactId>cobertura-maven-plugin</artifactId>\n          <version>${cobertura-maven-plugin-version}</version>\n          <configuration>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-eclipse-plugin</artifactId>\n          <version>${maven-eclipse-plugin-version}</version>\n          <configuration>\n            <downloadSources>true</downloadSources>\n            <downloadJavadocs>false</downloadJavadocs>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-war-plugin</artifactId>\n          <version>${maven-war-plugin-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>${maven-compiler-plugin-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-archiver</artifactId>\n          <version>${maven-archiver-version}</version>\n        </plugin>\n        <!--This plugin's configuration is used to store Eclipse m2e settings only.\n            It has no influence on the Maven build itself.-->\n        <plugin>\n          <groupId>org.eclipse.m2e</groupId>\n          <artifactId>lifecycle-mapping</artifactId>\n          <version>1.0.0</version>\n          <configuration>\n            <lifecycleMappingMetadata>\n              <pluginExecutions>\n                <pluginExecution>\n                  <pluginExecutionFilter>\n                    <groupId>org.apache.felix</groupId>\n                    <artifactId>maven-bundle-plugin</artifactId>\n                    <versionRange>\n                       [2.3.5,)\n                    </versionRange>\n                    <goals>\n                      <goal>cleanVersions</goal>\n                      <goal>manifest</goal>\n                      <goal>mapping</goal>\n                    </goals>\n                  </pluginExecutionFilter>\n                  <action>\n                    <ignore />\n                  </action>\n                </pluginExecution>\n                <pluginExecution>\n                  <pluginExecutionFilter>\n                    <groupId>org.apache.activemq.protobuf</groupId>\n                    <artifactId>activemq-protobuf</artifactId>\n                    <versionRange>[0.0.0,)</versionRange>\n                    <goals>\n                      <goal>compile</goal>\n                    </goals>\n                  </pluginExecutionFilter>\n                  <action>\n                    <ignore />\n                  </action>\n                </pluginExecution>\n                <pluginExecution>\n                  <pluginExecutionFilter>\n                    <groupId>org.apache.xbean</groupId>\n                    <artifactId>maven-xbean-plugin</artifactId>\n                    <versionRange>[0.0.0,)</versionRange>\n                    <goals>\n                      <goal>mapping</goal>\n                    </goals>\n                  </pluginExecutionFilter>\n                  <action>\n                    <execute />\n                  </action>\n                </pluginExecution>\n                <pluginExecution>\n                    <pluginExecutionFilter>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-plugin-plugin</artifactId>\n                        <versionRange>[3.1,)</versionRange>\n                        <goals>\n                            <goal>descriptor</goal>\n                        </goals>\n                    </pluginExecutionFilter>\n                    <action>\n                        <ignore />\n                    </action>\n                </pluginExecution>\n              </pluginExecutions>\n            </lifecycleMappingMetadata>\n          </configuration>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <source>${source-version}</source>\n          <target>${target-version}</target>\n          <optimize>true</optimize>\n          <debug>true</debug>\n          <showDeprecation>true</showDeprecation>\n          <showWarnings>true</showWarnings>\n        </configuration>\n      </plugin>\n\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-enforcer-plugin</artifactId>\n        <executions>\n          <execution>\n            <phase>validate</phase>\n            <goals>\n              <goal>enforce</goal>\n            </goals>\n            <configuration>\n              <rules>\n                <requireMavenVersion>\n                  <version>[3.0.2,)</version>\n                </requireMavenVersion>\n              </rules>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>ianal-maven-plugin</artifactId>\n        <executions>\n          <execution>\n            <goals>\n              <goal>verify-legal-files</goal>\n            </goals>\n            <configuration>\n              <strict>true</strict>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.felix</groupId>\n        <artifactId>maven-bundle-plugin</artifactId>\n        <extensions>true</extensions>\n        <inherited>true</inherited>\n        <configuration>\n          <instructions>\n            <Bundle-Name>${project.artifactId}</Bundle-Name>\n            <Bundle-SymbolicName>${activemq.osgi.symbolic.name}</Bundle-SymbolicName>\n            <Export-Package>${activemq.osgi.export}</Export-Package>\n            <Import-Package>${activemq.osgi.import}</Import-Package>\n            <DynamicImport-Package>${activemq.osgi.dynamic.import}</DynamicImport-Package>\n            <Private-Package>${activemq.osgi.private.pkg}</Private-Package>\n            <Implementation-Title>Apache ActiveMQ</Implementation-Title>\n            <Implementation-Version>${project.version}</Implementation-Version>\n            <_versionpolicy-impl>[$(version;==;$(@)),$(version;=+;$(@)))</_versionpolicy-impl>\n            <_versionpolicy-uses>[$(version;==;$(@)),$(version;+;$(@)))</_versionpolicy-uses>\n            <_versionpolicy>[$(version;==;$(@)),$(version;+;$(@)))</_versionpolicy>\n            <_failok>${servicemix.osgi.failok}</_failok>\n          </instructions>\n        </configuration>\n        <executions>\n          <execution>\n            <id>cleanVersions</id>\n            <phase>generate-sources</phase>\n            <goals>\n              <goal>cleanVersions</goal>\n            </goals>\n            <configuration>\n              <versions>\n                <activemq.osgi.version>${project.version}</activemq.osgi.version>\n              </versions>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n\n      <plugin>\n        <groupId>org.apache.rat</groupId>\n        <artifactId>apache-rat-plugin</artifactId>\n        <configuration>\n          <excludeSubProjects>false</excludeSubProjects>\n          <excludes>\n            <exclude>**/*.bin</exclude>\n            <exclude>**/*.log</exclude>\n            <exclude>**/*.txt</exclude>\n            <exclude>**/*.md</exclude>\n            <exclude>**/kahadb/**/*.data</exclude>\n            <!-- activemq-xmpp schemas -->\n            <exclude>**/resources/*.xsd</exclude>\n            <exclude>**/src/test/resources/keystore</exclude>\n            <!-- web, web-console, web-demo files -->\n            <exclude>**/webapp/mqtt/mqttws31.js</exclude>\n            <exclude>**/webapp/js/dojo.js</exclude>\n            <exclude>**/jquery-*.js</exclude>\n            <exclude>**/bootstrap.min.css</exclude>\n            <exclude>**/bootstrap.min.responsive.css</exclude>\n            <exclude>**/webapp/js/prototype.js</exclude>\n            <exclude>**/web/behaviour.js</exclude>\n            <exclude>**/webapp/js/common.js</exclude>\n            <exclude>**/webapp/js/css.js</exclude>\n            <exclude>**/webapp/js/standardista-table-sorting.js</exclude>\n            <exclude>**/*.data</exclude>\n            <exclude>**/webapp/test/assets/*</exclude>\n            <exclude>**/*.lck</exclude>\n            <exclude>**/*.patch</exclude>\n            <exclude>**/*.diff</exclude>\n            <!-- plotkit -->\n            <exclude>**/webapp/js/plotkit/**/*</exclude>\n            <!-- Eclipse files -->\n            <exclude>**/.*</exclude>\n            <exclude>**/.settings/*</exclude>\n            <exclude>**/eclipse-classes/**/*</exclude>\n            <exclude>**/target/**/*</exclude>\n            <exclude>**/*.iml</exclude>\n            <exclude>**/*.ipr</exclude>\n            <exclude>**/*.iws</exclude>\n            <exclude>**/.idea/**/*</exclude>\n            <exclude>.git/**/*</exclude>\n            <exclude>**/LevelDB/**/*</exclude>\n            <exclude>**/activemq-data/**/*</exclude>\n            <exclude>**/dependency-reduced-pom.xml</exclude>\n            <exclude>**/*.sln</exclude>\n            <exclude>**/*.userprefs</exclude>\n            <exclude>**/*.csproj</exclude>\n            <exclude>**/mqttws31.js</exclude>\n            <exclude>**/stomp.js</exclude>\n            <exclude>**/__init__.py</exclude>\n            <exclude>**/webapp/decorators/footer.jsp</exclude>\n          </excludes>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-javadoc-plugin</artifactId>\n        <version>${maven-javadoc-plugin-version}</version>\n        <configuration>\n          <links>\n            <link>${javase-javadoc-url}</link>\n            <link>${javaee-javadoc-url}</link>\n            <link>http://jakarta.apache.org/commons/collections/apidocs-COLLECTIONS_3_0/</link>\n            <link>http://jakarta.apache.org/commons/dbcp/apidocs/</link>\n            <link>http://jakarta.apache.org/commons/fileupload/apidocs/</link>\n            <link>http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/</link>\n            <link>${slf4j-javadoc-url}</link>\n            <link>http://jakarta.apache.org/commons/pool/apidocs/</link>\n            <link>http://junit.sourceforge.net/javadoc/</link>\n            <link>http://logging.apache.org/log4j/docs/api/</link>\n          </links>\n          <stylesheetfile>${basedir}/../etc/css/stylesheet.css</stylesheetfile>\n          <linksource>true</linksource>\n          <maxmemory>2048m</maxmemory>\n          <source>${source-version}</source>\n          <additionalJOption>-J-Xmx2048m</additionalJOption>\n        </configuration>\n        <executions>\n            <execution>\n                <id>aggregate</id>\n                <phase>site</phase>\n                <goals>\n                    <goal>aggregate</goal>\n                </goals>\n            </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n  <reporting>\n    <plugins>\n      <!--\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-jxr-plugin</artifactId>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-surefire-report-plugin</artifactId>\n        <version>${maven-surefire-plugin-version}</version>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-pmd-plugin</artifactId>\n      </plugin>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>cobertura-maven-plugin</artifactId>\n      </plugin>\n      -->\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>taglist-maven-plugin</artifactId>\n        <version>${taglist-maven-plugin-version}</version>\n      </plugin>\n    </plugins>\n  </reporting>\n\n  <profiles>\n\n    <!-- If you enable this profile, the console message will have a timestamp -->\n    <profile>\n      <id>consolets</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.fusesource.mvnplugins</groupId>\n            <artifactId>maven-consolets-plugin</artifactId>\n            <version>1.30</version>\n            <configuration>\n              <enabled>true</enabled>\n            </configuration>\n            <executions>\n              <execution>\n                <phase>validate</phase>\n                <goals>\n                  <goal>install</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n\n    <profile>\n      <id>unstable</id>\n      <modules>\n      </modules>\n    </profile>\n    <profile>\n      <id>apache-release</id>\n      <activation>\n        <property>\n          <name>apache-release</name>\n        </property>\n      </activation>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-surefire-plugin</artifactId>\n            <version>${maven-surefire-plugin-version}</version>\n            <configuration>\n              <test>false</test>\n            </configuration>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n    <profile>\n      <id>deploy</id>\n      <build>\n        <defaultGoal>deploy</defaultGoal>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-source-plugin</artifactId>\n            <version>${maven-source-plugin-version}</version>\n            <executions>\n              <execution>\n                <id>attach-sources</id>\n                <goals>\n                  <goal>jar</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-javadoc-plugin</artifactId>\n            <version>${maven-javadoc-plugin-version}</version>\n            <executions>\n              <execution>\n                <id>attach-javadocs</id>\n                  <goals>\n                    <goal>jar</goal>\n                  </goals>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-project-info-reports-plugin</artifactId>\n            <version>${maven-project-info-reports-plugin-version}</version>\n            <configuration>\n              <dependencyLocationsEnabled>\n                false\n              </dependencyLocationsEnabled>\n            </configuration>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n    <!--\n      To generate a graph of the project dependencies, run:\n      mvn -P graph graph:reactor -Dhide-scope=test -Dhide-transitive=true -Dhide-external=true -Dgraph.label= -Dhide-version=true -Dhide-group-id=true -Dhide-type=true\n    -->\n    <profile>\n      <id>graph</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.fusesource.mvnplugins</groupId>\n            <artifactId>maven-graph-plugin</artifactId>\n            <version>${maven-graph-plugin-version}</version>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n    <profile>\n        <id>jetty9</id>\n        <properties>\n            <jetty-version>${jetty9-version}</jetty-version>\n        </properties>\n    </profile>\n  </profiles>\n</project>\n", "code_before": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n  Licensed to the Apache Software Foundation (ASF) under one or more\n  contributor license agreements.  See the NOTICE file distributed with\n  this work for additional information regarding copyright ownership.\n  The ASF licenses this file to You under the Apache License, Version 2.0\n  (the \"License\"); you may not use this file except in compliance with\n  the License.  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n-->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>35</version>\n  </parent>\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>org.apache.activemq</groupId>\n  <artifactId>activemq-parent</artifactId>\n  <version>6.2.0-SNAPSHOT</version>\n  <packaging>pom</packaging>\n  <name>ActiveMQ</name>\n  <inceptionYear>2005</inceptionYear>\n\n  <properties>\n    <maven.compiler.target>17</maven.compiler.target>\n\n    <siteId>activemq-${project.version}</siteId>\n    <projectName>Apache ActiveMQ</projectName>\n    <!-- base url for site deployment.  See distribution management for full url.  Override this in settings.xml for staging -->\n    <staging.siteURL>scp://people.apache.org/x1/www/activemq.apache.org</staging.siteURL>\n\n    <!-- JAR dependency versions -->\n    <activemq-protobuf-version>1.1</activemq-protobuf-version>\n    <activesoap-version>1.3</activesoap-version>\n    <annogen-version>0.1.0</annogen-version>\n    <ant-version>1.10.15</ant-version>\n    <aries-version>1.1.0</aries-version>\n    <camel-version>4.14.0</camel-version>\n    <commons-beanutils-version>1.11.0</commons-beanutils-version>\n    <commons-collections-version>3.2.2</commons-collections-version>\n    <commons-dbcp2-version>2.13.0</commons-dbcp2-version>\n    <commons-io-version>2.20.0</commons-io-version>\n    <commons-logging-version>1.3.5</commons-logging-version>\n    <commons-pool2-version>2.12.1</commons-pool2-version>\n    <directory-version>2.0.0.AM25</directory-version>\n    <ecj.version>3.17.0</ecj.version>\n    <ftpserver-version>1.1.1</ftpserver-version>\n    <hadoop-version>1.2.1</hadoop-version>\n    <hawtbuf-version>1.11</hawtbuf-version>\n    <hawtdispatch-version>1.22</hawtdispatch-version>\n    <httpclient-version>4.5.14</httpclient-version>\n    <httpcore-version>4.4.16</httpcore-version>\n    <insight-version>1.2.0.Beta4</insight-version>\n    <jackson-version>2.20.0</jackson-version>\n    <jackson-annotations-version>2.20</jackson-annotations-version>\n    <jakarta-jms-api-version>3.1.0</jakarta-jms-api-version>\n    <jasypt-version>1.9.3</jasypt-version>\n    <jaxb-version>4.0.5</jaxb-version>\n    <jaxb-bundle-version>2.3.2_1</jaxb-bundle-version>\n    <jetty-version>11.0.26</jetty-version>\n    <jetty-version-range>[11,13)</jetty-version-range>\n    <jmdns-version>3.6.2</jmdns-version>\n    <javassist-version>3.30.2-GA</javassist-version>\n    <jettison-version>1.5.4</jettison-version>\n    <jmock-version>2.13.1</jmock-version>\n    <jolokia-version>2.3.0</jolokia-version>\n    <junit-version>4.13.2</junit-version>\n    <hamcrest-version>1.3</hamcrest-version>\n    <karaf-version>4.3.7</karaf-version>\n    <log4j-version>2.24.3</log4j-version>\n    <mockito-version>4.8.1</mockito-version>\n    <owasp-dependency-check-version>12.1.1</owasp-dependency-check-version>\n    <mqtt-client-version>1.16</mqtt-client-version>\n    <org-apache-derby-version>10.16.1.1</org-apache-derby-version>\n    <osgi-version>6.0.0</osgi-version>\n    <qpid-proton-version>0.34.1</qpid-proton-version>\n    <qpid-jms-version>2.4.0</qpid-jms-version>\n    <netty-version>4.1.94.Final</netty-version>\n    <rome-version>2.1.0</rome-version>\n    <shiro-version>1.13.0</shiro-version>\n    <slf4j-version>2.0.16</slf4j-version>\n    <snappy-version>1.1.2</snappy-version>\n    <spring-version>6.2.11</spring-version>\n    <spring-version-range>[6,7)</spring-version-range>\n    <taglibs-version>1.2.5</taglibs-version>\n    <xpp3-version>1.1.4c</xpp3-version>\n    <xstream-version>1.4.21</xstream-version>\n    <xbean-version>4.27</xbean-version>\n    <xerces-version>2.12.2</xerces-version>\n    <jaxb-tools-version>4.0.8</jaxb-tools-version>\n    <stompjms-version>3.1.0</stompjms-version>\n\n    <pax-logging-version>2.1.3</pax-logging-version>\n    <pax-exam-version>4.13.1</pax-exam-version>\n    <pax-url-version>2.6.11</pax-url-version>\n    <felix-framework-version>5.6.12</felix-framework-version>\n\n    <site-repo-url>scpexe://people.apache.org/www/activemq.apache.org/maven/</site-repo-url>\n    <source-version>11</source-version>\n    <target-version>17</target-version>\n    <javase-javadoc-url>https://docs.oracle.com/en/java/javase/11/docs/api/</javase-javadoc-url>\n    <javaee-javadoc-url>http://download.oracle.com/javaee/6/api/</javaee-javadoc-url>\n\n    <!-- Maven Plugin Version for this Project -->\n    <maven-bundle-plugin-version>6.0.0</maven-bundle-plugin-version>\n    <maven-eclipse-plugin-version>2.10</maven-eclipse-plugin-version>\n    <maven-rar-plugin-version>3.0.0</maven-rar-plugin-version>\n    <exec-maven-plugin-version>3.1.0</exec-maven-plugin-version>\n    <flatten-maven-plugin-version>1.7.0</flatten-maven-plugin-version>\n    <javacc-maven-plugin-version>3.1.1</javacc-maven-plugin-version>\n    <cobertura-maven-plugin-version>2.7</cobertura-maven-plugin-version>\n    <taglist-maven-plugin-version>3.2.1</taglist-maven-plugin-version>\n    <build-helper-maven-plugin-version>3.6.0</build-helper-maven-plugin-version>\n    <replacer-maven-plugin-version>1.5.3</replacer-maven-plugin-version>\n    <sonar-maven-plugin-version>4.0.0.4121</sonar-maven-plugin-version>\n    <tools-maven-plugin-version>1.4</tools-maven-plugin-version>\n    <depends-maven-plugin-version>1.5.0</depends-maven-plugin-version>\n    <maven-project-info-reports-plugin-version>3.9.0</maven-project-info-reports-plugin-version>\n    <maven-graph-plugin-version>1.45</maven-graph-plugin-version>\n    <maven-core-version>3.8.6</maven-core-version>\n    <!-- OSGi bundles properties -->\n    <activemq.osgi.import.pkg>*</activemq.osgi.import.pkg>\n    <activemq.osgi.export.pkg>org.apache.activemq*</activemq.osgi.export.pkg>\n    <activemq.osgi.private.pkg>!*</activemq.osgi.private.pkg>\n    <activemq.osgi.export>${activemq.osgi.export.pkg}*;version=${activemq.osgi.export.version};-noimport:=true</activemq.osgi.export>\n    <activemq.osgi.export.version>${project.version}</activemq.osgi.export.version>\n    <activemq.osgi.import>${activemq.osgi.import.pkg}</activemq.osgi.import>\n    <activemq.osgi.dynamic.import />\n    <activemq.osgi.symbolic.name>${project.groupId}.${project.artifactId}</activemq.osgi.symbolic.name>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <maven.source.skip>true</maven.source.skip>\n  </properties>\n\n  <url>http://activemq.apache.org</url>\n\n  <issueManagement>\n    <system>Jira</system>\n    <url>https://issues.apache.org/jira/browse/AMQ</url>\n  </issueManagement>\n\n  <mailingLists>\n    <mailingList>\n      <name>User List</name>\n      <subscribe>users-subscribe@activemq.apache.org</subscribe>\n      <unsubscribe>users-unsubscribe@activemq.apache.org</unsubscribe>\n      <post>users@activemq.apache.org</post>\n    </mailingList>\n    <mailingList>\n      <name>Development List</name>\n      <subscribe>dev-subscribe@activemq.apache.org</subscribe>\n      <unsubscribe>dev-unsubscribe@activemq.apache.org</unsubscribe>\n      <post>dev@activemq.apache.org</post>\n    </mailingList>\n  </mailingLists>\n\n  <distributionManagement>\n    <site>\n      <!-- this needs to match a server in your settings.xml with upload settings -->\n      <id>activemq-website</id>\n      <!-- set the staging.siteURL in your ~/.m2/settings.xml in a release or other profile -->\n      <url>${staging.siteURL}/maven/${project.version}</url>\n      <!--<url>${site-repo-url}</url>-->\n    </site>\n    <snapshotRepository>\n      <id>apache.snapshots.https</id>\n      <name>Apache Development Snapshot Repository</name>\n      <url>https://repository.apache.org/content/repositories/snapshots</url>\n      <uniqueVersion>false</uniqueVersion>\n    </snapshotRepository>\n  </distributionManagement>\n\n  <modules>\n    <module>bom</module>\n    <module>activemq-openwire-generator</module>\n    <module>activemq-client</module>\n    <module>activemq-openwire-legacy</module>\n    <module>activemq-broker</module>\n    <module>activemq-stomp</module>\n    <module>activemq-mqtt</module>\n    <module>activemq-amqp</module>\n    <module>activemq-kahadb-store</module>\n    <module>activemq-jdbc-store</module>\n    <module>activemq-unit-tests</module>\n    <module>activemq-all</module>\n    <module>activemq-console</module>\n    <module>activemq-jaas</module>\n    <module>activemq-jms-pool</module>\n    <module>activemq-pool</module>\n    <module>activemq-cf</module>\n    <module>activemq-ra</module>\n    <module>activemq-rar</module>\n    <module>activemq-run</module>\n    <module>activemq-shiro</module>\n    <module>activemq-spring</module>\n    <module>activemq-runtime-config</module>\n    <module>activemq-tooling</module>\n    <module>activemq-web</module>\n    <module>activemq-web-demo</module>\n    <module>activemq-web-console</module>\n    <module>activemq-karaf</module>\n    <module>activemq-osgi</module>\n    <module>activemq-blueprint</module>\n    <module>activemq-karaf-itest</module>\n    <module>assembly</module>\n    <module>activemq-log4j-appender</module>\n    <module>activemq-http</module>\n  </modules>\n\n  <scm>\n    <connection>scm:git:http://gitbox.apache.org/repos/asf/activemq.git</connection>\n    <developerConnection>scm:git:https://gitbox.apache.org/repos/asf/activemq.git</developerConnection>\n    <url>https://github.com/apache/activemq</url>\n    <tag>main</tag>\n  </scm>\n\n  <dependencyManagement>\n    <dependencies>\n      <!-- =============================== -->\n      <!-- Internal ActiveMQ Dependencies -->\n      <!-- =============================== -->\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-amqp</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-http</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-log4j-appender</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-amq-store</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-kahadb-store</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-jdbc-store</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-mqtt</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-stomp</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-client</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-client</artifactId>\n        <version>${project.version}</version>\n        <type>test-jar</type>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-openwire-legacy</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-broker</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-all</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq.tooling</groupId>\n        <artifactId>activemq-junit</artifactId>\n        <version>${project.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-unit-tests</artifactId>\n        <version>${project.version}</version>\n        <type>test-jar</type>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-broker</artifactId>\n        <version>${project.version}</version>\n        <type>test-jar</type>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-jaas</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-jms-pool</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-pool</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-shiro</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-spring</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-runtime-config</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-web</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-web-demo</artifactId>\n        <version>${project.version}</version>\n        <type>war</type>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-web-console</artifactId>\n        <version>${project.version}</version>\n        <type>war</type>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-console</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-ra</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-rar</artifactId>\n        <version>${project.version}</version>\n        <type>rar</type>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-run</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-web</artifactId>\n        <version>${project.version}</version>\n        <type>war</type>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-openwire-generator</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n     <dependency>\n        <groupId>org.apache.activemq</groupId>\n        <artifactId>activemq-karaf</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.activemq.protobuf</groupId>\n        <artifactId>activemq-protobuf</artifactId>\n        <version>${activemq-protobuf-version}</version>\n      </dependency>\n\n      <!-- =============================== -->\n      <!-- Required dependencies -->\n      <!-- =============================== -->\n\n      <dependency>\n        <groupId>org.apache.ant</groupId>\n        <artifactId>ant</artifactId>\n        <version>${ant-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>jakarta.jms</groupId>\n        <artifactId>jakarta.jms-api</artifactId>\n        <version>${jakarta-jms-api-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>jakarta.transaction</groupId>\n        <artifactId>jakarta.transaction-api</artifactId>\n        <version>2.0.1</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.geronimo.specs</groupId>\n        <artifactId>geronimo-jacc_1.1_spec</artifactId>\n        <version>1.0.2</version>\n      </dependency>\n\n      <dependency>\n        <groupId>jakarta.resource</groupId>\n        <artifactId>jakarta.resource-api</artifactId>\n        <version>2.1.0</version>\n      </dependency>\n      <dependency>\n        <groupId>org.ow2.asm</groupId>\n        <artifactId>asm</artifactId>\n        <version>9.8</version>\n      </dependency>\n\n     <!-- Servlet 5.0 and JSP -->\n     <dependency>\n       <groupId>jakarta.servlet.jsp</groupId>\n       <artifactId>jakarta.servlet.jsp-api</artifactId>\n       <version>3.1.1</version>\n     </dependency>\n     <dependency>\n       <groupId>jakarta.servlet</groupId>\n       <artifactId>jakarta.servlet-api</artifactId>\n       <version>5.0.0</version>\n     </dependency>\n     <dependency>\n       <groupId>jakarta.websocket</groupId>\n       <artifactId>jakarta.websocket-api</artifactId>\n       <version>2.1.1</version>\n     </dependency>\n\n      <!-- =============================== -->\n      <!-- Optional dependencies -->\n      <!-- =============================== -->\n\n      <dependency>\n        <groupId>commons-logging</groupId>\n        <artifactId>commons-logging</artifactId>\n        <version>${commons-logging-version}</version>\n        <exclusions>\n          <exclusion>\n            <groupId>avalon-framework</groupId>\n            <artifactId>avalon-framework</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>logkit</groupId>\n            <artifactId>logkit</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>javax.servlet</groupId>\n            <artifactId>servlet-api</artifactId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.camel</groupId>\n        <artifactId>camel-bom</artifactId>\n        <version>${camel-version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n\n      <dependency>\n        <groupId>org.osgi</groupId>\n        <artifactId>osgi.core</artifactId>\n        <version>${osgi-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.osgi</groupId>\n        <artifactId>osgi.cmpn</artifactId>\n        <version>${osgi-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.ops4j.pax.logging</groupId>\n        <artifactId>pax-logging-api</artifactId>\n        <version>${pax-logging-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.ops4j.pax.logging</groupId>\n        <artifactId>pax-logging-service</artifactId>\n        <version>${pax-logging-version}</version>\n        <exclusions>\n          <exclusion>\n            <groupId>log4j</groupId>\n            <artifactId>apache-log4j-extras</artifactId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n      <dependency>\n        <groupId>org.ops4j.pax.logging</groupId>\n        <artifactId>pax-logging-log4j2</artifactId>\n        <version>${pax-logging-version}</version>\n      </dependency>\n\n      <!-- zeroconf transport -->\n      <dependency>\n        <groupId>org.jmdns</groupId>\n        <artifactId>jmdns</artifactId>\n        <version>${jmdns-version}</version>\n      </dependency>\n\n      <!-- camel testing -->\n      <dependency>\n        <groupId>org.apache.camel</groupId>\n        <artifactId>camel-core</artifactId>\n        <version>${camel-version}</version>\n        <type>test-jar</type>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.camel</groupId>\n        <artifactId>camel-spring</artifactId>\n        <version>${camel-version}</version>\n        <type>test-jar</type>\n        <scope>test</scope>\n      </dependency>\n\n      <!--  for custom XML parsing -->\n      <dependency>\n        <groupId>org.apache.xbean</groupId>\n        <artifactId>xbean-spring</artifactId>\n        <version>${xbean-version}</version>\n        <exclusions>\n          <exclusion>\n            <groupId>qdox</groupId>\n            <artifactId>qdox</artifactId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n\n      <!-- Jackson -->\n      <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-core</artifactId>\n        <version>${jackson-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-annotations</artifactId>\n        <version>${jackson-annotations-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>${jackson-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.fasterxml.jackson.dataformat</groupId>\n        <artifactId>jackson-dataformat-xml</artifactId>\n        <version>${jackson-version}</version>\n      </dependency>\n\n      <!-- Used to configure the activemq logs -->\n      <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>slf4j-api</artifactId>\n        <version>${slf4j-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>jcl-over-slf4j</artifactId>\n        <version>${slf4j-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>slf4j-simple</artifactId>\n        <version>${slf4j-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.logging.log4j</groupId>\n        <artifactId>log4j-api</artifactId>\n        <version>${log4j-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.logging.log4j</groupId>\n        <artifactId>log4j-core</artifactId>\n        <version>${log4j-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.logging.log4j</groupId>\n        <artifactId>log4j-slf4j2-impl</artifactId>\n        <version>${log4j-version}</version>\n      </dependency>\n\n      <!-- used to support optional transport configuration via URI query strings -->\n\n      <dependency>\n        <groupId>commons-beanutils</groupId>\n        <artifactId>commons-beanutils</artifactId>\n        <version>${commons-beanutils-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>commons-collections</groupId>\n        <artifactId>commons-collections</artifactId>\n        <version>${commons-collections-version}</version>\n      </dependency>\n\n      <!-- Optional Shiro Support -->\n      <dependency>\n        <groupId>org.apache.shiro</groupId>\n        <artifactId>shiro-core</artifactId>\n        <version>${shiro-version}</version>\n        <optional>true</optional>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.shiro</groupId>\n        <artifactId>shiro-spring</artifactId>\n        <version>${shiro-version}</version>\n        <optional>true</optional>\n      </dependency>\n\n      <!-- Optional Spring Support -->\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-aop</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-beans</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-core</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-expression</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-jms</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-tx</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <!--\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring</artifactId>\n        <version>${spring-version}</version>\n        <exclusions>\n          <exclusion>\n            <groupId>javax.mail</groupId>\n            <artifactId>mail</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>javax.resource</groupId>\n            <artifactId>connector</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>javax.transaction</groupId>\n            <artifactId>jta</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-support</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-orm</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-hibernate</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-remoting</artifactId>\n          </exclusion>\n          <exclusion>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n      -->\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-webmvc</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-web</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-test</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-oxm</artifactId>\n        <version>${spring-version}</version>\n      </dependency>\n\n      <!-- Optional Derby support-->\n      <dependency>\n        <groupId>org.apache.derby</groupId>\n        <artifactId>derby</artifactId>\n        <version>${org-apache-derby-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.derby</groupId>\n        <artifactId>derbytools</artifactId>\n        <version>${org-apache-derby-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.derby</groupId>\n        <artifactId>derbynet</artifactId>\n        <version>${org-apache-derby-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.commons</groupId>\n        <artifactId>commons-dbcp2</artifactId>\n        <version>${commons-dbcp2-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.commons</groupId>\n        <artifactId>commons-pool2</artifactId>\n        <version>${commons-pool2-version}</version>\n      </dependency>\n\n      <!-- To use XPath using JAXP 1.3 (std in Java 5) -->\n      <dependency>\n        <groupId>activesoap</groupId>\n        <artifactId>jaxp-api</artifactId>\n        <version>${activesoap-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>com.thoughtworks.xstream</groupId>\n        <artifactId>xstream</artifactId>\n        <version>${xstream-version}</version>\n        <exclusions>\n          <exclusion>\n            <!-- xom is an optional dependency of xstream. Its also\n              LGPL, so its really not ASF compatible. -->\n            <groupId>xom</groupId>\n            <artifactId>xom</artifactId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n\n      <dependency>\n        <groupId>xpp3</groupId>\n        <artifactId>xpp3</artifactId>\n        <version>${xpp3-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.glassfish.jaxb</groupId>\n        <artifactId>jaxb-bom</artifactId>\n        <version>${jaxb-version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n\n      <dependency>\n        <groupId>org.eclipse.jetty</groupId>\n        <artifactId>jetty-bom</artifactId>\n        <version>${jetty-version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.httpcomponents</groupId>\n        <artifactId>httpclient</artifactId>\n        <version>${httpclient-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.httpcomponents</groupId>\n        <artifactId>httpcore</artifactId>\n        <version>${httpcore-version}</version>\n      </dependency>\n\n\n      <!-- Tag Libs -->\n      <dependency>\n        <groupId>org.apache.taglibs</groupId>\n        <artifactId>taglibs-standard-spec</artifactId>\n        <version>${taglibs-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.apache.taglibs</groupId>\n        <artifactId>taglibs-standard-impl</artifactId>\n        <version>${taglibs-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.jasypt</groupId>\n        <artifactId>jasypt</artifactId>\n        <version>${jasypt-version}</version>\n      </dependency>\n\n      <!-- testing dependencies -->\n      <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>${junit-version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.mockito</groupId>\n        <artifactId>mockito-core</artifactId>\n        <version>${mockito-version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.mockito</groupId>\n        <artifactId>mockito-inline</artifactId>\n        <version>${mockito-version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.jmock</groupId>\n        <artifactId>jmock-junit4</artifactId>\n        <version>${jmock-version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.jmock</groupId>\n        <artifactId>jmock-legacy</artifactId>\n        <version>${jmock-version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.hamcrest</groupId>\n        <artifactId>hamcrest-all</artifactId>\n        <version>${hamcrest-version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.codehaus.jettison</groupId>\n        <artifactId>jettison</artifactId>\n        <version>${jettison-version}</version>\n    </dependency>\n      <dependency>\n        <groupId>org.javassist</groupId>\n        <artifactId>javassist</artifactId>\n        <version>${javassist-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>annogen</groupId>\n        <artifactId>annogen</artifactId>\n        <version>${annogen-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>commons-io</groupId>\n        <artifactId>commons-io</artifactId>\n        <version>${commons-io-version}</version>\n      </dependency>\n\n      <!-- ACTIVEMQ-WEB Specific Dependencies -->\n      <dependency>\n        <groupId>com.rometools</groupId>\n        <artifactId>rome</artifactId>\n        <version>${rome-version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.fusesource.mqtt-client</groupId>\n        <artifactId>mqtt-client</artifactId>\n        <version>${mqtt-client-version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>org.apache.geronimo.components</groupId>\n        <artifactId>geronimo-transaction</artifactId>\n        <version>3.1.5</version>\n        <classifier>jakarta</classifier>\n      </dependency>\n\n      <dependency>\n        <groupId>jakarta.annotation</groupId>\n        <artifactId>jakarta.annotation-api</artifactId>\n        <version>2.1.1</version>\n      </dependency>\n\n    </dependencies>\n  </dependencyManagement>\n\n  <build>\n    <defaultGoal>test</defaultGoal>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <groupId>org.apache.activemq.protobuf</groupId>\n          <artifactId>activemq-protobuf</artifactId>\n          <version>${activemq-protobuf-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-release-plugin</artifactId>\n          <configuration>\n            <autoVersionSubmodules>true</autoVersionSubmodules>\n            <allowTimestampedSnapshots>false</allowTimestampedSnapshots>\n            <preparationGoals>clean install</preparationGoals>\n            <goals>deploy</goals>\n            <remoteTagging>false</remoteTagging>\n            <suppressCommitBeforeTag>false</suppressCommitBeforeTag>\n            <tagNameFormat>activemq-@{project.version}</tagNameFormat>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-surefire-plugin</artifactId>\n          <configuration>\n            <redirectTestOutputToFile>true</redirectTestOutputToFile>\n            <forkCount>1</forkCount>\n            <reuseForks>true</reuseForks>\n            <argLine>-enableassertions</argLine>\n            <failIfNoTests>false</failIfNoTests>\n            <systemPropertyVariables>\n                <java.awt.headless>true</java.awt.headless>\n                <org.apache.activemq.kahaDB.files.skipMetadataUpdate>true</org.apache.activemq.kahaDB.files.skipMetadataUpdate>\n            </systemPropertyVariables>\n            <argLine>-Xmx512m</argLine>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.felix</groupId>\n          <artifactId>maven-bundle-plugin</artifactId>\n          <version>${maven-bundle-plugin-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.geronimo.genesis.plugins</groupId>\n          <artifactId>tools-maven-plugin</artifactId>\n          <version>${tools-maven-plugin-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.codehaus.mojo</groupId>\n          <artifactId>flatten-maven-plugin</artifactId>\n          <version>${flatten-maven-plugin-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.codehaus.mojo</groupId>\n          <artifactId>javacc-maven-plugin</artifactId>\n          <version>${javacc-maven-plugin-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.eclipse.jetty</groupId>\n          <artifactId>jetty-maven-plugin</artifactId>\n          <version>${jetty-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.codehaus.mojo</groupId>\n          <artifactId>build-helper-maven-plugin</artifactId>\n          <version>${build-helper-maven-plugin-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.codehaus.mojo</groupId>\n          <artifactId>cobertura-maven-plugin</artifactId>\n          <version>${cobertura-maven-plugin-version}</version>\n          <configuration>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-eclipse-plugin</artifactId>\n          <version>${maven-eclipse-plugin-version}</version>\n          <configuration>\n            <downloadSources>true</downloadSources>\n            <downloadJavadocs>false</downloadJavadocs>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-rar-plugin</artifactId>\n          <version>${maven-rar-plugin-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>com.google.code.maven-replacer-plugin</groupId>\n          <artifactId>replacer</artifactId>\n          <version>${replacer-maven-plugin-version}</version>\n        </plugin>\n        <plugin>\n          <groupId>org.sonarsource.scanner.maven</groupId>\n          <artifactId>sonar-maven-plugin</artifactId>\n          <version>${sonar-maven-plugin-version}</version>\n        </plugin>\n        <!--This plugin's configuration is used to store Eclipse m2e settings only.\n            It has no influence on the Maven build itself.-->\n        <plugin>\n          <groupId>org.eclipse.m2e</groupId>\n          <artifactId>lifecycle-mapping</artifactId>\n          <version>1.0.0</version>\n          <configuration>\n            <lifecycleMappingMetadata>\n              <pluginExecutions>\n                <pluginExecution>\n                  <pluginExecutionFilter>\n                    <groupId>org.apache.felix</groupId>\n                    <artifactId>maven-bundle-plugin</artifactId>\n                    <versionRange>\n                       [2.3.5,)\n                    </versionRange>\n                    <goals>\n                      <goal>cleanVersions</goal>\n                      <goal>manifest</goal>\n                      <goal>mapping</goal>\n                    </goals>\n                  </pluginExecutionFilter>\n                  <action>\n                    <ignore />\n                  </action>\n                </pluginExecution>\n                <pluginExecution>\n                  <pluginExecutionFilter>\n                    <groupId>org.apache.activemq.protobuf</groupId>\n                    <artifactId>activemq-protobuf</artifactId>\n                    <versionRange>[0.0.0,)</versionRange>\n                    <goals>\n                      <goal>compile</goal>\n                    </goals>\n                  </pluginExecutionFilter>\n                  <action>\n                    <ignore />\n                  </action>\n                </pluginExecution>\n                <pluginExecution>\n                  <pluginExecutionFilter>\n                    <groupId>org.apache.xbean</groupId>\n                    <artifactId>maven-xbean-plugin</artifactId>\n                    <versionRange>[0.0.0,)</versionRange>\n                    <goals>\n                      <goal>mapping</goal>\n                    </goals>\n                  </pluginExecutionFilter>\n                  <action>\n                    <execute />\n                  </action>\n                </pluginExecution>\n                <pluginExecution>\n                  <pluginExecutionFilter>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-plugin-plugin</artifactId>\n                    <versionRange>[3.1,)</versionRange>\n                    <goals>\n                      <goal>descriptor</goal>\n                    </goals>\n                  </pluginExecutionFilter>\n                  <action>\n                    <ignore />\n                  </action>\n                </pluginExecution>\n                <pluginExecution>\n                  <pluginExecutionFilter>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-remote-resources-plugin</artifactId>\n                    <versionRange>[1.0,)</versionRange>\n                    <goals>\n                      <goal>process</goal>\n                    </goals>\n                  </pluginExecutionFilter>\n                  <action>\n                    <ignore />\n                  </action>\n                </pluginExecution>\n              </pluginExecutions>\n            </lifecycleMappingMetadata>\n          </configuration>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-enforcer-plugin</artifactId>\n        <executions>\n          <execution>\n            <id>enforce-maven</id>\n            <goals>\n              <goal>enforce</goal>\n            </goals>\n            <configuration>\n              <rules>\n                <requireMavenVersion>\n                  <version>3.0.5</version>\n                </requireMavenVersion>\n              </rules>\n            </configuration>\n          </execution>\n          <execution>\n            <id>enforce-java-version</id>\n            <goals>\n              <goal>enforce</goal>\n            </goals>\n            <configuration>\n              <rules>\n                <requireJavaVersion>\n                  <version>[17,)</version>\n                  <message>You must use Java 17+ to build.</message>\n                </requireJavaVersion>\n              </rules>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.geronimo.genesis.plugins</groupId>\n        <artifactId>tools-maven-plugin</artifactId>\n        <executions>\n          <execution>\n            <goals>\n              <goal>verify-legal-files</goal>\n            </goals>\n            <configuration>\n              <strict>true</strict>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.rat</groupId>\n        <artifactId>apache-rat-plugin</artifactId>\n        <configuration>\n          <excludeSubProjects>false</excludeSubProjects>\n          <excludes>\n            <exclude>**/*.bin</exclude>\n            <exclude>**/*.log</exclude>\n            <exclude>**/*.txt</exclude>\n            <exclude>**/*.md</exclude>\n            <exclude>**/kahadb/**/*.data</exclude>\n            <exclude>**/resources/*.xsd</exclude>\n            <exclude>**/src/test/resources/keystore</exclude>\n            <exclude>**/*.ts</exclude>\n            <!-- web, web-console, web-demo files -->\n            <exclude>**/webapp/mqtt/mqttws31.js</exclude>\n            <exclude>**/webapp/js/dojo.js</exclude>\n            <exclude>**/jquery-*.js</exclude>\n            <exclude>**/bootstrap.min.css</exclude>\n            <exclude>**/bootstrap.min.responsive.css</exclude>\n            <exclude>**/prototype.js</exclude>\n            <exclude>**/web/behaviour.js</exclude>\n            <exclude>**/webapp/js/common.js</exclude>\n            <exclude>**/webapp/js/css.js</exclude>\n            <exclude>**/webapp/js/standardista-table-sorting.js</exclude>\n            <exclude>**/*.data</exclude>\n            <exclude>**/webapp/test/assets/*</exclude>\n            <exclude>**/*.lck</exclude>\n            <exclude>**/*.patch</exclude>\n            <exclude>**/*.diff</exclude>\n            <!-- plotkit -->\n            <exclude>**/webapp/js/plotkit/**/*</exclude>\n            <!-- Eclipse files -->\n            <exclude>**/.*</exclude>\n            <exclude>**/.settings/*</exclude>\n            <exclude>**/eclipse-classes/**/*</exclude>\n            <exclude>**/target/**/*</exclude>\n            <exclude>**/*.iml</exclude>\n            <exclude>**/*.ipr</exclude>\n            <exclude>**/*.iws</exclude>\n            <exclude>**/.idea/**/*</exclude>\n            <exclude>.git/**/*</exclude>\n            <exclude>**/activemq-data/**/*</exclude>\n            <exclude>**/dependency-reduced-pom.xml</exclude>\n            <exclude>**/*.sln</exclude>\n            <exclude>**/*.userprefs</exclude>\n            <exclude>**/*.csproj</exclude>\n            <exclude>**/mqttws31.js</exclude>\n            <exclude>**/stomp.js</exclude>\n            <exclude>**/__init__.py</exclude>\n            <exclude>**/webapp/decorators/footer.jsp</exclude>\n            <exclude>**/docs/img/*.svg</exclude>\n            <exclude>**/testJdbcConfig/**/*</exclude>\n          </excludes>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-javadoc-plugin</artifactId>\n        <configuration>\n          <links>\n            <link>${javase-javadoc-url}</link>\n            <link>${javaee-javadoc-url}</link>\n            <link>https://commons.apache.org/proper/commons-collections/javadocs/api-${commons-collections-version}/</link>\n            <link>http://jakarta.apache.org/commons/dbcp/apidocs/</link>\n            <link>https://javadoc.io/doc/org.apache.httpcomponents/httpclient/${httpclient-version}/</link>\n            <link>http://jakarta.apache.org/commons/pool/apidocs/</link>\n            <link>https://junit.org/junit4/javadoc/latest/</link>\n          </links>\n          <stylesheetfile>${basedir}/../etc/css/stylesheet.css</stylesheetfile>\n          <maxmemory>2048m</maxmemory>\n          <source>${source-version}</source>\n          <noindex>true</noindex>\n          <additionalJOption>-J-Xmx2048m</additionalJOption>\n          <!-- necessary for now under the javadocs can be fixed because jdk8 is much stricter -->\n          <additionalJOption>${javadoc.options}</additionalJOption>\n        </configuration>\n        <executions>\n            <execution>\n                <id>aggregate</id>\n                <phase>site</phase>\n                <goals>\n                    <goal>aggregate</goal>\n                </goals>\n            </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-source-plugin</artifactId>\n        <executions>\n          <execution>\n            <id>attach-sources</id>\n            <goals>\n              <goal>jar-no-fork</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n  <reporting>\n    <plugins>\n      <!--\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-jxr-plugin</artifactId>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-surefire-report-plugin</artifactId>\n        <version>${maven-surefire-plugin-version}</version>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-pmd-plugin</artifactId>\n      </plugin>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>cobertura-maven-plugin</artifactId>\n      </plugin>\n      -->\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>taglist-maven-plugin</artifactId>\n        <version>${taglist-maven-plugin-version}</version>\n      </plugin>\n    </plugins>\n  </reporting>\n\n  <profiles>\n\n    <!-- If you enable this profile, the console message will have a timestamp -->\n    <profile>\n      <id>consolets</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.fusesource.mvnplugins</groupId>\n            <artifactId>maven-consolets-plugin</artifactId>\n            <version>1.45</version>\n            <configuration>\n              <enabled>true</enabled>\n            </configuration>\n            <executions>\n              <execution>\n                <phase>validate</phase>\n                <goals>\n                  <goal>install</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n    <profile>\n      <id>apache-release</id>\n      <activation>\n        <property>\n          <name>apache-release</name>\n        </property>\n      </activation>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-surefire-plugin</artifactId>\n            <configuration>\n              <skipTests>true</skipTests>\n              <failIfNoTests>false</failIfNoTests>\n            </configuration>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.rat</groupId>\n            <artifactId>apache-rat-plugin</artifactId>\n            <executions>\n              <execution>\n                <phase>verify</phase>\n                <goals>\n                  <goal>check</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n    <profile>\n      <id>deploy</id>\n      <properties>\n          <maven.source.skip>false</maven.source.skip>\n      </properties>\n      <build>\n        <defaultGoal>deploy</defaultGoal>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-javadoc-plugin</artifactId>\n            <configuration>\n              <noindex>true</noindex>\n            </configuration>\n            <executions>\n              <execution>\n                <id>attach-javadocs</id>\n                  <goals>\n                    <goal>jar</goal>\n                  </goals>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-project-info-reports-plugin</artifactId>\n            <version>${maven-project-info-reports-plugin-version}</version>\n            <configuration>\n              <dependencyLocationsEnabled>\n                false\n              </dependencyLocationsEnabled>\n            </configuration>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n    <!--\n      To generate a graph of the project dependencies, run:\n      mvn -P graph graph:reactor -Dhide-scope=test -Dhide-transitive=true -Dhide-external=true -Dgraph.label= -Dhide-version=true -Dhide-group-id=true -Dhide-type=true\n    -->\n    <profile>\n      <id>graph</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.fusesource.mvnplugins</groupId>\n            <artifactId>maven-graph-plugin</artifactId>\n            <version>${maven-graph-plugin-version}</version>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n\n    <!-- Execute owasp dependency check plugin -->\n    <profile>\n      <id>owasp</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.owasp</groupId>\n            <artifactId>dependency-check-maven</artifactId>\n            <version>${owasp-dependency-check-version}</version>\n            <configuration>\n              <skipProvidedScope>true</skipProvidedScope>\n              <skipRuntimeScope>true</skipRuntimeScope>\n              <skipSystemScope>true</skipSystemScope>\n            </configuration>\n            <executions>\n              <execution>\n                <goals>\n                  <goal>aggregate</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n\n    <!-- Need to disable doclint for JDK 8 builds so Javadocs work -->\n    <profile>\n      <id>jdk8-disable-doclint</id>\n      <activation>\n        <jdk>[1.8,)</jdk>\n      </activation>\n      <properties>\n        <javadoc.options>-Xdoclint:none</javadoc.options>\n     </properties>\n   </profile>\n  </profiles>\n</project>\n", "patch": "@@ -81,7 +81,7 @@\n     <tomcat-api-version>8.0.24</tomcat-api-version>\n     <jettison-version>1.3.7</jettison-version>\n     <jmock-version>2.5.1</jmock-version>\n-    <jolokia-version>1.3.2</jolokia-version>\n+    <jolokia-version>1.3.3</jolokia-version>\n     <josql-version>1.5_5</josql-version>\n     <!-- for json-simple use same version as jolokia uses -->\n     <json-simple-version>1.1.1</json-simple-version>", "file_path": "files/2016_8\\112", "file_language": "xml", "file_name": "pom.xml", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}], "outdated": 0}
{"index": 51, "cve_id": "CVE-2016-4999", "cwe_id": ["CWE-89"], "cve_language": "Java", "cve_description": "SQL injection vulnerability in the getStringParameterSQL method in main/java/org/dashbuilder/dataprovider/sql/dialect/DefaultDialect.java in Dashbuilder before 0.6.0.Beta1 allows remote attackers to execute arbitrary SQL commands via a data set lookup filter in the (1) Data Set Authoring or (2) Displayer editor UI.", "cvss": "9.8", "publish_date": "August 5, 2016", "AV": "NETWORK", "AC": "LOW", "PR": "NONE", "UI": "NONE", "S": "UNCHANGED", "C": "HIGH", "I": "HIGH", "A": "HIGH", "commit_id": "8574899e3b6455547b534f570b2330ff772e524b", "commit_message": "DASHBUILDE-113: SQL Injection on data set lookup filters", "commit_date": "2016-06-27T16:05:57Z", "project": "dashbuilder/dashbuilder", "url": "https://api.github.com/repos/dashbuilder/dashbuilder/commits/8574899e3b6455547b534f570b2330ff772e524b", "html_url": "https://github.com/dashbuilder/dashbuilder/commit/8574899e3b6455547b534f570b2330ff772e524b", "windows_before": "", "windows_after": "", "parents": [{"commit_id_before": "469921ce5a31b91b95c93e410f5f0a2ba5fbbfc7", "url_before": "https://api.github.com/repos/dashbuilder/dashbuilder/commits/469921ce5a31b91b95c93e410f5f0a2ba5fbbfc7", "html_url_before": "https://github.com/dashbuilder/dashbuilder/commit/469921ce5a31b91b95c93e410f5f0a2ba5fbbfc7"}], "details": [{"raw_url": "https://github.com/dashbuilder/dashbuilder/raw/8574899e3b6455547b534f570b2330ff772e524b/dashbuilder-backend/dashbuilder-dataset-sql/src/main/java/org/dashbuilder/dataprovider/sql/dialect/DefaultDialect.java", "code": "/*\n * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.dashbuilder.dataprovider.sql.dialect;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.List;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.dashbuilder.dataprovider.sql.model.Column;\nimport org.dashbuilder.dataprovider.sql.model.Condition;\nimport org.dashbuilder.dataprovider.sql.model.CoreCondition;\nimport org.dashbuilder.dataprovider.sql.model.CreateTable;\nimport org.dashbuilder.dataprovider.sql.model.Delete;\nimport org.dashbuilder.dataprovider.sql.model.DynamicDateColumn;\nimport org.dashbuilder.dataprovider.sql.model.FixedDateColumn;\nimport org.dashbuilder.dataprovider.sql.model.FunctionColumn;\nimport org.dashbuilder.dataprovider.sql.model.Insert;\nimport org.dashbuilder.dataprovider.sql.model.LogicalCondition;\nimport org.dashbuilder.dataprovider.sql.model.SQLStatement;\nimport org.dashbuilder.dataprovider.sql.model.Select;\nimport org.dashbuilder.dataprovider.sql.model.SimpleColumn;\nimport org.dashbuilder.dataprovider.sql.model.SortColumn;\nimport org.dashbuilder.dataprovider.sql.model.Table;\nimport org.dashbuilder.dataset.ColumnType;\nimport org.dashbuilder.dataset.filter.CoreFunctionType;\nimport org.dashbuilder.dataset.filter.LogicalExprType;\nimport org.dashbuilder.dataset.group.AggregateFunctionType;\nimport org.dashbuilder.dataset.group.DateIntervalType;\nimport org.dashbuilder.dataset.sort.SortOrder;\n\nimport static org.dashbuilder.dataprovider.sql.SQLFactory.*;\n\npublic class DefaultDialect implements Dialect {\n\n    private static final String AND = \" AND \";\n\n    @Override\n    public String[] getExcludedColumns() {\n        return new String[] {};\n    }\n\n    @Override\n    public String getColumnSQL(Column column) {\n\n        if (column instanceof FunctionColumn) {\n            return getFunctionColumnSQL((FunctionColumn) column);\n        }\n        else if (column instanceof SortColumn) {\n            return getSortColumnSQL((SortColumn) column);\n        }\n        else if (column instanceof DynamicDateColumn) {\n            return getDynamicDateColumnSQL((DynamicDateColumn) column);\n        }\n        else if (column instanceof FixedDateColumn) {\n            return getFixedDateColumnSQL((FixedDateColumn) column);\n        }\n        else if (column instanceof SimpleColumn) {\n            return getSimpleColumnSQL((SimpleColumn) column);\n        }\n        else {\n            return getColumnNameSQL(column.getName());\n        }\n    }\n\n    @Override\n    public String getColumnTypeSQL(Column column) {\n        switch (column.getType()) {\n            case NUMBER: {\n                return \"NUMERIC(28,2)\";\n            }\n            case DATE: {\n                return \"TIMESTAMP\";\n            }\n            default: {\n                return \"VARCHAR(\" + column.getLength() + \")\";\n            }\n        }\n    }\n\n    @Override\n    public String convertToString(Object value) {\n        try {\n            return value == null ? null : (String) value;\n        } catch (ClassCastException e) {\n            return value.toString();\n        }\n    }\n\n    @Override\n    public Double convertToDouble(Object value) {\n        try {\n            return value == null ? null : ((Number) value).doubleValue();\n        } catch (ClassCastException e) {\n            return Double.parseDouble(value.toString());\n        }\n    }\n\n    @Override\n    public Date convertToDate(Object value) {\n        try {\n            return value == null ? null : (Date) value;\n        } catch (ClassCastException e) {\n            throw new IllegalArgumentException(\"Not a java.util.Date: \" + value + \" (\" + value.getClass().getName() + \")\");\n        }\n    }\n\n    @Override\n    public String getTableSQL(SQLStatement<?> stmt) {\n        Table table = stmt.getTable();\n        String name = getTableNameSQL(table.getName());\n        if (StringUtils.isBlank(table.getSchema())) {\n            return name;\n        } else{\n            return getSchemaNameSQL(table.getSchema()) + \".\" + name;\n        }\n    }\n\n    @Override\n    public String getTableNameSQL(String name) {\n        return name;\n    }\n\n    @Override\n    public String getSchemaNameSQL(String name) {\n        return name;\n    }\n\n    @Override\n    public String getSimpleColumnSQL(SimpleColumn column) {\n        String result = getColumnNameSQL(column.getName());\n        if (column.getFunctionType() != null) {\n            result = getColumnFunctionSQL(result, column.getFunctionType());\n        }\n        return result;\n    }\n\n    @Override\n    public String getFunctionColumnSQL(FunctionColumn column) {\n        if (FunctionColumn.LOWER.equals(column.getFunction())) {\n            return getLowerFunctionSQL(column.getColumns()[0]);\n        }\n        if (FunctionColumn.CONCAT.equals(column.getFunction())) {\n            return getConcatFunctionSQL(column.getColumns());\n        }\n        if (FunctionColumn.YEAR.equals(column.getFunction())) {\n            return getDatePartFunctionSQL(\"YEAR\", column.getColumns()[0]);\n        }\n        if (FunctionColumn.MONTH.equals(column.getFunction())) {\n            return getDatePartFunctionSQL(\"MONTH\", column.getColumns()[0]);\n        }\n        if (FunctionColumn.DAY.equals(column.getFunction())) {\n            return getDatePartFunctionSQL(\"DAY\", column.getColumns()[0]);\n        }\n        if (FunctionColumn.HOUR.equals(column.getFunction())) {\n            return getDatePartFunctionSQL(\"HOUR\", column.getColumns()[0]);\n        }\n        if (FunctionColumn.MINUTE.equals(column.getFunction())) {\n            return getDatePartFunctionSQL(\"MINUTE\", column.getColumns()[0]);\n        }\n        if (FunctionColumn.SECOND.equals(column.getFunction())) {\n            return getDatePartFunctionSQL(\"SECOND\", column.getColumns()[0]);\n        }\n        throw new IllegalArgumentException(\"Column function not supported: \" + column.getFunction());\n    }\n\n    @Override\n    public String getLowerFunctionSQL(Column column) {\n        String columnSQL = getColumnSQL(column);\n        return \"LOWER(\" + columnSQL + \")\";\n    }\n\n    @Override\n    public String getConcatFunctionSQL(Column[] columns) {\n        return getConcatFunctionSQL(columns, \"(\", \")\", \" || \");\n    }\n\n    public String getConcatFunctionSQL(Column[] columns, String begin, String end, String separator) {\n        StringBuilder out = new StringBuilder();\n        out.append(begin);\n        for (int i = 0; i < columns.length; i++) {\n            if (i > 0) out.append(separator);\n            Column column = columns[i];\n            ColumnType type = column.getType();\n            if (ColumnType.LABEL.equals(type) || ColumnType.TEXT.equals(type)) {\n                out.append(\"'\").append(column.getName()).append(\"'\");\n            } else {\n                // Cast needed\n                out.append(getColumnCastSQL(column));\n            }\n        }\n        out.append(end);\n        return out.toString();\n    }\n\n    public String getColumnCastSQL(Column column) {\n        String columnSQL = getColumnSQL(column);\n        return \"CAST(\" + columnSQL + \" AS VARCHAR)\";\n    }\n\n    @Override\n    public String getDatePartFunctionSQL(String part, Column column) {\n        String columnSQL = getColumnSQL(column);\n        return \"EXTRACT(\" + part + \" FROM \" + columnSQL + \")\";\n    }\n\n    @Override\n    public String getSortColumnSQL(SortColumn sortColumn) {\n\n        Column column = sortColumn.getSource();\n        String columnSQL = getColumnSQL(column);\n\n        // Always order by the alias (if any)\n        if (!StringUtils.isBlank(column.getAlias())) {\n            columnSQL = getAliasForStatementSQL(column.getAlias());\n        }\n        return columnSQL + \" \" + getSortOrderSQL(sortColumn.getOrder());\n    }\n\n    @Override\n    public String getSortOrderSQL(SortOrder order) {\n        if (SortOrder.ASCENDING.equals(order)) {\n            return \"ASC\";\n        }\n        if (SortOrder.DESCENDING.equals(order)) {\n            return \"DESC\";\n        }\n        throw new IllegalArgumentException(\"Sort order not supported: \" + order);\n    }\n\n    /**\n     * The text conversion of a date column is very DB specific.\n     * A mechanism combining  concat and extract functions is used by default.\n     * Depending on the DB dialect a more polished approach can be used.\n     * For instance, <ul>\n     * <li>In Oracle and Postgres the 'to_char' function is used.</li>\n     * <li>In Mysql, 'date_format'</li>\n     * <li>In H2, the 'to_char' function is not used as it's only available since version 1.3.175 and we do need to support older versions.</li>\n     * </ul>\n     */\n    @Override\n    public String getDynamicDateColumnSQL(DynamicDateColumn column) {\n        Column dateColumn = toChar(column);\n        return getColumnSQL(dateColumn);\n    }\n\n    public Column toChar(DynamicDateColumn column) {\n        Column target = column(column.getName());\n        DateIntervalType type = column.getDateType();\n        Column SEPARATOR_DATE = column(\"-\", ColumnType.TEXT, 3);\n        Column SEPARATOR_EMPTY = column(\" \", ColumnType.TEXT, 3);\n        Column SEPARATOR_TIME = column(\":\", ColumnType.TEXT, 3);\n\n        if (DateIntervalType.SECOND.equals(type)) {\n            return concat(target.year(), SEPARATOR_DATE,\n                    target.month(), SEPARATOR_DATE,\n                    target.day(), SEPARATOR_EMPTY,\n                    target.hour(), SEPARATOR_TIME,\n                    target.minute(), SEPARATOR_TIME,\n                    target.second());\n        }\n        if (DateIntervalType.MINUTE.equals(type)) {\n            return concat(target.year(), SEPARATOR_DATE,\n                    target.month(), SEPARATOR_DATE,\n                    target.day(), SEPARATOR_EMPTY,\n                    target.hour(), SEPARATOR_TIME,\n                    target.minute());\n        }\n        if (DateIntervalType.HOUR.equals(type)) {\n            return concat(target.year(), SEPARATOR_DATE,\n                    target.month(), SEPARATOR_DATE,\n                    target.day(), SEPARATOR_EMPTY,\n                    target.hour());\n        }\n        if (DateIntervalType.DAY.equals(type) || DateIntervalType.WEEK.equals(type)) {\n            return concat(target.year(), SEPARATOR_DATE,\n                    target.month(), SEPARATOR_DATE,\n                    target.day());\n        }\n        if (DateIntervalType.MONTH.equals(type)\n                || DateIntervalType.QUARTER.equals(type)) {\n\n            return concat(target.year(), SEPARATOR_DATE,\n                    target.month());\n        }\n        if (DateIntervalType.YEAR.equals(type)\n                || DateIntervalType.DECADE.equals(type)\n                || DateIntervalType.CENTURY.equals(type)\n                || DateIntervalType.MILLENIUM.equals(type)) {\n\n            return target.year();\n        }\n        throw new IllegalArgumentException(\"Group '\" + target.getName() +\n                \"' by the given date interval type is not supported: \" + type);\n    }\n\n    @Override\n    public String getFixedDateColumnSQL(FixedDateColumn column) {\n        Column target = column(column.getName());\n        DateIntervalType type = column.getDateType();\n        if (DateIntervalType.SECOND.equals(type)) {\n            return getColumnSQL(target.second());\n        }\n        if (DateIntervalType.MINUTE.equals(type)) {\n            return getColumnSQL(target.minute());\n        }\n        if (DateIntervalType.HOUR.equals(type)) {\n            return getColumnSQL(target.hour());\n        }\n        if (DateIntervalType.DAY_OF_WEEK.equals(type)) {\n            return getColumnSQL(target.day());\n        }\n        if (DateIntervalType.MONTH.equals(type)) {\n            return getColumnSQL(target.month());\n        }\n        if (DateIntervalType.QUARTER.equals(type)) {\n            // Emulated using month and converted to quarter during the data set post-processing\n            return getColumnSQL(target.month());\n        }\n        throw new IllegalArgumentException(\"Interval size '\" + type + \"' not supported for \" +\n                \"fixed date intervals. The only supported sizes are: \" +\n                StringUtils.join(DateIntervalType.FIXED_INTERVALS_SUPPORTED, \",\"));\n    }\n\n    @Override\n    public String getColumnNameSQL(String name) {\n        return name;\n    }\n\n    @Override\n    public String getColumnNameQuotedSQL(String name) {\n        return \"\\\"\" + name + \"\\\"\";\n    }\n\n    @Override\n    public String getAliasForColumnSQL(String alias) {\n        return \"\\\"\" + alias + \"\\\"\";\n    }\n\n    @Override\n    public String getAliasForStatementSQL(String alias) {\n        return \"\\\"\" + alias + \"\\\"\";\n    }\n\n    @Override\n    public String getConditionSQL(Condition condition) {\n        if (condition instanceof CoreCondition) {\n            return getCoreConditionSQL((CoreCondition) condition);\n        }\n        if (condition instanceof LogicalCondition) {\n            return getLogicalConditionSQL((LogicalCondition) condition);\n        }\n        throw new IllegalArgumentException(\"Condition type not supported: \" + condition);\n    }\n\n    @Override\n    public String getCoreConditionSQL(CoreCondition condition) {\n        String columnSQL = getColumnSQL(condition.getColumn());\n        CoreFunctionType type = condition.getFunction();\n        Object[] params = condition.getParameters();\n        if (CoreFunctionType.IS_NULL.equals(type)) {\n            return getIsNullConditionSQL(columnSQL);\n        }\n        if (CoreFunctionType.NOT_NULL.equals(type)) {\n            return getNotNullConditionSQL(columnSQL);\n        }\n        if (CoreFunctionType.EQUALS_TO.equals(type)) {\n            return getIsEqualsToConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.NOT_EQUALS_TO.equals(type)) {\n            return getNotEqualsToConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.NOT_EQUALS_TO.equals(type)) {\n            return getNotEqualsToConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.LIKE_TO.equals(type)) {\n            return getLikeToConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.GREATER_THAN.equals(type)) {\n            return getGreaterThanConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.GREATER_OR_EQUALS_TO.equals(type)) {\n            return getGreaterOrEqualsConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.LOWER_THAN.equals(type)) {\n            return getLowerThanConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.LOWER_OR_EQUALS_TO.equals(type)) {\n            return getLowerOrEqualsConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.BETWEEN.equals(type)) {\n            return getBetweenConditionSQL(columnSQL, params[0], params[1]);\n        }\n        if (CoreFunctionType.IN.equals(type)) {\n            return getInConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.NOT_IN.equals(type)) {\n            return getNotInConditionSQL(columnSQL, params[0]);\n        }\n\n        throw new IllegalArgumentException(\"Core condition type not supported: \" + type);\n    }\n\n    @Override\n    public String getNotNullConditionSQL(String column) {\n        return column + \" IS NOT NULL\";\n    }\n\n    @Override\n    public String getIsNullConditionSQL(String column) {\n        return column + \" IS NULL\";\n    }\n\n    @Override\n    public String getIsEqualsToConditionSQL(String column, Object param) {\n        if (param == null) {\n            return getIsNullConditionSQL(column);\n        } else {\n            String paramStr = getParameterSQL(param);\n            return column + \" = \" + paramStr;\n        }\n    }\n\n    @Override\n    public String getNotEqualsToConditionSQL(String column, Object param) {\n        if (param == null) {\n            return getNotNullConditionSQL(column);\n        } else {\n            String paramStr = getParameterSQL(param);\n            return column + \" <> \" + paramStr;\n        }\n    }\n\n    @Override\n    public String getLikeToConditionSQL(String column, Object param) {\n        String paramStr = getParameterSQL(param);\n        return column + \" LIKE \" + paramStr;\n    }\n\n    @Override\n    public String getGreaterThanConditionSQL(String column, Object param) {\n        String paramStr = getParameterSQL(param);\n        return column + \" > \" + paramStr;\n    }\n\n    @Override\n    public String getGreaterOrEqualsConditionSQL(String column, Object param) {\n        String paramStr = getParameterSQL(param);\n        return column + \" >= \" + paramStr;\n    }\n\n    @Override\n    public String getLowerThanConditionSQL(String column, Object param) {\n        String paramStr = getParameterSQL(param);\n        return column + \" < \" + paramStr;\n    }\n\n    @Override\n    public String getLowerOrEqualsConditionSQL(String column, Object param) {\n        String paramStr = getParameterSQL(param);\n        return column + \" <= \" + paramStr;\n    }\n\n    @Override\n    public String getBetweenConditionSQL(String column, Object from, Object to) {\n        String fromStr = getParameterSQL(from);\n        String toStr = getParameterSQL(to);\n        return column + \" BETWEEN \" + fromStr + AND + toStr;\n    }\n\n    @Override\n    public String getInConditionSQL(String column, Object param) {\n        StringBuilder inStatement = new StringBuilder();\n        inStatement.append(column);\n        inStatement.append(\" IN (\");\n\n        for (Object p : (Collection<?>) param) {\n\n            inStatement.append(getParameterSQL(p) + \",\");\n        }\n        inStatement.deleteCharAt(inStatement.length()-1);\n        inStatement.append(\")\");\n        return inStatement.toString();\n    }\n\n    @Override\n    public String getNotInConditionSQL(String column, Object param) {\n        StringBuilder inStatement = new StringBuilder();\n        inStatement.append(column);\n        inStatement.append(\" NOT IN (\");\n\n        for (Object p : (Collection<?>) param) {\n\n            inStatement.append(getParameterSQL(p) + \",\");\n        }\n        inStatement.deleteCharAt(inStatement.length()-1);\n        inStatement.append(\")\");\n        return inStatement.toString();\n    }\n\n    @Override\n    public String getParameterSQL(Object param) {\n        if (param == null) {\n            return \"null\";\n        }\n        if (param instanceof Number) {\n            return getNumberParameterSQL((Number) param);\n        }\n        if (param instanceof Date) {\n            return getDateParameterSQL((Date) param);\n        }\n        return getStringParameterSQL(param.toString());\n    }\n\n\n    @Override\n    public String getNumberParameterSQL(Number param) {\n        return param.toString();\n    }\n\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n\n    @Override\n    public String getDateParameterSQL(Date param) {\n        // timestamp '2015-08-24 13:14:36.615'\n        return \"TIMESTAMP '\" + dateFormat.format(param) + \"'\";\n    }\n\n    @Override\n    public String getStringParameterSQL(String param) {\n        // DASHBUILDE-113: SQL Injection on data set lookup filters\n        String escapedParam = param.replaceAll(\"'\", \"''\");\n        return \"'\" + escapedParam + \"'\";\n    }\n\n    @Override\n    public String getLogicalConditionSQL(LogicalCondition condition) {\n        LogicalExprType type = condition.getType();\n        Condition[] conditions = condition.getConditions();\n        if (LogicalExprType.NOT.equals(type)) {\n            return getNotExprConditionSQL(conditions[0]);\n        }\n        if (LogicalExprType.AND.equals(type)) {\n            return getAndExprConditionSQL(conditions);\n        }\n        if (LogicalExprType.OR.equals(type)) {\n            return getOrExprConditionSQL(conditions);\n        }\n        throw new IllegalArgumentException(\"Logical condition type not supported: \" + type);\n    }\n\n    @Override\n    public String getNotExprConditionSQL(Condition condition) {\n        String conditionSQL = getConditionSQL(condition);\n        return \"NOT(\" + conditionSQL + \")\";\n    }\n\n    @Override\n    public String getAndExprConditionSQL(Condition[] conditions) {\n        return _getLogicalExprConditionSQL(conditions, \"AND\");\n    }\n\n    @Override\n    public String getOrExprConditionSQL(Condition[] conditions) {\n        return _getLogicalExprConditionSQL(conditions, \"OR\");\n    }\n\n    protected String _getLogicalExprConditionSQL(Condition[] conditions, String op) {\n        StringBuilder out = new StringBuilder();\n        out.append(\"(\");\n        for (int i = 0; i < conditions.length; i++) {\n            Condition condition = conditions[i];\n            String conditionSQL = getConditionSQL(condition);\n            if (i > 0) {\n                out.append(\" \").append(op).append(\" \");\n            }\n            out.append(conditionSQL);\n        }\n        out.append(\")\");\n        return out.toString();\n    }\n\n    @Override\n    public String getColumnFunctionSQL(String column, AggregateFunctionType function) {\n        switch (function) {\n            case SUM: {\n                return \"SUM(\" + column + \")\";\n            }\n            case MAX: {\n                return \"MAX(\" + column + \")\";\n            }\n            case MIN: {\n                return \"MIN(\" + column + \")\";\n            }\n            case AVERAGE: {\n                return \"AVG(\" + column + \")\";\n            }\n            case COUNT: {\n                return \"COUNT(\" + column + \")\";\n            }\n            case DISTINCT: {\n                return \"COUNT(DISTINCT \" + column + \")\";\n            }\n            default: {\n                throw new IllegalArgumentException(\"Function type not valid: \" + function);\n            }\n        }\n    }\n\n    @Override\n    public String getCountQuerySQL(Select select) {\n        List<SortColumn> sortColumns = new ArrayList<SortColumn>();\n        sortColumns.addAll(select.getOrderBys());\n        try {\n            // Remove ORDER BY for better performance\n            select.getOrderBys().clear();\n            return \"SELECT \"\n                    + getColumnFunctionSQL(\"*\", AggregateFunctionType.COUNT)\n                    + \" FROM (\" + select.getSQL() + \") \"\n                    + getAliasForColumnSQL(\"dbSQL\");\n        } finally {\n            select.orderBy(sortColumns);\n        }\n    }\n\n    @Override\n    public String getSQL(CreateTable create) {\n        StringBuilder sql = new StringBuilder(\"CREATE TABLE \");\n        List<String> pkeys = new ArrayList<String>();\n        String tname = getTableSQL(create);\n        sql.append(tname);\n\n        // Columns\n        boolean first = true;\n        sql.append(\" (\\n\");\n        for (Column column : create.getColumns()) {\n            if (!first) {\n                sql.append(\",\\n\");\n            }\n            String name = getColumnNameSQL(column.getName());\n            String type = getColumnTypeSQL(column);\n            sql.append(\" \").append(name).append(\" \").append(type);\n            if (create.getPrimaryKeys().contains(column)) {\n                sql.append(\" NOT NULL\");\n                pkeys.add(name);\n            }\n            first = false;\n        }\n        if (!create.getPrimaryKeys().isEmpty()) {\n            sql.append(\",\\n\");\n            sql.append(\" PRIMARY KEY(\");\n            sql.append(StringUtils.join(pkeys, \",\"));\n            sql.append(\")\\n\");\n        }\n        sql.append(\")\");\n        return sql.toString();\n    }\n\n    @Override\n    public String getSQL(Select select) {\n        // Select clause\n        StringBuilder sql = new StringBuilder();\n        String selectClause = getSelectSQL(select);\n        sql.append(selectClause);\n\n        // From clause (inner SQL or table)\n        sql.append(\" \").append(getFromSQL(select));\n\n        // Where clauses\n        List<Condition> wheres = select.getWheres();\n        if (!wheres.isEmpty()) {\n            sql.append(\" \").append(getWhereSQL(select));\n        }\n\n        // Group by\n        List<Column> groupBys = select.getGroupBys();\n        if (!groupBys.isEmpty()) {\n            sql.append(\" \").append(getGroupBySQL(select));\n        }\n\n        // Order by\n        List<SortColumn> orderBys = select.getOrderBys();\n        if (!orderBys.isEmpty()) {\n            sql.append(\" \").append(getOrderBySQL(select));\n        }\n\n        // Limits\n        int limit = select.getLimit();\n        int offset = select.getOffset();\n        if (limit > 0 || offset > 0) {\n            String limitSql = getOffsetLimitSQL(select);\n            if (!StringUtils.isBlank(limitSql)) {\n                sql.append(limitSql);\n            }\n        }\n        return sql.toString();\n    }\n\n    @Override\n    public String getSQL(Insert insert) {\n        // Insert clause\n        StringBuilder sql = new StringBuilder();\n        String insertClause = getInsertStatement(insert);\n        sql.append(insertClause);\n\n        // Table\n        sql.append(\" \").append(getTableSQL(insert));\n\n        // Columns\n        boolean first = true;\n        sql.append(\" (\");\n        for (Column column : insert.getColumns()) {\n            if (!first) {\n                sql.append(\",\");\n            }\n            String str = getColumnSQL(column);\n            sql.append(str);\n            first = false;\n        }\n        sql.append(\")\");\n\n        // Values\n        first = true;\n        sql.append(\" VALUES (\");\n        for (Object value : insert.getValues()) {\n            if (!first) {\n                sql.append(\",\");\n            }\n            String str = getParameterSQL(value);\n            sql.append(str);\n            first = false;\n        }\n        sql.append(\")\");\n        return sql.toString();\n    }\n\n    @Override\n    public String getSQL(Delete delete) {\n        // Delete clause\n        StringBuilder sql = new StringBuilder();\n        String deleteClause = getDeleteStatement(delete);\n        sql.append(deleteClause);\n\n        // From clause\n        sql.append(\" \").append(getTableSQL(delete));\n\n        // Where clauses\n        List<Condition> wheres = delete.getWheres();\n        if (!wheres.isEmpty()) {\n            sql.append(\" \").append(getWhereSQL(delete));\n        }\n\n        return sql.toString();\n    }\n\n    @Override\n    public String getSelectSQL(Select select) {\n        StringBuilder clause = new StringBuilder();\n        clause.append(getSelectStatement(select));\n\n        clause.append(\" \");\n        if (select.getColumns().isEmpty()) {\n            clause.append(\"*\");\n        } else {\n            boolean first = true;\n            for (Column column : select.getColumns()) {\n                if (!first) {\n                    clause.append(\", \");\n                }\n                String str = getColumnSQL(column);\n                boolean aliasNonEmpty = !StringUtils.isBlank(column.getAlias());\n                boolean isSimpleColumn = (column instanceof SimpleColumn) && !str.equals(getColumnNameSQL(column.getAlias()));\n\n                if (aliasNonEmpty && (allowAliasInStatements() || isSimpleColumn)) {\n                    str += \" \" + getAliasForColumnSQL(column.getAlias());\n                }\n                clause.append(str);\n                first = false;\n            }\n        }\n        return clause.toString();\n    }\n\n    @Override\n    public String getFromSQL(Select select) {\n        String fromSelect = select.getFromSelect();\n        Table fromTable = select.getFromTable();\n        String from = getFromStatement(select);\n\n        if (fromSelect != null) {\n            String alias = getAliasForColumnSQL(\"dbSQL\");\n            return from  + \" (\" + fromSelect + \") \" + alias;\n        }\n        else if (fromTable != null ){\n            String table = getTableSQL(select);\n            return from + \" \" + table;\n        }\n        return \"\";\n    }\n\n    @Override\n    public String getWhereSQL(Select select) {\n        StringBuilder sql = new StringBuilder();\n        List<Condition> wheres = select.getWheres();\n        boolean first = true;\n        for (Condition condition : wheres) {\n            if (first) {\n                sql.append(getWhereStatement(select)).append(\" \");\n            } else {\n                sql.append(AND);\n            }\n            String str = getConditionSQL(condition);\n            sql.append(str);\n            first = false;\n        }\n        return sql.toString();\n    }\n\n    @Override\n    public String getWhereSQL(Delete delete) {\n        StringBuilder sql = new StringBuilder();\n        List<Condition> wheres = delete.getWheres();\n        boolean first = true;\n        for (Condition condition : wheres) {\n            if (first) {\n                sql.append(getWhereStatement(delete)).append(\" \");\n            } else {\n                sql.append(AND);\n            }\n            String str = getConditionSQL(condition);\n            sql.append(str);\n            first = false;\n        }\n        return sql.toString();\n    }\n\n    @Override\n    public String getGroupBySQL(Select select) {\n        StringBuilder sql = new StringBuilder();\n        List<Column> groupBys = select.getGroupBys();\n        boolean first = true;\n        for (Column column : groupBys) {\n            if (first) {\n                sql.append(getGroupByStatement(select)).append(\" \");\n            } else {\n                sql.append(\", \");\n            }\n            Column aliasColumn = allowAliasInStatements() ? getAliasStatement(select, column) : null;\n            sql.append(aliasColumn != null ? getAliasForStatementSQL(aliasColumn.getAlias()) : getColumnSQL(column));\n            first = false;\n        }\n        return sql.toString();\n    }\n\n    @Override\n    public String getOrderBySQL(Select select) {\n        StringBuilder sql = new StringBuilder();\n        List<SortColumn> orderBys = select.getOrderBys();\n        boolean first = true;\n        for (SortColumn column : orderBys) {\n            if (first) {\n                sql.append(getOrderByStatement(select)).append(\" \");\n            } else {\n                sql.append(\", \");\n            }\n            Column aliasColumn = allowAliasInStatements() ? getAliasStatement(select, column.getSource()) : null;\n            if (aliasColumn != null) {\n                column = new SortColumn(aliasColumn, column.getOrder());\n            }\n            String str = getSortColumnSQL(column);\n            sql.append(str);\n            first = false;\n        }\n        return sql.toString();\n    }\n\n    @Override\n    public String getOffsetLimitSQL(Select select) {\n        int offset = select.getOffset();\n        int limit = select.getLimit();\n        StringBuilder out = new StringBuilder();\n        if (limit > 0) out.append(\" LIMIT \").append(limit);\n        if (offset > 0) out.append(\" OFFSET \").append(offset);\n        return out.toString();\n    }\n\n    @Override\n    public String getSelectStatement(Select select) {\n        return \"SELECT\";\n    }\n\n    @Override\n    public String getInsertStatement(Insert insert) {\n        return \"INSERT INTO\";\n    }\n\n    @Override\n    public String getDeleteStatement(Delete delete) {\n        return \"DELETE FROM\";\n    }\n\n    @Override\n    public String getFromStatement(Select select) {\n        return \"FROM\";\n    }\n\n    @Override\n    public String getWhereStatement(Select select) {\n        return \"WHERE\";\n    }\n\n    @Override\n    public String getWhereStatement(Delete delete) {\n        return \"WHERE\";\n    }\n\n    @Override\n    public String getGroupByStatement(Select select) {\n        return \"GROUP BY\";\n    }\n\n    @Override\n    public String getOrderByStatement(Select select) {\n        return \"ORDER BY\";\n    }\n\n    // Helper methods\n\n    protected Object invokeMethod(Object o, String methodName, Object[] params) {\n        Method methods[] = o.getClass().getMethods();\n        for (int i = 0; i < methods.length; ++i) {\n            if (methodName.equals(methods[i].getName())) {\n                try {\n                    methods[i].setAccessible(true);\n                    return methods[i].invoke(o, params);\n                }\n                catch (IllegalAccessException ex) {\n                    return null;\n                }\n                catch (InvocationTargetException ite) {\n                    return null;\n                }\n            }\n        }\n        return null;\n    }\n\n    public boolean areEquals(Column column1, Column column2) {\n        if (!column1.getName().equals(column2.getName())) {\n            return false;\n        }\n        if (!column1.getClass().getName().equals(column2.getClass().getName())) {\n            return false;\n        }\n        if (column1 instanceof DynamicDateColumn) {\n            DynamicDateColumn dd1 = (DynamicDateColumn) column1;\n            DynamicDateColumn dd2 = (DynamicDateColumn) column2;\n            if (!dd1.getDateType().equals(dd2.getDateType())) {\n                return false;\n            }\n        }\n        if (column1 instanceof FixedDateColumn) {\n            FixedDateColumn fd1 = (FixedDateColumn) column1;\n            FixedDateColumn fd2 = (FixedDateColumn) column2;\n            if (!fd1.getDateType().equals(fd2.getDateType())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean allowAliasInStatements() {\n        return false;\n    }\n\n    public Column getAliasStatement(Select select, Column target) {\n        for (Column column : select.getColumns()) {\n            if (!(column instanceof SimpleColumn) &&\n                    !StringUtils.isBlank(column.getAlias()) &&\n                    areEquals(column, target)) {\n\n                return column;\n            }\n        }\n        return null;\n    }\n}\n", "code_before": "/*\n * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.dashbuilder.dataprovider.sql.dialect;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.List;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.dashbuilder.dataprovider.sql.model.Column;\nimport org.dashbuilder.dataprovider.sql.model.Condition;\nimport org.dashbuilder.dataprovider.sql.model.CoreCondition;\nimport org.dashbuilder.dataprovider.sql.model.CreateTable;\nimport org.dashbuilder.dataprovider.sql.model.Delete;\nimport org.dashbuilder.dataprovider.sql.model.DynamicDateColumn;\nimport org.dashbuilder.dataprovider.sql.model.FixedDateColumn;\nimport org.dashbuilder.dataprovider.sql.model.FunctionColumn;\nimport org.dashbuilder.dataprovider.sql.model.Insert;\nimport org.dashbuilder.dataprovider.sql.model.LogicalCondition;\nimport org.dashbuilder.dataprovider.sql.model.SQLStatement;\nimport org.dashbuilder.dataprovider.sql.model.Select;\nimport org.dashbuilder.dataprovider.sql.model.SimpleColumn;\nimport org.dashbuilder.dataprovider.sql.model.SortColumn;\nimport org.dashbuilder.dataprovider.sql.model.Table;\nimport org.dashbuilder.dataset.ColumnType;\nimport org.dashbuilder.dataset.filter.CoreFunctionType;\nimport org.dashbuilder.dataset.filter.LogicalExprType;\nimport org.dashbuilder.dataset.group.AggregateFunctionType;\nimport org.dashbuilder.dataset.group.DateIntervalType;\nimport org.dashbuilder.dataset.sort.SortOrder;\n\nimport static org.dashbuilder.dataprovider.sql.SQLFactory.*;\n\npublic class DefaultDialect implements Dialect {\n\n    private static final String AND = \" AND \";\n\n    @Override\n    public String[] getExcludedColumns() {\n        return new String[] {};\n    }\n\n    @Override\n    public String getColumnSQL(Column column) {\n\n        if (column instanceof FunctionColumn) {\n            return getFunctionColumnSQL((FunctionColumn) column);\n        }\n        else if (column instanceof SortColumn) {\n            return getSortColumnSQL((SortColumn) column);\n        }\n        else if (column instanceof DynamicDateColumn) {\n            return getDynamicDateColumnSQL((DynamicDateColumn) column);\n        }\n        else if (column instanceof FixedDateColumn) {\n            return getFixedDateColumnSQL((FixedDateColumn) column);\n        }\n        else if (column instanceof SimpleColumn) {\n            return getSimpleColumnSQL((SimpleColumn) column);\n        }\n        else {\n            return getColumnNameSQL(column.getName());\n        }\n    }\n\n    @Override\n    public String getColumnTypeSQL(Column column) {\n        switch (column.getType()) {\n            case NUMBER: {\n                return \"NUMERIC(28,2)\";\n            }\n            case DATE: {\n                return \"TIMESTAMP\";\n            }\n            default: {\n                return \"VARCHAR(\" + column.getLength() + \")\";\n            }\n        }\n    }\n\n    @Override\n    public String convertToString(Object value) {\n        try {\n            return value == null ? null : (String) value;\n        } catch (ClassCastException e) {\n            return value.toString();\n        }\n    }\n\n    @Override\n    public Double convertToDouble(Object value) {\n        try {\n            return value == null ? null : ((Number) value).doubleValue();\n        } catch (ClassCastException e) {\n            return Double.parseDouble(value.toString());\n        }\n    }\n\n    @Override\n    public Date convertToDate(Object value) {\n        try {\n            return value == null ? null : (Date) value;\n        } catch (ClassCastException e) {\n            throw new IllegalArgumentException(\"Not a java.util.Date: \" + value + \" (\" + value.getClass().getName() + \")\");\n        }\n    }\n\n    @Override\n    public String getTableSQL(SQLStatement<?> stmt) {\n        Table table = stmt.getTable();\n        String name = getTableNameSQL(table.getName());\n        if (StringUtils.isBlank(table.getSchema())) {\n            return name;\n        } else{\n            return getSchemaNameSQL(table.getSchema()) + \".\" + name;\n        }\n    }\n\n    @Override\n    public String getTableNameSQL(String name) {\n        return name;\n    }\n\n    @Override\n    public String getSchemaNameSQL(String name) {\n        return name;\n    }\n\n    @Override\n    public String getSimpleColumnSQL(SimpleColumn column) {\n        String result = getColumnNameSQL(column.getName());\n        if (column.getFunctionType() != null) {\n            result = getColumnFunctionSQL(result, column.getFunctionType());\n        }\n        return result;\n    }\n\n    @Override\n    public String getFunctionColumnSQL(FunctionColumn column) {\n        if (FunctionColumn.LOWER.equals(column.getFunction())) {\n            return getLowerFunctionSQL(column.getColumns()[0]);\n        }\n        if (FunctionColumn.CONCAT.equals(column.getFunction())) {\n            return getConcatFunctionSQL(column.getColumns());\n        }\n        if (FunctionColumn.YEAR.equals(column.getFunction())) {\n            return getDatePartFunctionSQL(\"YEAR\", column.getColumns()[0]);\n        }\n        if (FunctionColumn.MONTH.equals(column.getFunction())) {\n            return getDatePartFunctionSQL(\"MONTH\", column.getColumns()[0]);\n        }\n        if (FunctionColumn.DAY.equals(column.getFunction())) {\n            return getDatePartFunctionSQL(\"DAY\", column.getColumns()[0]);\n        }\n        if (FunctionColumn.HOUR.equals(column.getFunction())) {\n            return getDatePartFunctionSQL(\"HOUR\", column.getColumns()[0]);\n        }\n        if (FunctionColumn.MINUTE.equals(column.getFunction())) {\n            return getDatePartFunctionSQL(\"MINUTE\", column.getColumns()[0]);\n        }\n        if (FunctionColumn.SECOND.equals(column.getFunction())) {\n            return getDatePartFunctionSQL(\"SECOND\", column.getColumns()[0]);\n        }\n        throw new IllegalArgumentException(\"Column function not supported: \" + column.getFunction());\n    }\n\n    @Override\n    public String getLowerFunctionSQL(Column column) {\n        String columnSQL = getColumnSQL(column);\n        return \"LOWER(\" + columnSQL + \")\";\n    }\n\n    @Override\n    public String getConcatFunctionSQL(Column[] columns) {\n        return getConcatFunctionSQL(columns, \"(\", \")\", \" || \");\n    }\n\n    public String getConcatFunctionSQL(Column[] columns, String begin, String end, String separator) {\n        StringBuilder out = new StringBuilder();\n        out.append(begin);\n        for (int i = 0; i < columns.length; i++) {\n            if (i > 0) out.append(separator);\n            Column column = columns[i];\n            ColumnType type = column.getType();\n            if (ColumnType.LABEL.equals(type) || ColumnType.TEXT.equals(type)) {\n                out.append(\"'\").append(column.getName()).append(\"'\");\n            } else {\n                // Cast needed\n                out.append(getColumnCastSQL(column));\n            }\n        }\n        out.append(end);\n        return out.toString();\n    }\n\n    public String getColumnCastSQL(Column column) {\n        String columnSQL = getColumnSQL(column);\n        return \"CAST(\" + columnSQL + \" AS VARCHAR)\";\n    }\n\n    @Override\n    public String getDatePartFunctionSQL(String part, Column column) {\n        String columnSQL = getColumnSQL(column);\n        return \"EXTRACT(\" + part + \" FROM \" + columnSQL + \")\";\n    }\n\n    @Override\n    public String getSortColumnSQL(SortColumn sortColumn) {\n\n        Column column = sortColumn.getSource();\n        String columnSQL = getColumnSQL(column);\n\n        // Always order by the alias (if any)\n        if (!StringUtils.isBlank(column.getAlias())) {\n            columnSQL = getAliasForStatementSQL(column.getAlias());\n        }\n        return columnSQL + \" \" + getSortOrderSQL(sortColumn.getOrder());\n    }\n\n    @Override\n    public String getSortOrderSQL(SortOrder order) {\n        if (SortOrder.ASCENDING.equals(order)) {\n            return \"ASC\";\n        }\n        if (SortOrder.DESCENDING.equals(order)) {\n            return \"DESC\";\n        }\n        throw new IllegalArgumentException(\"Sort order not supported: \" + order);\n    }\n\n    /**\n     * The text conversion of a date column is very DB specific.\n     * A mechanism combining  concat and extract functions is used by default.\n     * Depending on the DB dialect a more polished approach can be used.\n     * For instance, <ul>\n     * <li>In Oracle and Postgres the 'to_char' function is used.</li>\n     * <li>In Mysql, 'date_format'</li>\n     * <li>In H2, the 'to_char' function is not used as it's only available since version 1.3.175 and we do need to support older versions.</li>\n     * </ul>\n     */\n    @Override\n    public String getDynamicDateColumnSQL(DynamicDateColumn column) {\n        Column dateColumn = toChar(column);\n        return getColumnSQL(dateColumn);\n    }\n\n    public Column toChar(DynamicDateColumn column) {\n        Column target = column(column.getName());\n        DateIntervalType type = column.getDateType();\n        Column SEPARATOR_DATE = column(\"-\", ColumnType.TEXT, 3);\n        Column SEPARATOR_EMPTY = column(\" \", ColumnType.TEXT, 3);\n        Column SEPARATOR_TIME = column(\":\", ColumnType.TEXT, 3);\n\n        if (DateIntervalType.SECOND.equals(type)) {\n            return concat(target.year(), SEPARATOR_DATE,\n                    target.month(), SEPARATOR_DATE,\n                    target.day(), SEPARATOR_EMPTY,\n                    target.hour(), SEPARATOR_TIME,\n                    target.minute(), SEPARATOR_TIME,\n                    target.second());\n        }\n        if (DateIntervalType.MINUTE.equals(type)) {\n            return concat(target.year(), SEPARATOR_DATE,\n                    target.month(), SEPARATOR_DATE,\n                    target.day(), SEPARATOR_EMPTY,\n                    target.hour(), SEPARATOR_TIME,\n                    target.minute());\n        }\n        if (DateIntervalType.HOUR.equals(type)) {\n            return concat(target.year(), SEPARATOR_DATE,\n                    target.month(), SEPARATOR_DATE,\n                    target.day(), SEPARATOR_EMPTY,\n                    target.hour());\n        }\n        if (DateIntervalType.DAY.equals(type) || DateIntervalType.WEEK.equals(type)) {\n            return concat(target.year(), SEPARATOR_DATE,\n                    target.month(), SEPARATOR_DATE,\n                    target.day());\n        }\n        if (DateIntervalType.MONTH.equals(type)\n                || DateIntervalType.QUARTER.equals(type)) {\n\n            return concat(target.year(), SEPARATOR_DATE,\n                    target.month());\n        }\n        if (DateIntervalType.YEAR.equals(type)\n                || DateIntervalType.DECADE.equals(type)\n                || DateIntervalType.CENTURY.equals(type)\n                || DateIntervalType.MILLENIUM.equals(type)) {\n\n            return target.year();\n        }\n        throw new IllegalArgumentException(\"Group '\" + target.getName() +\n                \"' by the given date interval type is not supported: \" + type);\n    }\n\n    @Override\n    public String getFixedDateColumnSQL(FixedDateColumn column) {\n        Column target = column(column.getName());\n        DateIntervalType type = column.getDateType();\n        if (DateIntervalType.SECOND.equals(type)) {\n            return getColumnSQL(target.second());\n        }\n        if (DateIntervalType.MINUTE.equals(type)) {\n            return getColumnSQL(target.minute());\n        }\n        if (DateIntervalType.HOUR.equals(type)) {\n            return getColumnSQL(target.hour());\n        }\n        if (DateIntervalType.DAY_OF_WEEK.equals(type)) {\n            return getColumnSQL(target.day());\n        }\n        if (DateIntervalType.MONTH.equals(type)) {\n            return getColumnSQL(target.month());\n        }\n        if (DateIntervalType.QUARTER.equals(type)) {\n            // Emulated using month and converted to quarter during the data set post-processing\n            return getColumnSQL(target.month());\n        }\n        throw new IllegalArgumentException(\"Interval size '\" + type + \"' not supported for \" +\n                \"fixed date intervals. The only supported sizes are: \" +\n                StringUtils.join(DateIntervalType.FIXED_INTERVALS_SUPPORTED, \",\"));\n    }\n\n    @Override\n    public String getColumnNameSQL(String name) {\n        return name;\n    }\n\n    @Override\n    public String getColumnNameQuotedSQL(String name) {\n        return \"\\\"\" + name + \"\\\"\";\n    }\n\n    @Override\n    public String getAliasForColumnSQL(String alias) {\n        return \"\\\"\" + alias + \"\\\"\";\n    }\n\n    @Override\n    public String getAliasForStatementSQL(String alias) {\n        return \"\\\"\" + alias + \"\\\"\";\n    }\n\n    @Override\n    public String getConditionSQL(Condition condition) {\n        if (condition instanceof CoreCondition) {\n            return getCoreConditionSQL((CoreCondition) condition);\n        }\n        if (condition instanceof LogicalCondition) {\n            return getLogicalConditionSQL((LogicalCondition) condition);\n        }\n        throw new IllegalArgumentException(\"Condition type not supported: \" + condition);\n    }\n\n    @Override\n    public String getCoreConditionSQL(CoreCondition condition) {\n        String columnSQL = getColumnSQL(condition.getColumn());\n        CoreFunctionType type = condition.getFunction();\n        Object[] params = condition.getParameters();\n        if (CoreFunctionType.IS_NULL.equals(type)) {\n            return getIsNullConditionSQL(columnSQL);\n        }\n        if (CoreFunctionType.NOT_NULL.equals(type)) {\n            return getNotNullConditionSQL(columnSQL);\n        }\n        if (CoreFunctionType.EQUALS_TO.equals(type)) {\n            return getIsEqualsToConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.NOT_EQUALS_TO.equals(type)) {\n            return getNotEqualsToConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.NOT_EQUALS_TO.equals(type)) {\n            return getNotEqualsToConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.LIKE_TO.equals(type)) {\n            return getLikeToConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.GREATER_THAN.equals(type)) {\n            return getGreaterThanConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.GREATER_OR_EQUALS_TO.equals(type)) {\n            return getGreaterOrEqualsConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.LOWER_THAN.equals(type)) {\n            return getLowerThanConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.LOWER_OR_EQUALS_TO.equals(type)) {\n            return getLowerOrEqualsConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.BETWEEN.equals(type)) {\n            return getBetweenConditionSQL(columnSQL, params[0], params[1]);\n        }\n        if (CoreFunctionType.IN.equals(type)) {\n            return getInConditionSQL(columnSQL, params[0]);\n        }\n        if (CoreFunctionType.NOT_IN.equals(type)) {\n            return getNotInConditionSQL(columnSQL, params[0]);\n        }\n\n        throw new IllegalArgumentException(\"Core condition type not supported: \" + type);\n    }\n\n    @Override\n    public String getNotNullConditionSQL(String column) {\n        return column + \" IS NOT NULL\";\n    }\n\n    @Override\n    public String getIsNullConditionSQL(String column) {\n        return column + \" IS NULL\";\n    }\n\n    @Override\n    public String getIsEqualsToConditionSQL(String column, Object param) {\n        if (param == null) {\n            return getIsNullConditionSQL(column);\n        } else {\n            String paramStr = getParameterSQL(param);\n            return column + \" = \" + paramStr;\n        }\n    }\n\n    @Override\n    public String getNotEqualsToConditionSQL(String column, Object param) {\n        if (param == null) {\n            return getNotNullConditionSQL(column);\n        } else {\n            String paramStr = getParameterSQL(param);\n            return column + \" <> \" + paramStr;\n        }\n    }\n\n    @Override\n    public String getLikeToConditionSQL(String column, Object param) {\n        String paramStr = getParameterSQL(param);\n        return column + \" LIKE \" + paramStr;\n    }\n\n    @Override\n    public String getGreaterThanConditionSQL(String column, Object param) {\n        String paramStr = getParameterSQL(param);\n        return column + \" > \" + paramStr;\n    }\n\n    @Override\n    public String getGreaterOrEqualsConditionSQL(String column, Object param) {\n        String paramStr = getParameterSQL(param);\n        return column + \" >= \" + paramStr;\n    }\n\n    @Override\n    public String getLowerThanConditionSQL(String column, Object param) {\n        String paramStr = getParameterSQL(param);\n        return column + \" < \" + paramStr;\n    }\n\n    @Override\n    public String getLowerOrEqualsConditionSQL(String column, Object param) {\n        String paramStr = getParameterSQL(param);\n        return column + \" <= \" + paramStr;\n    }\n\n    @Override\n    public String getBetweenConditionSQL(String column, Object from, Object to) {\n        String fromStr = getParameterSQL(from);\n        String toStr = getParameterSQL(to);\n        return column + \" BETWEEN \" + fromStr + AND + toStr;\n    }\n\n    @Override\n    public String getInConditionSQL(String column, Object param) {\n        StringBuilder inStatement = new StringBuilder();\n        inStatement.append(column);\n        inStatement.append(\" IN (\");\n\n        for (Object p : (Collection<?>) param) {\n\n            inStatement.append(getParameterSQL(p) + \",\");\n        }\n        inStatement.deleteCharAt(inStatement.length()-1);\n        inStatement.append(\")\");\n        return inStatement.toString();\n    }\n\n    @Override\n    public String getNotInConditionSQL(String column, Object param) {\n        StringBuilder inStatement = new StringBuilder();\n        inStatement.append(column);\n        inStatement.append(\" NOT IN (\");\n\n        for (Object p : (Collection<?>) param) {\n\n            inStatement.append(getParameterSQL(p) + \",\");\n        }\n        inStatement.deleteCharAt(inStatement.length()-1);\n        inStatement.append(\")\");\n        return inStatement.toString();\n    }\n\n    @Override\n    public String getParameterSQL(Object param) {\n        if (param == null) {\n            return \"null\";\n        }\n        if (param instanceof Number) {\n            return getNumberParameterSQL((Number) param);\n        }\n        if (param instanceof Date) {\n            return getDateParameterSQL((Date) param);\n        }\n        return getStringParameterSQL(param.toString());\n    }\n\n\n    @Override\n    public String getNumberParameterSQL(Number param) {\n        return param.toString();\n    }\n\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n\n    @Override\n    public String getDateParameterSQL(Date param) {\n        // timestamp '2015-08-24 13:14:36.615'\n        return \"TIMESTAMP '\" + dateFormat.format(param) + \"'\";\n    }\n\n    @Override\n    public String getStringParameterSQL(String param) {\n        // DASHBUILDE-113: SQL Injection on data set lookup filters\n        String escapedParam = param.replaceAll(\"'\", \"''\");\n        return \"'\" + escapedParam + \"'\";\n    }\n\n    @Override\n    public String getLogicalConditionSQL(LogicalCondition condition) {\n        LogicalExprType type = condition.getType();\n        Condition[] conditions = condition.getConditions();\n        if (LogicalExprType.NOT.equals(type)) {\n            return getNotExprConditionSQL(conditions[0]);\n        }\n        if (LogicalExprType.AND.equals(type)) {\n            return getAndExprConditionSQL(conditions);\n        }\n        if (LogicalExprType.OR.equals(type)) {\n            return getOrExprConditionSQL(conditions);\n        }\n        throw new IllegalArgumentException(\"Logical condition type not supported: \" + type);\n    }\n\n    @Override\n    public String getNotExprConditionSQL(Condition condition) {\n        String conditionSQL = getConditionSQL(condition);\n        return \"NOT(\" + conditionSQL + \")\";\n    }\n\n    @Override\n    public String getAndExprConditionSQL(Condition[] conditions) {\n        return _getLogicalExprConditionSQL(conditions, \"AND\");\n    }\n\n    @Override\n    public String getOrExprConditionSQL(Condition[] conditions) {\n        return _getLogicalExprConditionSQL(conditions, \"OR\");\n    }\n\n    protected String _getLogicalExprConditionSQL(Condition[] conditions, String op) {\n        StringBuilder out = new StringBuilder();\n        out.append(\"(\");\n        for (int i = 0; i < conditions.length; i++) {\n            Condition condition = conditions[i];\n            String conditionSQL = getConditionSQL(condition);\n            if (i > 0) {\n                out.append(\" \").append(op).append(\" \");\n            }\n            out.append(conditionSQL);\n        }\n        out.append(\")\");\n        return out.toString();\n    }\n\n    @Override\n    public String getColumnFunctionSQL(String column, AggregateFunctionType function) {\n        switch (function) {\n            case SUM: {\n                return \"SUM(\" + column + \")\";\n            }\n            case MAX: {\n                return \"MAX(\" + column + \")\";\n            }\n            case MIN: {\n                return \"MIN(\" + column + \")\";\n            }\n            case AVERAGE: {\n                return \"AVG(\" + column + \")\";\n            }\n            case COUNT: {\n                return \"COUNT(\" + column + \")\";\n            }\n            case DISTINCT: {\n                return \"COUNT(DISTINCT \" + column + \")\";\n            }\n            default: {\n                throw new IllegalArgumentException(\"Function type not valid: \" + function);\n            }\n        }\n    }\n\n    @Override\n    public String getCountQuerySQL(Select select) {\n        List<SortColumn> sortColumns = new ArrayList<SortColumn>();\n        sortColumns.addAll(select.getOrderBys());\n        try {\n            // Remove ORDER BY for better performance\n            select.getOrderBys().clear();\n            return \"SELECT \"\n                    + getColumnFunctionSQL(\"*\", AggregateFunctionType.COUNT)\n                    + \" FROM (\" + select.getSQL() + \") \"\n                    + getAliasForColumnSQL(\"dbSQL\");\n        } finally {\n            select.orderBy(sortColumns);\n        }\n    }\n\n    @Override\n    public String getSQL(CreateTable create) {\n        StringBuilder sql = new StringBuilder(\"CREATE TABLE \");\n        List<String> pkeys = new ArrayList<String>();\n        String tname = getTableSQL(create);\n        sql.append(tname);\n\n        // Columns\n        boolean first = true;\n        sql.append(\" (\\n\");\n        for (Column column : create.getColumns()) {\n            if (!first) {\n                sql.append(\",\\n\");\n            }\n            String name = getColumnNameSQL(column.getName());\n            String type = getColumnTypeSQL(column);\n            sql.append(\" \").append(name).append(\" \").append(type);\n            if (create.getPrimaryKeys().contains(column)) {\n                sql.append(\" NOT NULL\");\n                pkeys.add(name);\n            }\n            first = false;\n        }\n        if (!create.getPrimaryKeys().isEmpty()) {\n            sql.append(\",\\n\");\n            sql.append(\" PRIMARY KEY(\");\n            sql.append(StringUtils.join(pkeys, \",\"));\n            sql.append(\")\\n\");\n        }\n        sql.append(\")\");\n        return sql.toString();\n    }\n\n    @Override\n    public String getSQL(Select select) {\n        // Select clause\n        StringBuilder sql = new StringBuilder();\n        String selectClause = getSelectSQL(select);\n        sql.append(selectClause);\n\n        // From clause (inner SQL or table)\n        sql.append(\" \").append(getFromSQL(select));\n\n        // Where clauses\n        List<Condition> wheres = select.getWheres();\n        if (!wheres.isEmpty()) {\n            sql.append(\" \").append(getWhereSQL(select));\n        }\n\n        // Group by\n        List<Column> groupBys = select.getGroupBys();\n        if (!groupBys.isEmpty()) {\n            sql.append(\" \").append(getGroupBySQL(select));\n        }\n\n        // Order by\n        List<SortColumn> orderBys = select.getOrderBys();\n        if (!orderBys.isEmpty()) {\n            sql.append(\" \").append(getOrderBySQL(select));\n        }\n\n        // Limits\n        int limit = select.getLimit();\n        int offset = select.getOffset();\n        if (limit > 0 || offset > 0) {\n            String limitSql = getOffsetLimitSQL(select);\n            if (!StringUtils.isBlank(limitSql)) {\n                sql.append(limitSql);\n            }\n        }\n        return sql.toString();\n    }\n\n    @Override\n    public String getSQL(Insert insert) {\n        // Insert clause\n        StringBuilder sql = new StringBuilder();\n        String insertClause = getInsertStatement(insert);\n        sql.append(insertClause);\n\n        // Table\n        sql.append(\" \").append(getTableSQL(insert));\n\n        // Columns\n        boolean first = true;\n        sql.append(\" (\");\n        for (Column column : insert.getColumns()) {\n            if (!first) {\n                sql.append(\",\");\n            }\n            String str = getColumnSQL(column);\n            sql.append(str);\n            first = false;\n        }\n        sql.append(\")\");\n\n        // Values\n        first = true;\n        sql.append(\" VALUES (\");\n        for (Object value : insert.getValues()) {\n            if (!first) {\n                sql.append(\",\");\n            }\n            String str = getParameterSQL(value);\n            sql.append(str);\n            first = false;\n        }\n        sql.append(\")\");\n        return sql.toString();\n    }\n\n    @Override\n    public String getSQL(Delete delete) {\n        // Delete clause\n        StringBuilder sql = new StringBuilder();\n        String deleteClause = getDeleteStatement(delete);\n        sql.append(deleteClause);\n\n        // From clause\n        sql.append(\" \").append(getTableSQL(delete));\n\n        // Where clauses\n        List<Condition> wheres = delete.getWheres();\n        if (!wheres.isEmpty()) {\n            sql.append(\" \").append(getWhereSQL(delete));\n        }\n\n        return sql.toString();\n    }\n\n    @Override\n    public String getSelectSQL(Select select) {\n        StringBuilder clause = new StringBuilder();\n        clause.append(getSelectStatement(select));\n\n        clause.append(\" \");\n        if (select.getColumns().isEmpty()) {\n            clause.append(\"*\");\n        } else {\n            boolean first = true;\n            for (Column column : select.getColumns()) {\n                if (!first) {\n                    clause.append(\", \");\n                }\n                String str = getColumnSQL(column);\n                boolean aliasNonEmpty = !StringUtils.isBlank(column.getAlias());\n                boolean isSimpleColumn = (column instanceof SimpleColumn) && !str.equals(getColumnNameSQL(column.getAlias()));\n\n                if (aliasNonEmpty && (allowAliasInStatements() || isSimpleColumn)) {\n                    str += \" \" + getAliasForColumnSQL(column.getAlias());\n                }\n                clause.append(str);\n                first = false;\n            }\n        }\n        return clause.toString();\n    }\n\n    @Override\n    public String getFromSQL(Select select) {\n        String fromSelect = select.getFromSelect();\n        Table fromTable = select.getFromTable();\n        String from = getFromStatement(select);\n\n        if (fromSelect != null) {\n            String alias = getAliasForColumnSQL(\"dbSQL\");\n            return from  + \" (\" + fromSelect + \") \" + alias;\n        }\n        else if (fromTable != null ){\n            String table = getTableSQL(select);\n            return from + \" \" + table;\n        }\n        return \"\";\n    }\n\n    @Override\n    public String getWhereSQL(Select select) {\n        StringBuilder sql = new StringBuilder();\n        List<Condition> wheres = select.getWheres();\n        boolean first = true;\n        for (Condition condition : wheres) {\n            if (first) {\n                sql.append(getWhereStatement(select)).append(\" \");\n            } else {\n                sql.append(AND);\n            }\n            String str = getConditionSQL(condition);\n            sql.append(str);\n            first = false;\n        }\n        return sql.toString();\n    }\n\n    @Override\n    public String getWhereSQL(Delete delete) {\n        StringBuilder sql = new StringBuilder();\n        List<Condition> wheres = delete.getWheres();\n        boolean first = true;\n        for (Condition condition : wheres) {\n            if (first) {\n                sql.append(getWhereStatement(delete)).append(\" \");\n            } else {\n                sql.append(AND);\n            }\n            String str = getConditionSQL(condition);\n            sql.append(str);\n            first = false;\n        }\n        return sql.toString();\n    }\n\n    @Override\n    public String getGroupBySQL(Select select) {\n        StringBuilder sql = new StringBuilder();\n        List<Column> groupBys = select.getGroupBys();\n        boolean first = true;\n        for (Column column : groupBys) {\n            if (first) {\n                sql.append(getGroupByStatement(select)).append(\" \");\n            } else {\n                sql.append(\", \");\n            }\n            Column aliasColumn = allowAliasInStatements() ? getAliasStatement(select, column) : null;\n            sql.append(aliasColumn != null ? getAliasForStatementSQL(aliasColumn.getAlias()) : getColumnSQL(column));\n            first = false;\n        }\n        return sql.toString();\n    }\n\n    @Override\n    public String getOrderBySQL(Select select) {\n        StringBuilder sql = new StringBuilder();\n        List<SortColumn> orderBys = select.getOrderBys();\n        boolean first = true;\n        for (SortColumn column : orderBys) {\n            if (first) {\n                sql.append(getOrderByStatement(select)).append(\" \");\n            } else {\n                sql.append(\", \");\n            }\n            Column aliasColumn = allowAliasInStatements() ? getAliasStatement(select, column.getSource()) : null;\n            if (aliasColumn != null) {\n                column = new SortColumn(aliasColumn, column.getOrder());\n            }\n            String str = getSortColumnSQL(column);\n            sql.append(str);\n            first = false;\n        }\n        return sql.toString();\n    }\n\n    @Override\n    public String getOffsetLimitSQL(Select select) {\n        int offset = select.getOffset();\n        int limit = select.getLimit();\n        StringBuilder out = new StringBuilder();\n        if (limit > 0) out.append(\" LIMIT \").append(limit);\n        if (offset > 0) out.append(\" OFFSET \").append(offset);\n        return out.toString();\n    }\n\n    @Override\n    public String getSelectStatement(Select select) {\n        return \"SELECT\";\n    }\n\n    @Override\n    public String getInsertStatement(Insert insert) {\n        return \"INSERT INTO\";\n    }\n\n    @Override\n    public String getDeleteStatement(Delete delete) {\n        return \"DELETE FROM\";\n    }\n\n    @Override\n    public String getFromStatement(Select select) {\n        return \"FROM\";\n    }\n\n    @Override\n    public String getWhereStatement(Select select) {\n        return \"WHERE\";\n    }\n\n    @Override\n    public String getWhereStatement(Delete delete) {\n        return \"WHERE\";\n    }\n\n    @Override\n    public String getGroupByStatement(Select select) {\n        return \"GROUP BY\";\n    }\n\n    @Override\n    public String getOrderByStatement(Select select) {\n        return \"ORDER BY\";\n    }\n\n    // Helper methods\n\n    protected Object invokeMethod(Object o, String methodName, Object[] params) {\n        Method methods[] = o.getClass().getMethods();\n        for (int i = 0; i < methods.length; ++i) {\n            if (methodName.equals(methods[i].getName())) {\n                try {\n                    methods[i].setAccessible(true);\n                    return methods[i].invoke(o, params);\n                }\n                catch (IllegalAccessException ex) {\n                    return null;\n                }\n                catch (InvocationTargetException ite) {\n                    return null;\n                }\n            }\n        }\n        return null;\n    }\n\n    public boolean areEquals(Column column1, Column column2) {\n        if (!column1.getName().equals(column2.getName())) {\n            return false;\n        }\n        if (!column1.getClass().getName().equals(column2.getClass().getName())) {\n            return false;\n        }\n        if (column1 instanceof DynamicDateColumn) {\n            DynamicDateColumn dd1 = (DynamicDateColumn) column1;\n            DynamicDateColumn dd2 = (DynamicDateColumn) column2;\n            if (!dd1.getDateType().equals(dd2.getDateType())) {\n                return false;\n            }\n        }\n        if (column1 instanceof FixedDateColumn) {\n            FixedDateColumn fd1 = (FixedDateColumn) column1;\n            FixedDateColumn fd2 = (FixedDateColumn) column2;\n            if (!fd1.getDateType().equals(fd2.getDateType())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean allowAliasInStatements() {\n        return false;\n    }\n\n    public Column getAliasStatement(Select select, Column target) {\n        for (Column column : select.getColumns()) {\n            if (!(column instanceof SimpleColumn) &&\n                    !StringUtils.isBlank(column.getAlias()) &&\n                    areEquals(column, target)) {\n\n                return column;\n            }\n        }\n        return null;\n    }\n}\n", "patch": "@@ -545,7 +545,9 @@ public String getDateParameterSQL(Date param) {\n \n     @Override\n     public String getStringParameterSQL(String param) {\n-        return \"'\" + param + \"'\";\n+        // DASHBUILDE-113: SQL Injection on data set lookup filters\n+        String escapedParam = param.replaceAll(\"'\", \"''\");\n+        return \"'\" + escapedParam + \"'\";\n     }\n \n     @Override", "file_path": "files/2016_8\\113", "file_language": "java", "file_name": "dashbuilder-backend/dashbuilder-dataset-sql/src/main/java/org/dashbuilder/dataprovider/sql/dialect/DefaultDialect.java", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/dashbuilder/dashbuilder/raw/8574899e3b6455547b534f570b2330ff772e524b/dashbuilder-backend/dashbuilder-dataset-sql/src/test/java/org/dashbuilder/dataprovider/sql/SQLInjectionAttacksTest.java", "code": "/*\n * Copyright 2016 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.dashbuilder.dataprovider.sql;\n\nimport org.dashbuilder.dataset.DataSet;\nimport org.dashbuilder.dataset.DataSetGroupTest;\nimport org.dashbuilder.dataset.DataSetLookupFactory;\nimport org.dashbuilder.dataset.filter.FilterFactory;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.slf4j.Logger;\n\nimport static org.dashbuilder.dataset.ExpenseReportsData.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class SQLInjectionAttacksTest extends SQLDataSetTestBase {\n\n    @Mock\n    Logger logger;\n\n    @Before\n    public void setUp() throws Exception{\n        super.setUp();\n\n        sqlDataSetProvider.log = logger;\n\n        doAnswer(invocationOnMock -> {\n                String sql = (String) invocationOnMock.getArguments()[0];\n                System.out.println(sql);\n                return null;\n        }).when(logger).debug(anyString());\n    }\n\n    @Override\n    public void testAll() throws Exception {\n        testStringFilterInjection();\n    }\n\n    public void testStringFilterInjection() throws Exception {\n        DataSet result = dataSetManager.lookupDataSet(\n                DataSetLookupFactory.newDataSetLookupBuilder()\n                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)\n                        .filter(COLUMN_EMPLOYEE, FilterFactory.equalsTo(\"David' OR EMPLOYEE != 'Toni\"))\n                        .buildLookup());\n\n        assertEquals(result.getRowCount(), 0);\n\n        result = dataSetManager.lookupDataSet(\n                DataSetLookupFactory.newDataSetLookupBuilder()\n                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)\n                        .filter(COLUMN_EMPLOYEE, FilterFactory.equalsTo(\"David\\\" OR EMPLOYEE != \\\"Toni\"))\n                        .buildLookup());\n\n        assertEquals(result.getRowCount(), 0);\n\n        result = dataSetManager.lookupDataSet(\n                DataSetLookupFactory.newDataSetLookupBuilder()\n                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)\n                        .filter(COLUMN_EMPLOYEE, FilterFactory.equalsTo(\"David` OR EMPLOYEE != `Toni\"))\n                        .buildLookup());\n\n        assertEquals(result.getRowCount(), 0);\n\n    }\n\n    @Test\n    public void testDropTable() throws Exception {\n        DataSet result = dataSetManager.lookupDataSet(\n                DataSetLookupFactory.newDataSetLookupBuilder()\n                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)\n                        .filter(COLUMN_EMPLOYEE, FilterFactory.equalsTo(\"David'; DROP TABLE 'EXPENSE_REPORTS; SELECT 'a' = 'a\"))\n                        .buildLookup());\n\n        result = dataSetManager.lookupDataSet(\n                DataSetLookupFactory.newDataSetLookupBuilder()\n                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)\n                        .buildLookup());\n\n        assertEquals(result.getRowCount(), 50);\n    }\n}\n", "code_before": "/*\n * Copyright 2016 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.dashbuilder.dataprovider.sql;\n\nimport org.dashbuilder.dataset.DataSet;\nimport org.dashbuilder.dataset.DataSetGroupTest;\nimport org.dashbuilder.dataset.DataSetLookupFactory;\nimport org.dashbuilder.dataset.filter.FilterFactory;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport org.slf4j.Logger;\n\nimport static org.dashbuilder.dataset.ExpenseReportsData.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class SQLInjectionAttacksTest extends SQLDataSetTestBase {\n\n    @Mock\n    Logger logger;\n\n    @Before\n    public void setUp() throws Exception{\n        super.setUp();\n\n        sqlDataSetProvider.log = logger;\n\n        doAnswer(invocationOnMock -> {\n                String sql = (String) invocationOnMock.getArguments()[0];\n                System.out.println(sql);\n                return null;\n        }).when(logger).debug(anyString());\n    }\n\n    @Override\n    public void testAll() throws Exception {\n        testStringFilterInjection();\n    }\n\n    public void testStringFilterInjection() throws Exception {\n        DataSet result = dataSetManager.lookupDataSet(\n                DataSetLookupFactory.newDataSetLookupBuilder()\n                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)\n                        .filter(COLUMN_EMPLOYEE, FilterFactory.equalsTo(\"David' OR EMPLOYEE != 'Toni\"))\n                        .buildLookup());\n\n        assertEquals(result.getRowCount(), 0);\n\n        result = dataSetManager.lookupDataSet(\n                DataSetLookupFactory.newDataSetLookupBuilder()\n                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)\n                        .filter(COLUMN_EMPLOYEE, FilterFactory.equalsTo(\"David\\\" OR EMPLOYEE != \\\"Toni\"))\n                        .buildLookup());\n\n        assertEquals(result.getRowCount(), 0);\n\n        result = dataSetManager.lookupDataSet(\n                DataSetLookupFactory.newDataSetLookupBuilder()\n                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)\n                        .filter(COLUMN_EMPLOYEE, FilterFactory.equalsTo(\"David` OR EMPLOYEE != `Toni\"))\n                        .buildLookup());\n\n        assertEquals(result.getRowCount(), 0);\n\n    }\n\n    @Test\n    public void testDropTable() throws Exception {\n        DataSet result = dataSetManager.lookupDataSet(\n                DataSetLookupFactory.newDataSetLookupBuilder()\n                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)\n                        .filter(COLUMN_EMPLOYEE, FilterFactory.equalsTo(\"David'; DROP TABLE 'EXPENSE_REPORTS; SELECT 'a' = 'a\"))\n                        .buildLookup());\n\n        result = dataSetManager.lookupDataSet(\n                DataSetLookupFactory.newDataSetLookupBuilder()\n                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)\n                        .buildLookup());\n\n        assertEquals(result.getRowCount(), 50);\n    }\n}\n", "patch": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.dataprovider.sql;\n+\n+import org.dashbuilder.dataset.DataSet;\n+import org.dashbuilder.dataset.DataSetGroupTest;\n+import org.dashbuilder.dataset.DataSetLookupFactory;\n+import org.dashbuilder.dataset.filter.FilterFactory;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.slf4j.Logger;\n+\n+import static org.dashbuilder.dataset.ExpenseReportsData.*;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SQLInjectionAttacksTest extends SQLDataSetTestBase {\n+\n+    @Mock\n+    Logger logger;\n+\n+    @Before\n+    public void setUp() throws Exception{\n+        super.setUp();\n+\n+        sqlDataSetProvider.log = logger;\n+\n+        doAnswer(invocationOnMock -> {\n+                String sql = (String) invocationOnMock.getArguments()[0];\n+                System.out.println(sql);\n+                return null;\n+        }).when(logger).debug(anyString());\n+    }\n+\n+    @Override\n+    public void testAll() throws Exception {\n+        testStringFilterInjection();\n+    }\n+\n+    public void testStringFilterInjection() throws Exception {\n+        DataSet result = dataSetManager.lookupDataSet(\n+                DataSetLookupFactory.newDataSetLookupBuilder()\n+                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)\n+                        .filter(COLUMN_EMPLOYEE, FilterFactory.equalsTo(\"David' OR EMPLOYEE != 'Toni\"))\n+                        .buildLookup());\n+\n+        assertEquals(result.getRowCount(), 0);\n+\n+        result = dataSetManager.lookupDataSet(\n+                DataSetLookupFactory.newDataSetLookupBuilder()\n+                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)\n+                        .filter(COLUMN_EMPLOYEE, FilterFactory.equalsTo(\"David\\\" OR EMPLOYEE != \\\"Toni\"))\n+                        .buildLookup());\n+\n+        assertEquals(result.getRowCount(), 0);\n+\n+        result = dataSetManager.lookupDataSet(\n+                DataSetLookupFactory.newDataSetLookupBuilder()\n+                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)\n+                        .filter(COLUMN_EMPLOYEE, FilterFactory.equalsTo(\"David` OR EMPLOYEE != `Toni\"))\n+                        .buildLookup());\n+\n+        assertEquals(result.getRowCount(), 0);\n+\n+    }\n+\n+    @Test\n+    public void testDropTable() throws Exception {\n+        DataSet result = dataSetManager.lookupDataSet(\n+                DataSetLookupFactory.newDataSetLookupBuilder()\n+                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)\n+                        .filter(COLUMN_EMPLOYEE, FilterFactory.equalsTo(\"David'; DROP TABLE 'EXPENSE_REPORTS; SELECT 'a' = 'a\"))\n+                        .buildLookup());\n+\n+        result = dataSetManager.lookupDataSet(\n+                DataSetLookupFactory.newDataSetLookupBuilder()\n+                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)\n+                        .buildLookup());\n+\n+        assertEquals(result.getRowCount(), 50);\n+    }\n+}", "file_path": "files/2016_8\\114", "file_language": "java", "file_name": "dashbuilder-backend/dashbuilder-dataset-sql/src/test/java/org/dashbuilder/dataprovider/sql/SQLInjectionAttacksTest.java", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}, {"raw_url": "https://github.com/dashbuilder/dashbuilder/raw/8574899e3b6455547b534f570b2330ff772e524b/dashbuilder-backend/dashbuilder-dataset-sql/src/test/java/org/dashbuilder/dataprovider/sql/SQLTestSuite.java", "code": "/*\n * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.dashbuilder.dataprovider.sql;\n\nimport java.util.List;\nimport java.util.ArrayList;\n\nimport org.junit.Before;\n\npublic class SQLTestSuite extends SQLDataSetTestBase {\n\n    protected <T extends SQLDataSetTestBase> T setUp(T test) throws Exception {\n        test.testSettings = testSettings;\n        test.conn = conn;\n        return test;\n    }\n\n    protected List<SQLDataSetTestBase> sqlTestList = new ArrayList<SQLDataSetTestBase>();\n\n    @Before\n    public void setUp() throws Exception {\n        super.setUp();\n        sqlTestList.add(setUp(new SQLDataSetDefTest()));\n        sqlTestList.add(setUp(new SQLDataSetTrimTest()));\n        sqlTestList.add(setUp(new SQLTableDataSetLookupTest()));\n        sqlTestList.add(setUp(new SQLQueryDataSetLookupTest()));\n        sqlTestList.add(setUp(new SQLInjectionAttacksTest()));\n    }\n\n    public void testAll() throws Exception {\n        for (SQLDataSetTestBase testBase : sqlTestList) {\n            testBase.testAll();\n        }\n    }\n}\n", "code_before": "/*\n * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.dashbuilder.dataprovider.sql;\n\nimport java.util.List;\nimport java.util.ArrayList;\n\nimport org.junit.Before;\n\npublic class SQLTestSuite extends SQLDataSetTestBase {\n\n    protected <T extends SQLDataSetTestBase> T setUp(T test) throws Exception {\n        test.testSettings = testSettings;\n        test.conn = conn;\n        return test;\n    }\n\n    protected List<SQLDataSetTestBase> sqlTestList = new ArrayList<SQLDataSetTestBase>();\n\n    @Before\n    public void setUp() throws Exception {\n        super.setUp();\n        sqlTestList.add(setUp(new SQLDataSetDefTest()));\n        sqlTestList.add(setUp(new SQLDataSetTrimTest()));\n        sqlTestList.add(setUp(new SQLTableDataSetLookupTest()));\n        sqlTestList.add(setUp(new SQLQueryDataSetLookupTest()));\n        sqlTestList.add(setUp(new SQLInjectionAttacksTest()));\n    }\n\n    public void testAll() throws Exception {\n        for (SQLDataSetTestBase testBase : sqlTestList) {\n            testBase.testAll();\n        }\n    }\n}\n", "patch": "@@ -37,6 +37,7 @@ public void setUp() throws Exception {\n         sqlTestList.add(setUp(new SQLDataSetTrimTest()));\n         sqlTestList.add(setUp(new SQLTableDataSetLookupTest()));\n         sqlTestList.add(setUp(new SQLQueryDataSetLookupTest()));\n+        sqlTestList.add(setUp(new SQLInjectionAttacksTest()));\n     }\n \n     public void testAll() throws Exception {", "file_path": "files/2016_8\\115", "file_language": "java", "file_name": "dashbuilder-backend/dashbuilder-dataset-sql/src/test/java/org/dashbuilder/dataprovider/sql/SQLTestSuite.java", "outdated_file_modify": null, "outdated_file_before": null, "outdated_file_after": null}], "outdated": 0}
